{"ast":null,"code":"import _toConsumableArray from \"/Users/adepertat/Dropbox/ECOLES/Openclassroom/P6_de_Pertat_Antoine/AntoinedePertat_6_240521/frontend/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _createClass from \"/Users/adepertat/Dropbox/ECOLES/Openclassroom/P6_de_Pertat_Antoine/AntoinedePertat_6_240521/frontend/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"/Users/adepertat/Dropbox/ECOLES/Openclassroom/P6_de_Pertat_Antoine/AntoinedePertat_6_240521/frontend/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"/Users/adepertat/Dropbox/ECOLES/Openclassroom/P6_de_Pertat_Antoine/AntoinedePertat_6_240521/frontend/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/adepertat/Dropbox/ECOLES/Openclassroom/P6_de_Pertat_Antoine/AntoinedePertat_6_240521/frontend/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _classCallCheck from \"/Users/adepertat/Dropbox/ECOLES/Openclassroom/P6_de_Pertat_Antoine/AntoinedePertat_6_240521/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { animate, state, style, transition, trigger } from '@angular/animations';\nimport { ActiveDescendantKeyManager } from '@angular/cdk/a11y';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { SelectionModel } from '@angular/cdk/collections';\nimport { A, DOWN_ARROW, END, ENTER, HOME, LEFT_ARROW, RIGHT_ARROW, SPACE, UP_ARROW } from '@angular/cdk/keycodes';\nimport { CdkConnectedOverlay, Overlay, OverlayModule } from '@angular/cdk/overlay';\nimport { ViewportRuler } from '@angular/cdk/scrolling';\nimport { Attribute, ChangeDetectionStrategy, ChangeDetectorRef, Component, ContentChild, ContentChildren, Directive, ElementRef, EventEmitter, Inject, InjectionToken, Input, isDevMode, NgZone, Optional, Output, Self, ViewChild, ViewEncapsulation, NgModule } from '@angular/core';\nimport { FormGroupDirective, NgControl, NgForm } from '@angular/forms';\nimport { _countGroupLabelsBeforeOption, _getOptionScrollPosition, ErrorStateMatcher, MAT_OPTION_PARENT_COMPONENT, MatOptgroup, MatOption, mixinDisabled, mixinDisableRipple, mixinErrorState, mixinTabIndex, MatCommonModule, MatOptionModule } from '@angular/material/core';\nimport { MatFormField, MatFormFieldControl, MatFormFieldModule } from '@angular/material/form-field';\nimport { defer, merge, Subject } from 'rxjs';\nimport { distinctUntilChanged, filter, map, startWith, switchMap, take, takeUntil } from 'rxjs/operators';\nimport { CommonModule } from '@angular/common';\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/** *\n * The following are all the animations for the mat-select component, with each\n * const containing the metadata for one animation.\n *\n * The values below match the implementation of the AngularJS Material mat-select animation.\n * \\@docs-private\n  @type {?} */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/scrolling';\nimport * as ɵngcc2 from '@angular/material/core';\nimport * as ɵngcc3 from '@angular/cdk/bidi';\nimport * as ɵngcc4 from '@angular/forms';\nimport * as ɵngcc5 from '@angular/material/form-field';\nimport * as ɵngcc6 from '@angular/cdk/overlay';\nimport * as ɵngcc7 from '@angular/common';\nvar _c0 = [\"trigger\"];\nvar _c1 = [\"panel\"];\n\nfunction MatSelect_span_4_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"span\", 8);\n    ɵngcc0.ɵɵtext(1);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r2 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate(ctx_r2.placeholder || \"\\xA0\");\n  }\n}\n\nfunction MatSelect_span_5_span_1_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"span\");\n    ɵngcc0.ɵɵtext(1);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r5 = ɵngcc0.ɵɵnextContext(2);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate(ctx_r5.triggerValue || \"\\xA0\");\n  }\n}\n\nfunction MatSelect_span_5_ng_content_2_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵprojection(0, 0, [\"*ngSwitchCase\", \"true\"]);\n  }\n}\n\nfunction MatSelect_span_5_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"span\", 9);\n    ɵngcc0.ɵɵtemplate(1, MatSelect_span_5_span_1_Template, 2, 1, \"span\", 10);\n    ɵngcc0.ɵɵtemplate(2, MatSelect_span_5_ng_content_2_Template, 1, 0, \"ng-content\", 11);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r3 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"ngSwitch\", !!ctx_r3.customTrigger);\n    ɵngcc0.ɵɵadvance(2);\n    ɵngcc0.ɵɵproperty(\"ngSwitchCase\", true);\n  }\n}\n\nfunction MatSelect_ng_template_8_Template(rf, ctx) {\n  if (rf & 1) {\n    var _r9 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵelementStart(0, \"div\", 12, 13);\n    ɵngcc0.ɵɵlistener(\"@transformPanel.done\", function MatSelect_ng_template_8_Template_div_animation_transformPanel_done_0_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r9);\n      var ctx_r8 = ɵngcc0.ɵɵnextContext();\n      return ctx_r8._panelDoneAnimatingStream.next($event.toState);\n    })(\"keydown\", function MatSelect_ng_template_8_Template_div_keydown_0_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r9);\n      var ctx_r10 = ɵngcc0.ɵɵnextContext();\n      return ctx_r10._handleKeydown($event);\n    });\n    ɵngcc0.ɵɵprojection(2, 1);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r4 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵclassMapInterpolate1(\"mat-select-panel \", ctx_r4._getPanelTheme(), \"\");\n    ɵngcc0.ɵɵstyleProp(\"transform-origin\", ctx_r4._transformOrigin)(\"font-size\", ctx_r4._triggerFontSize, \"px\");\n    ɵngcc0.ɵɵproperty(\"ngClass\", ctx_r4.panelClass)(\"@transformPanel\", ctx_r4.multiple ? \"showing-multiple\" : \"showing\");\n  }\n}\n\nvar _c2 = [[[\"mat-select-trigger\"]], \"*\"];\nvar _c3 = [\"mat-select-trigger\", \"*\"];\nvar matSelectAnimations = {\n  /**\n     * This animation transforms the select's overlay panel on and off the page.\n     *\n     * When the panel is attached to the DOM, it expands its width by the amount of padding, scales it\n     * up to 100% on the Y axis, fades in its border, and translates slightly up and to the\n     * side to ensure the option text correctly overlaps the trigger text.\n     *\n     * When the panel is removed from the DOM, it simply fades out linearly.\n     */\n  transformPanel: trigger('transformPanel', [state('void', style({\n    transform: 'scaleY(0.8)',\n    minWidth: '100%',\n    opacity: 0\n  })), state('showing', style({\n    opacity: 1,\n    minWidth: 'calc(100% + 32px)',\n    // 32px = 2 * 16px padding\n    transform: 'scaleY(1)'\n  })), state('showing-multiple', style({\n    opacity: 1,\n    minWidth: 'calc(100% + 64px)',\n    // 64px = 48px padding on the left + 16px padding on the right\n    transform: 'scaleY(1)'\n  })), transition('void => *', animate('120ms cubic-bezier(0, 0, 0.2, 1)')), transition('* => void', animate('100ms 25ms linear', style({\n    opacity: 0\n  })))]),\n\n  /**\n     * This animation fades in the background color and text content of the\n     * select's options. It is time delayed to occur 100ms after the overlay\n     * panel has transformed in.\n     * @deprecated Not used anymore. To be removed.\n     * @breaking-change 8.0.0\n     */\n  fadeInContent: trigger('fadeInContent', [state('showing', style({\n    opacity: 1\n  })), transition('void => showing', [style({\n    opacity: 0\n  }), animate('150ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)')])])\n};\n/** *\n * @deprecated\n * \\@breaking-change 8.0.0\n * \\@docs-private\n  @type {?} */\n\nvar transformPanel = matSelectAnimations.transformPanel;\n/** *\n * @deprecated\n * \\@breaking-change 8.0.0\n * \\@docs-private\n  @type {?} */\n\nvar fadeInContent = matSelectAnimations.fadeInContent;\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * Returns an exception to be thrown when attempting to change a select's `multiple` option\n * after initialization.\n * \\@docs-private\n * @return {?}\n */\n\nfunction getMatSelectDynamicMultipleError() {\n  return Error('Cannot change `multiple` mode of select after initialization.');\n}\n/**\n * Returns an exception to be thrown when attempting to assign a non-array value to a select\n * in `multiple` mode. Note that `undefined` and `null` are still valid values to allow for\n * resetting the value.\n * \\@docs-private\n * @return {?}\n */\n\n\nfunction getMatSelectNonArrayValueError() {\n  return Error('Value must be an array in multiple-selection mode.');\n}\n/**\n * Returns an exception to be thrown when assigning a non-function value to the comparator\n * used to determine if a value corresponds to an option. Note that whether the function\n * actually takes two values and returns a boolean is not checked.\n * @return {?}\n */\n\n\nfunction getMatSelectNonFunctionValueError() {\n  return Error('`compareWith` must be a function.');\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/** @type {?} */\n\n\nvar nextUniqueId = 0;\n/** *\n * The max height of the select's overlay panel\n  @type {?} */\n\nvar SELECT_PANEL_MAX_HEIGHT = 256;\n/** *\n * The panel's padding on the x-axis\n  @type {?} */\n\nvar SELECT_PANEL_PADDING_X = 16;\n/** *\n * The panel's x axis padding if it is indented (e.g. there is an option group).\n  @type {?} */\n\nvar SELECT_PANEL_INDENT_PADDING_X = SELECT_PANEL_PADDING_X * 2;\n/** *\n * The height of the select items in `em` units.\n  @type {?} */\n\nvar SELECT_ITEM_HEIGHT_EM = 3;\n/** *\n * Distance between the panel edge and the option text in\n * multi-selection mode.\n *\n * Calculated as:\n * (SELECT_PANEL_PADDING_X * 1.5) + 20 = 44\n * The padding is multiplied by 1.5 because the checkbox's margin is half the padding.\n * The checkbox width is 16px.\n  @type {?} */\n\nvar SELECT_MULTIPLE_PANEL_PADDING_X = 0;\n/** *\n * The select panel will only \"fit\" inside the viewport if it is positioned at\n * this value or more away from the viewport boundary.\n  @type {?} */\n\nvar SELECT_PANEL_VIEWPORT_PADDING = 8;\n/** *\n * Injection token that determines the scroll handling while a select is open.\n  @type {?} */\n\nvar MAT_SELECT_SCROLL_STRATEGY = new InjectionToken('mat-select-scroll-strategy');\n/**\n * \\@docs-private\n * @param {?} overlay\n * @return {?}\n */\n\nfunction MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay) {\n  return function () {\n    return overlay.scrollStrategies.reposition();\n  };\n}\n/** *\n * \\@docs-private\n  @type {?} */\n\n\nvar MAT_SELECT_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_SELECT_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY\n};\n/**\n * Change event object that is emitted when the select value has changed.\n */\n\nvar MatSelectChange =\n/**\n * @param {?} source\n * @param {?} value\n */\nfunction MatSelectChange(source, value) {\n  _classCallCheck(this, MatSelectChange);\n\n  this.source = source;\n  this.value = value;\n};\n/**\n * \\@docs-private\n */\n\n\nvar MatSelectBase =\n/**\n * @param {?} _elementRef\n * @param {?} _defaultErrorStateMatcher\n * @param {?} _parentForm\n * @param {?} _parentFormGroup\n * @param {?} ngControl\n */\nfunction MatSelectBase(_elementRef, _defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl) {\n  _classCallCheck(this, MatSelectBase);\n\n  this._elementRef = _elementRef;\n  this._defaultErrorStateMatcher = _defaultErrorStateMatcher;\n  this._parentForm = _parentForm;\n  this._parentFormGroup = _parentFormGroup;\n  this.ngControl = ngControl;\n};\n/** @type {?} */\n\n\nvar _MatSelectMixinBase = mixinDisableRipple(mixinTabIndex(mixinDisabled(mixinErrorState(MatSelectBase))));\n/**\n * Allows the user to customize the trigger that is displayed when the select has a value.\n */\n\n\nvar MatSelectTrigger = function MatSelectTrigger() {\n  _classCallCheck(this, MatSelectTrigger);\n};\n\nMatSelectTrigger.ɵfac = function MatSelectTrigger_Factory(t) {\n  return new (t || MatSelectTrigger)();\n};\n\nMatSelectTrigger.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n  type: MatSelectTrigger,\n  selectors: [[\"mat-select-trigger\"]]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatSelectTrigger, [{\n    type: Directive,\n    args: [{\n      selector: 'mat-select-trigger'\n    }]\n  }], null, null);\n})();\n\nvar MatSelect = /*#__PURE__*/function (_MatSelectMixinBase2) {\n  _inherits(MatSelect, _MatSelectMixinBase2);\n\n  var _super = _createSuper(MatSelect);\n\n  /**\n   * @param {?} _viewportRuler\n   * @param {?} _changeDetectorRef\n   * @param {?} _ngZone\n   * @param {?} _defaultErrorStateMatcher\n   * @param {?} elementRef\n   * @param {?} _dir\n   * @param {?} _parentForm\n   * @param {?} _parentFormGroup\n   * @param {?} _parentFormField\n   * @param {?} ngControl\n   * @param {?} tabIndex\n   * @param {?} scrollStrategyFactory\n   */\n  function MatSelect(_viewportRuler, _changeDetectorRef, _ngZone, _defaultErrorStateMatcher, elementRef, _dir, _parentForm, _parentFormGroup, _parentFormField, ngControl, tabIndex, scrollStrategyFactory) {\n    var _this;\n\n    _classCallCheck(this, MatSelect);\n\n    _this = _super.call(this, elementRef, _defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n    _this._viewportRuler = _viewportRuler;\n    _this._changeDetectorRef = _changeDetectorRef;\n    _this._ngZone = _ngZone;\n    _this._dir = _dir;\n    _this._parentFormField = _parentFormField;\n    _this.ngControl = ngControl;\n    /**\n     * Whether or not the overlay panel is open.\n     */\n\n    _this._panelOpen = false;\n    /**\n     * Whether filling out the select is required in the form.\n     */\n\n    _this._required = false;\n    /**\n     * The scroll position of the overlay panel, calculated to center the selected option.\n     */\n\n    _this._scrollTop = 0;\n    /**\n     * Whether the component is in multiple selection mode.\n     */\n\n    _this._multiple = false;\n    /**\n     * Comparison function to specify which option is displayed. Defaults to object equality.\n     */\n\n    _this._compareWith = function (o1, o2) {\n      return o1 === o2;\n    };\n    /**\n     * Unique id for this input.\n     */\n\n\n    _this._uid = \"mat-select-\".concat(nextUniqueId++);\n    /**\n     * Emits whenever the component is destroyed.\n     */\n\n    _this._destroy = new Subject();\n    /**\n     * The cached font-size of the trigger element.\n     */\n\n    _this._triggerFontSize = 0;\n    /**\n     * `View -> model callback called when value changes`\n     */\n\n    _this._onChange = function () {};\n    /**\n     * `View -> model callback called when select has been touched`\n     */\n\n\n    _this._onTouched = function () {};\n    /**\n     * The IDs of child options to be passed to the aria-owns attribute.\n     */\n\n\n    _this._optionIds = '';\n    /**\n     * The value of the select panel's transform-origin property.\n     */\n\n    _this._transformOrigin = 'top';\n    /**\n     * Emits when the panel element is finished transforming in.\n     */\n\n    _this._panelDoneAnimatingStream = new Subject();\n    /**\n     * The y-offset of the overlay panel in relation to the trigger's top start corner.\n     * This must be adjusted to align the selected option text over the trigger text.\n     * when the panel opens. Will change based on the y-position of the selected option.\n     */\n\n    _this._offsetY = 0;\n    /**\n     * This position config ensures that the top \"start\" corner of the overlay\n     * is aligned with with the top \"start\" of the origin by default (overlapping\n     * the trigger completely). If the panel cannot fit below the trigger, it\n     * will fall back to a position above the trigger.\n     */\n\n    _this._positions = [{\n      originX: 'start',\n      originY: 'top',\n      overlayX: 'start',\n      overlayY: 'top'\n    }, {\n      originX: 'start',\n      originY: 'bottom',\n      overlayX: 'start',\n      overlayY: 'bottom'\n    }];\n    /**\n     * Whether the component is disabling centering of the active option over the trigger.\n     */\n\n    _this._disableOptionCentering = false;\n    _this._focused = false;\n    /**\n     * A name for this control that can be used by `mat-form-field`.\n     */\n\n    _this.controlType = 'mat-select';\n    /**\n     * Aria label of the select. If not specified, the placeholder will be used as label.\n     */\n\n    _this.ariaLabel = '';\n    /**\n     * Combined stream of all of the child options' change events.\n     */\n\n    _this.optionSelectionChanges = defer(function () {\n      if (_this.options) {\n        return merge.apply(void 0, _toConsumableArray(_this.options.map(function (option) {\n          return option.onSelectionChange;\n        })));\n      }\n\n      return _this._ngZone.onStable.asObservable().pipe(take(1), switchMap(function () {\n        return _this.optionSelectionChanges;\n      }));\n    });\n    /**\n     * Event emitted when the select panel has been toggled.\n     */\n\n    _this.openedChange = new EventEmitter();\n    /**\n     * Event emitted when the select has been opened.\n     */\n\n    _this._openedStream = _this.openedChange.pipe(filter(function (o) {\n      return o;\n    }), map(function () {}));\n    /**\n     * Event emitted when the select has been closed.\n     */\n\n    _this._closedStream = _this.openedChange.pipe(filter(function (o) {\n      return !o;\n    }), map(function () {}));\n    /**\n     * Event emitted when the selected value has been changed by the user.\n     */\n\n    _this.selectionChange = new EventEmitter();\n    /**\n     * Event that emits whenever the raw value of the select changes. This is here primarily\n     * to facilitate the two-way binding for the `value` input.\n     * \\@docs-private\n     */\n\n    _this.valueChange = new EventEmitter();\n\n    if (_this.ngControl) {\n      // Note: we provide the value accessor through here, instead of\n      // the `providers` to avoid running into a circular import.\n      _this.ngControl.valueAccessor = _assertThisInitialized(_this);\n    }\n\n    _this._scrollStrategyFactory = scrollStrategyFactory;\n    _this._scrollStrategy = _this._scrollStrategyFactory();\n    _this.tabIndex = parseInt(tabIndex) || 0; // Force setter to be called in case id was not specified.\n\n    _this.id = _this.id;\n    return _this;\n  }\n  /**\n   * Whether the select is focused.\n   * @return {?}\n   */\n\n\n  _createClass(MatSelect, [{\n    key: \"focused\",\n    get: function get() {\n      return this._focused || this._panelOpen;\n    }\n    /**\n     * @deprecated Setter to be removed as this property is intended to be readonly.\n     * \\@breaking-change 8.0.0\n     * @param {?} value\n     * @return {?}\n     */\n    ,\n    set: function set(value) {\n      this._focused = value;\n    }\n    /**\n     * Placeholder to be shown if no value has been selected.\n     * @return {?}\n     */\n\n  }, {\n    key: \"placeholder\",\n    get: function get() {\n      return this._placeholder;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ,\n    set: function set(value) {\n      this._placeholder = value;\n      this.stateChanges.next();\n    }\n    /**\n     * Whether the component is required.\n     * @return {?}\n     */\n\n  }, {\n    key: \"required\",\n    get: function get() {\n      return this._required;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ,\n    set: function set(value) {\n      this._required = coerceBooleanProperty(value);\n      this.stateChanges.next();\n    }\n    /**\n     * Whether the user should be allowed to select multiple options.\n     * @return {?}\n     */\n\n  }, {\n    key: \"multiple\",\n    get: function get() {\n      return this._multiple;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ,\n    set: function set(value) {\n      if (this._selectionModel) {\n        throw getMatSelectDynamicMultipleError();\n      }\n\n      this._multiple = coerceBooleanProperty(value);\n    }\n    /**\n     * Whether to center the active option over the trigger.\n     * @return {?}\n     */\n\n  }, {\n    key: \"disableOptionCentering\",\n    get: function get() {\n      return this._disableOptionCentering;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ,\n    set: function set(value) {\n      this._disableOptionCentering = coerceBooleanProperty(value);\n    }\n    /**\n     * Function to compare the option values with the selected values. The first argument\n     * is a value from an option. The second is a value from the selection. A boolean\n     * should be returned.\n     * @return {?}\n     */\n\n  }, {\n    key: \"compareWith\",\n    get: function get() {\n      return this._compareWith;\n    }\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    ,\n    set: function set(fn) {\n      if (typeof fn !== 'function') {\n        throw getMatSelectNonFunctionValueError();\n      }\n\n      this._compareWith = fn;\n\n      if (this._selectionModel) {\n        // A different comparator means the selection could change.\n        this._initializeSelection();\n      }\n    }\n    /**\n     * Value of the select control.\n     * @return {?}\n     */\n\n  }, {\n    key: \"value\",\n    get: function get() {\n      return this._value;\n    }\n    /**\n     * @param {?} newValue\n     * @return {?}\n     */\n    ,\n    set: function set(newValue) {\n      if (newValue !== this._value) {\n        this.writeValue(newValue);\n        this._value = newValue;\n      }\n    }\n    /**\n     * Unique id of the element.\n     * @return {?}\n     */\n\n  }, {\n    key: \"id\",\n    get: function get() {\n      return this._id;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ,\n    set: function set(value) {\n      this._id = value || this._uid;\n      this.stateChanges.next();\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngOnInit\",\n    value: function ngOnInit() {\n      var _this2 = this;\n\n      this._selectionModel = new SelectionModel(this.multiple);\n      this.stateChanges.next(); // We need `distinctUntilChanged` here, because some browsers will\n      // fire the animation end event twice for the same animation. See:\n      // https://github.com/angular/angular/issues/24084\n\n      this._panelDoneAnimatingStream.pipe(distinctUntilChanged(), takeUntil(this._destroy)).subscribe(function () {\n        if (_this2.panelOpen) {\n          _this2._scrollTop = 0;\n\n          _this2.openedChange.emit(true);\n        } else {\n          _this2.openedChange.emit(false);\n\n          _this2.overlayDir.offsetX = 0;\n\n          _this2._changeDetectorRef.markForCheck();\n        }\n      });\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngAfterContentInit\",\n    value: function ngAfterContentInit() {\n      var _this3 = this;\n\n      this._initKeyManager();\n\n      this._selectionModel.onChange.pipe(takeUntil(this._destroy)).subscribe(function (event) {\n        event.added.forEach(function (option) {\n          return option.select();\n        });\n        event.removed.forEach(function (option) {\n          return option.deselect();\n        });\n      });\n\n      this.options.changes.pipe(startWith(null), takeUntil(this._destroy)).subscribe(function () {\n        _this3._resetOptions();\n\n        _this3._initializeSelection();\n      });\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngDoCheck\",\n    value: function ngDoCheck() {\n      if (this.ngControl) {\n        this.updateErrorState();\n      }\n    }\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngOnChanges\",\n    value: function ngOnChanges(changes) {\n      // Updating the disabled state is handled by `mixinDisabled`, but we need to additionally let\n      // the parent form field know to run change detection when the disabled state changes.\n      if (changes[\"disabled\"]) {\n        this.stateChanges.next();\n      }\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      this._destroy.next();\n\n      this._destroy.complete();\n\n      this.stateChanges.complete();\n    }\n    /**\n     * Toggles the overlay panel open or closed.\n     * @return {?}\n     */\n\n  }, {\n    key: \"toggle\",\n    value: function toggle() {\n      this.panelOpen ? this.close() : this.open();\n    }\n    /**\n     * Opens the overlay panel.\n     * @return {?}\n     */\n\n  }, {\n    key: \"open\",\n    value: function open() {\n      var _this4 = this;\n\n      if (this.disabled || !this.options || !this.options.length || this._panelOpen) {\n        return;\n      }\n\n      this._triggerRect = this.trigger.nativeElement.getBoundingClientRect(); // Note: The computed font-size will be a string pixel value (e.g. \"16px\").\n      // `parseInt` ignores the trailing 'px' and converts this to a number.\n\n      this._triggerFontSize = parseInt(getComputedStyle(this.trigger.nativeElement).fontSize || '0');\n      this._panelOpen = true;\n\n      this._keyManager.withHorizontalOrientation(null);\n\n      this._calculateOverlayPosition();\n\n      this._highlightCorrectOption();\n\n      this._changeDetectorRef.markForCheck(); // Set the font size on the panel element once it exists.\n\n\n      this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(function () {\n        if (_this4._triggerFontSize && _this4.overlayDir.overlayRef && _this4.overlayDir.overlayRef.overlayElement) {\n          _this4.overlayDir.overlayRef.overlayElement.style.fontSize = \"\".concat(_this4._triggerFontSize, \"px\");\n        }\n      });\n    }\n    /**\n     * Closes the overlay panel and focuses the host element.\n     * @return {?}\n     */\n\n  }, {\n    key: \"close\",\n    value: function close() {\n      if (this._panelOpen) {\n        this._panelOpen = false;\n\n        this._keyManager.withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr');\n\n        this._changeDetectorRef.markForCheck();\n\n        this._onTouched();\n      }\n    }\n    /**\n     * Sets the select's value. Part of the ControlValueAccessor interface\n     * required to integrate with Angular's core forms API.\n     *\n     * @param {?} value New value to be written to the model.\n     * @return {?}\n     */\n\n  }, {\n    key: \"writeValue\",\n    value: function writeValue(value) {\n      if (this.options) {\n        this._setSelectionByValue(value);\n      }\n    }\n    /**\n     * Saves a callback function to be invoked when the select's value\n     * changes from user input. Part of the ControlValueAccessor interface\n     * required to integrate with Angular's core forms API.\n     *\n     * @param {?} fn Callback to be triggered when the value changes.\n     * @return {?}\n     */\n\n  }, {\n    key: \"registerOnChange\",\n    value: function registerOnChange(fn) {\n      this._onChange = fn;\n    }\n    /**\n     * Saves a callback function to be invoked when the select is blurred\n     * by the user. Part of the ControlValueAccessor interface required\n     * to integrate with Angular's core forms API.\n     *\n     * @param {?} fn Callback to be triggered when the component has been touched.\n     * @return {?}\n     */\n\n  }, {\n    key: \"registerOnTouched\",\n    value: function registerOnTouched(fn) {\n      this._onTouched = fn;\n    }\n    /**\n     * Disables the select. Part of the ControlValueAccessor interface required\n     * to integrate with Angular's core forms API.\n     *\n     * @param {?} isDisabled Sets whether the component is disabled.\n     * @return {?}\n     */\n\n  }, {\n    key: \"setDisabledState\",\n    value: function setDisabledState(isDisabled) {\n      this.disabled = isDisabled;\n\n      this._changeDetectorRef.markForCheck();\n\n      this.stateChanges.next();\n    }\n    /**\n     * Whether or not the overlay panel is open.\n     * @return {?}\n     */\n\n  }, {\n    key: \"panelOpen\",\n    get: function get() {\n      return this._panelOpen;\n    }\n    /**\n     * The currently selected option.\n     * @return {?}\n     */\n\n  }, {\n    key: \"selected\",\n    get: function get() {\n      return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n    }\n    /**\n     * The value displayed in the trigger.\n     * @return {?}\n     */\n\n  }, {\n    key: \"triggerValue\",\n    get: function get() {\n      if (this.empty) {\n        return '';\n      }\n\n      if (this._multiple) {\n        /** @type {?} */\n        var selectedOptions = this._selectionModel.selected.map(function (option) {\n          return option.viewValue;\n        });\n\n        if (this._isRtl()) {\n          selectedOptions.reverse();\n        } // TODO(crisbeto): delimiter should be configurable for proper localization.\n\n\n        return selectedOptions.join(', ');\n      }\n\n      return this._selectionModel.selected[0].viewValue;\n    }\n    /**\n     * Whether the element is in RTL mode.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_isRtl\",\n    value: function _isRtl() {\n      return this._dir ? this._dir.value === 'rtl' : false;\n    }\n    /**\n     * Handles all keydown events on the select.\n     * @param {?} event\n     * @return {?}\n     */\n\n  }, {\n    key: \"_handleKeydown\",\n    value: function _handleKeydown(event) {\n      if (!this.disabled) {\n        this.panelOpen ? this._handleOpenKeydown(event) : this._handleClosedKeydown(event);\n      }\n    }\n    /**\n     * Handles keyboard events while the select is closed.\n     * @param {?} event\n     * @return {?}\n     */\n\n  }, {\n    key: \"_handleClosedKeydown\",\n    value: function _handleClosedKeydown(event) {\n      /** @type {?} */\n      var keyCode = event.keyCode;\n      /** @type {?} */\n\n      var isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW || keyCode === LEFT_ARROW || keyCode === RIGHT_ARROW;\n      /** @type {?} */\n\n      var isOpenKey = keyCode === ENTER || keyCode === SPACE;\n      /** @type {?} */\n\n      var manager = this._keyManager; // Open the select on ALT + arrow key to match the native <select>\n\n      if (isOpenKey || (this.multiple || event.altKey) && isArrowKey) {\n        event.preventDefault(); // prevents the page from scrolling down when pressing space\n\n        this.open();\n      } else if (!this.multiple) {\n        if (keyCode === HOME || keyCode === END) {\n          keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n          event.preventDefault();\n        } else {\n          manager.onKeydown(event);\n        }\n      }\n    }\n    /**\n     * Handles keyboard events when the selected is open.\n     * @param {?} event\n     * @return {?}\n     */\n\n  }, {\n    key: \"_handleOpenKeydown\",\n    value: function _handleOpenKeydown(event) {\n      /** @type {?} */\n      var keyCode = event.keyCode;\n      /** @type {?} */\n\n      var isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW;\n      /** @type {?} */\n\n      var manager = this._keyManager;\n\n      if (keyCode === HOME || keyCode === END) {\n        event.preventDefault();\n        keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n      } else if (isArrowKey && event.altKey) {\n        // Close the select on ALT + arrow key to match the native <select>\n        event.preventDefault();\n        this.close();\n      } else if ((keyCode === ENTER || keyCode === SPACE) && manager.activeItem) {\n        event.preventDefault();\n\n        manager.activeItem._selectViaInteraction();\n      } else if (this._multiple && keyCode === A && event.ctrlKey) {\n        event.preventDefault();\n        /** @type {?} */\n\n        var hasDeselectedOptions = this.options.some(function (opt) {\n          return !opt.disabled && !opt.selected;\n        });\n        this.options.forEach(function (option) {\n          if (!option.disabled) {\n            hasDeselectedOptions ? option.select() : option.deselect();\n          }\n        });\n      } else {\n        /** @type {?} */\n        var previouslyFocusedIndex = manager.activeItemIndex;\n        manager.onKeydown(event);\n\n        if (this._multiple && isArrowKey && event.shiftKey && manager.activeItem && manager.activeItemIndex !== previouslyFocusedIndex) {\n          manager.activeItem._selectViaInteraction();\n        }\n      }\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"_onFocus\",\n    value: function _onFocus() {\n      if (!this.disabled) {\n        this._focused = true;\n        this.stateChanges.next();\n      }\n    }\n    /**\n     * Calls the touched callback only if the panel is closed. Otherwise, the trigger will\n     * \"blur\" to the panel when it opens, causing a false positive.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_onBlur\",\n    value: function _onBlur() {\n      this._focused = false;\n\n      if (!this.disabled && !this.panelOpen) {\n        this._onTouched();\n\n        this._changeDetectorRef.markForCheck();\n\n        this.stateChanges.next();\n      }\n    }\n    /**\n     * Callback that is invoked when the overlay panel has been attached.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_onAttached\",\n    value: function _onAttached() {\n      var _this5 = this;\n\n      this.overlayDir.positionChange.pipe(take(1)).subscribe(function () {\n        _this5._setPseudoCheckboxPaddingSize();\n\n        _this5._changeDetectorRef.detectChanges();\n\n        _this5._calculateOverlayOffsetX();\n\n        _this5.panel.nativeElement.scrollTop = _this5._scrollTop;\n      });\n    }\n    /**\n     * Returns the theme to be used on the panel.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_getPanelTheme\",\n    value: function _getPanelTheme() {\n      return this._parentFormField ? \"mat-\".concat(this._parentFormField.color) : '';\n    }\n    /**\n     * Sets the pseudo checkbox padding size based on the width of the pseudo checkbox.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_setPseudoCheckboxPaddingSize\",\n    value: function _setPseudoCheckboxPaddingSize() {\n      if (!SELECT_MULTIPLE_PANEL_PADDING_X && this.multiple) {\n        /** @type {?} */\n        var pseudoCheckbox = this.panel.nativeElement.querySelector('.mat-pseudo-checkbox');\n\n        if (pseudoCheckbox) {\n          SELECT_MULTIPLE_PANEL_PADDING_X = SELECT_PANEL_PADDING_X * 1.5 + pseudoCheckbox.offsetWidth;\n        }\n      }\n    }\n    /**\n     * Whether the select has a value.\n     * @return {?}\n     */\n\n  }, {\n    key: \"empty\",\n    get: function get() {\n      return !this._selectionModel || this._selectionModel.isEmpty();\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"_initializeSelection\",\n    value: function _initializeSelection() {\n      var _this6 = this;\n\n      // Defer setting the value in order to avoid the \"Expression\n      // has changed after it was checked\" errors from Angular.\n      Promise.resolve().then(function () {\n        _this6._setSelectionByValue(_this6.ngControl ? _this6.ngControl.value : _this6._value);\n      });\n    }\n    /**\n     * Sets the selected option based on a value. If no option can be\n     * found with the designated value, the select trigger is cleared.\n     * @param {?} value\n     * @return {?}\n     */\n\n  }, {\n    key: \"_setSelectionByValue\",\n    value: function _setSelectionByValue(value) {\n      var _this7 = this;\n\n      if (this.multiple && value) {\n        if (!Array.isArray(value)) {\n          throw getMatSelectNonArrayValueError();\n        }\n\n        this._selectionModel.clear();\n\n        value.forEach(function (currentValue) {\n          return _this7._selectValue(currentValue);\n        });\n\n        this._sortValues();\n      } else {\n        this._selectionModel.clear();\n        /** @type {?} */\n\n\n        var correspondingOption = this._selectValue(value); // Shift focus to the active item. Note that we shouldn't do this in multiple\n        // mode, because we don't know what option the user interacted with last.\n\n\n        if (correspondingOption) {\n          this._keyManager.setActiveItem(correspondingOption);\n        }\n      }\n\n      this._changeDetectorRef.markForCheck();\n    }\n    /**\n     * Finds and selects and option based on its value.\n     * @param {?} value\n     * @return {?} Option that has the corresponding value.\n     */\n\n  }, {\n    key: \"_selectValue\",\n    value: function _selectValue(value) {\n      var _this8 = this;\n\n      /** @type {?} */\n      var correspondingOption = this.options.find(function (option) {\n        try {\n          // Treat null as a special reset value.\n          return option.value != null && _this8._compareWith(option.value, value);\n        } catch (error) {\n          if (isDevMode()) {\n            // Notify developers of errors in their comparator.\n            console.warn(error);\n          }\n\n          return false;\n        }\n      });\n\n      if (correspondingOption) {\n        this._selectionModel.select(correspondingOption);\n      }\n\n      return correspondingOption;\n    }\n    /**\n     * Sets up a key manager to listen to keyboard events on the overlay panel.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_initKeyManager\",\n    value: function _initKeyManager() {\n      var _this9 = this;\n\n      this._keyManager = new ActiveDescendantKeyManager(this.options).withTypeAhead().withVerticalOrientation().withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr');\n\n      this._keyManager.tabOut.pipe(takeUntil(this._destroy)).subscribe(function () {\n        // Restore focus to the trigger before closing. Ensures that the focus\n        // position won't be lost if the user got focus into the overlay.\n        _this9.focus();\n\n        _this9.close();\n      });\n\n      this._keyManager.change.pipe(takeUntil(this._destroy)).subscribe(function () {\n        if (_this9._panelOpen && _this9.panel) {\n          _this9._scrollActiveOptionIntoView();\n        } else if (!_this9._panelOpen && !_this9.multiple && _this9._keyManager.activeItem) {\n          _this9._keyManager.activeItem._selectViaInteraction();\n        }\n      });\n    }\n    /**\n     * Drops current option subscriptions and IDs and resets from scratch.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_resetOptions\",\n    value: function _resetOptions() {\n      var _this10 = this;\n\n      /** @type {?} */\n      var changedOrDestroyed = merge(this.options.changes, this._destroy);\n      this.optionSelectionChanges.pipe(takeUntil(changedOrDestroyed)).subscribe(function (event) {\n        _this10._onSelect(event.source, event.isUserInput);\n\n        if (event.isUserInput && !_this10.multiple && _this10._panelOpen) {\n          _this10.close();\n\n          _this10.focus();\n        }\n      }); // Listen to changes in the internal state of the options and react accordingly.\n      // Handles cases like the labels of the selected options changing.\n\n      merge.apply(void 0, _toConsumableArray(this.options.map(function (option) {\n        return option._stateChanges;\n      }))).pipe(takeUntil(changedOrDestroyed)).subscribe(function () {\n        _this10._changeDetectorRef.markForCheck();\n\n        _this10.stateChanges.next();\n      });\n\n      this._setOptionIds();\n    }\n    /**\n     * Invoked when an option is clicked.\n     * @param {?} option\n     * @param {?} isUserInput\n     * @return {?}\n     */\n\n  }, {\n    key: \"_onSelect\",\n    value: function _onSelect(option, isUserInput) {\n      /** @type {?} */\n      var wasSelected = this._selectionModel.isSelected(option);\n\n      if (option.value == null && !this._multiple) {\n        option.deselect();\n\n        this._selectionModel.clear();\n\n        this._propagateChanges(option.value);\n      } else {\n        option.selected ? this._selectionModel.select(option) : this._selectionModel.deselect(option);\n\n        if (isUserInput) {\n          this._keyManager.setActiveItem(option);\n        }\n\n        if (this.multiple) {\n          this._sortValues();\n\n          if (isUserInput) {\n            // In case the user selected the option with their mouse, we\n            // want to restore focus back to the trigger, in order to\n            // prevent the select keyboard controls from clashing with\n            // the ones from `mat-option`.\n            this.focus();\n          }\n        }\n      }\n\n      if (wasSelected !== this._selectionModel.isSelected(option)) {\n        this._propagateChanges();\n      }\n\n      this.stateChanges.next();\n    }\n    /**\n     * Sorts the selected values in the selected based on their order in the panel.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_sortValues\",\n    value: function _sortValues() {\n      var _this11 = this;\n\n      if (this.multiple) {\n        /** @type {?} */\n        var options = this.options.toArray();\n\n        this._selectionModel.sort(function (a, b) {\n          return _this11.sortComparator ? _this11.sortComparator(a, b, options) : options.indexOf(a) - options.indexOf(b);\n        });\n\n        this.stateChanges.next();\n      }\n    }\n    /**\n     * Emits change event to set the model value.\n     * @param {?=} fallbackValue\n     * @return {?}\n     */\n\n  }, {\n    key: \"_propagateChanges\",\n    value: function _propagateChanges(fallbackValue) {\n      /** @type {?} */\n      var valueToEmit = null;\n\n      if (this.multiple) {\n        valueToEmit =\n        /** @type {?} */\n        this.selected.map(function (option) {\n          return option.value;\n        });\n      } else {\n        valueToEmit = this.selected ?\n        /** @type {?} */\n        this.selected.value : fallbackValue;\n      }\n\n      this._value = valueToEmit;\n      this.valueChange.emit(valueToEmit);\n\n      this._onChange(valueToEmit);\n\n      this.selectionChange.emit(new MatSelectChange(this, valueToEmit));\n\n      this._changeDetectorRef.markForCheck();\n    }\n    /**\n     * Records option IDs to pass to the aria-owns property.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_setOptionIds\",\n    value: function _setOptionIds() {\n      this._optionIds = this.options.map(function (option) {\n        return option.id;\n      }).join(' ');\n    }\n    /**\n     * Highlights the selected item. If no option is selected, it will highlight\n     * the first item instead.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_highlightCorrectOption\",\n    value: function _highlightCorrectOption() {\n      if (this._keyManager) {\n        if (this.empty) {\n          this._keyManager.setFirstItemActive();\n        } else {\n          this._keyManager.setActiveItem(this._selectionModel.selected[0]);\n        }\n      }\n    }\n    /**\n     * Scrolls the active option into view.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_scrollActiveOptionIntoView\",\n    value: function _scrollActiveOptionIntoView() {\n      /** @type {?} */\n      var activeOptionIndex = this._keyManager.activeItemIndex || 0;\n      /** @type {?} */\n\n      var labelCount = _countGroupLabelsBeforeOption(activeOptionIndex, this.options, this.optionGroups);\n\n      this.panel.nativeElement.scrollTop = _getOptionScrollPosition(activeOptionIndex + labelCount, this._getItemHeight(), this.panel.nativeElement.scrollTop, SELECT_PANEL_MAX_HEIGHT);\n    }\n    /**\n     * Focuses the select element.\n     * @return {?}\n     */\n\n  }, {\n    key: \"focus\",\n    value: function focus() {\n      this._elementRef.nativeElement.focus();\n    }\n    /**\n     * Gets the index of the provided option in the option list.\n     * @param {?} option\n     * @return {?}\n     */\n\n  }, {\n    key: \"_getOptionIndex\",\n    value: function _getOptionIndex(option) {\n      return this.options.reduce(function (result, current, index) {\n        return result === undefined ? option === current ? index : undefined : result;\n      }, undefined);\n    }\n    /**\n     * Calculates the scroll position and x- and y-offsets of the overlay panel.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_calculateOverlayPosition\",\n    value: function _calculateOverlayPosition() {\n      /** @type {?} */\n      var itemHeight = this._getItemHeight();\n      /** @type {?} */\n\n\n      var items = this._getItemCount();\n      /** @type {?} */\n\n\n      var panelHeight = Math.min(items * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n      /** @type {?} */\n\n      var scrollContainerHeight = items * itemHeight;\n      /** @type {?} */\n\n      var maxScroll = scrollContainerHeight - panelHeight;\n      /** @type {?} */\n\n      var selectedOptionOffset = this.empty ? 0 :\n      /** @type {?} */\n      this._getOptionIndex(this._selectionModel.selected[0]);\n      selectedOptionOffset += _countGroupLabelsBeforeOption(selectedOptionOffset, this.options, this.optionGroups);\n      /** @type {?} */\n\n      var scrollBuffer = panelHeight / 2;\n      this._scrollTop = this._calculateOverlayScroll(selectedOptionOffset, scrollBuffer, maxScroll);\n      this._offsetY = this._calculateOverlayOffsetY(selectedOptionOffset, scrollBuffer, maxScroll);\n\n      this._checkOverlayWithinViewport(maxScroll);\n    }\n    /**\n     * Calculates the scroll position of the select's overlay panel.\n     *\n     * Attempts to center the selected option in the panel. If the option is\n     * too high or too low in the panel to be scrolled to the center, it clamps the\n     * scroll position to the min or max scroll positions respectively.\n     * @param {?} selectedIndex\n     * @param {?} scrollBuffer\n     * @param {?} maxScroll\n     * @return {?}\n     */\n\n  }, {\n    key: \"_calculateOverlayScroll\",\n    value: function _calculateOverlayScroll(selectedIndex, scrollBuffer, maxScroll) {\n      /** @type {?} */\n      var itemHeight = this._getItemHeight();\n      /** @type {?} */\n\n\n      var optionOffsetFromScrollTop = itemHeight * selectedIndex;\n      /** @type {?} */\n\n      var halfOptionHeight = itemHeight / 2;\n      /** @type {?} */\n\n      var optimalScrollPosition = optionOffsetFromScrollTop - scrollBuffer + halfOptionHeight;\n      return Math.min(Math.max(0, optimalScrollPosition), maxScroll);\n    }\n    /**\n     * Returns the aria-label of the select component.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_getAriaLabel\",\n    value: function _getAriaLabel() {\n      // If an ariaLabelledby value has been set by the consumer, the select should not overwrite the\n      // `aria-labelledby` value by setting the ariaLabel to the placeholder.\n      return this.ariaLabelledby ? null : this.ariaLabel || this.placeholder;\n    }\n    /**\n     * Returns the aria-labelledby of the select component.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_getAriaLabelledby\",\n    value: function _getAriaLabelledby() {\n      if (this.ariaLabelledby) {\n        return this.ariaLabelledby;\n      } // Note: we use `_getAriaLabel` here, because we want to check whether there's a\n      // computed label. `this.ariaLabel` is only the user-specified label.\n\n\n      if (!this._parentFormField || !this._parentFormField._hasFloatingLabel() || this._getAriaLabel()) {\n        return null;\n      }\n\n      return this._parentFormField._labelId || null;\n    }\n    /**\n     * Determines the `aria-activedescendant` to be set on the host.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_getAriaActiveDescendant\",\n    value: function _getAriaActiveDescendant() {\n      if (this.panelOpen && this._keyManager && this._keyManager.activeItem) {\n        return this._keyManager.activeItem.id;\n      }\n\n      return null;\n    }\n    /**\n     * Sets the x-offset of the overlay panel in relation to the trigger's top start corner.\n     * This must be adjusted to align the selected option text over the trigger text when\n     * the panel opens. Will change based on LTR or RTL text direction. Note that the offset\n     * can't be calculated until the panel has been attached, because we need to know the\n     * content width in order to constrain the panel within the viewport.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_calculateOverlayOffsetX\",\n    value: function _calculateOverlayOffsetX() {\n      /** @type {?} */\n      var overlayRect = this.overlayDir.overlayRef.overlayElement.getBoundingClientRect();\n      /** @type {?} */\n\n      var viewportSize = this._viewportRuler.getViewportSize();\n      /** @type {?} */\n\n\n      var isRtl = this._isRtl();\n      /** @type {?} */\n\n\n      var paddingWidth = this.multiple ? SELECT_MULTIPLE_PANEL_PADDING_X + SELECT_PANEL_PADDING_X : SELECT_PANEL_PADDING_X * 2;\n      /** @type {?} */\n\n      var offsetX; // Adjust the offset, depending on the option padding.\n\n      if (this.multiple) {\n        offsetX = SELECT_MULTIPLE_PANEL_PADDING_X;\n      } else {\n        /** @type {?} */\n        var selected = this._selectionModel.selected[0] || this.options.first;\n        offsetX = selected && selected.group ? SELECT_PANEL_INDENT_PADDING_X : SELECT_PANEL_PADDING_X;\n      } // Invert the offset in LTR.\n\n\n      if (!isRtl) {\n        offsetX *= -1;\n      }\n      /** @type {?} */\n\n\n      var leftOverflow = 0 - (overlayRect.left + offsetX - (isRtl ? paddingWidth : 0));\n      /** @type {?} */\n\n      var rightOverflow = overlayRect.right + offsetX - viewportSize.width + (isRtl ? 0 : paddingWidth); // If the element overflows on either side, reduce the offset to allow it to fit.\n\n      if (leftOverflow > 0) {\n        offsetX += leftOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n      } else if (rightOverflow > 0) {\n        offsetX -= rightOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n      } // Set the offset directly in order to avoid having to go through change detection and\n      // potentially triggering \"changed after it was checked\" errors. Round the value to avoid\n      // blurry content in some browsers.\n\n\n      this.overlayDir.offsetX = Math.round(offsetX);\n      this.overlayDir.overlayRef.updatePosition();\n    }\n    /**\n     * Calculates the y-offset of the select's overlay panel in relation to the\n     * top start corner of the trigger. It has to be adjusted in order for the\n     * selected option to be aligned over the trigger when the panel opens.\n     * @param {?} selectedIndex\n     * @param {?} scrollBuffer\n     * @param {?} maxScroll\n     * @return {?}\n     */\n\n  }, {\n    key: \"_calculateOverlayOffsetY\",\n    value: function _calculateOverlayOffsetY(selectedIndex, scrollBuffer, maxScroll) {\n      /** @type {?} */\n      var itemHeight = this._getItemHeight();\n      /** @type {?} */\n\n\n      var optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n      /** @type {?} */\n\n      var maxOptionsDisplayed = Math.floor(SELECT_PANEL_MAX_HEIGHT / itemHeight);\n      /** @type {?} */\n\n      var optionOffsetFromPanelTop; // Disable offset if requested by user by returning 0 as value to offset\n\n      if (this._disableOptionCentering) {\n        return 0;\n      }\n\n      if (this._scrollTop === 0) {\n        optionOffsetFromPanelTop = selectedIndex * itemHeight;\n      } else if (this._scrollTop === maxScroll) {\n        /** @type {?} */\n        var firstDisplayedIndex = this._getItemCount() - maxOptionsDisplayed;\n        /** @type {?} */\n\n        var selectedDisplayIndex = selectedIndex - firstDisplayedIndex;\n        /** @type {?} */\n\n        var partialItemHeight = itemHeight - (this._getItemCount() * itemHeight - SELECT_PANEL_MAX_HEIGHT) % itemHeight; // Because the panel height is longer than the height of the options alone,\n        // there is always extra padding at the top or bottom of the panel. When\n        // scrolled to the very bottom, this padding is at the top of the panel and\n        // must be added to the offset.\n\n        optionOffsetFromPanelTop = selectedDisplayIndex * itemHeight + partialItemHeight;\n      } else {\n        // If the option was scrolled to the middle of the panel using a scroll buffer,\n        // its offset will be the scroll buffer minus the half height that was added to\n        // center it.\n        optionOffsetFromPanelTop = scrollBuffer - itemHeight / 2;\n      } // The final offset is the option's offset from the top, adjusted for the height difference,\n      // multiplied by -1 to ensure that the overlay moves in the correct direction up the page.\n      // The value is rounded to prevent some browsers from blurring the content.\n\n\n      return Math.round(optionOffsetFromPanelTop * -1 - optionHeightAdjustment);\n    }\n    /**\n     * Checks that the attempted overlay position will fit within the viewport.\n     * If it will not fit, tries to adjust the scroll position and the associated\n     * y-offset so the panel can open fully on-screen. If it still won't fit,\n     * sets the offset back to 0 to allow the fallback position to take over.\n     * @param {?} maxScroll\n     * @return {?}\n     */\n\n  }, {\n    key: \"_checkOverlayWithinViewport\",\n    value: function _checkOverlayWithinViewport(maxScroll) {\n      /** @type {?} */\n      var itemHeight = this._getItemHeight();\n      /** @type {?} */\n\n\n      var viewportSize = this._viewportRuler.getViewportSize();\n      /** @type {?} */\n\n\n      var topSpaceAvailable = this._triggerRect.top - SELECT_PANEL_VIEWPORT_PADDING;\n      /** @type {?} */\n\n      var bottomSpaceAvailable = viewportSize.height - this._triggerRect.bottom - SELECT_PANEL_VIEWPORT_PADDING;\n      /** @type {?} */\n\n      var panelHeightTop = Math.abs(this._offsetY);\n      /** @type {?} */\n\n      var totalPanelHeight = Math.min(this._getItemCount() * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n      /** @type {?} */\n\n      var panelHeightBottom = totalPanelHeight - panelHeightTop - this._triggerRect.height;\n\n      if (panelHeightBottom > bottomSpaceAvailable) {\n        this._adjustPanelUp(panelHeightBottom, bottomSpaceAvailable);\n      } else if (panelHeightTop > topSpaceAvailable) {\n        this._adjustPanelDown(panelHeightTop, topSpaceAvailable, maxScroll);\n      } else {\n        this._transformOrigin = this._getOriginBasedOnOption();\n      }\n    }\n    /**\n     * Adjusts the overlay panel up to fit in the viewport.\n     * @param {?} panelHeightBottom\n     * @param {?} bottomSpaceAvailable\n     * @return {?}\n     */\n\n  }, {\n    key: \"_adjustPanelUp\",\n    value: function _adjustPanelUp(panelHeightBottom, bottomSpaceAvailable) {\n      /** @type {?} */\n      var distanceBelowViewport = Math.round(panelHeightBottom - bottomSpaceAvailable); // Scrolls the panel up by the distance it was extending past the boundary, then\n      // adjusts the offset by that amount to move the panel up into the viewport.\n\n      this._scrollTop -= distanceBelowViewport;\n      this._offsetY -= distanceBelowViewport;\n      this._transformOrigin = this._getOriginBasedOnOption(); // If the panel is scrolled to the very top, it won't be able to fit the panel\n      // by scrolling, so set the offset to 0 to allow the fallback position to take\n      // effect.\n\n      if (this._scrollTop <= 0) {\n        this._scrollTop = 0;\n        this._offsetY = 0;\n        this._transformOrigin = \"50% bottom 0px\";\n      }\n    }\n    /**\n     * Adjusts the overlay panel down to fit in the viewport.\n     * @param {?} panelHeightTop\n     * @param {?} topSpaceAvailable\n     * @param {?} maxScroll\n     * @return {?}\n     */\n\n  }, {\n    key: \"_adjustPanelDown\",\n    value: function _adjustPanelDown(panelHeightTop, topSpaceAvailable, maxScroll) {\n      /** @type {?} */\n      var distanceAboveViewport = Math.round(panelHeightTop - topSpaceAvailable); // Scrolls the panel down by the distance it was extending past the boundary, then\n      // adjusts the offset by that amount to move the panel down into the viewport.\n\n      this._scrollTop += distanceAboveViewport;\n      this._offsetY += distanceAboveViewport;\n      this._transformOrigin = this._getOriginBasedOnOption(); // If the panel is scrolled to the very bottom, it won't be able to fit the\n      // panel by scrolling, so set the offset to 0 to allow the fallback position\n      // to take effect.\n\n      if (this._scrollTop >= maxScroll) {\n        this._scrollTop = maxScroll;\n        this._offsetY = 0;\n        this._transformOrigin = \"50% top 0px\";\n        return;\n      }\n    }\n    /**\n     * Sets the transform origin point based on the selected option.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_getOriginBasedOnOption\",\n    value: function _getOriginBasedOnOption() {\n      /** @type {?} */\n      var itemHeight = this._getItemHeight();\n      /** @type {?} */\n\n\n      var optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n      /** @type {?} */\n\n      var originY = Math.abs(this._offsetY) - optionHeightAdjustment + itemHeight / 2;\n      return \"50% \".concat(originY, \"px 0px\");\n    }\n    /**\n     * Calculates the amount of items in the select. This includes options and group labels.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_getItemCount\",\n    value: function _getItemCount() {\n      return this.options.length + this.optionGroups.length;\n    }\n    /**\n     * Calculates the height of the select's options.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_getItemHeight\",\n    value: function _getItemHeight() {\n      return this._triggerFontSize * SELECT_ITEM_HEIGHT_EM;\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * \\@docs-private\n     * @param {?} ids\n     * @return {?}\n     */\n\n  }, {\n    key: \"setDescribedByIds\",\n    value: function setDescribedByIds(ids) {\n      this._ariaDescribedby = ids.join(' ');\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * \\@docs-private\n     * @return {?}\n     */\n\n  }, {\n    key: \"onContainerClick\",\n    value: function onContainerClick() {\n      this.focus();\n      this.open();\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * \\@docs-private\n     * @return {?}\n     */\n\n  }, {\n    key: \"shouldLabelFloat\",\n    get: function get() {\n      return this._panelOpen || !this.empty;\n    }\n  }]);\n\n  return MatSelect;\n}(_MatSelectMixinBase);\n\nMatSelect.ɵfac = function MatSelect_Factory(t) {\n  return new (t || MatSelect)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.ViewportRuler), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.ErrorStateMatcher), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.Directionality, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc4.NgForm, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc4.FormGroupDirective, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc5.MatFormField, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc4.NgControl, 10), ɵngcc0.ɵɵinjectAttribute('tabindex'), ɵngcc0.ɵɵdirectiveInject(MAT_SELECT_SCROLL_STRATEGY));\n};\n\nMatSelect.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n  type: MatSelect,\n  selectors: [[\"mat-select\"]],\n  contentQueries: function MatSelect_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵcontentQuery(dirIndex, MatSelectTrigger, 5);\n      ɵngcc0.ɵɵcontentQuery(dirIndex, MatOption, 5);\n      ɵngcc0.ɵɵcontentQuery(dirIndex, MatOptgroup, 4);\n    }\n\n    if (rf & 2) {\n      var _t;\n\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.customTrigger = _t.first);\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.options = _t);\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.optionGroups = _t);\n    }\n  },\n  viewQuery: function MatSelect_Query(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵviewQuery(_c0, 5);\n      ɵngcc0.ɵɵviewQuery(_c1, 5);\n      ɵngcc0.ɵɵviewQuery(CdkConnectedOverlay, 5);\n    }\n\n    if (rf & 2) {\n      var _t;\n\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.trigger = _t.first);\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.panel = _t.first);\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.overlayDir = _t.first);\n    }\n  },\n  hostAttrs: [\"role\", \"listbox\", 1, \"mat-select\"],\n  hostVars: 19,\n  hostBindings: function MatSelect_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵlistener(\"keydown\", function MatSelect_keydown_HostBindingHandler($event) {\n        return ctx._handleKeydown($event);\n      })(\"focus\", function MatSelect_focus_HostBindingHandler() {\n        return ctx._onFocus();\n      })(\"blur\", function MatSelect_blur_HostBindingHandler() {\n        return ctx._onBlur();\n      });\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵattribute(\"id\", ctx.id)(\"tabindex\", ctx.tabIndex)(\"aria-label\", ctx._getAriaLabel())(\"aria-labelledby\", ctx._getAriaLabelledby())(\"aria-required\", ctx.required.toString())(\"aria-disabled\", ctx.disabled.toString())(\"aria-invalid\", ctx.errorState)(\"aria-owns\", ctx.panelOpen ? ctx._optionIds : null)(\"aria-multiselectable\", ctx.multiple)(\"aria-describedby\", ctx._ariaDescribedby || null)(\"aria-activedescendant\", ctx._getAriaActiveDescendant());\n      ɵngcc0.ɵɵclassProp(\"mat-select-disabled\", ctx.disabled)(\"mat-select-invalid\", ctx.errorState)(\"mat-select-required\", ctx.required)(\"mat-select-empty\", ctx.empty);\n    }\n  },\n  inputs: {\n    disabled: \"disabled\",\n    disableRipple: \"disableRipple\",\n    tabIndex: \"tabIndex\",\n    ariaLabel: [\"aria-label\", \"ariaLabel\"],\n    id: \"id\",\n    placeholder: \"placeholder\",\n    required: \"required\",\n    multiple: \"multiple\",\n    disableOptionCentering: \"disableOptionCentering\",\n    compareWith: \"compareWith\",\n    value: \"value\",\n    panelClass: \"panelClass\",\n    ariaLabelledby: [\"aria-labelledby\", \"ariaLabelledby\"],\n    errorStateMatcher: \"errorStateMatcher\",\n    sortComparator: \"sortComparator\"\n  },\n  outputs: {\n    openedChange: \"openedChange\",\n    _openedStream: \"opened\",\n    _closedStream: \"closed\",\n    selectionChange: \"selectionChange\",\n    valueChange: \"valueChange\"\n  },\n  exportAs: [\"matSelect\"],\n  features: [ɵngcc0.ɵɵProvidersFeature([{\n    provide: MatFormFieldControl,\n    useExisting: MatSelect\n  }, {\n    provide: MAT_OPTION_PARENT_COMPONENT,\n    useExisting: MatSelect\n  }]), ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature],\n  ngContentSelectors: _c3,\n  decls: 9,\n  vars: 9,\n  consts: [[\"cdk-overlay-origin\", \"\", \"aria-hidden\", \"true\", 1, \"mat-select-trigger\", 3, \"click\"], [\"origin\", \"cdkOverlayOrigin\", \"trigger\", \"\"], [1, \"mat-select-value\", 3, \"ngSwitch\"], [\"class\", \"mat-select-placeholder\", 4, \"ngSwitchCase\"], [\"class\", \"mat-select-value-text\", 3, \"ngSwitch\", 4, \"ngSwitchCase\"], [1, \"mat-select-arrow-wrapper\"], [1, \"mat-select-arrow\"], [\"cdk-connected-overlay\", \"\", \"cdkConnectedOverlayLockPosition\", \"\", \"cdkConnectedOverlayHasBackdrop\", \"\", \"cdkConnectedOverlayBackdropClass\", \"cdk-overlay-transparent-backdrop\", 3, \"cdkConnectedOverlayScrollStrategy\", \"cdkConnectedOverlayOrigin\", \"cdkConnectedOverlayOpen\", \"cdkConnectedOverlayPositions\", \"cdkConnectedOverlayMinWidth\", \"cdkConnectedOverlayOffsetY\", \"backdropClick\", \"attach\", \"detach\"], [1, \"mat-select-placeholder\"], [1, \"mat-select-value-text\", 3, \"ngSwitch\"], [4, \"ngSwitchDefault\"], [4, \"ngSwitchCase\"], [3, \"ngClass\", \"keydown\"], [\"panel\", \"\"]],\n  template: function MatSelect_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵprojectionDef(_c2);\n      ɵngcc0.ɵɵelementStart(0, \"div\", 0, 1);\n      ɵngcc0.ɵɵlistener(\"click\", function MatSelect_Template_div_click_0_listener() {\n        return ctx.toggle();\n      });\n      ɵngcc0.ɵɵelementStart(3, \"div\", 2);\n      ɵngcc0.ɵɵtemplate(4, MatSelect_span_4_Template, 2, 1, \"span\", 3);\n      ɵngcc0.ɵɵtemplate(5, MatSelect_span_5_Template, 3, 2, \"span\", 4);\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵelementStart(6, \"div\", 5);\n      ɵngcc0.ɵɵelement(7, \"div\", 6);\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵtemplate(8, MatSelect_ng_template_8_Template, 3, 9, \"ng-template\", 7);\n      ɵngcc0.ɵɵlistener(\"backdropClick\", function MatSelect_Template_ng_template_backdropClick_8_listener() {\n        return ctx.close();\n      })(\"attach\", function MatSelect_Template_ng_template_attach_8_listener() {\n        return ctx._onAttached();\n      })(\"detach\", function MatSelect_Template_ng_template_detach_8_listener() {\n        return ctx.close();\n      });\n    }\n\n    if (rf & 2) {\n      var _r0 = ɵngcc0.ɵɵreference(1);\n\n      ɵngcc0.ɵɵadvance(3);\n      ɵngcc0.ɵɵproperty(\"ngSwitch\", ctx.empty);\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵproperty(\"ngSwitchCase\", true);\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵproperty(\"ngSwitchCase\", false);\n      ɵngcc0.ɵɵadvance(3);\n      ɵngcc0.ɵɵproperty(\"cdkConnectedOverlayScrollStrategy\", ctx._scrollStrategy)(\"cdkConnectedOverlayOrigin\", _r0)(\"cdkConnectedOverlayOpen\", ctx.panelOpen)(\"cdkConnectedOverlayPositions\", ctx._positions)(\"cdkConnectedOverlayMinWidth\", ctx._triggerRect == null ? null : ctx._triggerRect.width)(\"cdkConnectedOverlayOffsetY\", ctx._offsetY);\n    }\n  },\n  directives: [ɵngcc6.CdkOverlayOrigin, ɵngcc7.NgSwitch, ɵngcc7.NgSwitchCase, ɵngcc6.CdkConnectedOverlay, ɵngcc7.NgSwitchDefault, ɵngcc7.NgClass],\n  styles: [\".mat-select{display:inline-block;width:100%;outline:0}.mat-select-trigger{display:inline-table;cursor:pointer;position:relative;box-sizing:border-box}.mat-select-disabled .mat-select-trigger{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:default}.mat-select-value{display:table-cell;max-width:0;width:100%;overflow:hidden;text-overflow:ellipsis;white-space:nowrap}.mat-select-value-text{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.mat-select-arrow-wrapper{display:table-cell;vertical-align:middle}.mat-form-field-appearance-fill .mat-select-arrow-wrapper{transform:translateY(-50%)}.mat-form-field-appearance-outline .mat-select-arrow-wrapper{transform:translateY(-25%)}.mat-form-field-appearance-standard .mat-select:not(.mat-select-empty) .mat-select-arrow-wrapper{transform:translateY(-50%)}.mat-form-field-appearance-standard .mat-select.mat-select-empty .mat-select-arrow-wrapper{transition:transform .4s cubic-bezier(.25,.8,.25,1)}._mat-animation-noopable.mat-form-field-appearance-standard .mat-select.mat-select-empty .mat-select-arrow-wrapper{transition:none}.mat-select-arrow{width:0;height:0;border-left:5px solid transparent;border-right:5px solid transparent;border-top:5px solid;margin:0 4px}.mat-select-panel{min-width:112px;max-width:280px;overflow:auto;-webkit-overflow-scrolling:touch;padding-top:0;padding-bottom:0;max-height:256px;min-width:100%;border-radius:4px}@media screen and (-ms-high-contrast:active){.mat-select-panel{outline:solid 1px}}.mat-select-panel .mat-optgroup-label,.mat-select-panel .mat-option{font-size:inherit;line-height:3em;height:3em}.mat-form-field-type-mat-select:not(.mat-form-field-disabled) .mat-form-field-flex{cursor:pointer}.mat-form-field-type-mat-select .mat-form-field-label{width:calc(100% - 18px)}.mat-select-placeholder{transition:color .4s .133s cubic-bezier(.25,.8,.25,1)}._mat-animation-noopable .mat-select-placeholder{transition:none}.mat-form-field-hide-placeholder .mat-select-placeholder{color:transparent;-webkit-text-fill-color:transparent;transition:none;display:block}\"],\n  encapsulation: 2,\n  data: {\n    animation: [matSelectAnimations.transformPanel]\n  },\n  changeDetection: 0\n});\n/** @nocollapse */\n\nMatSelect.ctorParameters = function () {\n  return [{\n    type: ViewportRuler\n  }, {\n    type: ChangeDetectorRef\n  }, {\n    type: NgZone\n  }, {\n    type: ErrorStateMatcher\n  }, {\n    type: ElementRef\n  }, {\n    type: Directionality,\n    decorators: [{\n      type: Optional\n    }]\n  }, {\n    type: NgForm,\n    decorators: [{\n      type: Optional\n    }]\n  }, {\n    type: FormGroupDirective,\n    decorators: [{\n      type: Optional\n    }]\n  }, {\n    type: MatFormField,\n    decorators: [{\n      type: Optional\n    }]\n  }, {\n    type: NgControl,\n    decorators: [{\n      type: Self\n    }, {\n      type: Optional\n    }]\n  }, {\n    type: String,\n    decorators: [{\n      type: Attribute,\n      args: ['tabindex']\n    }]\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Inject,\n      args: [MAT_SELECT_SCROLL_STRATEGY]\n    }]\n  }];\n};\n\nMatSelect.propDecorators = {\n  trigger: [{\n    type: ViewChild,\n    args: ['trigger']\n  }],\n  panel: [{\n    type: ViewChild,\n    args: ['panel']\n  }],\n  overlayDir: [{\n    type: ViewChild,\n    args: [CdkConnectedOverlay]\n  }],\n  options: [{\n    type: ContentChildren,\n    args: [MatOption, {\n      descendants: true\n    }]\n  }],\n  optionGroups: [{\n    type: ContentChildren,\n    args: [MatOptgroup]\n  }],\n  panelClass: [{\n    type: Input\n  }],\n  customTrigger: [{\n    type: ContentChild,\n    args: [MatSelectTrigger]\n  }],\n  placeholder: [{\n    type: Input\n  }],\n  required: [{\n    type: Input\n  }],\n  multiple: [{\n    type: Input\n  }],\n  disableOptionCentering: [{\n    type: Input\n  }],\n  compareWith: [{\n    type: Input\n  }],\n  value: [{\n    type: Input\n  }],\n  ariaLabel: [{\n    type: Input,\n    args: ['aria-label']\n  }],\n  ariaLabelledby: [{\n    type: Input,\n    args: ['aria-labelledby']\n  }],\n  errorStateMatcher: [{\n    type: Input\n  }],\n  sortComparator: [{\n    type: Input\n  }],\n  id: [{\n    type: Input\n  }],\n  openedChange: [{\n    type: Output\n  }],\n  _openedStream: [{\n    type: Output,\n    args: ['opened']\n  }],\n  _closedStream: [{\n    type: Output,\n    args: ['closed']\n  }],\n  selectionChange: [{\n    type: Output\n  }],\n  valueChange: [{\n    type: Output\n  }]\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatSelect, [{\n    type: Component,\n    args: [{\n      selector: 'mat-select',\n      exportAs: 'matSelect',\n      template: \"<div cdk-overlay-origin class=\\\"mat-select-trigger\\\" aria-hidden=\\\"true\\\" (click)=\\\"toggle()\\\" #origin=\\\"cdkOverlayOrigin\\\" #trigger><div class=\\\"mat-select-value\\\" [ngSwitch]=\\\"empty\\\"><span class=\\\"mat-select-placeholder\\\" *ngSwitchCase=\\\"true\\\">{{placeholder || '\\xA0'}}</span> <span class=\\\"mat-select-value-text\\\" *ngSwitchCase=\\\"false\\\" [ngSwitch]=\\\"!!customTrigger\\\"><span *ngSwitchDefault>{{triggerValue || '\\xA0'}}</span><ng-content select=\\\"mat-select-trigger\\\" *ngSwitchCase=\\\"true\\\"></ng-content></span></div><div class=\\\"mat-select-arrow-wrapper\\\"><div class=\\\"mat-select-arrow\\\"></div></div></div><ng-template cdk-connected-overlay cdkConnectedOverlayLockPosition cdkConnectedOverlayHasBackdrop cdkConnectedOverlayBackdropClass=\\\"cdk-overlay-transparent-backdrop\\\" [cdkConnectedOverlayScrollStrategy]=\\\"_scrollStrategy\\\" [cdkConnectedOverlayOrigin]=\\\"origin\\\" [cdkConnectedOverlayOpen]=\\\"panelOpen\\\" [cdkConnectedOverlayPositions]=\\\"_positions\\\" [cdkConnectedOverlayMinWidth]=\\\"_triggerRect?.width\\\" [cdkConnectedOverlayOffsetY]=\\\"_offsetY\\\" (backdropClick)=\\\"close()\\\" (attach)=\\\"_onAttached()\\\" (detach)=\\\"close()\\\"><div #panel class=\\\"mat-select-panel {{ _getPanelTheme() }}\\\" [ngClass]=\\\"panelClass\\\" [@transformPanel]=\\\"multiple ? 'showing-multiple' : 'showing'\\\" (@transformPanel.done)=\\\"_panelDoneAnimatingStream.next($event.toState)\\\" [style.transformOrigin]=\\\"_transformOrigin\\\" [style.font-size.px]=\\\"_triggerFontSize\\\" (keydown)=\\\"_handleKeydown($event)\\\"><ng-content></ng-content></div></ng-template>\",\n      styles: [\".mat-select{display:inline-block;width:100%;outline:0}.mat-select-trigger{display:inline-table;cursor:pointer;position:relative;box-sizing:border-box}.mat-select-disabled .mat-select-trigger{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:default}.mat-select-value{display:table-cell;max-width:0;width:100%;overflow:hidden;text-overflow:ellipsis;white-space:nowrap}.mat-select-value-text{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.mat-select-arrow-wrapper{display:table-cell;vertical-align:middle}.mat-form-field-appearance-fill .mat-select-arrow-wrapper{transform:translateY(-50%)}.mat-form-field-appearance-outline .mat-select-arrow-wrapper{transform:translateY(-25%)}.mat-form-field-appearance-standard .mat-select:not(.mat-select-empty) .mat-select-arrow-wrapper{transform:translateY(-50%)}.mat-form-field-appearance-standard .mat-select.mat-select-empty .mat-select-arrow-wrapper{transition:transform .4s cubic-bezier(.25,.8,.25,1)}._mat-animation-noopable.mat-form-field-appearance-standard .mat-select.mat-select-empty .mat-select-arrow-wrapper{transition:none}.mat-select-arrow{width:0;height:0;border-left:5px solid transparent;border-right:5px solid transparent;border-top:5px solid;margin:0 4px}.mat-select-panel{min-width:112px;max-width:280px;overflow:auto;-webkit-overflow-scrolling:touch;padding-top:0;padding-bottom:0;max-height:256px;min-width:100%;border-radius:4px}@media screen and (-ms-high-contrast:active){.mat-select-panel{outline:solid 1px}}.mat-select-panel .mat-optgroup-label,.mat-select-panel .mat-option{font-size:inherit;line-height:3em;height:3em}.mat-form-field-type-mat-select:not(.mat-form-field-disabled) .mat-form-field-flex{cursor:pointer}.mat-form-field-type-mat-select .mat-form-field-label{width:calc(100% - 18px)}.mat-select-placeholder{transition:color .4s .133s cubic-bezier(.25,.8,.25,1)}._mat-animation-noopable .mat-select-placeholder{transition:none}.mat-form-field-hide-placeholder .mat-select-placeholder{color:transparent;-webkit-text-fill-color:transparent;transition:none;display:block}\"],\n      inputs: ['disabled', 'disableRipple', 'tabIndex'],\n      encapsulation: ViewEncapsulation.None,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      host: {\n        'role': 'listbox',\n        '[attr.id]': 'id',\n        '[attr.tabindex]': 'tabIndex',\n        '[attr.aria-label]': '_getAriaLabel()',\n        '[attr.aria-labelledby]': '_getAriaLabelledby()',\n        '[attr.aria-required]': 'required.toString()',\n        '[attr.aria-disabled]': 'disabled.toString()',\n        '[attr.aria-invalid]': 'errorState',\n        '[attr.aria-owns]': 'panelOpen ? _optionIds : null',\n        '[attr.aria-multiselectable]': 'multiple',\n        '[attr.aria-describedby]': '_ariaDescribedby || null',\n        '[attr.aria-activedescendant]': '_getAriaActiveDescendant()',\n        '[class.mat-select-disabled]': 'disabled',\n        '[class.mat-select-invalid]': 'errorState',\n        '[class.mat-select-required]': 'required',\n        '[class.mat-select-empty]': 'empty',\n        'class': 'mat-select',\n        '(keydown)': '_handleKeydown($event)',\n        '(focus)': '_onFocus()',\n        '(blur)': '_onBlur()'\n      },\n      animations: [matSelectAnimations.transformPanel],\n      providers: [{\n        provide: MatFormFieldControl,\n        useExisting: MatSelect\n      }, {\n        provide: MAT_OPTION_PARENT_COMPONENT,\n        useExisting: MatSelect\n      }]\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc1.ViewportRuler\n    }, {\n      type: ɵngcc0.ChangeDetectorRef\n    }, {\n      type: ɵngcc0.NgZone\n    }, {\n      type: ɵngcc2.ErrorStateMatcher\n    }, {\n      type: ɵngcc0.ElementRef\n    }, {\n      type: ɵngcc3.Directionality,\n      decorators: [{\n        type: Optional\n      }]\n    }, {\n      type: ɵngcc4.NgForm,\n      decorators: [{\n        type: Optional\n      }]\n    }, {\n      type: ɵngcc4.FormGroupDirective,\n      decorators: [{\n        type: Optional\n      }]\n    }, {\n      type: ɵngcc5.MatFormField,\n      decorators: [{\n        type: Optional\n      }]\n    }, {\n      type: ɵngcc4.NgControl,\n      decorators: [{\n        type: Self\n      }, {\n        type: Optional\n      }]\n    }, {\n      type: String,\n      decorators: [{\n        type: Attribute,\n        args: ['tabindex']\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [MAT_SELECT_SCROLL_STRATEGY]\n      }]\n    }];\n  }, {\n    ariaLabel: [{\n      type: Input,\n      args: ['aria-label']\n    }],\n    openedChange: [{\n      type: Output\n    }],\n    _openedStream: [{\n      type: Output,\n      args: ['opened']\n    }],\n    _closedStream: [{\n      type: Output,\n      args: ['closed']\n    }],\n    selectionChange: [{\n      type: Output\n    }],\n    valueChange: [{\n      type: Output\n    }],\n    id: [{\n      type: Input\n    }],\n    placeholder: [{\n      type: Input\n    }],\n    required: [{\n      type: Input\n    }],\n    multiple: [{\n      type: Input\n    }],\n    disableOptionCentering: [{\n      type: Input\n    }],\n    compareWith: [{\n      type: Input\n    }],\n    value: [{\n      type: Input\n    }],\n    trigger: [{\n      type: ViewChild,\n      args: ['trigger']\n    }],\n    panel: [{\n      type: ViewChild,\n      args: ['panel']\n    }],\n    overlayDir: [{\n      type: ViewChild,\n      args: [CdkConnectedOverlay]\n    }],\n    options: [{\n      type: ContentChildren,\n      args: [MatOption, {\n        descendants: true\n      }]\n    }],\n    optionGroups: [{\n      type: ContentChildren,\n      args: [MatOptgroup]\n    }],\n    panelClass: [{\n      type: Input\n    }],\n    customTrigger: [{\n      type: ContentChild,\n      args: [MatSelectTrigger]\n    }],\n    ariaLabelledby: [{\n      type: Input,\n      args: ['aria-labelledby']\n    }],\n    errorStateMatcher: [{\n      type: Input\n    }],\n    sortComparator: [{\n      type: Input\n    }]\n  });\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n\nvar MatSelectModule = function MatSelectModule() {\n  _classCallCheck(this, MatSelectModule);\n};\n\nMatSelectModule.ɵfac = function MatSelectModule_Factory(t) {\n  return new (t || MatSelectModule)();\n};\n\nMatSelectModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n  type: MatSelectModule\n});\nMatSelectModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n  providers: [MAT_SELECT_SCROLL_STRATEGY_PROVIDER],\n  imports: [[CommonModule, OverlayModule, MatOptionModule, MatCommonModule], MatFormFieldModule, MatOptionModule, MatCommonModule]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatSelectModule, [{\n    type: NgModule,\n    args: [{\n      imports: [CommonModule, OverlayModule, MatOptionModule, MatCommonModule],\n      exports: [MatFormFieldModule, MatSelect, MatSelectTrigger, MatOptionModule, MatCommonModule],\n      declarations: [MatSelect, MatSelectTrigger],\n      providers: [MAT_SELECT_SCROLL_STRATEGY_PROVIDER]\n    }]\n  }], null, null);\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatSelectModule, {\n    declarations: function declarations() {\n      return [MatSelect, MatSelectTrigger];\n    },\n    imports: function imports() {\n      return [CommonModule, OverlayModule, MatOptionModule, MatCommonModule];\n    },\n    exports: function exports() {\n      return [MatFormFieldModule, MatSelect, MatSelectTrigger, MatOptionModule, MatCommonModule];\n    }\n  });\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n\nexport { MatSelectModule, MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY, SELECT_PANEL_MAX_HEIGHT, SELECT_PANEL_PADDING_X, SELECT_PANEL_INDENT_PADDING_X, SELECT_ITEM_HEIGHT_EM, SELECT_MULTIPLE_PANEL_PADDING_X, SELECT_PANEL_VIEWPORT_PADDING, MAT_SELECT_SCROLL_STRATEGY, MAT_SELECT_SCROLL_STRATEGY_PROVIDER, MatSelectChange, MatSelectBase, _MatSelectMixinBase, MatSelectTrigger, MatSelect, matSelectAnimations, transformPanel, fadeInContent }; //# sourceMappingURL=select.js.map","map":{"version":3,"sources":["/Users/adepertat/Dropbox/ECOLES/Openclassroom/P6_de_Pertat_Antoine/AntoinedePertat_6_240521/frontend/node_modules/@angular/material/__ivy_ngcc__/esm2015/select.js"],"names":["animate","state","style","transition","trigger","ActiveDescendantKeyManager","Directionality","coerceBooleanProperty","SelectionModel","A","DOWN_ARROW","END","ENTER","HOME","LEFT_ARROW","RIGHT_ARROW","SPACE","UP_ARROW","CdkConnectedOverlay","Overlay","OverlayModule","ViewportRuler","Attribute","ChangeDetectionStrategy","ChangeDetectorRef","Component","ContentChild","ContentChildren","Directive","ElementRef","EventEmitter","Inject","InjectionToken","Input","isDevMode","NgZone","Optional","Output","Self","ViewChild","ViewEncapsulation","NgModule","FormGroupDirective","NgControl","NgForm","_countGroupLabelsBeforeOption","_getOptionScrollPosition","ErrorStateMatcher","MAT_OPTION_PARENT_COMPONENT","MatOptgroup","MatOption","mixinDisabled","mixinDisableRipple","mixinErrorState","mixinTabIndex","MatCommonModule","MatOptionModule","MatFormField","MatFormFieldControl","MatFormFieldModule","defer","merge","Subject","distinctUntilChanged","filter","map","startWith","switchMap","take","takeUntil","CommonModule","ɵngcc0","ɵngcc1","ɵngcc2","ɵngcc3","ɵngcc4","ɵngcc5","ɵngcc6","ɵngcc7","_c0","_c1","MatSelect_span_4_Template","rf","ctx","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ctx_r2","ɵɵnextContext","ɵɵadvance","ɵɵtextInterpolate","placeholder","MatSelect_span_5_span_1_Template","ctx_r5","triggerValue","MatSelect_span_5_ng_content_2_Template","ɵɵprojection","MatSelect_span_5_Template","ɵɵtemplate","ctx_r3","ɵɵproperty","customTrigger","MatSelect_ng_template_8_Template","_r9","ɵɵgetCurrentView","ɵɵlistener","MatSelect_ng_template_8_Template_div_animation_transformPanel_done_0_listener","$event","ɵɵrestoreView","ctx_r8","_panelDoneAnimatingStream","next","toState","MatSelect_ng_template_8_Template_div_keydown_0_listener","ctx_r10","_handleKeydown","ctx_r4","ɵɵclassMapInterpolate1","_getPanelTheme","ɵɵstyleProp","_transformOrigin","_triggerFontSize","panelClass","multiple","_c2","_c3","matSelectAnimations","transformPanel","transform","minWidth","opacity","fadeInContent","getMatSelectDynamicMultipleError","Error","getMatSelectNonArrayValueError","getMatSelectNonFunctionValueError","nextUniqueId","SELECT_PANEL_MAX_HEIGHT","SELECT_PANEL_PADDING_X","SELECT_PANEL_INDENT_PADDING_X","SELECT_ITEM_HEIGHT_EM","SELECT_MULTIPLE_PANEL_PADDING_X","SELECT_PANEL_VIEWPORT_PADDING","MAT_SELECT_SCROLL_STRATEGY","MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY","overlay","scrollStrategies","reposition","MAT_SELECT_SCROLL_STRATEGY_PROVIDER","provide","deps","useFactory","MatSelectChange","source","value","MatSelectBase","_elementRef","_defaultErrorStateMatcher","_parentForm","_parentFormGroup","ngControl","_MatSelectMixinBase","MatSelectTrigger","ɵfac","MatSelectTrigger_Factory","t","ɵdir","ɵɵdefineDirective","type","selectors","ngDevMode","ɵsetClassMetadata","args","selector","MatSelect","_viewportRuler","_changeDetectorRef","_ngZone","elementRef","_dir","_parentFormField","tabIndex","scrollStrategyFactory","_panelOpen","_required","_scrollTop","_multiple","_compareWith","o1","o2","_uid","_destroy","_onChange","_onTouched","_optionIds","_offsetY","_positions","originX","originY","overlayX","overlayY","_disableOptionCentering","_focused","controlType","ariaLabel","optionSelectionChanges","options","option","onSelectionChange","onStable","asObservable","pipe","openedChange","_openedStream","o","_closedStream","selectionChange","valueChange","valueAccessor","_scrollStrategyFactory","_scrollStrategy","parseInt","id","_placeholder","stateChanges","_selectionModel","fn","_initializeSelection","_value","newValue","writeValue","_id","subscribe","panelOpen","emit","overlayDir","offsetX","markForCheck","_initKeyManager","onChange","event","added","forEach","select","removed","deselect","changes","_resetOptions","updateErrorState","complete","close","open","disabled","length","_triggerRect","nativeElement","getBoundingClientRect","getComputedStyle","fontSize","_keyManager","withHorizontalOrientation","_calculateOverlayPosition","_highlightCorrectOption","overlayRef","overlayElement","_isRtl","_setSelectionByValue","isDisabled","selected","empty","selectedOptions","viewValue","reverse","join","_handleOpenKeydown","_handleClosedKeydown","keyCode","isArrowKey","isOpenKey","manager","altKey","preventDefault","setFirstItemActive","setLastItemActive","onKeydown","activeItem","_selectViaInteraction","ctrlKey","hasDeselectedOptions","some","opt","previouslyFocusedIndex","activeItemIndex","shiftKey","positionChange","_setPseudoCheckboxPaddingSize","detectChanges","_calculateOverlayOffsetX","panel","scrollTop","color","pseudoCheckbox","querySelector","offsetWidth","isEmpty","Promise","resolve","then","Array","isArray","clear","currentValue","_selectValue","_sortValues","correspondingOption","setActiveItem","find","error","console","warn","withTypeAhead","withVerticalOrientation","tabOut","focus","change","_scrollActiveOptionIntoView","changedOrDestroyed","_onSelect","isUserInput","_stateChanges","_setOptionIds","wasSelected","isSelected","_propagateChanges","toArray","sort","a","b","sortComparator","indexOf","fallbackValue","valueToEmit","activeOptionIndex","labelCount","optionGroups","_getItemHeight","reduce","result","current","index","undefined","itemHeight","items","_getItemCount","panelHeight","Math","min","scrollContainerHeight","maxScroll","selectedOptionOffset","_getOptionIndex","scrollBuffer","_calculateOverlayScroll","_calculateOverlayOffsetY","_checkOverlayWithinViewport","selectedIndex","optionOffsetFromScrollTop","halfOptionHeight","optimalScrollPosition","max","ariaLabelledby","_hasFloatingLabel","_getAriaLabel","_labelId","overlayRect","viewportSize","getViewportSize","isRtl","paddingWidth","first","group","leftOverflow","left","rightOverflow","right","width","round","updatePosition","optionHeightAdjustment","height","maxOptionsDisplayed","floor","optionOffsetFromPanelTop","firstDisplayedIndex","selectedDisplayIndex","partialItemHeight","topSpaceAvailable","top","bottomSpaceAvailable","bottom","panelHeightTop","abs","totalPanelHeight","panelHeightBottom","_adjustPanelUp","_adjustPanelDown","_getOriginBasedOnOption","distanceBelowViewport","distanceAboveViewport","ids","_ariaDescribedby","MatSelect_Factory","ɵɵdirectiveInject","ɵɵinjectAttribute","ɵcmp","ɵɵdefineComponent","contentQueries","MatSelect_ContentQueries","dirIndex","ɵɵcontentQuery","_t","ɵɵqueryRefresh","ɵɵloadQuery","viewQuery","MatSelect_Query","ɵɵviewQuery","hostAttrs","hostVars","hostBindings","MatSelect_HostBindings","MatSelect_keydown_HostBindingHandler","MatSelect_focus_HostBindingHandler","_onFocus","MatSelect_blur_HostBindingHandler","_onBlur","ɵɵattribute","_getAriaLabelledby","required","toString","errorState","_getAriaActiveDescendant","ɵɵclassProp","inputs","disableRipple","disableOptionCentering","compareWith","errorStateMatcher","outputs","exportAs","features","ɵɵProvidersFeature","useExisting","ɵɵInheritDefinitionFeature","ɵɵNgOnChangesFeature","ngContentSelectors","decls","vars","consts","template","MatSelect_Template","ɵɵprojectionDef","MatSelect_Template_div_click_0_listener","toggle","ɵɵelement","MatSelect_Template_ng_template_backdropClick_8_listener","MatSelect_Template_ng_template_attach_8_listener","_onAttached","MatSelect_Template_ng_template_detach_8_listener","_r0","ɵɵreference","directives","CdkOverlayOrigin","NgSwitch","NgSwitchCase","NgSwitchDefault","NgClass","styles","encapsulation","data","animation","changeDetection","ctorParameters","decorators","String","propDecorators","descendants","None","OnPush","host","animations","providers","MatSelectModule","MatSelectModule_Factory","ɵmod","ɵɵdefineNgModule","ɵinj","ɵɵdefineInjector","imports","exports","declarations","ngJitMode","ɵɵsetNgModuleScope"],"mappings":";;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,OAAT,EAAkBC,KAAlB,EAAyBC,KAAzB,EAAgCC,UAAhC,EAA4CC,OAA5C,QAA2D,qBAA3D;AACA,SAASC,0BAAT,QAA2C,mBAA3C;AACA,SAASC,cAAT,QAA+B,mBAA/B;AACA,SAASC,qBAAT,QAAsC,uBAAtC;AACA,SAASC,cAAT,QAA+B,0BAA/B;AACA,SAASC,CAAT,EAAYC,UAAZ,EAAwBC,GAAxB,EAA6BC,KAA7B,EAAoCC,IAApC,EAA0CC,UAA1C,EAAsDC,WAAtD,EAAmEC,KAAnE,EAA0EC,QAA1E,QAA0F,uBAA1F;AACA,SAASC,mBAAT,EAA8BC,OAA9B,EAAuCC,aAAvC,QAA4D,sBAA5D;AACA,SAASC,aAAT,QAA8B,wBAA9B;AACA,SAASC,SAAT,EAAoBC,uBAApB,EAA6CC,iBAA7C,EAAgEC,SAAhE,EAA2EC,YAA3E,EAAyFC,eAAzF,EAA0GC,SAA1G,EAAqHC,UAArH,EAAiIC,YAAjI,EAA+IC,MAA/I,EAAuJC,cAAvJ,EAAuKC,KAAvK,EAA8KC,SAA9K,EAAyLC,MAAzL,EAAiMC,QAAjM,EAA2MC,MAA3M,EAAmNC,IAAnN,EAAyNC,SAAzN,EAAoOC,iBAApO,EAAuPC,QAAvP,QAAuQ,eAAvQ;AACA,SAASC,kBAAT,EAA6BC,SAA7B,EAAwCC,MAAxC,QAAsD,gBAAtD;AACA,SAASC,6BAAT,EAAwCC,wBAAxC,EAAkEC,iBAAlE,EAAqFC,2BAArF,EAAkHC,WAAlH,EAA+HC,SAA/H,EAA0IC,aAA1I,EAAyJC,kBAAzJ,EAA6KC,eAA7K,EAA8LC,aAA9L,EAA6MC,eAA7M,EAA8NC,eAA9N,QAAqP,wBAArP;AACA,SAASC,YAAT,EAAuBC,mBAAvB,EAA4CC,kBAA5C,QAAsE,8BAAtE;AACA,SAASC,KAAT,EAAgBC,KAAhB,EAAuBC,OAAvB,QAAsC,MAAtC;AACA,SAASC,oBAAT,EAA+BC,MAA/B,EAAuCC,GAAvC,EAA4CC,SAA5C,EAAuDC,SAAvD,EAAkEC,IAAlE,EAAwEC,SAAxE,QAAyF,gBAAzF;AACA,SAASC,YAAT,QAA6B,iBAA7B;AAEA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,KAAKC,MAAZ,MAAwB,eAAxB;AACA,OAAO,KAAKC,MAAZ,MAAwB,wBAAxB;AACA,OAAO,KAAKC,MAAZ,MAAwB,wBAAxB;AACA,OAAO,KAAKC,MAAZ,MAAwB,mBAAxB;AACA,OAAO,KAAKC,MAAZ,MAAwB,gBAAxB;AACA,OAAO,KAAKC,MAAZ,MAAwB,8BAAxB;AACA,OAAO,KAAKC,MAAZ,MAAwB,sBAAxB;AACA,OAAO,KAAKC,MAAZ,MAAwB,iBAAxB;AAEA,IAAMC,GAAG,GAAG,CAAC,SAAD,CAAZ;AACA,IAAMC,GAAG,GAAG,CAAC,OAAD,CAAZ;;AACA,SAASC,yBAAT,CAAmCC,EAAnC,EAAuCC,GAAvC,EAA4C;AAAE,MAAID,EAAE,GAAG,CAAT,EAAY;AACtDX,IAAAA,MAAM,CAACa,cAAP,CAAsB,CAAtB,EAAyB,MAAzB,EAAiC,CAAjC;AACAb,IAAAA,MAAM,CAACc,MAAP,CAAc,CAAd;AACAd,IAAAA,MAAM,CAACe,YAAP;AACH;;AAAC,MAAIJ,EAAE,GAAG,CAAT,EAAY;AACV,QAAMK,MAAM,GAAGhB,MAAM,CAACiB,aAAP,EAAf;AACAjB,IAAAA,MAAM,CAACkB,SAAP,CAAiB,CAAjB;AACAlB,IAAAA,MAAM,CAACmB,iBAAP,CAAyBH,MAAM,CAACI,WAAP,IAAsB,MAA/C;AACH;AAAE;;AACH,SAASC,gCAAT,CAA0CV,EAA1C,EAA8CC,GAA9C,EAAmD;AAAE,MAAID,EAAE,GAAG,CAAT,EAAY;AAC7DX,IAAAA,MAAM,CAACa,cAAP,CAAsB,CAAtB,EAAyB,MAAzB;AACAb,IAAAA,MAAM,CAACc,MAAP,CAAc,CAAd;AACAd,IAAAA,MAAM,CAACe,YAAP;AACH;;AAAC,MAAIJ,EAAE,GAAG,CAAT,EAAY;AACV,QAAMW,MAAM,GAAGtB,MAAM,CAACiB,aAAP,CAAqB,CAArB,CAAf;AACAjB,IAAAA,MAAM,CAACkB,SAAP,CAAiB,CAAjB;AACAlB,IAAAA,MAAM,CAACmB,iBAAP,CAAyBG,MAAM,CAACC,YAAP,IAAuB,MAAhD;AACH;AAAE;;AACH,SAASC,sCAAT,CAAgDb,EAAhD,EAAoDC,GAApD,EAAyD;AAAE,MAAID,EAAE,GAAG,CAAT,EAAY;AACnEX,IAAAA,MAAM,CAACyB,YAAP,CAAoB,CAApB,EAAuB,CAAvB,EAA0B,CAAC,eAAD,EAAkB,MAAlB,CAA1B;AACH;AAAE;;AACH,SAASC,yBAAT,CAAmCf,EAAnC,EAAuCC,GAAvC,EAA4C;AAAE,MAAID,EAAE,GAAG,CAAT,EAAY;AACtDX,IAAAA,MAAM,CAACa,cAAP,CAAsB,CAAtB,EAAyB,MAAzB,EAAiC,CAAjC;AACAb,IAAAA,MAAM,CAAC2B,UAAP,CAAkB,CAAlB,EAAqBN,gCAArB,EAAuD,CAAvD,EAA0D,CAA1D,EAA6D,MAA7D,EAAqE,EAArE;AACArB,IAAAA,MAAM,CAAC2B,UAAP,CAAkB,CAAlB,EAAqBH,sCAArB,EAA6D,CAA7D,EAAgE,CAAhE,EAAmE,YAAnE,EAAiF,EAAjF;AACAxB,IAAAA,MAAM,CAACe,YAAP;AACH;;AAAC,MAAIJ,EAAE,GAAG,CAAT,EAAY;AACV,QAAMiB,MAAM,GAAG5B,MAAM,CAACiB,aAAP,EAAf;AACAjB,IAAAA,MAAM,CAAC6B,UAAP,CAAkB,UAAlB,EAA8B,CAAC,CAACD,MAAM,CAACE,aAAvC;AACA9B,IAAAA,MAAM,CAACkB,SAAP,CAAiB,CAAjB;AACAlB,IAAAA,MAAM,CAAC6B,UAAP,CAAkB,cAAlB,EAAkC,IAAlC;AACH;AAAE;;AACH,SAASE,gCAAT,CAA0CpB,EAA1C,EAA8CC,GAA9C,EAAmD;AAAE,MAAID,EAAE,GAAG,CAAT,EAAY;AAC7D,QAAMqB,GAAG,GAAGhC,MAAM,CAACiC,gBAAP,EAAZ;;AACAjC,IAAAA,MAAM,CAACa,cAAP,CAAsB,CAAtB,EAAyB,KAAzB,EAAgC,EAAhC,EAAoC,EAApC;AACAb,IAAAA,MAAM,CAACkC,UAAP,CAAkB,sBAAlB,EAA0C,SAASC,6EAAT,CAAuFC,MAAvF,EAA+F;AAAEpC,MAAAA,MAAM,CAACqC,aAAP,CAAqBL,GAArB;AAA2B,UAAMM,MAAM,GAAGtC,MAAM,CAACiB,aAAP,EAAf;AAAuC,aAAOqB,MAAM,CAACC,yBAAP,CAAiCC,IAAjC,CAAsCJ,MAAM,CAACK,OAA7C,CAAP;AAA+D,KAA5Q,EAA8Q,SAA9Q,EAAyR,SAASC,uDAAT,CAAiEN,MAAjE,EAAyE;AAAEpC,MAAAA,MAAM,CAACqC,aAAP,CAAqBL,GAArB;AAA2B,UAAMW,OAAO,GAAG3C,MAAM,CAACiB,aAAP,EAAhB;AAAwC,aAAO0B,OAAO,CAACC,cAAR,CAAuBR,MAAvB,CAAP;AAAwC,KAA/c;AACApC,IAAAA,MAAM,CAACyB,YAAP,CAAoB,CAApB,EAAuB,CAAvB;AACAzB,IAAAA,MAAM,CAACe,YAAP;AACH;;AAAC,MAAIJ,EAAE,GAAG,CAAT,EAAY;AACV,QAAMkC,MAAM,GAAG7C,MAAM,CAACiB,aAAP,EAAf;AACAjB,IAAAA,MAAM,CAAC8C,sBAAP,CAA8B,mBAA9B,EAAmDD,MAAM,CAACE,cAAP,EAAnD,EAA4E,EAA5E;AACA/C,IAAAA,MAAM,CAACgD,WAAP,CAAmB,kBAAnB,EAAuCH,MAAM,CAACI,gBAA9C,EAAgE,WAAhE,EAA6EJ,MAAM,CAACK,gBAApF,EAAsG,IAAtG;AACAlD,IAAAA,MAAM,CAAC6B,UAAP,CAAkB,SAAlB,EAA6BgB,MAAM,CAACM,UAApC,EAAgD,iBAAhD,EAAmEN,MAAM,CAACO,QAAP,GAAkB,kBAAlB,GAAuC,SAA1G;AACH;AAAE;;AACH,IAAMC,GAAG,GAAG,CAAC,CAAC,CAAC,oBAAD,CAAD,CAAD,EAA2B,GAA3B,CAAZ;AACA,IAAMC,GAAG,GAAG,CAAC,oBAAD,EAAuB,GAAvB,CAAZ;AACA,IAAMC,mBAAmB,GAAG;AACxB;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACIC,EAAAA,cAAc,EAAE3H,OAAO,CAAC,gBAAD,EAAmB,CACtCH,KAAK,CAAC,MAAD,EAASC,KAAK,CAAC;AAChB8H,IAAAA,SAAS,EAAE,aADK;AAEhBC,IAAAA,QAAQ,EAAE,MAFM;AAGhBC,IAAAA,OAAO,EAAE;AAHO,GAAD,CAAd,CADiC,EAMtCjI,KAAK,CAAC,SAAD,EAAYC,KAAK,CAAC;AACnBgI,IAAAA,OAAO,EAAE,CADU;AAEnBD,IAAAA,QAAQ,EAAE,mBAFS;AAGnB;AACAD,IAAAA,SAAS,EAAE;AAJQ,GAAD,CAAjB,CANiC,EAYtC/H,KAAK,CAAC,kBAAD,EAAqBC,KAAK,CAAC;AAC5BgI,IAAAA,OAAO,EAAE,CADmB;AAE5BD,IAAAA,QAAQ,EAAE,mBAFkB;AAG5B;AACAD,IAAAA,SAAS,EAAE;AAJiB,GAAD,CAA1B,CAZiC,EAkBtC7H,UAAU,CAAC,WAAD,EAAcH,OAAO,CAAC,kCAAD,CAArB,CAlB4B,EAmBtCG,UAAU,CAAC,WAAD,EAAcH,OAAO,CAAC,mBAAD,EAAsBE,KAAK,CAAC;AAAEgI,IAAAA,OAAO,EAAE;AAAX,GAAD,CAA3B,CAArB,CAnB4B,CAAnB,CAVC;;AA+BxB;AACJ;AACA;AACA;AACA;AACA;AACA;AACIC,EAAAA,aAAa,EAAE/H,OAAO,CAAC,eAAD,EAAkB,CACpCH,KAAK,CAAC,SAAD,EAAYC,KAAK,CAAC;AAAEgI,IAAAA,OAAO,EAAE;AAAX,GAAD,CAAjB,CAD+B,EAEpC/H,UAAU,CAAC,iBAAD,EAAoB,CAC1BD,KAAK,CAAC;AAAEgI,IAAAA,OAAO,EAAE;AAAX,GAAD,CADqB,EAE1BlI,OAAO,CAAC,8CAAD,CAFmB,CAApB,CAF0B,CAAlB;AAtCE,CAA5B;AA8CA;AACA;AACA;AACA;AACA;;AACA,IAAM+H,cAAc,GAAGD,mBAAmB,CAACC,cAA3C;AACA;AACA;AACA;AACA;AACA;;AACA,IAAMI,aAAa,GAAGL,mBAAmB,CAACK,aAA1C;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASC,gCAAT,GAA4C;AACxC,SAAOC,KAAK,CAAC,+DAAD,CAAZ;AACH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASC,8BAAT,GAA0C;AACtC,SAAOD,KAAK,CAAC,oDAAD,CAAZ;AACH;AACD;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASE,iCAAT,GAA6C;AACzC,SAAOF,KAAK,CAAC,mCAAD,CAAZ;AACH;AAED;AACA;AACA;AACA;;AACA;;;AACA,IAAIG,YAAY,GAAG,CAAnB;AACA;AACA;AACA;;AACA,IAAMC,uBAAuB,GAAG,GAAhC;AACA;AACA;AACA;;AACA,IAAMC,sBAAsB,GAAG,EAA/B;AACA;AACA;AACA;;AACA,IAAMC,6BAA6B,GAAGD,sBAAsB,GAAG,CAA/D;AACA;AACA;AACA;;AACA,IAAME,qBAAqB,GAAG,CAA9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,IAAIC,+BAA+B,GAAG,CAAtC;AACA;AACA;AACA;AACA;;AACA,IAAMC,6BAA6B,GAAG,CAAtC;AACA;AACA;AACA;;AACA,IAAMC,0BAA0B,GAAG,IAAI/G,cAAJ,CAAmB,4BAAnB,CAAnC;AACA;AACA;AACA;AACA;AACA;;AACA,SAASgH,2CAAT,CAAqDC,OAArD,EAA8D;AAC1D,SAAO;AAAA,WAAMA,OAAO,CAACC,gBAAR,CAAyBC,UAAzB,EAAN;AAAA,GAAP;AACH;AACD;AACA;AACA;;;AACA,IAAMC,mCAAmC,GAAG;AACxCC,EAAAA,OAAO,EAAEN,0BAD+B;AAExCO,EAAAA,IAAI,EAAE,CAACnI,OAAD,CAFkC;AAGxCoI,EAAAA,UAAU,EAAEP;AAH4B,CAA5C;AAKA;AACA;AACA;;IACMQ,e;AACF;AACJ;AACA;AACA;AACI,yBAAYC,MAAZ,EAAoBC,KAApB,EAA2B;AAAA;;AACvB,OAAKD,MAAL,GAAcA,MAAd;AACA,OAAKC,KAAL,GAAaA,KAAb;AACH,C;AAEL;AACA;AACA;;;IACMC,a;AACF;AACJ;AACA;AACA;AACA;AACA;AACA;AACI,uBAAYC,WAAZ,EAAyBC,yBAAzB,EAAoDC,WAApD,EAAiEC,gBAAjE,EAAmFC,SAAnF,EAA8F;AAAA;;AAC1F,OAAKJ,WAAL,GAAmBA,WAAnB;AACA,OAAKC,yBAAL,GAAiCA,yBAAjC;AACA,OAAKC,WAAL,GAAmBA,WAAnB;AACA,OAAKC,gBAAL,GAAwBA,gBAAxB;AACA,OAAKC,SAAL,GAAiBA,SAAjB;AACH,C;AAEL;;;AACA,IAAMC,mBAAmB,GAAG7G,kBAAkB,CAACE,aAAa,CAACH,aAAa,CAACE,eAAe,CAACsG,aAAD,CAAhB,CAAd,CAAd,CAA9C;AACA;AACA;AACA;;;IACMO,gB;;;;AAENA,gBAAgB,CAACC,IAAjB,GAAwB,SAASC,wBAAT,CAAkCC,CAAlC,EAAqC;AAAE,SAAO,KAAKA,CAAC,IAAIH,gBAAV,GAAP;AAAuC,CAAtG;;AACAA,gBAAgB,CAACI,IAAjB,GAAwB,aAAc/F,MAAM,CAACgG,iBAAP,CAAyB;AAAEC,EAAAA,IAAI,EAAEN,gBAAR;AAA0BO,EAAAA,SAAS,EAAE,CAAC,CAAC,oBAAD,CAAD;AAArC,CAAzB,CAAtC;;AACA,CAAC,YAAY;AAAE,GAAC,OAAOC,SAAP,KAAqB,WAArB,IAAoCA,SAArC,KAAmDnG,MAAM,CAACoG,iBAAP,CAAyBT,gBAAzB,EAA2C,CAAC;AACtGM,IAAAA,IAAI,EAAE5I,SADgG;AAEtGgJ,IAAAA,IAAI,EAAE,CAAC;AACCC,MAAAA,QAAQ,EAAE;AADX,KAAD;AAFgG,GAAD,CAA3C,EAK1D,IAL0D,EAKpD,IALoD,CAAnD;AAKO,CALtB;;IAMMC,S;;;;;AACF;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACI,qBAAYC,cAAZ,EAA4BC,kBAA5B,EAAgDC,OAAhD,EAAyDpB,yBAAzD,EAAoFqB,UAApF,EAAgGC,IAAhG,EAAsGrB,WAAtG,EAAmHC,gBAAnH,EAAqIqB,gBAArI,EAAuJpB,SAAvJ,EAAkKqB,QAAlK,EAA4KC,qBAA5K,EAAmM;AAAA;;AAAA;;AAC/L,8BAAMJ,UAAN,EAAkBrB,yBAAlB,EAA6CC,WAA7C,EAA0DC,gBAA1D,EAA4EC,SAA5E;AACA,UAAKe,cAAL,GAAsBA,cAAtB;AACA,UAAKC,kBAAL,GAA0BA,kBAA1B;AACA,UAAKC,OAAL,GAAeA,OAAf;AACA,UAAKE,IAAL,GAAYA,IAAZ;AACA,UAAKC,gBAAL,GAAwBA,gBAAxB;AACA,UAAKpB,SAAL,GAAiBA,SAAjB;AACA;AACR;AACA;;AACQ,UAAKuB,UAAL,GAAkB,KAAlB;AACA;AACR;AACA;;AACQ,UAAKC,SAAL,GAAiB,KAAjB;AACA;AACR;AACA;;AACQ,UAAKC,UAAL,GAAkB,CAAlB;AACA;AACR;AACA;;AACQ,UAAKC,SAAL,GAAiB,KAAjB;AACA;AACR;AACA;;AACQ,UAAKC,YAAL,GAAoB,UAACC,EAAD,EAAKC,EAAL;AAAA,aAAYD,EAAE,KAAKC,EAAnB;AAAA,KAApB;AACA;AACR;AACA;;;AACQ,UAAKC,IAAL,wBAA0BtD,YAAY,EAAtC;AACA;AACR;AACA;;AACQ,UAAKuD,QAAL,GAAgB,IAAIjI,OAAJ,EAAhB;AACA;AACR;AACA;;AACQ,UAAK2D,gBAAL,GAAwB,CAAxB;AACA;AACR;AACA;;AACQ,UAAKuE,SAAL,GAAiB,YAAM,CAAG,CAA1B;AACA;AACR;AACA;;;AACQ,UAAKC,UAAL,GAAkB,YAAM,CAAG,CAA3B;AACA;AACR;AACA;;;AACQ,UAAKC,UAAL,GAAkB,EAAlB;AACA;AACR;AACA;;AACQ,UAAK1E,gBAAL,GAAwB,KAAxB;AACA;AACR;AACA;;AACQ,UAAKV,yBAAL,GAAiC,IAAIhD,OAAJ,EAAjC;AACA;AACR;AACA;AACA;AACA;;AACQ,UAAKqI,QAAL,GAAgB,CAAhB;AACA;AACR;AACA;AACA;AACA;AACA;;AACQ,UAAKC,UAAL,GAAkB,CACd;AACIC,MAAAA,OAAO,EAAE,OADb;AAEIC,MAAAA,OAAO,EAAE,KAFb;AAGIC,MAAAA,QAAQ,EAAE,OAHd;AAIIC,MAAAA,QAAQ,EAAE;AAJd,KADc,EAOd;AACIH,MAAAA,OAAO,EAAE,OADb;AAEIC,MAAAA,OAAO,EAAE,QAFb;AAGIC,MAAAA,QAAQ,EAAE,OAHd;AAIIC,MAAAA,QAAQ,EAAE;AAJd,KAPc,CAAlB;AAcA;AACR;AACA;;AACQ,UAAKC,uBAAL,GAA+B,KAA/B;AACA,UAAKC,QAAL,GAAgB,KAAhB;AACA;AACR;AACA;;AACQ,UAAKC,WAAL,GAAmB,YAAnB;AACA;AACR;AACA;;AACQ,UAAKC,SAAL,GAAiB,EAAjB;AACA;AACR;AACA;;AACQ,UAAKC,sBAAL,GAA8BjJ,KAAK,CAAC,YAAM;AACtC,UAAI,MAAKkJ,OAAT,EAAkB;AACd,eAAOjJ,KAAK,MAAL,4BAAS,MAAKiJ,OAAL,CAAa7I,GAAb,CAAiB,UAAA8I,MAAM;AAAA,iBAAIA,MAAM,CAACC,iBAAX;AAAA,SAAvB,CAAT,EAAP;AACH;;AACD,aAAO,MAAK/B,OAAL,CAAagC,QAAb,CACFC,YADE,GAEFC,IAFE,CAEG/I,IAAI,CAAC,CAAD,CAFP,EAEYD,SAAS,CAAC;AAAA,eAAM,MAAK0I,sBAAX;AAAA,OAAD,CAFrB,CAAP;AAGH,KAPkC,CAAnC;AAQA;AACR;AACA;;AACQ,UAAKO,YAAL,GAAoB,IAAItL,YAAJ,EAApB;AACA;AACR;AACA;;AACQ,UAAKuL,aAAL,GAAqB,MAAKD,YAAL,CAAkBD,IAAlB,CAAuBnJ,MAAM,CAAC,UAAAsJ,CAAC;AAAA,aAAIA,CAAJ;AAAA,KAAF,CAA7B,EAAuCrJ,GAAG,CAAC,YAAM,CAAG,CAAV,CAA1C,CAArB;AACA;AACR;AACA;;AACQ,UAAKsJ,aAAL,GAAqB,MAAKH,YAAL,CAAkBD,IAAlB,CAAuBnJ,MAAM,CAAC,UAAAsJ,CAAC;AAAA,aAAI,CAACA,CAAL;AAAA,KAAF,CAA7B,EAAwCrJ,GAAG,CAAC,YAAM,CAAG,CAAV,CAA3C,CAArB;AACA;AACR;AACA;;AACQ,UAAKuJ,eAAL,GAAuB,IAAI1L,YAAJ,EAAvB;AACA;AACR;AACA;AACA;AACA;;AACQ,UAAK2L,WAAL,GAAmB,IAAI3L,YAAJ,EAAnB;;AACA,QAAI,MAAKkI,SAAT,EAAoB;AAChB;AACA;AACA,YAAKA,SAAL,CAAe0D,aAAf;AACH;;AACD,UAAKC,sBAAL,GAA8BrC,qBAA9B;AACA,UAAKsC,eAAL,GAAuB,MAAKD,sBAAL,EAAvB;AACA,UAAKtC,QAAL,GAAgBwC,QAAQ,CAACxC,QAAD,CAAR,IAAsB,CAAtC,CA3I+L,CA4I/L;;AACA,UAAKyC,EAAL,GAAU,MAAKA,EAAf;AA7I+L;AA8IlM;AACD;AACJ;AACA;AACA;;;;;SACI,eAAc;AACV,aAAO,KAAKpB,QAAL,IAAiB,KAAKnB,UAA7B;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;;SACI,aAAY7B,KAAZ,EAAmB;AACf,WAAKgD,QAAL,GAAgBhD,KAAhB;AACH;AACD;AACJ;AACA;AACA;;;;SACI,eAAkB;AAAE,aAAO,KAAKqE,YAAZ;AAA2B;AAC/C;AACJ;AACA;AACA;;SACI,aAAgBrE,KAAhB,EAAuB;AACnB,WAAKqE,YAAL,GAAoBrE,KAApB;AACA,WAAKsE,YAAL,CAAkBjH,IAAlB;AACH;AACD;AACJ;AACA;AACA;;;;SACI,eAAe;AAAE,aAAO,KAAKyE,SAAZ;AAAwB;AACzC;AACJ;AACA;AACA;;SACI,aAAa9B,KAAb,EAAoB;AAChB,WAAK8B,SAAL,GAAiBjL,qBAAqB,CAACmJ,KAAD,CAAtC;AACA,WAAKsE,YAAL,CAAkBjH,IAAlB;AACH;AACD;AACJ;AACA;AACA;;;;SACI,eAAe;AAAE,aAAO,KAAK2E,SAAZ;AAAwB;AACzC;AACJ;AACA;AACA;;SACI,aAAahC,KAAb,EAAoB;AAChB,UAAI,KAAKuE,eAAT,EAA0B;AACtB,cAAM7F,gCAAgC,EAAtC;AACH;;AACD,WAAKsD,SAAL,GAAiBnL,qBAAqB,CAACmJ,KAAD,CAAtC;AACH;AACD;AACJ;AACA;AACA;;;;SACI,eAA6B;AAAE,aAAO,KAAK+C,uBAAZ;AAAsC;AACrE;AACJ;AACA;AACA;;SACI,aAA2B/C,KAA3B,EAAkC;AAC9B,WAAK+C,uBAAL,GAA+BlM,qBAAqB,CAACmJ,KAAD,CAApD;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;;;;SACI,eAAkB;AAAE,aAAO,KAAKiC,YAAZ;AAA2B;AAC/C;AACJ;AACA;AACA;;SACI,aAAgBuC,EAAhB,EAAoB;AAChB,UAAI,OAAOA,EAAP,KAAc,UAAlB,EAA8B;AAC1B,cAAM3F,iCAAiC,EAAvC;AACH;;AACD,WAAKoD,YAAL,GAAoBuC,EAApB;;AACA,UAAI,KAAKD,eAAT,EAA0B;AACtB;AACA,aAAKE,oBAAL;AACH;AACJ;AACD;AACJ;AACA;AACA;;;;SACI,eAAY;AAAE,aAAO,KAAKC,MAAZ;AAAqB;AACnC;AACJ;AACA;AACA;;SACI,aAAUC,QAAV,EAAoB;AAChB,UAAIA,QAAQ,KAAK,KAAKD,MAAtB,EAA8B;AAC1B,aAAKE,UAAL,CAAgBD,QAAhB;AACA,aAAKD,MAAL,GAAcC,QAAd;AACH;AACJ;AACD;AACJ;AACA;AACA;;;;SACI,eAAS;AAAE,aAAO,KAAKE,GAAZ;AAAkB;AAC7B;AACJ;AACA;AACA;;SACI,aAAO7E,KAAP,EAAc;AACV,WAAK6E,GAAL,GAAW7E,KAAK,IAAI,KAAKoC,IAAzB;AACA,WAAKkC,YAAL,CAAkBjH,IAAlB;AACH;AACD;AACJ;AACA;;;;WACI,oBAAW;AAAA;;AACP,WAAKkH,eAAL,GAAuB,IAAIzN,cAAJ,CAAmB,KAAKmH,QAAxB,CAAvB;AACA,WAAKqG,YAAL,CAAkBjH,IAAlB,GAFO,CAGP;AACA;AACA;;AACA,WAAKD,yBAAL,CACKqG,IADL,CACUpJ,oBAAoB,EAD9B,EACkCM,SAAS,CAAC,KAAK0H,QAAN,CAD3C,EAEKyC,SAFL,CAEe,YAAM;AACjB,YAAI,MAAI,CAACC,SAAT,EAAoB;AAChB,UAAA,MAAI,CAAChD,UAAL,GAAkB,CAAlB;;AACA,UAAA,MAAI,CAAC2B,YAAL,CAAkBsB,IAAlB,CAAuB,IAAvB;AACH,SAHD,MAIK;AACD,UAAA,MAAI,CAACtB,YAAL,CAAkBsB,IAAlB,CAAuB,KAAvB;;AACA,UAAA,MAAI,CAACC,UAAL,CAAgBC,OAAhB,GAA0B,CAA1B;;AACA,UAAA,MAAI,CAAC5D,kBAAL,CAAwB6D,YAAxB;AACH;AACJ,OAZD;AAaH;AACD;AACJ;AACA;;;;WACI,8BAAqB;AAAA;;AACjB,WAAKC,eAAL;;AACA,WAAKb,eAAL,CAAqBc,QAArB,CAA8B5B,IAA9B,CAAmC9I,SAAS,CAAC,KAAK0H,QAAN,CAA5C,EAA6DyC,SAA7D,CAAuE,UAAAQ,KAAK,EAAI;AAC5EA,QAAAA,KAAK,CAACC,KAAN,CAAYC,OAAZ,CAAoB,UAAAnC,MAAM;AAAA,iBAAIA,MAAM,CAACoC,MAAP,EAAJ;AAAA,SAA1B;AACAH,QAAAA,KAAK,CAACI,OAAN,CAAcF,OAAd,CAAsB,UAAAnC,MAAM;AAAA,iBAAIA,MAAM,CAACsC,QAAP,EAAJ;AAAA,SAA5B;AACH,OAHD;;AAIA,WAAKvC,OAAL,CAAawC,OAAb,CAAqBnC,IAArB,CAA0BjJ,SAAS,CAAC,IAAD,CAAnC,EAA2CG,SAAS,CAAC,KAAK0H,QAAN,CAApD,EAAqEyC,SAArE,CAA+E,YAAM;AACjF,QAAA,MAAI,CAACe,aAAL;;AACA,QAAA,MAAI,CAACpB,oBAAL;AACH,OAHD;AAIH;AACD;AACJ;AACA;;;;WACI,qBAAY;AACR,UAAI,KAAKnE,SAAT,EAAoB;AAChB,aAAKwF,gBAAL;AACH;AACJ;AACD;AACJ;AACA;AACA;;;;WACI,qBAAYF,OAAZ,EAAqB;AACjB;AACA;AACA,UAAIA,OAAO,CAAC,UAAD,CAAX,EAAyB;AACrB,aAAKtB,YAAL,CAAkBjH,IAAlB;AACH;AACJ;AACD;AACJ;AACA;;;;WACI,uBAAc;AACV,WAAKgF,QAAL,CAAchF,IAAd;;AACA,WAAKgF,QAAL,CAAc0D,QAAd;;AACA,WAAKzB,YAAL,CAAkByB,QAAlB;AACH;AACD;AACJ;AACA;AACA;;;;WACI,kBAAS;AACL,WAAKhB,SAAL,GAAiB,KAAKiB,KAAL,EAAjB,GAAgC,KAAKC,IAAL,EAAhC;AACH;AACD;AACJ;AACA;AACA;;;;WACI,gBAAO;AAAA;;AACH,UAAI,KAAKC,QAAL,IAAiB,CAAC,KAAK9C,OAAvB,IAAkC,CAAC,KAAKA,OAAL,CAAa+C,MAAhD,IAA0D,KAAKtE,UAAnE,EAA+E;AAC3E;AACH;;AACD,WAAKuE,YAAL,GAAoB,KAAK1P,OAAL,CAAa2P,aAAb,CAA2BC,qBAA3B,EAApB,CAJG,CAKH;AACA;;AACA,WAAKvI,gBAAL,GAAwBoG,QAAQ,CAACoC,gBAAgB,CAAC,KAAK7P,OAAL,CAAa2P,aAAd,CAAhB,CAA6CG,QAA7C,IAAyD,GAA1D,CAAhC;AACA,WAAK3E,UAAL,GAAkB,IAAlB;;AACA,WAAK4E,WAAL,CAAiBC,yBAAjB,CAA2C,IAA3C;;AACA,WAAKC,yBAAL;;AACA,WAAKC,uBAAL;;AACA,WAAKtF,kBAAL,CAAwB6D,YAAxB,GAZG,CAaH;;;AACA,WAAK5D,OAAL,CAAagC,QAAb,CAAsBC,YAAtB,GAAqCC,IAArC,CAA0C/I,IAAI,CAAC,CAAD,CAA9C,EAAmDoK,SAAnD,CAA6D,YAAM;AAC/D,YAAI,MAAI,CAAC/G,gBAAL,IAAyB,MAAI,CAACkH,UAAL,CAAgB4B,UAAzC,IACA,MAAI,CAAC5B,UAAL,CAAgB4B,UAAhB,CAA2BC,cAD/B,EAC+C;AAC3C,UAAA,MAAI,CAAC7B,UAAL,CAAgB4B,UAAhB,CAA2BC,cAA3B,CAA0CtQ,KAA1C,CAAgDgQ,QAAhD,aAA8D,MAAI,CAACzI,gBAAnE;AACH;AACJ,OALD;AAMH;AACD;AACJ;AACA;AACA;;;;WACI,iBAAQ;AACJ,UAAI,KAAK8D,UAAT,EAAqB;AACjB,aAAKA,UAAL,GAAkB,KAAlB;;AACA,aAAK4E,WAAL,CAAiBC,yBAAjB,CAA2C,KAAKK,MAAL,KAAgB,KAAhB,GAAwB,KAAnE;;AACA,aAAKzF,kBAAL,CAAwB6D,YAAxB;;AACA,aAAK5C,UAAL;AACH;AACJ;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;;;;WACI,oBAAWvC,KAAX,EAAkB;AACd,UAAI,KAAKoD,OAAT,EAAkB;AACd,aAAK4D,oBAAL,CAA0BhH,KAA1B;AACH;AACJ;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;;;WACI,0BAAiBwE,EAAjB,EAAqB;AACjB,WAAKlC,SAAL,GAAiBkC,EAAjB;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;;;WACI,2BAAkBA,EAAlB,EAAsB;AAClB,WAAKjC,UAAL,GAAkBiC,EAAlB;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;;;;WACI,0BAAiByC,UAAjB,EAA6B;AACzB,WAAKf,QAAL,GAAgBe,UAAhB;;AACA,WAAK3F,kBAAL,CAAwB6D,YAAxB;;AACA,WAAKb,YAAL,CAAkBjH,IAAlB;AACH;AACD;AACJ;AACA;AACA;;;;SACI,eAAgB;AACZ,aAAO,KAAKwE,UAAZ;AACH;AACD;AACJ;AACA;AACA;;;;SACI,eAAe;AACX,aAAO,KAAK5D,QAAL,GAAgB,KAAKsG,eAAL,CAAqB2C,QAArC,GAAgD,KAAK3C,eAAL,CAAqB2C,QAArB,CAA8B,CAA9B,CAAvD;AACH;AACD;AACJ;AACA;AACA;;;;SACI,eAAmB;AACf,UAAI,KAAKC,KAAT,EAAgB;AACZ,eAAO,EAAP;AACH;;AACD,UAAI,KAAKnF,SAAT,EAAoB;AAChB;AACA,YAAMoF,eAAe,GAAG,KAAK7C,eAAL,CAAqB2C,QAArB,CAA8B3M,GAA9B,CAAkC,UAAA8I,MAAM;AAAA,iBAAIA,MAAM,CAACgE,SAAX;AAAA,SAAxC,CAAxB;;AACA,YAAI,KAAKN,MAAL,EAAJ,EAAmB;AACfK,UAAAA,eAAe,CAACE,OAAhB;AACH,SALe,CAMhB;;;AACA,eAAOF,eAAe,CAACG,IAAhB,CAAqB,IAArB,CAAP;AACH;;AACD,aAAO,KAAKhD,eAAL,CAAqB2C,QAArB,CAA8B,CAA9B,EAAiCG,SAAxC;AACH;AACD;AACJ;AACA;AACA;;;;WACI,kBAAS;AACL,aAAO,KAAK5F,IAAL,GAAY,KAAKA,IAAL,CAAUzB,KAAV,KAAoB,KAAhC,GAAwC,KAA/C;AACH;AACD;AACJ;AACA;AACA;AACA;;;;WACI,wBAAesF,KAAf,EAAsB;AAClB,UAAI,CAAC,KAAKY,QAAV,EAAoB;AAChB,aAAKnB,SAAL,GAAiB,KAAKyC,kBAAL,CAAwBlC,KAAxB,CAAjB,GAAkD,KAAKmC,oBAAL,CAA0BnC,KAA1B,CAAlD;AACH;AACJ;AACD;AACJ;AACA;AACA;AACA;;;;WACI,8BAAqBA,KAArB,EAA4B;AACxB;AACA,UAAMoC,OAAO,GAAGpC,KAAK,CAACoC,OAAtB;AACA;;AACA,UAAMC,UAAU,GAAGD,OAAO,KAAK1Q,UAAZ,IAA0B0Q,OAAO,KAAKnQ,QAAtC,IACfmQ,OAAO,KAAKtQ,UADG,IACWsQ,OAAO,KAAKrQ,WAD1C;AAEA;;AACA,UAAMuQ,SAAS,GAAGF,OAAO,KAAKxQ,KAAZ,IAAqBwQ,OAAO,KAAKpQ,KAAnD;AACA;;AACA,UAAMuQ,OAAO,GAAG,KAAKpB,WAArB,CATwB,CAUxB;;AACA,UAAImB,SAAS,IAAK,CAAC,KAAK3J,QAAL,IAAiBqH,KAAK,CAACwC,MAAxB,KAAmCH,UAArD,EAAkE;AAC9DrC,QAAAA,KAAK,CAACyC,cAAN,GAD8D,CACtC;;AACxB,aAAK9B,IAAL;AACH,OAHD,MAIK,IAAI,CAAC,KAAKhI,QAAV,EAAoB;AACrB,YAAIyJ,OAAO,KAAKvQ,IAAZ,IAAoBuQ,OAAO,KAAKzQ,GAApC,EAAyC;AACrCyQ,UAAAA,OAAO,KAAKvQ,IAAZ,GAAmB0Q,OAAO,CAACG,kBAAR,EAAnB,GAAkDH,OAAO,CAACI,iBAAR,EAAlD;AACA3C,UAAAA,KAAK,CAACyC,cAAN;AACH,SAHD,MAIK;AACDF,UAAAA,OAAO,CAACK,SAAR,CAAkB5C,KAAlB;AACH;AACJ;AACJ;AACD;AACJ;AACA;AACA;AACA;;;;WACI,4BAAmBA,KAAnB,EAA0B;AACtB;AACA,UAAMoC,OAAO,GAAGpC,KAAK,CAACoC,OAAtB;AACA;;AACA,UAAMC,UAAU,GAAGD,OAAO,KAAK1Q,UAAZ,IAA0B0Q,OAAO,KAAKnQ,QAAzD;AACA;;AACA,UAAMsQ,OAAO,GAAG,KAAKpB,WAArB;;AACA,UAAIiB,OAAO,KAAKvQ,IAAZ,IAAoBuQ,OAAO,KAAKzQ,GAApC,EAAyC;AACrCqO,QAAAA,KAAK,CAACyC,cAAN;AACAL,QAAAA,OAAO,KAAKvQ,IAAZ,GAAmB0Q,OAAO,CAACG,kBAAR,EAAnB,GAAkDH,OAAO,CAACI,iBAAR,EAAlD;AACH,OAHD,MAIK,IAAIN,UAAU,IAAIrC,KAAK,CAACwC,MAAxB,EAAgC;AACjC;AACAxC,QAAAA,KAAK,CAACyC,cAAN;AACA,aAAK/B,KAAL;AACH,OAJI,MAKA,IAAI,CAAC0B,OAAO,KAAKxQ,KAAZ,IAAqBwQ,OAAO,KAAKpQ,KAAlC,KAA4CuQ,OAAO,CAACM,UAAxD,EAAoE;AACrE7C,QAAAA,KAAK,CAACyC,cAAN;;AACAF,QAAAA,OAAO,CAACM,UAAR,CAAmBC,qBAAnB;AACH,OAHI,MAIA,IAAI,KAAKpG,SAAL,IAAkB0F,OAAO,KAAK3Q,CAA9B,IAAmCuO,KAAK,CAAC+C,OAA7C,EAAsD;AACvD/C,QAAAA,KAAK,CAACyC,cAAN;AACA;;AACA,YAAMO,oBAAoB,GAAG,KAAKlF,OAAL,CAAamF,IAAb,CAAkB,UAAAC,GAAG;AAAA,iBAAI,CAACA,GAAG,CAACtC,QAAL,IAAiB,CAACsC,GAAG,CAACtB,QAA1B;AAAA,SAArB,CAA7B;AACA,aAAK9D,OAAL,CAAaoC,OAAb,CAAqB,UAAAnC,MAAM,EAAI;AAC3B,cAAI,CAACA,MAAM,CAAC6C,QAAZ,EAAsB;AAClBoC,YAAAA,oBAAoB,GAAGjF,MAAM,CAACoC,MAAP,EAAH,GAAqBpC,MAAM,CAACsC,QAAP,EAAzC;AACH;AACJ,SAJD;AAKH,OATI,MAUA;AACD;AACA,YAAM8C,sBAAsB,GAAGZ,OAAO,CAACa,eAAvC;AACAb,QAAAA,OAAO,CAACK,SAAR,CAAkB5C,KAAlB;;AACA,YAAI,KAAKtD,SAAL,IAAkB2F,UAAlB,IAAgCrC,KAAK,CAACqD,QAAtC,IAAkDd,OAAO,CAACM,UAA1D,IACAN,OAAO,CAACa,eAAR,KAA4BD,sBADhC,EACwD;AACpDZ,UAAAA,OAAO,CAACM,UAAR,CAAmBC,qBAAnB;AACH;AACJ;AACJ;AACD;AACJ;AACA;;;;WACI,oBAAW;AACP,UAAI,CAAC,KAAKlC,QAAV,EAAoB;AAChB,aAAKlD,QAAL,GAAgB,IAAhB;AACA,aAAKsB,YAAL,CAAkBjH,IAAlB;AACH;AACJ;AACD;AACJ;AACA;AACA;AACA;;;;WACI,mBAAU;AACN,WAAK2F,QAAL,GAAgB,KAAhB;;AACA,UAAI,CAAC,KAAKkD,QAAN,IAAkB,CAAC,KAAKnB,SAA5B,EAAuC;AACnC,aAAKxC,UAAL;;AACA,aAAKjB,kBAAL,CAAwB6D,YAAxB;;AACA,aAAKb,YAAL,CAAkBjH,IAAlB;AACH;AACJ;AACD;AACJ;AACA;AACA;;;;WACI,uBAAc;AAAA;;AACV,WAAK4H,UAAL,CAAgB2D,cAAhB,CAA+BnF,IAA/B,CAAoC/I,IAAI,CAAC,CAAD,CAAxC,EAA6CoK,SAA7C,CAAuD,YAAM;AACzD,QAAA,MAAI,CAAC+D,6BAAL;;AACA,QAAA,MAAI,CAACvH,kBAAL,CAAwBwH,aAAxB;;AACA,QAAA,MAAI,CAACC,wBAAL;;AACA,QAAA,MAAI,CAACC,KAAL,CAAW3C,aAAX,CAAyB4C,SAAzB,GAAqC,MAAI,CAAClH,UAA1C;AACH,OALD;AAMH;AACD;AACJ;AACA;AACA;;;;WACI,0BAAiB;AACb,aAAO,KAAKL,gBAAL,iBAA+B,KAAKA,gBAAL,CAAsBwH,KAArD,IAA+D,EAAtE;AACH;AACD;AACJ;AACA;AACA;;;;WACI,yCAAgC;AAC5B,UAAI,CAAC/J,+BAAD,IAAoC,KAAKlB,QAA7C,EAAuD;AACnD;AACA,YAAMkL,cAAc,GAAG,KAAKH,KAAL,CAAW3C,aAAX,CAAyB+C,aAAzB,CAAuC,sBAAvC,CAAvB;;AACA,YAAID,cAAJ,EAAoB;AAChBhK,UAAAA,+BAA+B,GAAGH,sBAAsB,GAAG,GAAzB,GAA+BmK,cAAc,CAACE,WAAhF;AACH;AACJ;AACJ;AACD;AACJ;AACA;AACA;;;;SACI,eAAY;AACR,aAAO,CAAC,KAAK9E,eAAN,IAAyB,KAAKA,eAAL,CAAqB+E,OAArB,EAAhC;AACH;AACD;AACJ;AACA;;;;WACI,gCAAuB;AAAA;;AACnB;AACA;AACAC,MAAAA,OAAO,CAACC,OAAR,GAAkBC,IAAlB,CAAuB,YAAM;AACzB,QAAA,MAAI,CAACzC,oBAAL,CAA0B,MAAI,CAAC1G,SAAL,GAAiB,MAAI,CAACA,SAAL,CAAeN,KAAhC,GAAwC,MAAI,CAAC0E,MAAvE;AACH,OAFD;AAGH;AACD;AACJ;AACA;AACA;AACA;AACA;;;;WACI,8BAAqB1E,KAArB,EAA4B;AAAA;;AACxB,UAAI,KAAK/B,QAAL,IAAiB+B,KAArB,EAA4B;AACxB,YAAI,CAAC0J,KAAK,CAACC,OAAN,CAAc3J,KAAd,CAAL,EAA2B;AACvB,gBAAMpB,8BAA8B,EAApC;AACH;;AACD,aAAK2F,eAAL,CAAqBqF,KAArB;;AACA5J,QAAAA,KAAK,CAACwF,OAAN,CAAc,UAACqE,YAAD;AAAA,iBAAkB,MAAI,CAACC,YAAL,CAAkBD,YAAlB,CAAlB;AAAA,SAAd;;AACA,aAAKE,WAAL;AACH,OAPD,MAQK;AACD,aAAKxF,eAAL,CAAqBqF,KAArB;AACA;;;AACA,YAAMI,mBAAmB,GAAG,KAAKF,YAAL,CAAkB9J,KAAlB,CAA5B,CAHC,CAID;AACA;;;AACA,YAAIgK,mBAAJ,EAAyB;AACrB,eAAKvD,WAAL,CAAiBwD,aAAjB,CAA+BD,mBAA/B;AACH;AACJ;;AACD,WAAK1I,kBAAL,CAAwB6D,YAAxB;AACH;AACD;AACJ;AACA;AACA;AACA;;;;WACI,sBAAanF,KAAb,EAAoB;AAAA;;AAChB;AACA,UAAMgK,mBAAmB,GAAG,KAAK5G,OAAL,CAAa8G,IAAb,CAAkB,UAAC7G,MAAD,EAAY;AACtD,YAAI;AACA;AACA,iBAAOA,MAAM,CAACrD,KAAP,IAAgB,IAAhB,IAAwB,MAAI,CAACiC,YAAL,CAAkBoB,MAAM,CAACrD,KAAzB,EAAgCA,KAAhC,CAA/B;AACH,SAHD,CAIA,OAAOmK,KAAP,EAAc;AACV,cAAI3R,SAAS,EAAb,EAAiB;AACb;AACA4R,YAAAA,OAAO,CAACC,IAAR,CAAaF,KAAb;AACH;;AACD,iBAAO,KAAP;AACH;AACJ,OAZ2B,CAA5B;;AAaA,UAAIH,mBAAJ,EAAyB;AACrB,aAAKzF,eAAL,CAAqBkB,MAArB,CAA4BuE,mBAA5B;AACH;;AACD,aAAOA,mBAAP;AACH;AACD;AACJ;AACA;AACA;;;;WACI,2BAAkB;AAAA;;AACd,WAAKvD,WAAL,GAAmB,IAAI9P,0BAAJ,CAA+B,KAAKyM,OAApC,EACdkH,aADc,GAEdC,uBAFc,GAGd7D,yBAHc,CAGY,KAAKK,MAAL,KAAgB,KAAhB,GAAwB,KAHpC,CAAnB;;AAIA,WAAKN,WAAL,CAAiB+D,MAAjB,CAAwB/G,IAAxB,CAA6B9I,SAAS,CAAC,KAAK0H,QAAN,CAAtC,EAAuDyC,SAAvD,CAAiE,YAAM;AACnE;AACA;AACA,QAAA,MAAI,CAAC2F,KAAL;;AACA,QAAA,MAAI,CAACzE,KAAL;AACH,OALD;;AAMA,WAAKS,WAAL,CAAiBiE,MAAjB,CAAwBjH,IAAxB,CAA6B9I,SAAS,CAAC,KAAK0H,QAAN,CAAtC,EAAuDyC,SAAvD,CAAiE,YAAM;AACnE,YAAI,MAAI,CAACjD,UAAL,IAAmB,MAAI,CAACmH,KAA5B,EAAmC;AAC/B,UAAA,MAAI,CAAC2B,2BAAL;AACH,SAFD,MAGK,IAAI,CAAC,MAAI,CAAC9I,UAAN,IAAoB,CAAC,MAAI,CAAC5D,QAA1B,IAAsC,MAAI,CAACwI,WAAL,CAAiB0B,UAA3D,EAAuE;AACxE,UAAA,MAAI,CAAC1B,WAAL,CAAiB0B,UAAjB,CAA4BC,qBAA5B;AACH;AACJ,OAPD;AAQH;AACD;AACJ;AACA;AACA;;;;WACI,yBAAgB;AAAA;;AACZ;AACA,UAAMwC,kBAAkB,GAAGzQ,KAAK,CAAC,KAAKiJ,OAAL,CAAawC,OAAd,EAAuB,KAAKvD,QAA5B,CAAhC;AACA,WAAKc,sBAAL,CAA4BM,IAA5B,CAAiC9I,SAAS,CAACiQ,kBAAD,CAA1C,EAAgE9F,SAAhE,CAA0E,UAAAQ,KAAK,EAAI;AAC/E,QAAA,OAAI,CAACuF,SAAL,CAAevF,KAAK,CAACvF,MAArB,EAA6BuF,KAAK,CAACwF,WAAnC;;AACA,YAAIxF,KAAK,CAACwF,WAAN,IAAqB,CAAC,OAAI,CAAC7M,QAA3B,IAAuC,OAAI,CAAC4D,UAAhD,EAA4D;AACxD,UAAA,OAAI,CAACmE,KAAL;;AACA,UAAA,OAAI,CAACyE,KAAL;AACH;AACJ,OAND,EAHY,CAUZ;AACA;;AACAtQ,MAAAA,KAAK,MAAL,4BAAS,KAAKiJ,OAAL,CAAa7I,GAAb,CAAiB,UAAA8I,MAAM;AAAA,eAAIA,MAAM,CAAC0H,aAAX;AAAA,OAAvB,CAAT,GACKtH,IADL,CACU9I,SAAS,CAACiQ,kBAAD,CADnB,EAEK9F,SAFL,CAEe,YAAM;AACjB,QAAA,OAAI,CAACxD,kBAAL,CAAwB6D,YAAxB;;AACA,QAAA,OAAI,CAACb,YAAL,CAAkBjH,IAAlB;AACH,OALD;;AAMA,WAAK2N,aAAL;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;;;;WACI,mBAAU3H,MAAV,EAAkByH,WAAlB,EAA+B;AAC3B;AACA,UAAMG,WAAW,GAAG,KAAK1G,eAAL,CAAqB2G,UAArB,CAAgC7H,MAAhC,CAApB;;AACA,UAAIA,MAAM,CAACrD,KAAP,IAAgB,IAAhB,IAAwB,CAAC,KAAKgC,SAAlC,EAA6C;AACzCqB,QAAAA,MAAM,CAACsC,QAAP;;AACA,aAAKpB,eAAL,CAAqBqF,KAArB;;AACA,aAAKuB,iBAAL,CAAuB9H,MAAM,CAACrD,KAA9B;AACH,OAJD,MAKK;AACDqD,QAAAA,MAAM,CAAC6D,QAAP,GAAkB,KAAK3C,eAAL,CAAqBkB,MAArB,CAA4BpC,MAA5B,CAAlB,GAAwD,KAAKkB,eAAL,CAAqBoB,QAArB,CAA8BtC,MAA9B,CAAxD;;AACA,YAAIyH,WAAJ,EAAiB;AACb,eAAKrE,WAAL,CAAiBwD,aAAjB,CAA+B5G,MAA/B;AACH;;AACD,YAAI,KAAKpF,QAAT,EAAmB;AACf,eAAK8L,WAAL;;AACA,cAAIe,WAAJ,EAAiB;AACb;AACA;AACA;AACA;AACA,iBAAKL,KAAL;AACH;AACJ;AACJ;;AACD,UAAIQ,WAAW,KAAK,KAAK1G,eAAL,CAAqB2G,UAArB,CAAgC7H,MAAhC,CAApB,EAA6D;AACzD,aAAK8H,iBAAL;AACH;;AACD,WAAK7G,YAAL,CAAkBjH,IAAlB;AACH;AACD;AACJ;AACA;AACA;;;;WACI,uBAAc;AAAA;;AACV,UAAI,KAAKY,QAAT,EAAmB;AACf;AACA,YAAMmF,OAAO,GAAG,KAAKA,OAAL,CAAagI,OAAb,EAAhB;;AACA,aAAK7G,eAAL,CAAqB8G,IAArB,CAA0B,UAACC,CAAD,EAAIC,CAAJ,EAAU;AAChC,iBAAO,OAAI,CAACC,cAAL,GAAsB,OAAI,CAACA,cAAL,CAAoBF,CAApB,EAAuBC,CAAvB,EAA0BnI,OAA1B,CAAtB,GACHA,OAAO,CAACqI,OAAR,CAAgBH,CAAhB,IAAqBlI,OAAO,CAACqI,OAAR,CAAgBF,CAAhB,CADzB;AAEH,SAHD;;AAIA,aAAKjH,YAAL,CAAkBjH,IAAlB;AACH;AACJ;AACD;AACJ;AACA;AACA;AACA;;;;WACI,2BAAkBqO,aAAlB,EAAiC;AAC7B;AACA,UAAIC,WAAW,GAAG,IAAlB;;AACA,UAAI,KAAK1N,QAAT,EAAmB;AACf0N,QAAAA,WAAW;AAAI;AAAkB,aAAKzE,QAAxB,CAAmC3M,GAAnC,CAAuC,UAAA8I,MAAM;AAAA,iBAAIA,MAAM,CAACrD,KAAX;AAAA,SAA7C,CAAd;AACH,OAFD,MAGK;AACD2L,QAAAA,WAAW,GAAG,KAAKzE,QAAL;AAAiB;AAAkB,aAAKA,QAAxB,CAAmClH,KAAnD,GAA2D0L,aAAzE;AACH;;AACD,WAAKhH,MAAL,GAAciH,WAAd;AACA,WAAK5H,WAAL,CAAiBiB,IAAjB,CAAsB2G,WAAtB;;AACA,WAAKrJ,SAAL,CAAeqJ,WAAf;;AACA,WAAK7H,eAAL,CAAqBkB,IAArB,CAA0B,IAAIlF,eAAJ,CAAoB,IAApB,EAA0B6L,WAA1B,CAA1B;;AACA,WAAKrK,kBAAL,CAAwB6D,YAAxB;AACH;AACD;AACJ;AACA;AACA;;;;WACI,yBAAgB;AACZ,WAAK3C,UAAL,GAAkB,KAAKY,OAAL,CAAa7I,GAAb,CAAiB,UAAA8I,MAAM;AAAA,eAAIA,MAAM,CAACe,EAAX;AAAA,OAAvB,EAAsCmD,IAAtC,CAA2C,GAA3C,CAAlB;AACH;AACD;AACJ;AACA;AACA;AACA;;;;WACI,mCAA0B;AACtB,UAAI,KAAKd,WAAT,EAAsB;AAClB,YAAI,KAAKU,KAAT,EAAgB;AACZ,eAAKV,WAAL,CAAiBuB,kBAAjB;AACH,SAFD,MAGK;AACD,eAAKvB,WAAL,CAAiBwD,aAAjB,CAA+B,KAAK1F,eAAL,CAAqB2C,QAArB,CAA8B,CAA9B,CAA/B;AACH;AACJ;AACJ;AACD;AACJ;AACA;AACA;;;;WACI,uCAA8B;AAC1B;AACA,UAAM0E,iBAAiB,GAAG,KAAKnF,WAAL,CAAiBiC,eAAjB,IAAoC,CAA9D;AACA;;AACA,UAAMmD,UAAU,GAAG1S,6BAA6B,CAACyS,iBAAD,EAAoB,KAAKxI,OAAzB,EAAkC,KAAK0I,YAAvC,CAAhD;;AACA,WAAK9C,KAAL,CAAW3C,aAAX,CAAyB4C,SAAzB,GAAqC7P,wBAAwB,CAACwS,iBAAiB,GAAGC,UAArB,EAAiC,KAAKE,cAAL,EAAjC,EAAwD,KAAK/C,KAAL,CAAW3C,aAAX,CAAyB4C,SAAjF,EAA4FlK,uBAA5F,CAA7D;AACH;AACD;AACJ;AACA;AACA;;;;WACI,iBAAQ;AACJ,WAAKmB,WAAL,CAAiBmG,aAAjB,CAA+BoE,KAA/B;AACH;AACD;AACJ;AACA;AACA;AACA;;;;WACI,yBAAgBpH,MAAhB,EAAwB;AACpB,aAAO,KAAKD,OAAL,CAAa4I,MAAb,CAAoB,UAACC,MAAD,EAASC,OAAT,EAAkBC,KAAlB,EAA4B;AACnD,eAAOF,MAAM,KAAKG,SAAX,GAAwB/I,MAAM,KAAK6I,OAAX,GAAqBC,KAArB,GAA6BC,SAArD,GAAkEH,MAAzE;AACH,OAFM,EAEJG,SAFI,CAAP;AAGH;AACD;AACJ;AACA;AACA;;;;WACI,qCAA4B;AACxB;AACA,UAAMC,UAAU,GAAG,KAAKN,cAAL,EAAnB;AACA;;;AACA,UAAMO,KAAK,GAAG,KAAKC,aAAL,EAAd;AACA;;;AACA,UAAMC,WAAW,GAAGC,IAAI,CAACC,GAAL,CAASJ,KAAK,GAAGD,UAAjB,EAA6BtN,uBAA7B,CAApB;AACA;;AACA,UAAM4N,qBAAqB,GAAGL,KAAK,GAAGD,UAAtC;AACA;;AACA,UAAMO,SAAS,GAAGD,qBAAqB,GAAGH,WAA1C;AACA;;AACA,UAAIK,oBAAoB,GAAG,KAAK1F,KAAL,GAAa,CAAb;AAAiB;AAAmB,WAAK2F,eAAL,CAAqB,KAAKvI,eAAL,CAAqB2C,QAArB,CAA8B,CAA9B,CAArB,CAA/D;AACA2F,MAAAA,oBAAoB,IAAI1T,6BAA6B,CAAC0T,oBAAD,EAAuB,KAAKzJ,OAA5B,EAAqC,KAAK0I,YAA1C,CAArD;AACA;;AACA,UAAMiB,YAAY,GAAGP,WAAW,GAAG,CAAnC;AACA,WAAKzK,UAAL,GAAkB,KAAKiL,uBAAL,CAA6BH,oBAA7B,EAAmDE,YAAnD,EAAiEH,SAAjE,CAAlB;AACA,WAAKnK,QAAL,GAAgB,KAAKwK,wBAAL,CAA8BJ,oBAA9B,EAAoDE,YAApD,EAAkEH,SAAlE,CAAhB;;AACA,WAAKM,2BAAL,CAAiCN,SAAjC;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;WACI,iCAAwBO,aAAxB,EAAuCJ,YAAvC,EAAqDH,SAArD,EAAgE;AAC5D;AACA,UAAMP,UAAU,GAAG,KAAKN,cAAL,EAAnB;AACA;;;AACA,UAAMqB,yBAAyB,GAAGf,UAAU,GAAGc,aAA/C;AACA;;AACA,UAAME,gBAAgB,GAAGhB,UAAU,GAAG,CAAtC;AACA;;AACA,UAAMiB,qBAAqB,GAAGF,yBAAyB,GAAGL,YAA5B,GAA2CM,gBAAzE;AACA,aAAOZ,IAAI,CAACC,GAAL,CAASD,IAAI,CAACc,GAAL,CAAS,CAAT,EAAYD,qBAAZ,CAAT,EAA6CV,SAA7C,CAAP;AACH;AACD;AACJ;AACA;AACA;;;;WACI,yBAAgB;AACZ;AACA;AACA,aAAO,KAAKY,cAAL,GAAsB,IAAtB,GAA6B,KAAKtK,SAAL,IAAkB,KAAKjH,WAA3D;AACH;AACD;AACJ;AACA;AACA;;;;WACI,8BAAqB;AACjB,UAAI,KAAKuR,cAAT,EAAyB;AACrB,eAAO,KAAKA,cAAZ;AACH,OAHgB,CAIjB;AACA;;;AACA,UAAI,CAAC,KAAK9L,gBAAN,IAA0B,CAAC,KAAKA,gBAAL,CAAsB+L,iBAAtB,EAA3B,IACA,KAAKC,aAAL,EADJ,EAC0B;AACtB,eAAO,IAAP;AACH;;AACD,aAAO,KAAKhM,gBAAL,CAAsBiM,QAAtB,IAAkC,IAAzC;AACH;AACD;AACJ;AACA;AACA;;;;WACI,oCAA2B;AACvB,UAAI,KAAK5I,SAAL,IAAkB,KAAK0B,WAAvB,IAAsC,KAAKA,WAAL,CAAiB0B,UAA3D,EAAuE;AACnE,eAAO,KAAK1B,WAAL,CAAiB0B,UAAjB,CAA4B/D,EAAnC;AACH;;AACD,aAAO,IAAP;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;;;WACI,oCAA2B;AACvB;AACA,UAAMwJ,WAAW,GAAG,KAAK3I,UAAL,CAAgB4B,UAAhB,CAA2BC,cAA3B,CAA0CR,qBAA1C,EAApB;AACA;;AACA,UAAMuH,YAAY,GAAG,KAAKxM,cAAL,CAAoByM,eAApB,EAArB;AACA;;;AACA,UAAMC,KAAK,GAAG,KAAKhH,MAAL,EAAd;AACA;;;AACA,UAAMiH,YAAY,GAAG,KAAK/P,QAAL,GAAgBkB,+BAA+B,GAAGH,sBAAlD,GACjBA,sBAAsB,GAAG,CAD7B;AAEA;;AACA,UAAIkG,OAAJ,CAXuB,CAYvB;;AACA,UAAI,KAAKjH,QAAT,EAAmB;AACfiH,QAAAA,OAAO,GAAG/F,+BAAV;AACH,OAFD,MAGK;AACD;AACA,YAAI+H,QAAQ,GAAG,KAAK3C,eAAL,CAAqB2C,QAArB,CAA8B,CAA9B,KAAoC,KAAK9D,OAAL,CAAa6K,KAAhE;AACA/I,QAAAA,OAAO,GAAGgC,QAAQ,IAAIA,QAAQ,CAACgH,KAArB,GAA6BjP,6BAA7B,GAA6DD,sBAAvE;AACH,OApBsB,CAqBvB;;;AACA,UAAI,CAAC+O,KAAL,EAAY;AACR7I,QAAAA,OAAO,IAAI,CAAC,CAAZ;AACH;AACD;;;AACA,UAAMiJ,YAAY,GAAG,KAAKP,WAAW,CAACQ,IAAZ,GAAmBlJ,OAAnB,IAA8B6I,KAAK,GAAGC,YAAH,GAAkB,CAArD,CAAL,CAArB;AACA;;AACA,UAAMK,aAAa,GAAGT,WAAW,CAACU,KAAZ,GAAoBpJ,OAApB,GAA8B2I,YAAY,CAACU,KAA3C,IACfR,KAAK,GAAG,CAAH,GAAOC,YADG,CAAtB,CA5BuB,CA8BvB;;AACA,UAAIG,YAAY,GAAG,CAAnB,EAAsB;AAClBjJ,QAAAA,OAAO,IAAIiJ,YAAY,GAAG/O,6BAA1B;AACH,OAFD,MAGK,IAAIiP,aAAa,GAAG,CAApB,EAAuB;AACxBnJ,QAAAA,OAAO,IAAImJ,aAAa,GAAGjP,6BAA3B;AACH,OApCsB,CAqCvB;AACA;AACA;;;AACA,WAAK6F,UAAL,CAAgBC,OAAhB,GAA0BuH,IAAI,CAAC+B,KAAL,CAAWtJ,OAAX,CAA1B;AACA,WAAKD,UAAL,CAAgB4B,UAAhB,CAA2B4H,cAA3B;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;WACI,kCAAyBtB,aAAzB,EAAwCJ,YAAxC,EAAsDH,SAAtD,EAAiE;AAC7D;AACA,UAAMP,UAAU,GAAG,KAAKN,cAAL,EAAnB;AACA;;;AACA,UAAM2C,sBAAsB,GAAG,CAACrC,UAAU,GAAG,KAAKjG,YAAL,CAAkBuI,MAAhC,IAA0C,CAAzE;AACA;;AACA,UAAMC,mBAAmB,GAAGnC,IAAI,CAACoC,KAAL,CAAW9P,uBAAuB,GAAGsN,UAArC,CAA5B;AACA;;AACA,UAAIyC,wBAAJ,CAR6D,CAS7D;;AACA,UAAI,KAAK/L,uBAAT,EAAkC;AAC9B,eAAO,CAAP;AACH;;AACD,UAAI,KAAKhB,UAAL,KAAoB,CAAxB,EAA2B;AACvB+M,QAAAA,wBAAwB,GAAG3B,aAAa,GAAGd,UAA3C;AACH,OAFD,MAGK,IAAI,KAAKtK,UAAL,KAAoB6K,SAAxB,EAAmC;AACpC;AACA,YAAMmC,mBAAmB,GAAG,KAAKxC,aAAL,KAAuBqC,mBAAnD;AACA;;AACA,YAAMI,oBAAoB,GAAG7B,aAAa,GAAG4B,mBAA7C;AACA;;AACA,YAAIE,iBAAiB,GAAG5C,UAAU,GAAG,CAAC,KAAKE,aAAL,KAAuBF,UAAvB,GAAoCtN,uBAArC,IAAgEsN,UAArG,CANoC,CAOpC;AACA;AACA;AACA;;AACAyC,QAAAA,wBAAwB,GAAGE,oBAAoB,GAAG3C,UAAvB,GAAoC4C,iBAA/D;AACH,OAZI,MAaA;AACD;AACA;AACA;AACAH,QAAAA,wBAAwB,GAAG/B,YAAY,GAAGV,UAAU,GAAG,CAAvD;AACH,OAlC4D,CAmC7D;AACA;AACA;;;AACA,aAAOI,IAAI,CAAC+B,KAAL,CAAWM,wBAAwB,GAAG,CAAC,CAA5B,GAAgCJ,sBAA3C,CAAP;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;;;WACI,qCAA4B9B,SAA5B,EAAuC;AACnC;AACA,UAAMP,UAAU,GAAG,KAAKN,cAAL,EAAnB;AACA;;;AACA,UAAM8B,YAAY,GAAG,KAAKxM,cAAL,CAAoByM,eAApB,EAArB;AACA;;;AACA,UAAMoB,iBAAiB,GAAG,KAAK9I,YAAL,CAAkB+I,GAAlB,GAAwB/P,6BAAlD;AACA;;AACA,UAAMgQ,oBAAoB,GAAGvB,YAAY,CAACc,MAAb,GAAsB,KAAKvI,YAAL,CAAkBiJ,MAAxC,GAAiDjQ,6BAA9E;AACA;;AACA,UAAMkQ,cAAc,GAAG7C,IAAI,CAAC8C,GAAL,CAAS,KAAK9M,QAAd,CAAvB;AACA;;AACA,UAAM+M,gBAAgB,GAAG/C,IAAI,CAACC,GAAL,CAAS,KAAKH,aAAL,KAAuBF,UAAhC,EAA4CtN,uBAA5C,CAAzB;AACA;;AACA,UAAM0Q,iBAAiB,GAAGD,gBAAgB,GAAGF,cAAnB,GAAoC,KAAKlJ,YAAL,CAAkBuI,MAAhF;;AACA,UAAIc,iBAAiB,GAAGL,oBAAxB,EAA8C;AAC1C,aAAKM,cAAL,CAAoBD,iBAApB,EAAuCL,oBAAvC;AACH,OAFD,MAGK,IAAIE,cAAc,GAAGJ,iBAArB,EAAwC;AACzC,aAAKS,gBAAL,CAAsBL,cAAtB,EAAsCJ,iBAAtC,EAAyDtC,SAAzD;AACH,OAFI,MAGA;AACD,aAAK9O,gBAAL,GAAwB,KAAK8R,uBAAL,EAAxB;AACH;AACJ;AACD;AACJ;AACA;AACA;AACA;AACA;;;;WACI,wBAAeH,iBAAf,EAAkCL,oBAAlC,EAAwD;AACpD;AACA,UAAMS,qBAAqB,GAAGpD,IAAI,CAAC+B,KAAL,CAAWiB,iBAAiB,GAAGL,oBAA/B,CAA9B,CAFoD,CAGpD;AACA;;AACA,WAAKrN,UAAL,IAAmB8N,qBAAnB;AACA,WAAKpN,QAAL,IAAiBoN,qBAAjB;AACA,WAAK/R,gBAAL,GAAwB,KAAK8R,uBAAL,EAAxB,CAPoD,CAQpD;AACA;AACA;;AACA,UAAI,KAAK7N,UAAL,IAAmB,CAAvB,EAA0B;AACtB,aAAKA,UAAL,GAAkB,CAAlB;AACA,aAAKU,QAAL,GAAgB,CAAhB;AACA,aAAK3E,gBAAL;AACH;AACJ;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;;;;WACI,0BAAiBwR,cAAjB,EAAiCJ,iBAAjC,EAAoDtC,SAApD,EAA+D;AAC3D;AACA,UAAMkD,qBAAqB,GAAGrD,IAAI,CAAC+B,KAAL,CAAWc,cAAc,GAAGJ,iBAA5B,CAA9B,CAF2D,CAG3D;AACA;;AACA,WAAKnN,UAAL,IAAmB+N,qBAAnB;AACA,WAAKrN,QAAL,IAAiBqN,qBAAjB;AACA,WAAKhS,gBAAL,GAAwB,KAAK8R,uBAAL,EAAxB,CAP2D,CAQ3D;AACA;AACA;;AACA,UAAI,KAAK7N,UAAL,IAAmB6K,SAAvB,EAAkC;AAC9B,aAAK7K,UAAL,GAAkB6K,SAAlB;AACA,aAAKnK,QAAL,GAAgB,CAAhB;AACA,aAAK3E,gBAAL;AACA;AACH;AACJ;AACD;AACJ;AACA;AACA;;;;WACI,mCAA0B;AACtB;AACA,UAAMuO,UAAU,GAAG,KAAKN,cAAL,EAAnB;AACA;;;AACA,UAAM2C,sBAAsB,GAAG,CAACrC,UAAU,GAAG,KAAKjG,YAAL,CAAkBuI,MAAhC,IAA0C,CAAzE;AACA;;AACA,UAAM/L,OAAO,GAAG6J,IAAI,CAAC8C,GAAL,CAAS,KAAK9M,QAAd,IAA0BiM,sBAA1B,GAAmDrC,UAAU,GAAG,CAAhF;AACA,2BAAczJ,OAAd;AACH;AACD;AACJ;AACA;AACA;;;;WACI,yBAAgB;AACZ,aAAO,KAAKQ,OAAL,CAAa+C,MAAb,GAAsB,KAAK2F,YAAL,CAAkB3F,MAA/C;AACH;AACD;AACJ;AACA;AACA;;;;WACI,0BAAiB;AACb,aAAO,KAAKpI,gBAAL,GAAwBmB,qBAA/B;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;;;;WACI,2BAAkB6Q,GAAlB,EAAuB;AACnB,WAAKC,gBAAL,GAAwBD,GAAG,CAACxI,IAAJ,CAAS,GAAT,CAAxB;AACH;AACD;AACJ;AACA;AACA;AACA;;;;WACI,4BAAmB;AACf,WAAKkD,KAAL;AACA,WAAKxE,IAAL;AACH;AACD;AACJ;AACA;AACA;AACA;;;;SACI,eAAuB;AACnB,aAAO,KAAKpE,UAAL,IAAmB,CAAC,KAAKsF,KAAhC;AACH;;;;EAxoCmB5G,mB;;AA0oCxBa,SAAS,CAACX,IAAV,GAAiB,SAASwP,iBAAT,CAA2BtP,CAA3B,EAA8B;AAAE,SAAO,KAAKA,CAAC,IAAIS,SAAV,EAAqBvG,MAAM,CAACqV,iBAAP,CAAyBpV,MAAM,CAACnD,aAAhC,CAArB,EAAqEkD,MAAM,CAACqV,iBAAP,CAAyBrV,MAAM,CAAC/C,iBAAhC,CAArE,EAAyH+C,MAAM,CAACqV,iBAAP,CAAyBrV,MAAM,CAACpC,MAAhC,CAAzH,EAAkKoC,MAAM,CAACqV,iBAAP,CAAyBnV,MAAM,CAAC1B,iBAAhC,CAAlK,EAAsNwB,MAAM,CAACqV,iBAAP,CAAyBrV,MAAM,CAAC1C,UAAhC,CAAtN,EAAmQ0C,MAAM,CAACqV,iBAAP,CAAyBlV,MAAM,CAACpE,cAAhC,EAAgD,CAAhD,CAAnQ,EAAuTiE,MAAM,CAACqV,iBAAP,CAAyBjV,MAAM,CAAC/B,MAAhC,EAAwC,CAAxC,CAAvT,EAAmW2B,MAAM,CAACqV,iBAAP,CAAyBjV,MAAM,CAACjC,kBAAhC,EAAoD,CAApD,CAAnW,EAA2Z6B,MAAM,CAACqV,iBAAP,CAAyBhV,MAAM,CAACnB,YAAhC,EAA8C,CAA9C,CAA3Z,EAA6cc,MAAM,CAACqV,iBAAP,CAAyBjV,MAAM,CAAChC,SAAhC,EAA2C,EAA3C,CAA7c,EAA6f4B,MAAM,CAACsV,iBAAP,CAAyB,UAAzB,CAA7f,EAAmiBtV,MAAM,CAACqV,iBAAP,CAAyB7Q,0BAAzB,CAAniB,CAAP;AAAkmB,CAAnpB;;AACA+B,SAAS,CAACgP,IAAV,GAAiB,aAAcvV,MAAM,CAACwV,iBAAP,CAAyB;AAAEvP,EAAAA,IAAI,EAAEM,SAAR;AAAmBL,EAAAA,SAAS,EAAE,CAAC,CAAC,YAAD,CAAD,CAA9B;AAAgDuP,EAAAA,cAAc,EAAE,SAASC,wBAAT,CAAkC/U,EAAlC,EAAsCC,GAAtC,EAA2C+U,QAA3C,EAAqD;AAAE,QAAIhV,EAAE,GAAG,CAAT,EAAY;AACnLX,MAAAA,MAAM,CAAC4V,cAAP,CAAsBD,QAAtB,EAAgChQ,gBAAhC,EAAkD,CAAlD;AACA3F,MAAAA,MAAM,CAAC4V,cAAP,CAAsBD,QAAtB,EAAgChX,SAAhC,EAA2C,CAA3C;AACAqB,MAAAA,MAAM,CAAC4V,cAAP,CAAsBD,QAAtB,EAAgCjX,WAAhC,EAA6C,CAA7C;AACH;;AAAC,QAAIiC,EAAE,GAAG,CAAT,EAAY;AACV,UAAIkV,EAAJ;;AACA7V,MAAAA,MAAM,CAAC8V,cAAP,CAAsBD,EAAE,GAAG7V,MAAM,CAAC+V,WAAP,EAA3B,MAAqDnV,GAAG,CAACkB,aAAJ,GAAoB+T,EAAE,CAACzC,KAA5E;AACApT,MAAAA,MAAM,CAAC8V,cAAP,CAAsBD,EAAE,GAAG7V,MAAM,CAAC+V,WAAP,EAA3B,MAAqDnV,GAAG,CAAC2H,OAAJ,GAAcsN,EAAnE;AACA7V,MAAAA,MAAM,CAAC8V,cAAP,CAAsBD,EAAE,GAAG7V,MAAM,CAAC+V,WAAP,EAA3B,MAAqDnV,GAAG,CAACqQ,YAAJ,GAAmB4E,EAAxE;AACH;AAAE,GATiD;AAS/CG,EAAAA,SAAS,EAAE,SAASC,eAAT,CAAyBtV,EAAzB,EAA6BC,GAA7B,EAAkC;AAAE,QAAID,EAAE,GAAG,CAAT,EAAY;AAC5DX,MAAAA,MAAM,CAACkW,WAAP,CAAmB1V,GAAnB,EAAwB,CAAxB;AACAR,MAAAA,MAAM,CAACkW,WAAP,CAAmBzV,GAAnB,EAAwB,CAAxB;AACAT,MAAAA,MAAM,CAACkW,WAAP,CAAmBvZ,mBAAnB,EAAwC,CAAxC;AACH;;AAAC,QAAIgE,EAAE,GAAG,CAAT,EAAY;AACV,UAAIkV,EAAJ;;AACA7V,MAAAA,MAAM,CAAC8V,cAAP,CAAsBD,EAAE,GAAG7V,MAAM,CAAC+V,WAAP,EAA3B,MAAqDnV,GAAG,CAAC/E,OAAJ,GAAcga,EAAE,CAACzC,KAAtE;AACApT,MAAAA,MAAM,CAAC8V,cAAP,CAAsBD,EAAE,GAAG7V,MAAM,CAAC+V,WAAP,EAA3B,MAAqDnV,GAAG,CAACuN,KAAJ,GAAY0H,EAAE,CAACzC,KAApE;AACApT,MAAAA,MAAM,CAAC8V,cAAP,CAAsBD,EAAE,GAAG7V,MAAM,CAAC+V,WAAP,EAA3B,MAAqDnV,GAAG,CAACwJ,UAAJ,GAAiByL,EAAE,CAACzC,KAAzE;AACH;AAAE,GAlBiD;AAkB/C+C,EAAAA,SAAS,EAAE,CAAC,MAAD,EAAS,SAAT,EAAoB,CAApB,EAAuB,YAAvB,CAlBoC;AAkBEC,EAAAA,QAAQ,EAAE,EAlBZ;AAkBgBC,EAAAA,YAAY,EAAE,SAASC,sBAAT,CAAgC3V,EAAhC,EAAoCC,GAApC,EAAyC;AAAE,QAAID,EAAE,GAAG,CAAT,EAAY;AACrIX,MAAAA,MAAM,CAACkC,UAAP,CAAkB,SAAlB,EAA6B,SAASqU,oCAAT,CAA8CnU,MAA9C,EAAsD;AAAE,eAAOxB,GAAG,CAACgC,cAAJ,CAAmBR,MAAnB,CAAP;AAAoC,OAAzH,EAA2H,OAA3H,EAAoI,SAASoU,kCAAT,GAA8C;AAAE,eAAO5V,GAAG,CAAC6V,QAAJ,EAAP;AAAwB,OAA5M,EAA8M,MAA9M,EAAsN,SAASC,iCAAT,GAA6C;AAAE,eAAO9V,GAAG,CAAC+V,OAAJ,EAAP;AAAuB,OAA5R;AACH;;AAAC,QAAIhW,EAAE,GAAG,CAAT,EAAY;AACVX,MAAAA,MAAM,CAAC4W,WAAP,CAAmB,IAAnB,EAAyBhW,GAAG,CAAC2I,EAA7B,EAAiC,UAAjC,EAA6C3I,GAAG,CAACkG,QAAjD,EAA2D,YAA3D,EAAyElG,GAAG,CAACiS,aAAJ,EAAzE,EAA8F,iBAA9F,EAAiHjS,GAAG,CAACiW,kBAAJ,EAAjH,EAA2I,eAA3I,EAA4JjW,GAAG,CAACkW,QAAJ,CAAaC,QAAb,EAA5J,EAAqL,eAArL,EAAsMnW,GAAG,CAACyK,QAAJ,CAAa0L,QAAb,EAAtM,EAA+N,cAA/N,EAA+OnW,GAAG,CAACoW,UAAnP,EAA+P,WAA/P,EAA4QpW,GAAG,CAACsJ,SAAJ,GAAgBtJ,GAAG,CAAC+G,UAApB,GAAiC,IAA7S,EAAmT,sBAAnT,EAA2U/G,GAAG,CAACwC,QAA/U,EAAyV,kBAAzV,EAA6WxC,GAAG,CAACuU,gBAAJ,IAAwB,IAArY,EAA2Y,uBAA3Y,EAAoavU,GAAG,CAACqW,wBAAJ,EAApa;AACAjX,MAAAA,MAAM,CAACkX,WAAP,CAAmB,qBAAnB,EAA0CtW,GAAG,CAACyK,QAA9C,EAAwD,oBAAxD,EAA8EzK,GAAG,CAACoW,UAAlF,EAA8F,qBAA9F,EAAqHpW,GAAG,CAACkW,QAAzH,EAAmI,kBAAnI,EAAuJlW,GAAG,CAAC0L,KAA3J;AACH;AAAE,GAvBiD;AAuB/C6K,EAAAA,MAAM,EAAE;AAAE9L,IAAAA,QAAQ,EAAE,UAAZ;AAAwB+L,IAAAA,aAAa,EAAE,eAAvC;AAAwDtQ,IAAAA,QAAQ,EAAE,UAAlE;AAA8EuB,IAAAA,SAAS,EAAE,CAAC,YAAD,EAAe,WAAf,CAAzF;AAAsHkB,IAAAA,EAAE,EAAE,IAA1H;AAAgInI,IAAAA,WAAW,EAAE,aAA7I;AAA4J0V,IAAAA,QAAQ,EAAE,UAAtK;AAAkL1T,IAAAA,QAAQ,EAAE,UAA5L;AAAwMiU,IAAAA,sBAAsB,EAAE,wBAAhO;AAA0PC,IAAAA,WAAW,EAAE,aAAvQ;AAAsRnS,IAAAA,KAAK,EAAE,OAA7R;AAAsShC,IAAAA,UAAU,EAAE,YAAlT;AAAgUwP,IAAAA,cAAc,EAAE,CAAC,iBAAD,EAAoB,gBAApB,CAAhV;AAAuX4E,IAAAA,iBAAiB,EAAE,mBAA1Y;AAA+Z5G,IAAAA,cAAc,EAAE;AAA/a,GAvBuC;AAuB4Z6G,EAAAA,OAAO,EAAE;AAAE3O,IAAAA,YAAY,EAAE,cAAhB;AAAgCC,IAAAA,aAAa,EAAE,QAA/C;AAAyDE,IAAAA,aAAa,EAAE,QAAxE;AAAkFC,IAAAA,eAAe,EAAE,iBAAnG;AAAsHC,IAAAA,WAAW,EAAE;AAAnI,GAvBra;AAuByjBuO,EAAAA,QAAQ,EAAE,CAAC,WAAD,CAvBnkB;AAuBklBC,EAAAA,QAAQ,EAAE,CAAC1X,MAAM,CAAC2X,kBAAP,CAA0B,CACnqB;AAAE7S,IAAAA,OAAO,EAAE3F,mBAAX;AAAgCyY,IAAAA,WAAW,EAAErR;AAA7C,GADmqB,EAEnqB;AAAEzB,IAAAA,OAAO,EAAErG,2BAAX;AAAwCmZ,IAAAA,WAAW,EAAErR;AAArD,GAFmqB,CAA1B,CAAD,EAGxoBvG,MAAM,CAAC6X,0BAHioB,EAGrmB7X,MAAM,CAAC8X,oBAH8lB,CAvB5lB;AA0BqBC,EAAAA,kBAAkB,EAAEzU,GA1BzC;AA0B8C0U,EAAAA,KAAK,EAAE,CA1BrD;AA0BwDC,EAAAA,IAAI,EAAE,CA1B9D;AA0BiEC,EAAAA,MAAM,EAAE,CAAC,CAAC,oBAAD,EAAuB,EAAvB,EAA2B,aAA3B,EAA0C,MAA1C,EAAkD,CAAlD,EAAqD,oBAArD,EAA2E,CAA3E,EAA8E,OAA9E,CAAD,EAAyF,CAAC,QAAD,EAAW,kBAAX,EAA+B,SAA/B,EAA0C,EAA1C,CAAzF,EAAwI,CAAC,CAAD,EAAI,kBAAJ,EAAwB,CAAxB,EAA2B,UAA3B,CAAxI,EAAgL,CAAC,OAAD,EAAU,wBAAV,EAAoC,CAApC,EAAuC,cAAvC,CAAhL,EAAwO,CAAC,OAAD,EAAU,uBAAV,EAAmC,CAAnC,EAAsC,UAAtC,EAAkD,CAAlD,EAAqD,cAArD,CAAxO,EAA8S,CAAC,CAAD,EAAI,0BAAJ,CAA9S,EAA+U,CAAC,CAAD,EAAI,kBAAJ,CAA/U,EAAwW,CAAC,uBAAD,EAA0B,EAA1B,EAA8B,iCAA9B,EAAiE,EAAjE,EAAqE,gCAArE,EAAuG,EAAvG,EAA2G,kCAA3G,EAA+I,kCAA/I,EAAmL,CAAnL,EAAsL,mCAAtL,EAA2N,2BAA3N,EAAwP,yBAAxP,EAAmR,8BAAnR,EAAmT,6BAAnT,EAAkV,4BAAlV,EAAgX,eAAhX,EAAiY,QAAjY,EAA2Y,QAA3Y,CAAxW,EAA8vB,CAAC,CAAD,EAAI,wBAAJ,CAA9vB,EAA6xB,CAAC,CAAD,EAAI,uBAAJ,EAA6B,CAA7B,EAAgC,UAAhC,CAA7xB,EAA00B,CAAC,CAAD,EAAI,iBAAJ,CAA10B,EAAk2B,CAAC,CAAD,EAAI,cAAJ,CAAl2B,EAAu3B,CAAC,CAAD,EAAI,SAAJ,EAAe,SAAf,CAAv3B,EAAk5B,CAAC,OAAD,EAAU,EAAV,CAAl5B,CA1BzE;AA0B2+BC,EAAAA,QAAQ,EAAE,SAASC,kBAAT,CAA4BzX,EAA5B,EAAgCC,GAAhC,EAAqC;AAAE,QAAID,EAAE,GAAG,CAAT,EAAY;AACxlCX,MAAAA,MAAM,CAACqY,eAAP,CAAuBhV,GAAvB;AACArD,MAAAA,MAAM,CAACa,cAAP,CAAsB,CAAtB,EAAyB,KAAzB,EAAgC,CAAhC,EAAmC,CAAnC;AACAb,MAAAA,MAAM,CAACkC,UAAP,CAAkB,OAAlB,EAA2B,SAASoW,uCAAT,GAAmD;AAAE,eAAO1X,GAAG,CAAC2X,MAAJ,EAAP;AAAsB,OAAtG;AACAvY,MAAAA,MAAM,CAACa,cAAP,CAAsB,CAAtB,EAAyB,KAAzB,EAAgC,CAAhC;AACAb,MAAAA,MAAM,CAAC2B,UAAP,CAAkB,CAAlB,EAAqBjB,yBAArB,EAAgD,CAAhD,EAAmD,CAAnD,EAAsD,MAAtD,EAA8D,CAA9D;AACAV,MAAAA,MAAM,CAAC2B,UAAP,CAAkB,CAAlB,EAAqBD,yBAArB,EAAgD,CAAhD,EAAmD,CAAnD,EAAsD,MAAtD,EAA8D,CAA9D;AACA1B,MAAAA,MAAM,CAACe,YAAP;AACAf,MAAAA,MAAM,CAACa,cAAP,CAAsB,CAAtB,EAAyB,KAAzB,EAAgC,CAAhC;AACAb,MAAAA,MAAM,CAACwY,SAAP,CAAiB,CAAjB,EAAoB,KAApB,EAA2B,CAA3B;AACAxY,MAAAA,MAAM,CAACe,YAAP;AACAf,MAAAA,MAAM,CAACe,YAAP;AACAf,MAAAA,MAAM,CAAC2B,UAAP,CAAkB,CAAlB,EAAqBI,gCAArB,EAAuD,CAAvD,EAA0D,CAA1D,EAA6D,aAA7D,EAA4E,CAA5E;AACA/B,MAAAA,MAAM,CAACkC,UAAP,CAAkB,eAAlB,EAAmC,SAASuW,uDAAT,GAAmE;AAAE,eAAO7X,GAAG,CAACuK,KAAJ,EAAP;AAAqB,OAA7H,EAA+H,QAA/H,EAAyI,SAASuN,gDAAT,GAA4D;AAAE,eAAO9X,GAAG,CAAC+X,WAAJ,EAAP;AAA2B,OAAlO,EAAoO,QAApO,EAA8O,SAASC,gDAAT,GAA4D;AAAE,eAAOhY,GAAG,CAACuK,KAAJ,EAAP;AAAqB,OAAjU;AACH;;AAAC,QAAIxK,EAAE,GAAG,CAAT,EAAY;AACV,UAAMkY,GAAG,GAAG7Y,MAAM,CAAC8Y,WAAP,CAAmB,CAAnB,CAAZ;;AACA9Y,MAAAA,MAAM,CAACkB,SAAP,CAAiB,CAAjB;AACAlB,MAAAA,MAAM,CAAC6B,UAAP,CAAkB,UAAlB,EAA8BjB,GAAG,CAAC0L,KAAlC;AACAtM,MAAAA,MAAM,CAACkB,SAAP,CAAiB,CAAjB;AACAlB,MAAAA,MAAM,CAAC6B,UAAP,CAAkB,cAAlB,EAAkC,IAAlC;AACA7B,MAAAA,MAAM,CAACkB,SAAP,CAAiB,CAAjB;AACAlB,MAAAA,MAAM,CAAC6B,UAAP,CAAkB,cAAlB,EAAkC,KAAlC;AACA7B,MAAAA,MAAM,CAACkB,SAAP,CAAiB,CAAjB;AACAlB,MAAAA,MAAM,CAAC6B,UAAP,CAAkB,mCAAlB,EAAuDjB,GAAG,CAACyI,eAA3D,EAA4E,2BAA5E,EAAyGwP,GAAzG,EAA8G,yBAA9G,EAAyIjY,GAAG,CAACsJ,SAA7I,EAAwJ,8BAAxJ,EAAwLtJ,GAAG,CAACiH,UAA5L,EAAwM,6BAAxM,EAAuOjH,GAAG,CAAC2K,YAAJ,IAAoB,IAApB,GAA2B,IAA3B,GAAkC3K,GAAG,CAAC2K,YAAJ,CAAiBmI,KAA1R,EAAiS,4BAAjS,EAA+T9S,GAAG,CAACgH,QAAnU;AACH;AAAE,GAlDiD;AAkD/CmR,EAAAA,UAAU,EAAE,CAACzY,MAAM,CAAC0Y,gBAAR,EAA0BzY,MAAM,CAAC0Y,QAAjC,EAA2C1Y,MAAM,CAAC2Y,YAAlD,EAAgE5Y,MAAM,CAAC3D,mBAAvE,EAA4F4D,MAAM,CAAC4Y,eAAnG,EAAoH5Y,MAAM,CAAC6Y,OAA3H,CAlDmC;AAkDkGC,EAAAA,MAAM,EAAE,CAAC,qjEAAD,CAlD1G;AAkDmqEC,EAAAA,aAAa,EAAE,CAlDlrE;AAkDqrEC,EAAAA,IAAI,EAAE;AAAEC,IAAAA,SAAS,EAAE,CACpvEjW,mBAAmB,CAACC,cADguE;AAAb,GAlD3rE;AAoD3CiW,EAAAA,eAAe,EAAE;AApD0B,CAAzB,CAA/B;AAqDA;;AACAlT,SAAS,CAACmT,cAAV,GAA2B;AAAA,SAAM,CAC7B;AAAEzT,IAAAA,IAAI,EAAEnJ;AAAR,GAD6B,EAE7B;AAAEmJ,IAAAA,IAAI,EAAEhJ;AAAR,GAF6B,EAG7B;AAAEgJ,IAAAA,IAAI,EAAErI;AAAR,GAH6B,EAI7B;AAAEqI,IAAAA,IAAI,EAAEzH;AAAR,GAJ6B,EAK7B;AAAEyH,IAAAA,IAAI,EAAE3I;AAAR,GAL6B,EAM7B;AAAE2I,IAAAA,IAAI,EAAElK,cAAR;AAAwB4d,IAAAA,UAAU,EAAE,CAAC;AAAE1T,MAAAA,IAAI,EAAEpI;AAAR,KAAD;AAApC,GAN6B,EAO7B;AAAEoI,IAAAA,IAAI,EAAE5H,MAAR;AAAgBsb,IAAAA,UAAU,EAAE,CAAC;AAAE1T,MAAAA,IAAI,EAAEpI;AAAR,KAAD;AAA5B,GAP6B,EAQ7B;AAAEoI,IAAAA,IAAI,EAAE9H,kBAAR;AAA4Bwb,IAAAA,UAAU,EAAE,CAAC;AAAE1T,MAAAA,IAAI,EAAEpI;AAAR,KAAD;AAAxC,GAR6B,EAS7B;AAAEoI,IAAAA,IAAI,EAAE/G,YAAR;AAAsBya,IAAAA,UAAU,EAAE,CAAC;AAAE1T,MAAAA,IAAI,EAAEpI;AAAR,KAAD;AAAlC,GAT6B,EAU7B;AAAEoI,IAAAA,IAAI,EAAE7H,SAAR;AAAmBub,IAAAA,UAAU,EAAE,CAAC;AAAE1T,MAAAA,IAAI,EAAElI;AAAR,KAAD,EAAiB;AAAEkI,MAAAA,IAAI,EAAEpI;AAAR,KAAjB;AAA/B,GAV6B,EAW7B;AAAEoI,IAAAA,IAAI,EAAE2T,MAAR;AAAgBD,IAAAA,UAAU,EAAE,CAAC;AAAE1T,MAAAA,IAAI,EAAElJ,SAAR;AAAmBsJ,MAAAA,IAAI,EAAE,CAAC,UAAD;AAAzB,KAAD;AAA5B,GAX6B,EAY7B;AAAEJ,IAAAA,IAAI,EAAEsL,SAAR;AAAmBoI,IAAAA,UAAU,EAAE,CAAC;AAAE1T,MAAAA,IAAI,EAAEzI,MAAR;AAAgB6I,MAAAA,IAAI,EAAE,CAAC7B,0BAAD;AAAtB,KAAD;AAA/B,GAZ6B,CAAN;AAAA,CAA3B;;AAcA+B,SAAS,CAACsT,cAAV,GAA2B;AACvBhe,EAAAA,OAAO,EAAE,CAAC;AAAEoK,IAAAA,IAAI,EAAEjI,SAAR;AAAmBqI,IAAAA,IAAI,EAAE,CAAC,SAAD;AAAzB,GAAD,CADc;AAEvB8H,EAAAA,KAAK,EAAE,CAAC;AAAElI,IAAAA,IAAI,EAAEjI,SAAR;AAAmBqI,IAAAA,IAAI,EAAE,CAAC,OAAD;AAAzB,GAAD,CAFgB;AAGvB+D,EAAAA,UAAU,EAAE,CAAC;AAAEnE,IAAAA,IAAI,EAAEjI,SAAR;AAAmBqI,IAAAA,IAAI,EAAE,CAAC1J,mBAAD;AAAzB,GAAD,CAHW;AAIvB4L,EAAAA,OAAO,EAAE,CAAC;AAAEtC,IAAAA,IAAI,EAAE7I,eAAR;AAAyBiJ,IAAAA,IAAI,EAAE,CAAC1H,SAAD,EAAY;AAAEmb,MAAAA,WAAW,EAAE;AAAf,KAAZ;AAA/B,GAAD,CAJc;AAKvB7I,EAAAA,YAAY,EAAE,CAAC;AAAEhL,IAAAA,IAAI,EAAE7I,eAAR;AAAyBiJ,IAAAA,IAAI,EAAE,CAAC3H,WAAD;AAA/B,GAAD,CALS;AAMvByE,EAAAA,UAAU,EAAE,CAAC;AAAE8C,IAAAA,IAAI,EAAEvI;AAAR,GAAD,CANW;AAOvBoE,EAAAA,aAAa,EAAE,CAAC;AAAEmE,IAAAA,IAAI,EAAE9I,YAAR;AAAsBkJ,IAAAA,IAAI,EAAE,CAACV,gBAAD;AAA5B,GAAD,CAPQ;AAQvBvE,EAAAA,WAAW,EAAE,CAAC;AAAE6E,IAAAA,IAAI,EAAEvI;AAAR,GAAD,CARU;AASvBoZ,EAAAA,QAAQ,EAAE,CAAC;AAAE7Q,IAAAA,IAAI,EAAEvI;AAAR,GAAD,CATa;AAUvB0F,EAAAA,QAAQ,EAAE,CAAC;AAAE6C,IAAAA,IAAI,EAAEvI;AAAR,GAAD,CAVa;AAWvB2Z,EAAAA,sBAAsB,EAAE,CAAC;AAAEpR,IAAAA,IAAI,EAAEvI;AAAR,GAAD,CAXD;AAYvB4Z,EAAAA,WAAW,EAAE,CAAC;AAAErR,IAAAA,IAAI,EAAEvI;AAAR,GAAD,CAZU;AAavByH,EAAAA,KAAK,EAAE,CAAC;AAAEc,IAAAA,IAAI,EAAEvI;AAAR,GAAD,CAbgB;AAcvB2K,EAAAA,SAAS,EAAE,CAAC;AAAEpC,IAAAA,IAAI,EAAEvI,KAAR;AAAe2I,IAAAA,IAAI,EAAE,CAAC,YAAD;AAArB,GAAD,CAdY;AAevBsM,EAAAA,cAAc,EAAE,CAAC;AAAE1M,IAAAA,IAAI,EAAEvI,KAAR;AAAe2I,IAAAA,IAAI,EAAE,CAAC,iBAAD;AAArB,GAAD,CAfO;AAgBvBkR,EAAAA,iBAAiB,EAAE,CAAC;AAAEtR,IAAAA,IAAI,EAAEvI;AAAR,GAAD,CAhBI;AAiBvBiT,EAAAA,cAAc,EAAE,CAAC;AAAE1K,IAAAA,IAAI,EAAEvI;AAAR,GAAD,CAjBO;AAkBvB6L,EAAAA,EAAE,EAAE,CAAC;AAAEtD,IAAAA,IAAI,EAAEvI;AAAR,GAAD,CAlBmB;AAmBvBmL,EAAAA,YAAY,EAAE,CAAC;AAAE5C,IAAAA,IAAI,EAAEnI;AAAR,GAAD,CAnBS;AAoBvBgL,EAAAA,aAAa,EAAE,CAAC;AAAE7C,IAAAA,IAAI,EAAEnI,MAAR;AAAgBuI,IAAAA,IAAI,EAAE,CAAC,QAAD;AAAtB,GAAD,CApBQ;AAqBvB2C,EAAAA,aAAa,EAAE,CAAC;AAAE/C,IAAAA,IAAI,EAAEnI,MAAR;AAAgBuI,IAAAA,IAAI,EAAE,CAAC,QAAD;AAAtB,GAAD,CArBQ;AAsBvB4C,EAAAA,eAAe,EAAE,CAAC;AAAEhD,IAAAA,IAAI,EAAEnI;AAAR,GAAD,CAtBM;AAuBvBoL,EAAAA,WAAW,EAAE,CAAC;AAAEjD,IAAAA,IAAI,EAAEnI;AAAR,GAAD;AAvBU,CAA3B;;AAyBA,CAAC,YAAY;AAAE,GAAC,OAAOqI,SAAP,KAAqB,WAArB,IAAoCA,SAArC,KAAmDnG,MAAM,CAACoG,iBAAP,CAAyBG,SAAzB,EAAoC,CAAC;AAC/FN,IAAAA,IAAI,EAAE/I,SADyF;AAE/FmJ,IAAAA,IAAI,EAAE,CAAC;AAAEC,MAAAA,QAAQ,EAAE,YAAZ;AACCmR,MAAAA,QAAQ,EAAE,WADX;AAECU,MAAAA,QAAQ,EAAE,w/CAFX;AAGCkB,MAAAA,MAAM,EAAE,CAAC,qjEAAD,CAHT;AAIClC,MAAAA,MAAM,EAAE,CAAC,UAAD,EAAa,eAAb,EAA8B,UAA9B,CAJT;AAKCmC,MAAAA,aAAa,EAAErb,iBAAiB,CAAC8b,IALlC;AAMCN,MAAAA,eAAe,EAAEzc,uBAAuB,CAACgd,MAN1C;AAOCC,MAAAA,IAAI,EAAE;AACF,gBAAQ,SADN;AAEF,qBAAa,IAFX;AAGF,2BAAmB,UAHjB;AAIF,6BAAqB,iBAJnB;AAKF,kCAA0B,sBALxB;AAMF,gCAAwB,qBANtB;AAOF,gCAAwB,qBAPtB;AAQF,+BAAuB,YARrB;AASF,4BAAoB,+BATlB;AAUF,uCAA+B,UAV7B;AAWF,mCAA2B,0BAXzB;AAYF,wCAAgC,4BAZ9B;AAaF,uCAA+B,UAb7B;AAcF,sCAA8B,YAd5B;AAeF,uCAA+B,UAf7B;AAgBF,oCAA4B,OAhB1B;AAiBF,iBAAS,YAjBP;AAkBF,qBAAa,wBAlBX;AAmBF,mBAAW,YAnBT;AAoBF,kBAAU;AApBR,OAPP;AA6BCC,MAAAA,UAAU,EAAE,CACR3W,mBAAmB,CAACC,cADZ,CA7Bb;AA+BI2W,MAAAA,SAAS,EAAE,CACV;AAAErV,QAAAA,OAAO,EAAE3F,mBAAX;AAAgCyY,QAAAA,WAAW,EAAErR;AAA7C,OADU,EAEV;AAAEzB,QAAAA,OAAO,EAAErG,2BAAX;AAAwCmZ,QAAAA,WAAW,EAAErR;AAArD,OAFU;AA/Bf,KAAD;AAFyF,GAAD,CAApC,EAsC1D,YAAY;AAAE,WAAO,CAAC;AAAEN,MAAAA,IAAI,EAAEhG,MAAM,CAACnD;AAAf,KAAD,EAAiC;AAAEmJ,MAAAA,IAAI,EAAEjG,MAAM,CAAC/C;AAAf,KAAjC,EAAqE;AAAEgJ,MAAAA,IAAI,EAAEjG,MAAM,CAACpC;AAAf,KAArE,EAA8F;AAAEqI,MAAAA,IAAI,EAAE/F,MAAM,CAAC1B;AAAf,KAA9F,EAAkI;AAAEyH,MAAAA,IAAI,EAAEjG,MAAM,CAAC1C;AAAf,KAAlI,EAA+J;AAAE2I,MAAAA,IAAI,EAAE9F,MAAM,CAACpE,cAAf;AAA+B4d,MAAAA,UAAU,EAAE,CAAC;AACxN1T,QAAAA,IAAI,EAAEpI;AADkN,OAAD;AAA3C,KAA/J,EAEX;AAAEoI,MAAAA,IAAI,EAAE7F,MAAM,CAAC/B,MAAf;AAAuBsb,MAAAA,UAAU,EAAE,CAAC;AACtC1T,QAAAA,IAAI,EAAEpI;AADgC,OAAD;AAAnC,KAFW,EAIX;AAAEoI,MAAAA,IAAI,EAAE7F,MAAM,CAACjC,kBAAf;AAAmCwb,MAAAA,UAAU,EAAE,CAAC;AAClD1T,QAAAA,IAAI,EAAEpI;AAD4C,OAAD;AAA/C,KAJW,EAMX;AAAEoI,MAAAA,IAAI,EAAE5F,MAAM,CAACnB,YAAf;AAA6Bya,MAAAA,UAAU,EAAE,CAAC;AAC5C1T,QAAAA,IAAI,EAAEpI;AADsC,OAAD;AAAzC,KANW,EAQX;AAAEoI,MAAAA,IAAI,EAAE7F,MAAM,CAAChC,SAAf;AAA0Bub,MAAAA,UAAU,EAAE,CAAC;AACzC1T,QAAAA,IAAI,EAAElI;AADmC,OAAD,EAEzC;AACCkI,QAAAA,IAAI,EAAEpI;AADP,OAFyC;AAAtC,KARW,EAYX;AAAEoI,MAAAA,IAAI,EAAE2T,MAAR;AAAgBD,MAAAA,UAAU,EAAE,CAAC;AAC/B1T,QAAAA,IAAI,EAAElJ,SADyB;AAE/BsJ,QAAAA,IAAI,EAAE,CAAC,UAAD;AAFyB,OAAD;AAA5B,KAZW,EAeX;AAAEJ,MAAAA,IAAI,EAAEsL,SAAR;AAAmBoI,MAAAA,UAAU,EAAE,CAAC;AAClC1T,QAAAA,IAAI,EAAEzI,MAD4B;AAElC6I,QAAAA,IAAI,EAAE,CAAC7B,0BAAD;AAF4B,OAAD;AAA/B,KAfW,CAAP;AAkBF,GAxD8C,EAwD5C;AAAE6D,IAAAA,SAAS,EAAE,CAAC;AACxBpC,MAAAA,IAAI,EAAEvI,KADkB;AAExB2I,MAAAA,IAAI,EAAE,CAAC,YAAD;AAFkB,KAAD,CAAb;AAGVwC,IAAAA,YAAY,EAAE,CAAC;AACf5C,MAAAA,IAAI,EAAEnI;AADS,KAAD,CAHJ;AAKVgL,IAAAA,aAAa,EAAE,CAAC;AAChB7C,MAAAA,IAAI,EAAEnI,MADU;AAEhBuI,MAAAA,IAAI,EAAE,CAAC,QAAD;AAFU,KAAD,CALL;AAQV2C,IAAAA,aAAa,EAAE,CAAC;AAChB/C,MAAAA,IAAI,EAAEnI,MADU;AAEhBuI,MAAAA,IAAI,EAAE,CAAC,QAAD;AAFU,KAAD,CARL;AAWV4C,IAAAA,eAAe,EAAE,CAAC;AAClBhD,MAAAA,IAAI,EAAEnI;AADY,KAAD,CAXP;AAaVoL,IAAAA,WAAW,EAAE,CAAC;AACdjD,MAAAA,IAAI,EAAEnI;AADQ,KAAD,CAbH;AAeVyL,IAAAA,EAAE,EAAE,CAAC;AACLtD,MAAAA,IAAI,EAAEvI;AADD,KAAD,CAfM;AAiBV0D,IAAAA,WAAW,EAAE,CAAC;AACd6E,MAAAA,IAAI,EAAEvI;AADQ,KAAD,CAjBH;AAmBVoZ,IAAAA,QAAQ,EAAE,CAAC;AACX7Q,MAAAA,IAAI,EAAEvI;AADK,KAAD,CAnBA;AAqBV0F,IAAAA,QAAQ,EAAE,CAAC;AACX6C,MAAAA,IAAI,EAAEvI;AADK,KAAD,CArBA;AAuBV2Z,IAAAA,sBAAsB,EAAE,CAAC;AACzBpR,MAAAA,IAAI,EAAEvI;AADmB,KAAD,CAvBd;AAyBV4Z,IAAAA,WAAW,EAAE,CAAC;AACdrR,MAAAA,IAAI,EAAEvI;AADQ,KAAD,CAzBH;AA2BVyH,IAAAA,KAAK,EAAE,CAAC;AACRc,MAAAA,IAAI,EAAEvI;AADE,KAAD,CA3BG;AA6BV7B,IAAAA,OAAO,EAAE,CAAC;AACVoK,MAAAA,IAAI,EAAEjI,SADI;AAEVqI,MAAAA,IAAI,EAAE,CAAC,SAAD;AAFI,KAAD,CA7BC;AAgCV8H,IAAAA,KAAK,EAAE,CAAC;AACRlI,MAAAA,IAAI,EAAEjI,SADE;AAERqI,MAAAA,IAAI,EAAE,CAAC,OAAD;AAFE,KAAD,CAhCG;AAmCV+D,IAAAA,UAAU,EAAE,CAAC;AACbnE,MAAAA,IAAI,EAAEjI,SADO;AAEbqI,MAAAA,IAAI,EAAE,CAAC1J,mBAAD;AAFO,KAAD,CAnCF;AAsCV4L,IAAAA,OAAO,EAAE,CAAC;AACVtC,MAAAA,IAAI,EAAE7I,eADI;AAEViJ,MAAAA,IAAI,EAAE,CAAC1H,SAAD,EAAY;AAAEmb,QAAAA,WAAW,EAAE;AAAf,OAAZ;AAFI,KAAD,CAtCC;AAyCV7I,IAAAA,YAAY,EAAE,CAAC;AACfhL,MAAAA,IAAI,EAAE7I,eADS;AAEfiJ,MAAAA,IAAI,EAAE,CAAC3H,WAAD;AAFS,KAAD,CAzCJ;AA4CVyE,IAAAA,UAAU,EAAE,CAAC;AACb8C,MAAAA,IAAI,EAAEvI;AADO,KAAD,CA5CF;AA8CVoE,IAAAA,aAAa,EAAE,CAAC;AAChBmE,MAAAA,IAAI,EAAE9I,YADU;AAEhBkJ,MAAAA,IAAI,EAAE,CAACV,gBAAD;AAFU,KAAD,CA9CL;AAiDVgN,IAAAA,cAAc,EAAE,CAAC;AACjB1M,MAAAA,IAAI,EAAEvI,KADW;AAEjB2I,MAAAA,IAAI,EAAE,CAAC,iBAAD;AAFW,KAAD,CAjDN;AAoDVkR,IAAAA,iBAAiB,EAAE,CAAC;AACpBtR,MAAAA,IAAI,EAAEvI;AADc,KAAD,CApDT;AAsDViT,IAAAA,cAAc,EAAE,CAAC;AACjB1K,MAAAA,IAAI,EAAEvI;AADW,KAAD;AAtDN,GAxD4C,CAAnD;AAgHC,CAhHhB;AAkHA;AACA;AACA;AACA;;;IACM0c,e;;;;AAENA,eAAe,CAACxU,IAAhB,GAAuB,SAASyU,uBAAT,CAAiCvU,CAAjC,EAAoC;AAAE,SAAO,KAAKA,CAAC,IAAIsU,eAAV,GAAP;AAAsC,CAAnG;;AACAA,eAAe,CAACE,IAAhB,GAAuB,aAActa,MAAM,CAACua,gBAAP,CAAwB;AAAEtU,EAAAA,IAAI,EAAEmU;AAAR,CAAxB,CAArC;AACAA,eAAe,CAACI,IAAhB,GAAuB,aAAcxa,MAAM,CAACya,gBAAP,CAAwB;AAAEN,EAAAA,SAAS,EAAE,CAACtV,mCAAD,CAAb;AAAoD6V,EAAAA,OAAO,EAAE,CAAC,CAC/G3a,YAD+G,EAE/GlD,aAF+G,EAG/GoC,eAH+G,EAI/GD,eAJ+G,CAAD,EAK/GI,kBAL+G,EAK3FH,eAL2F,EAK1ED,eAL0E;AAA7D,CAAxB,CAArC;;AAMA,CAAC,YAAY;AAAE,GAAC,OAAOmH,SAAP,KAAqB,WAArB,IAAoCA,SAArC,KAAmDnG,MAAM,CAACoG,iBAAP,CAAyBgU,eAAzB,EAA0C,CAAC;AACrGnU,IAAAA,IAAI,EAAE/H,QAD+F;AAErGmI,IAAAA,IAAI,EAAE,CAAC;AACCqU,MAAAA,OAAO,EAAE,CACL3a,YADK,EAELlD,aAFK,EAGLoC,eAHK,EAILD,eAJK,CADV;AAOC2b,MAAAA,OAAO,EAAE,CAACvb,kBAAD,EAAqBmH,SAArB,EAAgCZ,gBAAhC,EAAkD1G,eAAlD,EAAmED,eAAnE,CAPV;AAQC4b,MAAAA,YAAY,EAAE,CAACrU,SAAD,EAAYZ,gBAAZ,CARf;AASCwU,MAAAA,SAAS,EAAE,CAACtV,mCAAD;AATZ,KAAD;AAF+F,GAAD,CAA1C,EAa1D,IAb0D,EAapD,IAboD,CAAnD;AAaO,CAbtB;;AAcA,CAAC,YAAY;AAAE,GAAC,OAAOgW,SAAP,KAAqB,WAArB,IAAoCA,SAArC,KAAmD7a,MAAM,CAAC8a,kBAAP,CAA0BV,eAA1B,EAA2C;AAAEQ,IAAAA,YAAY,EAAE,wBAAY;AAAE,aAAO,CAACrU,SAAD,EAAYZ,gBAAZ,CAAP;AAAuC,KAArE;AAAuE+U,IAAAA,OAAO,EAAE,mBAAY;AAAE,aAAO,CAAC3a,YAAD,EAC1MlD,aAD0M,EAE1MoC,eAF0M,EAG1MD,eAH0M,CAAP;AAGhL,KAHkF;AAGhF2b,IAAAA,OAAO,EAAE,mBAAY;AAAE,aAAO,CAACvb,kBAAD,EAAqBmH,SAArB,EAAgCZ,gBAAhC,EAAkD1G,eAAlD,EAAmED,eAAnE,CAAP;AAA6F;AAHpC,GAA3C,CAAnD;AAGwI,CAHvJ;AAKA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;;AAEA,SAASob,eAAT,EAA0B3V,2CAA1B,EAAuEP,uBAAvE,EAAgGC,sBAAhG,EAAwHC,6BAAxH,EAAuJC,qBAAvJ,EAA8KC,+BAA9K,EAA+MC,6BAA/M,EAA8OC,0BAA9O,EAA0QK,mCAA1Q,EAA+SI,eAA/S,EAAgUG,aAAhU,EAA+UM,mBAA/U,EAAoWC,gBAApW,EAAsXY,SAAtX,EAAiYhD,mBAAjY,EAAsZC,cAAtZ,EAAsaI,aAAta,G,CAEA","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { animate, state, style, transition, trigger } from '@angular/animations';\nimport { ActiveDescendantKeyManager } from '@angular/cdk/a11y';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { SelectionModel } from '@angular/cdk/collections';\nimport { A, DOWN_ARROW, END, ENTER, HOME, LEFT_ARROW, RIGHT_ARROW, SPACE, UP_ARROW } from '@angular/cdk/keycodes';\nimport { CdkConnectedOverlay, Overlay, OverlayModule } from '@angular/cdk/overlay';\nimport { ViewportRuler } from '@angular/cdk/scrolling';\nimport { Attribute, ChangeDetectionStrategy, ChangeDetectorRef, Component, ContentChild, ContentChildren, Directive, ElementRef, EventEmitter, Inject, InjectionToken, Input, isDevMode, NgZone, Optional, Output, Self, ViewChild, ViewEncapsulation, NgModule } from '@angular/core';\nimport { FormGroupDirective, NgControl, NgForm } from '@angular/forms';\nimport { _countGroupLabelsBeforeOption, _getOptionScrollPosition, ErrorStateMatcher, MAT_OPTION_PARENT_COMPONENT, MatOptgroup, MatOption, mixinDisabled, mixinDisableRipple, mixinErrorState, mixinTabIndex, MatCommonModule, MatOptionModule } from '@angular/material/core';\nimport { MatFormField, MatFormFieldControl, MatFormFieldModule } from '@angular/material/form-field';\nimport { defer, merge, Subject } from 'rxjs';\nimport { distinctUntilChanged, filter, map, startWith, switchMap, take, takeUntil } from 'rxjs/operators';\nimport { CommonModule } from '@angular/common';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/** *\n * The following are all the animations for the mat-select component, with each\n * const containing the metadata for one animation.\n *\n * The values below match the implementation of the AngularJS Material mat-select animation.\n * \\@docs-private\n  @type {?} */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/scrolling';\nimport * as ɵngcc2 from '@angular/material/core';\nimport * as ɵngcc3 from '@angular/cdk/bidi';\nimport * as ɵngcc4 from '@angular/forms';\nimport * as ɵngcc5 from '@angular/material/form-field';\nimport * as ɵngcc6 from '@angular/cdk/overlay';\nimport * as ɵngcc7 from '@angular/common';\n\nconst _c0 = [\"trigger\"];\nconst _c1 = [\"panel\"];\nfunction MatSelect_span_4_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"span\", 8);\n    ɵngcc0.ɵɵtext(1);\n    ɵngcc0.ɵɵelementEnd();\n} if (rf & 2) {\n    const ctx_r2 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate(ctx_r2.placeholder || \"\\u00A0\");\n} }\nfunction MatSelect_span_5_span_1_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"span\");\n    ɵngcc0.ɵɵtext(1);\n    ɵngcc0.ɵɵelementEnd();\n} if (rf & 2) {\n    const ctx_r5 = ɵngcc0.ɵɵnextContext(2);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate(ctx_r5.triggerValue || \"\\u00A0\");\n} }\nfunction MatSelect_span_5_ng_content_2_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵprojection(0, 0, [\"*ngSwitchCase\", \"true\"]);\n} }\nfunction MatSelect_span_5_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"span\", 9);\n    ɵngcc0.ɵɵtemplate(1, MatSelect_span_5_span_1_Template, 2, 1, \"span\", 10);\n    ɵngcc0.ɵɵtemplate(2, MatSelect_span_5_ng_content_2_Template, 1, 0, \"ng-content\", 11);\n    ɵngcc0.ɵɵelementEnd();\n} if (rf & 2) {\n    const ctx_r3 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"ngSwitch\", !!ctx_r3.customTrigger);\n    ɵngcc0.ɵɵadvance(2);\n    ɵngcc0.ɵɵproperty(\"ngSwitchCase\", true);\n} }\nfunction MatSelect_ng_template_8_Template(rf, ctx) { if (rf & 1) {\n    const _r9 = ɵngcc0.ɵɵgetCurrentView();\n    ɵngcc0.ɵɵelementStart(0, \"div\", 12, 13);\n    ɵngcc0.ɵɵlistener(\"@transformPanel.done\", function MatSelect_ng_template_8_Template_div_animation_transformPanel_done_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r9); const ctx_r8 = ɵngcc0.ɵɵnextContext(); return ctx_r8._panelDoneAnimatingStream.next($event.toState); })(\"keydown\", function MatSelect_ng_template_8_Template_div_keydown_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r9); const ctx_r10 = ɵngcc0.ɵɵnextContext(); return ctx_r10._handleKeydown($event); });\n    ɵngcc0.ɵɵprojection(2, 1);\n    ɵngcc0.ɵɵelementEnd();\n} if (rf & 2) {\n    const ctx_r4 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵclassMapInterpolate1(\"mat-select-panel \", ctx_r4._getPanelTheme(), \"\");\n    ɵngcc0.ɵɵstyleProp(\"transform-origin\", ctx_r4._transformOrigin)(\"font-size\", ctx_r4._triggerFontSize, \"px\");\n    ɵngcc0.ɵɵproperty(\"ngClass\", ctx_r4.panelClass)(\"@transformPanel\", ctx_r4.multiple ? \"showing-multiple\" : \"showing\");\n} }\nconst _c2 = [[[\"mat-select-trigger\"]], \"*\"];\nconst _c3 = [\"mat-select-trigger\", \"*\"];\nconst matSelectAnimations = {\n    /**\n       * This animation transforms the select's overlay panel on and off the page.\n       *\n       * When the panel is attached to the DOM, it expands its width by the amount of padding, scales it\n       * up to 100% on the Y axis, fades in its border, and translates slightly up and to the\n       * side to ensure the option text correctly overlaps the trigger text.\n       *\n       * When the panel is removed from the DOM, it simply fades out linearly.\n       */\n    transformPanel: trigger('transformPanel', [\n        state('void', style({\n            transform: 'scaleY(0.8)',\n            minWidth: '100%',\n            opacity: 0\n        })),\n        state('showing', style({\n            opacity: 1,\n            minWidth: 'calc(100% + 32px)',\n            // 32px = 2 * 16px padding\n            transform: 'scaleY(1)'\n        })),\n        state('showing-multiple', style({\n            opacity: 1,\n            minWidth: 'calc(100% + 64px)',\n            // 64px = 48px padding on the left + 16px padding on the right\n            transform: 'scaleY(1)'\n        })),\n        transition('void => *', animate('120ms cubic-bezier(0, 0, 0.2, 1)')),\n        transition('* => void', animate('100ms 25ms linear', style({ opacity: 0 })))\n    ]),\n    /**\n       * This animation fades in the background color and text content of the\n       * select's options. It is time delayed to occur 100ms after the overlay\n       * panel has transformed in.\n       * @deprecated Not used anymore. To be removed.\n       * @breaking-change 8.0.0\n       */\n    fadeInContent: trigger('fadeInContent', [\n        state('showing', style({ opacity: 1 })),\n        transition('void => showing', [\n            style({ opacity: 0 }),\n            animate('150ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)')\n        ])\n    ])\n};\n/** *\n * @deprecated\n * \\@breaking-change 8.0.0\n * \\@docs-private\n  @type {?} */\nconst transformPanel = matSelectAnimations.transformPanel;\n/** *\n * @deprecated\n * \\@breaking-change 8.0.0\n * \\@docs-private\n  @type {?} */\nconst fadeInContent = matSelectAnimations.fadeInContent;\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * Returns an exception to be thrown when attempting to change a select's `multiple` option\n * after initialization.\n * \\@docs-private\n * @return {?}\n */\nfunction getMatSelectDynamicMultipleError() {\n    return Error('Cannot change `multiple` mode of select after initialization.');\n}\n/**\n * Returns an exception to be thrown when attempting to assign a non-array value to a select\n * in `multiple` mode. Note that `undefined` and `null` are still valid values to allow for\n * resetting the value.\n * \\@docs-private\n * @return {?}\n */\nfunction getMatSelectNonArrayValueError() {\n    return Error('Value must be an array in multiple-selection mode.');\n}\n/**\n * Returns an exception to be thrown when assigning a non-function value to the comparator\n * used to determine if a value corresponds to an option. Note that whether the function\n * actually takes two values and returns a boolean is not checked.\n * @return {?}\n */\nfunction getMatSelectNonFunctionValueError() {\n    return Error('`compareWith` must be a function.');\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/** @type {?} */\nlet nextUniqueId = 0;\n/** *\n * The max height of the select's overlay panel\n  @type {?} */\nconst SELECT_PANEL_MAX_HEIGHT = 256;\n/** *\n * The panel's padding on the x-axis\n  @type {?} */\nconst SELECT_PANEL_PADDING_X = 16;\n/** *\n * The panel's x axis padding if it is indented (e.g. there is an option group).\n  @type {?} */\nconst SELECT_PANEL_INDENT_PADDING_X = SELECT_PANEL_PADDING_X * 2;\n/** *\n * The height of the select items in `em` units.\n  @type {?} */\nconst SELECT_ITEM_HEIGHT_EM = 3;\n/** *\n * Distance between the panel edge and the option text in\n * multi-selection mode.\n *\n * Calculated as:\n * (SELECT_PANEL_PADDING_X * 1.5) + 20 = 44\n * The padding is multiplied by 1.5 because the checkbox's margin is half the padding.\n * The checkbox width is 16px.\n  @type {?} */\nlet SELECT_MULTIPLE_PANEL_PADDING_X = 0;\n/** *\n * The select panel will only \"fit\" inside the viewport if it is positioned at\n * this value or more away from the viewport boundary.\n  @type {?} */\nconst SELECT_PANEL_VIEWPORT_PADDING = 8;\n/** *\n * Injection token that determines the scroll handling while a select is open.\n  @type {?} */\nconst MAT_SELECT_SCROLL_STRATEGY = new InjectionToken('mat-select-scroll-strategy');\n/**\n * \\@docs-private\n * @param {?} overlay\n * @return {?}\n */\nfunction MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay) {\n    return () => overlay.scrollStrategies.reposition();\n}\n/** *\n * \\@docs-private\n  @type {?} */\nconst MAT_SELECT_SCROLL_STRATEGY_PROVIDER = {\n    provide: MAT_SELECT_SCROLL_STRATEGY,\n    deps: [Overlay],\n    useFactory: MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n/**\n * Change event object that is emitted when the select value has changed.\n */\nclass MatSelectChange {\n    /**\n     * @param {?} source\n     * @param {?} value\n     */\n    constructor(source, value) {\n        this.source = source;\n        this.value = value;\n    }\n}\n/**\n * \\@docs-private\n */\nclass MatSelectBase {\n    /**\n     * @param {?} _elementRef\n     * @param {?} _defaultErrorStateMatcher\n     * @param {?} _parentForm\n     * @param {?} _parentFormGroup\n     * @param {?} ngControl\n     */\n    constructor(_elementRef, _defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl) {\n        this._elementRef = _elementRef;\n        this._defaultErrorStateMatcher = _defaultErrorStateMatcher;\n        this._parentForm = _parentForm;\n        this._parentFormGroup = _parentFormGroup;\n        this.ngControl = ngControl;\n    }\n}\n/** @type {?} */\nconst _MatSelectMixinBase = mixinDisableRipple(mixinTabIndex(mixinDisabled(mixinErrorState(MatSelectBase))));\n/**\n * Allows the user to customize the trigger that is displayed when the select has a value.\n */\nclass MatSelectTrigger {\n}\nMatSelectTrigger.ɵfac = function MatSelectTrigger_Factory(t) { return new (t || MatSelectTrigger)(); };\nMatSelectTrigger.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: MatSelectTrigger, selectors: [[\"mat-select-trigger\"]] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatSelectTrigger, [{\n        type: Directive,\n        args: [{\n                selector: 'mat-select-trigger'\n            }]\n    }], null, null); })();\nclass MatSelect extends _MatSelectMixinBase {\n    /**\n     * @param {?} _viewportRuler\n     * @param {?} _changeDetectorRef\n     * @param {?} _ngZone\n     * @param {?} _defaultErrorStateMatcher\n     * @param {?} elementRef\n     * @param {?} _dir\n     * @param {?} _parentForm\n     * @param {?} _parentFormGroup\n     * @param {?} _parentFormField\n     * @param {?} ngControl\n     * @param {?} tabIndex\n     * @param {?} scrollStrategyFactory\n     */\n    constructor(_viewportRuler, _changeDetectorRef, _ngZone, _defaultErrorStateMatcher, elementRef, _dir, _parentForm, _parentFormGroup, _parentFormField, ngControl, tabIndex, scrollStrategyFactory) {\n        super(elementRef, _defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n        this._viewportRuler = _viewportRuler;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._ngZone = _ngZone;\n        this._dir = _dir;\n        this._parentFormField = _parentFormField;\n        this.ngControl = ngControl;\n        /**\n         * Whether or not the overlay panel is open.\n         */\n        this._panelOpen = false;\n        /**\n         * Whether filling out the select is required in the form.\n         */\n        this._required = false;\n        /**\n         * The scroll position of the overlay panel, calculated to center the selected option.\n         */\n        this._scrollTop = 0;\n        /**\n         * Whether the component is in multiple selection mode.\n         */\n        this._multiple = false;\n        /**\n         * Comparison function to specify which option is displayed. Defaults to object equality.\n         */\n        this._compareWith = (o1, o2) => o1 === o2;\n        /**\n         * Unique id for this input.\n         */\n        this._uid = `mat-select-${nextUniqueId++}`;\n        /**\n         * Emits whenever the component is destroyed.\n         */\n        this._destroy = new Subject();\n        /**\n         * The cached font-size of the trigger element.\n         */\n        this._triggerFontSize = 0;\n        /**\n         * `View -> model callback called when value changes`\n         */\n        this._onChange = () => { };\n        /**\n         * `View -> model callback called when select has been touched`\n         */\n        this._onTouched = () => { };\n        /**\n         * The IDs of child options to be passed to the aria-owns attribute.\n         */\n        this._optionIds = '';\n        /**\n         * The value of the select panel's transform-origin property.\n         */\n        this._transformOrigin = 'top';\n        /**\n         * Emits when the panel element is finished transforming in.\n         */\n        this._panelDoneAnimatingStream = new Subject();\n        /**\n         * The y-offset of the overlay panel in relation to the trigger's top start corner.\n         * This must be adjusted to align the selected option text over the trigger text.\n         * when the panel opens. Will change based on the y-position of the selected option.\n         */\n        this._offsetY = 0;\n        /**\n         * This position config ensures that the top \"start\" corner of the overlay\n         * is aligned with with the top \"start\" of the origin by default (overlapping\n         * the trigger completely). If the panel cannot fit below the trigger, it\n         * will fall back to a position above the trigger.\n         */\n        this._positions = [\n            {\n                originX: 'start',\n                originY: 'top',\n                overlayX: 'start',\n                overlayY: 'top',\n            },\n            {\n                originX: 'start',\n                originY: 'bottom',\n                overlayX: 'start',\n                overlayY: 'bottom',\n            },\n        ];\n        /**\n         * Whether the component is disabling centering of the active option over the trigger.\n         */\n        this._disableOptionCentering = false;\n        this._focused = false;\n        /**\n         * A name for this control that can be used by `mat-form-field`.\n         */\n        this.controlType = 'mat-select';\n        /**\n         * Aria label of the select. If not specified, the placeholder will be used as label.\n         */\n        this.ariaLabel = '';\n        /**\n         * Combined stream of all of the child options' change events.\n         */\n        this.optionSelectionChanges = defer(() => {\n            if (this.options) {\n                return merge(...this.options.map(option => option.onSelectionChange));\n            }\n            return this._ngZone.onStable\n                .asObservable()\n                .pipe(take(1), switchMap(() => this.optionSelectionChanges));\n        });\n        /**\n         * Event emitted when the select panel has been toggled.\n         */\n        this.openedChange = new EventEmitter();\n        /**\n         * Event emitted when the select has been opened.\n         */\n        this._openedStream = this.openedChange.pipe(filter(o => o), map(() => { }));\n        /**\n         * Event emitted when the select has been closed.\n         */\n        this._closedStream = this.openedChange.pipe(filter(o => !o), map(() => { }));\n        /**\n         * Event emitted when the selected value has been changed by the user.\n         */\n        this.selectionChange = new EventEmitter();\n        /**\n         * Event that emits whenever the raw value of the select changes. This is here primarily\n         * to facilitate the two-way binding for the `value` input.\n         * \\@docs-private\n         */\n        this.valueChange = new EventEmitter();\n        if (this.ngControl) {\n            // Note: we provide the value accessor through here, instead of\n            // the `providers` to avoid running into a circular import.\n            this.ngControl.valueAccessor = this;\n        }\n        this._scrollStrategyFactory = scrollStrategyFactory;\n        this._scrollStrategy = this._scrollStrategyFactory();\n        this.tabIndex = parseInt(tabIndex) || 0;\n        // Force setter to be called in case id was not specified.\n        this.id = this.id;\n    }\n    /**\n     * Whether the select is focused.\n     * @return {?}\n     */\n    get focused() {\n        return this._focused || this._panelOpen;\n    }\n    /**\n     * @deprecated Setter to be removed as this property is intended to be readonly.\n     * \\@breaking-change 8.0.0\n     * @param {?} value\n     * @return {?}\n     */\n    set focused(value) {\n        this._focused = value;\n    }\n    /**\n     * Placeholder to be shown if no value has been selected.\n     * @return {?}\n     */\n    get placeholder() { return this._placeholder; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set placeholder(value) {\n        this._placeholder = value;\n        this.stateChanges.next();\n    }\n    /**\n     * Whether the component is required.\n     * @return {?}\n     */\n    get required() { return this._required; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set required(value) {\n        this._required = coerceBooleanProperty(value);\n        this.stateChanges.next();\n    }\n    /**\n     * Whether the user should be allowed to select multiple options.\n     * @return {?}\n     */\n    get multiple() { return this._multiple; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set multiple(value) {\n        if (this._selectionModel) {\n            throw getMatSelectDynamicMultipleError();\n        }\n        this._multiple = coerceBooleanProperty(value);\n    }\n    /**\n     * Whether to center the active option over the trigger.\n     * @return {?}\n     */\n    get disableOptionCentering() { return this._disableOptionCentering; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set disableOptionCentering(value) {\n        this._disableOptionCentering = coerceBooleanProperty(value);\n    }\n    /**\n     * Function to compare the option values with the selected values. The first argument\n     * is a value from an option. The second is a value from the selection. A boolean\n     * should be returned.\n     * @return {?}\n     */\n    get compareWith() { return this._compareWith; }\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    set compareWith(fn) {\n        if (typeof fn !== 'function') {\n            throw getMatSelectNonFunctionValueError();\n        }\n        this._compareWith = fn;\n        if (this._selectionModel) {\n            // A different comparator means the selection could change.\n            this._initializeSelection();\n        }\n    }\n    /**\n     * Value of the select control.\n     * @return {?}\n     */\n    get value() { return this._value; }\n    /**\n     * @param {?} newValue\n     * @return {?}\n     */\n    set value(newValue) {\n        if (newValue !== this._value) {\n            this.writeValue(newValue);\n            this._value = newValue;\n        }\n    }\n    /**\n     * Unique id of the element.\n     * @return {?}\n     */\n    get id() { return this._id; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set id(value) {\n        this._id = value || this._uid;\n        this.stateChanges.next();\n    }\n    /**\n     * @return {?}\n     */\n    ngOnInit() {\n        this._selectionModel = new SelectionModel(this.multiple);\n        this.stateChanges.next();\n        // We need `distinctUntilChanged` here, because some browsers will\n        // fire the animation end event twice for the same animation. See:\n        // https://github.com/angular/angular/issues/24084\n        this._panelDoneAnimatingStream\n            .pipe(distinctUntilChanged(), takeUntil(this._destroy))\n            .subscribe(() => {\n            if (this.panelOpen) {\n                this._scrollTop = 0;\n                this.openedChange.emit(true);\n            }\n            else {\n                this.openedChange.emit(false);\n                this.overlayDir.offsetX = 0;\n                this._changeDetectorRef.markForCheck();\n            }\n        });\n    }\n    /**\n     * @return {?}\n     */\n    ngAfterContentInit() {\n        this._initKeyManager();\n        this._selectionModel.onChange.pipe(takeUntil(this._destroy)).subscribe(event => {\n            event.added.forEach(option => option.select());\n            event.removed.forEach(option => option.deselect());\n        });\n        this.options.changes.pipe(startWith(null), takeUntil(this._destroy)).subscribe(() => {\n            this._resetOptions();\n            this._initializeSelection();\n        });\n    }\n    /**\n     * @return {?}\n     */\n    ngDoCheck() {\n        if (this.ngControl) {\n            this.updateErrorState();\n        }\n    }\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    ngOnChanges(changes) {\n        // Updating the disabled state is handled by `mixinDisabled`, but we need to additionally let\n        // the parent form field know to run change detection when the disabled state changes.\n        if (changes[\"disabled\"]) {\n            this.stateChanges.next();\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this._destroy.next();\n        this._destroy.complete();\n        this.stateChanges.complete();\n    }\n    /**\n     * Toggles the overlay panel open or closed.\n     * @return {?}\n     */\n    toggle() {\n        this.panelOpen ? this.close() : this.open();\n    }\n    /**\n     * Opens the overlay panel.\n     * @return {?}\n     */\n    open() {\n        if (this.disabled || !this.options || !this.options.length || this._panelOpen) {\n            return;\n        }\n        this._triggerRect = this.trigger.nativeElement.getBoundingClientRect();\n        // Note: The computed font-size will be a string pixel value (e.g. \"16px\").\n        // `parseInt` ignores the trailing 'px' and converts this to a number.\n        this._triggerFontSize = parseInt(getComputedStyle(this.trigger.nativeElement).fontSize || '0');\n        this._panelOpen = true;\n        this._keyManager.withHorizontalOrientation(null);\n        this._calculateOverlayPosition();\n        this._highlightCorrectOption();\n        this._changeDetectorRef.markForCheck();\n        // Set the font size on the panel element once it exists.\n        this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n            if (this._triggerFontSize && this.overlayDir.overlayRef &&\n                this.overlayDir.overlayRef.overlayElement) {\n                this.overlayDir.overlayRef.overlayElement.style.fontSize = `${this._triggerFontSize}px`;\n            }\n        });\n    }\n    /**\n     * Closes the overlay panel and focuses the host element.\n     * @return {?}\n     */\n    close() {\n        if (this._panelOpen) {\n            this._panelOpen = false;\n            this._keyManager.withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr');\n            this._changeDetectorRef.markForCheck();\n            this._onTouched();\n        }\n    }\n    /**\n     * Sets the select's value. Part of the ControlValueAccessor interface\n     * required to integrate with Angular's core forms API.\n     *\n     * @param {?} value New value to be written to the model.\n     * @return {?}\n     */\n    writeValue(value) {\n        if (this.options) {\n            this._setSelectionByValue(value);\n        }\n    }\n    /**\n     * Saves a callback function to be invoked when the select's value\n     * changes from user input. Part of the ControlValueAccessor interface\n     * required to integrate with Angular's core forms API.\n     *\n     * @param {?} fn Callback to be triggered when the value changes.\n     * @return {?}\n     */\n    registerOnChange(fn) {\n        this._onChange = fn;\n    }\n    /**\n     * Saves a callback function to be invoked when the select is blurred\n     * by the user. Part of the ControlValueAccessor interface required\n     * to integrate with Angular's core forms API.\n     *\n     * @param {?} fn Callback to be triggered when the component has been touched.\n     * @return {?}\n     */\n    registerOnTouched(fn) {\n        this._onTouched = fn;\n    }\n    /**\n     * Disables the select. Part of the ControlValueAccessor interface required\n     * to integrate with Angular's core forms API.\n     *\n     * @param {?} isDisabled Sets whether the component is disabled.\n     * @return {?}\n     */\n    setDisabledState(isDisabled) {\n        this.disabled = isDisabled;\n        this._changeDetectorRef.markForCheck();\n        this.stateChanges.next();\n    }\n    /**\n     * Whether or not the overlay panel is open.\n     * @return {?}\n     */\n    get panelOpen() {\n        return this._panelOpen;\n    }\n    /**\n     * The currently selected option.\n     * @return {?}\n     */\n    get selected() {\n        return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n    }\n    /**\n     * The value displayed in the trigger.\n     * @return {?}\n     */\n    get triggerValue() {\n        if (this.empty) {\n            return '';\n        }\n        if (this._multiple) {\n            /** @type {?} */\n            const selectedOptions = this._selectionModel.selected.map(option => option.viewValue);\n            if (this._isRtl()) {\n                selectedOptions.reverse();\n            }\n            // TODO(crisbeto): delimiter should be configurable for proper localization.\n            return selectedOptions.join(', ');\n        }\n        return this._selectionModel.selected[0].viewValue;\n    }\n    /**\n     * Whether the element is in RTL mode.\n     * @return {?}\n     */\n    _isRtl() {\n        return this._dir ? this._dir.value === 'rtl' : false;\n    }\n    /**\n     * Handles all keydown events on the select.\n     * @param {?} event\n     * @return {?}\n     */\n    _handleKeydown(event) {\n        if (!this.disabled) {\n            this.panelOpen ? this._handleOpenKeydown(event) : this._handleClosedKeydown(event);\n        }\n    }\n    /**\n     * Handles keyboard events while the select is closed.\n     * @param {?} event\n     * @return {?}\n     */\n    _handleClosedKeydown(event) {\n        /** @type {?} */\n        const keyCode = event.keyCode;\n        /** @type {?} */\n        const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW ||\n            keyCode === LEFT_ARROW || keyCode === RIGHT_ARROW;\n        /** @type {?} */\n        const isOpenKey = keyCode === ENTER || keyCode === SPACE;\n        /** @type {?} */\n        const manager = this._keyManager;\n        // Open the select on ALT + arrow key to match the native <select>\n        if (isOpenKey || ((this.multiple || event.altKey) && isArrowKey)) {\n            event.preventDefault(); // prevents the page from scrolling down when pressing space\n            this.open();\n        }\n        else if (!this.multiple) {\n            if (keyCode === HOME || keyCode === END) {\n                keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n                event.preventDefault();\n            }\n            else {\n                manager.onKeydown(event);\n            }\n        }\n    }\n    /**\n     * Handles keyboard events when the selected is open.\n     * @param {?} event\n     * @return {?}\n     */\n    _handleOpenKeydown(event) {\n        /** @type {?} */\n        const keyCode = event.keyCode;\n        /** @type {?} */\n        const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW;\n        /** @type {?} */\n        const manager = this._keyManager;\n        if (keyCode === HOME || keyCode === END) {\n            event.preventDefault();\n            keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n        }\n        else if (isArrowKey && event.altKey) {\n            // Close the select on ALT + arrow key to match the native <select>\n            event.preventDefault();\n            this.close();\n        }\n        else if ((keyCode === ENTER || keyCode === SPACE) && manager.activeItem) {\n            event.preventDefault();\n            manager.activeItem._selectViaInteraction();\n        }\n        else if (this._multiple && keyCode === A && event.ctrlKey) {\n            event.preventDefault();\n            /** @type {?} */\n            const hasDeselectedOptions = this.options.some(opt => !opt.disabled && !opt.selected);\n            this.options.forEach(option => {\n                if (!option.disabled) {\n                    hasDeselectedOptions ? option.select() : option.deselect();\n                }\n            });\n        }\n        else {\n            /** @type {?} */\n            const previouslyFocusedIndex = manager.activeItemIndex;\n            manager.onKeydown(event);\n            if (this._multiple && isArrowKey && event.shiftKey && manager.activeItem &&\n                manager.activeItemIndex !== previouslyFocusedIndex) {\n                manager.activeItem._selectViaInteraction();\n            }\n        }\n    }\n    /**\n     * @return {?}\n     */\n    _onFocus() {\n        if (!this.disabled) {\n            this._focused = true;\n            this.stateChanges.next();\n        }\n    }\n    /**\n     * Calls the touched callback only if the panel is closed. Otherwise, the trigger will\n     * \"blur\" to the panel when it opens, causing a false positive.\n     * @return {?}\n     */\n    _onBlur() {\n        this._focused = false;\n        if (!this.disabled && !this.panelOpen) {\n            this._onTouched();\n            this._changeDetectorRef.markForCheck();\n            this.stateChanges.next();\n        }\n    }\n    /**\n     * Callback that is invoked when the overlay panel has been attached.\n     * @return {?}\n     */\n    _onAttached() {\n        this.overlayDir.positionChange.pipe(take(1)).subscribe(() => {\n            this._setPseudoCheckboxPaddingSize();\n            this._changeDetectorRef.detectChanges();\n            this._calculateOverlayOffsetX();\n            this.panel.nativeElement.scrollTop = this._scrollTop;\n        });\n    }\n    /**\n     * Returns the theme to be used on the panel.\n     * @return {?}\n     */\n    _getPanelTheme() {\n        return this._parentFormField ? `mat-${this._parentFormField.color}` : '';\n    }\n    /**\n     * Sets the pseudo checkbox padding size based on the width of the pseudo checkbox.\n     * @return {?}\n     */\n    _setPseudoCheckboxPaddingSize() {\n        if (!SELECT_MULTIPLE_PANEL_PADDING_X && this.multiple) {\n            /** @type {?} */\n            const pseudoCheckbox = this.panel.nativeElement.querySelector('.mat-pseudo-checkbox');\n            if (pseudoCheckbox) {\n                SELECT_MULTIPLE_PANEL_PADDING_X = SELECT_PANEL_PADDING_X * 1.5 + pseudoCheckbox.offsetWidth;\n            }\n        }\n    }\n    /**\n     * Whether the select has a value.\n     * @return {?}\n     */\n    get empty() {\n        return !this._selectionModel || this._selectionModel.isEmpty();\n    }\n    /**\n     * @return {?}\n     */\n    _initializeSelection() {\n        // Defer setting the value in order to avoid the \"Expression\n        // has changed after it was checked\" errors from Angular.\n        Promise.resolve().then(() => {\n            this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value);\n        });\n    }\n    /**\n     * Sets the selected option based on a value. If no option can be\n     * found with the designated value, the select trigger is cleared.\n     * @param {?} value\n     * @return {?}\n     */\n    _setSelectionByValue(value) {\n        if (this.multiple && value) {\n            if (!Array.isArray(value)) {\n                throw getMatSelectNonArrayValueError();\n            }\n            this._selectionModel.clear();\n            value.forEach((currentValue) => this._selectValue(currentValue));\n            this._sortValues();\n        }\n        else {\n            this._selectionModel.clear();\n            /** @type {?} */\n            const correspondingOption = this._selectValue(value);\n            // Shift focus to the active item. Note that we shouldn't do this in multiple\n            // mode, because we don't know what option the user interacted with last.\n            if (correspondingOption) {\n                this._keyManager.setActiveItem(correspondingOption);\n            }\n        }\n        this._changeDetectorRef.markForCheck();\n    }\n    /**\n     * Finds and selects and option based on its value.\n     * @param {?} value\n     * @return {?} Option that has the corresponding value.\n     */\n    _selectValue(value) {\n        /** @type {?} */\n        const correspondingOption = this.options.find((option) => {\n            try {\n                // Treat null as a special reset value.\n                return option.value != null && this._compareWith(option.value, value);\n            }\n            catch (error) {\n                if (isDevMode()) {\n                    // Notify developers of errors in their comparator.\n                    console.warn(error);\n                }\n                return false;\n            }\n        });\n        if (correspondingOption) {\n            this._selectionModel.select(correspondingOption);\n        }\n        return correspondingOption;\n    }\n    /**\n     * Sets up a key manager to listen to keyboard events on the overlay panel.\n     * @return {?}\n     */\n    _initKeyManager() {\n        this._keyManager = new ActiveDescendantKeyManager(this.options)\n            .withTypeAhead()\n            .withVerticalOrientation()\n            .withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr');\n        this._keyManager.tabOut.pipe(takeUntil(this._destroy)).subscribe(() => {\n            // Restore focus to the trigger before closing. Ensures that the focus\n            // position won't be lost if the user got focus into the overlay.\n            this.focus();\n            this.close();\n        });\n        this._keyManager.change.pipe(takeUntil(this._destroy)).subscribe(() => {\n            if (this._panelOpen && this.panel) {\n                this._scrollActiveOptionIntoView();\n            }\n            else if (!this._panelOpen && !this.multiple && this._keyManager.activeItem) {\n                this._keyManager.activeItem._selectViaInteraction();\n            }\n        });\n    }\n    /**\n     * Drops current option subscriptions and IDs and resets from scratch.\n     * @return {?}\n     */\n    _resetOptions() {\n        /** @type {?} */\n        const changedOrDestroyed = merge(this.options.changes, this._destroy);\n        this.optionSelectionChanges.pipe(takeUntil(changedOrDestroyed)).subscribe(event => {\n            this._onSelect(event.source, event.isUserInput);\n            if (event.isUserInput && !this.multiple && this._panelOpen) {\n                this.close();\n                this.focus();\n            }\n        });\n        // Listen to changes in the internal state of the options and react accordingly.\n        // Handles cases like the labels of the selected options changing.\n        merge(...this.options.map(option => option._stateChanges))\n            .pipe(takeUntil(changedOrDestroyed))\n            .subscribe(() => {\n            this._changeDetectorRef.markForCheck();\n            this.stateChanges.next();\n        });\n        this._setOptionIds();\n    }\n    /**\n     * Invoked when an option is clicked.\n     * @param {?} option\n     * @param {?} isUserInput\n     * @return {?}\n     */\n    _onSelect(option, isUserInput) {\n        /** @type {?} */\n        const wasSelected = this._selectionModel.isSelected(option);\n        if (option.value == null && !this._multiple) {\n            option.deselect();\n            this._selectionModel.clear();\n            this._propagateChanges(option.value);\n        }\n        else {\n            option.selected ? this._selectionModel.select(option) : this._selectionModel.deselect(option);\n            if (isUserInput) {\n                this._keyManager.setActiveItem(option);\n            }\n            if (this.multiple) {\n                this._sortValues();\n                if (isUserInput) {\n                    // In case the user selected the option with their mouse, we\n                    // want to restore focus back to the trigger, in order to\n                    // prevent the select keyboard controls from clashing with\n                    // the ones from `mat-option`.\n                    this.focus();\n                }\n            }\n        }\n        if (wasSelected !== this._selectionModel.isSelected(option)) {\n            this._propagateChanges();\n        }\n        this.stateChanges.next();\n    }\n    /**\n     * Sorts the selected values in the selected based on their order in the panel.\n     * @return {?}\n     */\n    _sortValues() {\n        if (this.multiple) {\n            /** @type {?} */\n            const options = this.options.toArray();\n            this._selectionModel.sort((a, b) => {\n                return this.sortComparator ? this.sortComparator(a, b, options) :\n                    options.indexOf(a) - options.indexOf(b);\n            });\n            this.stateChanges.next();\n        }\n    }\n    /**\n     * Emits change event to set the model value.\n     * @param {?=} fallbackValue\n     * @return {?}\n     */\n    _propagateChanges(fallbackValue) {\n        /** @type {?} */\n        let valueToEmit = null;\n        if (this.multiple) {\n            valueToEmit = (/** @type {?} */ (this.selected)).map(option => option.value);\n        }\n        else {\n            valueToEmit = this.selected ? (/** @type {?} */ (this.selected)).value : fallbackValue;\n        }\n        this._value = valueToEmit;\n        this.valueChange.emit(valueToEmit);\n        this._onChange(valueToEmit);\n        this.selectionChange.emit(new MatSelectChange(this, valueToEmit));\n        this._changeDetectorRef.markForCheck();\n    }\n    /**\n     * Records option IDs to pass to the aria-owns property.\n     * @return {?}\n     */\n    _setOptionIds() {\n        this._optionIds = this.options.map(option => option.id).join(' ');\n    }\n    /**\n     * Highlights the selected item. If no option is selected, it will highlight\n     * the first item instead.\n     * @return {?}\n     */\n    _highlightCorrectOption() {\n        if (this._keyManager) {\n            if (this.empty) {\n                this._keyManager.setFirstItemActive();\n            }\n            else {\n                this._keyManager.setActiveItem(this._selectionModel.selected[0]);\n            }\n        }\n    }\n    /**\n     * Scrolls the active option into view.\n     * @return {?}\n     */\n    _scrollActiveOptionIntoView() {\n        /** @type {?} */\n        const activeOptionIndex = this._keyManager.activeItemIndex || 0;\n        /** @type {?} */\n        const labelCount = _countGroupLabelsBeforeOption(activeOptionIndex, this.options, this.optionGroups);\n        this.panel.nativeElement.scrollTop = _getOptionScrollPosition(activeOptionIndex + labelCount, this._getItemHeight(), this.panel.nativeElement.scrollTop, SELECT_PANEL_MAX_HEIGHT);\n    }\n    /**\n     * Focuses the select element.\n     * @return {?}\n     */\n    focus() {\n        this._elementRef.nativeElement.focus();\n    }\n    /**\n     * Gets the index of the provided option in the option list.\n     * @param {?} option\n     * @return {?}\n     */\n    _getOptionIndex(option) {\n        return this.options.reduce((result, current, index) => {\n            return result === undefined ? (option === current ? index : undefined) : result;\n        }, undefined);\n    }\n    /**\n     * Calculates the scroll position and x- and y-offsets of the overlay panel.\n     * @return {?}\n     */\n    _calculateOverlayPosition() {\n        /** @type {?} */\n        const itemHeight = this._getItemHeight();\n        /** @type {?} */\n        const items = this._getItemCount();\n        /** @type {?} */\n        const panelHeight = Math.min(items * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n        /** @type {?} */\n        const scrollContainerHeight = items * itemHeight;\n        /** @type {?} */\n        const maxScroll = scrollContainerHeight - panelHeight;\n        /** @type {?} */\n        let selectedOptionOffset = this.empty ? 0 : /** @type {?} */ ((this._getOptionIndex(this._selectionModel.selected[0])));\n        selectedOptionOffset += _countGroupLabelsBeforeOption(selectedOptionOffset, this.options, this.optionGroups);\n        /** @type {?} */\n        const scrollBuffer = panelHeight / 2;\n        this._scrollTop = this._calculateOverlayScroll(selectedOptionOffset, scrollBuffer, maxScroll);\n        this._offsetY = this._calculateOverlayOffsetY(selectedOptionOffset, scrollBuffer, maxScroll);\n        this._checkOverlayWithinViewport(maxScroll);\n    }\n    /**\n     * Calculates the scroll position of the select's overlay panel.\n     *\n     * Attempts to center the selected option in the panel. If the option is\n     * too high or too low in the panel to be scrolled to the center, it clamps the\n     * scroll position to the min or max scroll positions respectively.\n     * @param {?} selectedIndex\n     * @param {?} scrollBuffer\n     * @param {?} maxScroll\n     * @return {?}\n     */\n    _calculateOverlayScroll(selectedIndex, scrollBuffer, maxScroll) {\n        /** @type {?} */\n        const itemHeight = this._getItemHeight();\n        /** @type {?} */\n        const optionOffsetFromScrollTop = itemHeight * selectedIndex;\n        /** @type {?} */\n        const halfOptionHeight = itemHeight / 2;\n        /** @type {?} */\n        const optimalScrollPosition = optionOffsetFromScrollTop - scrollBuffer + halfOptionHeight;\n        return Math.min(Math.max(0, optimalScrollPosition), maxScroll);\n    }\n    /**\n     * Returns the aria-label of the select component.\n     * @return {?}\n     */\n    _getAriaLabel() {\n        // If an ariaLabelledby value has been set by the consumer, the select should not overwrite the\n        // `aria-labelledby` value by setting the ariaLabel to the placeholder.\n        return this.ariaLabelledby ? null : this.ariaLabel || this.placeholder;\n    }\n    /**\n     * Returns the aria-labelledby of the select component.\n     * @return {?}\n     */\n    _getAriaLabelledby() {\n        if (this.ariaLabelledby) {\n            return this.ariaLabelledby;\n        }\n        // Note: we use `_getAriaLabel` here, because we want to check whether there's a\n        // computed label. `this.ariaLabel` is only the user-specified label.\n        if (!this._parentFormField || !this._parentFormField._hasFloatingLabel() ||\n            this._getAriaLabel()) {\n            return null;\n        }\n        return this._parentFormField._labelId || null;\n    }\n    /**\n     * Determines the `aria-activedescendant` to be set on the host.\n     * @return {?}\n     */\n    _getAriaActiveDescendant() {\n        if (this.panelOpen && this._keyManager && this._keyManager.activeItem) {\n            return this._keyManager.activeItem.id;\n        }\n        return null;\n    }\n    /**\n     * Sets the x-offset of the overlay panel in relation to the trigger's top start corner.\n     * This must be adjusted to align the selected option text over the trigger text when\n     * the panel opens. Will change based on LTR or RTL text direction. Note that the offset\n     * can't be calculated until the panel has been attached, because we need to know the\n     * content width in order to constrain the panel within the viewport.\n     * @return {?}\n     */\n    _calculateOverlayOffsetX() {\n        /** @type {?} */\n        const overlayRect = this.overlayDir.overlayRef.overlayElement.getBoundingClientRect();\n        /** @type {?} */\n        const viewportSize = this._viewportRuler.getViewportSize();\n        /** @type {?} */\n        const isRtl = this._isRtl();\n        /** @type {?} */\n        const paddingWidth = this.multiple ? SELECT_MULTIPLE_PANEL_PADDING_X + SELECT_PANEL_PADDING_X :\n            SELECT_PANEL_PADDING_X * 2;\n        /** @type {?} */\n        let offsetX;\n        // Adjust the offset, depending on the option padding.\n        if (this.multiple) {\n            offsetX = SELECT_MULTIPLE_PANEL_PADDING_X;\n        }\n        else {\n            /** @type {?} */\n            let selected = this._selectionModel.selected[0] || this.options.first;\n            offsetX = selected && selected.group ? SELECT_PANEL_INDENT_PADDING_X : SELECT_PANEL_PADDING_X;\n        }\n        // Invert the offset in LTR.\n        if (!isRtl) {\n            offsetX *= -1;\n        }\n        /** @type {?} */\n        const leftOverflow = 0 - (overlayRect.left + offsetX - (isRtl ? paddingWidth : 0));\n        /** @type {?} */\n        const rightOverflow = overlayRect.right + offsetX - viewportSize.width\n            + (isRtl ? 0 : paddingWidth);\n        // If the element overflows on either side, reduce the offset to allow it to fit.\n        if (leftOverflow > 0) {\n            offsetX += leftOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n        }\n        else if (rightOverflow > 0) {\n            offsetX -= rightOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n        }\n        // Set the offset directly in order to avoid having to go through change detection and\n        // potentially triggering \"changed after it was checked\" errors. Round the value to avoid\n        // blurry content in some browsers.\n        this.overlayDir.offsetX = Math.round(offsetX);\n        this.overlayDir.overlayRef.updatePosition();\n    }\n    /**\n     * Calculates the y-offset of the select's overlay panel in relation to the\n     * top start corner of the trigger. It has to be adjusted in order for the\n     * selected option to be aligned over the trigger when the panel opens.\n     * @param {?} selectedIndex\n     * @param {?} scrollBuffer\n     * @param {?} maxScroll\n     * @return {?}\n     */\n    _calculateOverlayOffsetY(selectedIndex, scrollBuffer, maxScroll) {\n        /** @type {?} */\n        const itemHeight = this._getItemHeight();\n        /** @type {?} */\n        const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n        /** @type {?} */\n        const maxOptionsDisplayed = Math.floor(SELECT_PANEL_MAX_HEIGHT / itemHeight);\n        /** @type {?} */\n        let optionOffsetFromPanelTop;\n        // Disable offset if requested by user by returning 0 as value to offset\n        if (this._disableOptionCentering) {\n            return 0;\n        }\n        if (this._scrollTop === 0) {\n            optionOffsetFromPanelTop = selectedIndex * itemHeight;\n        }\n        else if (this._scrollTop === maxScroll) {\n            /** @type {?} */\n            const firstDisplayedIndex = this._getItemCount() - maxOptionsDisplayed;\n            /** @type {?} */\n            const selectedDisplayIndex = selectedIndex - firstDisplayedIndex;\n            /** @type {?} */\n            let partialItemHeight = itemHeight - (this._getItemCount() * itemHeight - SELECT_PANEL_MAX_HEIGHT) % itemHeight;\n            // Because the panel height is longer than the height of the options alone,\n            // there is always extra padding at the top or bottom of the panel. When\n            // scrolled to the very bottom, this padding is at the top of the panel and\n            // must be added to the offset.\n            optionOffsetFromPanelTop = selectedDisplayIndex * itemHeight + partialItemHeight;\n        }\n        else {\n            // If the option was scrolled to the middle of the panel using a scroll buffer,\n            // its offset will be the scroll buffer minus the half height that was added to\n            // center it.\n            optionOffsetFromPanelTop = scrollBuffer - itemHeight / 2;\n        }\n        // The final offset is the option's offset from the top, adjusted for the height difference,\n        // multiplied by -1 to ensure that the overlay moves in the correct direction up the page.\n        // The value is rounded to prevent some browsers from blurring the content.\n        return Math.round(optionOffsetFromPanelTop * -1 - optionHeightAdjustment);\n    }\n    /**\n     * Checks that the attempted overlay position will fit within the viewport.\n     * If it will not fit, tries to adjust the scroll position and the associated\n     * y-offset so the panel can open fully on-screen. If it still won't fit,\n     * sets the offset back to 0 to allow the fallback position to take over.\n     * @param {?} maxScroll\n     * @return {?}\n     */\n    _checkOverlayWithinViewport(maxScroll) {\n        /** @type {?} */\n        const itemHeight = this._getItemHeight();\n        /** @type {?} */\n        const viewportSize = this._viewportRuler.getViewportSize();\n        /** @type {?} */\n        const topSpaceAvailable = this._triggerRect.top - SELECT_PANEL_VIEWPORT_PADDING;\n        /** @type {?} */\n        const bottomSpaceAvailable = viewportSize.height - this._triggerRect.bottom - SELECT_PANEL_VIEWPORT_PADDING;\n        /** @type {?} */\n        const panelHeightTop = Math.abs(this._offsetY);\n        /** @type {?} */\n        const totalPanelHeight = Math.min(this._getItemCount() * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n        /** @type {?} */\n        const panelHeightBottom = totalPanelHeight - panelHeightTop - this._triggerRect.height;\n        if (panelHeightBottom > bottomSpaceAvailable) {\n            this._adjustPanelUp(panelHeightBottom, bottomSpaceAvailable);\n        }\n        else if (panelHeightTop > topSpaceAvailable) {\n            this._adjustPanelDown(panelHeightTop, topSpaceAvailable, maxScroll);\n        }\n        else {\n            this._transformOrigin = this._getOriginBasedOnOption();\n        }\n    }\n    /**\n     * Adjusts the overlay panel up to fit in the viewport.\n     * @param {?} panelHeightBottom\n     * @param {?} bottomSpaceAvailable\n     * @return {?}\n     */\n    _adjustPanelUp(panelHeightBottom, bottomSpaceAvailable) {\n        /** @type {?} */\n        const distanceBelowViewport = Math.round(panelHeightBottom - bottomSpaceAvailable);\n        // Scrolls the panel up by the distance it was extending past the boundary, then\n        // adjusts the offset by that amount to move the panel up into the viewport.\n        this._scrollTop -= distanceBelowViewport;\n        this._offsetY -= distanceBelowViewport;\n        this._transformOrigin = this._getOriginBasedOnOption();\n        // If the panel is scrolled to the very top, it won't be able to fit the panel\n        // by scrolling, so set the offset to 0 to allow the fallback position to take\n        // effect.\n        if (this._scrollTop <= 0) {\n            this._scrollTop = 0;\n            this._offsetY = 0;\n            this._transformOrigin = `50% bottom 0px`;\n        }\n    }\n    /**\n     * Adjusts the overlay panel down to fit in the viewport.\n     * @param {?} panelHeightTop\n     * @param {?} topSpaceAvailable\n     * @param {?} maxScroll\n     * @return {?}\n     */\n    _adjustPanelDown(panelHeightTop, topSpaceAvailable, maxScroll) {\n        /** @type {?} */\n        const distanceAboveViewport = Math.round(panelHeightTop - topSpaceAvailable);\n        // Scrolls the panel down by the distance it was extending past the boundary, then\n        // adjusts the offset by that amount to move the panel down into the viewport.\n        this._scrollTop += distanceAboveViewport;\n        this._offsetY += distanceAboveViewport;\n        this._transformOrigin = this._getOriginBasedOnOption();\n        // If the panel is scrolled to the very bottom, it won't be able to fit the\n        // panel by scrolling, so set the offset to 0 to allow the fallback position\n        // to take effect.\n        if (this._scrollTop >= maxScroll) {\n            this._scrollTop = maxScroll;\n            this._offsetY = 0;\n            this._transformOrigin = `50% top 0px`;\n            return;\n        }\n    }\n    /**\n     * Sets the transform origin point based on the selected option.\n     * @return {?}\n     */\n    _getOriginBasedOnOption() {\n        /** @type {?} */\n        const itemHeight = this._getItemHeight();\n        /** @type {?} */\n        const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n        /** @type {?} */\n        const originY = Math.abs(this._offsetY) - optionHeightAdjustment + itemHeight / 2;\n        return `50% ${originY}px 0px`;\n    }\n    /**\n     * Calculates the amount of items in the select. This includes options and group labels.\n     * @return {?}\n     */\n    _getItemCount() {\n        return this.options.length + this.optionGroups.length;\n    }\n    /**\n     * Calculates the height of the select's options.\n     * @return {?}\n     */\n    _getItemHeight() {\n        return this._triggerFontSize * SELECT_ITEM_HEIGHT_EM;\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * \\@docs-private\n     * @param {?} ids\n     * @return {?}\n     */\n    setDescribedByIds(ids) {\n        this._ariaDescribedby = ids.join(' ');\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * \\@docs-private\n     * @return {?}\n     */\n    onContainerClick() {\n        this.focus();\n        this.open();\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * \\@docs-private\n     * @return {?}\n     */\n    get shouldLabelFloat() {\n        return this._panelOpen || !this.empty;\n    }\n}\nMatSelect.ɵfac = function MatSelect_Factory(t) { return new (t || MatSelect)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.ViewportRuler), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.ErrorStateMatcher), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.Directionality, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc4.NgForm, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc4.FormGroupDirective, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc5.MatFormField, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc4.NgControl, 10), ɵngcc0.ɵɵinjectAttribute('tabindex'), ɵngcc0.ɵɵdirectiveInject(MAT_SELECT_SCROLL_STRATEGY)); };\nMatSelect.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: MatSelect, selectors: [[\"mat-select\"]], contentQueries: function MatSelect_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MatSelectTrigger, 5);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MatOption, 5);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MatOptgroup, 4);\n    } if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.customTrigger = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.options = _t);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.optionGroups = _t);\n    } }, viewQuery: function MatSelect_Query(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(_c0, 5);\n        ɵngcc0.ɵɵviewQuery(_c1, 5);\n        ɵngcc0.ɵɵviewQuery(CdkConnectedOverlay, 5);\n    } if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.trigger = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.panel = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.overlayDir = _t.first);\n    } }, hostAttrs: [\"role\", \"listbox\", 1, \"mat-select\"], hostVars: 19, hostBindings: function MatSelect_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"keydown\", function MatSelect_keydown_HostBindingHandler($event) { return ctx._handleKeydown($event); })(\"focus\", function MatSelect_focus_HostBindingHandler() { return ctx._onFocus(); })(\"blur\", function MatSelect_blur_HostBindingHandler() { return ctx._onBlur(); });\n    } if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"id\", ctx.id)(\"tabindex\", ctx.tabIndex)(\"aria-label\", ctx._getAriaLabel())(\"aria-labelledby\", ctx._getAriaLabelledby())(\"aria-required\", ctx.required.toString())(\"aria-disabled\", ctx.disabled.toString())(\"aria-invalid\", ctx.errorState)(\"aria-owns\", ctx.panelOpen ? ctx._optionIds : null)(\"aria-multiselectable\", ctx.multiple)(\"aria-describedby\", ctx._ariaDescribedby || null)(\"aria-activedescendant\", ctx._getAriaActiveDescendant());\n        ɵngcc0.ɵɵclassProp(\"mat-select-disabled\", ctx.disabled)(\"mat-select-invalid\", ctx.errorState)(\"mat-select-required\", ctx.required)(\"mat-select-empty\", ctx.empty);\n    } }, inputs: { disabled: \"disabled\", disableRipple: \"disableRipple\", tabIndex: \"tabIndex\", ariaLabel: [\"aria-label\", \"ariaLabel\"], id: \"id\", placeholder: \"placeholder\", required: \"required\", multiple: \"multiple\", disableOptionCentering: \"disableOptionCentering\", compareWith: \"compareWith\", value: \"value\", panelClass: \"panelClass\", ariaLabelledby: [\"aria-labelledby\", \"ariaLabelledby\"], errorStateMatcher: \"errorStateMatcher\", sortComparator: \"sortComparator\" }, outputs: { openedChange: \"openedChange\", _openedStream: \"opened\", _closedStream: \"closed\", selectionChange: \"selectionChange\", valueChange: \"valueChange\" }, exportAs: [\"matSelect\"], features: [ɵngcc0.ɵɵProvidersFeature([\n            { provide: MatFormFieldControl, useExisting: MatSelect },\n            { provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatSelect }\n        ]), ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature], ngContentSelectors: _c3, decls: 9, vars: 9, consts: [[\"cdk-overlay-origin\", \"\", \"aria-hidden\", \"true\", 1, \"mat-select-trigger\", 3, \"click\"], [\"origin\", \"cdkOverlayOrigin\", \"trigger\", \"\"], [1, \"mat-select-value\", 3, \"ngSwitch\"], [\"class\", \"mat-select-placeholder\", 4, \"ngSwitchCase\"], [\"class\", \"mat-select-value-text\", 3, \"ngSwitch\", 4, \"ngSwitchCase\"], [1, \"mat-select-arrow-wrapper\"], [1, \"mat-select-arrow\"], [\"cdk-connected-overlay\", \"\", \"cdkConnectedOverlayLockPosition\", \"\", \"cdkConnectedOverlayHasBackdrop\", \"\", \"cdkConnectedOverlayBackdropClass\", \"cdk-overlay-transparent-backdrop\", 3, \"cdkConnectedOverlayScrollStrategy\", \"cdkConnectedOverlayOrigin\", \"cdkConnectedOverlayOpen\", \"cdkConnectedOverlayPositions\", \"cdkConnectedOverlayMinWidth\", \"cdkConnectedOverlayOffsetY\", \"backdropClick\", \"attach\", \"detach\"], [1, \"mat-select-placeholder\"], [1, \"mat-select-value-text\", 3, \"ngSwitch\"], [4, \"ngSwitchDefault\"], [4, \"ngSwitchCase\"], [3, \"ngClass\", \"keydown\"], [\"panel\", \"\"]], template: function MatSelect_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef(_c2);\n        ɵngcc0.ɵɵelementStart(0, \"div\", 0, 1);\n        ɵngcc0.ɵɵlistener(\"click\", function MatSelect_Template_div_click_0_listener() { return ctx.toggle(); });\n        ɵngcc0.ɵɵelementStart(3, \"div\", 2);\n        ɵngcc0.ɵɵtemplate(4, MatSelect_span_4_Template, 2, 1, \"span\", 3);\n        ɵngcc0.ɵɵtemplate(5, MatSelect_span_5_Template, 3, 2, \"span\", 4);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementStart(6, \"div\", 5);\n        ɵngcc0.ɵɵelement(7, \"div\", 6);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵtemplate(8, MatSelect_ng_template_8_Template, 3, 9, \"ng-template\", 7);\n        ɵngcc0.ɵɵlistener(\"backdropClick\", function MatSelect_Template_ng_template_backdropClick_8_listener() { return ctx.close(); })(\"attach\", function MatSelect_Template_ng_template_attach_8_listener() { return ctx._onAttached(); })(\"detach\", function MatSelect_Template_ng_template_detach_8_listener() { return ctx.close(); });\n    } if (rf & 2) {\n        const _r0 = ɵngcc0.ɵɵreference(1);\n        ɵngcc0.ɵɵadvance(3);\n        ɵngcc0.ɵɵproperty(\"ngSwitch\", ctx.empty);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngSwitchCase\", true);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngSwitchCase\", false);\n        ɵngcc0.ɵɵadvance(3);\n        ɵngcc0.ɵɵproperty(\"cdkConnectedOverlayScrollStrategy\", ctx._scrollStrategy)(\"cdkConnectedOverlayOrigin\", _r0)(\"cdkConnectedOverlayOpen\", ctx.panelOpen)(\"cdkConnectedOverlayPositions\", ctx._positions)(\"cdkConnectedOverlayMinWidth\", ctx._triggerRect == null ? null : ctx._triggerRect.width)(\"cdkConnectedOverlayOffsetY\", ctx._offsetY);\n    } }, directives: [ɵngcc6.CdkOverlayOrigin, ɵngcc7.NgSwitch, ɵngcc7.NgSwitchCase, ɵngcc6.CdkConnectedOverlay, ɵngcc7.NgSwitchDefault, ɵngcc7.NgClass], styles: [\".mat-select{display:inline-block;width:100%;outline:0}.mat-select-trigger{display:inline-table;cursor:pointer;position:relative;box-sizing:border-box}.mat-select-disabled .mat-select-trigger{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:default}.mat-select-value{display:table-cell;max-width:0;width:100%;overflow:hidden;text-overflow:ellipsis;white-space:nowrap}.mat-select-value-text{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.mat-select-arrow-wrapper{display:table-cell;vertical-align:middle}.mat-form-field-appearance-fill .mat-select-arrow-wrapper{transform:translateY(-50%)}.mat-form-field-appearance-outline .mat-select-arrow-wrapper{transform:translateY(-25%)}.mat-form-field-appearance-standard .mat-select:not(.mat-select-empty) .mat-select-arrow-wrapper{transform:translateY(-50%)}.mat-form-field-appearance-standard .mat-select.mat-select-empty .mat-select-arrow-wrapper{transition:transform .4s cubic-bezier(.25,.8,.25,1)}._mat-animation-noopable.mat-form-field-appearance-standard .mat-select.mat-select-empty .mat-select-arrow-wrapper{transition:none}.mat-select-arrow{width:0;height:0;border-left:5px solid transparent;border-right:5px solid transparent;border-top:5px solid;margin:0 4px}.mat-select-panel{min-width:112px;max-width:280px;overflow:auto;-webkit-overflow-scrolling:touch;padding-top:0;padding-bottom:0;max-height:256px;min-width:100%;border-radius:4px}@media screen and (-ms-high-contrast:active){.mat-select-panel{outline:solid 1px}}.mat-select-panel .mat-optgroup-label,.mat-select-panel .mat-option{font-size:inherit;line-height:3em;height:3em}.mat-form-field-type-mat-select:not(.mat-form-field-disabled) .mat-form-field-flex{cursor:pointer}.mat-form-field-type-mat-select .mat-form-field-label{width:calc(100% - 18px)}.mat-select-placeholder{transition:color .4s .133s cubic-bezier(.25,.8,.25,1)}._mat-animation-noopable .mat-select-placeholder{transition:none}.mat-form-field-hide-placeholder .mat-select-placeholder{color:transparent;-webkit-text-fill-color:transparent;transition:none;display:block}\"], encapsulation: 2, data: { animation: [\n            matSelectAnimations.transformPanel\n        ] }, changeDetection: 0 });\n/** @nocollapse */\nMatSelect.ctorParameters = () => [\n    { type: ViewportRuler },\n    { type: ChangeDetectorRef },\n    { type: NgZone },\n    { type: ErrorStateMatcher },\n    { type: ElementRef },\n    { type: Directionality, decorators: [{ type: Optional }] },\n    { type: NgForm, decorators: [{ type: Optional }] },\n    { type: FormGroupDirective, decorators: [{ type: Optional }] },\n    { type: MatFormField, decorators: [{ type: Optional }] },\n    { type: NgControl, decorators: [{ type: Self }, { type: Optional }] },\n    { type: String, decorators: [{ type: Attribute, args: ['tabindex',] }] },\n    { type: undefined, decorators: [{ type: Inject, args: [MAT_SELECT_SCROLL_STRATEGY,] }] }\n];\nMatSelect.propDecorators = {\n    trigger: [{ type: ViewChild, args: ['trigger',] }],\n    panel: [{ type: ViewChild, args: ['panel',] }],\n    overlayDir: [{ type: ViewChild, args: [CdkConnectedOverlay,] }],\n    options: [{ type: ContentChildren, args: [MatOption, { descendants: true },] }],\n    optionGroups: [{ type: ContentChildren, args: [MatOptgroup,] }],\n    panelClass: [{ type: Input }],\n    customTrigger: [{ type: ContentChild, args: [MatSelectTrigger,] }],\n    placeholder: [{ type: Input }],\n    required: [{ type: Input }],\n    multiple: [{ type: Input }],\n    disableOptionCentering: [{ type: Input }],\n    compareWith: [{ type: Input }],\n    value: [{ type: Input }],\n    ariaLabel: [{ type: Input, args: ['aria-label',] }],\n    ariaLabelledby: [{ type: Input, args: ['aria-labelledby',] }],\n    errorStateMatcher: [{ type: Input }],\n    sortComparator: [{ type: Input }],\n    id: [{ type: Input }],\n    openedChange: [{ type: Output }],\n    _openedStream: [{ type: Output, args: ['opened',] }],\n    _closedStream: [{ type: Output, args: ['closed',] }],\n    selectionChange: [{ type: Output }],\n    valueChange: [{ type: Output }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatSelect, [{\n        type: Component,\n        args: [{ selector: 'mat-select',\n                exportAs: 'matSelect',\n                template: \"<div cdk-overlay-origin class=\\\"mat-select-trigger\\\" aria-hidden=\\\"true\\\" (click)=\\\"toggle()\\\" #origin=\\\"cdkOverlayOrigin\\\" #trigger><div class=\\\"mat-select-value\\\" [ngSwitch]=\\\"empty\\\"><span class=\\\"mat-select-placeholder\\\" *ngSwitchCase=\\\"true\\\">{{placeholder || '\\u00A0'}}</span> <span class=\\\"mat-select-value-text\\\" *ngSwitchCase=\\\"false\\\" [ngSwitch]=\\\"!!customTrigger\\\"><span *ngSwitchDefault>{{triggerValue || '\\u00A0'}}</span><ng-content select=\\\"mat-select-trigger\\\" *ngSwitchCase=\\\"true\\\"></ng-content></span></div><div class=\\\"mat-select-arrow-wrapper\\\"><div class=\\\"mat-select-arrow\\\"></div></div></div><ng-template cdk-connected-overlay cdkConnectedOverlayLockPosition cdkConnectedOverlayHasBackdrop cdkConnectedOverlayBackdropClass=\\\"cdk-overlay-transparent-backdrop\\\" [cdkConnectedOverlayScrollStrategy]=\\\"_scrollStrategy\\\" [cdkConnectedOverlayOrigin]=\\\"origin\\\" [cdkConnectedOverlayOpen]=\\\"panelOpen\\\" [cdkConnectedOverlayPositions]=\\\"_positions\\\" [cdkConnectedOverlayMinWidth]=\\\"_triggerRect?.width\\\" [cdkConnectedOverlayOffsetY]=\\\"_offsetY\\\" (backdropClick)=\\\"close()\\\" (attach)=\\\"_onAttached()\\\" (detach)=\\\"close()\\\"><div #panel class=\\\"mat-select-panel {{ _getPanelTheme() }}\\\" [ngClass]=\\\"panelClass\\\" [@transformPanel]=\\\"multiple ? 'showing-multiple' : 'showing'\\\" (@transformPanel.done)=\\\"_panelDoneAnimatingStream.next($event.toState)\\\" [style.transformOrigin]=\\\"_transformOrigin\\\" [style.font-size.px]=\\\"_triggerFontSize\\\" (keydown)=\\\"_handleKeydown($event)\\\"><ng-content></ng-content></div></ng-template>\",\n                styles: [\".mat-select{display:inline-block;width:100%;outline:0}.mat-select-trigger{display:inline-table;cursor:pointer;position:relative;box-sizing:border-box}.mat-select-disabled .mat-select-trigger{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:default}.mat-select-value{display:table-cell;max-width:0;width:100%;overflow:hidden;text-overflow:ellipsis;white-space:nowrap}.mat-select-value-text{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.mat-select-arrow-wrapper{display:table-cell;vertical-align:middle}.mat-form-field-appearance-fill .mat-select-arrow-wrapper{transform:translateY(-50%)}.mat-form-field-appearance-outline .mat-select-arrow-wrapper{transform:translateY(-25%)}.mat-form-field-appearance-standard .mat-select:not(.mat-select-empty) .mat-select-arrow-wrapper{transform:translateY(-50%)}.mat-form-field-appearance-standard .mat-select.mat-select-empty .mat-select-arrow-wrapper{transition:transform .4s cubic-bezier(.25,.8,.25,1)}._mat-animation-noopable.mat-form-field-appearance-standard .mat-select.mat-select-empty .mat-select-arrow-wrapper{transition:none}.mat-select-arrow{width:0;height:0;border-left:5px solid transparent;border-right:5px solid transparent;border-top:5px solid;margin:0 4px}.mat-select-panel{min-width:112px;max-width:280px;overflow:auto;-webkit-overflow-scrolling:touch;padding-top:0;padding-bottom:0;max-height:256px;min-width:100%;border-radius:4px}@media screen and (-ms-high-contrast:active){.mat-select-panel{outline:solid 1px}}.mat-select-panel .mat-optgroup-label,.mat-select-panel .mat-option{font-size:inherit;line-height:3em;height:3em}.mat-form-field-type-mat-select:not(.mat-form-field-disabled) .mat-form-field-flex{cursor:pointer}.mat-form-field-type-mat-select .mat-form-field-label{width:calc(100% - 18px)}.mat-select-placeholder{transition:color .4s .133s cubic-bezier(.25,.8,.25,1)}._mat-animation-noopable .mat-select-placeholder{transition:none}.mat-form-field-hide-placeholder .mat-select-placeholder{color:transparent;-webkit-text-fill-color:transparent;transition:none;display:block}\"],\n                inputs: ['disabled', 'disableRipple', 'tabIndex'],\n                encapsulation: ViewEncapsulation.None,\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                host: {\n                    'role': 'listbox',\n                    '[attr.id]': 'id',\n                    '[attr.tabindex]': 'tabIndex',\n                    '[attr.aria-label]': '_getAriaLabel()',\n                    '[attr.aria-labelledby]': '_getAriaLabelledby()',\n                    '[attr.aria-required]': 'required.toString()',\n                    '[attr.aria-disabled]': 'disabled.toString()',\n                    '[attr.aria-invalid]': 'errorState',\n                    '[attr.aria-owns]': 'panelOpen ? _optionIds : null',\n                    '[attr.aria-multiselectable]': 'multiple',\n                    '[attr.aria-describedby]': '_ariaDescribedby || null',\n                    '[attr.aria-activedescendant]': '_getAriaActiveDescendant()',\n                    '[class.mat-select-disabled]': 'disabled',\n                    '[class.mat-select-invalid]': 'errorState',\n                    '[class.mat-select-required]': 'required',\n                    '[class.mat-select-empty]': 'empty',\n                    'class': 'mat-select',\n                    '(keydown)': '_handleKeydown($event)',\n                    '(focus)': '_onFocus()',\n                    '(blur)': '_onBlur()'\n                },\n                animations: [\n                    matSelectAnimations.transformPanel\n                ], providers: [\n                    { provide: MatFormFieldControl, useExisting: MatSelect },\n                    { provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatSelect }\n                ]\n            }]\n    }], function () { return [{ type: ɵngcc1.ViewportRuler }, { type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc0.NgZone }, { type: ɵngcc2.ErrorStateMatcher }, { type: ɵngcc0.ElementRef }, { type: ɵngcc3.Directionality, decorators: [{\n                type: Optional\n            }] }, { type: ɵngcc4.NgForm, decorators: [{\n                type: Optional\n            }] }, { type: ɵngcc4.FormGroupDirective, decorators: [{\n                type: Optional\n            }] }, { type: ɵngcc5.MatFormField, decorators: [{\n                type: Optional\n            }] }, { type: ɵngcc4.NgControl, decorators: [{\n                type: Self\n            }, {\n                type: Optional\n            }] }, { type: String, decorators: [{\n                type: Attribute,\n                args: ['tabindex']\n            }] }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [MAT_SELECT_SCROLL_STRATEGY]\n            }] }]; }, { ariaLabel: [{\n            type: Input,\n            args: ['aria-label']\n        }], openedChange: [{\n            type: Output\n        }], _openedStream: [{\n            type: Output,\n            args: ['opened']\n        }], _closedStream: [{\n            type: Output,\n            args: ['closed']\n        }], selectionChange: [{\n            type: Output\n        }], valueChange: [{\n            type: Output\n        }], id: [{\n            type: Input\n        }], placeholder: [{\n            type: Input\n        }], required: [{\n            type: Input\n        }], multiple: [{\n            type: Input\n        }], disableOptionCentering: [{\n            type: Input\n        }], compareWith: [{\n            type: Input\n        }], value: [{\n            type: Input\n        }], trigger: [{\n            type: ViewChild,\n            args: ['trigger']\n        }], panel: [{\n            type: ViewChild,\n            args: ['panel']\n        }], overlayDir: [{\n            type: ViewChild,\n            args: [CdkConnectedOverlay]\n        }], options: [{\n            type: ContentChildren,\n            args: [MatOption, { descendants: true }]\n        }], optionGroups: [{\n            type: ContentChildren,\n            args: [MatOptgroup]\n        }], panelClass: [{\n            type: Input\n        }], customTrigger: [{\n            type: ContentChild,\n            args: [MatSelectTrigger]\n        }], ariaLabelledby: [{\n            type: Input,\n            args: ['aria-labelledby']\n        }], errorStateMatcher: [{\n            type: Input\n        }], sortComparator: [{\n            type: Input\n        }] }); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\nclass MatSelectModule {\n}\nMatSelectModule.ɵfac = function MatSelectModule_Factory(t) { return new (t || MatSelectModule)(); };\nMatSelectModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: MatSelectModule });\nMatSelectModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ providers: [MAT_SELECT_SCROLL_STRATEGY_PROVIDER], imports: [[\n            CommonModule,\n            OverlayModule,\n            MatOptionModule,\n            MatCommonModule,\n        ], MatFormFieldModule, MatOptionModule, MatCommonModule] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatSelectModule, [{\n        type: NgModule,\n        args: [{\n                imports: [\n                    CommonModule,\n                    OverlayModule,\n                    MatOptionModule,\n                    MatCommonModule,\n                ],\n                exports: [MatFormFieldModule, MatSelect, MatSelectTrigger, MatOptionModule, MatCommonModule],\n                declarations: [MatSelect, MatSelectTrigger],\n                providers: [MAT_SELECT_SCROLL_STRATEGY_PROVIDER]\n            }]\n    }], null, null); })();\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatSelectModule, { declarations: function () { return [MatSelect, MatSelectTrigger]; }, imports: function () { return [CommonModule,\n        OverlayModule,\n        MatOptionModule,\n        MatCommonModule]; }, exports: function () { return [MatFormFieldModule, MatSelect, MatSelectTrigger, MatOptionModule, MatCommonModule]; } }); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\nexport { MatSelectModule, MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY, SELECT_PANEL_MAX_HEIGHT, SELECT_PANEL_PADDING_X, SELECT_PANEL_INDENT_PADDING_X, SELECT_ITEM_HEIGHT_EM, SELECT_MULTIPLE_PANEL_PADDING_X, SELECT_PANEL_VIEWPORT_PADDING, MAT_SELECT_SCROLL_STRATEGY, MAT_SELECT_SCROLL_STRATEGY_PROVIDER, MatSelectChange, MatSelectBase, _MatSelectMixinBase, MatSelectTrigger, MatSelect, matSelectAnimations, transformPanel, fadeInContent };\n\n//# sourceMappingURL=select.js.map"]},"metadata":{},"sourceType":"module"}