{"ast":null,"code":"import _createClass from \"/Users/adepertat/Dropbox/ECOLES/Openclassroom/P6_de_Pertat_Antoine/AntoinedePertat_6_240521/frontend/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/Users/adepertat/Dropbox/ECOLES/Openclassroom/P6_de_Pertat_Antoine/AntoinedePertat_6_240521/frontend/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/adepertat/Dropbox/ECOLES/Openclassroom/P6_de_Pertat_Antoine/AntoinedePertat_6_240521/frontend/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _classCallCheck from \"/Users/adepertat/Dropbox/ECOLES/Openclassroom/P6_de_Pertat_Antoine/AntoinedePertat_6_240521/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { FocusMonitor } from '@angular/cdk/a11y';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { coerceBooleanProperty, coerceNumberProperty } from '@angular/cdk/coercion';\nimport { DOWN_ARROW, END, HOME, LEFT_ARROW, PAGE_DOWN, PAGE_UP, RIGHT_ARROW, UP_ARROW } from '@angular/cdk/keycodes';\nimport { Attribute, ChangeDetectionStrategy, ChangeDetectorRef, Component, ElementRef, EventEmitter, forwardRef, Inject, Input, Optional, Output, ViewChild, ViewEncapsulation, NgModule } from '@angular/core';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { mixinColor, mixinDisabled, mixinTabIndex, GestureConfig, MatCommonModule } from '@angular/material/core';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\nimport { Subscription } from 'rxjs';\nimport { CommonModule } from '@angular/common';\nimport { HAMMER_GESTURE_CONFIG } from '@angular/platform-browser';\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/** *\n * Visually, a 30px separation between tick marks looks best. This is very subjective but it is\n * the default separation we chose.\n  @type {?} */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/a11y';\nimport * as ɵngcc2 from '@angular/cdk/bidi';\nimport * as ɵngcc3 from '@angular/common';\nvar _c0 = [\"sliderWrapper\"];\nvar MIN_AUTO_TICK_SEPARATION = 30;\n/** *\n * The thumb gap size for a disabled slider.\n  @type {?} */\n\nvar DISABLED_THUMB_GAP = 7;\n/** *\n * The thumb gap size for a non-active slider at its minimum value.\n  @type {?} */\n\nvar MIN_VALUE_NONACTIVE_THUMB_GAP = 7;\n/** *\n * The thumb gap size for an active slider at its minimum value.\n  @type {?} */\n\nvar MIN_VALUE_ACTIVE_THUMB_GAP = 10;\n/** *\n * Provider Expression that allows mat-slider to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)] and [formControl].\n * \\@docs-private\n  @type {?} */\n\nvar MAT_SLIDER_VALUE_ACCESSOR = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: /*@__PURE__*/forwardRef(function () {\n    return MatSlider;\n  }),\n  multi: true\n};\n/**\n * A simple change event emitted by the MatSlider component.\n */\n\nvar MatSliderChange = function MatSliderChange() {\n  _classCallCheck(this, MatSliderChange);\n};\n/**\n * \\@docs-private\n */\n\n\nvar MatSliderBase =\n/**\n * @param {?} _elementRef\n */\nfunction MatSliderBase(_elementRef) {\n  _classCallCheck(this, MatSliderBase);\n\n  this._elementRef = _elementRef;\n};\n/** @type {?} */\n\n\nvar _MatSliderMixinBase = /*@__PURE__*/mixinTabIndex( /*@__PURE__*/mixinColor( /*@__PURE__*/mixinDisabled(MatSliderBase), 'accent'));\n\nvar MatSlider = /*@__PURE__*/function () {\n  var MatSlider = /*#__PURE__*/function (_MatSliderMixinBase2) {\n    _inherits(MatSlider, _MatSliderMixinBase2);\n\n    var _super = _createSuper(MatSlider);\n\n    /**\n     * @param {?} elementRef\n     * @param {?} _focusMonitor\n     * @param {?} _changeDetectorRef\n     * @param {?} _dir\n     * @param {?} tabIndex\n     * @param {?=} _animationMode\n     */\n    function MatSlider(elementRef, _focusMonitor, _changeDetectorRef, _dir, tabIndex, // @breaking-change 8.0.0 `_animationMode` parameter to be made required.\n    _animationMode) {\n      var _this;\n\n      _classCallCheck(this, MatSlider);\n\n      _this = _super.call(this, elementRef);\n      _this._focusMonitor = _focusMonitor;\n      _this._changeDetectorRef = _changeDetectorRef;\n      _this._dir = _dir;\n      _this._animationMode = _animationMode;\n      _this._invert = false;\n      _this._max = 100;\n      _this._min = 0;\n      _this._step = 1;\n      _this._thumbLabel = false;\n      _this._tickInterval = 0;\n      _this._value = null;\n      _this._vertical = false;\n      /**\n       * Event emitted when the slider value has changed.\n       */\n\n      _this.change = new EventEmitter();\n      /**\n       * Event emitted when the slider thumb moves.\n       */\n\n      _this.input = new EventEmitter();\n      /**\n       * Emits when the raw value of the slider changes. This is here primarily\n       * to facilitate the two-way binding for the `value` input.\n       * \\@docs-private\n       */\n\n      _this.valueChange = new EventEmitter();\n      /**\n       * onTouch function registered via registerOnTouch (ControlValueAccessor).\n       */\n\n      _this.onTouched = function () {};\n\n      _this._percent = 0;\n      /**\n       * Whether or not the thumb is sliding.\n       * Used to determine if there should be a transition for the thumb and fill track.\n       */\n\n      _this._isSliding = false;\n      /**\n       * Whether or not the slider is active (clicked or sliding).\n       * Used to shrink and grow the thumb as according to the Material Design spec.\n       */\n\n      _this._isActive = false;\n      /**\n       * The size of a tick interval as a percentage of the size of the track.\n       */\n\n      _this._tickIntervalPercent = 0;\n      /**\n       * The dimensions of the slider.\n       */\n\n      _this._sliderDimensions = null;\n\n      _this._controlValueAccessorChangeFn = function () {};\n      /**\n       * Subscription to the Directionality change EventEmitter.\n       */\n\n\n      _this._dirChangeSubscription = Subscription.EMPTY;\n      _this.tabIndex = parseInt(tabIndex) || 0;\n      return _this;\n    }\n    /**\n     * Whether the slider is inverted.\n     * @return {?}\n     */\n\n\n    _createClass(MatSlider, [{\n      key: \"invert\",\n      get: function get() {\n        return this._invert;\n      }\n      /**\n       * @param {?} value\n       * @return {?}\n       */\n      ,\n      set: function set(value) {\n        this._invert = coerceBooleanProperty(value);\n      }\n      /**\n       * The maximum value that the slider can have.\n       * @return {?}\n       */\n\n    }, {\n      key: \"max\",\n      get: function get() {\n        return this._max;\n      }\n      /**\n       * @param {?} v\n       * @return {?}\n       */\n      ,\n      set: function set(v) {\n        this._max = coerceNumberProperty(v, this._max);\n        this._percent = this._calculatePercentage(this._value); // Since this also modifies the percentage, we need to let the change detection know.\n\n        this._changeDetectorRef.markForCheck();\n      }\n      /**\n       * The minimum value that the slider can have.\n       * @return {?}\n       */\n\n    }, {\n      key: \"min\",\n      get: function get() {\n        return this._min;\n      }\n      /**\n       * @param {?} v\n       * @return {?}\n       */\n      ,\n      set: function set(v) {\n        this._min = coerceNumberProperty(v, this._min); // If the value wasn't explicitly set by the user, set it to the min.\n\n        if (this._value === null) {\n          this.value = this._min;\n        }\n\n        this._percent = this._calculatePercentage(this._value); // Since this also modifies the percentage, we need to let the change detection know.\n\n        this._changeDetectorRef.markForCheck();\n      }\n      /**\n       * The values at which the thumb will snap.\n       * @return {?}\n       */\n\n    }, {\n      key: \"step\",\n      get: function get() {\n        return this._step;\n      }\n      /**\n       * @param {?} v\n       * @return {?}\n       */\n      ,\n      set: function set(v) {\n        this._step = coerceNumberProperty(v, this._step);\n\n        if (this._step % 1 !== 0) {\n          this._roundToDecimal =\n          /** @type {?} */\n          this._step.toString().split('.').pop().length;\n        } // Since this could modify the label, we need to notify the change detection.\n\n\n        this._changeDetectorRef.markForCheck();\n      }\n      /**\n       * Whether or not to show the thumb label.\n       * @return {?}\n       */\n\n    }, {\n      key: \"thumbLabel\",\n      get: function get() {\n        return this._thumbLabel;\n      }\n      /**\n       * @param {?} value\n       * @return {?}\n       */\n      ,\n      set: function set(value) {\n        this._thumbLabel = coerceBooleanProperty(value);\n      }\n      /**\n       * How often to show ticks. Relative to the step so that a tick always appears on a step.\n       * Ex: Tick interval of 4 with a step of 3 will draw a tick every 4 steps (every 12 values).\n       * @return {?}\n       */\n\n    }, {\n      key: \"tickInterval\",\n      get: function get() {\n        return this._tickInterval;\n      }\n      /**\n       * @param {?} value\n       * @return {?}\n       */\n      ,\n      set: function set(value) {\n        if (value === 'auto') {\n          this._tickInterval = 'auto';\n        } else if (typeof value === 'number' || typeof value === 'string') {\n          this._tickInterval = coerceNumberProperty(value,\n          /** @type {?} */\n          this._tickInterval);\n        } else {\n          this._tickInterval = 0;\n        }\n      }\n      /**\n       * Value of the slider.\n       * @return {?}\n       */\n\n    }, {\n      key: \"value\",\n      get: function get() {\n        // If the value needs to be read and it is still uninitialized, initialize it to the min.\n        if (this._value === null) {\n          this.value = this._min;\n        }\n\n        return this._value;\n      }\n      /**\n       * @param {?} v\n       * @return {?}\n       */\n      ,\n      set: function set(v) {\n        if (v !== this._value) {\n          /** @type {?} */\n          var value = coerceNumberProperty(v); // While incrementing by a decimal we can end up with values like 33.300000000000004.\n          // Truncate it to ensure that it matches the label and to make it easier to work with.\n\n          if (this._roundToDecimal) {\n            value = parseFloat(value.toFixed(this._roundToDecimal));\n          }\n\n          this._value = value;\n          this._percent = this._calculatePercentage(this._value); // Since this also modifies the percentage, we need to let the change detection know.\n\n          this._changeDetectorRef.markForCheck();\n        }\n      }\n      /**\n       * Whether the slider is vertical.\n       * @return {?}\n       */\n\n    }, {\n      key: \"vertical\",\n      get: function get() {\n        return this._vertical;\n      }\n      /**\n       * @param {?} value\n       * @return {?}\n       */\n      ,\n      set: function set(value) {\n        this._vertical = coerceBooleanProperty(value);\n      }\n      /**\n       * The value to be used for display purposes.\n       * @return {?}\n       */\n\n    }, {\n      key: \"displayValue\",\n      get: function get() {\n        if (this.displayWith) {\n          return this.displayWith(this.value);\n        } // Note that this could be improved further by rounding something like 0.999 to 1 or\n        // 0.899 to 0.9, however it is very performance sensitive, because it gets called on\n        // every change detection cycle.\n\n\n        if (this._roundToDecimal && this.value && this.value % 1 !== 0) {\n          return this.value.toFixed(this._roundToDecimal);\n        }\n\n        return this.value || 0;\n      }\n      /**\n       * set focus to the host element\n       * @return {?}\n       */\n\n    }, {\n      key: \"focus\",\n      value: function focus() {\n        this._focusHostElement();\n      }\n      /**\n       * blur the host element\n       * @return {?}\n       */\n\n    }, {\n      key: \"blur\",\n      value: function blur() {\n        this._blurHostElement();\n      }\n      /**\n       * The percentage of the slider that coincides with the value.\n       * @return {?}\n       */\n\n    }, {\n      key: \"percent\",\n      get: function get() {\n        return this._clamp(this._percent);\n      }\n      /**\n       * Whether the axis of the slider is inverted.\n       * (i.e. whether moving the thumb in the positive x or y direction decreases the slider's value).\n       * @return {?}\n       */\n\n    }, {\n      key: \"_invertAxis\",\n      get: function get() {\n        // Standard non-inverted mode for a vertical slider should be dragging the thumb from bottom to\n        // top. However from a y-axis standpoint this is inverted.\n        return this.vertical ? !this.invert : this.invert;\n      }\n      /**\n       * Whether the slider is at its minimum value.\n       * @return {?}\n       */\n\n    }, {\n      key: \"_isMinValue\",\n      get: function get() {\n        return this.percent === 0;\n      }\n      /**\n       * The amount of space to leave between the slider thumb and the track fill & track background\n       * elements.\n       * @return {?}\n       */\n\n    }, {\n      key: \"_thumbGap\",\n      get: function get() {\n        if (this.disabled) {\n          return DISABLED_THUMB_GAP;\n        }\n\n        if (this._isMinValue && !this.thumbLabel) {\n          return this._isActive ? MIN_VALUE_ACTIVE_THUMB_GAP : MIN_VALUE_NONACTIVE_THUMB_GAP;\n        }\n\n        return 0;\n      }\n      /**\n       * CSS styles for the track background element.\n       * @return {?}\n       */\n\n    }, {\n      key: \"_trackBackgroundStyles\",\n      get: function get() {\n        /** @type {?} */\n        var axis = this.vertical ? 'Y' : 'X';\n        /** @type {?} */\n\n        var scale = this.vertical ? \"1, \".concat(1 - this.percent, \", 1\") : \"\".concat(1 - this.percent, \", 1, 1\");\n        /** @type {?} */\n\n        var sign = this._shouldInvertMouseCoords() ? '-' : '';\n        return {\n          // scale3d avoids some rendering issues in Chrome. See #12071.\n          transform: \"translate\".concat(axis, \"(\").concat(sign).concat(this._thumbGap, \"px) scale3d(\").concat(scale, \")\")\n        };\n      }\n      /**\n       * CSS styles for the track fill element.\n       * @return {?}\n       */\n\n    }, {\n      key: \"_trackFillStyles\",\n      get: function get() {\n        /** @type {?} */\n        var axis = this.vertical ? 'Y' : 'X';\n        /** @type {?} */\n\n        var scale = this.vertical ? \"1, \".concat(this.percent, \", 1\") : \"\".concat(this.percent, \", 1, 1\");\n        /** @type {?} */\n\n        var sign = this._shouldInvertMouseCoords() ? '' : '-';\n        return {\n          // scale3d avoids some rendering issues in Chrome. See #12071.\n          transform: \"translate\".concat(axis, \"(\").concat(sign).concat(this._thumbGap, \"px) scale3d(\").concat(scale, \")\")\n        };\n      }\n      /**\n       * CSS styles for the ticks container element.\n       * @return {?}\n       */\n\n    }, {\n      key: \"_ticksContainerStyles\",\n      get: function get() {\n        /** @type {?} */\n        var axis = this.vertical ? 'Y' : 'X';\n        /** @type {?} */\n\n        var sign = !this.vertical && this._getDirection() == 'rtl' ? '' : '-';\n        /** @type {?} */\n\n        var offset = this._tickIntervalPercent / 2 * 100;\n        return {\n          'transform': \"translate\".concat(axis, \"(\").concat(sign).concat(offset, \"%)\")\n        };\n      }\n      /**\n       * CSS styles for the ticks element.\n       * @return {?}\n       */\n\n    }, {\n      key: \"_ticksStyles\",\n      get: function get() {\n        /** @type {?} */\n        var tickSize = this._tickIntervalPercent * 100;\n        /** @type {?} */\n\n        var backgroundSize = this.vertical ? \"2px \".concat(tickSize, \"%\") : \"\".concat(tickSize, \"% 2px\");\n        /** @type {?} */\n\n        var axis = this.vertical ? 'Y' : 'X';\n        /** @type {?} */\n\n        var sign = !this.vertical && this._getDirection() == 'rtl' ? '-' : '';\n        /** @type {?} */\n\n        var rotate = !this.vertical && this._getDirection() == 'rtl' ? ' rotate(180deg)' : '';\n        /** @type {?} */\n\n        var styles = {\n          'backgroundSize': backgroundSize,\n          // Without translateZ ticks sometimes jitter as the slider moves on Chrome & Firefox.\n          'transform': \"translateZ(0) translate\".concat(axis, \"(\").concat(sign).concat(tickSize / 2, \"%)\").concat(rotate)\n        };\n\n        if (this._isMinValue && this._thumbGap) {\n          /** @type {?} */\n          var side = this.vertical ? this._invertAxis ? 'Bottom' : 'Top' : this._invertAxis ? 'Right' : 'Left';\n          styles[\"padding\".concat(side)] = \"\".concat(this._thumbGap, \"px\");\n        }\n\n        return styles;\n      }\n      /**\n       * @return {?}\n       */\n\n    }, {\n      key: \"_thumbContainerStyles\",\n      get: function get() {\n        /** @type {?} */\n        var axis = this.vertical ? 'Y' : 'X';\n        /** @type {?} */\n\n        var invertOffset = this._getDirection() == 'rtl' && !this.vertical ? !this._invertAxis : this._invertAxis;\n        /** @type {?} */\n\n        var offset = (invertOffset ? this.percent : 1 - this.percent) * 100;\n        return {\n          'transform': \"translate\".concat(axis, \"(-\").concat(offset, \"%)\")\n        };\n      }\n      /**\n       * Whether mouse events should be converted to a slider position by calculating their distance\n       * from the right or bottom edge of the slider as opposed to the top or left.\n       * @return {?}\n       */\n\n    }, {\n      key: \"_shouldInvertMouseCoords\",\n      value: function _shouldInvertMouseCoords() {\n        return this._getDirection() == 'rtl' && !this.vertical ? !this._invertAxis : this._invertAxis;\n      }\n      /**\n       * The language direction for this slider element.\n       * @return {?}\n       */\n\n    }, {\n      key: \"_getDirection\",\n      value: function _getDirection() {\n        return this._dir && this._dir.value == 'rtl' ? 'rtl' : 'ltr';\n      }\n      /**\n       * @return {?}\n       */\n\n    }, {\n      key: \"ngOnInit\",\n      value: function ngOnInit() {\n        var _this2 = this;\n\n        this._focusMonitor.monitor(this._elementRef, true).subscribe(function (origin) {\n          _this2._isActive = !!origin && origin !== 'keyboard';\n\n          _this2._changeDetectorRef.detectChanges();\n        });\n\n        if (this._dir) {\n          this._dirChangeSubscription = this._dir.change.subscribe(function () {\n            _this2._changeDetectorRef.markForCheck();\n          });\n        }\n      }\n      /**\n       * @return {?}\n       */\n\n    }, {\n      key: \"ngOnDestroy\",\n      value: function ngOnDestroy() {\n        this._focusMonitor.stopMonitoring(this._elementRef);\n\n        this._dirChangeSubscription.unsubscribe();\n      }\n      /**\n       * @return {?}\n       */\n\n    }, {\n      key: \"_onMouseenter\",\n      value: function _onMouseenter() {\n        if (this.disabled) {\n          return;\n        } // We save the dimensions of the slider here so we can use them to update the spacing of the\n        // ticks and determine where on the slider click and slide events happen.\n\n\n        this._sliderDimensions = this._getSliderDimensions();\n\n        this._updateTickIntervalPercent();\n      }\n      /**\n       * @param {?} event\n       * @return {?}\n       */\n\n    }, {\n      key: \"_onMousedown\",\n      value: function _onMousedown(event) {\n        if (this.disabled) {\n          return;\n        }\n        /** @type {?} */\n\n\n        var oldValue = this.value;\n        this._isSliding = false;\n\n        this._focusHostElement();\n\n        this._updateValueFromPosition({\n          x: event.clientX,\n          y: event.clientY\n        }); // Emit a change and input event if the value changed.\n\n\n        if (oldValue != this.value) {\n          this._emitInputEvent();\n\n          this._emitChangeEvent();\n        }\n      }\n      /**\n       * @param {?} event\n       * @return {?}\n       */\n\n    }, {\n      key: \"_onSlide\",\n      value: function _onSlide(event) {\n        if (this.disabled) {\n          return;\n        } // The slide start event sometimes fails to fire on iOS, so if we're not already in the sliding\n        // state, call the slide start handler manually.\n\n\n        if (!this._isSliding) {\n          this._onSlideStart(null);\n        } // Prevent the slide from selecting anything else.\n\n\n        event.preventDefault();\n        /** @type {?} */\n\n        var oldValue = this.value;\n\n        this._updateValueFromPosition({\n          x: event.center.x,\n          y: event.center.y\n        }); // Native range elements always emit `input` events when the value changed while sliding.\n\n\n        if (oldValue != this.value) {\n          this._emitInputEvent();\n        }\n      }\n      /**\n       * @param {?} event\n       * @return {?}\n       */\n\n    }, {\n      key: \"_onSlideStart\",\n      value: function _onSlideStart(event) {\n        if (this.disabled || this._isSliding) {\n          return;\n        } // Simulate mouseenter in case this is a mobile device.\n\n\n        this._onMouseenter();\n\n        this._isSliding = true;\n\n        this._focusHostElement();\n\n        this._valueOnSlideStart = this.value;\n\n        if (event) {\n          this._updateValueFromPosition({\n            x: event.center.x,\n            y: event.center.y\n          });\n\n          event.preventDefault();\n        }\n      }\n      /**\n       * @return {?}\n       */\n\n    }, {\n      key: \"_onSlideEnd\",\n      value: function _onSlideEnd() {\n        this._isSliding = false;\n\n        if (this._valueOnSlideStart != this.value && !this.disabled) {\n          this._emitChangeEvent();\n        }\n\n        this._valueOnSlideStart = null;\n      }\n      /**\n       * @return {?}\n       */\n\n    }, {\n      key: \"_onFocus\",\n      value: function _onFocus() {\n        // We save the dimensions of the slider here so we can use them to update the spacing of the\n        // ticks and determine where on the slider click and slide events happen.\n        this._sliderDimensions = this._getSliderDimensions();\n\n        this._updateTickIntervalPercent();\n      }\n      /**\n       * @return {?}\n       */\n\n    }, {\n      key: \"_onBlur\",\n      value: function _onBlur() {\n        this.onTouched();\n      }\n      /**\n       * @param {?} event\n       * @return {?}\n       */\n\n    }, {\n      key: \"_onKeydown\",\n      value: function _onKeydown(event) {\n        if (this.disabled) {\n          return;\n        }\n        /** @type {?} */\n\n\n        var oldValue = this.value;\n\n        switch (event.keyCode) {\n          case PAGE_UP:\n            this._increment(10);\n\n            break;\n\n          case PAGE_DOWN:\n            this._increment(-10);\n\n            break;\n\n          case END:\n            this.value = this.max;\n            break;\n\n          case HOME:\n            this.value = this.min;\n            break;\n\n          case LEFT_ARROW:\n            // NOTE: For a sighted user it would make more sense that when they press an arrow key on an\n            // inverted slider the thumb moves in that direction. However for a blind user, nothing\n            // about the slider indicates that it is inverted. They will expect left to be decrement,\n            // regardless of how it appears on the screen. For speakers ofRTL languages, they probably\n            // expect left to mean increment. Therefore we flip the meaning of the side arrow keys for\n            // RTL. For inverted sliders we prefer a good a11y experience to having it \"look right\" for\n            // sighted users, therefore we do not swap the meaning.\n            this._increment(this._getDirection() == 'rtl' ? 1 : -1);\n\n            break;\n\n          case UP_ARROW:\n            this._increment(1);\n\n            break;\n\n          case RIGHT_ARROW:\n            // See comment on LEFT_ARROW about the conditions under which we flip the meaning.\n            this._increment(this._getDirection() == 'rtl' ? -1 : 1);\n\n            break;\n\n          case DOWN_ARROW:\n            this._increment(-1);\n\n            break;\n\n          default:\n            // Return if the key is not one that we explicitly handle to avoid calling preventDefault on\n            // it.\n            return;\n        }\n\n        if (oldValue != this.value) {\n          this._emitInputEvent();\n\n          this._emitChangeEvent();\n        }\n\n        this._isSliding = true;\n        event.preventDefault();\n      }\n      /**\n       * @return {?}\n       */\n\n    }, {\n      key: \"_onKeyup\",\n      value: function _onKeyup() {\n        this._isSliding = false;\n      }\n      /**\n       * Increments the slider by the given number of steps (negative number decrements).\n       * @param {?} numSteps\n       * @return {?}\n       */\n\n    }, {\n      key: \"_increment\",\n      value: function _increment(numSteps) {\n        this.value = this._clamp((this.value || 0) + this.step * numSteps, this.min, this.max);\n      }\n      /**\n       * Calculate the new value from the new physical location. The value will always be snapped.\n       * @param {?} pos\n       * @return {?}\n       */\n\n    }, {\n      key: \"_updateValueFromPosition\",\n      value: function _updateValueFromPosition(pos) {\n        if (!this._sliderDimensions) {\n          return;\n        }\n        /** @type {?} */\n\n\n        var offset = this.vertical ? this._sliderDimensions.top : this._sliderDimensions.left;\n        /** @type {?} */\n\n        var size = this.vertical ? this._sliderDimensions.height : this._sliderDimensions.width;\n        /** @type {?} */\n\n        var posComponent = this.vertical ? pos.y : pos.x;\n        /** @type {?} */\n\n        var percent = this._clamp((posComponent - offset) / size);\n\n        if (this._shouldInvertMouseCoords()) {\n          percent = 1 - percent;\n        } // Since the steps may not divide cleanly into the max value, if the user\n        // slid to 0 or 100 percent, we jump to the min/max value. This approach\n        // is slightly more intuitive than using `Math.ceil` below, because it\n        // follows the user's pointer closer.\n\n\n        if (percent === 0) {\n          this.value = this.min;\n        } else if (percent === 1) {\n          this.value = this.max;\n        } else {\n          /** @type {?} */\n          var exactValue = this._calculateValue(percent);\n          /** @type {?} */\n\n\n          var closestValue = Math.round((exactValue - this.min) / this.step) * this.step + this.min; // The value needs to snap to the min and max.\n\n          this.value = this._clamp(closestValue, this.min, this.max);\n        }\n      }\n      /**\n       * Emits a change event if the current value is different from the last emitted value.\n       * @return {?}\n       */\n\n    }, {\n      key: \"_emitChangeEvent\",\n      value: function _emitChangeEvent() {\n        this._controlValueAccessorChangeFn(this.value);\n\n        this.valueChange.emit(this.value);\n        this.change.emit(this._createChangeEvent());\n      }\n      /**\n       * Emits an input event when the current value is different from the last emitted value.\n       * @return {?}\n       */\n\n    }, {\n      key: \"_emitInputEvent\",\n      value: function _emitInputEvent() {\n        this.input.emit(this._createChangeEvent());\n      }\n      /**\n       * Updates the amount of space between ticks as a percentage of the width of the slider.\n       * @return {?}\n       */\n\n    }, {\n      key: \"_updateTickIntervalPercent\",\n      value: function _updateTickIntervalPercent() {\n        if (!this.tickInterval || !this._sliderDimensions) {\n          return;\n        }\n\n        if (this.tickInterval == 'auto') {\n          /** @type {?} */\n          var trackSize = this.vertical ? this._sliderDimensions.height : this._sliderDimensions.width;\n          /** @type {?} */\n\n          var pixelsPerStep = trackSize * this.step / (this.max - this.min);\n          /** @type {?} */\n\n          var stepsPerTick = Math.ceil(MIN_AUTO_TICK_SEPARATION / pixelsPerStep);\n          /** @type {?} */\n\n          var pixelsPerTick = stepsPerTick * this.step;\n          this._tickIntervalPercent = pixelsPerTick / trackSize;\n        } else {\n          this._tickIntervalPercent = this.tickInterval * this.step / (this.max - this.min);\n        }\n      }\n      /**\n       * Creates a slider change object from the specified value.\n       * @param {?=} value\n       * @return {?}\n       */\n\n    }, {\n      key: \"_createChangeEvent\",\n      value: function _createChangeEvent() {\n        var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.value;\n\n        /** @type {?} */\n        var event = new MatSliderChange();\n        event.source = this;\n        event.value = value;\n        return event;\n      }\n      /**\n       * Calculates the percentage of the slider that a value is.\n       * @param {?} value\n       * @return {?}\n       */\n\n    }, {\n      key: \"_calculatePercentage\",\n      value: function _calculatePercentage(value) {\n        return ((value || 0) - this.min) / (this.max - this.min);\n      }\n      /**\n       * Calculates the value a percentage of the slider corresponds to.\n       * @param {?} percentage\n       * @return {?}\n       */\n\n    }, {\n      key: \"_calculateValue\",\n      value: function _calculateValue(percentage) {\n        return this.min + percentage * (this.max - this.min);\n      }\n      /**\n       * Return a number between two numbers.\n       * @param {?} value\n       * @param {?=} min\n       * @param {?=} max\n       * @return {?}\n       */\n\n    }, {\n      key: \"_clamp\",\n      value: function _clamp(value) {\n        var min = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n        var max = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n        return Math.max(min, Math.min(value, max));\n      }\n      /**\n       * Get the bounding client rect of the slider track element.\n       * The track is used rather than the native element to ignore the extra space that the thumb can\n       * take up.\n       * @return {?}\n       */\n\n    }, {\n      key: \"_getSliderDimensions\",\n      value: function _getSliderDimensions() {\n        return this._sliderWrapper ? this._sliderWrapper.nativeElement.getBoundingClientRect() : null;\n      }\n      /**\n       * Focuses the native element.\n       * Currently only used to allow a blur event to fire but will be used with keyboard input later.\n       * @return {?}\n       */\n\n    }, {\n      key: \"_focusHostElement\",\n      value: function _focusHostElement() {\n        this._elementRef.nativeElement.focus();\n      }\n      /**\n       * Blurs the native element.\n       * @return {?}\n       */\n\n    }, {\n      key: \"_blurHostElement\",\n      value: function _blurHostElement() {\n        this._elementRef.nativeElement.blur();\n      }\n      /**\n       * Sets the model value. Implemented as part of ControlValueAccessor.\n       * @param {?} value\n       * @return {?}\n       */\n\n    }, {\n      key: \"writeValue\",\n      value: function writeValue(value) {\n        this.value = value;\n      }\n      /**\n       * Registers a callback to be triggered when the value has changed.\n       * Implemented as part of ControlValueAccessor.\n       * @param {?} fn Callback to be registered.\n       * @return {?}\n       */\n\n    }, {\n      key: \"registerOnChange\",\n      value: function registerOnChange(fn) {\n        this._controlValueAccessorChangeFn = fn;\n      }\n      /**\n       * Registers a callback to be triggered when the component is touched.\n       * Implemented as part of ControlValueAccessor.\n       * @param {?} fn Callback to be registered.\n       * @return {?}\n       */\n\n    }, {\n      key: \"registerOnTouched\",\n      value: function registerOnTouched(fn) {\n        this.onTouched = fn;\n      }\n      /**\n       * Sets whether the component should be disabled.\n       * Implemented as part of ControlValueAccessor.\n       * @param {?} isDisabled\n       * @return {?}\n       */\n\n    }, {\n      key: \"setDisabledState\",\n      value: function setDisabledState(isDisabled) {\n        this.disabled = isDisabled;\n      }\n    }]);\n\n    return MatSlider;\n  }(_MatSliderMixinBase);\n\n  MatSlider.ɵfac = function MatSlider_Factory(t) {\n    return new (t || MatSlider)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.FocusMonitor), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.Directionality, 8), ɵngcc0.ɵɵinjectAttribute('tabindex'), ɵngcc0.ɵɵdirectiveInject(ANIMATION_MODULE_TYPE, 8));\n  };\n\n  MatSlider.ɵcmp =\n  /*@__PURE__*/\n\n  /*@__PURE__*/\n  ɵngcc0.ɵɵdefineComponent({\n    type: MatSlider,\n    selectors: [[\"mat-slider\"]],\n    viewQuery: function MatSlider_Query(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(_c0, 5);\n      }\n\n      if (rf & 2) {\n        var _t;\n\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._sliderWrapper = _t.first);\n      }\n    },\n    hostAttrs: [\"role\", \"slider\", 1, \"mat-slider\"],\n    hostVars: 26,\n    hostBindings: function MatSlider_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"focus\", function MatSlider_focus_HostBindingHandler() {\n          return ctx._onFocus();\n        })(\"blur\", function MatSlider_blur_HostBindingHandler() {\n          return ctx._onBlur();\n        })(\"mousedown\", function MatSlider_mousedown_HostBindingHandler($event) {\n          return ctx._onMousedown($event);\n        })(\"keydown\", function MatSlider_keydown_HostBindingHandler($event) {\n          return ctx._onKeydown($event);\n        })(\"keyup\", function MatSlider_keyup_HostBindingHandler() {\n          return ctx._onKeyup();\n        })(\"mouseenter\", function MatSlider_mouseenter_HostBindingHandler() {\n          return ctx._onMouseenter();\n        })(\"slide\", function MatSlider_slide_HostBindingHandler($event) {\n          return ctx._onSlide($event);\n        })(\"slideend\", function MatSlider_slideend_HostBindingHandler() {\n          return ctx._onSlideEnd();\n        })(\"slidestart\", function MatSlider_slidestart_HostBindingHandler($event) {\n          return ctx._onSlideStart($event);\n        });\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵhostProperty(\"tabIndex\", ctx.tabIndex);\n        ɵngcc0.ɵɵattribute(\"aria-disabled\", ctx.disabled)(\"aria-valuemax\", ctx.max)(\"aria-valuemin\", ctx.min)(\"aria-valuenow\", ctx.value)(\"aria-orientation\", ctx.vertical ? \"vertical\" : \"horizontal\");\n        ɵngcc0.ɵɵclassProp(\"mat-slider-disabled\", ctx.disabled)(\"mat-slider-has-ticks\", ctx.tickInterval)(\"mat-slider-horizontal\", !ctx.vertical)(\"mat-slider-axis-inverted\", ctx._invertAxis)(\"mat-slider-sliding\", ctx._isSliding)(\"mat-slider-thumb-label-showing\", ctx.thumbLabel)(\"mat-slider-vertical\", ctx.vertical)(\"mat-slider-min-value\", ctx._isMinValue)(\"mat-slider-hide-last-tick\", ctx.disabled || ctx._isMinValue && ctx._thumbGap && ctx._invertAxis)(\"_mat-animation-noopable\", ctx._animationMode === \"NoopAnimations\");\n      }\n    },\n    inputs: {\n      disabled: \"disabled\",\n      color: \"color\",\n      tabIndex: \"tabIndex\",\n      invert: \"invert\",\n      max: \"max\",\n      min: \"min\",\n      value: \"value\",\n      step: \"step\",\n      thumbLabel: \"thumbLabel\",\n      tickInterval: \"tickInterval\",\n      vertical: \"vertical\",\n      displayWith: \"displayWith\"\n    },\n    outputs: {\n      change: \"change\",\n      input: \"input\",\n      valueChange: \"valueChange\"\n    },\n    exportAs: [\"matSlider\"],\n    features: [/*@__PURE__*/ɵngcc0.ɵɵProvidersFeature([MAT_SLIDER_VALUE_ACCESSOR]), ɵngcc0.ɵɵInheritDefinitionFeature],\n    decls: 13,\n    vars: 6,\n    consts: [[1, \"mat-slider-wrapper\"], [\"sliderWrapper\", \"\"], [1, \"mat-slider-track-wrapper\"], [1, \"mat-slider-track-background\", 3, \"ngStyle\"], [1, \"mat-slider-track-fill\", 3, \"ngStyle\"], [1, \"mat-slider-ticks-container\", 3, \"ngStyle\"], [1, \"mat-slider-ticks\", 3, \"ngStyle\"], [1, \"mat-slider-thumb-container\", 3, \"ngStyle\"], [1, \"mat-slider-focus-ring\"], [1, \"mat-slider-thumb\"], [1, \"mat-slider-thumb-label\"], [1, \"mat-slider-thumb-label-text\"]],\n    template: function MatSlider_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵelementStart(0, \"div\", 0, 1);\n        ɵngcc0.ɵɵelementStart(2, \"div\", 2);\n        ɵngcc0.ɵɵelement(3, \"div\", 3);\n        ɵngcc0.ɵɵelement(4, \"div\", 4);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementStart(5, \"div\", 5);\n        ɵngcc0.ɵɵelement(6, \"div\", 6);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementStart(7, \"div\", 7);\n        ɵngcc0.ɵɵelement(8, \"div\", 8);\n        ɵngcc0.ɵɵelement(9, \"div\", 9);\n        ɵngcc0.ɵɵelementStart(10, \"div\", 10);\n        ɵngcc0.ɵɵelementStart(11, \"span\", 11);\n        ɵngcc0.ɵɵtext(12);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵadvance(3);\n        ɵngcc0.ɵɵproperty(\"ngStyle\", ctx._trackBackgroundStyles);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngStyle\", ctx._trackFillStyles);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngStyle\", ctx._ticksContainerStyles);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngStyle\", ctx._ticksStyles);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngStyle\", ctx._thumbContainerStyles);\n        ɵngcc0.ɵɵadvance(5);\n        ɵngcc0.ɵɵtextInterpolate(ctx.displayValue);\n      }\n    },\n    directives: [ɵngcc3.NgStyle],\n    styles: [\".mat-slider{display:inline-block;position:relative;box-sizing:border-box;padding:8px;outline:0;vertical-align:middle}.mat-slider-wrapper{position:absolute}.mat-slider-track-wrapper{position:absolute;top:0;left:0;overflow:hidden}.mat-slider-track-fill{position:absolute;transform-origin:0 0;transition:transform .4s cubic-bezier(.25,.8,.25,1),background-color .4s cubic-bezier(.25,.8,.25,1)}.mat-slider-track-background{position:absolute;transform-origin:100% 100%;transition:transform .4s cubic-bezier(.25,.8,.25,1),background-color .4s cubic-bezier(.25,.8,.25,1)}.mat-slider-ticks-container{position:absolute;left:0;top:0;overflow:hidden}.mat-slider-ticks{background-repeat:repeat;background-clip:content-box;box-sizing:border-box;opacity:0;transition:opacity .4s cubic-bezier(.25,.8,.25,1)}.mat-slider-thumb-container{position:absolute;z-index:1;transition:transform .4s cubic-bezier(.25,.8,.25,1)}.mat-slider-focus-ring{position:absolute;width:30px;height:30px;border-radius:50%;transform:scale(0);opacity:0;transition:transform .4s cubic-bezier(.25,.8,.25,1),background-color .4s cubic-bezier(.25,.8,.25,1),opacity .4s cubic-bezier(.25,.8,.25,1)}.cdk-keyboard-focused .mat-slider-focus-ring,.cdk-program-focused .mat-slider-focus-ring{transform:scale(1);opacity:1}.mat-slider:not(.mat-slider-disabled) .mat-slider-thumb,.mat-slider:not(.mat-slider-disabled) .mat-slider-thumb-label{cursor:-webkit-grab;cursor:grab}.mat-slider-sliding:not(.mat-slider-disabled) .mat-slider-thumb,.mat-slider-sliding:not(.mat-slider-disabled) .mat-slider-thumb-label,.mat-slider:not(.mat-slider-disabled) .mat-slider-thumb-label:active,.mat-slider:not(.mat-slider-disabled) .mat-slider-thumb:active{cursor:-webkit-grabbing;cursor:grabbing}.mat-slider-thumb{position:absolute;right:-10px;bottom:-10px;box-sizing:border-box;width:20px;height:20px;border:3px solid transparent;border-radius:50%;transform:scale(.7);transition:transform .4s cubic-bezier(.25,.8,.25,1),background-color .4s cubic-bezier(.25,.8,.25,1),border-color .4s cubic-bezier(.25,.8,.25,1)}.mat-slider-thumb-label{display:none;align-items:center;justify-content:center;position:absolute;width:28px;height:28px;border-radius:50%;transition:transform .4s cubic-bezier(.25,.8,.25,1),border-radius .4s cubic-bezier(.25,.8,.25,1),background-color .4s cubic-bezier(.25,.8,.25,1)}@media screen and (-ms-high-contrast:active){.mat-slider-thumb-label{outline:solid 1px}}.mat-slider-thumb-label-text{z-index:1;opacity:0;transition:opacity .4s cubic-bezier(.25,.8,.25,1)}.mat-slider-sliding .mat-slider-thumb-container,.mat-slider-sliding .mat-slider-track-background,.mat-slider-sliding .mat-slider-track-fill{transition-duration:0s}.mat-slider-has-ticks .mat-slider-wrapper::after{content:'';position:absolute;border-width:0;border-style:solid;opacity:0;transition:opacity .4s cubic-bezier(.25,.8,.25,1)}.mat-slider-has-ticks.cdk-focused:not(.mat-slider-hide-last-tick) .mat-slider-wrapper::after,.mat-slider-has-ticks:hover:not(.mat-slider-hide-last-tick) .mat-slider-wrapper::after{opacity:1}.mat-slider-has-ticks.cdk-focused:not(.mat-slider-disabled) .mat-slider-ticks,.mat-slider-has-ticks:hover:not(.mat-slider-disabled) .mat-slider-ticks{opacity:1}.mat-slider-thumb-label-showing .mat-slider-focus-ring{transform:scale(0);opacity:0}.mat-slider-thumb-label-showing .mat-slider-thumb-label{display:flex}.mat-slider-axis-inverted .mat-slider-track-fill{transform-origin:100% 100%}.mat-slider-axis-inverted .mat-slider-track-background{transform-origin:0 0}.mat-slider:not(.mat-slider-disabled).cdk-focused.mat-slider-thumb-label-showing .mat-slider-thumb{transform:scale(0)}.mat-slider:not(.mat-slider-disabled).cdk-focused .mat-slider-thumb-label{border-radius:50% 50% 0}.mat-slider:not(.mat-slider-disabled).cdk-focused .mat-slider-thumb-label-text{opacity:1}.mat-slider:not(.mat-slider-disabled).cdk-mouse-focused .mat-slider-thumb,.mat-slider:not(.mat-slider-disabled).cdk-program-focused .mat-slider-thumb,.mat-slider:not(.mat-slider-disabled).cdk-touch-focused .mat-slider-thumb{border-width:2px;transform:scale(1)}.mat-slider-disabled .mat-slider-focus-ring{transform:scale(0);opacity:0}.mat-slider-disabled .mat-slider-thumb{border-width:4px;transform:scale(.5)}.mat-slider-disabled .mat-slider-thumb-label{display:none}.mat-slider-horizontal{height:48px;min-width:128px}.mat-slider-horizontal .mat-slider-wrapper{height:2px;top:23px;left:8px;right:8px}.mat-slider-horizontal .mat-slider-wrapper::after{height:2px;border-left-width:2px;right:0;top:0}.mat-slider-horizontal .mat-slider-track-wrapper{height:2px;width:100%}.mat-slider-horizontal .mat-slider-track-fill{height:2px;width:100%;transform:scaleX(0)}.mat-slider-horizontal .mat-slider-track-background{height:2px;width:100%;transform:scaleX(1)}.mat-slider-horizontal .mat-slider-ticks-container{height:2px;width:100%}@media screen and (-ms-high-contrast:active){.mat-slider-horizontal .mat-slider-ticks-container{height:0;outline:solid 2px;top:1px}}.mat-slider-horizontal .mat-slider-ticks{height:2px;width:100%}.mat-slider-horizontal .mat-slider-thumb-container{width:100%;height:0;top:50%}.mat-slider-horizontal .mat-slider-focus-ring{top:-15px;right:-15px}.mat-slider-horizontal .mat-slider-thumb-label{right:-14px;top:-40px;transform:translateY(26px) scale(.01) rotate(45deg)}.mat-slider-horizontal .mat-slider-thumb-label-text{transform:rotate(-45deg)}.mat-slider-horizontal.cdk-focused .mat-slider-thumb-label{transform:rotate(45deg)}@media screen and (-ms-high-contrast:active){.mat-slider-horizontal.cdk-focused .mat-slider-thumb-label,.mat-slider-horizontal.cdk-focused .mat-slider-thumb-label-text{transform:none}}.mat-slider-vertical{width:48px;min-height:128px}.mat-slider-vertical .mat-slider-wrapper{width:2px;top:8px;bottom:8px;left:23px}.mat-slider-vertical .mat-slider-wrapper::after{width:2px;border-top-width:2px;bottom:0;left:0}.mat-slider-vertical .mat-slider-track-wrapper{height:100%;width:2px}.mat-slider-vertical .mat-slider-track-fill{height:100%;width:2px;transform:scaleY(0)}.mat-slider-vertical .mat-slider-track-background{height:100%;width:2px;transform:scaleY(1)}.mat-slider-vertical .mat-slider-ticks-container{width:2px;height:100%}@media screen and (-ms-high-contrast:active){.mat-slider-vertical .mat-slider-ticks-container{width:0;outline:solid 2px;left:1px}}.mat-slider-vertical .mat-slider-focus-ring{bottom:-15px;left:-15px}.mat-slider-vertical .mat-slider-ticks{width:2px;height:100%}.mat-slider-vertical .mat-slider-thumb-container{height:100%;width:0;left:50%}.mat-slider-vertical .mat-slider-thumb{-webkit-backface-visibility:hidden;backface-visibility:hidden}.mat-slider-vertical .mat-slider-thumb-label{bottom:-14px;left:-40px;transform:translateX(26px) scale(.01) rotate(-45deg)}.mat-slider-vertical .mat-slider-thumb-label-text{transform:rotate(45deg)}.mat-slider-vertical.cdk-focused .mat-slider-thumb-label{transform:rotate(-45deg)}[dir=rtl] .mat-slider-wrapper::after{left:0;right:auto}[dir=rtl] .mat-slider-horizontal .mat-slider-track-fill{transform-origin:100% 100%}[dir=rtl] .mat-slider-horizontal .mat-slider-track-background{transform-origin:0 0}[dir=rtl] .mat-slider-horizontal.mat-slider-axis-inverted .mat-slider-track-fill{transform-origin:0 0}[dir=rtl] .mat-slider-horizontal.mat-slider-axis-inverted .mat-slider-track-background{transform-origin:100% 100%}.mat-slider._mat-animation-noopable .mat-slider-focus-ring,.mat-slider._mat-animation-noopable .mat-slider-has-ticks .mat-slider-wrapper::after,.mat-slider._mat-animation-noopable .mat-slider-thumb,.mat-slider._mat-animation-noopable .mat-slider-thumb-container,.mat-slider._mat-animation-noopable .mat-slider-thumb-label,.mat-slider._mat-animation-noopable .mat-slider-thumb-label-text,.mat-slider._mat-animation-noopable .mat-slider-ticks,.mat-slider._mat-animation-noopable .mat-slider-track-background,.mat-slider._mat-animation-noopable .mat-slider-track-fill{transition:none}\"],\n    encapsulation: 2,\n    changeDetection: 0\n  });\n  return MatSlider;\n}();\n\nvar MatSliderModule = /*@__PURE__*/function () {\n  var MatSliderModule = function MatSliderModule() {\n    _classCallCheck(this, MatSliderModule);\n  };\n\n  MatSliderModule.ɵfac = function MatSliderModule_Factory(t) {\n    return new (t || MatSliderModule)();\n  };\n\n  MatSliderModule.ɵmod =\n  /*@__PURE__*/\n\n  /*@__PURE__*/\n  ɵngcc0.ɵɵdefineNgModule({\n    type: MatSliderModule\n  });\n  MatSliderModule.ɵinj =\n  /*@__PURE__*/\n\n  /*@__PURE__*/\n  ɵngcc0.ɵɵdefineInjector({\n    providers: [{\n      provide: HAMMER_GESTURE_CONFIG,\n      useClass: GestureConfig\n    }],\n    imports: [[CommonModule, MatCommonModule], MatCommonModule]\n  });\n  return MatSliderModule;\n}();\n/*@__PURE__*/\n\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatSliderModule, {\n    declarations: function declarations() {\n      return [MatSlider];\n    },\n    imports: function imports() {\n      return [CommonModule, MatCommonModule];\n    },\n    exports: function exports() {\n      return [MatSlider, MatCommonModule];\n    }\n  });\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n\nexport { MatSliderModule, MAT_SLIDER_VALUE_ACCESSOR, MatSliderChange, MatSliderBase, _MatSliderMixinBase, MatSlider }; //# sourceMappingURL=slider.js.map","map":null,"metadata":{},"sourceType":"module"}