{"ast":null,"code":"import { operate } from '../util/lift';\nimport { OperatorSubscriber } from './OperatorSubscriber';\nimport { identity } from '../util/identity';\nexport function retry() {\n  var configOrCount = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : Infinity;\n  var config;\n\n  if (configOrCount && typeof configOrCount === 'object') {\n    config = configOrCount;\n  } else {\n    config = {\n      count: configOrCount\n    };\n  }\n\n  var _config = config,\n      count = _config.count,\n      _config$resetOnSucces = _config.resetOnSuccess,\n      resetOnSuccess = _config$resetOnSucces === void 0 ? false : _config$resetOnSucces;\n  return count <= 0 ? identity : operate(function (source, subscriber) {\n    var soFar = 0;\n    var innerSub;\n\n    var subscribeForRetry = function subscribeForRetry() {\n      var syncUnsub = false;\n      innerSub = source.subscribe(new OperatorSubscriber(subscriber, function (value) {\n        if (resetOnSuccess) {\n          soFar = 0;\n        }\n\n        subscriber.next(value);\n      }, undefined, function (err) {\n        if (soFar++ < count) {\n          if (innerSub) {\n            innerSub.unsubscribe();\n            innerSub = null;\n            subscribeForRetry();\n          } else {\n            syncUnsub = true;\n          }\n        } else {\n          subscriber.error(err);\n        }\n      }));\n\n      if (syncUnsub) {\n        innerSub.unsubscribe();\n        innerSub = null;\n        subscribeForRetry();\n      }\n    };\n\n    subscribeForRetry();\n  });\n} //# sourceMappingURL=retry.js.map","map":{"version":3,"sources":["/Users/adepertat/Dropbox/ECOLES/Openclassroom/P6_de_Pertat_Antoine/AntoinedePertat_6_240521/frontend/node_modules/rxjs/dist/esm/internal/operators/retry.js"],"names":["operate","OperatorSubscriber","identity","retry","configOrCount","Infinity","config","count","resetOnSuccess","source","subscriber","soFar","innerSub","subscribeForRetry","syncUnsub","subscribe","value","next","undefined","err","unsubscribe","error"],"mappings":"AAAA,SAASA,OAAT,QAAwB,cAAxB;AACA,SAASC,kBAAT,QAAmC,sBAAnC;AACA,SAASC,QAAT,QAAyB,kBAAzB;AACA,OAAO,SAASC,KAAT,GAAyC;AAAA,MAA1BC,aAA0B,uEAAVC,QAAU;AAC5C,MAAIC,MAAJ;;AACA,MAAIF,aAAa,IAAI,OAAOA,aAAP,KAAyB,QAA9C,EAAwD;AACpDE,IAAAA,MAAM,GAAGF,aAAT;AACH,GAFD,MAGK;AACDE,IAAAA,MAAM,GAAG;AACLC,MAAAA,KAAK,EAAEH;AADF,KAAT;AAGH;;AACD,gBAA0CE,MAA1C;AAAA,MAAQC,KAAR,WAAQA,KAAR;AAAA,sCAAeC,cAAf;AAAA,MAAeA,cAAf,sCAAgC,KAAhC;AACA,SAAOD,KAAK,IAAI,CAAT,GACDL,QADC,GAEDF,OAAO,CAAC,UAACS,MAAD,EAASC,UAAT,EAAwB;AAC9B,QAAIC,KAAK,GAAG,CAAZ;AACA,QAAIC,QAAJ;;AACA,QAAMC,iBAAiB,GAAG,SAApBA,iBAAoB,GAAM;AAC5B,UAAIC,SAAS,GAAG,KAAhB;AACAF,MAAAA,QAAQ,GAAGH,MAAM,CAACM,SAAP,CAAiB,IAAId,kBAAJ,CAAuBS,UAAvB,EAAmC,UAACM,KAAD,EAAW;AACtE,YAAIR,cAAJ,EAAoB;AAChBG,UAAAA,KAAK,GAAG,CAAR;AACH;;AACDD,QAAAA,UAAU,CAACO,IAAX,CAAgBD,KAAhB;AACH,OAL2B,EAKzBE,SALyB,EAKd,UAACC,GAAD,EAAS;AACnB,YAAIR,KAAK,KAAKJ,KAAd,EAAqB;AACjB,cAAIK,QAAJ,EAAc;AACVA,YAAAA,QAAQ,CAACQ,WAAT;AACAR,YAAAA,QAAQ,GAAG,IAAX;AACAC,YAAAA,iBAAiB;AACpB,WAJD,MAKK;AACDC,YAAAA,SAAS,GAAG,IAAZ;AACH;AACJ,SATD,MAUK;AACDJ,UAAAA,UAAU,CAACW,KAAX,CAAiBF,GAAjB;AACH;AACJ,OAnB2B,CAAjB,CAAX;;AAoBA,UAAIL,SAAJ,EAAe;AACXF,QAAAA,QAAQ,CAACQ,WAAT;AACAR,QAAAA,QAAQ,GAAG,IAAX;AACAC,QAAAA,iBAAiB;AACpB;AACJ,KA3BD;;AA4BAA,IAAAA,iBAAiB;AACpB,GAhCQ,CAFb;AAmCH,C,CACD","sourcesContent":["import { operate } from '../util/lift';\nimport { OperatorSubscriber } from './OperatorSubscriber';\nimport { identity } from '../util/identity';\nexport function retry(configOrCount = Infinity) {\n    let config;\n    if (configOrCount && typeof configOrCount === 'object') {\n        config = configOrCount;\n    }\n    else {\n        config = {\n            count: configOrCount,\n        };\n    }\n    const { count, resetOnSuccess = false } = config;\n    return count <= 0\n        ? identity\n        : operate((source, subscriber) => {\n            let soFar = 0;\n            let innerSub;\n            const subscribeForRetry = () => {\n                let syncUnsub = false;\n                innerSub = source.subscribe(new OperatorSubscriber(subscriber, (value) => {\n                    if (resetOnSuccess) {\n                        soFar = 0;\n                    }\n                    subscriber.next(value);\n                }, undefined, (err) => {\n                    if (soFar++ < count) {\n                        if (innerSub) {\n                            innerSub.unsubscribe();\n                            innerSub = null;\n                            subscribeForRetry();\n                        }\n                        else {\n                            syncUnsub = true;\n                        }\n                    }\n                    else {\n                        subscriber.error(err);\n                    }\n                }));\n                if (syncUnsub) {\n                    innerSub.unsubscribe();\n                    innerSub = null;\n                    subscribeForRetry();\n                }\n            };\n            subscribeForRetry();\n        });\n}\n//# sourceMappingURL=retry.js.map"]},"metadata":{},"sourceType":"module"}