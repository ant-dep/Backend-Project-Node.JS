{"ast":null,"code":"import _classCallCheck from \"/Users/adepertat/Dropbox/ECOLES/Openclassroom/P6_de_Pertat_Antoine/AntoinedePertat_6_240521/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/adepertat/Dropbox/ECOLES/Openclassroom/P6_de_Pertat_Antoine/AntoinedePertat_6_240521/frontend/node_modules/@babel/runtime/helpers/esm/createClass\";\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { animate, keyframes, state, style, transition, trigger } from '@angular/animations';\nimport { AriaDescriber, FocusMonitor, A11yModule } from '@angular/cdk/a11y';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { ESCAPE } from '@angular/cdk/keycodes';\nimport { BreakpointObserver, Breakpoints } from '@angular/cdk/layout';\nimport { Overlay, OverlayModule } from '@angular/cdk/overlay';\nimport { ScrollDispatcher } from '@angular/cdk/scrolling';\nimport { Platform } from '@angular/cdk/platform';\nimport { ComponentPortal } from '@angular/cdk/portal';\nimport { take, takeUntil } from 'rxjs/operators';\nimport { ChangeDetectionStrategy, ChangeDetectorRef, Component, Directive, ElementRef, Inject, InjectionToken, Input, NgZone, Optional, ViewContainerRef, ViewEncapsulation, NgModule } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { CommonModule } from '@angular/common';\nimport { GestureConfig, MatCommonModule } from '@angular/material/core';\nimport { HAMMER_GESTURE_CONFIG } from '@angular/platform-browser';\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/** *\n * Animations used by MatTooltip.\n * \\@docs-private\n  @type {?} */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/overlay';\nimport * as ɵngcc2 from '@angular/cdk/scrolling';\nimport * as ɵngcc3 from '@angular/cdk/platform';\nimport * as ɵngcc4 from '@angular/cdk/a11y';\nimport * as ɵngcc5 from '@angular/cdk/bidi';\nimport * as ɵngcc6 from '@angular/cdk/layout';\nimport * as ɵngcc7 from '@angular/common';\nvar matTooltipAnimations = {\n  /** Animation that transitions a tooltip in and out. */\n  tooltipState: /*@__PURE__*/trigger('state', [/*@__PURE__*/state('initial, void, hidden', /*@__PURE__*/style({\n    opacity: 0,\n    transform: 'scale(0)'\n  })), /*@__PURE__*/state('visible', /*@__PURE__*/style({\n    transform: 'scale(1)'\n  })), /*@__PURE__*/transition('* => visible', /*@__PURE__*/animate('200ms cubic-bezier(0, 0, 0.2, 1)', /*@__PURE__*/keyframes([/*@__PURE__*/style({\n    opacity: 0,\n    transform: 'scale(0)',\n    offset: 0\n  }), /*@__PURE__*/style({\n    opacity: 0.5,\n    transform: 'scale(0.99)',\n    offset: 0.5\n  }), /*@__PURE__*/style({\n    opacity: 1,\n    transform: 'scale(1)',\n    offset: 1\n  })]))), /*@__PURE__*/transition('* => hidden', /*@__PURE__*/animate('100ms cubic-bezier(0, 0, 0.2, 1)', /*@__PURE__*/style({\n    opacity: 0\n  })))])\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/** *\n * Time in ms to throttle repositioning after scroll events.\n  @type {?} */\n\nvar SCROLL_THROTTLE_MS = 20;\n/** *\n * CSS class that will be attached to the overlay panel.\n  @type {?} */\n\nvar TOOLTIP_PANEL_CLASS = 'mat-tooltip-panel';\n/**\n * Creates an error to be thrown if the user supplied an invalid tooltip position.\n * \\@docs-private\n * @param {?} position\n * @return {?}\n */\n\nfunction getMatTooltipInvalidPositionError(position) {\n  return Error(\"Tooltip position \\\"\".concat(position, \"\\\" is invalid.\"));\n}\n/** *\n * Injection token that determines the scroll handling while a tooltip is visible.\n  @type {?} */\n\n\nvar MAT_TOOLTIP_SCROLL_STRATEGY = /*@__PURE__*/new InjectionToken('mat-tooltip-scroll-strategy');\n/**\n * \\@docs-private\n * @param {?} overlay\n * @return {?}\n */\n\nfunction MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY(overlay) {\n  return function () {\n    return overlay.scrollStrategies.reposition({\n      scrollThrottle: SCROLL_THROTTLE_MS\n    });\n  };\n}\n/** *\n * \\@docs-private\n  @type {?} */\n\n\nvar MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_TOOLTIP_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY\n};\n/** *\n * Injection token to be used to override the default options for `matTooltip`.\n  @type {?} */\n\nvar MAT_TOOLTIP_DEFAULT_OPTIONS = /*@__PURE__*/new InjectionToken('mat-tooltip-default-options', {\n  providedIn: 'root',\n  factory: MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY\n});\n/**\n * \\@docs-private\n * @return {?}\n */\n\nfunction MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY() {\n  return {\n    showDelay: 0,\n    hideDelay: 0,\n    touchendHideDelay: 1500\n  };\n}\n\nvar MatTooltip = /*@__PURE__*/function () {\n  var MatTooltip = /*#__PURE__*/function () {\n    /**\n     * @param {?} _overlay\n     * @param {?} _elementRef\n     * @param {?} _scrollDispatcher\n     * @param {?} _viewContainerRef\n     * @param {?} _ngZone\n     * @param {?} _platform\n     * @param {?} _ariaDescriber\n     * @param {?} _focusMonitor\n     * @param {?} scrollStrategy\n     * @param {?} _dir\n     * @param {?} _defaultOptions\n     */\n    function MatTooltip(_overlay, _elementRef, _scrollDispatcher, _viewContainerRef, _ngZone, _platform, _ariaDescriber, _focusMonitor, scrollStrategy, _dir, _defaultOptions) {\n      var _this = this;\n\n      _classCallCheck(this, MatTooltip);\n\n      this._overlay = _overlay;\n      this._elementRef = _elementRef;\n      this._scrollDispatcher = _scrollDispatcher;\n      this._viewContainerRef = _viewContainerRef;\n      this._ngZone = _ngZone;\n      this._platform = _platform;\n      this._ariaDescriber = _ariaDescriber;\n      this._focusMonitor = _focusMonitor;\n      this._dir = _dir;\n      this._defaultOptions = _defaultOptions;\n      this._position = 'below';\n      this._disabled = false;\n      /**\n       * The default delay in ms before showing the tooltip after show is called\n       */\n\n      this.showDelay = this._defaultOptions.showDelay;\n      /**\n       * The default delay in ms before hiding the tooltip after hide is called\n       */\n\n      this.hideDelay = this._defaultOptions.hideDelay;\n      this._message = '';\n      this._manualListeners = new Map();\n      /**\n       * Emits when the component is destroyed.\n       */\n\n      this._destroyed = new Subject();\n      this._scrollStrategy = scrollStrategy;\n      /** @type {?} */\n\n      var element = _elementRef.nativeElement;\n      /** @type {?} */\n\n      var elementStyle =\n      /** @type {?} */\n      element.style; // The mouse events shouldn't be bound on mobile devices, because they can prevent the\n      // first tap from firing its click event or can cause the tooltip to open for clicks.\n\n      if (!_platform.IOS && !_platform.ANDROID) {\n        this._manualListeners.set('mouseenter', function () {\n          return _this.show();\n        }).set('mouseleave', function () {\n          return _this.hide();\n        }).forEach(function (listener, event) {\n          return element.addEventListener(event, listener);\n        });\n      }\n\n      if (element.nodeName === 'INPUT' || element.nodeName === 'TEXTAREA') {\n        // When we bind a gesture event on an element (in this case `longpress`), HammerJS\n        // will add some inline styles by default, including `user-select: none`. This is\n        // problematic on iOS and in Safari, because it will prevent users from typing in inputs.\n        // Since `user-select: none` is not needed for the `longpress` event and can cause unexpected\n        // behavior for text fields, we always clear the `user-select` to avoid such issues.\n        elementStyle.webkitUserSelect = elementStyle.userSelect = elementStyle.msUserSelect = '';\n      } // Hammer applies `-webkit-user-drag: none` on all elements by default,\n      // which breaks the native drag&drop. If the consumer explicitly made\n      // the element draggable, clear the `-webkit-user-drag`.\n\n\n      if (element.draggable && elementStyle.webkitUserDrag === 'none') {\n        elementStyle.webkitUserDrag = '';\n      }\n\n      _focusMonitor.monitor(_elementRef).pipe(takeUntil(this._destroyed)).subscribe(function (origin) {\n        // Note that the focus monitor runs outside the Angular zone.\n        if (!origin) {\n          _ngZone.run(function () {\n            return _this.hide(0);\n          });\n        } else if (origin === 'keyboard') {\n          _ngZone.run(function () {\n            return _this.show();\n          });\n        }\n      });\n    }\n    /**\n     * Allows the user to define the position of the tooltip relative to the parent element\n     * @return {?}\n     */\n\n\n    _createClass(MatTooltip, [{\n      key: \"position\",\n      get: function get() {\n        return this._position;\n      }\n      /**\n       * @param {?} value\n       * @return {?}\n       */\n      ,\n      set: function set(value) {\n        if (value !== this._position) {\n          this._position = value;\n\n          if (this._overlayRef) {\n            this._updatePosition();\n\n            if (this._tooltipInstance) {\n              /** @type {?} */\n              this._tooltipInstance.show(0);\n            }\n\n            this._overlayRef.updatePosition();\n          }\n        }\n      }\n      /**\n       * Disables the display of the tooltip.\n       * @return {?}\n       */\n\n    }, {\n      key: \"disabled\",\n      get: function get() {\n        return this._disabled;\n      }\n      /**\n       * @param {?} value\n       * @return {?}\n       */\n      ,\n      set: function set(value) {\n        this._disabled = coerceBooleanProperty(value); // If tooltip is disabled, hide immediately.\n\n        if (this._disabled) {\n          this.hide(0);\n        }\n      }\n      /**\n       * The message to be displayed in the tooltip\n       * @return {?}\n       */\n\n    }, {\n      key: \"message\",\n      get: function get() {\n        return this._message;\n      }\n      /**\n       * @param {?} value\n       * @return {?}\n       */\n      ,\n      set: function set(value) {\n        this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this._message); // If the message is not a string (e.g. number), convert it to a string and trim it.\n\n\n        this._message = value != null ? \"\".concat(value).trim() : '';\n\n        if (!this._message && this._isTooltipVisible()) {\n          this.hide(0);\n        } else {\n          this._updateTooltipMessage();\n\n          this._ariaDescriber.describe(this._elementRef.nativeElement, this.message);\n        }\n      }\n      /**\n       * Classes to be passed to the tooltip. Supports the same syntax as `ngClass`.\n       * @return {?}\n       */\n\n    }, {\n      key: \"tooltipClass\",\n      get: function get() {\n        return this._tooltipClass;\n      }\n      /**\n       * @param {?} value\n       * @return {?}\n       */\n      ,\n      set: function set(value) {\n        this._tooltipClass = value;\n\n        if (this._tooltipInstance) {\n          this._setTooltipClass(this._tooltipClass);\n        }\n      }\n      /**\n       * Dispose the tooltip when destroyed.\n       * @return {?}\n       */\n\n    }, {\n      key: \"ngOnDestroy\",\n      value: function ngOnDestroy() {\n        var _this2 = this;\n\n        if (this._overlayRef) {\n          this._overlayRef.dispose();\n\n          this._tooltipInstance = null;\n        } // Clean up the event listeners set in the constructor\n\n\n        if (!this._platform.IOS) {\n          this._manualListeners.forEach(function (listener, event) {\n            return _this2._elementRef.nativeElement.removeEventListener(event, listener);\n          });\n\n          this._manualListeners.clear();\n        }\n\n        this._destroyed.next();\n\n        this._destroyed.complete();\n\n        this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this.message);\n\n        this._focusMonitor.stopMonitoring(this._elementRef);\n      }\n      /**\n       * Shows the tooltip after the delay in ms, defaults to tooltip-delay-show or 0ms if no input\n       * @param {?=} delay\n       * @return {?}\n       */\n\n    }, {\n      key: \"show\",\n      value: function show() {\n        var _this3 = this;\n\n        var delay = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.showDelay;\n\n        if (this.disabled || !this.message || this._isTooltipVisible() && !this._tooltipInstance._showTimeoutId && !this._tooltipInstance._hideTimeoutId) {\n          return;\n        }\n        /** @type {?} */\n\n\n        var overlayRef = this._createOverlay();\n\n        this._detach();\n\n        this._portal = this._portal || new ComponentPortal(TooltipComponent, this._viewContainerRef);\n        this._tooltipInstance = overlayRef.attach(this._portal).instance;\n\n        this._tooltipInstance.afterHidden().pipe(takeUntil(this._destroyed)).subscribe(function () {\n          return _this3._detach();\n        });\n\n        this._setTooltipClass(this._tooltipClass);\n\n        this._updateTooltipMessage();\n        /** @type {?} */\n\n\n        this._tooltipInstance.show(delay);\n      }\n      /**\n       * Hides the tooltip after the delay in ms, defaults to tooltip-delay-hide or 0ms if no input\n       * @param {?=} delay\n       * @return {?}\n       */\n\n    }, {\n      key: \"hide\",\n      value: function hide() {\n        var delay = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.hideDelay;\n\n        if (this._tooltipInstance) {\n          this._tooltipInstance.hide(delay);\n        }\n      }\n      /**\n       * Shows/hides the tooltip\n       * @return {?}\n       */\n\n    }, {\n      key: \"toggle\",\n      value: function toggle() {\n        this._isTooltipVisible() ? this.hide() : this.show();\n      }\n      /**\n       * Returns true if the tooltip is currently visible to the user\n       * @return {?}\n       */\n\n    }, {\n      key: \"_isTooltipVisible\",\n      value: function _isTooltipVisible() {\n        return !!this._tooltipInstance && this._tooltipInstance.isVisible();\n      }\n      /**\n       * Handles the keydown events on the host element.\n       * @param {?} e\n       * @return {?}\n       */\n\n    }, {\n      key: \"_handleKeydown\",\n      value: function _handleKeydown(e) {\n        if (this._isTooltipVisible() && e.keyCode === ESCAPE) {\n          e.stopPropagation();\n          this.hide(0);\n        }\n      }\n      /**\n       * Handles the touchend events on the host element.\n       * @return {?}\n       */\n\n    }, {\n      key: \"_handleTouchend\",\n      value: function _handleTouchend() {\n        this.hide(this._defaultOptions.touchendHideDelay);\n      }\n      /**\n       * Create the overlay config and position strategy\n       * @return {?}\n       */\n\n    }, {\n      key: \"_createOverlay\",\n      value: function _createOverlay() {\n        var _this4 = this;\n\n        if (this._overlayRef) {\n          return this._overlayRef;\n        }\n        /** @type {?} */\n\n\n        var strategy = this._overlay.position().flexibleConnectedTo(this._elementRef).withTransformOriginOn('.mat-tooltip').withFlexibleDimensions(false).withViewportMargin(8);\n        /** @type {?} */\n\n\n        var scrollableAncestors = this._scrollDispatcher.getAncestorScrollContainers(this._elementRef);\n\n        strategy.withScrollableContainers(scrollableAncestors);\n        strategy.positionChanges.pipe(takeUntil(this._destroyed)).subscribe(function (change) {\n          if (_this4._tooltipInstance) {\n            if (change.scrollableViewProperties.isOverlayClipped && _this4._tooltipInstance.isVisible()) {\n              // After position changes occur and the overlay is clipped by\n              // a parent scrollable then close the tooltip.\n              _this4._ngZone.run(function () {\n                return _this4.hide(0);\n              });\n            }\n          }\n        });\n        this._overlayRef = this._overlay.create({\n          direction: this._dir,\n          positionStrategy: strategy,\n          panelClass: TOOLTIP_PANEL_CLASS,\n          scrollStrategy: this._scrollStrategy()\n        });\n\n        this._updatePosition();\n\n        this._overlayRef.detachments().pipe(takeUntil(this._destroyed)).subscribe(function () {\n          return _this4._detach();\n        });\n\n        return this._overlayRef;\n      }\n      /**\n       * Detaches the currently-attached tooltip.\n       * @return {?}\n       */\n\n    }, {\n      key: \"_detach\",\n      value: function _detach() {\n        if (this._overlayRef && this._overlayRef.hasAttached()) {\n          this._overlayRef.detach();\n        }\n\n        this._tooltipInstance = null;\n      }\n      /**\n       * Updates the position of the current tooltip.\n       * @return {?}\n       */\n\n    }, {\n      key: \"_updatePosition\",\n      value: function _updatePosition() {\n        /** @type {?} */\n        var position =\n        /** @type {?} */\n        this._overlayRef.getConfig().positionStrategy;\n        /** @type {?} */\n\n\n        var origin = this._getOrigin();\n        /** @type {?} */\n\n\n        var overlay = this._getOverlayPosition();\n\n        position.withPositions([Object.assign({}, origin.main, overlay.main), Object.assign({}, origin.fallback, overlay.fallback)]);\n      }\n      /**\n       * Returns the origin position and a fallback position based on the user's position preference.\n       * The fallback position is the inverse of the origin (e.g. `'below' -> 'above'`).\n       * @return {?}\n       */\n\n    }, {\n      key: \"_getOrigin\",\n      value: function _getOrigin() {\n        /** @type {?} */\n        var isLtr = !this._dir || this._dir.value == 'ltr';\n        /** @type {?} */\n\n        var position = this.position;\n        /** @type {?} */\n\n        var originPosition;\n\n        if (position == 'above' || position == 'below') {\n          originPosition = {\n            originX: 'center',\n            originY: position == 'above' ? 'top' : 'bottom'\n          };\n        } else if (position == 'before' || position == 'left' && isLtr || position == 'right' && !isLtr) {\n          originPosition = {\n            originX: 'start',\n            originY: 'center'\n          };\n        } else if (position == 'after' || position == 'right' && isLtr || position == 'left' && !isLtr) {\n          originPosition = {\n            originX: 'end',\n            originY: 'center'\n          };\n        } else {\n          throw getMatTooltipInvalidPositionError(position);\n        }\n\n        var _this$_invertPosition = this._invertPosition(originPosition.originX, originPosition.originY),\n            x = _this$_invertPosition.x,\n            y = _this$_invertPosition.y;\n\n        return {\n          main: originPosition,\n          fallback: {\n            originX: x,\n            originY: y\n          }\n        };\n      }\n      /**\n       * Returns the overlay position and a fallback position based on the user's preference\n       * @return {?}\n       */\n\n    }, {\n      key: \"_getOverlayPosition\",\n      value: function _getOverlayPosition() {\n        /** @type {?} */\n        var isLtr = !this._dir || this._dir.value == 'ltr';\n        /** @type {?} */\n\n        var position = this.position;\n        /** @type {?} */\n\n        var overlayPosition;\n\n        if (position == 'above') {\n          overlayPosition = {\n            overlayX: 'center',\n            overlayY: 'bottom'\n          };\n        } else if (position == 'below') {\n          overlayPosition = {\n            overlayX: 'center',\n            overlayY: 'top'\n          };\n        } else if (position == 'before' || position == 'left' && isLtr || position == 'right' && !isLtr) {\n          overlayPosition = {\n            overlayX: 'end',\n            overlayY: 'center'\n          };\n        } else if (position == 'after' || position == 'right' && isLtr || position == 'left' && !isLtr) {\n          overlayPosition = {\n            overlayX: 'start',\n            overlayY: 'center'\n          };\n        } else {\n          throw getMatTooltipInvalidPositionError(position);\n        }\n\n        var _this$_invertPosition2 = this._invertPosition(overlayPosition.overlayX, overlayPosition.overlayY),\n            x = _this$_invertPosition2.x,\n            y = _this$_invertPosition2.y;\n\n        return {\n          main: overlayPosition,\n          fallback: {\n            overlayX: x,\n            overlayY: y\n          }\n        };\n      }\n      /**\n       * Updates the tooltip message and repositions the overlay according to the new message length\n       * @return {?}\n       */\n\n    }, {\n      key: \"_updateTooltipMessage\",\n      value: function _updateTooltipMessage() {\n        var _this5 = this;\n\n        // Must wait for the message to be painted to the tooltip so that the overlay can properly\n        // calculate the correct positioning based on the size of the text.\n        if (this._tooltipInstance) {\n          this._tooltipInstance.message = this.message;\n\n          this._tooltipInstance._markForCheck();\n\n          this._ngZone.onMicrotaskEmpty.asObservable().pipe(take(1), takeUntil(this._destroyed)).subscribe(function () {\n            if (_this5._tooltipInstance) {\n              /** @type {?} */\n              _this5._overlayRef.updatePosition();\n            }\n          });\n        }\n      }\n      /**\n       * Updates the tooltip class\n       * @param {?} tooltipClass\n       * @return {?}\n       */\n\n    }, {\n      key: \"_setTooltipClass\",\n      value: function _setTooltipClass(tooltipClass) {\n        if (this._tooltipInstance) {\n          this._tooltipInstance.tooltipClass = tooltipClass;\n\n          this._tooltipInstance._markForCheck();\n        }\n      }\n      /**\n       * Inverts an overlay position.\n       * @param {?} x\n       * @param {?} y\n       * @return {?}\n       */\n\n    }, {\n      key: \"_invertPosition\",\n      value: function _invertPosition(x, y) {\n        if (this.position === 'above' || this.position === 'below') {\n          if (y === 'top') {\n            y = 'bottom';\n          } else if (y === 'bottom') {\n            y = 'top';\n          }\n        } else {\n          if (x === 'end') {\n            x = 'start';\n          } else if (x === 'start') {\n            x = 'end';\n          }\n        }\n\n        return {\n          x: x,\n          y: y\n        };\n      }\n    }]);\n\n    return MatTooltip;\n  }();\n\n  MatTooltip.ɵfac = function MatTooltip_Factory(t) {\n    return new (t || MatTooltip)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.Overlay), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.ScrollDispatcher), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.Platform), ɵngcc0.ɵɵdirectiveInject(ɵngcc4.AriaDescriber), ɵngcc0.ɵɵdirectiveInject(ɵngcc4.FocusMonitor), ɵngcc0.ɵɵdirectiveInject(MAT_TOOLTIP_SCROLL_STRATEGY), ɵngcc0.ɵɵdirectiveInject(ɵngcc5.Directionality, 8), ɵngcc0.ɵɵdirectiveInject(MAT_TOOLTIP_DEFAULT_OPTIONS, 8));\n  };\n\n  MatTooltip.ɵdir =\n  /*@__PURE__*/\n\n  /*@__PURE__*/\n  ɵngcc0.ɵɵdefineDirective({\n    type: MatTooltip,\n    selectors: [[\"\", \"matTooltip\", \"\"]],\n    hostBindings: function MatTooltip_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"longpress\", function MatTooltip_longpress_HostBindingHandler() {\n          return ctx.show();\n        })(\"keydown\", function MatTooltip_keydown_HostBindingHandler($event) {\n          return ctx._handleKeydown($event);\n        })(\"touchend\", function MatTooltip_touchend_HostBindingHandler() {\n          return ctx._handleTouchend();\n        });\n      }\n    },\n    inputs: {\n      showDelay: [\"matTooltipShowDelay\", \"showDelay\"],\n      hideDelay: [\"matTooltipHideDelay\", \"hideDelay\"],\n      position: [\"matTooltipPosition\", \"position\"],\n      disabled: [\"matTooltipDisabled\", \"disabled\"],\n      message: [\"matTooltip\", \"message\"],\n      tooltipClass: [\"matTooltipClass\", \"tooltipClass\"]\n    },\n    exportAs: [\"matTooltip\"]\n  });\n  return MatTooltip;\n}();\n\nvar TooltipComponent = /*@__PURE__*/function () {\n  var TooltipComponent = /*#__PURE__*/function () {\n    /**\n     * @param {?} _changeDetectorRef\n     * @param {?} _breakpointObserver\n     */\n    function TooltipComponent(_changeDetectorRef, _breakpointObserver) {\n      _classCallCheck(this, TooltipComponent);\n\n      this._changeDetectorRef = _changeDetectorRef;\n      this._breakpointObserver = _breakpointObserver;\n      /**\n       * Property watched by the animation framework to show or hide the tooltip\n       */\n\n      this._visibility = 'initial';\n      /**\n       * Whether interactions on the page should close the tooltip\n       */\n\n      this._closeOnInteraction = false;\n      /**\n       * Subject for notifying that the tooltip has been hidden from the view\n       */\n\n      this._onHide = new Subject();\n      /**\n       * Stream that emits whether the user has a handset-sized display.\n       */\n\n      this._isHandset = this._breakpointObserver.observe(Breakpoints.Handset);\n    }\n    /**\n     * Shows the tooltip with an animation originating from the provided origin\n     * @param {?} delay Amount of milliseconds to the delay showing the tooltip.\n     * @return {?}\n     */\n\n\n    _createClass(TooltipComponent, [{\n      key: \"show\",\n      value: function show(delay) {\n        var _this6 = this;\n\n        // Cancel the delayed hide if it is scheduled\n        if (this._hideTimeoutId) {\n          clearTimeout(this._hideTimeoutId);\n          this._hideTimeoutId = null;\n        } // Body interactions should cancel the tooltip if there is a delay in showing.\n\n\n        this._closeOnInteraction = true;\n        this._showTimeoutId = setTimeout(function () {\n          _this6._visibility = 'visible';\n          _this6._showTimeoutId = null; // Mark for check so if any parent component has set the\n          // ChangeDetectionStrategy to OnPush it will be checked anyways\n\n          _this6._markForCheck();\n        }, delay);\n      }\n      /**\n       * Begins the animation to hide the tooltip after the provided delay in ms.\n       * @param {?} delay Amount of milliseconds to delay showing the tooltip.\n       * @return {?}\n       */\n\n    }, {\n      key: \"hide\",\n      value: function hide(delay) {\n        var _this7 = this;\n\n        // Cancel the delayed show if it is scheduled\n        if (this._showTimeoutId) {\n          clearTimeout(this._showTimeoutId);\n          this._showTimeoutId = null;\n        }\n\n        this._hideTimeoutId = setTimeout(function () {\n          _this7._visibility = 'hidden';\n          _this7._hideTimeoutId = null; // Mark for check so if any parent component has set the\n          // ChangeDetectionStrategy to OnPush it will be checked anyways\n\n          _this7._markForCheck();\n        }, delay);\n      }\n      /**\n       * Returns an observable that notifies when the tooltip has been hidden from view.\n       * @return {?}\n       */\n\n    }, {\n      key: \"afterHidden\",\n      value: function afterHidden() {\n        return this._onHide.asObservable();\n      }\n      /**\n       * Whether the tooltip is being displayed.\n       * @return {?}\n       */\n\n    }, {\n      key: \"isVisible\",\n      value: function isVisible() {\n        return this._visibility === 'visible';\n      }\n      /**\n       * @return {?}\n       */\n\n    }, {\n      key: \"_animationStart\",\n      value: function _animationStart() {\n        this._closeOnInteraction = false;\n      }\n      /**\n       * @param {?} event\n       * @return {?}\n       */\n\n    }, {\n      key: \"_animationDone\",\n      value: function _animationDone(event) {\n        /** @type {?} */\n        var toState =\n        /** @type {?} */\n        event.toState;\n\n        if (toState === 'hidden' && !this.isVisible()) {\n          this._onHide.next();\n        }\n\n        if (toState === 'visible' || toState === 'hidden') {\n          this._closeOnInteraction = true;\n        }\n      }\n      /**\n       * Interactions on the HTML body should close the tooltip immediately as defined in the\n       * material design spec.\n       * https://material.io/design/components/tooltips.html#behavior\n       * @return {?}\n       */\n\n    }, {\n      key: \"_handleBodyInteraction\",\n      value: function _handleBodyInteraction() {\n        if (this._closeOnInteraction) {\n          this.hide(0);\n        }\n      }\n      /**\n       * Marks that the tooltip needs to be checked in the next change detection run.\n       * Mainly used for rendering the initial text before positioning a tooltip, which\n       * can be problematic in components with OnPush change detection.\n       * @return {?}\n       */\n\n    }, {\n      key: \"_markForCheck\",\n      value: function _markForCheck() {\n        this._changeDetectorRef.markForCheck();\n      }\n    }]);\n\n    return TooltipComponent;\n  }();\n\n  TooltipComponent.ɵfac = function TooltipComponent_Factory(t) {\n    return new (t || TooltipComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc6.BreakpointObserver));\n  };\n\n  TooltipComponent.ɵcmp =\n  /*@__PURE__*/\n\n  /*@__PURE__*/\n  ɵngcc0.ɵɵdefineComponent({\n    type: TooltipComponent,\n    selectors: [[\"mat-tooltip-component\"]],\n    hostAttrs: [\"aria-hidden\", \"true\"],\n    hostVars: 2,\n    hostBindings: function TooltipComponent_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"click\", function TooltipComponent_click_HostBindingHandler() {\n          return ctx._handleBodyInteraction();\n        }, false, ɵngcc0.ɵɵresolveBody);\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵstyleProp(\"zoom\", ctx._visibility === \"visible\" ? 1 : null);\n      }\n    },\n    decls: 3,\n    vars: 7,\n    consts: [[1, \"mat-tooltip\", 3, \"ngClass\"]],\n    template: function TooltipComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵelementStart(0, \"div\", 0);\n        ɵngcc0.ɵɵlistener(\"@state.start\", function TooltipComponent_Template_div_animation_state_start_0_listener() {\n          return ctx._animationStart();\n        })(\"@state.done\", function TooltipComponent_Template_div_animation_state_done_0_listener($event) {\n          return ctx._animationDone($event);\n        });\n        ɵngcc0.ɵɵpipe(1, \"async\");\n        ɵngcc0.ɵɵtext(2);\n        ɵngcc0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        var tmp_0_0;\n        ɵngcc0.ɵɵclassProp(\"mat-tooltip-handset\", (tmp_0_0 = ɵngcc0.ɵɵpipeBind1(1, 5, ctx._isHandset)) == null ? null : tmp_0_0.matches);\n        ɵngcc0.ɵɵproperty(\"ngClass\", ctx.tooltipClass)(\"@state\", ctx._visibility);\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵtextInterpolate(ctx.message);\n      }\n    },\n    directives: [ɵngcc7.NgClass],\n    pipes: [ɵngcc7.AsyncPipe],\n    styles: [\".mat-tooltip-panel{pointer-events:none!important}.mat-tooltip{color:#fff;border-radius:4px;margin:14px;max-width:250px;padding-left:8px;padding-right:8px;overflow:hidden;text-overflow:ellipsis}@media screen and (-ms-high-contrast:active){.mat-tooltip{outline:solid 1px}}.mat-tooltip-handset{margin:24px;padding-left:16px;padding-right:16px}\"],\n    encapsulation: 2,\n    data: {\n      animation: [matTooltipAnimations.tooltipState]\n    },\n    changeDetection: 0\n  });\n  return TooltipComponent;\n}();\n\nvar MatTooltipModule = /*@__PURE__*/function () {\n  var MatTooltipModule = function MatTooltipModule() {\n    _classCallCheck(this, MatTooltipModule);\n  };\n\n  MatTooltipModule.ɵfac = function MatTooltipModule_Factory(t) {\n    return new (t || MatTooltipModule)();\n  };\n\n  MatTooltipModule.ɵmod =\n  /*@__PURE__*/\n\n  /*@__PURE__*/\n  ɵngcc0.ɵɵdefineNgModule({\n    type: MatTooltipModule\n  });\n  MatTooltipModule.ɵinj =\n  /*@__PURE__*/\n\n  /*@__PURE__*/\n  ɵngcc0.ɵɵdefineInjector({\n    providers: [MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER, {\n      provide: HAMMER_GESTURE_CONFIG,\n      useClass: GestureConfig\n    }],\n    imports: [[A11yModule, CommonModule, OverlayModule, MatCommonModule], MatCommonModule]\n  });\n  return MatTooltipModule;\n}();\n/*@__PURE__*/\n\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatTooltipModule, {\n    declarations: function declarations() {\n      return [MatTooltip, TooltipComponent];\n    },\n    imports: function imports() {\n      return [A11yModule, CommonModule, OverlayModule, MatCommonModule];\n    },\n    exports: function exports() {\n      return [MatTooltip, TooltipComponent, MatCommonModule];\n    }\n  });\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n\nexport { MatTooltipModule, getMatTooltipInvalidPositionError, MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY, MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY, SCROLL_THROTTLE_MS, TOOLTIP_PANEL_CLASS, MAT_TOOLTIP_SCROLL_STRATEGY, MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER, MAT_TOOLTIP_DEFAULT_OPTIONS, MatTooltip, TooltipComponent, matTooltipAnimations }; //# sourceMappingURL=tooltip.js.map","map":null,"metadata":{},"sourceType":"module"}