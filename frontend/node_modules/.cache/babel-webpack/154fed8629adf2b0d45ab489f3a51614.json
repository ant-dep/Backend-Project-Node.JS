{"ast":null,"code":"import _toConsumableArray from \"/Users/adepertat/Dropbox/ECOLES/Openclassroom/P6_de_Pertat_Antoine/dwj-projet6/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _createClass from \"/Users/adepertat/Dropbox/ECOLES/Openclassroom/P6_de_Pertat_Antoine/dwj-projet6/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/Users/adepertat/Dropbox/ECOLES/Openclassroom/P6_de_Pertat_Antoine/dwj-projet6/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/adepertat/Dropbox/ECOLES/Openclassroom/P6_de_Pertat_Antoine/dwj-projet6/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _classCallCheck from \"/Users/adepertat/Dropbox/ECOLES/Openclassroom/P6_de_Pertat_Antoine/dwj-projet6/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { ActiveDescendantKeyManager } from '@angular/cdk/a11y';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { ChangeDetectionStrategy, ChangeDetectorRef, Component, ContentChildren, ElementRef, EventEmitter, Inject, InjectionToken, Input, Output, TemplateRef, ViewChild, ViewEncapsulation, Directive, forwardRef, Host, NgZone, Optional, ViewContainerRef, NgModule } from '@angular/core';\nimport { MAT_OPTION_PARENT_COMPONENT, MatOptgroup, MatOption, mixinDisableRipple, _countGroupLabelsBeforeOption, _getOptionScrollPosition, MatOptionSelectionChange, MatOptionModule, MatCommonModule } from '@angular/material/core';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { DOWN_ARROW, ENTER, ESCAPE, TAB, UP_ARROW } from '@angular/cdk/keycodes';\nimport { Overlay, OverlayConfig, OverlayModule } from '@angular/cdk/overlay';\nimport { TemplatePortal } from '@angular/cdk/portal';\nimport { DOCUMENT, CommonModule } from '@angular/common';\nimport { filter, take, switchMap, delay, tap, map } from 'rxjs/operators';\nimport { ViewportRuler } from '@angular/cdk/scrolling';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { MatFormField } from '@angular/material/form-field';\nimport { Subscription, defer, fromEvent, merge, of, Subject } from 'rxjs';\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/** *\n * Autocomplete IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n  @type {?} */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/common';\nimport * as ɵngcc2 from '@angular/cdk/overlay';\nimport * as ɵngcc3 from '@angular/cdk/bidi';\nimport * as ɵngcc4 from '@angular/material/form-field';\nimport * as ɵngcc5 from '@angular/cdk/scrolling';\nvar _c0 = [\"panel\"];\n\nfunction MatAutocomplete_ng_template_0_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"div\", 0, 1);\n    ɵngcc0.ɵɵprojection(2);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"id\", ctx_r0.id)(\"ngClass\", ctx_r0._classList);\n  }\n}\n\nvar _c1 = [\"*\"];\nvar _uniqueAutocompleteIdCounter = 0;\n/**\n * Event object that is emitted when an autocomplete option is selected.\n */\n\nvar MatAutocompleteSelectedEvent =\n/**\n * @param {?} source\n * @param {?} option\n */\nfunction MatAutocompleteSelectedEvent(source, option) {\n  _classCallCheck(this, MatAutocompleteSelectedEvent);\n\n  this.source = source;\n  this.option = option;\n};\n/**\n * \\@docs-private\n */\n\n\nvar MatAutocompleteBase = function MatAutocompleteBase() {\n  _classCallCheck(this, MatAutocompleteBase);\n};\n/** @type {?} */\n\n\nvar _MatAutocompleteMixinBase = mixinDisableRipple(MatAutocompleteBase);\n/** *\n * Injection token to be used to override the default options for `mat-autocomplete`.\n  @type {?} */\n\n\nvar MAT_AUTOCOMPLETE_DEFAULT_OPTIONS = new InjectionToken('mat-autocomplete-default-options', {\n  providedIn: 'root',\n  factory: MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY\n});\n/**\n * \\@docs-private\n * @return {?}\n */\n\nfunction MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY() {\n  return {\n    autoActiveFirstOption: false\n  };\n}\n\nvar MatAutocomplete = /*#__PURE__*/function (_MatAutocompleteMixin) {\n  _inherits(MatAutocomplete, _MatAutocompleteMixin);\n\n  var _super = _createSuper(MatAutocomplete);\n\n  /**\n   * @param {?} _changeDetectorRef\n   * @param {?} _elementRef\n   * @param {?} defaults\n   */\n  function MatAutocomplete(_changeDetectorRef, _elementRef, defaults) {\n    var _this;\n\n    _classCallCheck(this, MatAutocomplete);\n\n    _this = _super.call(this);\n    _this._changeDetectorRef = _changeDetectorRef;\n    _this._elementRef = _elementRef;\n    /**\n     * Whether the autocomplete panel should be visible, depending on option length.\n     */\n\n    _this.showPanel = false;\n    _this._isOpen = false;\n    /**\n     * Function that maps an option's control value to its display value in the trigger.\n     */\n\n    _this.displayWith = null;\n    /**\n     * Event that is emitted whenever an option from the list is selected.\n     */\n\n    _this.optionSelected = new EventEmitter();\n    /**\n     * Event that is emitted when the autocomplete panel is opened.\n     */\n\n    _this.opened = new EventEmitter();\n    /**\n     * Event that is emitted when the autocomplete panel is closed.\n     */\n\n    _this.closed = new EventEmitter();\n    _this._classList = {};\n    /**\n     * Unique ID to be used by autocomplete trigger's \"aria-owns\" property.\n     */\n\n    _this.id = \"mat-autocomplete-\".concat(_uniqueAutocompleteIdCounter++);\n    _this._autoActiveFirstOption = !!defaults.autoActiveFirstOption;\n    return _this;\n  }\n  /**\n   * Whether the autocomplete panel is open.\n   * @return {?}\n   */\n\n\n  _createClass(MatAutocomplete, [{\n    key: \"isOpen\",\n    get: function get() {\n      return this._isOpen && this.showPanel;\n    }\n    /**\n     * Whether the first option should be highlighted when the autocomplete panel is opened.\n     * Can be configured globally through the `MAT_AUTOCOMPLETE_DEFAULT_OPTIONS` token.\n     * @return {?}\n     */\n\n  }, {\n    key: \"autoActiveFirstOption\",\n    get: function get() {\n      return this._autoActiveFirstOption;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ,\n    set: function set(value) {\n      this._autoActiveFirstOption = coerceBooleanProperty(value);\n    }\n    /**\n     * Takes classes set on the host mat-autocomplete element and applies them to the panel\n     * inside the overlay container to allow for easy styling.\n     * @param {?} value\n     * @return {?}\n     */\n\n  }, {\n    key: \"classList\",\n    set: function set(value) {\n      var _this2 = this;\n\n      if (value && value.length) {\n        value.split(' ').forEach(function (className) {\n          return _this2._classList[className.trim()] = true;\n        });\n        this._elementRef.nativeElement.className = '';\n      }\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngAfterContentInit\",\n    value: function ngAfterContentInit() {\n      this._keyManager = new ActiveDescendantKeyManager(this.options).withWrap(); // Set the initial visibility state.\n\n      this._setVisibility();\n    }\n    /**\n     * Sets the panel scrollTop. This allows us to manually scroll to display options\n     * above or below the fold, as they are not actually being focused when active.\n     * @param {?} scrollTop\n     * @return {?}\n     */\n\n  }, {\n    key: \"_setScrollTop\",\n    value: function _setScrollTop(scrollTop) {\n      if (this.panel) {\n        this.panel.nativeElement.scrollTop = scrollTop;\n      }\n    }\n    /**\n     * Returns the panel's scrollTop.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_getScrollTop\",\n    value: function _getScrollTop() {\n      return this.panel ? this.panel.nativeElement.scrollTop : 0;\n    }\n    /**\n     * Panel should hide itself when the option list is empty.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_setVisibility\",\n    value: function _setVisibility() {\n      this.showPanel = !!this.options.length;\n      this._classList['mat-autocomplete-visible'] = this.showPanel;\n      this._classList['mat-autocomplete-hidden'] = !this.showPanel;\n\n      this._changeDetectorRef.markForCheck();\n    }\n    /**\n     * Emits the `select` event.\n     * @param {?} option\n     * @return {?}\n     */\n\n  }, {\n    key: \"_emitSelectEvent\",\n    value: function _emitSelectEvent(option) {\n      /** @type {?} */\n      var event = new MatAutocompleteSelectedEvent(this, option);\n      this.optionSelected.emit(event);\n    }\n  }]);\n\n  return MatAutocomplete;\n}(_MatAutocompleteMixinBase);\n\nMatAutocomplete.ɵfac = function MatAutocomplete_Factory(t) {\n  return new (t || MatAutocomplete)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(MAT_AUTOCOMPLETE_DEFAULT_OPTIONS));\n};\n\nMatAutocomplete.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n  type: MatAutocomplete,\n  selectors: [[\"mat-autocomplete\"]],\n  contentQueries: function MatAutocomplete_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵcontentQuery(dirIndex, MatOption, 5);\n      ɵngcc0.ɵɵcontentQuery(dirIndex, MatOptgroup, 4);\n    }\n\n    if (rf & 2) {\n      var _t;\n\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.options = _t);\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.optionGroups = _t);\n    }\n  },\n  viewQuery: function MatAutocomplete_Query(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵviewQuery(TemplateRef, 5);\n      ɵngcc0.ɵɵviewQuery(_c0, 5);\n    }\n\n    if (rf & 2) {\n      var _t;\n\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.template = _t.first);\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.panel = _t.first);\n    }\n  },\n  hostAttrs: [1, \"mat-autocomplete\"],\n  inputs: {\n    disableRipple: \"disableRipple\",\n    displayWith: \"displayWith\",\n    autoActiveFirstOption: \"autoActiveFirstOption\",\n    classList: [\"class\", \"classList\"],\n    panelWidth: \"panelWidth\"\n  },\n  outputs: {\n    optionSelected: \"optionSelected\",\n    opened: \"opened\",\n    closed: \"closed\"\n  },\n  exportAs: [\"matAutocomplete\"],\n  features: [ɵngcc0.ɵɵProvidersFeature([{\n    provide: MAT_OPTION_PARENT_COMPONENT,\n    useExisting: MatAutocomplete\n  }]), ɵngcc0.ɵɵInheritDefinitionFeature],\n  ngContentSelectors: _c1,\n  decls: 1,\n  vars: 0,\n  consts: [[\"role\", \"listbox\", 1, \"mat-autocomplete-panel\", 3, \"id\", \"ngClass\"], [\"panel\", \"\"]],\n  template: function MatAutocomplete_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵprojectionDef();\n      ɵngcc0.ɵɵtemplate(0, MatAutocomplete_ng_template_0_Template, 3, 2, \"ng-template\");\n    }\n  },\n  directives: [ɵngcc1.NgClass],\n  styles: [\".mat-autocomplete-panel{min-width:112px;max-width:280px;overflow:auto;-webkit-overflow-scrolling:touch;visibility:hidden;max-width:none;max-height:256px;position:relative;width:100%;border-bottom-left-radius:4px;border-bottom-right-radius:4px}.mat-autocomplete-panel.mat-autocomplete-visible{visibility:visible}.mat-autocomplete-panel.mat-autocomplete-hidden{visibility:hidden}.mat-autocomplete-panel-above .mat-autocomplete-panel{border-radius:0;border-top-left-radius:4px;border-top-right-radius:4px}.mat-autocomplete-panel .mat-divider-horizontal{margin-top:-1px}@media screen and (-ms-high-contrast:active){.mat-autocomplete-panel{outline:solid 1px}}\"],\n  encapsulation: 2,\n  changeDetection: 0\n});\n/** @nocollapse */\n\nMatAutocomplete.ctorParameters = function () {\n  return [{\n    type: ChangeDetectorRef\n  }, {\n    type: ElementRef\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Inject,\n      args: [MAT_AUTOCOMPLETE_DEFAULT_OPTIONS]\n    }]\n  }];\n};\n\nMatAutocomplete.propDecorators = {\n  template: [{\n    type: ViewChild,\n    args: [TemplateRef]\n  }],\n  panel: [{\n    type: ViewChild,\n    args: ['panel']\n  }],\n  options: [{\n    type: ContentChildren,\n    args: [MatOption, {\n      descendants: true\n    }]\n  }],\n  optionGroups: [{\n    type: ContentChildren,\n    args: [MatOptgroup]\n  }],\n  displayWith: [{\n    type: Input\n  }],\n  autoActiveFirstOption: [{\n    type: Input\n  }],\n  panelWidth: [{\n    type: Input\n  }],\n  optionSelected: [{\n    type: Output\n  }],\n  opened: [{\n    type: Output\n  }],\n  closed: [{\n    type: Output\n  }],\n  classList: [{\n    type: Input,\n    args: ['class']\n  }]\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatAutocomplete, [{\n    type: Component,\n    args: [{\n      selector: 'mat-autocomplete',\n      template: \"<ng-template><div class=\\\"mat-autocomplete-panel\\\" role=\\\"listbox\\\" [id]=\\\"id\\\" [ngClass]=\\\"_classList\\\" #panel><ng-content></ng-content></div></ng-template>\",\n      styles: [\".mat-autocomplete-panel{min-width:112px;max-width:280px;overflow:auto;-webkit-overflow-scrolling:touch;visibility:hidden;max-width:none;max-height:256px;position:relative;width:100%;border-bottom-left-radius:4px;border-bottom-right-radius:4px}.mat-autocomplete-panel.mat-autocomplete-visible{visibility:visible}.mat-autocomplete-panel.mat-autocomplete-hidden{visibility:hidden}.mat-autocomplete-panel-above .mat-autocomplete-panel{border-radius:0;border-top-left-radius:4px;border-top-right-radius:4px}.mat-autocomplete-panel .mat-divider-horizontal{margin-top:-1px}@media screen and (-ms-high-contrast:active){.mat-autocomplete-panel{outline:solid 1px}}\"],\n      encapsulation: ViewEncapsulation.None,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      exportAs: 'matAutocomplete',\n      inputs: ['disableRipple'],\n      host: {\n        'class': 'mat-autocomplete'\n      },\n      providers: [{\n        provide: MAT_OPTION_PARENT_COMPONENT,\n        useExisting: MatAutocomplete\n      }]\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ChangeDetectorRef\n    }, {\n      type: ɵngcc0.ElementRef\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [MAT_AUTOCOMPLETE_DEFAULT_OPTIONS]\n      }]\n    }];\n  }, {\n    displayWith: [{\n      type: Input\n    }],\n    optionSelected: [{\n      type: Output\n    }],\n    opened: [{\n      type: Output\n    }],\n    closed: [{\n      type: Output\n    }],\n    autoActiveFirstOption: [{\n      type: Input\n    }],\n    classList: [{\n      type: Input,\n      args: ['class']\n    }],\n    template: [{\n      type: ViewChild,\n      args: [TemplateRef]\n    }],\n    panel: [{\n      type: ViewChild,\n      args: ['panel']\n    }],\n    options: [{\n      type: ContentChildren,\n      args: [MatOption, {\n        descendants: true\n      }]\n    }],\n    optionGroups: [{\n      type: ContentChildren,\n      args: [MatOptgroup]\n    }],\n    panelWidth: [{\n      type: Input\n    }]\n  });\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * Directive applied to an element to make it usable\n * as a connection point for an autocomplete panel.\n */\n\n\nvar MatAutocompleteOrigin =\n/**\n * @param {?} elementRef\n */\nfunction MatAutocompleteOrigin(elementRef) {\n  _classCallCheck(this, MatAutocompleteOrigin);\n\n  this.elementRef = elementRef;\n};\n\nMatAutocompleteOrigin.ɵfac = function MatAutocompleteOrigin_Factory(t) {\n  return new (t || MatAutocompleteOrigin)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef));\n};\n\nMatAutocompleteOrigin.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n  type: MatAutocompleteOrigin,\n  selectors: [[\"\", \"matAutocompleteOrigin\", \"\"]],\n  exportAs: [\"matAutocompleteOrigin\"]\n});\n/** @nocollapse */\n\nMatAutocompleteOrigin.ctorParameters = function () {\n  return [{\n    type: ElementRef\n  }];\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatAutocompleteOrigin, [{\n    type: Directive,\n    args: [{\n      selector: '[matAutocompleteOrigin]',\n      exportAs: 'matAutocompleteOrigin'\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ElementRef\n    }];\n  }, null);\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/** *\n * The height of each autocomplete option.\n  @type {?} */\n\n\nvar AUTOCOMPLETE_OPTION_HEIGHT = 48;\n/** *\n * The total height of the autocomplete panel.\n  @type {?} */\n\nvar AUTOCOMPLETE_PANEL_HEIGHT = 256;\n/** *\n * Injection token that determines the scroll handling while the autocomplete panel is open.\n  @type {?} */\n\nvar MAT_AUTOCOMPLETE_SCROLL_STRATEGY = new InjectionToken('mat-autocomplete-scroll-strategy');\n/**\n * \\@docs-private\n * @param {?} overlay\n * @return {?}\n */\n\nfunction MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY(overlay) {\n  return function () {\n    return overlay.scrollStrategies.reposition();\n  };\n}\n/** *\n * \\@docs-private\n  @type {?} */\n\n\nvar MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_AUTOCOMPLETE_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY\n};\n/** *\n * Provider that allows the autocomplete to register as a ControlValueAccessor.\n * \\@docs-private\n  @type {?} */\n\nvar MAT_AUTOCOMPLETE_VALUE_ACCESSOR = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(function () {\n    return MatAutocompleteTrigger;\n  }),\n  multi: true\n};\n/**\n * Creates an error to be thrown when attempting to use an autocomplete trigger without a panel.\n * \\@docs-private\n * @return {?}\n */\n\nfunction getMatAutocompleteMissingPanelError() {\n  return Error('Attempting to open an undefined instance of `mat-autocomplete`. ' + 'Make sure that the id passed to the `matAutocomplete` is correct and that ' + 'you\\'re attempting to open it after the ngAfterContentInit hook.');\n}\n\nvar MatAutocompleteTrigger = /*#__PURE__*/function () {\n  /**\n   * @param {?} _element\n   * @param {?} _overlay\n   * @param {?} _viewContainerRef\n   * @param {?} _zone\n   * @param {?} _changeDetectorRef\n   * @param {?} scrollStrategy\n   * @param {?} _dir\n   * @param {?} _formField\n   * @param {?} _document\n   * @param {?=} _viewportRuler\n   */\n  function MatAutocompleteTrigger(_element, _overlay, _viewContainerRef, _zone, _changeDetectorRef, scrollStrategy, _dir, _formField, _document, _viewportRuler) {\n    var _this3 = this;\n\n    _classCallCheck(this, MatAutocompleteTrigger);\n\n    this._element = _element;\n    this._overlay = _overlay;\n    this._viewContainerRef = _viewContainerRef;\n    this._zone = _zone;\n    this._changeDetectorRef = _changeDetectorRef;\n    this._dir = _dir;\n    this._formField = _formField;\n    this._document = _document;\n    this._viewportRuler = _viewportRuler;\n    this._componentDestroyed = false;\n    this._autocompleteDisabled = false;\n    /**\n     * Whether or not the label state is being overridden.\n     */\n\n    this._manuallyFloatingLabel = false;\n    /**\n     * Subscription to viewport size changes.\n     */\n\n    this._viewportSubscription = Subscription.EMPTY;\n    /**\n     * Whether the autocomplete can open the next time it is focused. Used to prevent a focused,\n     * closed autocomplete from being reopened if the user switches to another browser tab and then\n     * comes back.\n     */\n\n    this._canOpenOnNextFocus = true;\n    /**\n     * Stream of keyboard events that can close the panel.\n     */\n\n    this._closeKeyEventStream = new Subject();\n    /**\n     * Event handler for when the window is blurred. Needs to be an\n     * arrow function in order to preserve the context.\n     */\n\n    this._windowBlurHandler = function () {\n      // If the user blurred the window while the autocomplete is focused, it means that it'll be\n      // refocused when they come back. In this case we want to skip the first focus event, if the\n      // pane was closed, in order to avoid reopening it unintentionally.\n      _this3._canOpenOnNextFocus = document.activeElement !== _this3._element.nativeElement || _this3.panelOpen;\n    };\n    /**\n     * `View -> model callback called when value changes`\n     */\n\n\n    this._onChange = function () {};\n    /**\n     * `View -> model callback called when autocomplete has been touched`\n     */\n\n\n    this._onTouched = function () {};\n    /**\n     * `autocomplete` attribute to be set on the input element.\n     * \\@docs-private\n     */\n\n\n    this.autocompleteAttribute = 'off';\n    this._overlayAttached = false;\n    /**\n     * Stream of autocomplete option selections.\n     */\n\n    this.optionSelections = defer(function () {\n      if (_this3.autocomplete && _this3.autocomplete.options) {\n        return merge.apply(void 0, _toConsumableArray(_this3.autocomplete.options.map(function (option) {\n          return option.onSelectionChange;\n        })));\n      } // If there are any subscribers before `ngAfterViewInit`, the `autocomplete` will be undefined.\n      // Return a stream that we'll replace with the real one once everything is in place.\n\n\n      return _this3._zone.onStable.asObservable().pipe(take(1), switchMap(function () {\n        return _this3.optionSelections;\n      }));\n    });\n\n    if (typeof window !== 'undefined') {\n      _zone.runOutsideAngular(function () {\n        window.addEventListener('blur', _this3._windowBlurHandler);\n      });\n    }\n\n    this._scrollStrategy = scrollStrategy;\n  }\n  /**\n   * Whether the autocomplete is disabled. When disabled, the element will\n   * act as a regular input and the user won't be able to open the panel.\n   * @return {?}\n   */\n\n\n  _createClass(MatAutocompleteTrigger, [{\n    key: \"autocompleteDisabled\",\n    get: function get() {\n      return this._autocompleteDisabled;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ,\n    set: function set(value) {\n      this._autocompleteDisabled = coerceBooleanProperty(value);\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      if (typeof window !== 'undefined') {\n        window.removeEventListener('blur', this._windowBlurHandler);\n      }\n\n      this._viewportSubscription.unsubscribe();\n\n      this._componentDestroyed = true;\n\n      this._destroyPanel();\n\n      this._closeKeyEventStream.complete();\n    }\n    /**\n     * Whether or not the autocomplete panel is open.\n     * @return {?}\n     */\n\n  }, {\n    key: \"panelOpen\",\n    get: function get() {\n      return this._overlayAttached && this.autocomplete.showPanel;\n    }\n    /**\n     * Opens the autocomplete suggestion panel.\n     * @return {?}\n     */\n\n  }, {\n    key: \"openPanel\",\n    value: function openPanel() {\n      this._attachOverlay();\n\n      this._floatLabel();\n    }\n    /**\n     * Closes the autocomplete suggestion panel.\n     * @return {?}\n     */\n\n  }, {\n    key: \"closePanel\",\n    value: function closePanel() {\n      this._resetLabel();\n\n      if (!this._overlayAttached) {\n        return;\n      }\n\n      if (this.panelOpen) {\n        // Only emit if the panel was visible.\n        this.autocomplete.closed.emit();\n      }\n\n      this.autocomplete._isOpen = this._overlayAttached = false;\n\n      if (this._overlayRef && this._overlayRef.hasAttached()) {\n        this._overlayRef.detach();\n\n        this._closingActionsSubscription.unsubscribe();\n      } // Note that in some cases this can end up being called after the component is destroyed.\n      // Add a check to ensure that we don't try to run change detection on a destroyed view.\n\n\n      if (!this._componentDestroyed) {\n        // We need to trigger change detection manually, because\n        // `fromEvent` doesn't seem to do it at the proper time.\n        // This ensures that the label is reset when the\n        // user clicks outside.\n        this._changeDetectorRef.detectChanges();\n      }\n    }\n    /**\n     * Updates the position of the autocomplete suggestion panel to ensure that it fits all options\n     * within the viewport.\n     * @return {?}\n     */\n\n  }, {\n    key: \"updatePosition\",\n    value: function updatePosition() {\n      if (this._overlayAttached) {\n        /** @type {?} */\n        this._overlayRef.updatePosition();\n      }\n    }\n    /**\n     * A stream of actions that should close the autocomplete panel, including\n     * when an option is selected, on blur, and when TAB is pressed.\n     * @return {?}\n     */\n\n  }, {\n    key: \"panelClosingActions\",\n    get: function get() {\n      var _this4 = this;\n\n      return merge(this.optionSelections, this.autocomplete._keyManager.tabOut.pipe(filter(function () {\n        return _this4._overlayAttached;\n      })), this._closeKeyEventStream, this._getOutsideClickStream(), this._overlayRef ? this._overlayRef.detachments().pipe(filter(function () {\n        return _this4._overlayAttached;\n      })) : of()).pipe( // Normalize the output so we return a consistent type.\n      map(function (event) {\n        return event instanceof MatOptionSelectionChange ? event : null;\n      }));\n    }\n    /**\n     * The currently active option, coerced to MatOption type.\n     * @return {?}\n     */\n\n  }, {\n    key: \"activeOption\",\n    get: function get() {\n      if (this.autocomplete && this.autocomplete._keyManager) {\n        return this.autocomplete._keyManager.activeItem;\n      }\n\n      return null;\n    }\n    /**\n     * Stream of clicks outside of the autocomplete panel.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_getOutsideClickStream\",\n    value: function _getOutsideClickStream() {\n      var _this5 = this;\n\n      if (!this._document) {\n        return of(null);\n      }\n\n      return merge(fromEvent(this._document, 'click'), fromEvent(this._document, 'touchend')).pipe(filter(function (event) {\n        /** @type {?} */\n        var clickTarget =\n        /** @type {?} */\n        event.target;\n        /** @type {?} */\n\n        var formField = _this5._formField ? _this5._formField._elementRef.nativeElement : null;\n        return _this5._overlayAttached && clickTarget !== _this5._element.nativeElement && (!formField || !formField.contains(clickTarget)) && !!_this5._overlayRef && !_this5._overlayRef.overlayElement.contains(clickTarget);\n      }));\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n\n  }, {\n    key: \"writeValue\",\n    value: function writeValue(value) {\n      var _this6 = this;\n\n      Promise.resolve(null).then(function () {\n        return _this6._setTriggerValue(value);\n      });\n    }\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n\n  }, {\n    key: \"registerOnChange\",\n    value: function registerOnChange(fn) {\n      this._onChange = fn;\n    }\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n\n  }, {\n    key: \"registerOnTouched\",\n    value: function registerOnTouched(fn) {\n      this._onTouched = fn;\n    }\n    /**\n     * @param {?} isDisabled\n     * @return {?}\n     */\n\n  }, {\n    key: \"setDisabledState\",\n    value: function setDisabledState(isDisabled) {\n      this._element.nativeElement.disabled = isDisabled;\n    }\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n\n  }, {\n    key: \"_handleKeydown\",\n    value: function _handleKeydown(event) {\n      /** @type {?} */\n      var keyCode = event.keyCode; // Prevent the default action on all escape key presses. This is here primarily to bring IE\n      // in line with other browsers. By default, pressing escape on IE will cause it to revert\n      // the input value to the one that it had on focus, however it won't dispatch any events\n      // which means that the model value will be out of sync with the view.\n\n      if (keyCode === ESCAPE) {\n        event.preventDefault();\n      }\n\n      if (this.activeOption && keyCode === ENTER && this.panelOpen) {\n        this.activeOption._selectViaInteraction();\n\n        this._resetActiveItem();\n\n        event.preventDefault();\n      } else if (this.autocomplete) {\n        /** @type {?} */\n        var prevActiveItem = this.autocomplete._keyManager.activeItem;\n        /** @type {?} */\n\n        var isArrowKey = keyCode === UP_ARROW || keyCode === DOWN_ARROW;\n\n        if (this.panelOpen || keyCode === TAB) {\n          this.autocomplete._keyManager.onKeydown(event);\n        } else if (isArrowKey && this._canOpen()) {\n          this.openPanel();\n        }\n\n        if (isArrowKey || this.autocomplete._keyManager.activeItem !== prevActiveItem) {\n          this._scrollToOption();\n        }\n      }\n    }\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n\n  }, {\n    key: \"_handleInput\",\n    value: function _handleInput(event) {\n      /** @type {?} */\n      var target =\n      /** @type {?} */\n      event.target;\n      /** @type {?} */\n\n      var value = target.value; // Based on `NumberValueAccessor` from forms.\n\n      if (target.type === 'number') {\n        value = value == '' ? null : parseFloat(value);\n      } // If the input has a placeholder, IE will fire the `input` event on page load,\n      // focus and blur, in addition to when the user actually changed the value. To\n      // filter out all of the extra events, we save the value on focus and between\n      // `input` events, and we check whether it changed.\n      // See: https://connect.microsoft.com/IE/feedback/details/885747/\n\n\n      if (this._previousValue !== value && document.activeElement === event.target) {\n        this._previousValue = value;\n\n        this._onChange(value);\n\n        if (this._canOpen()) {\n          this.openPanel();\n        }\n      }\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"_handleFocus\",\n    value: function _handleFocus() {\n      if (!this._canOpenOnNextFocus) {\n        this._canOpenOnNextFocus = true;\n      } else if (this._canOpen()) {\n        this._previousValue = this._element.nativeElement.value;\n\n        this._attachOverlay();\n\n        this._floatLabel(true);\n      }\n    }\n    /**\n     * In \"auto\" mode, the label will animate down as soon as focus is lost.\n     * This causes the value to jump when selecting an option with the mouse.\n     * This method manually floats the label until the panel can be closed.\n     * @param {?=} shouldAnimate Whether the label should be animated when it is floated.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_floatLabel\",\n    value: function _floatLabel() {\n      var shouldAnimate = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n\n      if (this._formField && this._formField.floatLabel === 'auto') {\n        if (shouldAnimate) {\n          this._formField._animateAndLockLabel();\n        } else {\n          this._formField.floatLabel = 'always';\n        }\n\n        this._manuallyFloatingLabel = true;\n      }\n    }\n    /**\n     * If the label has been manually elevated, return it to its normal state.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_resetLabel\",\n    value: function _resetLabel() {\n      if (this._manuallyFloatingLabel) {\n        this._formField.floatLabel = 'auto';\n        this._manuallyFloatingLabel = false;\n      }\n    }\n    /**\n     * Given that we are not actually focusing active options, we must manually adjust scroll\n     * to reveal options below the fold. First, we find the offset of the option from the top\n     * of the panel. If that offset is below the fold, the new scrollTop will be the offset -\n     * the panel height + the option height, so the active option will be just visible at the\n     * bottom of the panel. If that offset is above the top of the visible panel, the new scrollTop\n     * will become the offset. If that offset is visible within the panel already, the scrollTop is\n     * not adjusted.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_scrollToOption\",\n    value: function _scrollToOption() {\n      /** @type {?} */\n      var index = this.autocomplete._keyManager.activeItemIndex || 0;\n      /** @type {?} */\n\n      var labelCount = _countGroupLabelsBeforeOption(index, this.autocomplete.options, this.autocomplete.optionGroups);\n      /** @type {?} */\n\n\n      var newScrollPosition = _getOptionScrollPosition(index + labelCount, AUTOCOMPLETE_OPTION_HEIGHT, this.autocomplete._getScrollTop(), AUTOCOMPLETE_PANEL_HEIGHT);\n\n      this.autocomplete._setScrollTop(newScrollPosition);\n    }\n    /**\n     * This method listens to a stream of panel closing actions and resets the\n     * stream every time the option list changes.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_subscribeToClosingActions\",\n    value: function _subscribeToClosingActions() {\n      var _this7 = this;\n\n      /** @type {?} */\n      var firstStable = this._zone.onStable.asObservable().pipe(take(1));\n      /** @type {?} */\n\n\n      var optionChanges = this.autocomplete.options.changes.pipe(tap(function () {\n        return _this7._positionStrategy.reapplyLastPosition();\n      }), // Defer emitting to the stream until the next tick, because changing\n      // bindings in here will cause \"changed after checked\" errors.\n      delay(0)); // When the zone is stable initially, and when the option list changes...\n\n      return merge(firstStable, optionChanges).pipe( // create a new stream of panelClosingActions, replacing any previous streams\n      // that were created, and flatten it so our stream only emits closing events...\n      switchMap(function () {\n        _this7._resetActiveItem();\n\n        _this7.autocomplete._setVisibility();\n\n        if (_this7.panelOpen) {\n          /** @type {?} */\n          _this7._overlayRef.updatePosition();\n        }\n\n        return _this7.panelClosingActions;\n      }), // when the first closing event occurs...\n      take(1)) // set the value, close the panel, and complete.\n      .subscribe(function (event) {\n        return _this7._setValueAndClose(event);\n      });\n    }\n    /**\n     * Destroys the autocomplete suggestion panel.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_destroyPanel\",\n    value: function _destroyPanel() {\n      if (this._overlayRef) {\n        this.closePanel();\n\n        this._overlayRef.dispose();\n\n        this._overlayRef = null;\n      }\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n\n  }, {\n    key: \"_setTriggerValue\",\n    value: function _setTriggerValue(value) {\n      /** @type {?} */\n      var toDisplay = this.autocomplete && this.autocomplete.displayWith ? this.autocomplete.displayWith(value) : value;\n      /** @type {?} */\n\n      var inputValue = toDisplay != null ? toDisplay : ''; // If it's used within a `MatFormField`, we should set it through the property so it can go\n      // through change detection.\n\n      if (this._formField) {\n        this._formField._control.value = inputValue;\n      } else {\n        this._element.nativeElement.value = inputValue;\n      }\n\n      this._previousValue = inputValue;\n    }\n    /**\n     * This method closes the panel, and if a value is specified, also sets the associated\n     * control to that value. It will also mark the control as dirty if this interaction\n     * stemmed from the user.\n     * @param {?} event\n     * @return {?}\n     */\n\n  }, {\n    key: \"_setValueAndClose\",\n    value: function _setValueAndClose(event) {\n      if (event && event.source) {\n        this._clearPreviousSelectedOption(event.source);\n\n        this._setTriggerValue(event.source.value);\n\n        this._onChange(event.source.value);\n\n        this._element.nativeElement.focus();\n\n        this.autocomplete._emitSelectEvent(event.source);\n      }\n\n      this.closePanel();\n    }\n    /**\n     * Clear any previous selected option and emit a selection change event for this option\n     * @param {?} skip\n     * @return {?}\n     */\n\n  }, {\n    key: \"_clearPreviousSelectedOption\",\n    value: function _clearPreviousSelectedOption(skip) {\n      this.autocomplete.options.forEach(function (option) {\n        if (option != skip && option.selected) {\n          option.deselect();\n        }\n      });\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"_attachOverlay\",\n    value: function _attachOverlay() {\n      var _this8 = this;\n\n      if (!this.autocomplete) {\n        throw getMatAutocompleteMissingPanelError();\n      }\n\n      if (!this._overlayRef) {\n        this._portal = new TemplatePortal(this.autocomplete.template, this._viewContainerRef);\n        this._overlayRef = this._overlay.create(this._getOverlayConfig()); // Use the `keydownEvents` in order to take advantage of\n        // the overlay event targeting provided by the CDK overlay.\n\n        this._overlayRef.keydownEvents().subscribe(function (event) {\n          // Close when pressing ESCAPE or ALT + UP_ARROW, based on the a11y guidelines.\n          // See: https://www.w3.org/TR/wai-aria-practices-1.1/#textbox-keyboard-interaction\n          if (event.keyCode === ESCAPE || event.keyCode === UP_ARROW && event.altKey) {\n            _this8._resetActiveItem();\n\n            _this8._closeKeyEventStream.next();\n          }\n        });\n\n        if (this._viewportRuler) {\n          this._viewportSubscription = this._viewportRuler.change().subscribe(function () {\n            if (_this8.panelOpen && _this8._overlayRef) {\n              _this8._overlayRef.updateSize({\n                width: _this8._getPanelWidth()\n              });\n            }\n          });\n        }\n      } else {\n        // Update the panel width and direction, in case anything has changed.\n        this._overlayRef.updateSize({\n          width: this._getPanelWidth()\n        });\n      }\n\n      if (this._overlayRef && !this._overlayRef.hasAttached()) {\n        this._overlayRef.attach(this._portal);\n\n        this._closingActionsSubscription = this._subscribeToClosingActions();\n      }\n      /** @type {?} */\n\n\n      var wasOpen = this.panelOpen;\n\n      this.autocomplete._setVisibility();\n\n      this.autocomplete._isOpen = this._overlayAttached = true; // We need to do an extra `panelOpen` check in here, because the\n      // autocomplete won't be shown if there are no options.\n\n      if (this.panelOpen && wasOpen !== this.panelOpen) {\n        this.autocomplete.opened.emit();\n      }\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"_getOverlayConfig\",\n    value: function _getOverlayConfig() {\n      return new OverlayConfig({\n        positionStrategy: this._getOverlayPosition(),\n        scrollStrategy: this._scrollStrategy(),\n        width: this._getPanelWidth(),\n        direction: this._dir\n      });\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"_getOverlayPosition\",\n    value: function _getOverlayPosition() {\n      this._positionStrategy = this._overlay.position().flexibleConnectedTo(this._getConnectedElement()).withFlexibleDimensions(false).withPush(false).withPositions([{\n        originX: 'start',\n        originY: 'bottom',\n        overlayX: 'start',\n        overlayY: 'top'\n      }, {\n        originX: 'start',\n        originY: 'top',\n        overlayX: 'start',\n        overlayY: 'bottom',\n        // The overlay edge connected to the trigger should have squared corners, while\n        // the opposite end has rounded corners. We apply a CSS class to swap the\n        // border-radius based on the overlay position.\n        panelClass: 'mat-autocomplete-panel-above'\n      }]);\n      return this._positionStrategy;\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"_getConnectedElement\",\n    value: function _getConnectedElement() {\n      if (this.connectedTo) {\n        return this.connectedTo.elementRef;\n      }\n\n      return this._formField ? this._formField.getConnectedOverlayOrigin() : this._element;\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"_getPanelWidth\",\n    value: function _getPanelWidth() {\n      return this.autocomplete.panelWidth || this._getHostWidth();\n    }\n    /**\n     * Returns the width of the input element, so the panel width can match it.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_getHostWidth\",\n    value: function _getHostWidth() {\n      return this._getConnectedElement().nativeElement.getBoundingClientRect().width;\n    }\n    /**\n     * Resets the active item to -1 so arrow events will activate the\n     * correct options, or to 0 if the consumer opted into it.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_resetActiveItem\",\n    value: function _resetActiveItem() {\n      this.autocomplete._keyManager.setActiveItem(this.autocomplete.autoActiveFirstOption ? 0 : -1);\n    }\n    /**\n     * Determines whether the panel can be opened.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_canOpen\",\n    value: function _canOpen() {\n      /** @type {?} */\n      var element = this._element.nativeElement;\n      return !element.readOnly && !element.disabled && !this._autocompleteDisabled;\n    }\n  }]);\n\n  return MatAutocompleteTrigger;\n}();\n\nMatAutocompleteTrigger.ɵfac = function MatAutocompleteTrigger_Factory(t) {\n  return new (t || MatAutocompleteTrigger)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.Overlay), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(MAT_AUTOCOMPLETE_SCROLL_STRATEGY), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.Directionality, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc4.MatFormField, 9), ɵngcc0.ɵɵdirectiveInject(DOCUMENT, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc5.ViewportRuler));\n};\n\nMatAutocompleteTrigger.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n  type: MatAutocompleteTrigger,\n  selectors: [[\"input\", \"matAutocomplete\", \"\"], [\"textarea\", \"matAutocomplete\", \"\"]],\n  hostVars: 6,\n  hostBindings: function MatAutocompleteTrigger_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵlistener(\"focusin\", function MatAutocompleteTrigger_focusin_HostBindingHandler() {\n        return ctx._handleFocus();\n      })(\"blur\", function MatAutocompleteTrigger_blur_HostBindingHandler() {\n        return ctx._onTouched();\n      })(\"input\", function MatAutocompleteTrigger_input_HostBindingHandler($event) {\n        return ctx._handleInput($event);\n      })(\"keydown\", function MatAutocompleteTrigger_keydown_HostBindingHandler($event) {\n        return ctx._handleKeydown($event);\n      });\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵattribute(\"autocomplete\", ctx.autocompleteAttribute)(\"role\", ctx.autocompleteDisabled ? null : \"combobox\")(\"aria-autocomplete\", ctx.autocompleteDisabled ? null : \"list\")(\"aria-activedescendant\", ctx.activeOption == null ? null : ctx.activeOption.id)(\"aria-expanded\", ctx.autocompleteDisabled ? null : ctx.panelOpen.toString())(\"aria-owns\", ctx.autocompleteDisabled || !ctx.panelOpen ? null : ctx.autocomplete == null ? null : ctx.autocomplete.id);\n    }\n  },\n  inputs: {\n    autocompleteAttribute: [\"autocomplete\", \"autocompleteAttribute\"],\n    autocompleteDisabled: [\"matAutocompleteDisabled\", \"autocompleteDisabled\"],\n    autocomplete: [\"matAutocomplete\", \"autocomplete\"],\n    connectedTo: [\"matAutocompleteConnectedTo\", \"connectedTo\"]\n  },\n  exportAs: [\"matAutocompleteTrigger\"],\n  features: [ɵngcc0.ɵɵProvidersFeature([MAT_AUTOCOMPLETE_VALUE_ACCESSOR])]\n});\n/** @nocollapse */\n\nMatAutocompleteTrigger.ctorParameters = function () {\n  return [{\n    type: ElementRef\n  }, {\n    type: Overlay\n  }, {\n    type: ViewContainerRef\n  }, {\n    type: NgZone\n  }, {\n    type: ChangeDetectorRef\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Inject,\n      args: [MAT_AUTOCOMPLETE_SCROLL_STRATEGY]\n    }]\n  }, {\n    type: Directionality,\n    decorators: [{\n      type: Optional\n    }]\n  }, {\n    type: MatFormField,\n    decorators: [{\n      type: Optional\n    }, {\n      type: Host\n    }]\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Optional\n    }, {\n      type: Inject,\n      args: [DOCUMENT]\n    }]\n  }, {\n    type: ViewportRuler\n  }];\n};\n\nMatAutocompleteTrigger.propDecorators = {\n  autocomplete: [{\n    type: Input,\n    args: ['matAutocomplete']\n  }],\n  connectedTo: [{\n    type: Input,\n    args: ['matAutocompleteConnectedTo']\n  }],\n  autocompleteAttribute: [{\n    type: Input,\n    args: ['autocomplete']\n  }],\n  autocompleteDisabled: [{\n    type: Input,\n    args: ['matAutocompleteDisabled']\n  }]\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatAutocompleteTrigger, [{\n    type: Directive,\n    args: [{\n      selector: \"input[matAutocomplete], textarea[matAutocomplete]\",\n      host: {\n        '[attr.autocomplete]': 'autocompleteAttribute',\n        '[attr.role]': 'autocompleteDisabled ? null : \"combobox\"',\n        '[attr.aria-autocomplete]': 'autocompleteDisabled ? null : \"list\"',\n        '[attr.aria-activedescendant]': 'activeOption?.id',\n        '[attr.aria-expanded]': 'autocompleteDisabled ? null : panelOpen.toString()',\n        '[attr.aria-owns]': '(autocompleteDisabled || !panelOpen) ? null : autocomplete?.id',\n        // Note: we use `focusin`, as opposed to `focus`, in order to open the panel\n        // a little earlier. This avoids issues where IE delays the focusing of the input.\n        '(focusin)': '_handleFocus()',\n        '(blur)': '_onTouched()',\n        '(input)': '_handleInput($event)',\n        '(keydown)': '_handleKeydown($event)'\n      },\n      exportAs: 'matAutocompleteTrigger',\n      providers: [MAT_AUTOCOMPLETE_VALUE_ACCESSOR]\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ElementRef\n    }, {\n      type: ɵngcc2.Overlay\n    }, {\n      type: ɵngcc0.ViewContainerRef\n    }, {\n      type: ɵngcc0.NgZone\n    }, {\n      type: ɵngcc0.ChangeDetectorRef\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [MAT_AUTOCOMPLETE_SCROLL_STRATEGY]\n      }]\n    }, {\n      type: ɵngcc3.Directionality,\n      decorators: [{\n        type: Optional\n      }]\n    }, {\n      type: ɵngcc4.MatFormField,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Host\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }, {\n      type: ɵngcc5.ViewportRuler\n    }];\n  }, {\n    autocompleteAttribute: [{\n      type: Input,\n      args: ['autocomplete']\n    }],\n    autocompleteDisabled: [{\n      type: Input,\n      args: ['matAutocompleteDisabled']\n    }],\n    autocomplete: [{\n      type: Input,\n      args: ['matAutocomplete']\n    }],\n    connectedTo: [{\n      type: Input,\n      args: ['matAutocompleteConnectedTo']\n    }]\n  });\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n\nvar MatAutocompleteModule = function MatAutocompleteModule() {\n  _classCallCheck(this, MatAutocompleteModule);\n};\n\nMatAutocompleteModule.ɵfac = function MatAutocompleteModule_Factory(t) {\n  return new (t || MatAutocompleteModule)();\n};\n\nMatAutocompleteModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n  type: MatAutocompleteModule\n});\nMatAutocompleteModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n  providers: [MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER],\n  imports: [[MatOptionModule, OverlayModule, MatCommonModule, CommonModule], MatOptionModule, MatCommonModule]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatAutocompleteModule, [{\n    type: NgModule,\n    args: [{\n      imports: [MatOptionModule, OverlayModule, MatCommonModule, CommonModule],\n      exports: [MatAutocomplete, MatOptionModule, MatAutocompleteTrigger, MatAutocompleteOrigin, MatCommonModule],\n      declarations: [MatAutocomplete, MatAutocompleteTrigger, MatAutocompleteOrigin],\n      providers: [MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER]\n    }]\n  }], null, null);\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatAutocompleteModule, {\n    declarations: function declarations() {\n      return [MatAutocomplete, MatAutocompleteTrigger, MatAutocompleteOrigin];\n    },\n    imports: function imports() {\n      return [MatOptionModule, OverlayModule, MatCommonModule, CommonModule];\n    },\n    exports: function exports() {\n      return [MatAutocomplete, MatOptionModule, MatAutocompleteTrigger, MatAutocompleteOrigin, MatCommonModule];\n    }\n  });\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n\nexport { MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY, MatAutocompleteSelectedEvent, MatAutocompleteBase, _MatAutocompleteMixinBase, MAT_AUTOCOMPLETE_DEFAULT_OPTIONS, MatAutocomplete, MatAutocompleteModule, MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY, getMatAutocompleteMissingPanelError, AUTOCOMPLETE_OPTION_HEIGHT, AUTOCOMPLETE_PANEL_HEIGHT, MAT_AUTOCOMPLETE_SCROLL_STRATEGY, MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER, MAT_AUTOCOMPLETE_VALUE_ACCESSOR, MatAutocompleteTrigger, MatAutocompleteOrigin as ɵa29 }; //# sourceMappingURL=autocomplete.js.map","map":{"version":3,"sources":["/Users/adepertat/Dropbox/ECOLES/Openclassroom/P6_de_Pertat_Antoine/dwj-projet6/node_modules/@angular/material/__ivy_ngcc__/esm2015/autocomplete.js"],"names":["ActiveDescendantKeyManager","coerceBooleanProperty","ChangeDetectionStrategy","ChangeDetectorRef","Component","ContentChildren","ElementRef","EventEmitter","Inject","InjectionToken","Input","Output","TemplateRef","ViewChild","ViewEncapsulation","Directive","forwardRef","Host","NgZone","Optional","ViewContainerRef","NgModule","MAT_OPTION_PARENT_COMPONENT","MatOptgroup","MatOption","mixinDisableRipple","_countGroupLabelsBeforeOption","_getOptionScrollPosition","MatOptionSelectionChange","MatOptionModule","MatCommonModule","Directionality","DOWN_ARROW","ENTER","ESCAPE","TAB","UP_ARROW","Overlay","OverlayConfig","OverlayModule","TemplatePortal","DOCUMENT","CommonModule","filter","take","switchMap","delay","tap","map","ViewportRuler","NG_VALUE_ACCESSOR","MatFormField","Subscription","defer","fromEvent","merge","of","Subject","ɵngcc0","ɵngcc1","ɵngcc2","ɵngcc3","ɵngcc4","ɵngcc5","_c0","MatAutocomplete_ng_template_0_Template","rf","ctx","ɵɵelementStart","ɵɵprojection","ɵɵelementEnd","ctx_r0","ɵɵnextContext","ɵɵproperty","id","_classList","_c1","_uniqueAutocompleteIdCounter","MatAutocompleteSelectedEvent","source","option","MatAutocompleteBase","_MatAutocompleteMixinBase","MAT_AUTOCOMPLETE_DEFAULT_OPTIONS","providedIn","factory","MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY","autoActiveFirstOption","MatAutocomplete","_changeDetectorRef","_elementRef","defaults","showPanel","_isOpen","displayWith","optionSelected","opened","closed","_autoActiveFirstOption","value","length","split","forEach","className","trim","nativeElement","_keyManager","options","withWrap","_setVisibility","scrollTop","panel","markForCheck","event","emit","ɵfac","MatAutocomplete_Factory","t","ɵɵdirectiveInject","ɵcmp","ɵɵdefineComponent","type","selectors","contentQueries","MatAutocomplete_ContentQueries","dirIndex","ɵɵcontentQuery","_t","ɵɵqueryRefresh","ɵɵloadQuery","optionGroups","viewQuery","MatAutocomplete_Query","ɵɵviewQuery","template","first","hostAttrs","inputs","disableRipple","classList","panelWidth","outputs","exportAs","features","ɵɵProvidersFeature","provide","useExisting","ɵɵInheritDefinitionFeature","ngContentSelectors","decls","vars","consts","MatAutocomplete_Template","ɵɵprojectionDef","ɵɵtemplate","directives","NgClass","styles","encapsulation","changeDetection","ctorParameters","undefined","decorators","args","propDecorators","descendants","ngDevMode","ɵsetClassMetadata","selector","None","OnPush","host","providers","MatAutocompleteOrigin","elementRef","MatAutocompleteOrigin_Factory","ɵdir","ɵɵdefineDirective","AUTOCOMPLETE_OPTION_HEIGHT","AUTOCOMPLETE_PANEL_HEIGHT","MAT_AUTOCOMPLETE_SCROLL_STRATEGY","MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY","overlay","scrollStrategies","reposition","MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER","deps","useFactory","MAT_AUTOCOMPLETE_VALUE_ACCESSOR","MatAutocompleteTrigger","multi","getMatAutocompleteMissingPanelError","Error","_element","_overlay","_viewContainerRef","_zone","scrollStrategy","_dir","_formField","_document","_viewportRuler","_componentDestroyed","_autocompleteDisabled","_manuallyFloatingLabel","_viewportSubscription","EMPTY","_canOpenOnNextFocus","_closeKeyEventStream","_windowBlurHandler","document","activeElement","panelOpen","_onChange","_onTouched","autocompleteAttribute","_overlayAttached","optionSelections","autocomplete","onSelectionChange","onStable","asObservable","pipe","window","runOutsideAngular","addEventListener","_scrollStrategy","removeEventListener","unsubscribe","_destroyPanel","complete","_attachOverlay","_floatLabel","_resetLabel","_overlayRef","hasAttached","detach","_closingActionsSubscription","detectChanges","updatePosition","tabOut","_getOutsideClickStream","detachments","activeItem","clickTarget","target","formField","contains","overlayElement","Promise","resolve","then","_setTriggerValue","fn","isDisabled","disabled","keyCode","preventDefault","activeOption","_selectViaInteraction","_resetActiveItem","prevActiveItem","isArrowKey","onKeydown","_canOpen","openPanel","_scrollToOption","parseFloat","_previousValue","shouldAnimate","floatLabel","_animateAndLockLabel","index","activeItemIndex","labelCount","newScrollPosition","_getScrollTop","_setScrollTop","firstStable","optionChanges","changes","_positionStrategy","reapplyLastPosition","panelClosingActions","subscribe","_setValueAndClose","closePanel","dispose","toDisplay","inputValue","_control","_clearPreviousSelectedOption","focus","_emitSelectEvent","skip","selected","deselect","_portal","create","_getOverlayConfig","keydownEvents","altKey","next","change","updateSize","width","_getPanelWidth","attach","_subscribeToClosingActions","wasOpen","positionStrategy","_getOverlayPosition","direction","position","flexibleConnectedTo","_getConnectedElement","withFlexibleDimensions","withPush","withPositions","originX","originY","overlayX","overlayY","panelClass","connectedTo","getConnectedOverlayOrigin","_getHostWidth","getBoundingClientRect","setActiveItem","element","readOnly","MatAutocompleteTrigger_Factory","hostVars","hostBindings","MatAutocompleteTrigger_HostBindings","ɵɵlistener","MatAutocompleteTrigger_focusin_HostBindingHandler","_handleFocus","MatAutocompleteTrigger_blur_HostBindingHandler","MatAutocompleteTrigger_input_HostBindingHandler","$event","_handleInput","MatAutocompleteTrigger_keydown_HostBindingHandler","_handleKeydown","ɵɵattribute","autocompleteDisabled","toString","MatAutocompleteModule","MatAutocompleteModule_Factory","ɵmod","ɵɵdefineNgModule","ɵinj","ɵɵdefineInjector","imports","exports","declarations","ngJitMode","ɵɵsetNgModuleScope","ɵa29"],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { ActiveDescendantKeyManager } from '@angular/cdk/a11y';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { ChangeDetectionStrategy, ChangeDetectorRef, Component, ContentChildren, ElementRef, EventEmitter, Inject, InjectionToken, Input, Output, TemplateRef, ViewChild, ViewEncapsulation, Directive, forwardRef, Host, NgZone, Optional, ViewContainerRef, NgModule } from '@angular/core';\nimport { MAT_OPTION_PARENT_COMPONENT, MatOptgroup, MatOption, mixinDisableRipple, _countGroupLabelsBeforeOption, _getOptionScrollPosition, MatOptionSelectionChange, MatOptionModule, MatCommonModule } from '@angular/material/core';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { DOWN_ARROW, ENTER, ESCAPE, TAB, UP_ARROW } from '@angular/cdk/keycodes';\nimport { Overlay, OverlayConfig, OverlayModule } from '@angular/cdk/overlay';\nimport { TemplatePortal } from '@angular/cdk/portal';\nimport { DOCUMENT, CommonModule } from '@angular/common';\nimport { filter, take, switchMap, delay, tap, map } from 'rxjs/operators';\nimport { ViewportRuler } from '@angular/cdk/scrolling';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { MatFormField } from '@angular/material/form-field';\nimport { Subscription, defer, fromEvent, merge, of, Subject } from 'rxjs';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/** *\n * Autocomplete IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n  @type {?} */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/common';\nimport * as ɵngcc2 from '@angular/cdk/overlay';\nimport * as ɵngcc3 from '@angular/cdk/bidi';\nimport * as ɵngcc4 from '@angular/material/form-field';\nimport * as ɵngcc5 from '@angular/cdk/scrolling';\n\nconst _c0 = [\"panel\"];\nfunction MatAutocomplete_ng_template_0_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"div\", 0, 1);\n    ɵngcc0.ɵɵprojection(2);\n    ɵngcc0.ɵɵelementEnd();\n} if (rf & 2) {\n    const ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"id\", ctx_r0.id)(\"ngClass\", ctx_r0._classList);\n} }\nconst _c1 = [\"*\"];\nlet _uniqueAutocompleteIdCounter = 0;\n/**\n * Event object that is emitted when an autocomplete option is selected.\n */\nclass MatAutocompleteSelectedEvent {\n    /**\n     * @param {?} source\n     * @param {?} option\n     */\n    constructor(source, option) {\n        this.source = source;\n        this.option = option;\n    }\n}\n/**\n * \\@docs-private\n */\nclass MatAutocompleteBase {\n}\n/** @type {?} */\nconst _MatAutocompleteMixinBase = mixinDisableRipple(MatAutocompleteBase);\n/** *\n * Injection token to be used to override the default options for `mat-autocomplete`.\n  @type {?} */\nconst MAT_AUTOCOMPLETE_DEFAULT_OPTIONS = new InjectionToken('mat-autocomplete-default-options', {\n    providedIn: 'root',\n    factory: MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY,\n});\n/**\n * \\@docs-private\n * @return {?}\n */\nfunction MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY() {\n    return { autoActiveFirstOption: false };\n}\nclass MatAutocomplete extends _MatAutocompleteMixinBase {\n    /**\n     * @param {?} _changeDetectorRef\n     * @param {?} _elementRef\n     * @param {?} defaults\n     */\n    constructor(_changeDetectorRef, _elementRef, defaults) {\n        super();\n        this._changeDetectorRef = _changeDetectorRef;\n        this._elementRef = _elementRef;\n        /**\n         * Whether the autocomplete panel should be visible, depending on option length.\n         */\n        this.showPanel = false;\n        this._isOpen = false;\n        /**\n         * Function that maps an option's control value to its display value in the trigger.\n         */\n        this.displayWith = null;\n        /**\n         * Event that is emitted whenever an option from the list is selected.\n         */\n        this.optionSelected = new EventEmitter();\n        /**\n         * Event that is emitted when the autocomplete panel is opened.\n         */\n        this.opened = new EventEmitter();\n        /**\n         * Event that is emitted when the autocomplete panel is closed.\n         */\n        this.closed = new EventEmitter();\n        this._classList = {};\n        /**\n         * Unique ID to be used by autocomplete trigger's \"aria-owns\" property.\n         */\n        this.id = `mat-autocomplete-${_uniqueAutocompleteIdCounter++}`;\n        this._autoActiveFirstOption = !!defaults.autoActiveFirstOption;\n    }\n    /**\n     * Whether the autocomplete panel is open.\n     * @return {?}\n     */\n    get isOpen() { return this._isOpen && this.showPanel; }\n    /**\n     * Whether the first option should be highlighted when the autocomplete panel is opened.\n     * Can be configured globally through the `MAT_AUTOCOMPLETE_DEFAULT_OPTIONS` token.\n     * @return {?}\n     */\n    get autoActiveFirstOption() { return this._autoActiveFirstOption; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set autoActiveFirstOption(value) {\n        this._autoActiveFirstOption = coerceBooleanProperty(value);\n    }\n    /**\n     * Takes classes set on the host mat-autocomplete element and applies them to the panel\n     * inside the overlay container to allow for easy styling.\n     * @param {?} value\n     * @return {?}\n     */\n    set classList(value) {\n        if (value && value.length) {\n            value.split(' ').forEach(className => this._classList[className.trim()] = true);\n            this._elementRef.nativeElement.className = '';\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngAfterContentInit() {\n        this._keyManager = new ActiveDescendantKeyManager(this.options).withWrap();\n        // Set the initial visibility state.\n        this._setVisibility();\n    }\n    /**\n     * Sets the panel scrollTop. This allows us to manually scroll to display options\n     * above or below the fold, as they are not actually being focused when active.\n     * @param {?} scrollTop\n     * @return {?}\n     */\n    _setScrollTop(scrollTop) {\n        if (this.panel) {\n            this.panel.nativeElement.scrollTop = scrollTop;\n        }\n    }\n    /**\n     * Returns the panel's scrollTop.\n     * @return {?}\n     */\n    _getScrollTop() {\n        return this.panel ? this.panel.nativeElement.scrollTop : 0;\n    }\n    /**\n     * Panel should hide itself when the option list is empty.\n     * @return {?}\n     */\n    _setVisibility() {\n        this.showPanel = !!this.options.length;\n        this._classList['mat-autocomplete-visible'] = this.showPanel;\n        this._classList['mat-autocomplete-hidden'] = !this.showPanel;\n        this._changeDetectorRef.markForCheck();\n    }\n    /**\n     * Emits the `select` event.\n     * @param {?} option\n     * @return {?}\n     */\n    _emitSelectEvent(option) {\n        /** @type {?} */\n        const event = new MatAutocompleteSelectedEvent(this, option);\n        this.optionSelected.emit(event);\n    }\n}\nMatAutocomplete.ɵfac = function MatAutocomplete_Factory(t) { return new (t || MatAutocomplete)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(MAT_AUTOCOMPLETE_DEFAULT_OPTIONS)); };\nMatAutocomplete.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: MatAutocomplete, selectors: [[\"mat-autocomplete\"]], contentQueries: function MatAutocomplete_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MatOption, 5);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MatOptgroup, 4);\n    } if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.options = _t);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.optionGroups = _t);\n    } }, viewQuery: function MatAutocomplete_Query(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(TemplateRef, 5);\n        ɵngcc0.ɵɵviewQuery(_c0, 5);\n    } if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.template = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.panel = _t.first);\n    } }, hostAttrs: [1, \"mat-autocomplete\"], inputs: { disableRipple: \"disableRipple\", displayWith: \"displayWith\", autoActiveFirstOption: \"autoActiveFirstOption\", classList: [\"class\", \"classList\"], panelWidth: \"panelWidth\" }, outputs: { optionSelected: \"optionSelected\", opened: \"opened\", closed: \"closed\" }, exportAs: [\"matAutocomplete\"], features: [ɵngcc0.ɵɵProvidersFeature([\n            { provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatAutocomplete }\n        ]), ɵngcc0.ɵɵInheritDefinitionFeature], ngContentSelectors: _c1, decls: 1, vars: 0, consts: [[\"role\", \"listbox\", 1, \"mat-autocomplete-panel\", 3, \"id\", \"ngClass\"], [\"panel\", \"\"]], template: function MatAutocomplete_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵtemplate(0, MatAutocomplete_ng_template_0_Template, 3, 2, \"ng-template\");\n    } }, directives: [ɵngcc1.NgClass], styles: [\".mat-autocomplete-panel{min-width:112px;max-width:280px;overflow:auto;-webkit-overflow-scrolling:touch;visibility:hidden;max-width:none;max-height:256px;position:relative;width:100%;border-bottom-left-radius:4px;border-bottom-right-radius:4px}.mat-autocomplete-panel.mat-autocomplete-visible{visibility:visible}.mat-autocomplete-panel.mat-autocomplete-hidden{visibility:hidden}.mat-autocomplete-panel-above .mat-autocomplete-panel{border-radius:0;border-top-left-radius:4px;border-top-right-radius:4px}.mat-autocomplete-panel .mat-divider-horizontal{margin-top:-1px}@media screen and (-ms-high-contrast:active){.mat-autocomplete-panel{outline:solid 1px}}\"], encapsulation: 2, changeDetection: 0 });\n/** @nocollapse */\nMatAutocomplete.ctorParameters = () => [\n    { type: ChangeDetectorRef },\n    { type: ElementRef },\n    { type: undefined, decorators: [{ type: Inject, args: [MAT_AUTOCOMPLETE_DEFAULT_OPTIONS,] }] }\n];\nMatAutocomplete.propDecorators = {\n    template: [{ type: ViewChild, args: [TemplateRef,] }],\n    panel: [{ type: ViewChild, args: ['panel',] }],\n    options: [{ type: ContentChildren, args: [MatOption, { descendants: true },] }],\n    optionGroups: [{ type: ContentChildren, args: [MatOptgroup,] }],\n    displayWith: [{ type: Input }],\n    autoActiveFirstOption: [{ type: Input }],\n    panelWidth: [{ type: Input }],\n    optionSelected: [{ type: Output }],\n    opened: [{ type: Output }],\n    closed: [{ type: Output }],\n    classList: [{ type: Input, args: ['class',] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatAutocomplete, [{\n        type: Component,\n        args: [{ selector: 'mat-autocomplete',\n                template: \"<ng-template><div class=\\\"mat-autocomplete-panel\\\" role=\\\"listbox\\\" [id]=\\\"id\\\" [ngClass]=\\\"_classList\\\" #panel><ng-content></ng-content></div></ng-template>\",\n                styles: [\".mat-autocomplete-panel{min-width:112px;max-width:280px;overflow:auto;-webkit-overflow-scrolling:touch;visibility:hidden;max-width:none;max-height:256px;position:relative;width:100%;border-bottom-left-radius:4px;border-bottom-right-radius:4px}.mat-autocomplete-panel.mat-autocomplete-visible{visibility:visible}.mat-autocomplete-panel.mat-autocomplete-hidden{visibility:hidden}.mat-autocomplete-panel-above .mat-autocomplete-panel{border-radius:0;border-top-left-radius:4px;border-top-right-radius:4px}.mat-autocomplete-panel .mat-divider-horizontal{margin-top:-1px}@media screen and (-ms-high-contrast:active){.mat-autocomplete-panel{outline:solid 1px}}\"],\n                encapsulation: ViewEncapsulation.None,\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                exportAs: 'matAutocomplete',\n                inputs: ['disableRipple'],\n                host: {\n                    'class': 'mat-autocomplete'\n                }, providers: [\n                    { provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatAutocomplete }\n                ]\n            }]\n    }], function () { return [{ type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc0.ElementRef }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [MAT_AUTOCOMPLETE_DEFAULT_OPTIONS]\n            }] }]; }, { displayWith: [{\n            type: Input\n        }], optionSelected: [{\n            type: Output\n        }], opened: [{\n            type: Output\n        }], closed: [{\n            type: Output\n        }], autoActiveFirstOption: [{\n            type: Input\n        }], classList: [{\n            type: Input,\n            args: ['class']\n        }], template: [{\n            type: ViewChild,\n            args: [TemplateRef]\n        }], panel: [{\n            type: ViewChild,\n            args: ['panel']\n        }], options: [{\n            type: ContentChildren,\n            args: [MatOption, { descendants: true }]\n        }], optionGroups: [{\n            type: ContentChildren,\n            args: [MatOptgroup]\n        }], panelWidth: [{\n            type: Input\n        }] }); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * Directive applied to an element to make it usable\n * as a connection point for an autocomplete panel.\n */\nclass MatAutocompleteOrigin {\n    /**\n     * @param {?} elementRef\n     */\n    constructor(elementRef) {\n        this.elementRef = elementRef;\n    }\n}\nMatAutocompleteOrigin.ɵfac = function MatAutocompleteOrigin_Factory(t) { return new (t || MatAutocompleteOrigin)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };\nMatAutocompleteOrigin.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: MatAutocompleteOrigin, selectors: [[\"\", \"matAutocompleteOrigin\", \"\"]], exportAs: [\"matAutocompleteOrigin\"] });\n/** @nocollapse */\nMatAutocompleteOrigin.ctorParameters = () => [\n    { type: ElementRef }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatAutocompleteOrigin, [{\n        type: Directive,\n        args: [{\n                selector: '[matAutocompleteOrigin]',\n                exportAs: 'matAutocompleteOrigin'\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }]; }, null); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/** *\n * The height of each autocomplete option.\n  @type {?} */\nconst AUTOCOMPLETE_OPTION_HEIGHT = 48;\n/** *\n * The total height of the autocomplete panel.\n  @type {?} */\nconst AUTOCOMPLETE_PANEL_HEIGHT = 256;\n/** *\n * Injection token that determines the scroll handling while the autocomplete panel is open.\n  @type {?} */\nconst MAT_AUTOCOMPLETE_SCROLL_STRATEGY = new InjectionToken('mat-autocomplete-scroll-strategy');\n/**\n * \\@docs-private\n * @param {?} overlay\n * @return {?}\n */\nfunction MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY(overlay) {\n    return () => overlay.scrollStrategies.reposition();\n}\n/** *\n * \\@docs-private\n  @type {?} */\nconst MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n    provide: MAT_AUTOCOMPLETE_SCROLL_STRATEGY,\n    deps: [Overlay],\n    useFactory: MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY,\n};\n/** *\n * Provider that allows the autocomplete to register as a ControlValueAccessor.\n * \\@docs-private\n  @type {?} */\nconst MAT_AUTOCOMPLETE_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => MatAutocompleteTrigger),\n    multi: true\n};\n/**\n * Creates an error to be thrown when attempting to use an autocomplete trigger without a panel.\n * \\@docs-private\n * @return {?}\n */\nfunction getMatAutocompleteMissingPanelError() {\n    return Error('Attempting to open an undefined instance of `mat-autocomplete`. ' +\n        'Make sure that the id passed to the `matAutocomplete` is correct and that ' +\n        'you\\'re attempting to open it after the ngAfterContentInit hook.');\n}\nclass MatAutocompleteTrigger {\n    /**\n     * @param {?} _element\n     * @param {?} _overlay\n     * @param {?} _viewContainerRef\n     * @param {?} _zone\n     * @param {?} _changeDetectorRef\n     * @param {?} scrollStrategy\n     * @param {?} _dir\n     * @param {?} _formField\n     * @param {?} _document\n     * @param {?=} _viewportRuler\n     */\n    constructor(_element, _overlay, _viewContainerRef, _zone, _changeDetectorRef, scrollStrategy, _dir, _formField, _document, _viewportRuler) {\n        this._element = _element;\n        this._overlay = _overlay;\n        this._viewContainerRef = _viewContainerRef;\n        this._zone = _zone;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._dir = _dir;\n        this._formField = _formField;\n        this._document = _document;\n        this._viewportRuler = _viewportRuler;\n        this._componentDestroyed = false;\n        this._autocompleteDisabled = false;\n        /**\n         * Whether or not the label state is being overridden.\n         */\n        this._manuallyFloatingLabel = false;\n        /**\n         * Subscription to viewport size changes.\n         */\n        this._viewportSubscription = Subscription.EMPTY;\n        /**\n         * Whether the autocomplete can open the next time it is focused. Used to prevent a focused,\n         * closed autocomplete from being reopened if the user switches to another browser tab and then\n         * comes back.\n         */\n        this._canOpenOnNextFocus = true;\n        /**\n         * Stream of keyboard events that can close the panel.\n         */\n        this._closeKeyEventStream = new Subject();\n        /**\n         * Event handler for when the window is blurred. Needs to be an\n         * arrow function in order to preserve the context.\n         */\n        this._windowBlurHandler = () => {\n            // If the user blurred the window while the autocomplete is focused, it means that it'll be\n            // refocused when they come back. In this case we want to skip the first focus event, if the\n            // pane was closed, in order to avoid reopening it unintentionally.\n            this._canOpenOnNextFocus =\n                document.activeElement !== this._element.nativeElement || this.panelOpen;\n        };\n        /**\n         * `View -> model callback called when value changes`\n         */\n        this._onChange = () => { };\n        /**\n         * `View -> model callback called when autocomplete has been touched`\n         */\n        this._onTouched = () => { };\n        /**\n         * `autocomplete` attribute to be set on the input element.\n         * \\@docs-private\n         */\n        this.autocompleteAttribute = 'off';\n        this._overlayAttached = false;\n        /**\n         * Stream of autocomplete option selections.\n         */\n        this.optionSelections = defer(() => {\n            if (this.autocomplete && this.autocomplete.options) {\n                return merge(...this.autocomplete.options.map(option => option.onSelectionChange));\n            }\n            // If there are any subscribers before `ngAfterViewInit`, the `autocomplete` will be undefined.\n            // Return a stream that we'll replace with the real one once everything is in place.\n            return this._zone.onStable\n                .asObservable()\n                .pipe(take(1), switchMap(() => this.optionSelections));\n        });\n        if (typeof window !== 'undefined') {\n            _zone.runOutsideAngular(() => {\n                window.addEventListener('blur', this._windowBlurHandler);\n            });\n        }\n        this._scrollStrategy = scrollStrategy;\n    }\n    /**\n     * Whether the autocomplete is disabled. When disabled, the element will\n     * act as a regular input and the user won't be able to open the panel.\n     * @return {?}\n     */\n    get autocompleteDisabled() { return this._autocompleteDisabled; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set autocompleteDisabled(value) {\n        this._autocompleteDisabled = coerceBooleanProperty(value);\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        if (typeof window !== 'undefined') {\n            window.removeEventListener('blur', this._windowBlurHandler);\n        }\n        this._viewportSubscription.unsubscribe();\n        this._componentDestroyed = true;\n        this._destroyPanel();\n        this._closeKeyEventStream.complete();\n    }\n    /**\n     * Whether or not the autocomplete panel is open.\n     * @return {?}\n     */\n    get panelOpen() {\n        return this._overlayAttached && this.autocomplete.showPanel;\n    }\n    /**\n     * Opens the autocomplete suggestion panel.\n     * @return {?}\n     */\n    openPanel() {\n        this._attachOverlay();\n        this._floatLabel();\n    }\n    /**\n     * Closes the autocomplete suggestion panel.\n     * @return {?}\n     */\n    closePanel() {\n        this._resetLabel();\n        if (!this._overlayAttached) {\n            return;\n        }\n        if (this.panelOpen) {\n            // Only emit if the panel was visible.\n            this.autocomplete.closed.emit();\n        }\n        this.autocomplete._isOpen = this._overlayAttached = false;\n        if (this._overlayRef && this._overlayRef.hasAttached()) {\n            this._overlayRef.detach();\n            this._closingActionsSubscription.unsubscribe();\n        }\n        // Note that in some cases this can end up being called after the component is destroyed.\n        // Add a check to ensure that we don't try to run change detection on a destroyed view.\n        if (!this._componentDestroyed) {\n            // We need to trigger change detection manually, because\n            // `fromEvent` doesn't seem to do it at the proper time.\n            // This ensures that the label is reset when the\n            // user clicks outside.\n            this._changeDetectorRef.detectChanges();\n        }\n    }\n    /**\n     * Updates the position of the autocomplete suggestion panel to ensure that it fits all options\n     * within the viewport.\n     * @return {?}\n     */\n    updatePosition() {\n        if (this._overlayAttached) {\n            /** @type {?} */ ((this._overlayRef)).updatePosition();\n        }\n    }\n    /**\n     * A stream of actions that should close the autocomplete panel, including\n     * when an option is selected, on blur, and when TAB is pressed.\n     * @return {?}\n     */\n    get panelClosingActions() {\n        return merge(this.optionSelections, this.autocomplete._keyManager.tabOut.pipe(filter(() => this._overlayAttached)), this._closeKeyEventStream, this._getOutsideClickStream(), this._overlayRef ?\n            this._overlayRef.detachments().pipe(filter(() => this._overlayAttached)) :\n            of()).pipe(\n        // Normalize the output so we return a consistent type.\n        map(event => event instanceof MatOptionSelectionChange ? event : null));\n    }\n    /**\n     * The currently active option, coerced to MatOption type.\n     * @return {?}\n     */\n    get activeOption() {\n        if (this.autocomplete && this.autocomplete._keyManager) {\n            return this.autocomplete._keyManager.activeItem;\n        }\n        return null;\n    }\n    /**\n     * Stream of clicks outside of the autocomplete panel.\n     * @return {?}\n     */\n    _getOutsideClickStream() {\n        if (!this._document) {\n            return of(null);\n        }\n        return merge(fromEvent(this._document, 'click'), fromEvent(this._document, 'touchend'))\n            .pipe(filter(event => {\n            /** @type {?} */\n            const clickTarget = /** @type {?} */ (event.target);\n            /** @type {?} */\n            const formField = this._formField ?\n                this._formField._elementRef.nativeElement : null;\n            return this._overlayAttached &&\n                clickTarget !== this._element.nativeElement &&\n                (!formField || !formField.contains(clickTarget)) &&\n                (!!this._overlayRef && !this._overlayRef.overlayElement.contains(clickTarget));\n        }));\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    writeValue(value) {\n        Promise.resolve(null).then(() => this._setTriggerValue(value));\n    }\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    registerOnChange(fn) {\n        this._onChange = fn;\n    }\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    registerOnTouched(fn) {\n        this._onTouched = fn;\n    }\n    /**\n     * @param {?} isDisabled\n     * @return {?}\n     */\n    setDisabledState(isDisabled) {\n        this._element.nativeElement.disabled = isDisabled;\n    }\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    _handleKeydown(event) {\n        /** @type {?} */\n        const keyCode = event.keyCode;\n        // Prevent the default action on all escape key presses. This is here primarily to bring IE\n        // in line with other browsers. By default, pressing escape on IE will cause it to revert\n        // the input value to the one that it had on focus, however it won't dispatch any events\n        // which means that the model value will be out of sync with the view.\n        if (keyCode === ESCAPE) {\n            event.preventDefault();\n        }\n        if (this.activeOption && keyCode === ENTER && this.panelOpen) {\n            this.activeOption._selectViaInteraction();\n            this._resetActiveItem();\n            event.preventDefault();\n        }\n        else if (this.autocomplete) {\n            /** @type {?} */\n            const prevActiveItem = this.autocomplete._keyManager.activeItem;\n            /** @type {?} */\n            const isArrowKey = keyCode === UP_ARROW || keyCode === DOWN_ARROW;\n            if (this.panelOpen || keyCode === TAB) {\n                this.autocomplete._keyManager.onKeydown(event);\n            }\n            else if (isArrowKey && this._canOpen()) {\n                this.openPanel();\n            }\n            if (isArrowKey || this.autocomplete._keyManager.activeItem !== prevActiveItem) {\n                this._scrollToOption();\n            }\n        }\n    }\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    _handleInput(event) {\n        /** @type {?} */\n        let target = /** @type {?} */ (event.target);\n        /** @type {?} */\n        let value = target.value;\n        // Based on `NumberValueAccessor` from forms.\n        if (target.type === 'number') {\n            value = value == '' ? null : parseFloat(value);\n        }\n        // If the input has a placeholder, IE will fire the `input` event on page load,\n        // focus and blur, in addition to when the user actually changed the value. To\n        // filter out all of the extra events, we save the value on focus and between\n        // `input` events, and we check whether it changed.\n        // See: https://connect.microsoft.com/IE/feedback/details/885747/\n        if (this._previousValue !== value && document.activeElement === event.target) {\n            this._previousValue = value;\n            this._onChange(value);\n            if (this._canOpen()) {\n                this.openPanel();\n            }\n        }\n    }\n    /**\n     * @return {?}\n     */\n    _handleFocus() {\n        if (!this._canOpenOnNextFocus) {\n            this._canOpenOnNextFocus = true;\n        }\n        else if (this._canOpen()) {\n            this._previousValue = this._element.nativeElement.value;\n            this._attachOverlay();\n            this._floatLabel(true);\n        }\n    }\n    /**\n     * In \"auto\" mode, the label will animate down as soon as focus is lost.\n     * This causes the value to jump when selecting an option with the mouse.\n     * This method manually floats the label until the panel can be closed.\n     * @param {?=} shouldAnimate Whether the label should be animated when it is floated.\n     * @return {?}\n     */\n    _floatLabel(shouldAnimate = false) {\n        if (this._formField && this._formField.floatLabel === 'auto') {\n            if (shouldAnimate) {\n                this._formField._animateAndLockLabel();\n            }\n            else {\n                this._formField.floatLabel = 'always';\n            }\n            this._manuallyFloatingLabel = true;\n        }\n    }\n    /**\n     * If the label has been manually elevated, return it to its normal state.\n     * @return {?}\n     */\n    _resetLabel() {\n        if (this._manuallyFloatingLabel) {\n            this._formField.floatLabel = 'auto';\n            this._manuallyFloatingLabel = false;\n        }\n    }\n    /**\n     * Given that we are not actually focusing active options, we must manually adjust scroll\n     * to reveal options below the fold. First, we find the offset of the option from the top\n     * of the panel. If that offset is below the fold, the new scrollTop will be the offset -\n     * the panel height + the option height, so the active option will be just visible at the\n     * bottom of the panel. If that offset is above the top of the visible panel, the new scrollTop\n     * will become the offset. If that offset is visible within the panel already, the scrollTop is\n     * not adjusted.\n     * @return {?}\n     */\n    _scrollToOption() {\n        /** @type {?} */\n        const index = this.autocomplete._keyManager.activeItemIndex || 0;\n        /** @type {?} */\n        const labelCount = _countGroupLabelsBeforeOption(index, this.autocomplete.options, this.autocomplete.optionGroups);\n        /** @type {?} */\n        const newScrollPosition = _getOptionScrollPosition(index + labelCount, AUTOCOMPLETE_OPTION_HEIGHT, this.autocomplete._getScrollTop(), AUTOCOMPLETE_PANEL_HEIGHT);\n        this.autocomplete._setScrollTop(newScrollPosition);\n    }\n    /**\n     * This method listens to a stream of panel closing actions and resets the\n     * stream every time the option list changes.\n     * @return {?}\n     */\n    _subscribeToClosingActions() {\n        /** @type {?} */\n        const firstStable = this._zone.onStable.asObservable().pipe(take(1));\n        /** @type {?} */\n        const optionChanges = this.autocomplete.options.changes.pipe(tap(() => this._positionStrategy.reapplyLastPosition()), \n        // Defer emitting to the stream until the next tick, because changing\n        // bindings in here will cause \"changed after checked\" errors.\n        delay(0));\n        // When the zone is stable initially, and when the option list changes...\n        return merge(firstStable, optionChanges)\n            .pipe(\n        // create a new stream of panelClosingActions, replacing any previous streams\n        // that were created, and flatten it so our stream only emits closing events...\n        switchMap(() => {\n            this._resetActiveItem();\n            this.autocomplete._setVisibility();\n            if (this.panelOpen) {\n                /** @type {?} */ ((this._overlayRef)).updatePosition();\n            }\n            return this.panelClosingActions;\n        }), \n        // when the first closing event occurs...\n        take(1))\n            // set the value, close the panel, and complete.\n            .subscribe(event => this._setValueAndClose(event));\n    }\n    /**\n     * Destroys the autocomplete suggestion panel.\n     * @return {?}\n     */\n    _destroyPanel() {\n        if (this._overlayRef) {\n            this.closePanel();\n            this._overlayRef.dispose();\n            this._overlayRef = null;\n        }\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    _setTriggerValue(value) {\n        /** @type {?} */\n        const toDisplay = this.autocomplete && this.autocomplete.displayWith ?\n            this.autocomplete.displayWith(value) :\n            value;\n        /** @type {?} */\n        const inputValue = toDisplay != null ? toDisplay : '';\n        // If it's used within a `MatFormField`, we should set it through the property so it can go\n        // through change detection.\n        if (this._formField) {\n            this._formField._control.value = inputValue;\n        }\n        else {\n            this._element.nativeElement.value = inputValue;\n        }\n        this._previousValue = inputValue;\n    }\n    /**\n     * This method closes the panel, and if a value is specified, also sets the associated\n     * control to that value. It will also mark the control as dirty if this interaction\n     * stemmed from the user.\n     * @param {?} event\n     * @return {?}\n     */\n    _setValueAndClose(event) {\n        if (event && event.source) {\n            this._clearPreviousSelectedOption(event.source);\n            this._setTriggerValue(event.source.value);\n            this._onChange(event.source.value);\n            this._element.nativeElement.focus();\n            this.autocomplete._emitSelectEvent(event.source);\n        }\n        this.closePanel();\n    }\n    /**\n     * Clear any previous selected option and emit a selection change event for this option\n     * @param {?} skip\n     * @return {?}\n     */\n    _clearPreviousSelectedOption(skip) {\n        this.autocomplete.options.forEach(option => {\n            if (option != skip && option.selected) {\n                option.deselect();\n            }\n        });\n    }\n    /**\n     * @return {?}\n     */\n    _attachOverlay() {\n        if (!this.autocomplete) {\n            throw getMatAutocompleteMissingPanelError();\n        }\n        if (!this._overlayRef) {\n            this._portal = new TemplatePortal(this.autocomplete.template, this._viewContainerRef);\n            this._overlayRef = this._overlay.create(this._getOverlayConfig());\n            // Use the `keydownEvents` in order to take advantage of\n            // the overlay event targeting provided by the CDK overlay.\n            this._overlayRef.keydownEvents().subscribe(event => {\n                // Close when pressing ESCAPE or ALT + UP_ARROW, based on the a11y guidelines.\n                // See: https://www.w3.org/TR/wai-aria-practices-1.1/#textbox-keyboard-interaction\n                if (event.keyCode === ESCAPE || (event.keyCode === UP_ARROW && event.altKey)) {\n                    this._resetActiveItem();\n                    this._closeKeyEventStream.next();\n                }\n            });\n            if (this._viewportRuler) {\n                this._viewportSubscription = this._viewportRuler.change().subscribe(() => {\n                    if (this.panelOpen && this._overlayRef) {\n                        this._overlayRef.updateSize({ width: this._getPanelWidth() });\n                    }\n                });\n            }\n        }\n        else {\n            // Update the panel width and direction, in case anything has changed.\n            this._overlayRef.updateSize({ width: this._getPanelWidth() });\n        }\n        if (this._overlayRef && !this._overlayRef.hasAttached()) {\n            this._overlayRef.attach(this._portal);\n            this._closingActionsSubscription = this._subscribeToClosingActions();\n        }\n        /** @type {?} */\n        const wasOpen = this.panelOpen;\n        this.autocomplete._setVisibility();\n        this.autocomplete._isOpen = this._overlayAttached = true;\n        // We need to do an extra `panelOpen` check in here, because the\n        // autocomplete won't be shown if there are no options.\n        if (this.panelOpen && wasOpen !== this.panelOpen) {\n            this.autocomplete.opened.emit();\n        }\n    }\n    /**\n     * @return {?}\n     */\n    _getOverlayConfig() {\n        return new OverlayConfig({\n            positionStrategy: this._getOverlayPosition(),\n            scrollStrategy: this._scrollStrategy(),\n            width: this._getPanelWidth(),\n            direction: this._dir\n        });\n    }\n    /**\n     * @return {?}\n     */\n    _getOverlayPosition() {\n        this._positionStrategy = this._overlay.position()\n            .flexibleConnectedTo(this._getConnectedElement())\n            .withFlexibleDimensions(false)\n            .withPush(false)\n            .withPositions([\n            {\n                originX: 'start',\n                originY: 'bottom',\n                overlayX: 'start',\n                overlayY: 'top'\n            },\n            {\n                originX: 'start',\n                originY: 'top',\n                overlayX: 'start',\n                overlayY: 'bottom',\n                // The overlay edge connected to the trigger should have squared corners, while\n                // the opposite end has rounded corners. We apply a CSS class to swap the\n                // border-radius based on the overlay position.\n                panelClass: 'mat-autocomplete-panel-above'\n            }\n        ]);\n        return this._positionStrategy;\n    }\n    /**\n     * @return {?}\n     */\n    _getConnectedElement() {\n        if (this.connectedTo) {\n            return this.connectedTo.elementRef;\n        }\n        return this._formField ? this._formField.getConnectedOverlayOrigin() : this._element;\n    }\n    /**\n     * @return {?}\n     */\n    _getPanelWidth() {\n        return this.autocomplete.panelWidth || this._getHostWidth();\n    }\n    /**\n     * Returns the width of the input element, so the panel width can match it.\n     * @return {?}\n     */\n    _getHostWidth() {\n        return this._getConnectedElement().nativeElement.getBoundingClientRect().width;\n    }\n    /**\n     * Resets the active item to -1 so arrow events will activate the\n     * correct options, or to 0 if the consumer opted into it.\n     * @return {?}\n     */\n    _resetActiveItem() {\n        this.autocomplete._keyManager.setActiveItem(this.autocomplete.autoActiveFirstOption ? 0 : -1);\n    }\n    /**\n     * Determines whether the panel can be opened.\n     * @return {?}\n     */\n    _canOpen() {\n        /** @type {?} */\n        const element = this._element.nativeElement;\n        return !element.readOnly && !element.disabled && !this._autocompleteDisabled;\n    }\n}\nMatAutocompleteTrigger.ɵfac = function MatAutocompleteTrigger_Factory(t) { return new (t || MatAutocompleteTrigger)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.Overlay), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(MAT_AUTOCOMPLETE_SCROLL_STRATEGY), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.Directionality, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc4.MatFormField, 9), ɵngcc0.ɵɵdirectiveInject(DOCUMENT, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc5.ViewportRuler)); };\nMatAutocompleteTrigger.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: MatAutocompleteTrigger, selectors: [[\"input\", \"matAutocomplete\", \"\"], [\"textarea\", \"matAutocomplete\", \"\"]], hostVars: 6, hostBindings: function MatAutocompleteTrigger_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"focusin\", function MatAutocompleteTrigger_focusin_HostBindingHandler() { return ctx._handleFocus(); })(\"blur\", function MatAutocompleteTrigger_blur_HostBindingHandler() { return ctx._onTouched(); })(\"input\", function MatAutocompleteTrigger_input_HostBindingHandler($event) { return ctx._handleInput($event); })(\"keydown\", function MatAutocompleteTrigger_keydown_HostBindingHandler($event) { return ctx._handleKeydown($event); });\n    } if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"autocomplete\", ctx.autocompleteAttribute)(\"role\", ctx.autocompleteDisabled ? null : \"combobox\")(\"aria-autocomplete\", ctx.autocompleteDisabled ? null : \"list\")(\"aria-activedescendant\", ctx.activeOption == null ? null : ctx.activeOption.id)(\"aria-expanded\", ctx.autocompleteDisabled ? null : ctx.panelOpen.toString())(\"aria-owns\", ctx.autocompleteDisabled || !ctx.panelOpen ? null : ctx.autocomplete == null ? null : ctx.autocomplete.id);\n    } }, inputs: { autocompleteAttribute: [\"autocomplete\", \"autocompleteAttribute\"], autocompleteDisabled: [\"matAutocompleteDisabled\", \"autocompleteDisabled\"], autocomplete: [\"matAutocomplete\", \"autocomplete\"], connectedTo: [\"matAutocompleteConnectedTo\", \"connectedTo\"] }, exportAs: [\"matAutocompleteTrigger\"], features: [ɵngcc0.ɵɵProvidersFeature([MAT_AUTOCOMPLETE_VALUE_ACCESSOR])] });\n/** @nocollapse */\nMatAutocompleteTrigger.ctorParameters = () => [\n    { type: ElementRef },\n    { type: Overlay },\n    { type: ViewContainerRef },\n    { type: NgZone },\n    { type: ChangeDetectorRef },\n    { type: undefined, decorators: [{ type: Inject, args: [MAT_AUTOCOMPLETE_SCROLL_STRATEGY,] }] },\n    { type: Directionality, decorators: [{ type: Optional }] },\n    { type: MatFormField, decorators: [{ type: Optional }, { type: Host }] },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DOCUMENT,] }] },\n    { type: ViewportRuler }\n];\nMatAutocompleteTrigger.propDecorators = {\n    autocomplete: [{ type: Input, args: ['matAutocomplete',] }],\n    connectedTo: [{ type: Input, args: ['matAutocompleteConnectedTo',] }],\n    autocompleteAttribute: [{ type: Input, args: ['autocomplete',] }],\n    autocompleteDisabled: [{ type: Input, args: ['matAutocompleteDisabled',] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatAutocompleteTrigger, [{\n        type: Directive,\n        args: [{\n                selector: `input[matAutocomplete], textarea[matAutocomplete]`,\n                host: {\n                    '[attr.autocomplete]': 'autocompleteAttribute',\n                    '[attr.role]': 'autocompleteDisabled ? null : \"combobox\"',\n                    '[attr.aria-autocomplete]': 'autocompleteDisabled ? null : \"list\"',\n                    '[attr.aria-activedescendant]': 'activeOption?.id',\n                    '[attr.aria-expanded]': 'autocompleteDisabled ? null : panelOpen.toString()',\n                    '[attr.aria-owns]': '(autocompleteDisabled || !panelOpen) ? null : autocomplete?.id',\n                    // Note: we use `focusin`, as opposed to `focus`, in order to open the panel\n                    // a little earlier. This avoids issues where IE delays the focusing of the input.\n                    '(focusin)': '_handleFocus()',\n                    '(blur)': '_onTouched()',\n                    '(input)': '_handleInput($event)',\n                    '(keydown)': '_handleKeydown($event)'\n                },\n                exportAs: 'matAutocompleteTrigger',\n                providers: [MAT_AUTOCOMPLETE_VALUE_ACCESSOR]\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc2.Overlay }, { type: ɵngcc0.ViewContainerRef }, { type: ɵngcc0.NgZone }, { type: ɵngcc0.ChangeDetectorRef }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [MAT_AUTOCOMPLETE_SCROLL_STRATEGY]\n            }] }, { type: ɵngcc3.Directionality, decorators: [{\n                type: Optional\n            }] }, { type: ɵngcc4.MatFormField, decorators: [{\n                type: Optional\n            }, {\n                type: Host\n            }] }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [DOCUMENT]\n            }] }, { type: ɵngcc5.ViewportRuler }]; }, { autocompleteAttribute: [{\n            type: Input,\n            args: ['autocomplete']\n        }], autocompleteDisabled: [{\n            type: Input,\n            args: ['matAutocompleteDisabled']\n        }], autocomplete: [{\n            type: Input,\n            args: ['matAutocomplete']\n        }], connectedTo: [{\n            type: Input,\n            args: ['matAutocompleteConnectedTo']\n        }] }); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\nclass MatAutocompleteModule {\n}\nMatAutocompleteModule.ɵfac = function MatAutocompleteModule_Factory(t) { return new (t || MatAutocompleteModule)(); };\nMatAutocompleteModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: MatAutocompleteModule });\nMatAutocompleteModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ providers: [MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER], imports: [[MatOptionModule, OverlayModule, MatCommonModule, CommonModule], MatOptionModule,\n        MatCommonModule] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatAutocompleteModule, [{\n        type: NgModule,\n        args: [{\n                imports: [MatOptionModule, OverlayModule, MatCommonModule, CommonModule],\n                exports: [\n                    MatAutocomplete,\n                    MatOptionModule,\n                    MatAutocompleteTrigger,\n                    MatAutocompleteOrigin,\n                    MatCommonModule\n                ],\n                declarations: [MatAutocomplete, MatAutocompleteTrigger, MatAutocompleteOrigin],\n                providers: [MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER]\n            }]\n    }], null, null); })();\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatAutocompleteModule, { declarations: function () { return [MatAutocomplete, MatAutocompleteTrigger, MatAutocompleteOrigin]; }, imports: function () { return [MatOptionModule, OverlayModule, MatCommonModule, CommonModule]; }, exports: function () { return [MatAutocomplete, MatOptionModule, MatAutocompleteTrigger, MatAutocompleteOrigin, MatCommonModule]; } }); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\nexport { MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY, MatAutocompleteSelectedEvent, MatAutocompleteBase, _MatAutocompleteMixinBase, MAT_AUTOCOMPLETE_DEFAULT_OPTIONS, MatAutocomplete, MatAutocompleteModule, MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY, getMatAutocompleteMissingPanelError, AUTOCOMPLETE_OPTION_HEIGHT, AUTOCOMPLETE_PANEL_HEIGHT, MAT_AUTOCOMPLETE_SCROLL_STRATEGY, MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER, MAT_AUTOCOMPLETE_VALUE_ACCESSOR, MatAutocompleteTrigger, MatAutocompleteOrigin as ɵa29 };\n\n//# sourceMappingURL=autocomplete.js.map"]},"metadata":{},"sourceType":"module"}