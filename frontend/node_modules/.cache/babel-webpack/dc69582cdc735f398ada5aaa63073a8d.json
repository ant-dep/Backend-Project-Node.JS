{"ast":null,"code":"import _classCallCheck from \"/Users/adepertat/Dropbox/ECOLES/Openclassroom/P6_de_Pertat_Antoine/AntoinedePertat_6_240521/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/adepertat/Dropbox/ECOLES/Openclassroom/P6_de_Pertat_Antoine/AntoinedePertat_6_240521/frontend/node_modules/@babel/runtime/helpers/esm/createClass\";\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { Directive, Input, Output, EventEmitter, Optional, ChangeDetectorRef, SkipSelf, NgModule } from '@angular/core';\nimport { Subject, Subscription } from 'rxjs';\nimport { UniqueSelectionDispatcher } from '@angular/cdk/collections';\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/** *\n * Used to generate unique ID for each accordion.\n  @type {?} */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/collections';\nvar nextId = 0;\n\nvar CdkAccordion = /*@__PURE__*/function () {\n  var CdkAccordion = /*#__PURE__*/function () {\n    function CdkAccordion() {\n      _classCallCheck(this, CdkAccordion);\n\n      /**\n       * Emits when the state of the accordion changes\n       */\n      this._stateChanges = new Subject();\n      /**\n       * Stream that emits true/false when openAll/closeAll is triggered.\n       */\n\n      this._openCloseAllActions = new Subject();\n      /**\n       * A readonly id value to use for unique selection coordination.\n       */\n\n      this.id = \"cdk-accordion-\".concat(nextId++);\n      this._multi = false;\n    }\n    /**\n     * Whether the accordion should allow multiple expanded accordion items simultaneously.\n     * @return {?}\n     */\n\n\n    _createClass(CdkAccordion, [{\n      key: \"multi\",\n      get: function get() {\n        return this._multi;\n      }\n      /**\n       * @param {?} multi\n       * @return {?}\n       */\n      ,\n      set: function set(multi) {\n        this._multi = coerceBooleanProperty(multi);\n      }\n      /**\n       * Opens all enabled accordion items in an accordion where multi is enabled.\n       * @return {?}\n       */\n\n    }, {\n      key: \"openAll\",\n      value: function openAll() {\n        this._openCloseAll(true);\n      }\n      /**\n       * Closes all enabled accordion items in an accordion where multi is enabled.\n       * @return {?}\n       */\n\n    }, {\n      key: \"closeAll\",\n      value: function closeAll() {\n        this._openCloseAll(false);\n      }\n      /**\n       * @param {?} changes\n       * @return {?}\n       */\n\n    }, {\n      key: \"ngOnChanges\",\n      value: function ngOnChanges(changes) {\n        this._stateChanges.next(changes);\n      }\n      /**\n       * @return {?}\n       */\n\n    }, {\n      key: \"ngOnDestroy\",\n      value: function ngOnDestroy() {\n        this._stateChanges.complete();\n      }\n      /**\n       * @param {?} expanded\n       * @return {?}\n       */\n\n    }, {\n      key: \"_openCloseAll\",\n      value: function _openCloseAll(expanded) {\n        if (this.multi) {\n          this._openCloseAllActions.next(expanded);\n        }\n      }\n    }]);\n\n    return CdkAccordion;\n  }();\n\n  CdkAccordion.ɵfac = function CdkAccordion_Factory(t) {\n    return new (t || CdkAccordion)();\n  };\n\n  CdkAccordion.ɵdir =\n  /*@__PURE__*/\n\n  /*@__PURE__*/\n  ɵngcc0.ɵɵdefineDirective({\n    type: CdkAccordion,\n    selectors: [[\"cdk-accordion\"], [\"\", \"cdkAccordion\", \"\"]],\n    inputs: {\n      multi: \"multi\"\n    },\n    exportAs: [\"cdkAccordion\"],\n    features: [ɵngcc0.ɵɵNgOnChangesFeature]\n  });\n  return CdkAccordion;\n}();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/** *\n * Used to generate unique ID for each accordion item.\n  @type {?} */\n\n\nvar nextId$1 = 0;\nvar ɵ0 = undefined;\n\nvar CdkAccordionItem = /*@__PURE__*/function () {\n  var CdkAccordionItem = /*#__PURE__*/function () {\n    /**\n     * @param {?} accordion\n     * @param {?} _changeDetectorRef\n     * @param {?} _expansionDispatcher\n     */\n    function CdkAccordionItem(accordion, _changeDetectorRef, _expansionDispatcher) {\n      var _this = this;\n\n      _classCallCheck(this, CdkAccordionItem);\n\n      this.accordion = accordion;\n      this._changeDetectorRef = _changeDetectorRef;\n      this._expansionDispatcher = _expansionDispatcher;\n      /**\n       * Subscription to openAll/closeAll events.\n       */\n\n      this._openCloseAllSubscription = Subscription.EMPTY;\n      /**\n       * Event emitted every time the AccordionItem is closed.\n       */\n\n      this.closed = new EventEmitter();\n      /**\n       * Event emitted every time the AccordionItem is opened.\n       */\n\n      this.opened = new EventEmitter();\n      /**\n       * Event emitted when the AccordionItem is destroyed.\n       */\n\n      this.destroyed = new EventEmitter();\n      /**\n       * Emits whenever the expanded state of the accordion changes.\n       * Primarily used to facilitate two-way binding.\n       * \\@docs-private\n       */\n\n      this.expandedChange = new EventEmitter();\n      /**\n       * The unique AccordionItem id.\n       */\n\n      this.id = \"cdk-accordion-child-\".concat(nextId$1++);\n      this._expanded = false;\n      this._disabled = false;\n      /**\n       * Unregister function for _expansionDispatcher.\n       */\n\n      this._removeUniqueSelectionListener = function () {};\n\n      this._removeUniqueSelectionListener = _expansionDispatcher.listen(function (id, accordionId) {\n        if (_this.accordion && !_this.accordion.multi && _this.accordion.id === accordionId && _this.id !== id) {\n          _this.expanded = false;\n        }\n      }); // When an accordion item is hosted in an accordion, subscribe to open/close events.\n\n      if (this.accordion) {\n        this._openCloseAllSubscription = this._subscribeToOpenCloseAllActions();\n      }\n    }\n    /**\n     * Whether the AccordionItem is expanded.\n     * @return {?}\n     */\n\n\n    _createClass(CdkAccordionItem, [{\n      key: \"expanded\",\n      get: function get() {\n        return this._expanded;\n      }\n      /**\n       * @param {?} expanded\n       * @return {?}\n       */\n      ,\n      set: function set(expanded) {\n        expanded = coerceBooleanProperty(expanded); // Only emit events and update the internal value if the value changes.\n\n        if (this._expanded !== expanded) {\n          this._expanded = expanded;\n          this.expandedChange.emit(expanded);\n\n          if (expanded) {\n            this.opened.emit();\n            /** *\n             * In the unique selection dispatcher, the id parameter is the id of the CdkAccordionItem,\n             * the name value is the id of the accordion.\n              @type {?} */\n\n            var accordionId = this.accordion ? this.accordion.id : this.id;\n\n            this._expansionDispatcher.notify(this.id, accordionId);\n          } else {\n            this.closed.emit();\n          } // Ensures that the animation will run when the value is set outside of an `@Input`.\n          // This includes cases like the open, close and toggle methods.\n\n\n          this._changeDetectorRef.markForCheck();\n        }\n      }\n      /**\n       * Whether the AccordionItem is disabled.\n       * @return {?}\n       */\n\n    }, {\n      key: \"disabled\",\n      get: function get() {\n        return this._disabled;\n      }\n      /**\n       * @param {?} disabled\n       * @return {?}\n       */\n      ,\n      set: function set(disabled) {\n        this._disabled = coerceBooleanProperty(disabled);\n      }\n      /**\n       * Emits an event for the accordion item being destroyed.\n       * @return {?}\n       */\n\n    }, {\n      key: \"ngOnDestroy\",\n      value: function ngOnDestroy() {\n        this.opened.complete();\n        this.closed.complete();\n        this.destroyed.emit();\n        this.destroyed.complete();\n\n        this._removeUniqueSelectionListener();\n\n        this._openCloseAllSubscription.unsubscribe();\n      }\n      /**\n       * Toggles the expanded state of the accordion item.\n       * @return {?}\n       */\n\n    }, {\n      key: \"toggle\",\n      value: function toggle() {\n        if (!this.disabled) {\n          this.expanded = !this.expanded;\n        }\n      }\n      /**\n       * Sets the expanded state of the accordion item to false.\n       * @return {?}\n       */\n\n    }, {\n      key: \"close\",\n      value: function close() {\n        if (!this.disabled) {\n          this.expanded = false;\n        }\n      }\n      /**\n       * Sets the expanded state of the accordion item to true.\n       * @return {?}\n       */\n\n    }, {\n      key: \"open\",\n      value: function open() {\n        if (!this.disabled) {\n          this.expanded = true;\n        }\n      }\n      /**\n       * @return {?}\n       */\n\n    }, {\n      key: \"_subscribeToOpenCloseAllActions\",\n      value: function _subscribeToOpenCloseAllActions() {\n        var _this2 = this;\n\n        return this.accordion._openCloseAllActions.subscribe(function (expanded) {\n          // Only change expanded state if item is enabled\n          if (!_this2.disabled) {\n            _this2.expanded = expanded;\n          }\n        });\n      }\n    }]);\n\n    return CdkAccordionItem;\n  }();\n\n  CdkAccordionItem.ɵfac = function CdkAccordionItem_Factory(t) {\n    return new (t || CdkAccordionItem)(ɵngcc0.ɵɵdirectiveInject(CdkAccordion, 12), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.UniqueSelectionDispatcher));\n  };\n\n  CdkAccordionItem.ɵdir =\n  /*@__PURE__*/\n\n  /*@__PURE__*/\n  ɵngcc0.ɵɵdefineDirective({\n    type: CdkAccordionItem,\n    selectors: [[\"cdk-accordion-item\"], [\"\", \"cdkAccordionItem\", \"\"]],\n    inputs: {\n      expanded: \"expanded\",\n      disabled: \"disabled\"\n    },\n    outputs: {\n      closed: \"closed\",\n      opened: \"opened\",\n      destroyed: \"destroyed\",\n      expandedChange: \"expandedChange\"\n    },\n    exportAs: [\"cdkAccordionItem\"],\n    features: [/*@__PURE__*/ɵngcc0.ɵɵProvidersFeature([// Provide CdkAccordion as undefined to prevent nested accordion items from registering\n    // to the same accordion.\n    {\n      provide: CdkAccordion,\n      useValue: ɵ0\n    }])]\n  });\n  return CdkAccordionItem;\n}();\n\nvar CdkAccordionModule = /*@__PURE__*/function () {\n  var CdkAccordionModule = function CdkAccordionModule() {\n    _classCallCheck(this, CdkAccordionModule);\n  };\n\n  CdkAccordionModule.ɵfac = function CdkAccordionModule_Factory(t) {\n    return new (t || CdkAccordionModule)();\n  };\n\n  CdkAccordionModule.ɵmod =\n  /*@__PURE__*/\n\n  /*@__PURE__*/\n  ɵngcc0.ɵɵdefineNgModule({\n    type: CdkAccordionModule\n  });\n  CdkAccordionModule.ɵinj =\n  /*@__PURE__*/\n\n  /*@__PURE__*/\n  ɵngcc0.ɵɵdefineInjector({});\n  return CdkAccordionModule;\n}();\n/*@__PURE__*/\n\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(CdkAccordionModule, {\n    declarations: [CdkAccordion, CdkAccordionItem],\n    exports: [CdkAccordion, CdkAccordionItem]\n  });\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n\nexport { CdkAccordionItem, CdkAccordion, CdkAccordionModule }; //# sourceMappingURL=accordion.js.map","map":null,"metadata":{},"sourceType":"module"}