{"ast":null,"code":"import _createClass from \"/Users/adepertat/Dropbox/ECOLES/Openclassroom/P6_de_Pertat_Antoine/AntoinedePertat_6_240521/frontend/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/Users/adepertat/Dropbox/ECOLES/Openclassroom/P6_de_Pertat_Antoine/AntoinedePertat_6_240521/frontend/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/adepertat/Dropbox/ECOLES/Openclassroom/P6_de_Pertat_Antoine/AntoinedePertat_6_240521/frontend/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _classCallCheck from \"/Users/adepertat/Dropbox/ECOLES/Openclassroom/P6_de_Pertat_Antoine/AntoinedePertat_6_240521/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { coerceNumberProperty } from '@angular/cdk/coercion';\nimport { Platform } from '@angular/cdk/platform';\nimport { DOCUMENT, CommonModule } from '@angular/common';\nimport { ChangeDetectionStrategy, Component, ElementRef, Inject, InjectionToken, Input, Optional, ViewEncapsulation, NgModule } from '@angular/core';\nimport { mixinColor, MatCommonModule } from '@angular/material/core';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/** *\n * Base reference size of the spinner.\n * \\@docs-private\n  @type {?} */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/platform';\nimport * as ɵngcc2 from '@angular/common';\n\nfunction MatProgressSpinner__svg_circle_1_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelement(0, \"circle\", 3);\n  }\n\n  if (rf & 2) {\n    var ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵstyleProp(\"animation-name\", \"mat-progress-spinner-stroke-rotate-\" + ctx_r0.diameter)(\"stroke-dashoffset\", ctx_r0._strokeDashOffset, \"px\")(\"stroke-dasharray\", ctx_r0._strokeCircumference, \"px\")(\"stroke-width\", ctx_r0._circleStrokeWidth, \"%\");\n    ɵngcc0.ɵɵattribute(\"r\", ctx_r0._circleRadius);\n  }\n}\n\nfunction MatProgressSpinner__svg_circle_2_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelement(0, \"circle\", 3);\n  }\n\n  if (rf & 2) {\n    var ctx_r1 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵstyleProp(\"stroke-dashoffset\", ctx_r1._strokeDashOffset, \"px\")(\"stroke-dasharray\", ctx_r1._strokeCircumference, \"px\")(\"stroke-width\", ctx_r1._circleStrokeWidth, \"%\");\n    ɵngcc0.ɵɵattribute(\"r\", ctx_r1._circleRadius);\n  }\n}\n\nfunction MatSpinner__svg_circle_1_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelement(0, \"circle\", 3);\n  }\n\n  if (rf & 2) {\n    var ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵstyleProp(\"animation-name\", \"mat-progress-spinner-stroke-rotate-\" + ctx_r0.diameter)(\"stroke-dashoffset\", ctx_r0._strokeDashOffset, \"px\")(\"stroke-dasharray\", ctx_r0._strokeCircumference, \"px\")(\"stroke-width\", ctx_r0._circleStrokeWidth, \"%\");\n    ɵngcc0.ɵɵattribute(\"r\", ctx_r0._circleRadius);\n  }\n}\n\nfunction MatSpinner__svg_circle_2_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelement(0, \"circle\", 3);\n  }\n\n  if (rf & 2) {\n    var ctx_r1 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵstyleProp(\"stroke-dashoffset\", ctx_r1._strokeDashOffset, \"px\")(\"stroke-dasharray\", ctx_r1._strokeCircumference, \"px\")(\"stroke-width\", ctx_r1._circleStrokeWidth, \"%\");\n    ɵngcc0.ɵɵattribute(\"r\", ctx_r1._circleRadius);\n  }\n}\n\nvar _c0 = \".mat-progress-spinner{display:block;position:relative}.mat-progress-spinner svg{position:absolute;transform:rotate(-90deg);top:0;left:0;transform-origin:center;overflow:visible}.mat-progress-spinner circle{fill:transparent;transform-origin:center;transition:stroke-dashoffset 225ms linear}._mat-animation-noopable.mat-progress-spinner circle{transition:none;animation:none}.mat-progress-spinner.mat-progress-spinner-indeterminate-animation[mode=indeterminate]{animation:mat-progress-spinner-linear-rotate 2s linear infinite}._mat-animation-noopable.mat-progress-spinner.mat-progress-spinner-indeterminate-animation[mode=indeterminate]{transition:none;animation:none}.mat-progress-spinner.mat-progress-spinner-indeterminate-animation[mode=indeterminate] circle{transition-property:stroke;animation-duration:4s;animation-timing-function:cubic-bezier(.35,0,.25,1);animation-iteration-count:infinite}._mat-animation-noopable.mat-progress-spinner.mat-progress-spinner-indeterminate-animation[mode=indeterminate] circle{transition:none;animation:none}.mat-progress-spinner.mat-progress-spinner-indeterminate-fallback-animation[mode=indeterminate]{animation:mat-progress-spinner-stroke-rotate-fallback 10s cubic-bezier(.87,.03,.33,1) infinite}._mat-animation-noopable.mat-progress-spinner.mat-progress-spinner-indeterminate-fallback-animation[mode=indeterminate]{transition:none;animation:none}.mat-progress-spinner.mat-progress-spinner-indeterminate-fallback-animation[mode=indeterminate] circle{transition-property:stroke}._mat-animation-noopable.mat-progress-spinner.mat-progress-spinner-indeterminate-fallback-animation[mode=indeterminate] circle{transition:none;animation:none}@keyframes mat-progress-spinner-linear-rotate{0%{transform:rotate(0)}100%{transform:rotate(360deg)}}@keyframes mat-progress-spinner-stroke-rotate-100{0%{stroke-dashoffset:268.60617px;transform:rotate(0)}12.5%{stroke-dashoffset:56.54867px;transform:rotate(0)}12.5001%{stroke-dashoffset:56.54867px;transform:rotateX(180deg) rotate(72.5deg)}25%{stroke-dashoffset:268.60617px;transform:rotateX(180deg) rotate(72.5deg)}25.0001%{stroke-dashoffset:268.60617px;transform:rotate(270deg)}37.5%{stroke-dashoffset:56.54867px;transform:rotate(270deg)}37.5001%{stroke-dashoffset:56.54867px;transform:rotateX(180deg) rotate(161.5deg)}50%{stroke-dashoffset:268.60617px;transform:rotateX(180deg) rotate(161.5deg)}50.0001%{stroke-dashoffset:268.60617px;transform:rotate(180deg)}62.5%{stroke-dashoffset:56.54867px;transform:rotate(180deg)}62.5001%{stroke-dashoffset:56.54867px;transform:rotateX(180deg) rotate(251.5deg)}75%{stroke-dashoffset:268.60617px;transform:rotateX(180deg) rotate(251.5deg)}75.0001%{stroke-dashoffset:268.60617px;transform:rotate(90deg)}87.5%{stroke-dashoffset:56.54867px;transform:rotate(90deg)}87.5001%{stroke-dashoffset:56.54867px;transform:rotateX(180deg) rotate(341.5deg)}100%{stroke-dashoffset:268.60617px;transform:rotateX(180deg) rotate(341.5deg)}}@keyframes mat-progress-spinner-stroke-rotate-fallback{0%{transform:rotate(0)}25%{transform:rotate(1170deg)}50%{transform:rotate(2340deg)}75%{transform:rotate(3510deg)}100%{transform:rotate(4680deg)}}\";\nvar BASE_SIZE = 100;\n/** *\n * Base reference stroke width of the spinner.\n * \\@docs-private\n  @type {?} */\n\nvar BASE_STROKE_WIDTH = 10;\n/**\n * \\@docs-private\n */\n\nvar MatProgressSpinnerBase =\n/**\n * @param {?} _elementRef\n */\nfunction MatProgressSpinnerBase(_elementRef) {\n  _classCallCheck(this, MatProgressSpinnerBase);\n\n  this._elementRef = _elementRef;\n};\n/** @type {?} */\n\n\nvar _MatProgressSpinnerMixinBase = /*@__PURE__*/mixinColor(MatProgressSpinnerBase, 'primary');\n/** *\n * Injection token to be used to override the default options for `mat-progress-spinner`.\n  @type {?} */\n\n\nvar MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS = /*@__PURE__*/new InjectionToken('mat-progress-spinner-default-options', {\n  providedIn: 'root',\n  factory: MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY\n});\n/**\n * \\@docs-private\n * @return {?}\n */\n\nfunction MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY() {\n  return {\n    diameter: BASE_SIZE\n  };\n}\n/** @type {?} */\n\n\nvar INDETERMINATE_ANIMATION_TEMPLATE = \"\\n @keyframes mat-progress-spinner-stroke-rotate-DIAMETER {\\n    0%      { stroke-dashoffset: START_VALUE;  transform: rotate(0); }\\n    12.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(0); }\\n    12.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(72.5deg); }\\n    25%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(72.5deg); }\\n\\n    25.0001%   { stroke-dashoffset: START_VALUE;  transform: rotate(270deg); }\\n    37.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(270deg); }\\n    37.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(161.5deg); }\\n    50%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(161.5deg); }\\n\\n    50.0001%  { stroke-dashoffset: START_VALUE;  transform: rotate(180deg); }\\n    62.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(180deg); }\\n    62.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(251.5deg); }\\n    75%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(251.5deg); }\\n\\n    75.0001%  { stroke-dashoffset: START_VALUE;  transform: rotate(90deg); }\\n    87.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(90deg); }\\n    87.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(341.5deg); }\\n    100%    { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(341.5deg); }\\n  }\\n\";\n\nvar MatProgressSpinner = /*@__PURE__*/function () {\n  var MatProgressSpinner = /*#__PURE__*/function (_MatProgressSpinnerMi) {\n    _inherits(MatProgressSpinner, _MatProgressSpinnerMi);\n\n    var _super = _createSuper(MatProgressSpinner);\n\n    /**\n     * @param {?} _elementRef\n     * @param {?} platform\n     * @param {?} _document\n     * @param {?=} animationMode\n     * @param {?=} defaults\n     */\n    function MatProgressSpinner(_elementRef, platform, _document, // @breaking-change 8.0.0 animationMode and defaults parameters to be made required.\n    animationMode, defaults) {\n      var _this;\n\n      _classCallCheck(this, MatProgressSpinner);\n\n      _this = _super.call(this, _elementRef);\n      _this._elementRef = _elementRef;\n      _this._document = _document;\n      _this.animationMode = animationMode;\n      _this.defaults = defaults;\n      _this._value = 0;\n      _this._fallbackAnimation = false;\n      /**\n       * Whether the _mat-animation-noopable class should be applied, disabling animations.\n       */\n\n      _this._noopAnimations = _this.animationMode === 'NoopAnimations' && !!_this.defaults && !_this.defaults._forceAnimations;\n      _this._diameter = BASE_SIZE;\n      /**\n       * Mode of the progress circle\n       */\n\n      _this.mode = 'determinate';\n      _this._fallbackAnimation = platform.EDGE || platform.TRIDENT;\n\n      if (defaults) {\n        if (defaults.diameter) {\n          _this.diameter = defaults.diameter;\n        }\n\n        if (defaults.strokeWidth) {\n          _this.strokeWidth = defaults.strokeWidth;\n        }\n      }\n      /** @type {?} */\n\n\n      var animationClass = \"mat-progress-spinner-indeterminate\".concat(_this._fallbackAnimation ? '-fallback' : '', \"-animation\");\n\n      _elementRef.nativeElement.classList.add(animationClass);\n\n      return _this;\n    }\n    /**\n     * The diameter of the progress spinner (will set width and height of svg).\n     * @return {?}\n     */\n\n\n    _createClass(MatProgressSpinner, [{\n      key: \"diameter\",\n      get: function get() {\n        return this._diameter;\n      }\n      /**\n       * @param {?} size\n       * @return {?}\n       */\n      ,\n      set: function set(size) {\n        this._diameter = coerceNumberProperty(size);\n\n        if (!this._fallbackAnimation && !MatProgressSpinner.diameters.has(this._diameter)) {\n          this._attachStyleNode();\n        }\n      }\n      /**\n       * Stroke width of the progress spinner.\n       * @return {?}\n       */\n\n    }, {\n      key: \"strokeWidth\",\n      get: function get() {\n        return this._strokeWidth || this.diameter / 10;\n      }\n      /**\n       * @param {?} value\n       * @return {?}\n       */\n      ,\n      set: function set(value) {\n        this._strokeWidth = coerceNumberProperty(value);\n      }\n      /**\n       * Value of the progress circle.\n       * @return {?}\n       */\n\n    }, {\n      key: \"value\",\n      get: function get() {\n        return this.mode === 'determinate' ? this._value : 0;\n      }\n      /**\n       * @param {?} newValue\n       * @return {?}\n       */\n      ,\n      set: function set(newValue) {\n        this._value = Math.max(0, Math.min(100, coerceNumberProperty(newValue)));\n      }\n      /**\n       * The radius of the spinner, adjusted for stroke width.\n       * @return {?}\n       */\n\n    }, {\n      key: \"_circleRadius\",\n      get: function get() {\n        return (this.diameter - BASE_STROKE_WIDTH) / 2;\n      }\n      /**\n       * The view box of the spinner's svg element.\n       * @return {?}\n       */\n\n    }, {\n      key: \"_viewBox\",\n      get: function get() {\n        /** @type {?} */\n        var viewBox = this._circleRadius * 2 + this.strokeWidth;\n        return \"0 0 \".concat(viewBox, \" \").concat(viewBox);\n      }\n      /**\n       * The stroke circumference of the svg circle.\n       * @return {?}\n       */\n\n    }, {\n      key: \"_strokeCircumference\",\n      get: function get() {\n        return 2 * Math.PI * this._circleRadius;\n      }\n      /**\n       * The dash offset of the svg circle.\n       * @return {?}\n       */\n\n    }, {\n      key: \"_strokeDashOffset\",\n      get: function get() {\n        if (this.mode === 'determinate') {\n          return this._strokeCircumference * (100 - this._value) / 100;\n        } // In fallback mode set the circle to 80% and rotate it with CSS.\n\n\n        if (this._fallbackAnimation && this.mode === 'indeterminate') {\n          return this._strokeCircumference * 0.2;\n        }\n\n        return null;\n      }\n      /**\n       * Stroke width of the circle in percent.\n       * @return {?}\n       */\n\n    }, {\n      key: \"_circleStrokeWidth\",\n      get: function get() {\n        return this.strokeWidth / this.diameter * 100;\n      }\n      /**\n       * Dynamically generates a style tag containing the correct animation for this diameter.\n       * @return {?}\n       */\n\n    }, {\n      key: \"_attachStyleNode\",\n      value: function _attachStyleNode() {\n        /** @type {?} */\n        var styleTag = MatProgressSpinner.styleTag;\n\n        if (!styleTag) {\n          styleTag = this._document.createElement('style');\n\n          this._document.head.appendChild(styleTag);\n\n          MatProgressSpinner.styleTag = styleTag;\n        }\n\n        if (styleTag && styleTag.sheet) {\n          /** @type {?} */\n          styleTag.sheet.insertRule(this._getAnimationText(), 0);\n        }\n\n        MatProgressSpinner.diameters.add(this.diameter);\n      }\n      /**\n       * Generates animation styles adjusted for the spinner's diameter.\n       * @return {?}\n       */\n\n    }, {\n      key: \"_getAnimationText\",\n      value: function _getAnimationText() {\n        return INDETERMINATE_ANIMATION_TEMPLATE // Animation should begin at 5% and end at 80%\n        .replace(/START_VALUE/g, \"\".concat(0.95 * this._strokeCircumference)).replace(/END_VALUE/g, \"\".concat(0.2 * this._strokeCircumference)).replace(/DIAMETER/g, \"\".concat(this.diameter));\n      }\n    }]);\n\n    return MatProgressSpinner;\n  }(_MatProgressSpinnerMixinBase);\n\n  MatProgressSpinner.ɵfac = function MatProgressSpinner_Factory(t) {\n    return new (t || MatProgressSpinner)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.Platform), ɵngcc0.ɵɵdirectiveInject(DOCUMENT, 8), ɵngcc0.ɵɵdirectiveInject(ANIMATION_MODULE_TYPE, 8), ɵngcc0.ɵɵdirectiveInject(MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS));\n  };\n\n  MatProgressSpinner.ɵcmp =\n  /*@__PURE__*/\n\n  /*@__PURE__*/\n  ɵngcc0.ɵɵdefineComponent({\n    type: MatProgressSpinner,\n    selectors: [[\"mat-progress-spinner\"]],\n    hostAttrs: [\"role\", \"progressbar\", 1, \"mat-progress-spinner\"],\n    hostVars: 10,\n    hostBindings: function MatProgressSpinner_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"aria-valuemin\", ctx.mode === \"determinate\" ? 0 : null)(\"aria-valuemax\", ctx.mode === \"determinate\" ? 100 : null)(\"aria-valuenow\", ctx.value)(\"mode\", ctx.mode);\n        ɵngcc0.ɵɵstyleProp(\"width\", ctx.diameter, \"px\")(\"height\", ctx.diameter, \"px\");\n        ɵngcc0.ɵɵclassProp(\"_mat-animation-noopable\", ctx._noopAnimations);\n      }\n    },\n    inputs: {\n      color: \"color\",\n      mode: \"mode\",\n      diameter: \"diameter\",\n      strokeWidth: \"strokeWidth\",\n      value: \"value\"\n    },\n    exportAs: [\"matProgressSpinner\"],\n    features: [ɵngcc0.ɵɵInheritDefinitionFeature],\n    decls: 3,\n    vars: 8,\n    consts: [[\"preserveAspectRatio\", \"xMidYMid meet\", \"focusable\", \"false\", 3, \"ngSwitch\"], [\"cx\", \"50%\", \"cy\", \"50%\", 3, \"animation-name\", \"stroke-dashoffset\", \"stroke-dasharray\", \"stroke-width\", 4, \"ngSwitchCase\"], [\"cx\", \"50%\", \"cy\", \"50%\", 3, \"stroke-dashoffset\", \"stroke-dasharray\", \"stroke-width\", 4, \"ngSwitchCase\"], [\"cx\", \"50%\", \"cy\", \"50%\"]],\n    template: function MatProgressSpinner_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵnamespaceSVG();\n        ɵngcc0.ɵɵelementStart(0, \"svg\", 0);\n        ɵngcc0.ɵɵtemplate(1, MatProgressSpinner__svg_circle_1_Template, 1, 9, \"circle\", 1);\n        ɵngcc0.ɵɵtemplate(2, MatProgressSpinner__svg_circle_2_Template, 1, 7, \"circle\", 2);\n        ɵngcc0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵstyleProp(\"width\", ctx.diameter, \"px\")(\"height\", ctx.diameter, \"px\");\n        ɵngcc0.ɵɵproperty(\"ngSwitch\", ctx.mode === \"indeterminate\");\n        ɵngcc0.ɵɵattribute(\"viewBox\", ctx._viewBox);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngSwitchCase\", true);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngSwitchCase\", false);\n      }\n    },\n    directives: [ɵngcc2.NgSwitch, ɵngcc2.NgSwitchCase],\n    styles: [_c0],\n    encapsulation: 2,\n    changeDetection: 0\n  });\n  /**\n   * Tracks diameters of existing instances to de-dupe generated styles (default d = 100)\n   */\n\n  MatProgressSpinner.diameters = /*@__PURE__*/new Set([BASE_SIZE]);\n  /**\n   * Used for storing all of the generated keyframe animations.\n   * \\@dynamic\n   */\n\n  MatProgressSpinner.styleTag = null;\n  return MatProgressSpinner;\n}();\n\nvar MatSpinner = /*@__PURE__*/function () {\n  var MatSpinner = /*#__PURE__*/function (_MatProgressSpinner) {\n    _inherits(MatSpinner, _MatProgressSpinner);\n\n    var _super2 = _createSuper(MatSpinner);\n\n    /**\n     * @param {?} elementRef\n     * @param {?} platform\n     * @param {?} document\n     * @param {?=} animationMode\n     * @param {?=} defaults\n     */\n    function MatSpinner(elementRef, platform, document, // @breaking-change 8.0.0 animationMode and defaults parameters to be made required.\n    animationMode, defaults) {\n      var _this2;\n\n      _classCallCheck(this, MatSpinner);\n\n      _this2 = _super2.call(this, elementRef, platform, document, animationMode, defaults);\n      _this2.mode = 'indeterminate';\n      return _this2;\n    }\n\n    return MatSpinner;\n  }(MatProgressSpinner);\n\n  MatSpinner.ɵfac = function MatSpinner_Factory(t) {\n    return new (t || MatSpinner)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.Platform), ɵngcc0.ɵɵdirectiveInject(DOCUMENT, 8), ɵngcc0.ɵɵdirectiveInject(ANIMATION_MODULE_TYPE, 8), ɵngcc0.ɵɵdirectiveInject(MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS));\n  };\n\n  MatSpinner.ɵcmp =\n  /*@__PURE__*/\n\n  /*@__PURE__*/\n  ɵngcc0.ɵɵdefineComponent({\n    type: MatSpinner,\n    selectors: [[\"mat-spinner\"]],\n    hostAttrs: [\"role\", \"progressbar\", \"mode\", \"indeterminate\", 1, \"mat-spinner\", \"mat-progress-spinner\"],\n    hostVars: 6,\n    hostBindings: function MatSpinner_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        ɵngcc0.ɵɵstyleProp(\"width\", ctx.diameter, \"px\")(\"height\", ctx.diameter, \"px\");\n        ɵngcc0.ɵɵclassProp(\"_mat-animation-noopable\", ctx._noopAnimations);\n      }\n    },\n    inputs: {\n      color: \"color\"\n    },\n    features: [ɵngcc0.ɵɵInheritDefinitionFeature],\n    decls: 3,\n    vars: 8,\n    consts: [[\"preserveAspectRatio\", \"xMidYMid meet\", \"focusable\", \"false\", 3, \"ngSwitch\"], [\"cx\", \"50%\", \"cy\", \"50%\", 3, \"animation-name\", \"stroke-dashoffset\", \"stroke-dasharray\", \"stroke-width\", 4, \"ngSwitchCase\"], [\"cx\", \"50%\", \"cy\", \"50%\", 3, \"stroke-dashoffset\", \"stroke-dasharray\", \"stroke-width\", 4, \"ngSwitchCase\"], [\"cx\", \"50%\", \"cy\", \"50%\"]],\n    template: function MatSpinner_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵnamespaceSVG();\n        ɵngcc0.ɵɵelementStart(0, \"svg\", 0);\n        ɵngcc0.ɵɵtemplate(1, MatSpinner__svg_circle_1_Template, 1, 9, \"circle\", 1);\n        ɵngcc0.ɵɵtemplate(2, MatSpinner__svg_circle_2_Template, 1, 7, \"circle\", 2);\n        ɵngcc0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵstyleProp(\"width\", ctx.diameter, \"px\")(\"height\", ctx.diameter, \"px\");\n        ɵngcc0.ɵɵproperty(\"ngSwitch\", ctx.mode === \"indeterminate\");\n        ɵngcc0.ɵɵattribute(\"viewBox\", ctx._viewBox);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngSwitchCase\", true);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngSwitchCase\", false);\n      }\n    },\n    directives: [ɵngcc2.NgSwitch, ɵngcc2.NgSwitchCase],\n    styles: [_c0],\n    encapsulation: 2,\n    changeDetection: 0\n  });\n  return MatSpinner;\n}();\n\nvar MatProgressSpinnerModule = /*@__PURE__*/function () {\n  var MatProgressSpinnerModule = function MatProgressSpinnerModule() {\n    _classCallCheck(this, MatProgressSpinnerModule);\n  };\n\n  MatProgressSpinnerModule.ɵfac = function MatProgressSpinnerModule_Factory(t) {\n    return new (t || MatProgressSpinnerModule)();\n  };\n\n  MatProgressSpinnerModule.ɵmod =\n  /*@__PURE__*/\n\n  /*@__PURE__*/\n  ɵngcc0.ɵɵdefineNgModule({\n    type: MatProgressSpinnerModule\n  });\n  MatProgressSpinnerModule.ɵinj =\n  /*@__PURE__*/\n\n  /*@__PURE__*/\n  ɵngcc0.ɵɵdefineInjector({\n    imports: [[MatCommonModule, CommonModule], MatCommonModule]\n  });\n  return MatProgressSpinnerModule;\n}();\n/*@__PURE__*/\n\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatProgressSpinnerModule, {\n    declarations: function declarations() {\n      return [MatProgressSpinner, MatSpinner];\n    },\n    imports: function imports() {\n      return [MatCommonModule, CommonModule];\n    },\n    exports: function exports() {\n      return [MatProgressSpinner, MatSpinner, MatCommonModule];\n    }\n  });\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n\nexport { MatProgressSpinnerModule, MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY, MatProgressSpinnerBase, _MatProgressSpinnerMixinBase, MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS, MatProgressSpinner, MatSpinner }; //# sourceMappingURL=progress-spinner.js.map","map":null,"metadata":{},"sourceType":"module"}