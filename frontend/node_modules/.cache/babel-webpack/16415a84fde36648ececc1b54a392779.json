{"ast":null,"code":"import _get from \"/Users/adepertat/Dropbox/ECOLES/Openclassroom/P6_de_Pertat_Antoine/AntoinedePertat_6_240521/frontend/node_modules/@babel/runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"/Users/adepertat/Dropbox/ECOLES/Openclassroom/P6_de_Pertat_Antoine/AntoinedePertat_6_240521/frontend/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/adepertat/Dropbox/ECOLES/Openclassroom/P6_de_Pertat_Antoine/AntoinedePertat_6_240521/frontend/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/adepertat/Dropbox/ECOLES/Openclassroom/P6_de_Pertat_Antoine/AntoinedePertat_6_240521/frontend/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _classCallCheck from \"/Users/adepertat/Dropbox/ECOLES/Openclassroom/P6_de_Pertat_Antoine/AntoinedePertat_6_240521/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/adepertat/Dropbox/ECOLES/Openclassroom/P6_de_Pertat_Antoine/AntoinedePertat_6_240521/frontend/node_modules/@babel/runtime/helpers/esm/createClass\";\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { DOCUMENT, CommonModule } from '@angular/common';\nimport { Inject, Injectable, Optional, SkipSelf, QueryList, Directive, ElementRef, Input, NgZone, InjectionToken, EventEmitter, Output, NgModule, defineInjectable, inject } from '@angular/core';\nimport { Subject, Subscription, of } from 'rxjs';\nimport { UP_ARROW, DOWN_ARROW, LEFT_ARROW, RIGHT_ARROW, TAB, A, Z, ZERO, NINE } from '@angular/cdk/keycodes';\nimport { debounceTime, filter, map, tap, take } from 'rxjs/operators';\nimport { Platform, normalizePassiveListenerOptions, PlatformModule } from '@angular/cdk/platform';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { ContentObserver, ObserversModule } from '@angular/cdk/observers';\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/** *\n * IDs are deliminated by an empty space, as per the spec.\n  @type {?} */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/platform';\nimport * as ɵngcc2 from '@angular/cdk/observers';\nvar ID_DELIMINATOR = ' ';\n/**\n * Adds the given ID to the specified ARIA attribute on an element.\n * Used for attributes such as aria-labelledby, aria-owns, etc.\n * @param {?} el\n * @param {?} attr\n * @param {?} id\n * @return {?}\n */\n\nfunction addAriaReferencedId(el, attr, id) {\n  /** @type {?} */\n  var ids = getAriaReferenceIds(el, attr);\n\n  if (ids.some(function (existingId) {\n    return existingId.trim() == id.trim();\n  })) {\n    return;\n  }\n\n  ids.push(id.trim());\n  el.setAttribute(attr, ids.join(ID_DELIMINATOR));\n}\n/**\n * Removes the given ID from the specified ARIA attribute on an element.\n * Used for attributes such as aria-labelledby, aria-owns, etc.\n * @param {?} el\n * @param {?} attr\n * @param {?} id\n * @return {?}\n */\n\n\nfunction removeAriaReferencedId(el, attr, id) {\n  /** @type {?} */\n  var ids = getAriaReferenceIds(el, attr);\n  /** @type {?} */\n\n  var filteredIds = ids.filter(function (val) {\n    return val != id.trim();\n  });\n  el.setAttribute(attr, filteredIds.join(ID_DELIMINATOR));\n}\n/**\n * Gets the list of IDs referenced by the given ARIA attribute on an element.\n * Used for attributes such as aria-labelledby, aria-owns, etc.\n * @param {?} el\n * @param {?} attr\n * @return {?}\n */\n\n\nfunction getAriaReferenceIds(el, attr) {\n  // Get string array of all individual ids (whitespace deliminated) in the attribute value\n  return (el.getAttribute(attr) || '').match(/\\S+/g) || [];\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/** *\n * ID used for the body container where all messages are appended.\n  @type {?} */\n\n\nvar MESSAGES_CONTAINER_ID = 'cdk-describedby-message-container';\n/** *\n * ID prefix used for each created message element.\n  @type {?} */\n\nvar CDK_DESCRIBEDBY_ID_PREFIX = 'cdk-describedby-message';\n/** *\n * Attribute given to each host element that is described by a message element.\n  @type {?} */\n\nvar CDK_DESCRIBEDBY_HOST_ATTRIBUTE = 'cdk-describedby-host';\n/** *\n * Global incremental identifier for each registered message element.\n  @type {?} */\n\nvar nextId = 0;\n/** *\n * Global map of all registered message elements that have been placed into the document.\n  @type {?} */\n\nvar messageRegistry = /*@__PURE__*/new Map();\n/** *\n * Container for all registered messages.\n  @type {?} */\n\nvar messagesContainer = null;\n\nvar AriaDescriber = /*@__PURE__*/function () {\n  var AriaDescriber = /*#__PURE__*/function () {\n    /**\n     * @param {?} _document\n     */\n    function AriaDescriber(_document) {\n      _classCallCheck(this, AriaDescriber);\n\n      this._document = _document;\n    }\n    /**\n     * Adds to the host element an aria-describedby reference to a hidden element that contains\n     * the message. If the same message has already been registered, then it will reuse the created\n     * message element.\n     * @param {?} hostElement\n     * @param {?} message\n     * @return {?}\n     */\n\n\n    _createClass(AriaDescriber, [{\n      key: \"describe\",\n      value: function describe(hostElement, message) {\n        if (!this._canBeDescribed(hostElement, message)) {\n          return;\n        }\n\n        if (!messageRegistry.has(message)) {\n          this._createMessageElement(message);\n        }\n\n        if (!this._isElementDescribedByMessage(hostElement, message)) {\n          this._addMessageReference(hostElement, message);\n        }\n      }\n      /**\n       * Removes the host element's aria-describedby reference to the message element.\n       * @param {?} hostElement\n       * @param {?} message\n       * @return {?}\n       */\n\n    }, {\n      key: \"removeDescription\",\n      value: function removeDescription(hostElement, message) {\n        if (!this._canBeDescribed(hostElement, message)) {\n          return;\n        }\n\n        if (this._isElementDescribedByMessage(hostElement, message)) {\n          this._removeMessageReference(hostElement, message);\n        }\n        /** @type {?} */\n\n\n        var registeredMessage = messageRegistry.get(message);\n\n        if (registeredMessage && registeredMessage.referenceCount === 0) {\n          this._deleteMessageElement(message);\n        }\n\n        if (messagesContainer && messagesContainer.childNodes.length === 0) {\n          this._deleteMessagesContainer();\n        }\n      }\n      /**\n       * Unregisters all created message elements and removes the message container.\n       * @return {?}\n       */\n\n    }, {\n      key: \"ngOnDestroy\",\n      value: function ngOnDestroy() {\n        /** @type {?} */\n        var describedElements = this._document.querySelectorAll(\"[\".concat(CDK_DESCRIBEDBY_HOST_ATTRIBUTE, \"]\"));\n\n        for (var i = 0; i < describedElements.length; i++) {\n          this._removeCdkDescribedByReferenceIds(describedElements[i]);\n\n          describedElements[i].removeAttribute(CDK_DESCRIBEDBY_HOST_ATTRIBUTE);\n        }\n\n        if (messagesContainer) {\n          this._deleteMessagesContainer();\n        }\n\n        messageRegistry.clear();\n      }\n      /**\n       * Creates a new element in the visually hidden message container element with the message\n       * as its content and adds it to the message registry.\n       * @param {?} message\n       * @return {?}\n       */\n\n    }, {\n      key: \"_createMessageElement\",\n      value: function _createMessageElement(message) {\n        /** @type {?} */\n        var messageElement = this._document.createElement('div');\n\n        messageElement.setAttribute('id', \"\".concat(CDK_DESCRIBEDBY_ID_PREFIX, \"-\").concat(nextId++));\n        messageElement.appendChild(\n        /** @type {?} */\n        this._document.createTextNode(message));\n\n        this._createMessagesContainer();\n        /** @type {?} */\n\n\n        messagesContainer.appendChild(messageElement);\n        messageRegistry.set(message, {\n          messageElement: messageElement,\n          referenceCount: 0\n        });\n      }\n      /**\n       * Deletes the message element from the global messages container.\n       * @param {?} message\n       * @return {?}\n       */\n\n    }, {\n      key: \"_deleteMessageElement\",\n      value: function _deleteMessageElement(message) {\n        /** @type {?} */\n        var registeredMessage = messageRegistry.get(message);\n        /** @type {?} */\n\n        var messageElement = registeredMessage && registeredMessage.messageElement;\n\n        if (messagesContainer && messageElement) {\n          messagesContainer.removeChild(messageElement);\n        }\n\n        messageRegistry.delete(message);\n      }\n      /**\n       * Creates the global container for all aria-describedby messages.\n       * @return {?}\n       */\n\n    }, {\n      key: \"_createMessagesContainer\",\n      value: function _createMessagesContainer() {\n        if (!messagesContainer) {\n          /** @type {?} */\n          var preExistingContainer = this._document.getElementById(MESSAGES_CONTAINER_ID); // When going from the server to the client, we may end up in a situation where there's\n          // already a container on the page, but we don't have a reference to it. Clear the\n          // old container so we don't get duplicates. Doing this, instead of emptying the previous\n          // container, should be slightly faster.\n\n\n          if (preExistingContainer) {\n            /** @type {?} */\n            preExistingContainer.parentNode.removeChild(preExistingContainer);\n          }\n\n          messagesContainer = this._document.createElement('div');\n          messagesContainer.id = MESSAGES_CONTAINER_ID;\n          messagesContainer.setAttribute('aria-hidden', 'true');\n          messagesContainer.style.display = 'none';\n\n          this._document.body.appendChild(messagesContainer);\n        }\n      }\n      /**\n       * Deletes the global messages container.\n       * @return {?}\n       */\n\n    }, {\n      key: \"_deleteMessagesContainer\",\n      value: function _deleteMessagesContainer() {\n        if (messagesContainer && messagesContainer.parentNode) {\n          messagesContainer.parentNode.removeChild(messagesContainer);\n          messagesContainer = null;\n        }\n      }\n      /**\n       * Removes all cdk-describedby messages that are hosted through the element.\n       * @param {?} element\n       * @return {?}\n       */\n\n    }, {\n      key: \"_removeCdkDescribedByReferenceIds\",\n      value: function _removeCdkDescribedByReferenceIds(element) {\n        /** @type {?} */\n        var originalReferenceIds = getAriaReferenceIds(element, 'aria-describedby').filter(function (id) {\n          return id.indexOf(CDK_DESCRIBEDBY_ID_PREFIX) != 0;\n        });\n        element.setAttribute('aria-describedby', originalReferenceIds.join(' '));\n      }\n      /**\n       * Adds a message reference to the element using aria-describedby and increments the registered\n       * message's reference count.\n       * @param {?} element\n       * @param {?} message\n       * @return {?}\n       */\n\n    }, {\n      key: \"_addMessageReference\",\n      value: function _addMessageReference(element, message) {\n        /** @type {?} */\n        var registeredMessage =\n        /** @type {?} */\n        messageRegistry.get(message); // Add the aria-describedby reference and set the\n        // describedby_host attribute to mark the element.\n\n        addAriaReferencedId(element, 'aria-describedby', registeredMessage.messageElement.id);\n        element.setAttribute(CDK_DESCRIBEDBY_HOST_ATTRIBUTE, '');\n        registeredMessage.referenceCount++;\n      }\n      /**\n       * Removes a message reference from the element using aria-describedby\n       * and decrements the registered message's reference count.\n       * @param {?} element\n       * @param {?} message\n       * @return {?}\n       */\n\n    }, {\n      key: \"_removeMessageReference\",\n      value: function _removeMessageReference(element, message) {\n        /** @type {?} */\n        var registeredMessage =\n        /** @type {?} */\n        messageRegistry.get(message);\n        registeredMessage.referenceCount--;\n        removeAriaReferencedId(element, 'aria-describedby', registeredMessage.messageElement.id);\n        element.removeAttribute(CDK_DESCRIBEDBY_HOST_ATTRIBUTE);\n      }\n      /**\n       * Returns true if the element has been described by the provided message ID.\n       * @param {?} element\n       * @param {?} message\n       * @return {?}\n       */\n\n    }, {\n      key: \"_isElementDescribedByMessage\",\n      value: function _isElementDescribedByMessage(element, message) {\n        /** @type {?} */\n        var referenceIds = getAriaReferenceIds(element, 'aria-describedby');\n        /** @type {?} */\n\n        var registeredMessage = messageRegistry.get(message);\n        /** @type {?} */\n\n        var messageId = registeredMessage && registeredMessage.messageElement.id;\n        return !!messageId && referenceIds.indexOf(messageId) != -1;\n      }\n      /**\n       * Determines whether a message can be described on a particular element.\n       * @param {?} element\n       * @param {?} message\n       * @return {?}\n       */\n\n    }, {\n      key: \"_canBeDescribed\",\n      value: function _canBeDescribed(element, message) {\n        return element.nodeType === this._document.ELEMENT_NODE && message != null && !!\"\".concat(message).trim();\n      }\n    }]);\n\n    return AriaDescriber;\n  }();\n\n  AriaDescriber.ɵfac = function AriaDescriber_Factory(t) {\n    return new (t || AriaDescriber)(ɵngcc0.ɵɵinject(DOCUMENT));\n  };\n\n  AriaDescriber.ɵprov =\n  /*@__PURE__*/\n\n  /*@__PURE__*/\n  ɵngcc0.ɵɵdefineInjectable({\n    token: AriaDescriber,\n    factory: AriaDescriber.ɵfac,\n    providedIn: 'root'\n  });\n  /** @nocollapse */\n\n  AriaDescriber.ngInjectableDef = /*@__PURE__*/defineInjectable({\n    factory: function AriaDescriber_Factory() {\n      return new AriaDescriber(inject(DOCUMENT));\n    },\n    token: AriaDescriber,\n    providedIn: \"root\"\n  });\n  return AriaDescriber;\n}();\n/**\n * \\@docs-private \\@deprecated \\@breaking-change 8.0.0\n * @param {?} parentDispatcher\n * @param {?} _document\n * @return {?}\n */\n\n\nfunction ARIA_DESCRIBER_PROVIDER_FACTORY(parentDispatcher, _document) {\n  return parentDispatcher || new AriaDescriber(_document);\n}\n/** *\n * \\@docs-private \\@deprecated \\@breaking-change 8.0.0\n  @type {?} */\n\n\nvar ARIA_DESCRIBER_PROVIDER = {\n  // If there is already an AriaDescriber available, use that. Otherwise, provide a new one.\n  provide: AriaDescriber,\n  deps: [[/*@__PURE__*/new Optional(), /*@__PURE__*/new SkipSelf(), AriaDescriber],\n  /** @type {?} */\n  DOCUMENT],\n  useFactory: ARIA_DESCRIBER_PROVIDER_FACTORY\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n// unsupported: template constraints.\n\n/**\n * This class manages keyboard events for selectable lists. If you pass it a query list\n * of items, it will set the active item correctly when arrow events occur.\n * @template T\n */\n\nvar ListKeyManager = /*#__PURE__*/function () {\n  /**\n   * @param {?} _items\n   */\n  function ListKeyManager(_items) {\n    var _this = this;\n\n    _classCallCheck(this, ListKeyManager);\n\n    this._items = _items;\n    this._activeItemIndex = -1;\n    this._wrap = false;\n    this._letterKeyStream = new Subject();\n    this._typeaheadSubscription = Subscription.EMPTY;\n    this._vertical = true;\n    /**\n     * Predicate function that can be used to check whether an item should be skipped\n     * by the key manager. By default, disabled items are skipped.\n     */\n\n    this._skipPredicateFn = function (item) {\n      return item.disabled;\n    };\n\n    this._pressedLetters = [];\n    /**\n     * Stream that emits any time the TAB key is pressed, so components can react\n     * when focus is shifted off of the list.\n     */\n\n    this.tabOut = new Subject();\n    /**\n     * Stream that emits whenever the active item of the list manager changes.\n     */\n\n    this.change = new Subject(); // We allow for the items to be an array because, in some cases, the consumer may\n    // not have access to a QueryList of the items they want to manage (e.g. when the\n    // items aren't being collected via `ViewChildren` or `ContentChildren`).\n\n    if (_items instanceof QueryList) {\n      _items.changes.subscribe(function (newItems) {\n        if (_this._activeItem) {\n          /** @type {?} */\n          var itemArray = newItems.toArray();\n          /** @type {?} */\n\n          var newIndex = itemArray.indexOf(_this._activeItem);\n\n          if (newIndex > -1 && newIndex !== _this._activeItemIndex) {\n            _this._activeItemIndex = newIndex;\n          }\n        }\n      });\n    }\n  }\n  /**\n   * Sets the predicate function that determines which items should be skipped by the\n   * list key manager.\n   * @param {?} predicate Function that determines whether the given item should be skipped.\n   * @return {?}\n   */\n\n\n  _createClass(ListKeyManager, [{\n    key: \"skipPredicate\",\n    value: function skipPredicate(predicate) {\n      this._skipPredicateFn = predicate;\n      return this;\n    }\n    /**\n     * Configures wrapping mode, which determines whether the active item will wrap to\n     * the other end of list when there are no more items in the given direction.\n     * @param {?=} shouldWrap Whether the list should wrap when reaching the end.\n     * @return {?}\n     */\n\n  }, {\n    key: \"withWrap\",\n    value: function withWrap() {\n      var shouldWrap = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n      this._wrap = shouldWrap;\n      return this;\n    }\n    /**\n     * Configures whether the key manager should be able to move the selection vertically.\n     * @param {?=} enabled Whether vertical selection should be enabled.\n     * @return {?}\n     */\n\n  }, {\n    key: \"withVerticalOrientation\",\n    value: function withVerticalOrientation() {\n      var enabled = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n      this._vertical = enabled;\n      return this;\n    }\n    /**\n     * Configures the key manager to move the selection horizontally.\n     * Passing in `null` will disable horizontal movement.\n     * @param {?} direction Direction in which the selection can be moved.\n     * @return {?}\n     */\n\n  }, {\n    key: \"withHorizontalOrientation\",\n    value: function withHorizontalOrientation(direction) {\n      this._horizontal = direction;\n      return this;\n    }\n    /**\n     * Turns on typeahead mode which allows users to set the active item by typing.\n     * @param {?=} debounceInterval Time to wait after the last keystroke before setting the active item.\n     * @return {?}\n     */\n\n  }, {\n    key: \"withTypeAhead\",\n    value: function withTypeAhead() {\n      var _this2 = this;\n\n      var debounceInterval = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 200;\n\n      if (this._items.length && this._items.some(function (item) {\n        return typeof item.getLabel !== 'function';\n      })) {\n        throw Error('ListKeyManager items in typeahead mode must implement the `getLabel` method.');\n      }\n\n      this._typeaheadSubscription.unsubscribe(); // Debounce the presses of non-navigational keys, collect the ones that correspond to letters\n      // and convert those letters back into a string. Afterwards find the first item that starts\n      // with that string and select it.\n\n\n      this._typeaheadSubscription = this._letterKeyStream.pipe(tap(function (keyCode) {\n        return _this2._pressedLetters.push(keyCode);\n      }), debounceTime(debounceInterval), filter(function () {\n        return _this2._pressedLetters.length > 0;\n      }), map(function () {\n        return _this2._pressedLetters.join('');\n      })).subscribe(function (inputString) {\n        /** @type {?} */\n        var items = _this2._getItemsArray(); // Start at 1 because we want to start searching at the item immediately\n        // following the current active item.\n\n\n        for (var i = 1; i < items.length + 1; i++) {\n          /** @type {?} */\n          var index = (_this2._activeItemIndex + i) % items.length;\n          /** @type {?} */\n\n          var item = items[index];\n\n          if (!_this2._skipPredicateFn(item) &&\n          /** @type {?} */\n          item.getLabel().toUpperCase().trim().indexOf(inputString) === 0) {\n            _this2.setActiveItem(index);\n\n            break;\n          }\n        }\n\n        _this2._pressedLetters = [];\n      });\n      return this;\n    }\n    /**\n     * @param {?} item\n     * @return {?}\n     */\n\n  }, {\n    key: \"setActiveItem\",\n    value: function setActiveItem(item) {\n      /** @type {?} */\n      var previousIndex = this._activeItemIndex;\n      this.updateActiveItem(item);\n\n      if (this._activeItemIndex !== previousIndex) {\n        this.change.next(this._activeItemIndex);\n      }\n    }\n    /**\n     * Sets the active item depending on the key event passed in.\n     * @param {?} event Keyboard event to be used for determining which element should be active.\n     * @return {?}\n     */\n\n  }, {\n    key: \"onKeydown\",\n    value: function onKeydown(event) {\n      /** @type {?} */\n      var keyCode = event.keyCode;\n\n      switch (keyCode) {\n        case TAB:\n          this.tabOut.next();\n          return;\n\n        case DOWN_ARROW:\n          if (this._vertical) {\n            this.setNextItemActive();\n            break;\n          } else {\n            return;\n          }\n\n        case UP_ARROW:\n          if (this._vertical) {\n            this.setPreviousItemActive();\n            break;\n          } else {\n            return;\n          }\n\n        case RIGHT_ARROW:\n          if (this._horizontal === 'ltr') {\n            this.setNextItemActive();\n            break;\n          } else if (this._horizontal === 'rtl') {\n            this.setPreviousItemActive();\n            break;\n          } else {\n            return;\n          }\n\n        case LEFT_ARROW:\n          if (this._horizontal === 'ltr') {\n            this.setPreviousItemActive();\n            break;\n          } else if (this._horizontal === 'rtl') {\n            this.setNextItemActive();\n            break;\n          } else {\n            return;\n          }\n\n        default:\n          // Attempt to use the `event.key` which also maps it to the user's keyboard language,\n          // otherwise fall back to resolving alphanumeric characters via the keyCode.\n          if (event.key && event.key.length === 1) {\n            this._letterKeyStream.next(event.key.toLocaleUpperCase());\n          } else if (keyCode >= A && keyCode <= Z || keyCode >= ZERO && keyCode <= NINE) {\n            this._letterKeyStream.next(String.fromCharCode(keyCode));\n          } // Note that we return here, in order to avoid preventing\n          // the default action of non-navigational keys.\n\n\n          return;\n      }\n\n      this._pressedLetters = [];\n      event.preventDefault();\n    }\n    /**\n     * Index of the currently active item.\n     * @return {?}\n     */\n\n  }, {\n    key: \"activeItemIndex\",\n    get: function get() {\n      return this._activeItemIndex;\n    }\n    /**\n     * The active item.\n     * @return {?}\n     */\n\n  }, {\n    key: \"activeItem\",\n    get: function get() {\n      return this._activeItem;\n    }\n    /**\n     * Sets the active item to the first enabled item in the list.\n     * @return {?}\n     */\n\n  }, {\n    key: \"setFirstItemActive\",\n    value: function setFirstItemActive() {\n      this._setActiveItemByIndex(0, 1);\n    }\n    /**\n     * Sets the active item to the last enabled item in the list.\n     * @return {?}\n     */\n\n  }, {\n    key: \"setLastItemActive\",\n    value: function setLastItemActive() {\n      this._setActiveItemByIndex(this._items.length - 1, -1);\n    }\n    /**\n     * Sets the active item to the next enabled item in the list.\n     * @return {?}\n     */\n\n  }, {\n    key: \"setNextItemActive\",\n    value: function setNextItemActive() {\n      this._activeItemIndex < 0 ? this.setFirstItemActive() : this._setActiveItemByDelta(1);\n    }\n    /**\n     * Sets the active item to a previous enabled item in the list.\n     * @return {?}\n     */\n\n  }, {\n    key: \"setPreviousItemActive\",\n    value: function setPreviousItemActive() {\n      this._activeItemIndex < 0 && this._wrap ? this.setLastItemActive() : this._setActiveItemByDelta(-1);\n    }\n    /**\n     * @param {?} item\n     * @return {?}\n     */\n\n  }, {\n    key: \"updateActiveItem\",\n    value: function updateActiveItem(item) {\n      /** @type {?} */\n      var itemArray = this._getItemsArray();\n      /** @type {?} */\n\n\n      var index = typeof item === 'number' ? item : itemArray.indexOf(item);\n      this._activeItemIndex = index;\n      this._activeItem = itemArray[index];\n    }\n    /**\n     * Allows setting of the activeItemIndex without any other effects.\n     * @deprecated Use `updateActiveItem` instead.\n     * \\@breaking-change 8.0.0\n     * @param {?} index The new activeItemIndex.\n     * @return {?}\n     */\n\n  }, {\n    key: \"updateActiveItemIndex\",\n    value: function updateActiveItemIndex(index) {\n      this.updateActiveItem(index);\n    }\n    /**\n     * This method sets the active item, given a list of items and the delta between the\n     * currently active item and the new active item. It will calculate differently\n     * depending on whether wrap mode is turned on.\n     * @param {?} delta\n     * @return {?}\n     */\n\n  }, {\n    key: \"_setActiveItemByDelta\",\n    value: function _setActiveItemByDelta(delta) {\n      this._wrap ? this._setActiveInWrapMode(delta) : this._setActiveInDefaultMode(delta);\n    }\n    /**\n     * Sets the active item properly given \"wrap\" mode. In other words, it will continue to move\n     * down the list until it finds an item that is not disabled, and it will wrap if it\n     * encounters either end of the list.\n     * @param {?} delta\n     * @return {?}\n     */\n\n  }, {\n    key: \"_setActiveInWrapMode\",\n    value: function _setActiveInWrapMode(delta) {\n      /** @type {?} */\n      var items = this._getItemsArray();\n\n      for (var i = 1; i <= items.length; i++) {\n        /** @type {?} */\n        var index = (this._activeItemIndex + delta * i + items.length) % items.length;\n        /** @type {?} */\n\n        var item = items[index];\n\n        if (!this._skipPredicateFn(item)) {\n          this.setActiveItem(index);\n          return;\n        }\n      }\n    }\n    /**\n     * Sets the active item properly given the default mode. In other words, it will\n     * continue to move down the list until it finds an item that is not disabled. If\n     * it encounters either end of the list, it will stop and not wrap.\n     * @param {?} delta\n     * @return {?}\n     */\n\n  }, {\n    key: \"_setActiveInDefaultMode\",\n    value: function _setActiveInDefaultMode(delta) {\n      this._setActiveItemByIndex(this._activeItemIndex + delta, delta);\n    }\n    /**\n     * Sets the active item to the first enabled item starting at the index specified. If the\n     * item is disabled, it will move in the fallbackDelta direction until it either\n     * finds an enabled item or encounters the end of the list.\n     * @param {?} index\n     * @param {?} fallbackDelta\n     * @return {?}\n     */\n\n  }, {\n    key: \"_setActiveItemByIndex\",\n    value: function _setActiveItemByIndex(index, fallbackDelta) {\n      /** @type {?} */\n      var items = this._getItemsArray();\n\n      if (!items[index]) {\n        return;\n      }\n\n      while (this._skipPredicateFn(items[index])) {\n        index += fallbackDelta;\n\n        if (!items[index]) {\n          return;\n        }\n      }\n\n      this.setActiveItem(index);\n    }\n    /**\n     * Returns the items as an array.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_getItemsArray\",\n    value: function _getItemsArray() {\n      return this._items instanceof QueryList ? this._items.toArray() : this._items;\n    }\n  }]);\n\n  return ListKeyManager;\n}();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * @template T\n */\n\n\nvar ActiveDescendantKeyManager = /*#__PURE__*/function (_ListKeyManager) {\n  _inherits(ActiveDescendantKeyManager, _ListKeyManager);\n\n  var _super = _createSuper(ActiveDescendantKeyManager);\n\n  function ActiveDescendantKeyManager() {\n    _classCallCheck(this, ActiveDescendantKeyManager);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(ActiveDescendantKeyManager, [{\n    key: \"setActiveItem\",\n    value:\n    /**\n     * @param {?} index\n     * @return {?}\n     */\n    function setActiveItem(index) {\n      if (this.activeItem) {\n        this.activeItem.setInactiveStyles();\n      }\n\n      _get(_getPrototypeOf(ActiveDescendantKeyManager.prototype), \"setActiveItem\", this).call(this, index);\n\n      if (this.activeItem) {\n        this.activeItem.setActiveStyles();\n      }\n    }\n  }]);\n\n  return ActiveDescendantKeyManager;\n}(ListKeyManager);\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * @template T\n */\n\n\nvar FocusKeyManager = /*#__PURE__*/function (_ListKeyManager2) {\n  _inherits(FocusKeyManager, _ListKeyManager2);\n\n  var _super2 = _createSuper(FocusKeyManager);\n\n  function FocusKeyManager() {\n    var _this3;\n\n    _classCallCheck(this, FocusKeyManager);\n\n    _this3 = _super2.apply(this, arguments);\n    _this3._origin = 'program';\n    return _this3;\n  }\n  /**\n   * Sets the focus origin that will be passed in to the items for any subsequent `focus` calls.\n   * @param {?} origin Focus origin to be used when focusing items.\n   * @return {?}\n   */\n\n\n  _createClass(FocusKeyManager, [{\n    key: \"setFocusOrigin\",\n    value: function setFocusOrigin(origin) {\n      this._origin = origin;\n      return this;\n    }\n    /**\n     * @param {?} item\n     * @return {?}\n     */\n\n  }, {\n    key: \"setActiveItem\",\n    value: function setActiveItem(item) {\n      _get(_getPrototypeOf(FocusKeyManager.prototype), \"setActiveItem\", this).call(this, item);\n\n      if (this.activeItem) {\n        this.activeItem.focus(this._origin);\n      }\n    }\n  }]);\n\n  return FocusKeyManager;\n}(ListKeyManager);\n\nvar InteractivityChecker = /*@__PURE__*/function () {\n  var InteractivityChecker = /*#__PURE__*/function () {\n    /**\n     * @param {?} _platform\n     */\n    function InteractivityChecker(_platform) {\n      _classCallCheck(this, InteractivityChecker);\n\n      this._platform = _platform;\n    }\n    /**\n     * Gets whether an element is disabled.\n     *\n     * @param {?} element Element to be checked.\n     * @return {?} Whether the element is disabled.\n     */\n\n\n    _createClass(InteractivityChecker, [{\n      key: \"isDisabled\",\n      value: function isDisabled(element) {\n        // This does not capture some cases, such as a non-form control with a disabled attribute or\n        // a form control inside of a disabled form, but should capture the most common cases.\n        return element.hasAttribute('disabled');\n      }\n      /**\n       * Gets whether an element is visible for the purposes of interactivity.\n       *\n       * This will capture states like `display: none` and `visibility: hidden`, but not things like\n       * being clipped by an `overflow: hidden` parent or being outside the viewport.\n       *\n       * @param {?} element\n       * @return {?} Whether the element is visible.\n       */\n\n    }, {\n      key: \"isVisible\",\n      value: function isVisible(element) {\n        return hasGeometry(element) && getComputedStyle(element).visibility === 'visible';\n      }\n      /**\n       * Gets whether an element can be reached via Tab key.\n       * Assumes that the element has already been checked with isFocusable.\n       *\n       * @param {?} element Element to be checked.\n       * @return {?} Whether the element is tabbable.\n       */\n\n    }, {\n      key: \"isTabbable\",\n      value: function isTabbable(element) {\n        // Nothing is tabbable on the the server 😎\n        if (!this._platform.isBrowser) {\n          return false;\n        }\n        /** @type {?} */\n\n\n        var frameElement = getFrameElement(getWindow(element));\n\n        if (frameElement) {\n          /** @type {?} */\n          var frameType = frameElement && frameElement.nodeName.toLowerCase(); // Frame elements inherit their tabindex onto all child elements.\n\n          if (getTabIndexValue(frameElement) === -1) {\n            return false;\n          } // Webkit and Blink consider anything inside of an <object> element as non-tabbable.\n\n\n          if ((this._platform.BLINK || this._platform.WEBKIT) && frameType === 'object') {\n            return false;\n          } // Webkit and Blink disable tabbing to an element inside of an invisible frame.\n\n\n          if ((this._platform.BLINK || this._platform.WEBKIT) && !this.isVisible(frameElement)) {\n            return false;\n          }\n        }\n        /** @type {?} */\n\n\n        var nodeName = element.nodeName.toLowerCase();\n        /** @type {?} */\n\n        var tabIndexValue = getTabIndexValue(element);\n\n        if (element.hasAttribute('contenteditable')) {\n          return tabIndexValue !== -1;\n        }\n\n        if (nodeName === 'iframe') {\n          // The frames may be tabbable depending on content, but it's not possibly to reliably\n          // investigate the content of the frames.\n          return false;\n        }\n\n        if (nodeName === 'audio') {\n          if (!element.hasAttribute('controls')) {\n            // By default an <audio> element without the controls enabled is not tabbable.\n            return false;\n          } else if (this._platform.BLINK) {\n            // In Blink <audio controls> elements are always tabbable.\n            return true;\n          }\n        }\n\n        if (nodeName === 'video') {\n          if (!element.hasAttribute('controls') && this._platform.TRIDENT) {\n            // In Trident a <video> element without the controls enabled is not tabbable.\n            return false;\n          } else if (this._platform.BLINK || this._platform.FIREFOX) {\n            // In Chrome and Firefox <video controls> elements are always tabbable.\n            return true;\n          }\n        }\n\n        if (nodeName === 'object' && (this._platform.BLINK || this._platform.WEBKIT)) {\n          // In all Blink and WebKit based browsers <object> elements are never tabbable.\n          return false;\n        } // In iOS the browser only considers some specific elements as tabbable.\n\n\n        if (this._platform.WEBKIT && this._platform.IOS && !isPotentiallyTabbableIOS(element)) {\n          return false;\n        }\n\n        return element.tabIndex >= 0;\n      }\n      /**\n       * Gets whether an element can be focused by the user.\n       *\n       * @param {?} element Element to be checked.\n       * @return {?} Whether the element is focusable.\n       */\n\n    }, {\n      key: \"isFocusable\",\n      value: function isFocusable(element) {\n        // Perform checks in order of left to most expensive.\n        // Again, naive approach that does not capture many edge cases and browser quirks.\n        return isPotentiallyFocusable(element) && !this.isDisabled(element) && this.isVisible(element);\n      }\n    }]);\n\n    return InteractivityChecker;\n  }();\n\n  InteractivityChecker.ɵfac = function InteractivityChecker_Factory(t) {\n    return new (t || InteractivityChecker)(ɵngcc0.ɵɵinject(ɵngcc1.Platform));\n  };\n\n  InteractivityChecker.ɵprov =\n  /*@__PURE__*/\n\n  /*@__PURE__*/\n  ɵngcc0.ɵɵdefineInjectable({\n    token: InteractivityChecker,\n    factory: InteractivityChecker.ɵfac,\n    providedIn: 'root'\n  });\n  /** @nocollapse */\n\n  InteractivityChecker.ngInjectableDef = /*@__PURE__*/defineInjectable({\n    factory: function InteractivityChecker_Factory() {\n      return new InteractivityChecker(inject(Platform));\n    },\n    token: InteractivityChecker,\n    providedIn: \"root\"\n  });\n  return InteractivityChecker;\n}();\n/**\n * Returns the frame element from a window object. Since browsers like MS Edge throw errors if\n * the frameElement property is being accessed from a different host address, this property\n * should be accessed carefully.\n * @param {?} window\n * @return {?}\n */\n\n\nfunction getFrameElement(window) {\n  try {\n    return (\n      /** @type {?} */\n      window.frameElement\n    );\n  } catch (_a) {\n    return null;\n  }\n}\n/**\n * Checks whether the specified element has any geometry / rectangles.\n * @param {?} element\n * @return {?}\n */\n\n\nfunction hasGeometry(element) {\n  // Use logic from jQuery to check for an invisible element.\n  // See https://github.com/jquery/jquery/blob/master/src/css/hiddenVisibleSelectors.js#L12\n  return !!(element.offsetWidth || element.offsetHeight || typeof element.getClientRects === 'function' && element.getClientRects().length);\n}\n/**\n * Gets whether an element's\n * @param {?} element\n * @return {?}\n */\n\n\nfunction isNativeFormElement(element) {\n  /** @type {?} */\n  var nodeName = element.nodeName.toLowerCase();\n  return nodeName === 'input' || nodeName === 'select' || nodeName === 'button' || nodeName === 'textarea';\n}\n/**\n * Gets whether an element is an `<input type=\"hidden\">`.\n * @param {?} element\n * @return {?}\n */\n\n\nfunction isHiddenInput(element) {\n  return isInputElement(element) && element.type == 'hidden';\n}\n/**\n * Gets whether an element is an anchor that has an href attribute.\n * @param {?} element\n * @return {?}\n */\n\n\nfunction isAnchorWithHref(element) {\n  return isAnchorElement(element) && element.hasAttribute('href');\n}\n/**\n * Gets whether an element is an input element.\n * @param {?} element\n * @return {?}\n */\n\n\nfunction isInputElement(element) {\n  return element.nodeName.toLowerCase() == 'input';\n}\n/**\n * Gets whether an element is an anchor element.\n * @param {?} element\n * @return {?}\n */\n\n\nfunction isAnchorElement(element) {\n  return element.nodeName.toLowerCase() == 'a';\n}\n/**\n * Gets whether an element has a valid tabindex.\n * @param {?} element\n * @return {?}\n */\n\n\nfunction hasValidTabIndex(element) {\n  if (!element.hasAttribute('tabindex') || element.tabIndex === undefined) {\n    return false;\n  }\n  /** @type {?} */\n\n\n  var tabIndex = element.getAttribute('tabindex'); // IE11 parses tabindex=\"\" as the value \"-32768\"\n\n  if (tabIndex == '-32768') {\n    return false;\n  }\n\n  return !!(tabIndex && !isNaN(parseInt(tabIndex, 10)));\n}\n/**\n * Returns the parsed tabindex from the element attributes instead of returning the\n * evaluated tabindex from the browsers defaults.\n * @param {?} element\n * @return {?}\n */\n\n\nfunction getTabIndexValue(element) {\n  if (!hasValidTabIndex(element)) {\n    return null;\n  }\n  /** @type {?} */\n\n\n  var tabIndex = parseInt(element.getAttribute('tabindex') || '', 10);\n  return isNaN(tabIndex) ? -1 : tabIndex;\n}\n/**\n * Checks whether the specified element is potentially tabbable on iOS\n * @param {?} element\n * @return {?}\n */\n\n\nfunction isPotentiallyTabbableIOS(element) {\n  /** @type {?} */\n  var nodeName = element.nodeName.toLowerCase();\n  /** @type {?} */\n\n  var inputType = nodeName === 'input' &&\n  /** @type {?} */\n  element.type;\n  return inputType === 'text' || inputType === 'password' || nodeName === 'select' || nodeName === 'textarea';\n}\n/**\n * Gets whether an element is potentially focusable without taking current visible/disabled state\n * into account.\n * @param {?} element\n * @return {?}\n */\n\n\nfunction isPotentiallyFocusable(element) {\n  // Inputs are potentially focusable *unless* they're type=\"hidden\".\n  if (isHiddenInput(element)) {\n    return false;\n  }\n\n  return isNativeFormElement(element) || isAnchorWithHref(element) || element.hasAttribute('contenteditable') || hasValidTabIndex(element);\n}\n/**\n * Gets the parent window of a DOM node with regards of being inside of an iframe.\n * @param {?} node\n * @return {?}\n */\n\n\nfunction getWindow(node) {\n  // ownerDocument is null if `node` itself *is* a document.\n  return node.ownerDocument && node.ownerDocument.defaultView || window;\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * Class that allows for trapping focus within a DOM element.\n *\n * This class currently uses a relatively simple approach to focus trapping.\n * It assumes that the tab order is the same as DOM order, which is not necessarily true.\n * Things like `tabIndex > 0`, flex `order`, and shadow roots can cause to two to misalign.\n */\n\n\nvar FocusTrap = /*#__PURE__*/function () {\n  /**\n   * @param {?} _element\n   * @param {?} _checker\n   * @param {?} _ngZone\n   * @param {?} _document\n   * @param {?=} deferAnchors\n   */\n  function FocusTrap(_element, _checker, _ngZone, _document) {\n    var deferAnchors = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n\n    _classCallCheck(this, FocusTrap);\n\n    this._element = _element;\n    this._checker = _checker;\n    this._ngZone = _ngZone;\n    this._document = _document;\n    this._hasAttached = false;\n    this._enabled = true;\n\n    if (!deferAnchors) {\n      this.attachAnchors();\n    }\n  }\n  /**\n   * Whether the focus trap is active.\n   * @return {?}\n   */\n\n\n  _createClass(FocusTrap, [{\n    key: \"enabled\",\n    get: function get() {\n      return this._enabled;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ,\n    set: function set(value) {\n      this._enabled = value;\n\n      if (this._startAnchor && this._endAnchor) {\n        this._toggleAnchorTabIndex(value, this._startAnchor);\n\n        this._toggleAnchorTabIndex(value, this._endAnchor);\n      }\n    }\n    /**\n     * Destroys the focus trap by cleaning up the anchors.\n     * @return {?}\n     */\n\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      if (this._startAnchor && this._startAnchor.parentNode) {\n        this._startAnchor.parentNode.removeChild(this._startAnchor);\n      }\n\n      if (this._endAnchor && this._endAnchor.parentNode) {\n        this._endAnchor.parentNode.removeChild(this._endAnchor);\n      }\n\n      this._startAnchor = this._endAnchor = null;\n    }\n    /**\n     * Inserts the anchors into the DOM. This is usually done automatically\n     * in the constructor, but can be deferred for cases like directives with `*ngIf`.\n     * @return {?} Whether the focus trap managed to attach successfuly. This may not be the case\n     * if the target element isn't currently in the DOM.\n     */\n\n  }, {\n    key: \"attachAnchors\",\n    value: function attachAnchors() {\n      var _this4 = this;\n\n      // If we're not on the browser, there can be no focus to trap.\n      if (this._hasAttached) {\n        return true;\n      }\n\n      this._ngZone.runOutsideAngular(function () {\n        if (!_this4._startAnchor) {\n          _this4._startAnchor = _this4._createAnchor();\n          /** @type {?} */\n\n          _this4._startAnchor.addEventListener('focus', function () {\n            return _this4.focusLastTabbableElement();\n          });\n        }\n\n        if (!_this4._endAnchor) {\n          _this4._endAnchor = _this4._createAnchor();\n          /** @type {?} */\n\n          _this4._endAnchor.addEventListener('focus', function () {\n            return _this4.focusFirstTabbableElement();\n          });\n        }\n      });\n\n      if (this._element.parentNode) {\n        this._element.parentNode.insertBefore(\n        /** @type {?} */\n        this._startAnchor, this._element);\n\n        this._element.parentNode.insertBefore(\n        /** @type {?} */\n        this._endAnchor, this._element.nextSibling);\n\n        this._hasAttached = true;\n      }\n\n      return this._hasAttached;\n    }\n    /**\n     * Waits for the zone to stabilize, then either focuses the first element that the\n     * user specified, or the first tabbable element.\n     * @return {?} Returns a promise that resolves with a boolean, depending\n     * on whether focus was moved successfuly.\n     */\n\n  }, {\n    key: \"focusInitialElementWhenReady\",\n    value: function focusInitialElementWhenReady() {\n      var _this5 = this;\n\n      return new Promise(function (resolve) {\n        _this5._executeOnStable(function () {\n          return resolve(_this5.focusInitialElement());\n        });\n      });\n    }\n    /**\n     * Waits for the zone to stabilize, then focuses\n     * the first tabbable element within the focus trap region.\n     * @return {?} Returns a promise that resolves with a boolean, depending\n     * on whether focus was moved successfuly.\n     */\n\n  }, {\n    key: \"focusFirstTabbableElementWhenReady\",\n    value: function focusFirstTabbableElementWhenReady() {\n      var _this6 = this;\n\n      return new Promise(function (resolve) {\n        _this6._executeOnStable(function () {\n          return resolve(_this6.focusFirstTabbableElement());\n        });\n      });\n    }\n    /**\n     * Waits for the zone to stabilize, then focuses\n     * the last tabbable element within the focus trap region.\n     * @return {?} Returns a promise that resolves with a boolean, depending\n     * on whether focus was moved successfuly.\n     */\n\n  }, {\n    key: \"focusLastTabbableElementWhenReady\",\n    value: function focusLastTabbableElementWhenReady() {\n      var _this7 = this;\n\n      return new Promise(function (resolve) {\n        _this7._executeOnStable(function () {\n          return resolve(_this7.focusLastTabbableElement());\n        });\n      });\n    }\n    /**\n     * Get the specified boundary element of the trapped region.\n     * @param {?} bound The boundary to get (start or end of trapped region).\n     * @return {?} The boundary element.\n     */\n\n  }, {\n    key: \"_getRegionBoundary\",\n    value: function _getRegionBoundary(bound) {\n      /** @type {?} */\n      var markers =\n      /** @type {?} */\n      this._element.querySelectorAll(\"[cdk-focus-region-\".concat(bound, \"], \") + \"[cdkFocusRegion\".concat(bound, \"], \") + \"[cdk-focus-\".concat(bound, \"]\"));\n\n      for (var i = 0; i < markers.length; i++) {\n        // @breaking-change 8.0.0\n        if (markers[i].hasAttribute(\"cdk-focus-\".concat(bound))) {\n          console.warn(\"Found use of deprecated attribute 'cdk-focus-\".concat(bound, \"', \") + \"use 'cdkFocusRegion\".concat(bound, \"' instead. The deprecated \") + \"attribute will be removed in 8.0.0.\", markers[i]);\n        } else if (markers[i].hasAttribute(\"cdk-focus-region-\".concat(bound))) {\n          console.warn(\"Found use of deprecated attribute 'cdk-focus-region-\".concat(bound, \"', \") + \"use 'cdkFocusRegion\".concat(bound, \"' instead. The deprecated attribute \") + \"will be removed in 8.0.0.\", markers[i]);\n        }\n      }\n\n      if (bound == 'start') {\n        return markers.length ? markers[0] : this._getFirstTabbableElement(this._element);\n      }\n\n      return markers.length ? markers[markers.length - 1] : this._getLastTabbableElement(this._element);\n    }\n    /**\n     * Focuses the element that should be focused when the focus trap is initialized.\n     * @return {?} Whether focus was moved successfuly.\n     */\n\n  }, {\n    key: \"focusInitialElement\",\n    value: function focusInitialElement() {\n      /** @type {?} */\n      var redirectToElement =\n      /** @type {?} */\n      this._element.querySelector(\"[cdk-focus-initial], \" + \"[cdkFocusInitial]\");\n\n      if (redirectToElement) {\n        // @breaking-change 8.0.0\n        if (redirectToElement.hasAttribute(\"cdk-focus-initial\")) {\n          console.warn(\"Found use of deprecated attribute 'cdk-focus-initial', \" + \"use 'cdkFocusInitial' instead. The deprecated attribute \" + \"will be removed in 8.0.0\", redirectToElement);\n        }\n\n        redirectToElement.focus();\n        return true;\n      }\n\n      return this.focusFirstTabbableElement();\n    }\n    /**\n     * Focuses the first tabbable element within the focus trap region.\n     * @return {?} Whether focus was moved successfuly.\n     */\n\n  }, {\n    key: \"focusFirstTabbableElement\",\n    value: function focusFirstTabbableElement() {\n      /** @type {?} */\n      var redirectToElement = this._getRegionBoundary('start');\n\n      if (redirectToElement) {\n        redirectToElement.focus();\n      }\n\n      return !!redirectToElement;\n    }\n    /**\n     * Focuses the last tabbable element within the focus trap region.\n     * @return {?} Whether focus was moved successfuly.\n     */\n\n  }, {\n    key: \"focusLastTabbableElement\",\n    value: function focusLastTabbableElement() {\n      /** @type {?} */\n      var redirectToElement = this._getRegionBoundary('end');\n\n      if (redirectToElement) {\n        redirectToElement.focus();\n      }\n\n      return !!redirectToElement;\n    }\n    /**\n     * Checks whether the focus trap has successfuly been attached.\n     * @return {?}\n     */\n\n  }, {\n    key: \"hasAttached\",\n    value: function hasAttached() {\n      return this._hasAttached;\n    }\n    /**\n     * Get the first tabbable element from a DOM subtree (inclusive).\n     * @param {?} root\n     * @return {?}\n     */\n\n  }, {\n    key: \"_getFirstTabbableElement\",\n    value: function _getFirstTabbableElement(root) {\n      if (this._checker.isFocusable(root) && this._checker.isTabbable(root)) {\n        return root;\n      }\n      /** @type {?} */\n\n\n      var children = root.children || root.childNodes;\n\n      for (var i = 0; i < children.length; i++) {\n        /** @type {?} */\n        var tabbableChild = children[i].nodeType === this._document.ELEMENT_NODE ? this._getFirstTabbableElement(\n        /** @type {?} */\n        children[i]) : null;\n\n        if (tabbableChild) {\n          return tabbableChild;\n        }\n      }\n\n      return null;\n    }\n    /**\n     * Get the last tabbable element from a DOM subtree (inclusive).\n     * @param {?} root\n     * @return {?}\n     */\n\n  }, {\n    key: \"_getLastTabbableElement\",\n    value: function _getLastTabbableElement(root) {\n      if (this._checker.isFocusable(root) && this._checker.isTabbable(root)) {\n        return root;\n      }\n      /** @type {?} */\n\n\n      var children = root.children || root.childNodes;\n\n      for (var i = children.length - 1; i >= 0; i--) {\n        /** @type {?} */\n        var tabbableChild = children[i].nodeType === this._document.ELEMENT_NODE ? this._getLastTabbableElement(\n        /** @type {?} */\n        children[i]) : null;\n\n        if (tabbableChild) {\n          return tabbableChild;\n        }\n      }\n\n      return null;\n    }\n    /**\n     * Creates an anchor element.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_createAnchor\",\n    value: function _createAnchor() {\n      /** @type {?} */\n      var anchor = this._document.createElement('div');\n\n      this._toggleAnchorTabIndex(this._enabled, anchor);\n\n      anchor.classList.add('cdk-visually-hidden');\n      anchor.classList.add('cdk-focus-trap-anchor');\n      return anchor;\n    }\n    /**\n     * Toggles the `tabindex` of an anchor, based on the enabled state of the focus trap.\n     * @param {?} isEnabled Whether the focus trap is enabled.\n     * @param {?} anchor Anchor on which to toggle the tabindex.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_toggleAnchorTabIndex\",\n    value: function _toggleAnchorTabIndex(isEnabled, anchor) {\n      // Remove the tabindex completely, rather than setting it to -1, because if the\n      // element has a tabindex, the user might still hit it when navigating with the arrow keys.\n      isEnabled ? anchor.setAttribute('tabindex', '0') : anchor.removeAttribute('tabindex');\n    }\n    /**\n     * Executes a function when the zone is stable.\n     * @param {?} fn\n     * @return {?}\n     */\n\n  }, {\n    key: \"_executeOnStable\",\n    value: function _executeOnStable(fn) {\n      if (this._ngZone.isStable) {\n        fn();\n      } else {\n        this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(fn);\n      }\n    }\n  }]);\n\n  return FocusTrap;\n}();\n\nvar FocusTrapFactory = /*@__PURE__*/function () {\n  var FocusTrapFactory = /*#__PURE__*/function () {\n    /**\n     * @param {?} _checker\n     * @param {?} _ngZone\n     * @param {?} _document\n     */\n    function FocusTrapFactory(_checker, _ngZone, _document) {\n      _classCallCheck(this, FocusTrapFactory);\n\n      this._checker = _checker;\n      this._ngZone = _ngZone;\n      this._document = _document;\n    }\n    /**\n     * Creates a focus-trapped region around the given element.\n     * @param {?} element The element around which focus will be trapped.\n     * @param {?=} deferCaptureElements Defers the creation of focus-capturing elements to be done\n     *     manually by the user.\n     * @return {?} The created focus trap instance.\n     */\n\n\n    _createClass(FocusTrapFactory, [{\n      key: \"create\",\n      value: function create(element) {\n        var deferCaptureElements = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n        return new FocusTrap(element, this._checker, this._ngZone, this._document, deferCaptureElements);\n      }\n    }]);\n\n    return FocusTrapFactory;\n  }();\n\n  FocusTrapFactory.ɵfac = function FocusTrapFactory_Factory(t) {\n    return new (t || FocusTrapFactory)(ɵngcc0.ɵɵinject(InteractivityChecker), ɵngcc0.ɵɵinject(ɵngcc0.NgZone), ɵngcc0.ɵɵinject(DOCUMENT));\n  };\n\n  FocusTrapFactory.ɵprov =\n  /*@__PURE__*/\n\n  /*@__PURE__*/\n  ɵngcc0.ɵɵdefineInjectable({\n    token: FocusTrapFactory,\n    factory: FocusTrapFactory.ɵfac,\n    providedIn: 'root'\n  });\n  /** @nocollapse */\n\n  FocusTrapFactory.ngInjectableDef = /*@__PURE__*/defineInjectable({\n    factory: function FocusTrapFactory_Factory() {\n      return new FocusTrapFactory(inject(InteractivityChecker), inject(NgZone), inject(DOCUMENT));\n    },\n    token: FocusTrapFactory,\n    providedIn: \"root\"\n  });\n  return FocusTrapFactory;\n}();\n\nvar CdkTrapFocus = /*@__PURE__*/function () {\n  var CdkTrapFocus = /*#__PURE__*/function () {\n    /**\n     * @param {?} _elementRef\n     * @param {?} _focusTrapFactory\n     * @param {?} _document\n     */\n    function CdkTrapFocus(_elementRef, _focusTrapFactory, _document) {\n      _classCallCheck(this, CdkTrapFocus);\n\n      this._elementRef = _elementRef;\n      this._focusTrapFactory = _focusTrapFactory;\n      /**\n       * Previously focused element to restore focus to upon destroy when using autoCapture.\n       */\n\n      this._previouslyFocusedElement = null;\n      this._document = _document;\n      this.focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement, true);\n    }\n    /**\n     * Whether the focus trap is active.\n     * @return {?}\n     */\n\n\n    _createClass(CdkTrapFocus, [{\n      key: \"enabled\",\n      get: function get() {\n        return this.focusTrap.enabled;\n      }\n      /**\n       * @param {?} value\n       * @return {?}\n       */\n      ,\n      set: function set(value) {\n        this.focusTrap.enabled = coerceBooleanProperty(value);\n      }\n      /**\n       * Whether the directive should automatially move focus into the trapped region upon\n       * initialization and return focus to the previous activeElement upon destruction.\n       * @return {?}\n       */\n\n    }, {\n      key: \"autoCapture\",\n      get: function get() {\n        return this._autoCapture;\n      }\n      /**\n       * @param {?} value\n       * @return {?}\n       */\n      ,\n      set: function set(value) {\n        this._autoCapture = coerceBooleanProperty(value);\n      }\n      /**\n       * @return {?}\n       */\n\n    }, {\n      key: \"ngOnDestroy\",\n      value: function ngOnDestroy() {\n        this.focusTrap.destroy(); // If we stored a previously focused element when using autoCapture, return focus to that\n        // element now that the trapped region is being destroyed.\n\n        if (this._previouslyFocusedElement) {\n          this._previouslyFocusedElement.focus();\n\n          this._previouslyFocusedElement = null;\n        }\n      }\n      /**\n       * @return {?}\n       */\n\n    }, {\n      key: \"ngAfterContentInit\",\n      value: function ngAfterContentInit() {\n        this.focusTrap.attachAnchors();\n\n        if (this.autoCapture) {\n          this._previouslyFocusedElement =\n          /** @type {?} */\n          this._document.activeElement;\n          this.focusTrap.focusInitialElementWhenReady();\n        }\n      }\n      /**\n       * @return {?}\n       */\n\n    }, {\n      key: \"ngDoCheck\",\n      value: function ngDoCheck() {\n        if (!this.focusTrap.hasAttached()) {\n          this.focusTrap.attachAnchors();\n        }\n      }\n    }]);\n\n    return CdkTrapFocus;\n  }();\n\n  CdkTrapFocus.ɵfac = function CdkTrapFocus_Factory(t) {\n    return new (t || CdkTrapFocus)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(FocusTrapFactory), ɵngcc0.ɵɵdirectiveInject(DOCUMENT));\n  };\n\n  CdkTrapFocus.ɵdir =\n  /*@__PURE__*/\n\n  /*@__PURE__*/\n  ɵngcc0.ɵɵdefineDirective({\n    type: CdkTrapFocus,\n    selectors: [[\"\", \"cdkTrapFocus\", \"\"]],\n    inputs: {\n      enabled: [\"cdkTrapFocus\", \"enabled\"],\n      autoCapture: [\"cdkTrapFocusAutoCapture\", \"autoCapture\"]\n    },\n    exportAs: [\"cdkTrapFocus\"]\n  });\n  return CdkTrapFocus;\n}();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/** @type {?} */\n\n\nvar LIVE_ANNOUNCER_ELEMENT_TOKEN = /*@__PURE__*/new InjectionToken('liveAnnouncerElement', {\n  providedIn: 'root',\n  factory: LIVE_ANNOUNCER_ELEMENT_TOKEN_FACTORY\n});\n/**\n * \\@docs-private\n * @return {?}\n */\n\nfunction LIVE_ANNOUNCER_ELEMENT_TOKEN_FACTORY() {\n  return null;\n}\n\nvar LiveAnnouncer = /*@__PURE__*/function () {\n  var LiveAnnouncer = /*#__PURE__*/function () {\n    /**\n     * @param {?} elementToken\n     * @param {?} _ngZone\n     * @param {?} _document\n     */\n    function LiveAnnouncer(elementToken, _ngZone, _document) {\n      _classCallCheck(this, LiveAnnouncer);\n\n      this._ngZone = _ngZone; // We inject the live element and document as `any` because the constructor signature cannot\n      // reference browser globals (HTMLElement, Document) on non-browser environments, since having\n      // a class decorator causes TypeScript to preserve the constructor signature types.\n\n      this._document = _document;\n      this._liveElement = elementToken || this._createLiveElement();\n    }\n    /**\n     * Announces a message to screenreaders.\n     * @param {?} message Message to be announced to the screenreader\n     * @param {?=} politeness The politeness of the announcer element\n     * @return {?} Promise that will be resolved when the message is added to the DOM.\n     */\n\n\n    _createClass(LiveAnnouncer, [{\n      key: \"announce\",\n      value: function announce(message) {\n        var _this8 = this;\n\n        var politeness = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'polite';\n        this._liveElement.textContent = ''; // TODO: ensure changing the politeness works on all environments we support.\n\n        this._liveElement.setAttribute('aria-live', politeness); // This 100ms timeout is necessary for some browser + screen-reader combinations:\n        // - Both JAWS and NVDA over IE11 will not announce anything without a non-zero timeout.\n        // - With Chrome and IE11 with NVDA or JAWS, a repeated (identical) message won't be read a\n        //   second time without clearing and then using a non-zero delay.\n        // (using JAWS 17 at time of this writing).\n\n\n        return this._ngZone.runOutsideAngular(function () {\n          return new Promise(function (resolve) {\n            setTimeout(function () {\n              _this8._liveElement.textContent = message;\n              resolve();\n            }, 100);\n          });\n        });\n      }\n      /**\n       * @return {?}\n       */\n\n    }, {\n      key: \"ngOnDestroy\",\n      value: function ngOnDestroy() {\n        if (this._liveElement && this._liveElement.parentNode) {\n          this._liveElement.parentNode.removeChild(this._liveElement);\n        }\n      }\n      /**\n       * @return {?}\n       */\n\n    }, {\n      key: \"_createLiveElement\",\n      value: function _createLiveElement() {\n        /** @type {?} */\n        var elementClass = 'cdk-live-announcer-element';\n        /** @type {?} */\n\n        var previousElements = this._document.getElementsByClassName(elementClass);\n        /** @type {?} */\n\n\n        var liveEl = this._document.createElement('div'); // Remove any old containers. This can happen when coming in from a server-side-rendered page.\n\n\n        for (var i = 0; i < previousElements.length; i++) {\n          /** @type {?} */\n          previousElements[i].parentNode.removeChild(previousElements[i]);\n        }\n\n        liveEl.classList.add(elementClass);\n        liveEl.classList.add('cdk-visually-hidden');\n        liveEl.setAttribute('aria-atomic', 'true');\n        liveEl.setAttribute('aria-live', 'polite');\n\n        this._document.body.appendChild(liveEl);\n\n        return liveEl;\n      }\n    }]);\n\n    return LiveAnnouncer;\n  }();\n\n  LiveAnnouncer.ɵfac = function LiveAnnouncer_Factory(t) {\n    return new (t || LiveAnnouncer)(ɵngcc0.ɵɵinject(LIVE_ANNOUNCER_ELEMENT_TOKEN, 8), ɵngcc0.ɵɵinject(ɵngcc0.NgZone), ɵngcc0.ɵɵinject(DOCUMENT));\n  };\n\n  LiveAnnouncer.ɵprov =\n  /*@__PURE__*/\n\n  /*@__PURE__*/\n  ɵngcc0.ɵɵdefineInjectable({\n    token: LiveAnnouncer,\n    factory: LiveAnnouncer.ɵfac,\n    providedIn: 'root'\n  });\n  /** @nocollapse */\n\n  LiveAnnouncer.ngInjectableDef = /*@__PURE__*/defineInjectable({\n    factory: function LiveAnnouncer_Factory() {\n      return new LiveAnnouncer(inject(LIVE_ANNOUNCER_ELEMENT_TOKEN, 8), inject(NgZone), inject(DOCUMENT));\n    },\n    token: LiveAnnouncer,\n    providedIn: \"root\"\n  });\n  return LiveAnnouncer;\n}();\n\nvar CdkAriaLive = /*@__PURE__*/function () {\n  var CdkAriaLive = /*#__PURE__*/function () {\n    /**\n     * @param {?} _elementRef\n     * @param {?} _liveAnnouncer\n     * @param {?} _contentObserver\n     * @param {?} _ngZone\n     */\n    function CdkAriaLive(_elementRef, _liveAnnouncer, _contentObserver, _ngZone) {\n      _classCallCheck(this, CdkAriaLive);\n\n      this._elementRef = _elementRef;\n      this._liveAnnouncer = _liveAnnouncer;\n      this._contentObserver = _contentObserver;\n      this._ngZone = _ngZone;\n      this._politeness = 'off';\n    }\n    /**\n     * The aria-live politeness level to use when announcing messages.\n     * @return {?}\n     */\n\n\n    _createClass(CdkAriaLive, [{\n      key: \"politeness\",\n      get: function get() {\n        return this._politeness;\n      }\n      /**\n       * @param {?} value\n       * @return {?}\n       */\n      ,\n      set: function set(value) {\n        var _this9 = this;\n\n        this._politeness = value === 'polite' || value === 'assertive' ? value : 'off';\n\n        if (this._politeness === 'off') {\n          if (this._subscription) {\n            this._subscription.unsubscribe();\n\n            this._subscription = null;\n          }\n        } else if (!this._subscription) {\n          this._subscription = this._ngZone.runOutsideAngular(function () {\n            return _this9._contentObserver.observe(_this9._elementRef).subscribe(function () {\n              /** @type {?} */\n              var element = _this9._elementRef.nativeElement;\n\n              _this9._liveAnnouncer.announce(element.textContent, _this9._politeness);\n            });\n          });\n        }\n      }\n      /**\n       * @return {?}\n       */\n\n    }, {\n      key: \"ngOnDestroy\",\n      value: function ngOnDestroy() {\n        if (this._subscription) {\n          this._subscription.unsubscribe();\n        }\n      }\n    }]);\n\n    return CdkAriaLive;\n  }();\n\n  CdkAriaLive.ɵfac = function CdkAriaLive_Factory(t) {\n    return new (t || CdkAriaLive)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(LiveAnnouncer), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.ContentObserver), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone));\n  };\n\n  CdkAriaLive.ɵdir =\n  /*@__PURE__*/\n\n  /*@__PURE__*/\n  ɵngcc0.ɵɵdefineDirective({\n    type: CdkAriaLive,\n    selectors: [[\"\", \"cdkAriaLive\", \"\"]],\n    inputs: {\n      politeness: [\"cdkAriaLive\", \"politeness\"]\n    },\n    exportAs: [\"cdkAriaLive\"]\n  });\n  return CdkAriaLive;\n}();\n/**\n * \\@docs-private \\@deprecated \\@breaking-change 8.0.0\n * @param {?} parentDispatcher\n * @param {?} liveElement\n * @param {?} _document\n * @param {?} ngZone\n * @return {?}\n */\n\n\nfunction LIVE_ANNOUNCER_PROVIDER_FACTORY(parentDispatcher, liveElement, _document, ngZone) {\n  return parentDispatcher || new LiveAnnouncer(liveElement, _document, ngZone);\n}\n/** *\n * \\@docs-private \\@deprecated \\@breaking-change 8.0.0\n  @type {?} */\n\n\nvar LIVE_ANNOUNCER_PROVIDER = {\n  // If there is already a LiveAnnouncer available, use that. Otherwise, provide a new one.\n  provide: LiveAnnouncer,\n  deps: [[/*@__PURE__*/new Optional(), /*@__PURE__*/new SkipSelf(), LiveAnnouncer], [/*@__PURE__*/new Optional(), /*@__PURE__*/new Inject(LIVE_ANNOUNCER_ELEMENT_TOKEN)], DOCUMENT, NgZone],\n  useFactory: LIVE_ANNOUNCER_PROVIDER_FACTORY\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/** @type {?} */\n\nvar TOUCH_BUFFER_MS = 650;\n\nvar FocusMonitor = /*@__PURE__*/function () {\n  var FocusMonitor = /*#__PURE__*/function () {\n    /**\n     * @param {?} _ngZone\n     * @param {?} _platform\n     */\n    function FocusMonitor(_ngZone, _platform) {\n      _classCallCheck(this, FocusMonitor);\n\n      this._ngZone = _ngZone;\n      this._platform = _platform;\n      /**\n       * The focus origin that the next focus event is a result of.\n       */\n\n      this._origin = null;\n      /**\n       * Whether the window has just been focused.\n       */\n\n      this._windowFocused = false;\n      /**\n       * Map of elements being monitored to their info.\n       */\n\n      this._elementInfo = new Map();\n      /**\n       * A map of global objects to lists of current listeners.\n       */\n\n      this._unregisterGlobalListeners = function () {};\n      /**\n       * The number of elements currently being monitored.\n       */\n\n\n      this._monitoredElementCount = 0;\n    }\n    /**\n     * @param {?} element\n     * @param {?=} checkChildren\n     * @return {?}\n     */\n\n\n    _createClass(FocusMonitor, [{\n      key: \"monitor\",\n      value: function monitor(element) {\n        var _this10 = this;\n\n        var checkChildren = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n        // Do nothing if we're not on the browser platform.\n        if (!this._platform.isBrowser) {\n          return of(null);\n        }\n        /** @type {?} */\n\n\n        var nativeElement = this._getNativeElement(element); // Check if we're already monitoring this element.\n\n\n        if (this._elementInfo.has(nativeElement)) {\n          /** @type {?} */\n          var cachedInfo = this._elementInfo.get(nativeElement);\n          /** @type {?} */\n\n\n          cachedInfo.checkChildren = checkChildren;\n          return (\n            /** @type {?} */\n            cachedInfo.subject.asObservable()\n          );\n        }\n        /** @type {?} */\n\n\n        var info = {\n          unlisten: function unlisten() {},\n          checkChildren: checkChildren,\n          subject: new Subject()\n        };\n\n        this._elementInfo.set(nativeElement, info);\n\n        this._incrementMonitoredElementCount();\n        /** @type {?} */\n\n\n        var focusListener = function focusListener(event) {\n          return _this10._onFocus(event, nativeElement);\n        };\n        /** @type {?} */\n\n\n        var blurListener = function blurListener(event) {\n          return _this10._onBlur(event, nativeElement);\n        };\n\n        this._ngZone.runOutsideAngular(function () {\n          nativeElement.addEventListener('focus', focusListener, true);\n          nativeElement.addEventListener('blur', blurListener, true);\n        }); // Create an unlisten function for later.\n\n\n        info.unlisten = function () {\n          nativeElement.removeEventListener('focus', focusListener, true);\n          nativeElement.removeEventListener('blur', blurListener, true);\n        };\n\n        return info.subject.asObservable();\n      }\n      /**\n       * @param {?} element\n       * @return {?}\n       */\n\n    }, {\n      key: \"stopMonitoring\",\n      value: function stopMonitoring(element) {\n        /** @type {?} */\n        var nativeElement = this._getNativeElement(element);\n        /** @type {?} */\n\n\n        var elementInfo = this._elementInfo.get(nativeElement);\n\n        if (elementInfo) {\n          elementInfo.unlisten();\n          elementInfo.subject.complete();\n\n          this._setClasses(nativeElement);\n\n          this._elementInfo.delete(nativeElement);\n\n          this._decrementMonitoredElementCount();\n        }\n      }\n      /**\n       * @param {?} element\n       * @param {?} origin\n       * @param {?=} options\n       * @return {?}\n       */\n\n    }, {\n      key: \"focusVia\",\n      value: function focusVia(element, origin, options) {\n        /** @type {?} */\n        var nativeElement = this._getNativeElement(element);\n\n        this._setOriginForCurrentEventQueue(origin); // `focus` isn't available on the server\n\n\n        if (typeof nativeElement.focus === 'function') {\n          // Cast the element to `any`, because the TS typings don't have the `options` parameter yet.\n\n          /** @type {?} */\n          nativeElement.focus(options);\n        }\n      }\n      /**\n       * @return {?}\n       */\n\n    }, {\n      key: \"ngOnDestroy\",\n      value: function ngOnDestroy() {\n        var _this11 = this;\n\n        this._elementInfo.forEach(function (_info, element) {\n          return _this11.stopMonitoring(element);\n        });\n      }\n      /**\n       * Register necessary event listeners on the document and window.\n       * @return {?}\n       */\n\n    }, {\n      key: \"_registerGlobalListeners\",\n      value: function _registerGlobalListeners() {\n        var _this12 = this;\n\n        // Do nothing if we're not on the browser platform.\n        if (!this._platform.isBrowser) {\n          return;\n        }\n        /** @type {?} */\n\n\n        var documentKeydownListener = function documentKeydownListener() {\n          _this12._lastTouchTarget = null;\n\n          _this12._setOriginForCurrentEventQueue('keyboard');\n        };\n        /** @type {?} */\n\n\n        var documentMousedownListener = function documentMousedownListener() {\n          if (!_this12._lastTouchTarget) {\n            _this12._setOriginForCurrentEventQueue('mouse');\n          }\n        };\n        /** @type {?} */\n\n\n        var documentTouchstartListener = function documentTouchstartListener(event) {\n          if (_this12._touchTimeoutId != null) {\n            clearTimeout(_this12._touchTimeoutId);\n          }\n\n          _this12._lastTouchTarget = event.target;\n          _this12._touchTimeoutId = setTimeout(function () {\n            return _this12._lastTouchTarget = null;\n          }, TOUCH_BUFFER_MS);\n        };\n        /** @type {?} */\n\n\n        var windowFocusListener = function windowFocusListener() {\n          _this12._windowFocused = true;\n          _this12._windowFocusTimeoutId = setTimeout(function () {\n            return _this12._windowFocused = false;\n          });\n        };\n        /** @type {?} */\n\n\n        var captureEventListenerOptions = normalizePassiveListenerOptions({\n          passive: true,\n          capture: true\n        }); // Note: we listen to events in the capture phase so we can detect them even if the user stops\n        // propagation.\n\n        this._ngZone.runOutsideAngular(function () {\n          document.addEventListener('keydown', documentKeydownListener, captureEventListenerOptions);\n          document.addEventListener('mousedown', documentMousedownListener, captureEventListenerOptions);\n          document.addEventListener('touchstart', documentTouchstartListener, captureEventListenerOptions);\n          window.addEventListener('focus', windowFocusListener);\n        });\n\n        this._unregisterGlobalListeners = function () {\n          document.removeEventListener('keydown', documentKeydownListener, captureEventListenerOptions);\n          document.removeEventListener('mousedown', documentMousedownListener, captureEventListenerOptions);\n          document.removeEventListener('touchstart', documentTouchstartListener, captureEventListenerOptions);\n          window.removeEventListener('focus', windowFocusListener); // Clear timeouts for all potentially pending timeouts to prevent the leaks.\n\n          clearTimeout(_this12._windowFocusTimeoutId);\n          clearTimeout(_this12._touchTimeoutId);\n          clearTimeout(_this12._originTimeoutId);\n        };\n      }\n      /**\n       * @param {?} element\n       * @param {?} className\n       * @param {?} shouldSet\n       * @return {?}\n       */\n\n    }, {\n      key: \"_toggleClass\",\n      value: function _toggleClass(element, className, shouldSet) {\n        if (shouldSet) {\n          element.classList.add(className);\n        } else {\n          element.classList.remove(className);\n        }\n      }\n      /**\n       * Sets the focus classes on the element based on the given focus origin.\n       * @param {?} element The element to update the classes on.\n       * @param {?=} origin The focus origin.\n       * @return {?}\n       */\n\n    }, {\n      key: \"_setClasses\",\n      value: function _setClasses(element, origin) {\n        /** @type {?} */\n        var elementInfo = this._elementInfo.get(element);\n\n        if (elementInfo) {\n          this._toggleClass(element, 'cdk-focused', !!origin);\n\n          this._toggleClass(element, 'cdk-touch-focused', origin === 'touch');\n\n          this._toggleClass(element, 'cdk-keyboard-focused', origin === 'keyboard');\n\n          this._toggleClass(element, 'cdk-mouse-focused', origin === 'mouse');\n\n          this._toggleClass(element, 'cdk-program-focused', origin === 'program');\n        }\n      }\n      /**\n       * Sets the origin and schedules an async function to clear it at the end of the event queue.\n       * @param {?} origin The origin to set.\n       * @return {?}\n       */\n\n    }, {\n      key: \"_setOriginForCurrentEventQueue\",\n      value: function _setOriginForCurrentEventQueue(origin) {\n        var _this13 = this;\n\n        this._ngZone.runOutsideAngular(function () {\n          _this13._origin = origin; // Sometimes the focus origin won't be valid in Firefox because Firefox seems to focus *one*\n          // tick after the interaction event fired. To ensure the focus origin is always correct,\n          // the focus origin will be determined at the beginning of the next tick.\n\n          _this13._originTimeoutId = setTimeout(function () {\n            return _this13._origin = null;\n          }, 1);\n        });\n      }\n      /**\n       * Checks whether the given focus event was caused by a touchstart event.\n       * @param {?} event The focus event to check.\n       * @return {?} Whether the event was caused by a touch.\n       */\n\n    }, {\n      key: \"_wasCausedByTouch\",\n      value: function _wasCausedByTouch(event) {\n        /** @type {?} */\n        var focusTarget = event.target;\n        return this._lastTouchTarget instanceof Node && focusTarget instanceof Node && (focusTarget === this._lastTouchTarget || focusTarget.contains(this._lastTouchTarget));\n      }\n      /**\n       * Handles focus events on a registered element.\n       * @param {?} event The focus event.\n       * @param {?} element The monitored element.\n       * @return {?}\n       */\n\n    }, {\n      key: \"_onFocus\",\n      value: function _onFocus(event, element) {\n        /** @type {?} */\n        var elementInfo = this._elementInfo.get(element);\n\n        if (!elementInfo || !elementInfo.checkChildren && element !== event.target) {\n          return;\n        }\n        /** @type {?} */\n\n\n        var origin = this._origin;\n\n        if (!origin) {\n          if (this._windowFocused && this._lastFocusOrigin) {\n            origin = this._lastFocusOrigin;\n          } else if (this._wasCausedByTouch(event)) {\n            origin = 'touch';\n          } else {\n            origin = 'program';\n          }\n        }\n\n        this._setClasses(element, origin);\n\n        this._emitOrigin(elementInfo.subject, origin);\n\n        this._lastFocusOrigin = origin;\n      }\n      /**\n       * Handles blur events on a registered element.\n       * @param {?} event The blur event.\n       * @param {?} element The monitored element.\n       * @return {?}\n       */\n\n    }, {\n      key: \"_onBlur\",\n      value: function _onBlur(event, element) {\n        /** @type {?} */\n        var elementInfo = this._elementInfo.get(element);\n\n        if (!elementInfo || elementInfo.checkChildren && event.relatedTarget instanceof Node && element.contains(event.relatedTarget)) {\n          return;\n        }\n\n        this._setClasses(element);\n\n        this._emitOrigin(elementInfo.subject, null);\n      }\n      /**\n       * @param {?} subject\n       * @param {?} origin\n       * @return {?}\n       */\n\n    }, {\n      key: \"_emitOrigin\",\n      value: function _emitOrigin(subject, origin) {\n        this._ngZone.run(function () {\n          return subject.next(origin);\n        });\n      }\n      /**\n       * @return {?}\n       */\n\n    }, {\n      key: \"_incrementMonitoredElementCount\",\n      value: function _incrementMonitoredElementCount() {\n        // Register global listeners when first element is monitored.\n        if (++this._monitoredElementCount == 1) {\n          this._registerGlobalListeners();\n        }\n      }\n      /**\n       * @return {?}\n       */\n\n    }, {\n      key: \"_decrementMonitoredElementCount\",\n      value: function _decrementMonitoredElementCount() {\n        // Unregister global listeners when last element is unmonitored.\n        if (! --this._monitoredElementCount) {\n          this._unregisterGlobalListeners();\n\n          this._unregisterGlobalListeners = function () {};\n        }\n      }\n      /**\n       * @param {?} element\n       * @return {?}\n       */\n\n    }, {\n      key: \"_getNativeElement\",\n      value: function _getNativeElement(element) {\n        return element instanceof ElementRef ? element.nativeElement : element;\n      }\n    }]);\n\n    return FocusMonitor;\n  }();\n\n  FocusMonitor.ɵfac = function FocusMonitor_Factory(t) {\n    return new (t || FocusMonitor)(ɵngcc0.ɵɵinject(ɵngcc0.NgZone), ɵngcc0.ɵɵinject(ɵngcc1.Platform));\n  };\n\n  FocusMonitor.ɵprov =\n  /*@__PURE__*/\n\n  /*@__PURE__*/\n  ɵngcc0.ɵɵdefineInjectable({\n    token: FocusMonitor,\n    factory: FocusMonitor.ɵfac,\n    providedIn: 'root'\n  });\n  /** @nocollapse */\n\n  FocusMonitor.ngInjectableDef = /*@__PURE__*/defineInjectable({\n    factory: function FocusMonitor_Factory() {\n      return new FocusMonitor(inject(NgZone), inject(Platform));\n    },\n    token: FocusMonitor,\n    providedIn: \"root\"\n  });\n  return FocusMonitor;\n}();\n\nvar CdkMonitorFocus = /*@__PURE__*/function () {\n  var CdkMonitorFocus = /*#__PURE__*/function () {\n    /**\n     * @param {?} _elementRef\n     * @param {?} _focusMonitor\n     */\n    function CdkMonitorFocus(_elementRef, _focusMonitor) {\n      var _this14 = this;\n\n      _classCallCheck(this, CdkMonitorFocus);\n\n      this._elementRef = _elementRef;\n      this._focusMonitor = _focusMonitor;\n      this.cdkFocusChange = new EventEmitter();\n      this._monitorSubscription = this._focusMonitor.monitor(this._elementRef, this._elementRef.nativeElement.hasAttribute('cdkMonitorSubtreeFocus')).subscribe(function (origin) {\n        return _this14.cdkFocusChange.emit(origin);\n      });\n    }\n    /**\n     * @return {?}\n     */\n\n\n    _createClass(CdkMonitorFocus, [{\n      key: \"ngOnDestroy\",\n      value: function ngOnDestroy() {\n        this._focusMonitor.stopMonitoring(this._elementRef);\n\n        this._monitorSubscription.unsubscribe();\n      }\n    }]);\n\n    return CdkMonitorFocus;\n  }();\n\n  CdkMonitorFocus.ɵfac = function CdkMonitorFocus_Factory(t) {\n    return new (t || CdkMonitorFocus)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(FocusMonitor));\n  };\n\n  CdkMonitorFocus.ɵdir =\n  /*@__PURE__*/\n\n  /*@__PURE__*/\n  ɵngcc0.ɵɵdefineDirective({\n    type: CdkMonitorFocus,\n    selectors: [[\"\", \"cdkMonitorElementFocus\", \"\"], [\"\", \"cdkMonitorSubtreeFocus\", \"\"]],\n    outputs: {\n      cdkFocusChange: \"cdkFocusChange\"\n    }\n  });\n  return CdkMonitorFocus;\n}();\n/**\n * \\@docs-private \\@deprecated \\@breaking-change 8.0.0\n * @param {?} parentDispatcher\n * @param {?} ngZone\n * @param {?} platform\n * @return {?}\n */\n\n\nfunction FOCUS_MONITOR_PROVIDER_FACTORY(parentDispatcher, ngZone, platform) {\n  return parentDispatcher || new FocusMonitor(ngZone, platform);\n}\n/** *\n * \\@docs-private \\@deprecated \\@breaking-change 8.0.0\n  @type {?} */\n\n\nvar FOCUS_MONITOR_PROVIDER = {\n  // If there is already a FocusMonitor available, use that. Otherwise, provide a new one.\n  provide: FocusMonitor,\n  deps: [[/*@__PURE__*/new Optional(), /*@__PURE__*/new SkipSelf(), FocusMonitor], NgZone, Platform],\n  useFactory: FOCUS_MONITOR_PROVIDER_FACTORY\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * Screenreaders will often fire fake mousedown events when a focusable element\n * is activated using the keyboard. We can typically distinguish between these faked\n * mousedown events and real mousedown events using the \"buttons\" property. While\n * real mousedowns will indicate the mouse button that was pressed (e.g. \"1\" for\n * the left mouse button), faked mousedowns will usually set the property value to 0.\n * @param {?} event\n * @return {?}\n */\n\nfunction isFakeMousedownFromScreenReader(event) {\n  return event.buttons === 0;\n}\n\nvar A11yModule = /*@__PURE__*/function () {\n  var A11yModule = function A11yModule() {\n    _classCallCheck(this, A11yModule);\n  };\n\n  A11yModule.ɵfac = function A11yModule_Factory(t) {\n    return new (t || A11yModule)();\n  };\n\n  A11yModule.ɵmod =\n  /*@__PURE__*/\n\n  /*@__PURE__*/\n  ɵngcc0.ɵɵdefineNgModule({\n    type: A11yModule\n  });\n  A11yModule.ɵinj =\n  /*@__PURE__*/\n\n  /*@__PURE__*/\n  ɵngcc0.ɵɵdefineInjector({\n    imports: [[CommonModule, PlatformModule, ObserversModule]]\n  });\n  return A11yModule;\n}();\n/*@__PURE__*/\n\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(A11yModule, {\n    declarations: function declarations() {\n      return [CdkAriaLive, CdkTrapFocus, CdkMonitorFocus];\n    },\n    imports: function imports() {\n      return [CommonModule, PlatformModule, ObserversModule];\n    },\n    exports: function exports() {\n      return [CdkAriaLive, CdkTrapFocus, CdkMonitorFocus];\n    }\n  });\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n\nexport { ARIA_DESCRIBER_PROVIDER_FACTORY, MESSAGES_CONTAINER_ID, CDK_DESCRIBEDBY_ID_PREFIX, CDK_DESCRIBEDBY_HOST_ATTRIBUTE, AriaDescriber, ARIA_DESCRIBER_PROVIDER, ActiveDescendantKeyManager, FocusKeyManager, ListKeyManager, FocusTrap, FocusTrapFactory, CdkTrapFocus, InteractivityChecker, LIVE_ANNOUNCER_PROVIDER_FACTORY, LiveAnnouncer, CdkAriaLive, LIVE_ANNOUNCER_PROVIDER, LIVE_ANNOUNCER_ELEMENT_TOKEN_FACTORY, LIVE_ANNOUNCER_ELEMENT_TOKEN, FOCUS_MONITOR_PROVIDER_FACTORY, TOUCH_BUFFER_MS, FocusMonitor, CdkMonitorFocus, FOCUS_MONITOR_PROVIDER, isFakeMousedownFromScreenReader, A11yModule }; //# sourceMappingURL=a11y.js.map","map":null,"metadata":{},"sourceType":"module"}