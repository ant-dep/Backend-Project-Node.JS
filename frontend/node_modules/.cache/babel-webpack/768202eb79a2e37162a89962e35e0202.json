{"ast":null,"code":"import _get from \"/Users/adepertat/Dropbox/ECOLES/Openclassroom/P6_de_Pertat_Antoine/AntoinedePertat_6_240521/frontend/node_modules/@babel/runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"/Users/adepertat/Dropbox/ECOLES/Openclassroom/P6_de_Pertat_Antoine/AntoinedePertat_6_240521/frontend/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/adepertat/Dropbox/ECOLES/Openclassroom/P6_de_Pertat_Antoine/AntoinedePertat_6_240521/frontend/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/adepertat/Dropbox/ECOLES/Openclassroom/P6_de_Pertat_Antoine/AntoinedePertat_6_240521/frontend/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _toConsumableArray from \"/Users/adepertat/Dropbox/ECOLES/Openclassroom/P6_de_Pertat_Antoine/AntoinedePertat_6_240521/frontend/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"/Users/adepertat/Dropbox/ECOLES/Openclassroom/P6_de_Pertat_Antoine/AntoinedePertat_6_240521/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/adepertat/Dropbox/ECOLES/Openclassroom/P6_de_Pertat_Antoine/AntoinedePertat_6_240521/frontend/node_modules/@babel/runtime/helpers/esm/createClass\";\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { SelectionModel } from '@angular/cdk/collections';\nimport { Observable, BehaviorSubject, of, Subject } from 'rxjs';\nimport { take, takeUntil } from 'rxjs/operators';\nimport { Directive, TemplateRef, ViewContainerRef, ChangeDetectionStrategy, ChangeDetectorRef, Component, ContentChildren, ElementRef, Input, IterableDiffers, ViewChild, ViewEncapsulation, Optional, Renderer2, NgModule } from '@angular/core';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { coerceNumberProperty, coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { FocusMonitor } from '@angular/cdk/a11y';\nimport { CommonModule } from '@angular/common';\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * Base tree control. It has basic toggle/expand/collapse operations on a single data node.\n * @abstract\n * @template T\n */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/bidi';\n\nvar BaseTreeControl = /*#__PURE__*/function () {\n  function BaseTreeControl() {\n    _classCallCheck(this, BaseTreeControl);\n\n    /**\n     * A selection model with multi-selection to track expansion status.\n     */\n    this.expansionModel = new SelectionModel(true);\n  }\n  /**\n   * Toggles one single data node's expanded/collapsed state.\n   * @param {?} dataNode\n   * @return {?}\n   */\n\n\n  _createClass(BaseTreeControl, [{\n    key: \"toggle\",\n    value: function toggle(dataNode) {\n      this.expansionModel.toggle(dataNode);\n    }\n    /**\n     * Expands one single data node.\n     * @param {?} dataNode\n     * @return {?}\n     */\n\n  }, {\n    key: \"expand\",\n    value: function expand(dataNode) {\n      this.expansionModel.select(dataNode);\n    }\n    /**\n     * Collapses one single data node.\n     * @param {?} dataNode\n     * @return {?}\n     */\n\n  }, {\n    key: \"collapse\",\n    value: function collapse(dataNode) {\n      this.expansionModel.deselect(dataNode);\n    }\n    /**\n     * Whether a given data node is expanded or not. Returns true if the data node is expanded.\n     * @param {?} dataNode\n     * @return {?}\n     */\n\n  }, {\n    key: \"isExpanded\",\n    value: function isExpanded(dataNode) {\n      return this.expansionModel.isSelected(dataNode);\n    }\n    /**\n     * Toggles a subtree rooted at `node` recursively.\n     * @param {?} dataNode\n     * @return {?}\n     */\n\n  }, {\n    key: \"toggleDescendants\",\n    value: function toggleDescendants(dataNode) {\n      this.expansionModel.isSelected(dataNode) ? this.collapseDescendants(dataNode) : this.expandDescendants(dataNode);\n    }\n    /**\n     * Collapse all dataNodes in the tree.\n     * @return {?}\n     */\n\n  }, {\n    key: \"collapseAll\",\n    value: function collapseAll() {\n      this.expansionModel.clear();\n    }\n    /**\n     * Expands a subtree rooted at given data node recursively.\n     * @param {?} dataNode\n     * @return {?}\n     */\n\n  }, {\n    key: \"expandDescendants\",\n    value: function expandDescendants(dataNode) {\n      var _this$expansionModel;\n\n      /** @type {?} */\n      var toBeProcessed = [dataNode];\n      toBeProcessed.push.apply(toBeProcessed, _toConsumableArray(this.getDescendants(dataNode)));\n\n      (_this$expansionModel = this.expansionModel).select.apply(_this$expansionModel, toBeProcessed);\n    }\n    /**\n     * Collapses a subtree rooted at given data node recursively.\n     * @param {?} dataNode\n     * @return {?}\n     */\n\n  }, {\n    key: \"collapseDescendants\",\n    value: function collapseDescendants(dataNode) {\n      var _this$expansionModel2;\n\n      /** @type {?} */\n      var toBeProcessed = [dataNode];\n      toBeProcessed.push.apply(toBeProcessed, _toConsumableArray(this.getDescendants(dataNode)));\n\n      (_this$expansionModel2 = this.expansionModel).deselect.apply(_this$expansionModel2, toBeProcessed);\n    }\n  }]);\n\n  return BaseTreeControl;\n}();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * Flat tree control. Able to expand/collapse a subtree recursively for flattened tree.\n * @template T\n */\n\n\nvar FlatTreeControl = /*#__PURE__*/function (_BaseTreeControl) {\n  _inherits(FlatTreeControl, _BaseTreeControl);\n\n  var _super = _createSuper(FlatTreeControl);\n\n  /**\n   * Construct with flat tree data node functions getLevel and isExpandable.\n   * @param {?} getLevel\n   * @param {?} isExpandable\n   */\n  function FlatTreeControl(getLevel, isExpandable) {\n    var _this;\n\n    _classCallCheck(this, FlatTreeControl);\n\n    _this = _super.call(this);\n    _this.getLevel = getLevel;\n    _this.isExpandable = isExpandable;\n    return _this;\n  }\n  /**\n   * Gets a list of the data node's subtree of descendent data nodes.\n   *\n   * To make this working, the `dataNodes` of the TreeControl must be flattened tree nodes\n   * with correct levels.\n   * @param {?} dataNode\n   * @return {?}\n   */\n\n\n  _createClass(FlatTreeControl, [{\n    key: \"getDescendants\",\n    value: function getDescendants(dataNode) {\n      /** @type {?} */\n      var startIndex = this.dataNodes.indexOf(dataNode);\n      /** @type {?} */\n\n      var results = []; // Goes through flattened tree nodes in the `dataNodes` array, and get all descendants.\n      // The level of descendants of a tree node must be greater than the level of the given\n      // tree node.\n      // If we reach a node whose level is equal to the level of the tree node, we hit a sibling.\n      // If we reach a node whose level is greater than the level of the tree node, we hit a\n      // sibling of an ancestor.\n\n      for (var i = startIndex + 1; i < this.dataNodes.length && this.getLevel(dataNode) < this.getLevel(this.dataNodes[i]); i++) {\n        results.push(this.dataNodes[i]);\n      }\n\n      return results;\n    }\n    /**\n     * Expands all data nodes in the tree.\n     *\n     * To make this working, the `dataNodes` variable of the TreeControl must be set to all flattened\n     * data nodes of the tree.\n     * @return {?}\n     */\n\n  }, {\n    key: \"expandAll\",\n    value: function expandAll() {\n      var _this$expansionModel3;\n\n      (_this$expansionModel3 = this.expansionModel).select.apply(_this$expansionModel3, _toConsumableArray(this.dataNodes));\n    }\n  }]);\n\n  return FlatTreeControl;\n}(BaseTreeControl);\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * Nested tree control. Able to expand/collapse a subtree recursively for NestedNode type.\n * @template T\n */\n\n\nvar NestedTreeControl = /*#__PURE__*/function (_BaseTreeControl2) {\n  _inherits(NestedTreeControl, _BaseTreeControl2);\n\n  var _super2 = _createSuper(NestedTreeControl);\n\n  /**\n   * Construct with nested tree function getChildren.\n   * @param {?} getChildren\n   */\n  function NestedTreeControl(getChildren) {\n    var _this2;\n\n    _classCallCheck(this, NestedTreeControl);\n\n    _this2 = _super2.call(this);\n    _this2.getChildren = getChildren;\n    return _this2;\n  }\n  /**\n   * Expands all dataNodes in the tree.\n   *\n   * To make this working, the `dataNodes` variable of the TreeControl must be set to all root level\n   * data nodes of the tree.\n   * @return {?}\n   */\n\n\n  _createClass(NestedTreeControl, [{\n    key: \"expandAll\",\n    value: function expandAll() {\n      var _this3 = this,\n          _this$expansionModel4;\n\n      this.expansionModel.clear();\n      /** @type {?} */\n\n      var allNodes = this.dataNodes.reduce(function (accumulator, dataNode) {\n        return [].concat(_toConsumableArray(accumulator), _toConsumableArray(_this3.getDescendants(dataNode)), [dataNode]);\n      }, []);\n\n      (_this$expansionModel4 = this.expansionModel).select.apply(_this$expansionModel4, _toConsumableArray(allNodes));\n    }\n    /**\n     * Gets a list of descendant dataNodes of a subtree rooted at given data node recursively.\n     * @param {?} dataNode\n     * @return {?}\n     */\n\n  }, {\n    key: \"getDescendants\",\n    value: function getDescendants(dataNode) {\n      /** @type {?} */\n      var descendants = [];\n\n      this._getDescendants(descendants, dataNode); // Remove the node itself\n\n\n      return descendants.splice(1);\n    }\n    /**\n     * A helper function to get descendants recursively.\n     * @param {?} descendants\n     * @param {?} dataNode\n     * @return {?}\n     */\n\n  }, {\n    key: \"_getDescendants\",\n    value: function _getDescendants(descendants, dataNode) {\n      var _this4 = this;\n\n      descendants.push(dataNode);\n      /** @type {?} */\n\n      var childrenNodes = this.getChildren(dataNode);\n\n      if (Array.isArray(childrenNodes)) {\n        childrenNodes.forEach(function (child) {\n          return _this4._getDescendants(descendants, child);\n        });\n      } else if (childrenNodes instanceof Observable) {\n        childrenNodes.pipe(take(1)).subscribe(function (children) {\n          children.forEach(function (child) {\n            return _this4._getDescendants(descendants, child);\n          });\n        });\n      }\n    }\n  }]);\n\n  return NestedTreeControl;\n}(BaseTreeControl);\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * Context provided to the tree node component.\n * @template T\n */\n\n\nvar CdkTreeNodeOutletContext =\n/**\n * @param {?} data\n */\nfunction CdkTreeNodeOutletContext(data) {\n  _classCallCheck(this, CdkTreeNodeOutletContext);\n\n  this.$implicit = data;\n};\n\nvar CdkTreeNodeDef = /*@__PURE__*/function () {\n  var CdkTreeNodeDef =\n  /**\n   * \\@docs-private\n   * @param {?} template\n   */\n  function CdkTreeNodeDef(template) {\n    _classCallCheck(this, CdkTreeNodeDef);\n\n    this.template = template;\n  };\n\n  CdkTreeNodeDef.ɵfac = function CdkTreeNodeDef_Factory(t) {\n    return new (t || CdkTreeNodeDef)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef));\n  };\n\n  CdkTreeNodeDef.ɵdir =\n  /*@__PURE__*/\n\n  /*@__PURE__*/\n  ɵngcc0.ɵɵdefineDirective({\n    type: CdkTreeNodeDef,\n    selectors: [[\"\", \"cdkTreeNodeDef\", \"\"]],\n    inputs: {\n      when: [\"cdkTreeNodeDefWhen\", \"when\"]\n    }\n  });\n  return CdkTreeNodeDef;\n}();\n\nvar CdkTreeNodeOutlet = /*@__PURE__*/function () {\n  var CdkTreeNodeOutlet =\n  /**\n   * @param {?} viewContainer\n   */\n  function CdkTreeNodeOutlet(viewContainer) {\n    _classCallCheck(this, CdkTreeNodeOutlet);\n\n    this.viewContainer = viewContainer;\n  };\n\n  CdkTreeNodeOutlet.ɵfac = function CdkTreeNodeOutlet_Factory(t) {\n    return new (t || CdkTreeNodeOutlet)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef));\n  };\n\n  CdkTreeNodeOutlet.ɵdir =\n  /*@__PURE__*/\n\n  /*@__PURE__*/\n  ɵngcc0.ɵɵdefineDirective({\n    type: CdkTreeNodeOutlet,\n    selectors: [[\"\", \"cdkTreeNodeOutlet\", \"\"]]\n  });\n  return CdkTreeNodeOutlet;\n}();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * Returns an error to be thrown when there is no usable data.\n * \\@docs-private\n * @return {?}\n */\n\n\nfunction getTreeNoValidDataSourceError() {\n  return Error(\"A valid data source must be provided.\");\n}\n/**\n * Returns an error to be thrown when there are multiple nodes that are missing a when function.\n * \\@docs-private\n * @return {?}\n */\n\n\nfunction getTreeMultipleDefaultNodeDefsError() {\n  return Error(\"There can only be one default row without a when predicate function.\");\n}\n/**\n * Returns an error to be thrown when there are no matching node defs for a particular set of data.\n * \\@docs-private\n * @return {?}\n */\n\n\nfunction getTreeMissingMatchingNodeDefError() {\n  return Error(\"Could not find a matching node definition for the provided node data.\");\n}\n/**\n * Returns an error to be thrown when there are tree control.\n * \\@docs-private\n * @return {?}\n */\n\n\nfunction getTreeControlMissingError() {\n  return Error(\"Could not find a tree control for the tree.\");\n}\n/**\n * Returns an error to be thrown when tree control did not implement functions for flat/nested node.\n * \\@docs-private\n * @return {?}\n */\n\n\nfunction getTreeControlFunctionsMissingError() {\n  return Error(\"Could not find functions for nested/flat tree in tree control.\");\n}\n\nvar CdkTree = /*@__PURE__*/function () {\n  var CdkTree = /*#__PURE__*/function () {\n    /**\n     * @param {?} _differs\n     * @param {?} _changeDetectorRef\n     */\n    function CdkTree(_differs, _changeDetectorRef) {\n      _classCallCheck(this, CdkTree);\n\n      this._differs = _differs;\n      this._changeDetectorRef = _changeDetectorRef;\n      /**\n       * Subject that emits when the component has been destroyed.\n       */\n\n      this._onDestroy = new Subject();\n      /**\n       * Level of nodes\n       */\n\n      this._levels = new Map();\n      /**\n       * Stream containing the latest information on what rows are being displayed on screen.\n       * Can be used by the data source to as a heuristic of what data should be provided.\n       */\n\n      this.viewChange = new BehaviorSubject({\n        start: 0,\n        end: Number.MAX_VALUE\n      });\n    }\n    /**\n     * Provides a stream containing the latest data array to render. Influenced by the tree's\n     * stream of view window (what dataNodes are currently on screen).\n     * Data source can be an observable of data array, or a data array to render.\n     * @return {?}\n     */\n\n\n    _createClass(CdkTree, [{\n      key: \"dataSource\",\n      get: function get() {\n        return this._dataSource;\n      }\n      /**\n       * @param {?} dataSource\n       * @return {?}\n       */\n      ,\n      set: function set(dataSource) {\n        if (this._dataSource !== dataSource) {\n          this._switchDataSource(dataSource);\n        }\n      }\n      /**\n       * @return {?}\n       */\n\n    }, {\n      key: \"ngOnInit\",\n      value: function ngOnInit() {\n        this._dataDiffer = this._differs.find([]).create(this.trackBy);\n\n        if (!this.treeControl) {\n          throw getTreeControlMissingError();\n        }\n      }\n      /**\n       * @return {?}\n       */\n\n    }, {\n      key: \"ngOnDestroy\",\n      value: function ngOnDestroy() {\n        this._nodeOutlet.viewContainer.clear();\n\n        this._onDestroy.next();\n\n        this._onDestroy.complete();\n\n        if (this._dataSource && typeof\n        /** @type {?} */\n        this._dataSource.disconnect === 'function') {\n          /** @type {?} */\n          this.dataSource.disconnect(this);\n        }\n\n        if (this._dataSubscription) {\n          this._dataSubscription.unsubscribe();\n\n          this._dataSubscription = null;\n        }\n      }\n      /**\n       * @return {?}\n       */\n\n    }, {\n      key: \"ngAfterContentChecked\",\n      value: function ngAfterContentChecked() {\n        /** @type {?} */\n        var defaultNodeDefs = this._nodeDefs.filter(function (def) {\n          return !def.when;\n        });\n\n        if (defaultNodeDefs.length > 1) {\n          throw getTreeMultipleDefaultNodeDefsError();\n        }\n\n        this._defaultNodeDef = defaultNodeDefs[0];\n\n        if (this.dataSource && this._nodeDefs && !this._dataSubscription) {\n          this._observeRenderChanges();\n        }\n      }\n      /**\n       * Switch to the provided data source by resetting the data and unsubscribing from the current\n       * render change subscription if one exists. If the data source is null, interpret this by\n       * clearing the node outlet. Otherwise start listening for new data.\n       * @param {?} dataSource\n       * @return {?}\n       */\n\n    }, {\n      key: \"_switchDataSource\",\n      value: function _switchDataSource(dataSource) {\n        if (this._dataSource && typeof\n        /** @type {?} */\n        this._dataSource.disconnect === 'function') {\n          /** @type {?} */\n          this.dataSource.disconnect(this);\n        }\n\n        if (this._dataSubscription) {\n          this._dataSubscription.unsubscribe();\n\n          this._dataSubscription = null;\n        } // Remove the all dataNodes if there is now no data source\n\n\n        if (!dataSource) {\n          this._nodeOutlet.viewContainer.clear();\n        }\n\n        this._dataSource = dataSource;\n\n        if (this._nodeDefs) {\n          this._observeRenderChanges();\n        }\n      }\n      /**\n       * Set up a subscription for the data provided by the data source.\n       * @return {?}\n       */\n\n    }, {\n      key: \"_observeRenderChanges\",\n      value: function _observeRenderChanges() {\n        var _this5 = this;\n\n        /** @type {?} */\n        var dataStream; // Cannot use `instanceof DataSource` since the data source could be a literal with\n        // `connect` function and may not extends DataSource.\n\n        if (typeof\n        /** @type {?} */\n        this._dataSource.connect === 'function') {\n          dataStream =\n          /** @type {?} */\n          this._dataSource.connect(this);\n        } else if (this._dataSource instanceof Observable) {\n          dataStream = this._dataSource;\n        } else if (Array.isArray(this._dataSource)) {\n          dataStream = of(this._dataSource);\n        }\n\n        if (dataStream) {\n          this._dataSubscription = dataStream.pipe(takeUntil(this._onDestroy)).subscribe(function (data) {\n            return _this5.renderNodeChanges(data);\n          });\n        } else {\n          throw getTreeNoValidDataSourceError();\n        }\n      }\n      /**\n       * Check for changes made in the data and render each change (node added/removed/moved).\n       * @param {?} data\n       * @param {?=} dataDiffer\n       * @param {?=} viewContainer\n       * @param {?=} parentData\n       * @return {?}\n       */\n\n    }, {\n      key: \"renderNodeChanges\",\n      value: function renderNodeChanges(data) {\n        var _this6 = this;\n\n        var dataDiffer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this._dataDiffer;\n        var viewContainer = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this._nodeOutlet.viewContainer;\n        var parentData = arguments.length > 3 ? arguments[3] : undefined;\n\n        /** @type {?} */\n        var changes = dataDiffer.diff(data);\n\n        if (!changes) {\n          return;\n        }\n\n        changes.forEachOperation(function (item, adjustedPreviousIndex, currentIndex) {\n          if (item.previousIndex == null) {\n            _this6.insertNode(data[\n            /** @type {?} */\n            currentIndex],\n            /** @type {?} */\n            currentIndex, viewContainer, parentData);\n          } else if (currentIndex == null) {\n            viewContainer.remove(\n            /** @type {?} */\n            adjustedPreviousIndex);\n\n            _this6._levels.delete(item.item);\n          } else {\n            /** @type {?} */\n            var view = viewContainer.get(\n            /** @type {?} */\n            adjustedPreviousIndex);\n            viewContainer.move(\n            /** @type {?} */\n            view, currentIndex);\n          }\n        });\n\n        this._changeDetectorRef.detectChanges();\n      }\n      /**\n       * Finds the matching node definition that should be used for this node data. If there is only\n       * one node definition, it is returned. Otherwise, find the node definition that has a when\n       * predicate that returns true with the data. If none return true, return the default node\n       * definition.\n       * @param {?} data\n       * @param {?} i\n       * @return {?}\n       */\n\n    }, {\n      key: \"_getNodeDef\",\n      value: function _getNodeDef(data, i) {\n        if (this._nodeDefs.length === 1) {\n          return this._nodeDefs.first;\n        }\n        /** @type {?} */\n\n\n        var nodeDef = this._nodeDefs.find(function (def) {\n          return def.when && def.when(i, data);\n        }) || this._defaultNodeDef;\n\n        if (!nodeDef) {\n          throw getTreeMissingMatchingNodeDefError();\n        }\n\n        return nodeDef;\n      }\n      /**\n       * Create the embedded view for the data node template and place it in the correct index location\n       * within the data node view container.\n       * @param {?} nodeData\n       * @param {?} index\n       * @param {?=} viewContainer\n       * @param {?=} parentData\n       * @return {?}\n       */\n\n    }, {\n      key: \"insertNode\",\n      value: function insertNode(nodeData, index, viewContainer, parentData) {\n        /** @type {?} */\n        var node = this._getNodeDef(nodeData, index);\n        /** @type {?} */\n\n\n        var context = new CdkTreeNodeOutletContext(nodeData); // If the tree is flat tree, then use the `getLevel` function in flat tree control\n        // Otherwise, use the level of parent node.\n\n        if (this.treeControl.getLevel) {\n          context.level = this.treeControl.getLevel(nodeData);\n        } else if (typeof parentData !== 'undefined' && this._levels.has(parentData)) {\n          context.level =\n          /** @type {?} */\n          this._levels.get(parentData) + 1;\n        } else {\n          context.level = 0;\n        }\n\n        this._levels.set(nodeData, context.level);\n        /** @type {?} */\n\n\n        var container = viewContainer ? viewContainer : this._nodeOutlet.viewContainer;\n        container.createEmbeddedView(node.template, context, index); // Set the data to just created `CdkTreeNode`.\n        // The `CdkTreeNode` created from `createEmbeddedView` will be saved in static variable\n        //     `mostRecentTreeNode`. We get it from static variable and pass the node data to it.\n\n        if (CdkTreeNode.mostRecentTreeNode) {\n          CdkTreeNode.mostRecentTreeNode.data = nodeData;\n        }\n      }\n    }]);\n\n    return CdkTree;\n  }();\n\n  CdkTree.ɵfac = function CdkTree_Factory(t) {\n    return new (t || CdkTree)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.IterableDiffers), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef));\n  };\n\n  CdkTree.ɵcmp =\n  /*@__PURE__*/\n\n  /*@__PURE__*/\n  ɵngcc0.ɵɵdefineComponent({\n    type: CdkTree,\n    selectors: [[\"cdk-tree\"]],\n    contentQueries: function CdkTree_ContentQueries(rf, ctx, dirIndex) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, CdkTreeNodeDef, 4);\n      }\n\n      if (rf & 2) {\n        var _t;\n\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._nodeDefs = _t);\n      }\n    },\n    viewQuery: function CdkTree_Query(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(CdkTreeNodeOutlet, 5);\n      }\n\n      if (rf & 2) {\n        var _t;\n\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._nodeOutlet = _t.first);\n      }\n    },\n    hostAttrs: [\"role\", \"tree\", 1, \"cdk-tree\"],\n    inputs: {\n      dataSource: \"dataSource\",\n      treeControl: \"treeControl\",\n      trackBy: \"trackBy\"\n    },\n    exportAs: [\"cdkTree\"],\n    decls: 1,\n    vars: 0,\n    consts: [[\"cdkTreeNodeOutlet\", \"\"]],\n    template: function CdkTree_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵelementContainer(0, 0);\n      }\n    },\n    directives: [CdkTreeNodeOutlet],\n    encapsulation: 2,\n    changeDetection: 0\n  });\n  return CdkTree;\n}();\n\nvar CdkTreeNode = /*@__PURE__*/function () {\n  var CdkTreeNode = /*#__PURE__*/function () {\n    /**\n     * @param {?} _elementRef\n     * @param {?} _tree\n     */\n    function CdkTreeNode(_elementRef, _tree) {\n      _classCallCheck(this, CdkTreeNode);\n\n      this._elementRef = _elementRef;\n      this._tree = _tree;\n      /**\n       * Subject that emits when the component has been destroyed.\n       */\n\n      this._destroyed = new Subject();\n      /**\n       * The role of the node should be 'group' if it's an internal node,\n       * and 'treeitem' if it's a leaf node.\n       */\n\n      this.role = 'treeitem';\n      CdkTreeNode.mostRecentTreeNode =\n      /** @type {?} */\n      this;\n    }\n    /**\n     * The tree node's data.\n     * @return {?}\n     */\n\n\n    _createClass(CdkTreeNode, [{\n      key: \"data\",\n      get: function get() {\n        return this._data;\n      }\n      /**\n       * @param {?} value\n       * @return {?}\n       */\n      ,\n      set: function set(value) {\n        this._data = value;\n\n        this._setRoleFromData();\n      }\n      /**\n       * @return {?}\n       */\n\n    }, {\n      key: \"isExpanded\",\n      get: function get() {\n        return this._tree.treeControl.isExpanded(this._data);\n      }\n      /**\n       * @return {?}\n       */\n\n    }, {\n      key: \"level\",\n      get: function get() {\n        return this._tree.treeControl.getLevel ? this._tree.treeControl.getLevel(this._data) : 0;\n      }\n      /**\n       * @return {?}\n       */\n\n    }, {\n      key: \"ngOnDestroy\",\n      value: function ngOnDestroy() {\n        // If this is the last tree node being destroyed,\n        // clear out the reference to avoid leaking memory.\n        if (CdkTreeNode.mostRecentTreeNode === this) {\n          CdkTreeNode.mostRecentTreeNode = null;\n        }\n\n        this._destroyed.next();\n\n        this._destroyed.complete();\n      }\n      /**\n       * Focuses the menu item. Implements for FocusableOption.\n       * @return {?}\n       */\n\n    }, {\n      key: \"focus\",\n      value: function focus() {\n        this._elementRef.nativeElement.focus();\n      }\n      /**\n       * @return {?}\n       */\n\n    }, {\n      key: \"_setRoleFromData\",\n      value: function _setRoleFromData() {\n        var _this7 = this;\n\n        if (this._tree.treeControl.isExpandable) {\n          this.role = this._tree.treeControl.isExpandable(this._data) ? 'group' : 'treeitem';\n        } else {\n          if (!this._tree.treeControl.getChildren) {\n            throw getTreeControlFunctionsMissingError();\n          }\n          /** @type {?} */\n\n\n          var childrenNodes = this._tree.treeControl.getChildren(this._data);\n\n          if (Array.isArray(childrenNodes)) {\n            this._setRoleFromChildren(\n            /** @type {?} */\n            childrenNodes);\n          } else if (childrenNodes instanceof Observable) {\n            childrenNodes.pipe(takeUntil(this._destroyed)).subscribe(function (children) {\n              return _this7._setRoleFromChildren(children);\n            });\n          }\n        }\n      }\n      /**\n       * @param {?} children\n       * @return {?}\n       */\n\n    }, {\n      key: \"_setRoleFromChildren\",\n      value: function _setRoleFromChildren(children) {\n        this.role = children && children.length ? 'group' : 'treeitem';\n      }\n    }]);\n\n    return CdkTreeNode;\n  }();\n\n  CdkTreeNode.ɵfac = function CdkTreeNode_Factory(t) {\n    return new (t || CdkTreeNode)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(CdkTree));\n  };\n\n  CdkTreeNode.ɵdir =\n  /*@__PURE__*/\n\n  /*@__PURE__*/\n  ɵngcc0.ɵɵdefineDirective({\n    type: CdkTreeNode,\n    selectors: [[\"cdk-tree-node\"]],\n    hostAttrs: [1, \"cdk-tree-node\"],\n    hostVars: 3,\n    hostBindings: function CdkTreeNode_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"aria-expanded\", ctx.isExpanded)(\"aria-level\", ctx.role === \"treeitem\" ? ctx.level : null)(\"role\", ctx.role);\n      }\n    },\n    inputs: {\n      role: \"role\"\n    },\n    exportAs: [\"cdkTreeNode\"]\n  });\n  /**\n   * The most recently created `CdkTreeNode`. We save it in static variable so we can retrieve it\n   * in `CdkTree` and set the data to it.\n   */\n\n  CdkTreeNode.mostRecentTreeNode = null;\n  return CdkTreeNode;\n}();\n\nvar CdkNestedTreeNode = /*@__PURE__*/function () {\n  var CdkNestedTreeNode = /*#__PURE__*/function (_CdkTreeNode) {\n    _inherits(CdkNestedTreeNode, _CdkTreeNode);\n\n    var _super3 = _createSuper(CdkNestedTreeNode);\n\n    /**\n     * @param {?} _elementRef\n     * @param {?} _tree\n     * @param {?} _differs\n     */\n    function CdkNestedTreeNode(_elementRef, _tree, _differs) {\n      var _this8;\n\n      _classCallCheck(this, CdkNestedTreeNode);\n\n      _this8 = _super3.call(this, _elementRef, _tree);\n      _this8._elementRef = _elementRef;\n      _this8._tree = _tree;\n      _this8._differs = _differs;\n      return _this8;\n    }\n    /**\n     * @return {?}\n     */\n\n\n    _createClass(CdkNestedTreeNode, [{\n      key: \"ngAfterContentInit\",\n      value: function ngAfterContentInit() {\n        var _this9 = this;\n\n        this._dataDiffer = this._differs.find([]).create(this._tree.trackBy);\n\n        if (!this._tree.treeControl.getChildren) {\n          throw getTreeControlFunctionsMissingError();\n        }\n        /** @type {?} */\n\n\n        var childrenNodes = this._tree.treeControl.getChildren(this.data);\n\n        if (Array.isArray(childrenNodes)) {\n          this.updateChildrenNodes(\n          /** @type {?} */\n          childrenNodes);\n        } else if (childrenNodes instanceof Observable) {\n          childrenNodes.pipe(takeUntil(this._destroyed)).subscribe(function (result) {\n            return _this9.updateChildrenNodes(result);\n          });\n        }\n\n        this.nodeOutlet.changes.pipe(takeUntil(this._destroyed)).subscribe(function () {\n          return _this9.updateChildrenNodes();\n        });\n      }\n      /**\n       * @return {?}\n       */\n\n    }, {\n      key: \"ngOnDestroy\",\n      value: function ngOnDestroy() {\n        this._clear();\n\n        _get(_getPrototypeOf(CdkNestedTreeNode.prototype), \"ngOnDestroy\", this).call(this);\n      }\n      /**\n       * Add children dataNodes to the NodeOutlet\n       * @param {?=} children\n       * @return {?}\n       */\n\n    }, {\n      key: \"updateChildrenNodes\",\n      value: function updateChildrenNodes(children) {\n        if (children) {\n          this._children = children;\n        }\n\n        if (this.nodeOutlet.length && this._children) {\n          /** @type {?} */\n          var viewContainer = this.nodeOutlet.first.viewContainer;\n\n          this._tree.renderNodeChanges(this._children, this._dataDiffer, viewContainer, this._data);\n        } else {\n          // Reset the data differ if there's no children nodes displayed\n          this._dataDiffer.diff([]);\n        }\n      }\n      /**\n       * Clear the children dataNodes.\n       * @return {?}\n       */\n\n    }, {\n      key: \"_clear\",\n      value: function _clear() {\n        if (this.nodeOutlet && this.nodeOutlet.first) {\n          this.nodeOutlet.first.viewContainer.clear();\n\n          this._dataDiffer.diff([]);\n        }\n      }\n    }]);\n\n    return CdkNestedTreeNode;\n  }(CdkTreeNode);\n\n  CdkNestedTreeNode.ɵfac = function CdkNestedTreeNode_Factory(t) {\n    return new (t || CdkNestedTreeNode)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(CdkTree), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.IterableDiffers));\n  };\n\n  CdkNestedTreeNode.ɵdir =\n  /*@__PURE__*/\n\n  /*@__PURE__*/\n  ɵngcc0.ɵɵdefineDirective({\n    type: CdkNestedTreeNode,\n    selectors: [[\"cdk-nested-tree-node\"]],\n    contentQueries: function CdkNestedTreeNode_ContentQueries(rf, ctx, dirIndex) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, CdkTreeNodeOutlet, 4);\n      }\n\n      if (rf & 2) {\n        var _t;\n\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.nodeOutlet = _t);\n      }\n    },\n    hostAttrs: [1, \"cdk-tree-node\", \"cdk-nested-tree-node\"],\n    hostVars: 2,\n    hostBindings: function CdkNestedTreeNode_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"aria-expanded\", ctx.isExpanded)(\"role\", ctx.role);\n      }\n    },\n    exportAs: [\"cdkNestedTreeNode\"],\n    features: [/*@__PURE__*/ɵngcc0.ɵɵProvidersFeature([{\n      provide: CdkTreeNode,\n      useExisting: CdkNestedTreeNode\n    }]), ɵngcc0.ɵɵInheritDefinitionFeature]\n  });\n  return CdkNestedTreeNode;\n}();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/** *\n * Regex used to split a string on its CSS units.\n  @type {?} */\n\n\nvar cssUnitPattern = /([A-Za-z%]+)$/;\n\nvar CdkTreeNodePadding = /*@__PURE__*/function () {\n  var CdkTreeNodePadding = /*#__PURE__*/function () {\n    /**\n     * @param {?} _treeNode\n     * @param {?} _tree\n     * @param {?} _renderer\n     * @param {?} _element\n     * @param {?} _dir\n     */\n    function CdkTreeNodePadding(_treeNode, _tree, _renderer, _element, _dir) {\n      var _this10 = this;\n\n      _classCallCheck(this, CdkTreeNodePadding);\n\n      this._treeNode = _treeNode;\n      this._tree = _tree;\n      this._renderer = _renderer;\n      this._element = _element;\n      this._dir = _dir;\n      /**\n       * Subject that emits when the component has been destroyed.\n       */\n\n      this._destroyed = new Subject();\n      /**\n       * CSS units used for the indentation value.\n       */\n\n      this.indentUnits = 'px';\n      this._indent = 40;\n\n      this._setPadding();\n\n      if (this._dir) {\n        this._dir.change.pipe(takeUntil(this._destroyed)).subscribe(function () {\n          return _this10._setPadding();\n        });\n      }\n    }\n    /**\n     * The level of depth of the tree node. The padding will be `level * indent` pixels.\n     * @return {?}\n     */\n\n\n    _createClass(CdkTreeNodePadding, [{\n      key: \"level\",\n      get: function get() {\n        return this._level;\n      }\n      /**\n       * @param {?} value\n       * @return {?}\n       */\n      ,\n      set: function set(value) {\n        this._level = coerceNumberProperty(value);\n\n        this._setPadding();\n      }\n      /**\n       * The indent for each level. Can be a number or a CSS string.\n       * Default number 40px from material design menu sub-menu spec.\n       * @return {?}\n       */\n\n    }, {\n      key: \"indent\",\n      get: function get() {\n        return this._indent;\n      }\n      /**\n       * @param {?} indent\n       * @return {?}\n       */\n      ,\n      set: function set(indent) {\n        /** @type {?} */\n        var value = indent;\n        /** @type {?} */\n\n        var units = 'px';\n\n        if (typeof indent === 'string') {\n          /** @type {?} */\n          var parts = indent.split(cssUnitPattern);\n          value = parts[0];\n          units = parts[1] || units;\n        }\n\n        this.indentUnits = units;\n        this._indent = coerceNumberProperty(value);\n\n        this._setPadding();\n      }\n      /**\n       * @return {?}\n       */\n\n    }, {\n      key: \"ngOnDestroy\",\n      value: function ngOnDestroy() {\n        this._destroyed.next();\n\n        this._destroyed.complete();\n      }\n      /**\n       * The padding indent value for the tree node. Returns a string with px numbers if not null.\n       * @return {?}\n       */\n\n    }, {\n      key: \"_paddingIndent\",\n      value: function _paddingIndent() {\n        /** @type {?} */\n        var nodeLevel = this._treeNode.data && this._tree.treeControl.getLevel ? this._tree.treeControl.getLevel(this._treeNode.data) : null;\n        /** @type {?} */\n\n        var level = this._level || nodeLevel;\n        return level ? \"\".concat(level * this._indent).concat(this.indentUnits) : null;\n      }\n      /**\n       * @return {?}\n       */\n\n    }, {\n      key: \"_setPadding\",\n      value: function _setPadding() {\n        /** @type {?} */\n        var padding = this._paddingIndent();\n        /** @type {?} */\n\n\n        var paddingProp = this._dir && this._dir.value === 'rtl' ? 'paddingRight' : 'paddingLeft';\n\n        this._renderer.setStyle(this._element.nativeElement, paddingProp, padding);\n      }\n    }]);\n\n    return CdkTreeNodePadding;\n  }();\n\n  CdkTreeNodePadding.ɵfac = function CdkTreeNodePadding_Factory(t) {\n    return new (t || CdkTreeNodePadding)(ɵngcc0.ɵɵdirectiveInject(CdkTreeNode), ɵngcc0.ɵɵdirectiveInject(CdkTree), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.Directionality, 8));\n  };\n\n  CdkTreeNodePadding.ɵdir =\n  /*@__PURE__*/\n\n  /*@__PURE__*/\n  ɵngcc0.ɵɵdefineDirective({\n    type: CdkTreeNodePadding,\n    selectors: [[\"\", \"cdkTreeNodePadding\", \"\"]],\n    inputs: {\n      level: [\"cdkTreeNodePadding\", \"level\"],\n      indent: [\"cdkTreeNodePaddingIndent\", \"indent\"]\n    }\n  });\n  return CdkTreeNodePadding;\n}();\n\nvar CdkTreeNodeToggle = /*@__PURE__*/function () {\n  var CdkTreeNodeToggle = /*#__PURE__*/function () {\n    /**\n     * @param {?} _tree\n     * @param {?} _treeNode\n     */\n    function CdkTreeNodeToggle(_tree, _treeNode) {\n      _classCallCheck(this, CdkTreeNodeToggle);\n\n      this._tree = _tree;\n      this._treeNode = _treeNode;\n      this._recursive = false;\n    }\n    /**\n     * Whether expand/collapse the node recursively.\n     * @return {?}\n     */\n\n\n    _createClass(CdkTreeNodeToggle, [{\n      key: \"recursive\",\n      get: function get() {\n        return this._recursive;\n      }\n      /**\n       * @param {?} value\n       * @return {?}\n       */\n      ,\n      set: function set(value) {\n        this._recursive = coerceBooleanProperty(value);\n      }\n      /**\n       * @param {?} event\n       * @return {?}\n       */\n\n    }, {\n      key: \"_toggle\",\n      value: function _toggle(event) {\n        this.recursive ? this._tree.treeControl.toggleDescendants(this._treeNode.data) : this._tree.treeControl.toggle(this._treeNode.data);\n        event.stopPropagation();\n      }\n    }]);\n\n    return CdkTreeNodeToggle;\n  }();\n\n  CdkTreeNodeToggle.ɵfac = function CdkTreeNodeToggle_Factory(t) {\n    return new (t || CdkTreeNodeToggle)(ɵngcc0.ɵɵdirectiveInject(CdkTree), ɵngcc0.ɵɵdirectiveInject(CdkTreeNode));\n  };\n\n  CdkTreeNodeToggle.ɵdir =\n  /*@__PURE__*/\n\n  /*@__PURE__*/\n  ɵngcc0.ɵɵdefineDirective({\n    type: CdkTreeNodeToggle,\n    selectors: [[\"\", \"cdkTreeNodeToggle\", \"\"]],\n    hostBindings: function CdkTreeNodeToggle_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"click\", function CdkTreeNodeToggle_click_HostBindingHandler($event) {\n          return ctx._toggle($event);\n        });\n      }\n    },\n    inputs: {\n      recursive: [\"cdkTreeNodeToggleRecursive\", \"recursive\"]\n    }\n  });\n  return CdkTreeNodeToggle;\n}();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/** @type {?} */\n\n\nvar EXPORTED_DECLARATIONS = [CdkNestedTreeNode, CdkTreeNodeDef, CdkTreeNodePadding, CdkTreeNodeToggle, CdkTree, CdkTreeNode, CdkTreeNodeOutlet];\n\nvar CdkTreeModule = /*@__PURE__*/function () {\n  var CdkTreeModule = function CdkTreeModule() {\n    _classCallCheck(this, CdkTreeModule);\n  };\n\n  CdkTreeModule.ɵfac = function CdkTreeModule_Factory(t) {\n    return new (t || CdkTreeModule)();\n  };\n\n  CdkTreeModule.ɵmod =\n  /*@__PURE__*/\n\n  /*@__PURE__*/\n  ɵngcc0.ɵɵdefineNgModule({\n    type: CdkTreeModule\n  });\n  CdkTreeModule.ɵinj =\n  /*@__PURE__*/\n\n  /*@__PURE__*/\n  ɵngcc0.ɵɵdefineInjector({\n    providers: [FocusMonitor, CdkTreeNodeDef],\n    imports: [[CommonModule]]\n  });\n  return CdkTreeModule;\n}();\n/*@__PURE__*/\n\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(CdkTreeModule, {\n    declarations: function declarations() {\n      return [CdkNestedTreeNode, CdkTreeNodeDef, CdkTreeNodePadding, CdkTreeNodeToggle, CdkTree, CdkTreeNode, CdkTreeNodeOutlet];\n    },\n    imports: function imports() {\n      return [CommonModule];\n    },\n    exports: function exports() {\n      return [CdkNestedTreeNode, CdkTreeNodeDef, CdkTreeNodePadding, CdkTreeNodeToggle, CdkTree, CdkTreeNode, CdkTreeNodeOutlet];\n    }\n  });\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n\nexport { BaseTreeControl, FlatTreeControl, NestedTreeControl, CdkNestedTreeNode, CdkTreeNodeOutletContext, CdkTreeNodeDef, CdkTreeNodePadding, CdkTreeNodeOutlet, CdkTree, CdkTreeNode, getTreeNoValidDataSourceError, getTreeMultipleDefaultNodeDefsError, getTreeMissingMatchingNodeDefError, getTreeControlMissingError, getTreeControlFunctionsMissingError, CdkTreeModule, CdkTreeNodeToggle }; //# sourceMappingURL=tree.js.map","map":null,"metadata":{},"sourceType":"module"}