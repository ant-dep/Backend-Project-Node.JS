{"ast":null,"code":"import _slicedToArray from \"/Users/adepertat/Dropbox/ECOLES/Openclassroom/P6_de_Pertat_Antoine/AntoinedePertat_6_240521/frontend/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _createForOfIteratorHelper from \"/Users/adepertat/Dropbox/ECOLES/Openclassroom/P6_de_Pertat_Antoine/AntoinedePertat_6_240521/frontend/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper\";\nimport _get from \"/Users/adepertat/Dropbox/ECOLES/Openclassroom/P6_de_Pertat_Antoine/AntoinedePertat_6_240521/frontend/node_modules/@babel/runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"/Users/adepertat/Dropbox/ECOLES/Openclassroom/P6_de_Pertat_Antoine/AntoinedePertat_6_240521/frontend/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/adepertat/Dropbox/ECOLES/Openclassroom/P6_de_Pertat_Antoine/AntoinedePertat_6_240521/frontend/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/adepertat/Dropbox/ECOLES/Openclassroom/P6_de_Pertat_Antoine/AntoinedePertat_6_240521/frontend/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _classCallCheck from \"/Users/adepertat/Dropbox/ECOLES/Openclassroom/P6_de_Pertat_Antoine/AntoinedePertat_6_240521/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/adepertat/Dropbox/ECOLES/Openclassroom/P6_de_Pertat_Antoine/AntoinedePertat_6_240521/frontend/node_modules/@babel/runtime/helpers/esm/createClass\";\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { InjectionToken, Directive, forwardRef, Input, Injectable, NgZone, Optional, SkipSelf, ElementRef, NgModule, IterableDiffers, TemplateRef, ViewContainerRef, ChangeDetectionStrategy, ChangeDetectorRef, Component, Inject, Output, ViewChild, ViewEncapsulation, defineInjectable, inject } from '@angular/core';\nimport { coerceNumberProperty } from '@angular/cdk/coercion';\nimport { Subject, fromEvent, of, Observable, animationFrameScheduler, merge } from 'rxjs';\nimport { distinctUntilChanged, auditTime, filter, takeUntil, startWith, pairwise, shareReplay, switchMap } from 'rxjs/operators';\nimport { Platform, getRtlScrollAxisType, RtlScrollAxisType, supportsScrollBehavior, PlatformModule } from '@angular/cdk/platform';\nimport { Directionality, BidiModule } from '@angular/cdk/bidi';\nimport { ArrayDataSource, DataSource } from '@angular/cdk/collections';\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/** *\n * The injection token used to specify the virtual scrolling strategy.\n  @type {?} */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/platform';\nimport * as ɵngcc2 from '@angular/cdk/bidi';\nvar _c0 = [\"contentWrapper\"];\nvar _c1 = [\"*\"];\nvar VIRTUAL_SCROLL_STRATEGY = /*@__PURE__*/new InjectionToken('VIRTUAL_SCROLL_STRATEGY');\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * Virtual scrolling strategy for lists with items of known fixed size.\n */\n\nvar FixedSizeVirtualScrollStrategy = /*#__PURE__*/function () {\n  /**\n   * @param {?} itemSize The size of the items in the virtually scrolling list.\n   * @param {?} minBufferPx The minimum amount of buffer (in pixels) before needing to render more\n   * @param {?} maxBufferPx The amount of buffer (in pixels) to render when rendering more.\n   */\n  function FixedSizeVirtualScrollStrategy(itemSize, minBufferPx, maxBufferPx) {\n    _classCallCheck(this, FixedSizeVirtualScrollStrategy);\n\n    this._scrolledIndexChange = new Subject();\n    /**\n     * \\@docs-private Implemented as part of VirtualScrollStrategy.\n     */\n\n    this.scrolledIndexChange = this._scrolledIndexChange.pipe(distinctUntilChanged());\n    /**\n     * The attached viewport.\n     */\n\n    this._viewport = null;\n    this._itemSize = itemSize;\n    this._minBufferPx = minBufferPx;\n    this._maxBufferPx = maxBufferPx;\n  }\n  /**\n   * Attaches this scroll strategy to a viewport.\n   * @param {?} viewport The viewport to attach this strategy to.\n   * @return {?}\n   */\n\n\n  _createClass(FixedSizeVirtualScrollStrategy, [{\n    key: \"attach\",\n    value: function attach(viewport) {\n      this._viewport = viewport;\n\n      this._updateTotalContentSize();\n\n      this._updateRenderedRange();\n    }\n    /**\n     * Detaches this scroll strategy from the currently attached viewport.\n     * @return {?}\n     */\n\n  }, {\n    key: \"detach\",\n    value: function detach() {\n      this._scrolledIndexChange.complete();\n\n      this._viewport = null;\n    }\n    /**\n     * Update the item size and buffer size.\n     * @param {?} itemSize The size of the items in the virtually scrolling list.\n     * @param {?} minBufferPx The minimum amount of buffer (in pixels) before needing to render more\n     * @param {?} maxBufferPx The amount of buffer (in pixels) to render when rendering more.\n     * @return {?}\n     */\n\n  }, {\n    key: \"updateItemAndBufferSize\",\n    value: function updateItemAndBufferSize(itemSize, minBufferPx, maxBufferPx) {\n      if (maxBufferPx < minBufferPx) {\n        throw Error('CDK virtual scroll: maxBufferPx must be greater than or equal to minBufferPx');\n      }\n\n      this._itemSize = itemSize;\n      this._minBufferPx = minBufferPx;\n      this._maxBufferPx = maxBufferPx;\n\n      this._updateTotalContentSize();\n\n      this._updateRenderedRange();\n    }\n    /**\n     * \\@docs-private Implemented as part of VirtualScrollStrategy.\n     * @return {?}\n     */\n\n  }, {\n    key: \"onContentScrolled\",\n    value: function onContentScrolled() {\n      this._updateRenderedRange();\n    }\n    /**\n     * \\@docs-private Implemented as part of VirtualScrollStrategy.\n     * @return {?}\n     */\n\n  }, {\n    key: \"onDataLengthChanged\",\n    value: function onDataLengthChanged() {\n      this._updateTotalContentSize();\n\n      this._updateRenderedRange();\n    }\n    /**\n     * \\@docs-private Implemented as part of VirtualScrollStrategy.\n     * @return {?}\n     */\n\n  }, {\n    key: \"onContentRendered\",\n    value: function onContentRendered() {\n      /* no-op */\n    }\n    /**\n     * \\@docs-private Implemented as part of VirtualScrollStrategy.\n     * @return {?}\n     */\n\n  }, {\n    key: \"onRenderedOffsetChanged\",\n    value: function onRenderedOffsetChanged() {\n      /* no-op */\n    }\n    /**\n     * Scroll to the offset for the given index.\n     * @param {?} index The index of the element to scroll to.\n     * @param {?} behavior The ScrollBehavior to use when scrolling.\n     * @return {?}\n     */\n\n  }, {\n    key: \"scrollToIndex\",\n    value: function scrollToIndex(index, behavior) {\n      if (this._viewport) {\n        this._viewport.scrollToOffset(index * this._itemSize, behavior);\n      }\n    }\n    /**\n     * Update the viewport's total content size.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_updateTotalContentSize\",\n    value: function _updateTotalContentSize() {\n      if (!this._viewport) {\n        return;\n      }\n\n      this._viewport.setTotalContentSize(this._viewport.getDataLength() * this._itemSize);\n    }\n    /**\n     * Update the viewport's rendered range.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_updateRenderedRange\",\n    value: function _updateRenderedRange() {\n      if (!this._viewport) {\n        return;\n      }\n      /** @type {?} */\n\n\n      var scrollOffset = this._viewport.measureScrollOffset();\n      /** @type {?} */\n\n\n      var firstVisibleIndex = scrollOffset / this._itemSize;\n      /** @type {?} */\n\n      var renderedRange = this._viewport.getRenderedRange();\n      /** @type {?} */\n\n\n      var newRange = {\n        start: renderedRange.start,\n        end: renderedRange.end\n      };\n      /** @type {?} */\n\n      var viewportSize = this._viewport.getViewportSize();\n      /** @type {?} */\n\n\n      var dataLength = this._viewport.getDataLength();\n      /** @type {?} */\n\n\n      var startBuffer = scrollOffset - newRange.start * this._itemSize;\n\n      if (startBuffer < this._minBufferPx && newRange.start != 0) {\n        /** @type {?} */\n        var expandStart = Math.ceil((this._maxBufferPx - startBuffer) / this._itemSize);\n        newRange.start = Math.max(0, newRange.start - expandStart);\n        newRange.end = Math.min(dataLength, Math.ceil(firstVisibleIndex + (viewportSize + this._minBufferPx) / this._itemSize));\n      } else {\n        /** @type {?} */\n        var endBuffer = newRange.end * this._itemSize - (scrollOffset + viewportSize);\n\n        if (endBuffer < this._minBufferPx && newRange.end != dataLength) {\n          /** @type {?} */\n          var expandEnd = Math.ceil((this._maxBufferPx - endBuffer) / this._itemSize);\n\n          if (expandEnd > 0) {\n            newRange.end = Math.min(dataLength, newRange.end + expandEnd);\n            newRange.start = Math.max(0, Math.floor(firstVisibleIndex - this._minBufferPx / this._itemSize));\n          }\n        }\n      }\n\n      this._viewport.setRenderedRange(newRange);\n\n      this._viewport.setRenderedContentOffset(this._itemSize * newRange.start);\n\n      this._scrolledIndexChange.next(Math.floor(firstVisibleIndex));\n    }\n  }]);\n\n  return FixedSizeVirtualScrollStrategy;\n}();\n/**\n * Provider factory for `FixedSizeVirtualScrollStrategy` that simply extracts the already created\n * `FixedSizeVirtualScrollStrategy` from the given directive.\n * @param {?} fixedSizeDir The instance of `CdkFixedSizeVirtualScroll` to extract the\n *     `FixedSizeVirtualScrollStrategy` from.\n * @return {?}\n */\n\n\nfunction _fixedSizeVirtualScrollStrategyFactory(fixedSizeDir) {\n  return fixedSizeDir._scrollStrategy;\n}\n\nvar CdkFixedSizeVirtualScroll = /*@__PURE__*/function () {\n  var CdkFixedSizeVirtualScroll = /*#__PURE__*/function () {\n    function CdkFixedSizeVirtualScroll() {\n      _classCallCheck(this, CdkFixedSizeVirtualScroll);\n\n      this._itemSize = 20;\n      this._minBufferPx = 100;\n      this._maxBufferPx = 200;\n      /**\n       * The scroll strategy used by this directive.\n       */\n\n      this._scrollStrategy = new FixedSizeVirtualScrollStrategy(this.itemSize, this.minBufferPx, this.maxBufferPx);\n    }\n    /**\n     * The size of the items in the list (in pixels).\n     * @return {?}\n     */\n\n\n    _createClass(CdkFixedSizeVirtualScroll, [{\n      key: \"itemSize\",\n      get: function get() {\n        return this._itemSize;\n      }\n      /**\n       * @param {?} value\n       * @return {?}\n       */\n      ,\n      set: function set(value) {\n        this._itemSize = coerceNumberProperty(value);\n      }\n      /**\n       * The minimum amount of buffer rendered beyond the viewport (in pixels).\n       * If the amount of buffer dips below this number, more items will be rendered. Defaults to 100px.\n       * @return {?}\n       */\n\n    }, {\n      key: \"minBufferPx\",\n      get: function get() {\n        return this._minBufferPx;\n      }\n      /**\n       * @param {?} value\n       * @return {?}\n       */\n      ,\n      set: function set(value) {\n        this._minBufferPx = coerceNumberProperty(value);\n      }\n      /**\n       * The number of pixels worth of buffer to render for when rendering new items. Defaults to 200px.\n       * @return {?}\n       */\n\n    }, {\n      key: \"maxBufferPx\",\n      get: function get() {\n        return this._maxBufferPx;\n      }\n      /**\n       * @param {?} value\n       * @return {?}\n       */\n      ,\n      set: function set(value) {\n        this._maxBufferPx = coerceNumberProperty(value);\n      }\n      /**\n       * @return {?}\n       */\n\n    }, {\n      key: \"ngOnChanges\",\n      value: function ngOnChanges() {\n        this._scrollStrategy.updateItemAndBufferSize(this.itemSize, this.minBufferPx, this.maxBufferPx);\n      }\n    }]);\n\n    return CdkFixedSizeVirtualScroll;\n  }();\n\n  CdkFixedSizeVirtualScroll.ɵfac = function CdkFixedSizeVirtualScroll_Factory(t) {\n    return new (t || CdkFixedSizeVirtualScroll)();\n  };\n\n  CdkFixedSizeVirtualScroll.ɵdir =\n  /*@__PURE__*/\n\n  /*@__PURE__*/\n  ɵngcc0.ɵɵdefineDirective({\n    type: CdkFixedSizeVirtualScroll,\n    selectors: [[\"cdk-virtual-scroll-viewport\", \"itemSize\", \"\"]],\n    inputs: {\n      itemSize: \"itemSize\",\n      minBufferPx: \"minBufferPx\",\n      maxBufferPx: \"maxBufferPx\"\n    },\n    features: [/*@__PURE__*/ɵngcc0.ɵɵProvidersFeature([{\n      provide: VIRTUAL_SCROLL_STRATEGY,\n      useFactory: _fixedSizeVirtualScrollStrategyFactory,\n      deps: [/*@__PURE__*/forwardRef(function () {\n        return CdkFixedSizeVirtualScroll;\n      })]\n    }]), ɵngcc0.ɵɵNgOnChangesFeature]\n  });\n  return CdkFixedSizeVirtualScroll;\n}();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/** *\n * Time in ms to throttle the scrolling events by default.\n  @type {?} */\n\n\nvar DEFAULT_SCROLL_TIME = 20;\n\nvar ScrollDispatcher = /*@__PURE__*/function () {\n  var ScrollDispatcher = /*#__PURE__*/function () {\n    /**\n     * @param {?} _ngZone\n     * @param {?} _platform\n     */\n    function ScrollDispatcher(_ngZone, _platform) {\n      _classCallCheck(this, ScrollDispatcher);\n\n      this._ngZone = _ngZone;\n      this._platform = _platform;\n      /**\n       * Subject for notifying that a registered scrollable reference element has been scrolled.\n       */\n\n      this._scrolled = new Subject();\n      /**\n       * Keeps track of the global `scroll` and `resize` subscriptions.\n       */\n\n      this._globalSubscription = null;\n      /**\n       * Keeps track of the amount of subscriptions to `scrolled`. Used for cleaning up afterwards.\n       */\n\n      this._scrolledCount = 0;\n      /**\n       * Map of all the scrollable references that are registered with the service and their\n       * scroll event subscriptions.\n       */\n\n      this.scrollContainers = new Map();\n    }\n    /**\n     * Registers a scrollable instance with the service and listens for its scrolled events. When the\n     * scrollable is scrolled, the service emits the event to its scrolled observable.\n     * @param {?} scrollable Scrollable instance to be registered.\n     * @return {?}\n     */\n\n\n    _createClass(ScrollDispatcher, [{\n      key: \"register\",\n      value: function register(scrollable) {\n        var _this = this;\n\n        /** @type {?} */\n        var scrollSubscription = scrollable.elementScrolled().subscribe(function () {\n          return _this._scrolled.next(scrollable);\n        });\n        this.scrollContainers.set(scrollable, scrollSubscription);\n      }\n      /**\n       * Deregisters a Scrollable reference and unsubscribes from its scroll event observable.\n       * @param {?} scrollable Scrollable instance to be deregistered.\n       * @return {?}\n       */\n\n    }, {\n      key: \"deregister\",\n      value: function deregister(scrollable) {\n        /** @type {?} */\n        var scrollableReference = this.scrollContainers.get(scrollable);\n\n        if (scrollableReference) {\n          scrollableReference.unsubscribe();\n          this.scrollContainers.delete(scrollable);\n        }\n      }\n      /**\n       * Returns an observable that emits an event whenever any of the registered Scrollable\n       * references (or window, document, or body) fire a scrolled event. Can provide a time in ms\n       * to override the default \"throttle\" time.\n       *\n       * **Note:** in order to avoid hitting change detection for every scroll event,\n       * all of the events emitted from this stream will be run outside the Angular zone.\n       * If you need to update any data bindings as a result of a scroll event, you have\n       * to run the callback using `NgZone.run`.\n       * @param {?=} auditTimeInMs\n       * @return {?}\n       */\n\n    }, {\n      key: \"scrolled\",\n      value: function scrolled() {\n        var _this2 = this;\n\n        var auditTimeInMs = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : DEFAULT_SCROLL_TIME;\n\n        if (!this._platform.isBrowser) {\n          return of();\n        }\n\n        return Observable.create(function (observer) {\n          if (!_this2._globalSubscription) {\n            _this2._addGlobalListener();\n          }\n          /** @type {?} */\n\n\n          var subscription = auditTimeInMs > 0 ? _this2._scrolled.pipe(auditTime(auditTimeInMs)).subscribe(observer) : _this2._scrolled.subscribe(observer);\n          _this2._scrolledCount++;\n          return function () {\n            subscription.unsubscribe();\n            _this2._scrolledCount--;\n\n            if (!_this2._scrolledCount) {\n              _this2._removeGlobalListener();\n            }\n          };\n        });\n      }\n      /**\n       * @return {?}\n       */\n\n    }, {\n      key: \"ngOnDestroy\",\n      value: function ngOnDestroy() {\n        var _this3 = this;\n\n        this._removeGlobalListener();\n\n        this.scrollContainers.forEach(function (_, container) {\n          return _this3.deregister(container);\n        });\n\n        this._scrolled.complete();\n      }\n      /**\n       * Returns an observable that emits whenever any of the\n       * scrollable ancestors of an element are scrolled.\n       * @param {?} elementRef Element whose ancestors to listen for.\n       * @param {?=} auditTimeInMs Time to throttle the scroll events.\n       * @return {?}\n       */\n\n    }, {\n      key: \"ancestorScrolled\",\n      value: function ancestorScrolled(elementRef, auditTimeInMs) {\n        /** @type {?} */\n        var ancestors = this.getAncestorScrollContainers(elementRef);\n        return this.scrolled(auditTimeInMs).pipe(filter(function (target) {\n          return !target || ancestors.indexOf(target) > -1;\n        }));\n      }\n      /**\n       * Returns all registered Scrollables that contain the provided element.\n       * @param {?} elementRef\n       * @return {?}\n       */\n\n    }, {\n      key: \"getAncestorScrollContainers\",\n      value: function getAncestorScrollContainers(elementRef) {\n        var _this4 = this;\n\n        /** @type {?} */\n        var scrollingContainers = [];\n        this.scrollContainers.forEach(function (_subscription, scrollable) {\n          if (_this4._scrollableContainsElement(scrollable, elementRef)) {\n            scrollingContainers.push(scrollable);\n          }\n        });\n        return scrollingContainers;\n      }\n      /**\n       * Returns true if the element is contained within the provided Scrollable.\n       * @param {?} scrollable\n       * @param {?} elementRef\n       * @return {?}\n       */\n\n    }, {\n      key: \"_scrollableContainsElement\",\n      value: function _scrollableContainsElement(scrollable, elementRef) {\n        /** @type {?} */\n        var element = elementRef.nativeElement;\n        /** @type {?} */\n\n        var scrollableElement = scrollable.getElementRef().nativeElement; // Traverse through the element parents until we reach null, checking if any of the elements\n        // are the scrollable's element.\n\n        do {\n          if (element == scrollableElement) {\n            return true;\n          }\n        } while (element =\n        /** @type {?} */\n        element.parentElement);\n\n        return false;\n      }\n      /**\n       * Sets up the global scroll listeners.\n       * @return {?}\n       */\n\n    }, {\n      key: \"_addGlobalListener\",\n      value: function _addGlobalListener() {\n        var _this5 = this;\n\n        this._globalSubscription = this._ngZone.runOutsideAngular(function () {\n          return fromEvent(window.document, 'scroll').subscribe(function () {\n            return _this5._scrolled.next();\n          });\n        });\n      }\n      /**\n       * Cleans up the global scroll listener.\n       * @return {?}\n       */\n\n    }, {\n      key: \"_removeGlobalListener\",\n      value: function _removeGlobalListener() {\n        if (this._globalSubscription) {\n          this._globalSubscription.unsubscribe();\n\n          this._globalSubscription = null;\n        }\n      }\n    }]);\n\n    return ScrollDispatcher;\n  }();\n\n  ScrollDispatcher.ɵfac = function ScrollDispatcher_Factory(t) {\n    return new (t || ScrollDispatcher)(ɵngcc0.ɵɵinject(ɵngcc0.NgZone), ɵngcc0.ɵɵinject(ɵngcc1.Platform));\n  };\n\n  ScrollDispatcher.ɵprov =\n  /*@__PURE__*/\n\n  /*@__PURE__*/\n  ɵngcc0.ɵɵdefineInjectable({\n    token: ScrollDispatcher,\n    factory: ScrollDispatcher.ɵfac,\n    providedIn: 'root'\n  });\n  /** @nocollapse */\n\n  ScrollDispatcher.ngInjectableDef = /*@__PURE__*/defineInjectable({\n    factory: function ScrollDispatcher_Factory() {\n      return new ScrollDispatcher(inject(NgZone), inject(Platform));\n    },\n    token: ScrollDispatcher,\n    providedIn: \"root\"\n  });\n  return ScrollDispatcher;\n}();\n/**\n * \\@docs-private \\@deprecated \\@breaking-change 8.0.0\n * @param {?} parentDispatcher\n * @param {?} ngZone\n * @param {?} platform\n * @return {?}\n */\n\n\nfunction SCROLL_DISPATCHER_PROVIDER_FACTORY(parentDispatcher, ngZone, platform) {\n  return parentDispatcher || new ScrollDispatcher(ngZone, platform);\n}\n/** *\n * \\@docs-private \\@deprecated \\@breaking-change 8.0.0\n  @type {?} */\n\n\nvar SCROLL_DISPATCHER_PROVIDER = {\n  // If there is already a ScrollDispatcher available, use that. Otherwise, provide a new one.\n  provide: ScrollDispatcher,\n  deps: [[/*@__PURE__*/new Optional(), /*@__PURE__*/new SkipSelf(), ScrollDispatcher], NgZone, Platform],\n  useFactory: SCROLL_DISPATCHER_PROVIDER_FACTORY\n};\n\nvar CdkScrollable = /*@__PURE__*/function () {\n  var CdkScrollable = /*#__PURE__*/function () {\n    /**\n     * @param {?} elementRef\n     * @param {?} scrollDispatcher\n     * @param {?} ngZone\n     * @param {?=} dir\n     */\n    function CdkScrollable(elementRef, scrollDispatcher, ngZone, dir) {\n      var _this6 = this;\n\n      _classCallCheck(this, CdkScrollable);\n\n      this.elementRef = elementRef;\n      this.scrollDispatcher = scrollDispatcher;\n      this.ngZone = ngZone;\n      this.dir = dir;\n      this._destroyed = new Subject();\n      this._elementScrolled = Observable.create(function (observer) {\n        return _this6.ngZone.runOutsideAngular(function () {\n          return fromEvent(_this6.elementRef.nativeElement, 'scroll').pipe(takeUntil(_this6._destroyed)).subscribe(observer);\n        });\n      });\n    }\n    /**\n     * @return {?}\n     */\n\n\n    _createClass(CdkScrollable, [{\n      key: \"ngOnInit\",\n      value: function ngOnInit() {\n        this.scrollDispatcher.register(this);\n      }\n      /**\n       * @return {?}\n       */\n\n    }, {\n      key: \"ngOnDestroy\",\n      value: function ngOnDestroy() {\n        this.scrollDispatcher.deregister(this);\n\n        this._destroyed.next();\n\n        this._destroyed.complete();\n      }\n      /**\n       * Returns observable that emits when a scroll event is fired on the host element.\n       * @return {?}\n       */\n\n    }, {\n      key: \"elementScrolled\",\n      value: function elementScrolled() {\n        return this._elementScrolled;\n      }\n      /**\n       * Gets the ElementRef for the viewport.\n       * @return {?}\n       */\n\n    }, {\n      key: \"getElementRef\",\n      value: function getElementRef() {\n        return this.elementRef;\n      }\n      /**\n       * Scrolls to the specified offsets. This is a normalized version of the browser's native scrollTo\n       * method, since browsers are not consistent about what scrollLeft means in RTL. For this method\n       * left and right always refer to the left and right side of the scrolling container irrespective\n       * of the layout direction. start and end refer to left and right in an LTR context and vice-versa\n       * in an RTL context.\n       * @param {?} options specified the offsets to scroll to.\n       * @return {?}\n       */\n\n    }, {\n      key: \"scrollTo\",\n      value: function scrollTo(options) {\n        /** @type {?} */\n        var el = this.elementRef.nativeElement;\n        /** @type {?} */\n\n        var isRtl = this.dir && this.dir.value == 'rtl'; // Rewrite start & end offsets as right or left offsets.\n\n        options.left = options.left == null ? isRtl ? options.end : options.start : options.left;\n        options.right = options.right == null ? isRtl ? options.start : options.end : options.right; // Rewrite the bottom offset as a top offset.\n\n        if (options.bottom != null) {\n          options.top = el.scrollHeight - el.clientHeight - options.bottom;\n        } // Rewrite the right offset as a left offset.\n\n\n        if (isRtl && getRtlScrollAxisType() != RtlScrollAxisType.NORMAL) {\n          if (options.left != null) {\n            options.right = el.scrollWidth - el.clientWidth - options.left;\n          }\n\n          if (getRtlScrollAxisType() == RtlScrollAxisType.INVERTED) {\n            options.left = options.right;\n          } else if (getRtlScrollAxisType() == RtlScrollAxisType.NEGATED) {\n            options.left = options.right ? -options.right : options.right;\n          }\n        } else {\n          if (options.right != null) {\n            options.left = el.scrollWidth - el.clientWidth - options.right;\n          }\n        }\n\n        this._applyScrollToOptions(options);\n      }\n      /**\n       * @param {?} options\n       * @return {?}\n       */\n\n    }, {\n      key: \"_applyScrollToOptions\",\n      value: function _applyScrollToOptions(options) {\n        /** @type {?} */\n        var el = this.elementRef.nativeElement;\n\n        if (supportsScrollBehavior()) {\n          el.scrollTo(options);\n        } else {\n          if (options.top != null) {\n            el.scrollTop = options.top;\n          }\n\n          if (options.left != null) {\n            el.scrollLeft = options.left;\n          }\n        }\n      }\n      /**\n       * Measures the scroll offset relative to the specified edge of the viewport. This method can be\n       * used instead of directly checking scrollLeft or scrollTop, since browsers are not consistent\n       * about what scrollLeft means in RTL. The values returned by this method are normalized such that\n       * left and right always refer to the left and right side of the scrolling container irrespective\n       * of the layout direction. start and end refer to left and right in an LTR context and vice-versa\n       * in an RTL context.\n       * @param {?} from The edge to measure from.\n       * @return {?}\n       */\n\n    }, {\n      key: \"measureScrollOffset\",\n      value: function measureScrollOffset(from) {\n        /** @type {?} */\n        var LEFT = 'left';\n        /** @type {?} */\n\n        var RIGHT = 'right';\n        /** @type {?} */\n\n        var el = this.elementRef.nativeElement;\n\n        if (from == 'top') {\n          return el.scrollTop;\n        }\n\n        if (from == 'bottom') {\n          return el.scrollHeight - el.clientHeight - el.scrollTop;\n        }\n        /** @type {?} */\n\n\n        var isRtl = this.dir && this.dir.value == 'rtl';\n\n        if (from == 'start') {\n          from = isRtl ? RIGHT : LEFT;\n        } else if (from == 'end') {\n          from = isRtl ? LEFT : RIGHT;\n        }\n\n        if (isRtl && getRtlScrollAxisType() == RtlScrollAxisType.INVERTED) {\n          // For INVERTED, scrollLeft is (scrollWidth - clientWidth) when scrolled all the way left and\n          // 0 when scrolled all the way right.\n          if (from == LEFT) {\n            return el.scrollWidth - el.clientWidth - el.scrollLeft;\n          } else {\n            return el.scrollLeft;\n          }\n        } else if (isRtl && getRtlScrollAxisType() == RtlScrollAxisType.NEGATED) {\n          // For NEGATED, scrollLeft is -(scrollWidth - clientWidth) when scrolled all the way left and\n          // 0 when scrolled all the way right.\n          if (from == LEFT) {\n            return el.scrollLeft + el.scrollWidth - el.clientWidth;\n          } else {\n            return -el.scrollLeft;\n          }\n        } else {\n          // For NORMAL, as well as non-RTL contexts, scrollLeft is 0 when scrolled all the way left and\n          // (scrollWidth - clientWidth) when scrolled all the way right.\n          if (from == LEFT) {\n            return el.scrollLeft;\n          } else {\n            return el.scrollWidth - el.clientWidth - el.scrollLeft;\n          }\n        }\n      }\n    }]);\n\n    return CdkScrollable;\n  }();\n\n  CdkScrollable.ɵfac = function CdkScrollable_Factory(t) {\n    return new (t || CdkScrollable)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ScrollDispatcher), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.Directionality, 8));\n  };\n\n  CdkScrollable.ɵdir =\n  /*@__PURE__*/\n\n  /*@__PURE__*/\n  ɵngcc0.ɵɵdefineDirective({\n    type: CdkScrollable,\n    selectors: [[\"\", \"cdk-scrollable\", \"\"], [\"\", \"cdkScrollable\", \"\"]]\n  });\n  return CdkScrollable;\n}();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * Checks if the given ranges are equal.\n * @param {?} r1\n * @param {?} r2\n * @return {?}\n */\n\n\nfunction rangesEqual(r1, r2) {\n  return r1.start == r2.start && r1.end == r2.end;\n}\n\nvar CdkVirtualScrollViewport = /*@__PURE__*/function () {\n  var CdkVirtualScrollViewport = /*#__PURE__*/function (_CdkScrollable) {\n    _inherits(CdkVirtualScrollViewport, _CdkScrollable);\n\n    var _super = _createSuper(CdkVirtualScrollViewport);\n\n    /**\n     * @param {?} elementRef\n     * @param {?} _changeDetectorRef\n     * @param {?} ngZone\n     * @param {?} _scrollStrategy\n     * @param {?} dir\n     * @param {?} scrollDispatcher\n     */\n    function CdkVirtualScrollViewport(elementRef, _changeDetectorRef, ngZone, _scrollStrategy, dir, scrollDispatcher) {\n      var _this7;\n\n      _classCallCheck(this, CdkVirtualScrollViewport);\n\n      _this7 = _super.call(this, elementRef, scrollDispatcher, ngZone, dir);\n      _this7.elementRef = elementRef;\n      _this7._changeDetectorRef = _changeDetectorRef;\n      _this7._scrollStrategy = _scrollStrategy;\n      /**\n       * Emits when the viewport is detached from a CdkVirtualForOf.\n       */\n\n      _this7._detachedSubject = new Subject();\n      /**\n       * Emits when the rendered range changes.\n       */\n\n      _this7._renderedRangeSubject = new Subject();\n      /**\n       * The direction the viewport scrolls.\n       */\n\n      _this7.orientation = 'vertical';\n      /**\n       * Emits when the index of the first element visible in the viewport changes.\n       */\n\n      _this7.scrolledIndexChange = Observable.create(function (observer) {\n        return _this7._scrollStrategy.scrolledIndexChange.subscribe(function (index) {\n          return Promise.resolve().then(function () {\n            return _this7.ngZone.run(function () {\n              return observer.next(index);\n            });\n          });\n        });\n      });\n      /**\n       * A stream that emits whenever the rendered range changes.\n       */\n\n      _this7.renderedRangeStream = _this7._renderedRangeSubject.asObservable();\n      /**\n       * The transform used to scale the spacer to the same size as all content, including content that\n       * is not currently rendered.\n       */\n\n      _this7._totalContentSizeTransform = '';\n      /**\n       * The total size of all content (in pixels), including content that is not currently rendered.\n       */\n\n      _this7._totalContentSize = 0;\n      /**\n       * The currently rendered range of indices.\n       */\n\n      _this7._renderedRange = {\n        start: 0,\n        end: 0\n      };\n      /**\n       * The length of the data bound to this viewport (in number of items).\n       */\n\n      _this7._dataLength = 0;\n      /**\n       * The size of the viewport (in pixels).\n       */\n\n      _this7._viewportSize = 0;\n      /**\n       * The last rendered content offset that was set.\n       */\n\n      _this7._renderedContentOffset = 0;\n      /**\n       * Whether the last rendered content offset was to the end of the content (and therefore needs to\n       * be rewritten as an offset to the start of the content).\n       */\n\n      _this7._renderedContentOffsetNeedsRewrite = false;\n      /**\n       * Whether there is a pending change detection cycle.\n       */\n\n      _this7._isChangeDetectionPending = false;\n      /**\n       * A list of functions to run after the next change detection cycle.\n       */\n\n      _this7._runAfterChangeDetection = [];\n\n      if (!_scrollStrategy) {\n        throw Error('Error: cdk-virtual-scroll-viewport requires the \"itemSize\" property to be set.');\n      }\n\n      return _this7;\n    }\n    /**\n     * @return {?}\n     */\n\n\n    _createClass(CdkVirtualScrollViewport, [{\n      key: \"ngOnInit\",\n      value: function ngOnInit() {\n        var _this8 = this;\n\n        _get(_getPrototypeOf(CdkVirtualScrollViewport.prototype), \"ngOnInit\", this).call(this); // It's still too early to measure the viewport at this point. Deferring with a promise allows\n        // the Viewport to be rendered with the correct size before we measure. We run this outside the\n        // zone to avoid causing more change detection cycles. We handle the change detection loop\n        // ourselves instead.\n\n\n        this.ngZone.runOutsideAngular(function () {\n          return Promise.resolve().then(function () {\n            _this8._measureViewportSize();\n\n            _this8._scrollStrategy.attach(_this8);\n\n            _this8.elementScrolled().pipe( // Start off with a fake scroll event so we properly detect our initial position.\n            startWith(\n            /** @type {?} */\n            null), // Collect multiple events into one until the next animation frame. This way if\n            // there are multiple scroll events in the same frame we only need to recheck\n            // our layout once.\n            auditTime(0, animationFrameScheduler)).subscribe(function () {\n              return _this8._scrollStrategy.onContentScrolled();\n            });\n\n            _this8._markChangeDetectionNeeded();\n          });\n        });\n      }\n      /**\n       * @return {?}\n       */\n\n    }, {\n      key: \"ngOnDestroy\",\n      value: function ngOnDestroy() {\n        this.detach();\n\n        this._scrollStrategy.detach(); // Complete all subjects\n\n\n        this._renderedRangeSubject.complete();\n\n        this._detachedSubject.complete();\n\n        _get(_getPrototypeOf(CdkVirtualScrollViewport.prototype), \"ngOnDestroy\", this).call(this);\n      }\n      /**\n       * Attaches a `CdkVirtualForOf` to this viewport.\n       * @param {?} forOf\n       * @return {?}\n       */\n\n    }, {\n      key: \"attach\",\n      value: function attach(forOf) {\n        var _this9 = this;\n\n        if (this._forOf) {\n          throw Error('CdkVirtualScrollViewport is already attached.');\n        } // Subscribe to the data stream of the CdkVirtualForOf to keep track of when the data length\n        // changes. Run outside the zone to avoid triggering change detection, since we're managing the\n        // change detection loop ourselves.\n\n\n        this.ngZone.runOutsideAngular(function () {\n          _this9._forOf = forOf;\n\n          _this9._forOf.dataStream.pipe(takeUntil(_this9._detachedSubject)).subscribe(function (data) {\n            /** @type {?} */\n            var newLength = data.length;\n\n            if (newLength !== _this9._dataLength) {\n              _this9._dataLength = newLength;\n\n              _this9._scrollStrategy.onDataLengthChanged();\n            }\n\n            _this9._doChangeDetection();\n          });\n        });\n      }\n      /**\n       * Detaches the current `CdkVirtualForOf`.\n       * @return {?}\n       */\n\n    }, {\n      key: \"detach\",\n      value: function detach() {\n        this._forOf = null;\n\n        this._detachedSubject.next();\n      }\n      /**\n       * Gets the length of the data bound to this viewport (in number of items).\n       * @return {?}\n       */\n\n    }, {\n      key: \"getDataLength\",\n      value: function getDataLength() {\n        return this._dataLength;\n      }\n      /**\n       * Gets the size of the viewport (in pixels).\n       * @return {?}\n       */\n\n    }, {\n      key: \"getViewportSize\",\n      value: function getViewportSize() {\n        return this._viewportSize;\n      }\n      /**\n       * Get the current rendered range of items.\n       * @return {?}\n       */\n\n    }, {\n      key: \"getRenderedRange\",\n      value: function getRenderedRange() {\n        return this._renderedRange;\n      }\n      /**\n       * Sets the total size of all content (in pixels), including content that is not currently\n       * rendered.\n       * @param {?} size\n       * @return {?}\n       */\n\n    }, {\n      key: \"setTotalContentSize\",\n      value: function setTotalContentSize(size) {\n        if (this._totalContentSize !== size) {\n          this._totalContentSize = size;\n          /** @type {?} */\n\n          var axis = this.orientation == 'horizontal' ? 'X' : 'Y';\n          this._totalContentSizeTransform = \"scale\".concat(axis, \"(\").concat(this._totalContentSize, \")\");\n\n          this._markChangeDetectionNeeded();\n        }\n      }\n      /**\n       * Sets the currently rendered range of indices.\n       * @param {?} range\n       * @return {?}\n       */\n\n    }, {\n      key: \"setRenderedRange\",\n      value: function setRenderedRange(range) {\n        var _this10 = this;\n\n        if (!rangesEqual(this._renderedRange, range)) {\n          this._renderedRangeSubject.next(this._renderedRange = range);\n\n          this._markChangeDetectionNeeded(function () {\n            return _this10._scrollStrategy.onContentRendered();\n          });\n        }\n      }\n      /**\n       * Gets the offset from the start of the viewport to the start of the rendered data (in pixels).\n       * @return {?}\n       */\n\n    }, {\n      key: \"getOffsetToRenderedContentStart\",\n      value: function getOffsetToRenderedContentStart() {\n        return this._renderedContentOffsetNeedsRewrite ? null : this._renderedContentOffset;\n      }\n      /**\n       * Sets the offset from the start of the viewport to either the start or end of the rendered data\n       * (in pixels).\n       * @param {?} offset\n       * @param {?=} to\n       * @return {?}\n       */\n\n    }, {\n      key: \"setRenderedContentOffset\",\n      value: function setRenderedContentOffset(offset) {\n        var _this11 = this;\n\n        var to = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'to-start';\n\n        /** @type {?} */\n        var isRtl = this.dir && this.dir.value == 'rtl';\n        /** @type {?} */\n\n        var isHorizontal = this.orientation == 'horizontal';\n        /** @type {?} */\n\n        var axis = isHorizontal ? 'X' : 'Y';\n        /** @type {?} */\n\n        var axisDirection = isHorizontal && isRtl ? -1 : 1;\n        /** @type {?} */\n\n        var transform = \"translate\".concat(axis, \"(\").concat(Number(axisDirection * offset), \"px)\");\n        this._renderedContentOffset = offset;\n\n        if (to === 'to-end') {\n          transform += \" translate\".concat(axis, \"(-100%)\"); // The viewport should rewrite this as a `to-start` offset on the next render cycle. Otherwise\n          // elements will appear to expand in the wrong direction (e.g. `mat-expansion-panel` would\n          // expand upward).\n\n          this._renderedContentOffsetNeedsRewrite = true;\n        }\n\n        if (this._renderedContentTransform != transform) {\n          // We know this value is safe because we parse `offset` with `Number()` before passing it\n          // into the string.\n          this._renderedContentTransform = transform;\n\n          this._markChangeDetectionNeeded(function () {\n            if (_this11._renderedContentOffsetNeedsRewrite) {\n              _this11._renderedContentOffset -= _this11.measureRenderedContentSize();\n              _this11._renderedContentOffsetNeedsRewrite = false;\n\n              _this11.setRenderedContentOffset(_this11._renderedContentOffset);\n            } else {\n              _this11._scrollStrategy.onRenderedOffsetChanged();\n            }\n          });\n        }\n      }\n      /**\n       * Scrolls to the given offset from the start of the viewport. Please note that this is not always\n       * the same as setting `scrollTop` or `scrollLeft`. In a horizontal viewport with right-to-left\n       * direction, this would be the equivalent of setting a fictional `scrollRight` property.\n       * @param {?} offset The offset to scroll to.\n       * @param {?=} behavior The ScrollBehavior to use when scrolling. Default is behavior is `auto`.\n       * @return {?}\n       */\n\n    }, {\n      key: \"scrollToOffset\",\n      value: function scrollToOffset(offset) {\n        var behavior = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'auto';\n\n        /** @type {?} */\n        var options = {\n          behavior: behavior\n        };\n\n        if (this.orientation === 'horizontal') {\n          options.start = offset;\n        } else {\n          options.top = offset;\n        }\n\n        this.scrollTo(options);\n      }\n      /**\n       * Scrolls to the offset for the given index.\n       * @param {?} index The index of the element to scroll to.\n       * @param {?=} behavior The ScrollBehavior to use when scrolling. Default is behavior is `auto`.\n       * @return {?}\n       */\n\n    }, {\n      key: \"scrollToIndex\",\n      value: function scrollToIndex(index) {\n        var behavior = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'auto';\n\n        this._scrollStrategy.scrollToIndex(index, behavior);\n      }\n      /**\n       * Gets the current scroll offset from the start of the viewport (in pixels).\n       * @param {?=} from The edge to measure the offset from. Defaults to 'top' in vertical mode and 'start'\n       *     in horizontal mode.\n       * @return {?}\n       */\n\n    }, {\n      key: \"measureScrollOffset\",\n      value: function measureScrollOffset(from) {\n        return _get(_getPrototypeOf(CdkVirtualScrollViewport.prototype), \"measureScrollOffset\", this).call(this, from ? from : this.orientation === 'horizontal' ? 'start' : 'top');\n      }\n      /**\n       * Measure the combined size of all of the rendered items.\n       * @return {?}\n       */\n\n    }, {\n      key: \"measureRenderedContentSize\",\n      value: function measureRenderedContentSize() {\n        /** @type {?} */\n        var contentEl = this._contentWrapper.nativeElement;\n        return this.orientation === 'horizontal' ? contentEl.offsetWidth : contentEl.offsetHeight;\n      }\n      /**\n       * Measure the total combined size of the given range. Throws if the range includes items that are\n       * not rendered.\n       * @param {?} range\n       * @return {?}\n       */\n\n    }, {\n      key: \"measureRangeSize\",\n      value: function measureRangeSize(range) {\n        if (!this._forOf) {\n          return 0;\n        }\n\n        return this._forOf.measureRangeSize(range, this.orientation);\n      }\n      /**\n       * Update the viewport dimensions and re-render.\n       * @return {?}\n       */\n\n    }, {\n      key: \"checkViewportSize\",\n      value: function checkViewportSize() {\n        // TODO: Cleanup later when add logic for handling content resize\n        this._measureViewportSize();\n\n        this._scrollStrategy.onDataLengthChanged();\n      }\n      /**\n       * Measure the viewport size.\n       * @return {?}\n       */\n\n    }, {\n      key: \"_measureViewportSize\",\n      value: function _measureViewportSize() {\n        /** @type {?} */\n        var viewportEl = this.elementRef.nativeElement;\n        this._viewportSize = this.orientation === 'horizontal' ? viewportEl.clientWidth : viewportEl.clientHeight;\n      }\n      /**\n       * Queue up change detection to run.\n       * @param {?=} runAfter\n       * @return {?}\n       */\n\n    }, {\n      key: \"_markChangeDetectionNeeded\",\n      value: function _markChangeDetectionNeeded(runAfter) {\n        var _this12 = this;\n\n        if (runAfter) {\n          this._runAfterChangeDetection.push(runAfter);\n        } // Use a Promise to batch together calls to `_doChangeDetection`. This way if we set a bunch of\n        // properties sequentially we only have to run `_doChangeDetection` once at the end.\n\n\n        if (!this._isChangeDetectionPending) {\n          this._isChangeDetectionPending = true;\n          this.ngZone.runOutsideAngular(function () {\n            return Promise.resolve().then(function () {\n              _this12._doChangeDetection();\n            });\n          });\n        }\n      }\n      /**\n       * Run change detection.\n       * @return {?}\n       */\n\n    }, {\n      key: \"_doChangeDetection\",\n      value: function _doChangeDetection() {\n        var _this13 = this;\n\n        this._isChangeDetectionPending = false; // Apply changes to Angular bindings. Note: We must call `markForCheck` to run change detection\n        // from the root, since the repeated items are content projected in. Calling `detectChanges`\n        // instead does not properly check the projected content.\n\n        this.ngZone.run(function () {\n          return _this13._changeDetectorRef.markForCheck();\n        }); // Apply the content transform. The transform can't be set via an Angular binding because\n        // bypassSecurityTrustStyle is banned in Google. However the value is safe, it's composed of\n        // string literals, a variable that can only be 'X' or 'Y', and user input that is run through\n        // the `Number` function first to coerce it to a numeric value.\n\n        this._contentWrapper.nativeElement.style.transform = this._renderedContentTransform;\n        /** @type {?} */\n\n        var runAfterChangeDetection = this._runAfterChangeDetection;\n        this._runAfterChangeDetection = [];\n\n        var _iterator = _createForOfIteratorHelper(runAfterChangeDetection),\n            _step;\n\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var fn = _step.value;\n            fn();\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n      }\n    }]);\n\n    return CdkVirtualScrollViewport;\n  }(CdkScrollable);\n\n  CdkVirtualScrollViewport.ɵfac = function CdkVirtualScrollViewport_Factory(t) {\n    return new (t || CdkVirtualScrollViewport)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(VIRTUAL_SCROLL_STRATEGY, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.Directionality, 8), ɵngcc0.ɵɵdirectiveInject(ScrollDispatcher));\n  };\n\n  CdkVirtualScrollViewport.ɵcmp =\n  /*@__PURE__*/\n\n  /*@__PURE__*/\n  ɵngcc0.ɵɵdefineComponent({\n    type: CdkVirtualScrollViewport,\n    selectors: [[\"cdk-virtual-scroll-viewport\"]],\n    viewQuery: function CdkVirtualScrollViewport_Query(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(_c0, 5);\n      }\n\n      if (rf & 2) {\n        var _t;\n\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._contentWrapper = _t.first);\n      }\n    },\n    hostAttrs: [1, \"cdk-virtual-scroll-viewport\"],\n    hostVars: 4,\n    hostBindings: function CdkVirtualScrollViewport_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"cdk-virtual-scroll-orientation-horizontal\", ctx.orientation === \"horizontal\")(\"cdk-virtual-scroll-orientation-vertical\", ctx.orientation === \"vertical\");\n      }\n    },\n    inputs: {\n      orientation: \"orientation\"\n    },\n    outputs: {\n      scrolledIndexChange: \"scrolledIndexChange\"\n    },\n    features: [ɵngcc0.ɵɵInheritDefinitionFeature],\n    ngContentSelectors: _c1,\n    decls: 4,\n    vars: 2,\n    consts: [[1, \"cdk-virtual-scroll-content-wrapper\"], [\"contentWrapper\", \"\"], [1, \"cdk-virtual-scroll-spacer\"]],\n    template: function CdkVirtualScrollViewport_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵelementStart(0, \"div\", 0, 1);\n        ɵngcc0.ɵɵprojection(2);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelement(3, \"div\", 2);\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵadvance(3);\n        ɵngcc0.ɵɵstyleProp(\"transform\", ctx._totalContentSizeTransform);\n      }\n    },\n    styles: [\"cdk-virtual-scroll-viewport{display:block;position:relative;overflow:auto;contain:strict;transform:translateZ(0);will-change:scroll-position;-webkit-overflow-scrolling:touch}.cdk-virtual-scroll-content-wrapper{position:absolute;top:0;left:0;contain:content}[dir=rtl] .cdk-virtual-scroll-content-wrapper{right:0;left:auto}.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper{min-height:100%}.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>dl:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>ol:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>table:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>ul:not([cdkVirtualFor]){padding-left:0;padding-right:0;margin-left:0;margin-right:0;border-left-width:0;border-right-width:0;outline:0}.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper{min-width:100%}.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>dl:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>ol:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>table:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>ul:not([cdkVirtualFor]){padding-top:0;padding-bottom:0;margin-top:0;margin-bottom:0;border-top-width:0;border-bottom-width:0;outline:0}.cdk-virtual-scroll-spacer{position:absolute;top:0;left:0;height:1px;width:1px;transform-origin:0 0}[dir=rtl] .cdk-virtual-scroll-spacer{right:0;left:auto;transform-origin:100% 0}\"],\n    encapsulation: 2,\n    changeDetection: 0\n  });\n  return CdkVirtualScrollViewport;\n}();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * Helper to extract size from a DOM Node.\n * @param {?} orientation\n * @param {?} node\n * @return {?}\n */\n\n\nfunction getSize(orientation, node) {\n  /** @type {?} */\n  var el =\n  /** @type {?} */\n  node;\n\n  if (!el.getBoundingClientRect) {\n    return 0;\n  }\n  /** @type {?} */\n\n\n  var rect = el.getBoundingClientRect();\n  return orientation == 'horizontal' ? rect.width : rect.height;\n}\n\nvar CdkVirtualForOf = /*@__PURE__*/function () {\n  var CdkVirtualForOf = /*#__PURE__*/function () {\n    /**\n     * @param {?} _viewContainerRef\n     * @param {?} _template\n     * @param {?} _differs\n     * @param {?} _viewport\n     * @param {?} ngZone\n     */\n    function CdkVirtualForOf(_viewContainerRef, _template, _differs,\n    /** The virtual scrolling viewport that these items are being rendered in. */\n    _viewport, ngZone) {\n      var _this14 = this;\n\n      _classCallCheck(this, CdkVirtualForOf);\n\n      this._viewContainerRef = _viewContainerRef;\n      this._template = _template;\n      this._differs = _differs;\n      this._viewport = _viewport;\n      /**\n       * Emits when the rendered view of the data changes.\n       */\n\n      this.viewChange = new Subject();\n      /**\n       * Subject that emits when a new DataSource instance is given.\n       */\n\n      this._dataSourceChanges = new Subject();\n      /**\n       * The size of the cache used to store templates that are not being used for re-use later.\n       * Setting the cache size to `0` will disable caching. Defaults to 20 templates.\n       */\n\n      this.cdkVirtualForTemplateCacheSize = 20;\n      /**\n       * Emits whenever the data in the current DataSource changes.\n       */\n\n      this.dataStream = this._dataSourceChanges.pipe( // Start off with null `DataSource`.\n      startWith(\n      /** @type {?} */\n      null), // Bundle up the previous and current data sources so we can work with both.\n      pairwise(), // Use `_changeDataSource` to disconnect from the previous data source and connect to the\n      // new one, passing back a stream of data changes which we run through `switchMap` to give\n      // us a data stream that emits the latest data from whatever the current `DataSource` is.\n      switchMap(function (_ref) {\n        var _ref2 = _slicedToArray(_ref, 2),\n            prev = _ref2[0],\n            cur = _ref2[1];\n\n        return _this14._changeDataSource(prev, cur);\n      }), // Replay the last emitted data when someone subscribes.\n      shareReplay(1));\n      /**\n       * The differ used to calculate changes to the data.\n       */\n\n      this._differ = null;\n      /**\n       * The template cache used to hold on ot template instancess that have been stamped out, but don't\n       * currently need to be rendered. These instances will be reused in the future rather than\n       * stamping out brand new ones.\n       */\n\n      this._templateCache = [];\n      /**\n       * Whether the rendered data should be updated during the next ngDoCheck cycle.\n       */\n\n      this._needsUpdate = false;\n      this._destroyed = new Subject();\n      this.dataStream.subscribe(function (data) {\n        _this14._data = data;\n\n        _this14._onRenderedDataChange();\n      });\n\n      this._viewport.renderedRangeStream.pipe(takeUntil(this._destroyed)).subscribe(function (range) {\n        _this14._renderedRange = range;\n        ngZone.run(function () {\n          return _this14.viewChange.next(_this14._renderedRange);\n        });\n\n        _this14._onRenderedDataChange();\n      });\n\n      this._viewport.attach(this);\n    }\n    /**\n     * The DataSource to display.\n     * @return {?}\n     */\n\n\n    _createClass(CdkVirtualForOf, [{\n      key: \"cdkVirtualForOf\",\n      get: function get() {\n        return this._cdkVirtualForOf;\n      }\n      /**\n       * @param {?} value\n       * @return {?}\n       */\n      ,\n      set: function set(value) {\n        this._cdkVirtualForOf = value;\n        /** @type {?} */\n\n        var ds = value instanceof DataSource ? value : // Slice the value if its an NgIterable to ensure we're working with an array.\n        new ArrayDataSource(value instanceof Observable ? value : Array.prototype.slice.call(value || []));\n\n        this._dataSourceChanges.next(ds);\n      }\n      /**\n       * The `TrackByFunction` to use for tracking changes. The `TrackByFunction` takes the index and\n       * the item and produces a value to be used as the item's identity when tracking changes.\n       * @return {?}\n       */\n\n    }, {\n      key: \"cdkVirtualForTrackBy\",\n      get: function get() {\n        return this._cdkVirtualForTrackBy;\n      }\n      /**\n       * @param {?} fn\n       * @return {?}\n       */\n      ,\n      set: function set(fn) {\n        var _this15 = this;\n\n        this._needsUpdate = true;\n        this._cdkVirtualForTrackBy = fn ? function (index, item) {\n          return fn(index + (_this15._renderedRange ? _this15._renderedRange.start : 0), item);\n        } : undefined;\n      }\n      /**\n       * The template used to stamp out new elements.\n       * @param {?} value\n       * @return {?}\n       */\n\n    }, {\n      key: \"cdkVirtualForTemplate\",\n      set: function set(value) {\n        if (value) {\n          this._needsUpdate = true;\n          this._template = value;\n        }\n      }\n      /**\n       * Measures the combined size (width for horizontal orientation, height for vertical) of all items\n       * in the specified range. Throws an error if the range includes items that are not currently\n       * rendered.\n       * @param {?} range\n       * @param {?} orientation\n       * @return {?}\n       */\n\n    }, {\n      key: \"measureRangeSize\",\n      value: function measureRangeSize(range, orientation) {\n        if (range.start >= range.end) {\n          return 0;\n        }\n\n        if (range.start < this._renderedRange.start || range.end > this._renderedRange.end) {\n          throw Error(\"Error: attempted to measure an item that isn't rendered.\");\n        }\n        /** @type {?} */\n\n\n        var renderedStartIndex = range.start - this._renderedRange.start;\n        /** @type {?} */\n\n        var rangeLen = range.end - range.start;\n        /** @type {?} */\n\n        var totalSize = 0;\n        /** @type {?} */\n\n        var i = rangeLen;\n\n        while (i--) {\n          /** @type {?} */\n          var view =\n          /** @type {?} */\n          this._viewContainerRef.get(i + renderedStartIndex);\n          /** @type {?} */\n\n\n          var j = view ? view.rootNodes.length : 0;\n\n          while (j--) {\n            totalSize += getSize(orientation,\n            /** @type {?} */\n            view.rootNodes[j]);\n          }\n        }\n\n        return totalSize;\n      }\n      /**\n       * @return {?}\n       */\n\n    }, {\n      key: \"ngDoCheck\",\n      value: function ngDoCheck() {\n        if (this._differ && this._needsUpdate) {\n          /** @type {?} */\n          var changes = this._differ.diff(this._renderedItems);\n\n          if (!changes) {\n            this._updateContext();\n          } else {\n            this._applyChanges(changes);\n          }\n\n          this._needsUpdate = false;\n        }\n      }\n      /**\n       * @return {?}\n       */\n\n    }, {\n      key: \"ngOnDestroy\",\n      value: function ngOnDestroy() {\n        this._viewport.detach();\n\n        this._dataSourceChanges.complete();\n\n        this.viewChange.complete();\n\n        this._destroyed.next();\n\n        this._destroyed.complete();\n\n        var _iterator2 = _createForOfIteratorHelper(this._templateCache),\n            _step2;\n\n        try {\n          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n            var view = _step2.value;\n            view.destroy();\n          }\n        } catch (err) {\n          _iterator2.e(err);\n        } finally {\n          _iterator2.f();\n        }\n      }\n      /**\n       * React to scroll state changes in the viewport.\n       * @return {?}\n       */\n\n    }, {\n      key: \"_onRenderedDataChange\",\n      value: function _onRenderedDataChange() {\n        if (!this._renderedRange) {\n          return;\n        }\n\n        this._renderedItems = this._data.slice(this._renderedRange.start, this._renderedRange.end);\n\n        if (!this._differ) {\n          this._differ = this._differs.find(this._renderedItems).create(this.cdkVirtualForTrackBy);\n        }\n\n        this._needsUpdate = true;\n      }\n      /**\n       * Swap out one `DataSource` for another.\n       * @param {?} oldDs\n       * @param {?} newDs\n       * @return {?}\n       */\n\n    }, {\n      key: \"_changeDataSource\",\n      value: function _changeDataSource(oldDs, newDs) {\n        if (oldDs) {\n          oldDs.disconnect(this);\n        }\n\n        this._needsUpdate = true;\n        return newDs.connect(this);\n      }\n      /**\n       * Update the `CdkVirtualForOfContext` for all views.\n       * @return {?}\n       */\n\n    }, {\n      key: \"_updateContext\",\n      value: function _updateContext() {\n        /** @type {?} */\n        var count = this._data.length;\n        /** @type {?} */\n\n        var i = this._viewContainerRef.length;\n\n        while (i--) {\n          /** @type {?} */\n          var view =\n          /** @type {?} */\n          this._viewContainerRef.get(i);\n\n          view.context.index = this._renderedRange.start + i;\n          view.context.count = count;\n\n          this._updateComputedContextProperties(view.context);\n\n          view.detectChanges();\n        }\n      }\n      /**\n       * Apply changes to the DOM.\n       * @param {?} changes\n       * @return {?}\n       */\n\n    }, {\n      key: \"_applyChanges\",\n      value: function _applyChanges(changes) {\n        var _this16 = this;\n\n        // Rearrange the views to put them in the right location.\n        changes.forEachOperation(function (record, adjustedPreviousIndex, currentIndex) {\n          if (record.previousIndex == null) {\n            // Item added.\n\n            /** @type {?} */\n            var view = _this16._getViewForNewItem();\n\n            _this16._viewContainerRef.insert(view,\n            /** @type {?} */\n            currentIndex);\n\n            view.context.$implicit = record.item;\n          } else if (currentIndex == null) {\n            // Item removed.\n            // Item removed.\n            _this16._cacheView(\n            /** @type {?} */\n            _this16._viewContainerRef.detach(\n            /** @type {?} */\n            adjustedPreviousIndex));\n          } else {\n            // Item moved.\n\n            /** @type {?} */\n            var _view =\n            /** @type {?} */\n            _this16._viewContainerRef.get(\n            /** @type {?} */\n            adjustedPreviousIndex);\n\n            _this16._viewContainerRef.move(_view, currentIndex);\n\n            _view.context.$implicit = record.item;\n          }\n        }); // Update $implicit for any items that had an identity change.\n\n        changes.forEachIdentityChange(function (record) {\n          /** @type {?} */\n          var view =\n          /** @type {?} */\n          _this16._viewContainerRef.get(\n          /** @type {?} */\n          record.currentIndex);\n\n          view.context.$implicit = record.item;\n        });\n        /** @type {?} */\n\n        var count = this._data.length;\n        /** @type {?} */\n\n        var i = this._viewContainerRef.length;\n\n        while (i--) {\n          /** @type {?} */\n          var view =\n          /** @type {?} */\n          this._viewContainerRef.get(i);\n\n          view.context.index = this._renderedRange.start + i;\n          view.context.count = count;\n\n          this._updateComputedContextProperties(view.context);\n        }\n      }\n      /**\n       * Cache the given detached view.\n       * @param {?} view\n       * @return {?}\n       */\n\n    }, {\n      key: \"_cacheView\",\n      value: function _cacheView(view) {\n        if (this._templateCache.length < this.cdkVirtualForTemplateCacheSize) {\n          this._templateCache.push(view);\n        } else {\n          view.destroy();\n        }\n      }\n      /**\n       * Get a view for a new item, either from the cache or by creating a new one.\n       * @return {?}\n       */\n\n    }, {\n      key: \"_getViewForNewItem\",\n      value: function _getViewForNewItem() {\n        return this._templateCache.pop() || this._viewContainerRef.createEmbeddedView(this._template, {\n          $implicit:\n          /** @type {?} */\n          null,\n          cdkVirtualForOf: this._cdkVirtualForOf,\n          index: -1,\n          count: -1,\n          first: false,\n          last: false,\n          odd: false,\n          even: false\n        });\n      }\n      /**\n       * Update the computed properties on the `CdkVirtualForOfContext`.\n       * @param {?} context\n       * @return {?}\n       */\n\n    }, {\n      key: \"_updateComputedContextProperties\",\n      value: function _updateComputedContextProperties(context) {\n        context.first = context.index === 0;\n        context.last = context.index === context.count - 1;\n        context.even = context.index % 2 === 0;\n        context.odd = !context.even;\n      }\n    }]);\n\n    return CdkVirtualForOf;\n  }();\n\n  CdkVirtualForOf.ɵfac = function CdkVirtualForOf_Factory(t) {\n    return new (t || CdkVirtualForOf)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.IterableDiffers), ɵngcc0.ɵɵdirectiveInject(CdkVirtualScrollViewport, 4), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone));\n  };\n\n  CdkVirtualForOf.ɵdir =\n  /*@__PURE__*/\n\n  /*@__PURE__*/\n  ɵngcc0.ɵɵdefineDirective({\n    type: CdkVirtualForOf,\n    selectors: [[\"\", \"cdkVirtualFor\", \"\", \"cdkVirtualForOf\", \"\"]],\n    inputs: {\n      cdkVirtualForTemplateCacheSize: \"cdkVirtualForTemplateCacheSize\",\n      cdkVirtualForOf: \"cdkVirtualForOf\",\n      cdkVirtualForTrackBy: \"cdkVirtualForTrackBy\",\n      cdkVirtualForTemplate: \"cdkVirtualForTemplate\"\n    }\n  });\n  return CdkVirtualForOf;\n}();\n\nvar ScrollingModule = /*@__PURE__*/function () {\n  var ScrollingModule = function ScrollingModule() {\n    _classCallCheck(this, ScrollingModule);\n  };\n\n  ScrollingModule.ɵfac = function ScrollingModule_Factory(t) {\n    return new (t || ScrollingModule)();\n  };\n\n  ScrollingModule.ɵmod =\n  /*@__PURE__*/\n\n  /*@__PURE__*/\n  ɵngcc0.ɵɵdefineNgModule({\n    type: ScrollingModule\n  });\n  ScrollingModule.ɵinj =\n  /*@__PURE__*/\n\n  /*@__PURE__*/\n  ɵngcc0.ɵɵdefineInjector({\n    imports: [[BidiModule, PlatformModule], BidiModule]\n  });\n  return ScrollingModule;\n}();\n/*@__PURE__*/\n\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(ScrollingModule, {\n    declarations: function declarations() {\n      return [CdkFixedSizeVirtualScroll, CdkScrollable, CdkVirtualForOf, CdkVirtualScrollViewport];\n    },\n    imports: function imports() {\n      return [BidiModule, PlatformModule];\n    },\n    exports: function exports() {\n      return [BidiModule, CdkFixedSizeVirtualScroll, CdkScrollable, CdkVirtualForOf, CdkVirtualScrollViewport];\n    }\n  });\n})();\n\nvar ScrollDispatchModule = /*@__PURE__*/function () {\n  var ScrollDispatchModule = function ScrollDispatchModule() {\n    _classCallCheck(this, ScrollDispatchModule);\n  };\n\n  ScrollDispatchModule.ɵfac = function ScrollDispatchModule_Factory(t) {\n    return new (t || ScrollDispatchModule)();\n  };\n\n  ScrollDispatchModule.ɵmod =\n  /*@__PURE__*/\n\n  /*@__PURE__*/\n  ɵngcc0.ɵɵdefineNgModule({\n    type: ScrollDispatchModule\n  });\n  ScrollDispatchModule.ɵinj =\n  /*@__PURE__*/\n\n  /*@__PURE__*/\n  ɵngcc0.ɵɵdefineInjector({\n    imports: [[ScrollingModule], ScrollingModule]\n  });\n  return ScrollDispatchModule;\n}();\n/*@__PURE__*/\n\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(ScrollDispatchModule, {\n    imports: [ScrollingModule],\n    exports: [ScrollingModule]\n  });\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/** *\n * Time in ms to throttle the resize events by default.\n  @type {?} */\n\n\nvar DEFAULT_RESIZE_TIME = 20;\n\nvar ViewportRuler = /*@__PURE__*/function () {\n  var ViewportRuler = /*#__PURE__*/function () {\n    /**\n     * @param {?} _platform\n     * @param {?} ngZone\n     */\n    function ViewportRuler(_platform, ngZone) {\n      var _this17 = this;\n\n      _classCallCheck(this, ViewportRuler);\n\n      this._platform = _platform;\n      ngZone.runOutsideAngular(function () {\n        _this17._change = _platform.isBrowser ? merge(fromEvent(window, 'resize'), fromEvent(window, 'orientationchange')) : of(); // Note that we need to do the subscription inside `runOutsideAngular`\n        // since subscribing is what causes the event listener to be added.\n\n        _this17._invalidateCache = _this17.change().subscribe(function () {\n          return _this17._updateViewportSize();\n        });\n      });\n    }\n    /**\n     * @return {?}\n     */\n\n\n    _createClass(ViewportRuler, [{\n      key: \"ngOnDestroy\",\n      value: function ngOnDestroy() {\n        this._invalidateCache.unsubscribe();\n      }\n      /**\n       * Returns the viewport's width and height.\n       * @return {?}\n       */\n\n    }, {\n      key: \"getViewportSize\",\n      value: function getViewportSize() {\n        if (!this._viewportSize) {\n          this._updateViewportSize();\n        }\n        /** @type {?} */\n\n\n        var output = {\n          width: this._viewportSize.width,\n          height: this._viewportSize.height\n        }; // If we're not on a browser, don't cache the size since it'll be mocked out anyway.\n\n        if (!this._platform.isBrowser) {\n          this._viewportSize =\n          /** @type {?} */\n          null;\n        }\n\n        return output;\n      }\n      /**\n       * Gets a ClientRect for the viewport's bounds.\n       * @return {?}\n       */\n\n    }, {\n      key: \"getViewportRect\",\n      value: function getViewportRect() {\n        /** @type {?} */\n        var scrollPosition = this.getViewportScrollPosition();\n\n        var _this$getViewportSize = this.getViewportSize(),\n            width = _this$getViewportSize.width,\n            height = _this$getViewportSize.height;\n\n        return {\n          top: scrollPosition.top,\n          left: scrollPosition.left,\n          bottom: scrollPosition.top + height,\n          right: scrollPosition.left + width,\n          height: height,\n          width: width\n        };\n      }\n      /**\n       * Gets the (top, left) scroll position of the viewport.\n       * @return {?}\n       */\n\n    }, {\n      key: \"getViewportScrollPosition\",\n      value: function getViewportScrollPosition() {\n        // While we can get a reference to the fake document\n        // during SSR, it doesn't have getBoundingClientRect.\n        if (!this._platform.isBrowser) {\n          return {\n            top: 0,\n            left: 0\n          };\n        }\n        /** @type {?} */\n\n\n        var documentElement =\n        /** @type {?} */\n        document.documentElement;\n        /** @type {?} */\n\n        var documentRect = documentElement.getBoundingClientRect();\n        /** @type {?} */\n\n        var top = -documentRect.top || document.body.scrollTop || window.scrollY || documentElement.scrollTop || 0;\n        /** @type {?} */\n\n        var left = -documentRect.left || document.body.scrollLeft || window.scrollX || documentElement.scrollLeft || 0;\n        return {\n          top: top,\n          left: left\n        };\n      }\n      /**\n       * Returns a stream that emits whenever the size of the viewport changes.\n       * @param {?=} throttleTime Time in milliseconds to throttle the stream.\n       * @return {?}\n       */\n\n    }, {\n      key: \"change\",\n      value: function change() {\n        var throttleTime = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : DEFAULT_RESIZE_TIME;\n        return throttleTime > 0 ? this._change.pipe(auditTime(throttleTime)) : this._change;\n      }\n      /**\n       * Updates the cached viewport size.\n       * @return {?}\n       */\n\n    }, {\n      key: \"_updateViewportSize\",\n      value: function _updateViewportSize() {\n        this._viewportSize = this._platform.isBrowser ? {\n          width: window.innerWidth,\n          height: window.innerHeight\n        } : {\n          width: 0,\n          height: 0\n        };\n      }\n    }]);\n\n    return ViewportRuler;\n  }();\n\n  ViewportRuler.ɵfac = function ViewportRuler_Factory(t) {\n    return new (t || ViewportRuler)(ɵngcc0.ɵɵinject(ɵngcc1.Platform), ɵngcc0.ɵɵinject(ɵngcc0.NgZone));\n  };\n\n  ViewportRuler.ɵprov =\n  /*@__PURE__*/\n\n  /*@__PURE__*/\n  ɵngcc0.ɵɵdefineInjectable({\n    token: ViewportRuler,\n    factory: ViewportRuler.ɵfac,\n    providedIn: 'root'\n  });\n  /** @nocollapse */\n\n  ViewportRuler.ngInjectableDef = /*@__PURE__*/defineInjectable({\n    factory: function ViewportRuler_Factory() {\n      return new ViewportRuler(inject(Platform), inject(NgZone));\n    },\n    token: ViewportRuler,\n    providedIn: \"root\"\n  });\n  return ViewportRuler;\n}();\n/**\n * \\@docs-private \\@deprecated \\@breaking-change 8.0.0\n * @param {?} parentRuler\n * @param {?} platform\n * @param {?} ngZone\n * @return {?}\n */\n\n\nfunction VIEWPORT_RULER_PROVIDER_FACTORY(parentRuler, platform, ngZone) {\n  return parentRuler || new ViewportRuler(platform, ngZone);\n}\n/** *\n * \\@docs-private \\@deprecated \\@breaking-change 8.0.0\n  @type {?} */\n\n\nvar VIEWPORT_RULER_PROVIDER = {\n  // If there is already a ViewportRuler available, use that. Otherwise, provide a new one.\n  provide: ViewportRuler,\n  deps: [[/*@__PURE__*/new Optional(), /*@__PURE__*/new SkipSelf(), ViewportRuler], Platform, NgZone],\n  useFactory: VIEWPORT_RULER_PROVIDER_FACTORY\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\nexport { _fixedSizeVirtualScrollStrategyFactory, FixedSizeVirtualScrollStrategy, CdkFixedSizeVirtualScroll, SCROLL_DISPATCHER_PROVIDER_FACTORY, DEFAULT_SCROLL_TIME, ScrollDispatcher, SCROLL_DISPATCHER_PROVIDER, CdkScrollable, ScrollingModule, ScrollDispatchModule, VIEWPORT_RULER_PROVIDER_FACTORY, DEFAULT_RESIZE_TIME, ViewportRuler, VIEWPORT_RULER_PROVIDER, CdkVirtualForOf, VIRTUAL_SCROLL_STRATEGY, CdkVirtualScrollViewport }; //# sourceMappingURL=scrolling.js.map","map":null,"metadata":{},"sourceType":"module"}