{"ast":null,"code":"import _createClass from \"/Users/adepertat/Dropbox/ECOLES/Openclassroom/P6_de_Pertat_Antoine/AntoinedePertat_6_240521/frontend/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/Users/adepertat/Dropbox/ECOLES/Openclassroom/P6_de_Pertat_Antoine/AntoinedePertat_6_240521/frontend/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/adepertat/Dropbox/ECOLES/Openclassroom/P6_de_Pertat_Antoine/AntoinedePertat_6_240521/frontend/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _classCallCheck from \"/Users/adepertat/Dropbox/ECOLES/Openclassroom/P6_de_Pertat_Antoine/AntoinedePertat_6_240521/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Injectable, Optional, SkipSelf, NgModule, ChangeDetectionStrategy, ChangeDetectorRef, Component, EventEmitter, Input, Output, ViewEncapsulation, defineInjectable } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { coerceNumberProperty, coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { mixinInitialized } from '@angular/material/core';\nimport { CommonModule } from '@angular/common';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatTooltipModule } from '@angular/material/tooltip';\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * To modify the labels and text displayed, create a new instance of MatPaginatorIntl and\n * include it in a custom provider\n */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/common';\nimport * as ɵngcc2 from '@angular/material/button';\nimport * as ɵngcc3 from '@angular/material/tooltip';\nimport * as ɵngcc4 from '@angular/material/form-field';\nimport * as ɵngcc5 from '@angular/material/select';\nimport * as ɵngcc6 from '@angular/material/core';\n\nfunction MatPaginator_div_2_mat_form_field_3_mat_option_2_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"mat-option\", 19);\n    ɵngcc0.ɵɵtext(1);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var pageSizeOption_r6 = ctx.$implicit;\n    ɵngcc0.ɵɵproperty(\"value\", pageSizeOption_r6);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate(pageSizeOption_r6);\n  }\n}\n\nfunction MatPaginator_div_2_mat_form_field_3_Template(rf, ctx) {\n  if (rf & 1) {\n    var _r8 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵelementStart(0, \"mat-form-field\", 16);\n    ɵngcc0.ɵɵelementStart(1, \"mat-select\", 17);\n    ɵngcc0.ɵɵlistener(\"selectionChange\", function MatPaginator_div_2_mat_form_field_3_Template_mat_select_selectionChange_1_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r8);\n      var ctx_r7 = ɵngcc0.ɵɵnextContext(2);\n      return ctx_r7._changePageSize($event.value);\n    });\n    ɵngcc0.ɵɵtemplate(2, MatPaginator_div_2_mat_form_field_3_mat_option_2_Template, 2, 2, \"mat-option\", 18);\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r3 = ɵngcc0.ɵɵnextContext(2);\n    ɵngcc0.ɵɵproperty(\"color\", ctx_r3.color);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"value\", ctx_r3.pageSize)(\"aria-label\", ctx_r3._intl.itemsPerPageLabel);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngForOf\", ctx_r3._displayedPageSizeOptions);\n  }\n}\n\nfunction MatPaginator_div_2_div_4_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"div\");\n    ɵngcc0.ɵɵtext(1);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r4 = ɵngcc0.ɵɵnextContext(2);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate(ctx_r4.pageSize);\n  }\n}\n\nfunction MatPaginator_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"div\", 12);\n    ɵngcc0.ɵɵelementStart(1, \"div\", 13);\n    ɵngcc0.ɵɵtext(2);\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵtemplate(3, MatPaginator_div_2_mat_form_field_3_Template, 3, 4, \"mat-form-field\", 14);\n    ɵngcc0.ɵɵtemplate(4, MatPaginator_div_2_div_4_Template, 2, 1, \"div\", 15);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(2);\n    ɵngcc0.ɵɵtextInterpolate(ctx_r0._intl.itemsPerPageLabel);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngIf\", ctx_r0._displayedPageSizeOptions.length > 1);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngIf\", ctx_r0._displayedPageSizeOptions.length <= 1);\n  }\n}\n\nfunction MatPaginator_button_6_Template(rf, ctx) {\n  if (rf & 1) {\n    var _r10 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵelementStart(0, \"button\", 20);\n    ɵngcc0.ɵɵlistener(\"click\", function MatPaginator_button_6_Template_button_click_0_listener() {\n      ɵngcc0.ɵɵrestoreView(_r10);\n      var ctx_r9 = ɵngcc0.ɵɵnextContext();\n      return ctx_r9.firstPage();\n    });\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelementStart(1, \"svg\", 7);\n    ɵngcc0.ɵɵelement(2, \"path\", 21);\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r1 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"matTooltip\", ctx_r1._intl.firstPageLabel)(\"matTooltipDisabled\", !ctx_r1.hasPreviousPage())(\"matTooltipPosition\", \"above\")(\"disabled\", !ctx_r1.hasPreviousPage());\n    ɵngcc0.ɵɵattribute(\"aria-label\", ctx_r1._intl.firstPageLabel);\n  }\n}\n\nfunction MatPaginator_button_13_Template(rf, ctx) {\n  if (rf & 1) {\n    var _r12 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵnamespaceHTML();\n    ɵngcc0.ɵɵelementStart(0, \"button\", 22);\n    ɵngcc0.ɵɵlistener(\"click\", function MatPaginator_button_13_Template_button_click_0_listener() {\n      ɵngcc0.ɵɵrestoreView(_r12);\n      var ctx_r11 = ɵngcc0.ɵɵnextContext();\n      return ctx_r11.lastPage();\n    });\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelementStart(1, \"svg\", 7);\n    ɵngcc0.ɵɵelement(2, \"path\", 23);\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r2 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"matTooltip\", ctx_r2._intl.lastPageLabel)(\"matTooltipDisabled\", !ctx_r2.hasNextPage())(\"matTooltipPosition\", \"above\")(\"disabled\", !ctx_r2.hasNextPage());\n    ɵngcc0.ɵɵattribute(\"aria-label\", ctx_r2._intl.lastPageLabel);\n  }\n}\n\nvar MatPaginatorIntl = /*@__PURE__*/function () {\n  var MatPaginatorIntl = function MatPaginatorIntl() {\n    _classCallCheck(this, MatPaginatorIntl);\n\n    /**\n     * Stream to emit from when labels are changed. Use this to notify components when the labels have\n     * changed after initialization.\n     */\n    this.changes = new Subject();\n    /**\n     * A label for the page size selector.\n     */\n\n    this.itemsPerPageLabel = 'Items per page:';\n    /**\n     * A label for the button that increments the current page.\n     */\n\n    this.nextPageLabel = 'Next page';\n    /**\n     * A label for the button that decrements the current page.\n     */\n\n    this.previousPageLabel = 'Previous page';\n    /**\n     * A label for the button that moves to the first page.\n     */\n\n    this.firstPageLabel = 'First page';\n    /**\n     * A label for the button that moves to the last page.\n     */\n\n    this.lastPageLabel = 'Last page';\n    /**\n     * A label for the range of items within the current page and the length of the whole list.\n     */\n\n    this.getRangeLabel = function (page, pageSize, length) {\n      if (length == 0 || pageSize == 0) {\n        return \"0 of \".concat(length);\n      }\n\n      length = Math.max(length, 0);\n      /** @type {?} */\n\n      var startIndex = page * pageSize;\n      /** @type {?} */\n\n      var endIndex = startIndex < length ? Math.min(startIndex + pageSize, length) : startIndex + pageSize;\n      return \"\".concat(startIndex + 1, \" - \").concat(endIndex, \" of \").concat(length);\n    };\n  };\n\n  MatPaginatorIntl.ɵfac = function MatPaginatorIntl_Factory(t) {\n    return new (t || MatPaginatorIntl)();\n  };\n\n  MatPaginatorIntl.ɵprov =\n  /*@__PURE__*/\n\n  /*@__PURE__*/\n  ɵngcc0.ɵɵdefineInjectable({\n    token: MatPaginatorIntl,\n    factory: MatPaginatorIntl.ɵfac,\n    providedIn: 'root'\n  });\n  /** @nocollapse */\n\n  MatPaginatorIntl.ngInjectableDef = /*@__PURE__*/defineInjectable({\n    factory: function MatPaginatorIntl_Factory() {\n      return new MatPaginatorIntl();\n    },\n    token: MatPaginatorIntl,\n    providedIn: \"root\"\n  });\n  return MatPaginatorIntl;\n}();\n/**\n * \\@docs-private\n * @param {?} parentIntl\n * @return {?}\n */\n\n\nfunction MAT_PAGINATOR_INTL_PROVIDER_FACTORY(parentIntl) {\n  return parentIntl || new MatPaginatorIntl();\n}\n/** *\n * \\@docs-private\n  @type {?} */\n\n\nvar MAT_PAGINATOR_INTL_PROVIDER = {\n  // If there is already an MatPaginatorIntl available, use that. Otherwise, provide a new one.\n  provide: MatPaginatorIntl,\n  deps: [[/*@__PURE__*/new Optional(), /*@__PURE__*/new SkipSelf(), MatPaginatorIntl]],\n  useFactory: MAT_PAGINATOR_INTL_PROVIDER_FACTORY\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/** *\n * The default page size if there is no page size and there are no provided page size options.\n  @type {?} */\n\nvar DEFAULT_PAGE_SIZE = 50;\n/**\n * Change event object that is emitted when the user selects a\n * different page size or navigates to another page.\n */\n\nvar PageEvent = function PageEvent() {\n  _classCallCheck(this, PageEvent);\n};\n/**\n * \\@docs-private\n */\n\n\nvar MatPaginatorBase = function MatPaginatorBase() {\n  _classCallCheck(this, MatPaginatorBase);\n};\n/** @type {?} */\n\n\nvar _MatPaginatorBase = /*@__PURE__*/mixinInitialized(MatPaginatorBase);\n\nvar MatPaginator = /*@__PURE__*/function () {\n  var MatPaginator = /*#__PURE__*/function (_MatPaginatorBase2) {\n    _inherits(MatPaginator, _MatPaginatorBase2);\n\n    var _super = _createSuper(MatPaginator);\n\n    /**\n     * @param {?} _intl\n     * @param {?} _changeDetectorRef\n     */\n    function MatPaginator(_intl, _changeDetectorRef) {\n      var _this;\n\n      _classCallCheck(this, MatPaginator);\n\n      _this = _super.call(this);\n      _this._intl = _intl;\n      _this._changeDetectorRef = _changeDetectorRef;\n      _this._pageIndex = 0;\n      _this._length = 0;\n      _this._pageSizeOptions = [];\n      _this._hidePageSize = false;\n      _this._showFirstLastButtons = false;\n      /**\n       * Event emitted when the paginator changes the page size or page index.\n       */\n\n      _this.page = new EventEmitter();\n      _this._intlChanges = _intl.changes.subscribe(function () {\n        return _this._changeDetectorRef.markForCheck();\n      });\n      return _this;\n    }\n    /**\n     * The zero-based page index of the displayed list of items. Defaulted to 0.\n     * @return {?}\n     */\n\n\n    _createClass(MatPaginator, [{\n      key: \"pageIndex\",\n      get: function get() {\n        return this._pageIndex;\n      }\n      /**\n       * @param {?} value\n       * @return {?}\n       */\n      ,\n      set: function set(value) {\n        this._pageIndex = Math.max(coerceNumberProperty(value), 0);\n\n        this._changeDetectorRef.markForCheck();\n      }\n      /**\n       * The length of the total number of items that are being paginated. Defaulted to 0.\n       * @return {?}\n       */\n\n    }, {\n      key: \"length\",\n      get: function get() {\n        return this._length;\n      }\n      /**\n       * @param {?} value\n       * @return {?}\n       */\n      ,\n      set: function set(value) {\n        this._length = coerceNumberProperty(value);\n\n        this._changeDetectorRef.markForCheck();\n      }\n      /**\n       * Number of items to display on a page. By default set to 50.\n       * @return {?}\n       */\n\n    }, {\n      key: \"pageSize\",\n      get: function get() {\n        return this._pageSize;\n      }\n      /**\n       * @param {?} value\n       * @return {?}\n       */\n      ,\n      set: function set(value) {\n        this._pageSize = Math.max(coerceNumberProperty(value), 0);\n\n        this._updateDisplayedPageSizeOptions();\n      }\n      /**\n       * The set of provided page size options to display to the user.\n       * @return {?}\n       */\n\n    }, {\n      key: \"pageSizeOptions\",\n      get: function get() {\n        return this._pageSizeOptions;\n      }\n      /**\n       * @param {?} value\n       * @return {?}\n       */\n      ,\n      set: function set(value) {\n        this._pageSizeOptions = (value || []).map(function (p) {\n          return coerceNumberProperty(p);\n        });\n\n        this._updateDisplayedPageSizeOptions();\n      }\n      /**\n       * Whether to hide the page size selection UI from the user.\n       * @return {?}\n       */\n\n    }, {\n      key: \"hidePageSize\",\n      get: function get() {\n        return this._hidePageSize;\n      }\n      /**\n       * @param {?} value\n       * @return {?}\n       */\n      ,\n      set: function set(value) {\n        this._hidePageSize = coerceBooleanProperty(value);\n      }\n      /**\n       * Whether to show the first/last buttons UI to the user.\n       * @return {?}\n       */\n\n    }, {\n      key: \"showFirstLastButtons\",\n      get: function get() {\n        return this._showFirstLastButtons;\n      }\n      /**\n       * @param {?} value\n       * @return {?}\n       */\n      ,\n      set: function set(value) {\n        this._showFirstLastButtons = coerceBooleanProperty(value);\n      }\n      /**\n       * @return {?}\n       */\n\n    }, {\n      key: \"ngOnInit\",\n      value: function ngOnInit() {\n        this._initialized = true;\n\n        this._updateDisplayedPageSizeOptions();\n\n        this._markInitialized();\n      }\n      /**\n       * @return {?}\n       */\n\n    }, {\n      key: \"ngOnDestroy\",\n      value: function ngOnDestroy() {\n        this._intlChanges.unsubscribe();\n      }\n      /**\n       * Advances to the next page if it exists.\n       * @return {?}\n       */\n\n    }, {\n      key: \"nextPage\",\n      value: function nextPage() {\n        if (!this.hasNextPage()) {\n          return;\n        }\n        /** @type {?} */\n\n\n        var previousPageIndex = this.pageIndex;\n        this.pageIndex++;\n\n        this._emitPageEvent(previousPageIndex);\n      }\n      /**\n       * Move back to the previous page if it exists.\n       * @return {?}\n       */\n\n    }, {\n      key: \"previousPage\",\n      value: function previousPage() {\n        if (!this.hasPreviousPage()) {\n          return;\n        }\n        /** @type {?} */\n\n\n        var previousPageIndex = this.pageIndex;\n        this.pageIndex--;\n\n        this._emitPageEvent(previousPageIndex);\n      }\n      /**\n       * Move to the first page if not already there.\n       * @return {?}\n       */\n\n    }, {\n      key: \"firstPage\",\n      value: function firstPage() {\n        // hasPreviousPage being false implies at the start\n        if (!this.hasPreviousPage()) {\n          return;\n        }\n        /** @type {?} */\n\n\n        var previousPageIndex = this.pageIndex;\n        this.pageIndex = 0;\n\n        this._emitPageEvent(previousPageIndex);\n      }\n      /**\n       * Move to the last page if not already there.\n       * @return {?}\n       */\n\n    }, {\n      key: \"lastPage\",\n      value: function lastPage() {\n        // hasNextPage being false implies at the end\n        if (!this.hasNextPage()) {\n          return;\n        }\n        /** @type {?} */\n\n\n        var previousPageIndex = this.pageIndex;\n        this.pageIndex = this.getNumberOfPages() - 1;\n\n        this._emitPageEvent(previousPageIndex);\n      }\n      /**\n       * Whether there is a previous page.\n       * @return {?}\n       */\n\n    }, {\n      key: \"hasPreviousPage\",\n      value: function hasPreviousPage() {\n        return this.pageIndex >= 1 && this.pageSize != 0;\n      }\n      /**\n       * Whether there is a next page.\n       * @return {?}\n       */\n\n    }, {\n      key: \"hasNextPage\",\n      value: function hasNextPage() {\n        /** @type {?} */\n        var maxPageIndex = this.getNumberOfPages() - 1;\n        return this.pageIndex < maxPageIndex && this.pageSize != 0;\n      }\n      /**\n       * Calculate the number of pages\n       * @return {?}\n       */\n\n    }, {\n      key: \"getNumberOfPages\",\n      value: function getNumberOfPages() {\n        if (!this.pageSize) {\n          return 0;\n        }\n\n        return Math.ceil(this.length / this.pageSize);\n      }\n      /**\n       * Changes the page size so that the first item displayed on the page will still be\n       * displayed using the new page size.\n       *\n       * For example, if the page size is 10 and on the second page (items indexed 10-19) then\n       * switching so that the page size is 5 will set the third page as the current page so\n       * that the 10th item will still be displayed.\n       * @param {?} pageSize\n       * @return {?}\n       */\n\n    }, {\n      key: \"_changePageSize\",\n      value: function _changePageSize(pageSize) {\n        /** @type {?} */\n        var startIndex = this.pageIndex * this.pageSize;\n        /** @type {?} */\n\n        var previousPageIndex = this.pageIndex;\n        this.pageIndex = Math.floor(startIndex / pageSize) || 0;\n        this.pageSize = pageSize;\n\n        this._emitPageEvent(previousPageIndex);\n      }\n      /**\n       * Updates the list of page size options to display to the user. Includes making sure that\n       * the page size is an option and that the list is sorted.\n       * @return {?}\n       */\n\n    }, {\n      key: \"_updateDisplayedPageSizeOptions\",\n      value: function _updateDisplayedPageSizeOptions() {\n        if (!this._initialized) {\n          return;\n        } // If no page size is provided, use the first page size option or the default page size.\n\n\n        if (!this.pageSize) {\n          this._pageSize = this.pageSizeOptions.length != 0 ? this.pageSizeOptions[0] : DEFAULT_PAGE_SIZE;\n        }\n\n        this._displayedPageSizeOptions = this.pageSizeOptions.slice();\n\n        if (this._displayedPageSizeOptions.indexOf(this.pageSize) === -1) {\n          this._displayedPageSizeOptions.push(this.pageSize);\n        } // Sort the numbers using a number-specific sort function.\n\n\n        this._displayedPageSizeOptions.sort(function (a, b) {\n          return a - b;\n        });\n\n        this._changeDetectorRef.markForCheck();\n      }\n      /**\n       * Emits an event notifying that a change of the paginator's properties has been triggered.\n       * @param {?} previousPageIndex\n       * @return {?}\n       */\n\n    }, {\n      key: \"_emitPageEvent\",\n      value: function _emitPageEvent(previousPageIndex) {\n        this.page.emit({\n          previousPageIndex: previousPageIndex,\n          pageIndex: this.pageIndex,\n          pageSize: this.pageSize,\n          length: this.length\n        });\n      }\n    }]);\n\n    return MatPaginator;\n  }(_MatPaginatorBase);\n\n  MatPaginator.ɵfac = function MatPaginator_Factory(t) {\n    return new (t || MatPaginator)(ɵngcc0.ɵɵdirectiveInject(MatPaginatorIntl), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef));\n  };\n\n  MatPaginator.ɵcmp =\n  /*@__PURE__*/\n\n  /*@__PURE__*/\n  ɵngcc0.ɵɵdefineComponent({\n    type: MatPaginator,\n    selectors: [[\"mat-paginator\"]],\n    hostAttrs: [1, \"mat-paginator\"],\n    inputs: {\n      pageIndex: \"pageIndex\",\n      length: \"length\",\n      pageSize: \"pageSize\",\n      pageSizeOptions: \"pageSizeOptions\",\n      hidePageSize: \"hidePageSize\",\n      showFirstLastButtons: \"showFirstLastButtons\",\n      color: \"color\"\n    },\n    outputs: {\n      page: \"page\"\n    },\n    exportAs: [\"matPaginator\"],\n    features: [ɵngcc0.ɵɵInheritDefinitionFeature],\n    decls: 14,\n    vars: 14,\n    consts: [[1, \"mat-paginator-outer-container\"], [1, \"mat-paginator-container\"], [\"class\", \"mat-paginator-page-size\", 4, \"ngIf\"], [1, \"mat-paginator-range-actions\"], [1, \"mat-paginator-range-label\"], [\"mat-icon-button\", \"\", \"type\", \"button\", \"class\", \"mat-paginator-navigation-first\", 3, \"matTooltip\", \"matTooltipDisabled\", \"matTooltipPosition\", \"disabled\", \"click\", 4, \"ngIf\"], [\"mat-icon-button\", \"\", \"type\", \"button\", 1, \"mat-paginator-navigation-previous\", 3, \"matTooltip\", \"matTooltipDisabled\", \"matTooltipPosition\", \"disabled\", \"click\"], [\"viewBox\", \"0 0 24 24\", \"focusable\", \"false\", 1, \"mat-paginator-icon\"], [\"d\", \"M15.41 7.41L14 6l-6 6 6 6 1.41-1.41L10.83 12z\"], [\"mat-icon-button\", \"\", \"type\", \"button\", 1, \"mat-paginator-navigation-next\", 3, \"matTooltip\", \"matTooltipDisabled\", \"matTooltipPosition\", \"disabled\", \"click\"], [\"d\", \"M10 6L8.59 7.41 13.17 12l-4.58 4.59L10 18l6-6z\"], [\"mat-icon-button\", \"\", \"type\", \"button\", \"class\", \"mat-paginator-navigation-last\", 3, \"matTooltip\", \"matTooltipDisabled\", \"matTooltipPosition\", \"disabled\", \"click\", 4, \"ngIf\"], [1, \"mat-paginator-page-size\"], [1, \"mat-paginator-page-size-label\"], [\"class\", \"mat-paginator-page-size-select\", 3, \"color\", 4, \"ngIf\"], [4, \"ngIf\"], [1, \"mat-paginator-page-size-select\", 3, \"color\"], [3, \"value\", \"aria-label\", \"selectionChange\"], [3, \"value\", 4, \"ngFor\", \"ngForOf\"], [3, \"value\"], [\"mat-icon-button\", \"\", \"type\", \"button\", 1, \"mat-paginator-navigation-first\", 3, \"matTooltip\", \"matTooltipDisabled\", \"matTooltipPosition\", \"disabled\", \"click\"], [\"d\", \"M18.41 16.59L13.82 12l4.59-4.59L17 6l-6 6 6 6zM6 6h2v12H6z\"], [\"mat-icon-button\", \"\", \"type\", \"button\", 1, \"mat-paginator-navigation-last\", 3, \"matTooltip\", \"matTooltipDisabled\", \"matTooltipPosition\", \"disabled\", \"click\"], [\"d\", \"M5.59 7.41L10.18 12l-4.59 4.59L7 18l6-6-6-6zM16 6h2v12h-2z\"]],\n    template: function MatPaginator_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵelementStart(0, \"div\", 0);\n        ɵngcc0.ɵɵelementStart(1, \"div\", 1);\n        ɵngcc0.ɵɵtemplate(2, MatPaginator_div_2_Template, 5, 3, \"div\", 2);\n        ɵngcc0.ɵɵelementStart(3, \"div\", 3);\n        ɵngcc0.ɵɵelementStart(4, \"div\", 4);\n        ɵngcc0.ɵɵtext(5);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵtemplate(6, MatPaginator_button_6_Template, 3, 5, \"button\", 5);\n        ɵngcc0.ɵɵelementStart(7, \"button\", 6);\n        ɵngcc0.ɵɵlistener(\"click\", function MatPaginator_Template_button_click_7_listener() {\n          return ctx.previousPage();\n        });\n        ɵngcc0.ɵɵnamespaceSVG();\n        ɵngcc0.ɵɵelementStart(8, \"svg\", 7);\n        ɵngcc0.ɵɵelement(9, \"path\", 8);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵnamespaceHTML();\n        ɵngcc0.ɵɵelementStart(10, \"button\", 9);\n        ɵngcc0.ɵɵlistener(\"click\", function MatPaginator_Template_button_click_10_listener() {\n          return ctx.nextPage();\n        });\n        ɵngcc0.ɵɵnamespaceSVG();\n        ɵngcc0.ɵɵelementStart(11, \"svg\", 7);\n        ɵngcc0.ɵɵelement(12, \"path\", 10);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵtemplate(13, MatPaginator_button_13_Template, 3, 5, \"button\", 11);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵproperty(\"ngIf\", !ctx.hidePageSize);\n        ɵngcc0.ɵɵadvance(3);\n        ɵngcc0.ɵɵtextInterpolate(ctx._intl.getRangeLabel(ctx.pageIndex, ctx.pageSize, ctx.length));\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.showFirstLastButtons);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"matTooltip\", ctx._intl.previousPageLabel)(\"matTooltipDisabled\", !ctx.hasPreviousPage())(\"matTooltipPosition\", \"above\")(\"disabled\", !ctx.hasPreviousPage());\n        ɵngcc0.ɵɵattribute(\"aria-label\", ctx._intl.previousPageLabel);\n        ɵngcc0.ɵɵadvance(3);\n        ɵngcc0.ɵɵproperty(\"matTooltip\", ctx._intl.nextPageLabel)(\"matTooltipDisabled\", !ctx.hasNextPage())(\"matTooltipPosition\", \"above\")(\"disabled\", !ctx.hasNextPage());\n        ɵngcc0.ɵɵattribute(\"aria-label\", ctx._intl.nextPageLabel);\n        ɵngcc0.ɵɵadvance(3);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.showFirstLastButtons);\n      }\n    },\n    directives: [ɵngcc1.NgIf, ɵngcc2.MatButton, ɵngcc3.MatTooltip, ɵngcc4.MatFormField, ɵngcc5.MatSelect, ɵngcc1.NgForOf, ɵngcc6.MatOption],\n    styles: [\".mat-paginator{display:block}.mat-paginator-outer-container{display:flex}.mat-paginator-container{display:flex;align-items:center;justify-content:flex-end;min-height:56px;padding:0 8px;flex-wrap:wrap-reverse;width:100%}.mat-paginator-page-size{display:flex;align-items:baseline;margin-right:8px}[dir=rtl] .mat-paginator-page-size{margin-right:0;margin-left:8px}.mat-paginator-page-size-label{margin:0 4px}.mat-paginator-page-size-select{margin:6px 4px 0 4px;width:56px}.mat-paginator-page-size-select.mat-form-field-appearance-outline{width:64px}.mat-paginator-page-size-select.mat-form-field-appearance-fill{width:64px}.mat-paginator-range-label{margin:0 32px 0 24px}.mat-paginator-range-actions{display:flex;align-items:center}.mat-paginator-icon{width:28px;fill:currentColor}[dir=rtl] .mat-paginator-icon{transform:rotate(180deg)}\"],\n    encapsulation: 2,\n    changeDetection: 0\n  });\n  return MatPaginator;\n}();\n\nvar MatPaginatorModule = /*@__PURE__*/function () {\n  var MatPaginatorModule = function MatPaginatorModule() {\n    _classCallCheck(this, MatPaginatorModule);\n  };\n\n  MatPaginatorModule.ɵfac = function MatPaginatorModule_Factory(t) {\n    return new (t || MatPaginatorModule)();\n  };\n\n  MatPaginatorModule.ɵmod =\n  /*@__PURE__*/\n\n  /*@__PURE__*/\n  ɵngcc0.ɵɵdefineNgModule({\n    type: MatPaginatorModule\n  });\n  MatPaginatorModule.ɵinj =\n  /*@__PURE__*/\n\n  /*@__PURE__*/\n  ɵngcc0.ɵɵdefineInjector({\n    providers: [MAT_PAGINATOR_INTL_PROVIDER],\n    imports: [[CommonModule, MatButtonModule, MatSelectModule, MatTooltipModule]]\n  });\n  return MatPaginatorModule;\n}();\n/*@__PURE__*/\n\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatPaginatorModule, {\n    declarations: function declarations() {\n      return [MatPaginator];\n    },\n    imports: function imports() {\n      return [CommonModule, MatButtonModule, MatSelectModule, MatTooltipModule];\n    },\n    exports: function exports() {\n      return [MatPaginator];\n    }\n  });\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n\nexport { MatPaginatorModule, PageEvent, MatPaginatorBase, _MatPaginatorBase, MatPaginator, MAT_PAGINATOR_INTL_PROVIDER_FACTORY, MatPaginatorIntl, MAT_PAGINATOR_INTL_PROVIDER }; //# sourceMappingURL=paginator.js.map","map":null,"metadata":{},"sourceType":"module"}