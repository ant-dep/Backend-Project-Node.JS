{"ast":null,"code":"import _get from \"/Users/adepertat/Dropbox/ECOLES/Openclassroom/P6_de_Pertat_Antoine/AntoinedePertat_6_240521/frontend/node_modules/@babel/runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"/Users/adepertat/Dropbox/ECOLES/Openclassroom/P6_de_Pertat_Antoine/AntoinedePertat_6_240521/frontend/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/adepertat/Dropbox/ECOLES/Openclassroom/P6_de_Pertat_Antoine/AntoinedePertat_6_240521/frontend/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/adepertat/Dropbox/ECOLES/Openclassroom/P6_de_Pertat_Antoine/AntoinedePertat_6_240521/frontend/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _classCallCheck from \"/Users/adepertat/Dropbox/ECOLES/Openclassroom/P6_de_Pertat_Antoine/AntoinedePertat_6_240521/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/adepertat/Dropbox/ECOLES/Openclassroom/P6_de_Pertat_Antoine/AntoinedePertat_6_240521/frontend/node_modules/@babel/runtime/helpers/esm/createClass\";\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { ComponentFactoryResolver, Directive, EventEmitter, NgModule, Output, TemplateRef, ViewContainerRef } from '@angular/core';\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * Throws an exception when attempting to attach a null portal to a host.\n * \\@docs-private\n * @return {?}\n */\n\nimport * as Éµngcc0 from '@angular/core';\n\nfunction throwNullPortalError() {\n  throw Error('Must provide a portal to attach');\n}\n/**\n * Throws an exception when attempting to attach a portal to a host that is already attached.\n * \\@docs-private\n * @return {?}\n */\n\n\nfunction throwPortalAlreadyAttachedError() {\n  throw Error('Host already has a portal attached');\n}\n/**\n * Throws an exception when attempting to attach a portal to an already-disposed host.\n * \\@docs-private\n * @return {?}\n */\n\n\nfunction throwPortalOutletAlreadyDisposedError() {\n  throw Error('This PortalOutlet has already been disposed');\n}\n/**\n * Throws an exception when attempting to attach an unknown portal type.\n * \\@docs-private\n * @return {?}\n */\n\n\nfunction throwUnknownPortalTypeError() {\n  throw Error('Attempting to attach an unknown Portal type. BasePortalOutlet accepts either ' + 'a ComponentPortal or a TemplatePortal.');\n}\n/**\n * Throws an exception when attempting to attach a portal to a null host.\n * \\@docs-private\n * @return {?}\n */\n\n\nfunction throwNullPortalOutletError() {\n  throw Error('Attempting to attach a portal to a null PortalOutlet');\n}\n/**\n * Throws an exception when attempting to detach a portal that is not attached.\n * \\@docs-private\n * @return {?}\n */\n\n\nfunction throwNoPortalAttachedError() {\n  throw Error('Attempting to detach a portal that is not attached to a host');\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * A `Portal` is something that you want to render somewhere else.\n * It can be attach to / detached from a `PortalOutlet`.\n * @abstract\n * @template T\n */\n\n\nvar Portal = /*#__PURE__*/function () {\n  function Portal() {\n    _classCallCheck(this, Portal);\n  }\n\n  _createClass(Portal, [{\n    key: \"attach\",\n    value:\n    /**\n     * Attach this portal to a host.\n     * @param {?} host\n     * @return {?}\n     */\n    function attach(host) {\n      if (host == null) {\n        throwNullPortalOutletError();\n      }\n\n      if (host.hasAttached()) {\n        throwPortalAlreadyAttachedError();\n      }\n\n      this._attachedHost = host;\n      return (\n        /** @type {?} */\n        host.attach(this)\n      );\n    }\n    /**\n     * Detach this portal from its host\n     * @return {?}\n     */\n\n  }, {\n    key: \"detach\",\n    value: function detach() {\n      /** @type {?} */\n      var host = this._attachedHost;\n\n      if (host == null) {\n        throwNoPortalAttachedError();\n      } else {\n        this._attachedHost = null;\n        host.detach();\n      }\n    }\n    /**\n     * Whether this portal is attached to a host.\n     * @return {?}\n     */\n\n  }, {\n    key: \"isAttached\",\n    get: function get() {\n      return this._attachedHost != null;\n    }\n    /**\n     * Sets the PortalOutlet reference without performing `attach()`. This is used directly by\n     * the PortalOutlet when it is performing an `attach()` or `detach()`.\n     * @param {?} host\n     * @return {?}\n     */\n\n  }, {\n    key: \"setAttachedHost\",\n    value: function setAttachedHost(host) {\n      this._attachedHost = host;\n    }\n  }]);\n\n  return Portal;\n}();\n/**\n * A `ComponentPortal` is a portal that instantiates some Component upon attachment.\n * @template T\n */\n\n\nvar ComponentPortal = /*#__PURE__*/function (_Portal) {\n  _inherits(ComponentPortal, _Portal);\n\n  var _super = _createSuper(ComponentPortal);\n\n  /**\n   * @param {?} component\n   * @param {?=} viewContainerRef\n   * @param {?=} injector\n   * @param {?=} componentFactoryResolver\n   */\n  function ComponentPortal(component, viewContainerRef, injector, componentFactoryResolver) {\n    var _this;\n\n    _classCallCheck(this, ComponentPortal);\n\n    _this = _super.call(this);\n    _this.component = component;\n    _this.viewContainerRef = viewContainerRef;\n    _this.injector = injector;\n    _this.componentFactoryResolver = componentFactoryResolver;\n    return _this;\n  }\n\n  return ComponentPortal;\n}(Portal);\n/**\n * A `TemplatePortal` is a portal that represents some embedded template (TemplateRef).\n * @template C\n */\n\n\nvar TemplatePortal = /*#__PURE__*/function (_Portal2) {\n  _inherits(TemplatePortal, _Portal2);\n\n  var _super2 = _createSuper(TemplatePortal);\n\n  /**\n   * @param {?} template\n   * @param {?} viewContainerRef\n   * @param {?=} context\n   */\n  function TemplatePortal(template, viewContainerRef, context) {\n    var _this2;\n\n    _classCallCheck(this, TemplatePortal);\n\n    _this2 = _super2.call(this);\n    _this2.templateRef = template;\n    _this2.viewContainerRef = viewContainerRef;\n    _this2.context = context;\n    return _this2;\n  }\n  /**\n   * @return {?}\n   */\n\n\n  _createClass(TemplatePortal, [{\n    key: \"origin\",\n    get: function get() {\n      return this.templateRef.elementRef;\n    }\n    /**\n     * Attach the the portal to the provided `PortalOutlet`.\n     * When a context is provided it will override the `context` property of the `TemplatePortal`\n     * instance.\n     * @param {?} host\n     * @param {?=} context\n     * @return {?}\n     */\n\n  }, {\n    key: \"attach\",\n    value: function attach(host) {\n      var context = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.context;\n      this.context = context;\n      return _get(_getPrototypeOf(TemplatePortal.prototype), \"attach\", this).call(this, host);\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"detach\",\n    value: function detach() {\n      this.context = undefined;\n      return _get(_getPrototypeOf(TemplatePortal.prototype), \"detach\", this).call(this);\n    }\n  }]);\n\n  return TemplatePortal;\n}(Portal);\n/**\n * Partial implementation of PortalOutlet that handles attaching\n * ComponentPortal and TemplatePortal.\n * @abstract\n */\n\n\nvar BasePortalOutlet = /*#__PURE__*/function () {\n  function BasePortalOutlet() {\n    _classCallCheck(this, BasePortalOutlet);\n\n    /**\n     * Whether this host has already been permanently disposed.\n     */\n    this._isDisposed = false;\n  }\n  /**\n   * Whether this host has an attached portal.\n   * @return {?}\n   */\n\n\n  _createClass(BasePortalOutlet, [{\n    key: \"hasAttached\",\n    value: function hasAttached() {\n      return !!this._attachedPortal;\n    }\n    /**\n     * Attaches a portal.\n     * @param {?} portal\n     * @return {?}\n     */\n\n  }, {\n    key: \"attach\",\n    value: function attach(portal) {\n      if (!portal) {\n        throwNullPortalError();\n      }\n\n      if (this.hasAttached()) {\n        throwPortalAlreadyAttachedError();\n      }\n\n      if (this._isDisposed) {\n        throwPortalOutletAlreadyDisposedError();\n      }\n\n      if (portal instanceof ComponentPortal) {\n        this._attachedPortal = portal;\n        return this.attachComponentPortal(portal);\n      } else if (portal instanceof TemplatePortal) {\n        this._attachedPortal = portal;\n        return this.attachTemplatePortal(portal);\n      }\n\n      throwUnknownPortalTypeError();\n    }\n    /**\n     * Detaches a previously attached portal.\n     * @return {?}\n     */\n\n  }, {\n    key: \"detach\",\n    value: function detach() {\n      if (this._attachedPortal) {\n        this._attachedPortal.setAttachedHost(null);\n\n        this._attachedPortal = null;\n      }\n\n      this._invokeDisposeFn();\n    }\n    /**\n     * Permanently dispose of this portal host.\n     * @return {?}\n     */\n\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      if (this.hasAttached()) {\n        this.detach();\n      }\n\n      this._invokeDisposeFn();\n\n      this._isDisposed = true;\n    }\n    /**\n     * \\@docs-private\n     * @param {?} fn\n     * @return {?}\n     */\n\n  }, {\n    key: \"setDisposeFn\",\n    value: function setDisposeFn(fn) {\n      this._disposeFn = fn;\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"_invokeDisposeFn\",\n    value: function _invokeDisposeFn() {\n      if (this._disposeFn) {\n        this._disposeFn();\n\n        this._disposeFn = null;\n      }\n    }\n  }]);\n\n  return BasePortalOutlet;\n}();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * A PortalOutlet for attaching portals to an arbitrary DOM element outside of the Angular\n * application context.\n */\n\n\nvar DomPortalOutlet = /*#__PURE__*/function (_BasePortalOutlet) {\n  _inherits(DomPortalOutlet, _BasePortalOutlet);\n\n  var _super3 = _createSuper(DomPortalOutlet);\n\n  /**\n   * @param {?} outletElement\n   * @param {?} _componentFactoryResolver\n   * @param {?} _appRef\n   * @param {?} _defaultInjector\n   */\n  function DomPortalOutlet(outletElement, _componentFactoryResolver, _appRef, _defaultInjector) {\n    var _this3;\n\n    _classCallCheck(this, DomPortalOutlet);\n\n    _this3 = _super3.call(this);\n    _this3.outletElement = outletElement;\n    _this3._componentFactoryResolver = _componentFactoryResolver;\n    _this3._appRef = _appRef;\n    _this3._defaultInjector = _defaultInjector;\n    return _this3;\n  }\n  /**\n   * Attach the given ComponentPortal to DOM element using the ComponentFactoryResolver.\n   * @template T\n   * @param {?} portal Portal to be attached\n   * @return {?} Reference to the created component.\n   */\n\n\n  _createClass(DomPortalOutlet, [{\n    key: \"attachComponentPortal\",\n    value: function attachComponentPortal(portal) {\n      var _this4 = this;\n\n      /** @type {?} */\n      var resolver = portal.componentFactoryResolver || this._componentFactoryResolver;\n      /** @type {?} */\n\n      var componentFactory = resolver.resolveComponentFactory(portal.component);\n      /** @type {?} */\n\n      var componentRef; // If the portal specifies a ViewContainerRef, we will use that as the attachment point\n      // for the component (in terms of Angular's component tree, not rendering).\n      // When the ViewContainerRef is missing, we use the factory to create the component directly\n      // and then manually attach the view to the application.\n\n      if (portal.viewContainerRef) {\n        componentRef = portal.viewContainerRef.createComponent(componentFactory, portal.viewContainerRef.length, portal.injector || portal.viewContainerRef.injector);\n        this.setDisposeFn(function () {\n          return componentRef.destroy();\n        });\n      } else {\n        componentRef = componentFactory.create(portal.injector || this._defaultInjector);\n\n        this._appRef.attachView(componentRef.hostView);\n\n        this.setDisposeFn(function () {\n          _this4._appRef.detachView(componentRef.hostView);\n\n          componentRef.destroy();\n        });\n      } // At this point the component has been instantiated, so we move it to the location in the DOM\n      // where we want it to be rendered.\n\n\n      this.outletElement.appendChild(this._getComponentRootNode(componentRef));\n      return componentRef;\n    }\n    /**\n     * Attaches a template portal to the DOM as an embedded view.\n     * @template C\n     * @param {?} portal Portal to be attached.\n     * @return {?} Reference to the created embedded view.\n     */\n\n  }, {\n    key: \"attachTemplatePortal\",\n    value: function attachTemplatePortal(portal) {\n      var _this5 = this;\n\n      /** @type {?} */\n      var viewContainer = portal.viewContainerRef;\n      /** @type {?} */\n\n      var viewRef = viewContainer.createEmbeddedView(portal.templateRef, portal.context);\n      viewRef.detectChanges(); // The method `createEmbeddedView` will add the view as a child of the viewContainer.\n      // But for the DomPortalOutlet the view can be added everywhere in the DOM\n      // (e.g Overlay Container) To move the view to the specified host element. We just\n      // re-append the existing root nodes.\n\n      viewRef.rootNodes.forEach(function (rootNode) {\n        return _this5.outletElement.appendChild(rootNode);\n      });\n      this.setDisposeFn(function () {\n        /** @type {?} */\n        var index = viewContainer.indexOf(viewRef);\n\n        if (index !== -1) {\n          viewContainer.remove(index);\n        }\n      }); // TODO(jelbourn): Return locals from view.\n\n      return viewRef;\n    }\n    /**\n     * Clears out a portal from the DOM.\n     * @return {?}\n     */\n\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      _get(_getPrototypeOf(DomPortalOutlet.prototype), \"dispose\", this).call(this);\n\n      if (this.outletElement.parentNode != null) {\n        this.outletElement.parentNode.removeChild(this.outletElement);\n      }\n    }\n    /**\n     * Gets the root HTMLElement for an instantiated component.\n     * @param {?} componentRef\n     * @return {?}\n     */\n\n  }, {\n    key: \"_getComponentRootNode\",\n    value: function _getComponentRootNode(componentRef) {\n      return (\n        /** @type {?} */\n\n        /** @type {?} */\n        componentRef.hostView.rootNodes[0]\n      );\n    }\n  }]);\n\n  return DomPortalOutlet;\n}(BasePortalOutlet);\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * Directive version of a `TemplatePortal`. Because the directive *is* a TemplatePortal,\n * the directive instance itself can be attached to a host, enabling declarative use of portals.\n */\n\n\nvar CdkPortal = /*#__PURE__*/function (_TemplatePortal) {\n  _inherits(CdkPortal, _TemplatePortal);\n\n  var _super4 = _createSuper(CdkPortal);\n\n  /**\n   * @param {?} templateRef\n   * @param {?} viewContainerRef\n   */\n  function CdkPortal(templateRef, viewContainerRef) {\n    _classCallCheck(this, CdkPortal);\n\n    return _super4.call(this, templateRef, viewContainerRef);\n  }\n\n  return CdkPortal;\n}(TemplatePortal);\n\nCdkPortal.Éµfac = function CdkPortal_Factory(t) {\n  return new (t || CdkPortal)(Éµngcc0.ÉµÉµdirectiveInject(Éµngcc0.TemplateRef), Éµngcc0.ÉµÉµdirectiveInject(Éµngcc0.ViewContainerRef));\n};\n\nCdkPortal.Éµdir = /*@__PURE__*/Éµngcc0.ÉµÉµdefineDirective({\n  type: CdkPortal,\n  selectors: [[\"\", \"cdk-portal\", \"\"], [\"\", \"cdkPortal\", \"\"], [\"\", \"portal\", \"\"]],\n  exportAs: [\"cdkPortal\"],\n  features: [Éµngcc0.ÉµÉµInheritDefinitionFeature]\n});\n/** @nocollapse */\n\nCdkPortal.ctorParameters = function () {\n  return [{\n    type: TemplateRef\n  }, {\n    type: ViewContainerRef\n  }];\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && Éµngcc0.ÉµsetClassMetadata(CdkPortal, [{\n    type: Directive,\n    args: [{\n      selector: '[cdk-portal], [cdkPortal], [portal]',\n      exportAs: 'cdkPortal'\n    }]\n  }], function () {\n    return [{\n      type: Éµngcc0.TemplateRef\n    }, {\n      type: Éµngcc0.ViewContainerRef\n    }];\n  }, null);\n})();\n/**\n * Directive version of a PortalOutlet. Because the directive *is* a PortalOutlet, portals can be\n * directly attached to it, enabling declarative use.\n *\n * Usage:\n * `<ng-template [cdkPortalOutlet]=\"greeting\"></ng-template>`\n */\n\n\nvar CdkPortalOutlet = /*#__PURE__*/function (_BasePortalOutlet2) {\n  _inherits(CdkPortalOutlet, _BasePortalOutlet2);\n\n  var _super5 = _createSuper(CdkPortalOutlet);\n\n  /**\n   * @param {?} _componentFactoryResolver\n   * @param {?} _viewContainerRef\n   */\n  function CdkPortalOutlet(_componentFactoryResolver, _viewContainerRef) {\n    var _this6;\n\n    _classCallCheck(this, CdkPortalOutlet);\n\n    _this6 = _super5.call(this);\n    _this6._componentFactoryResolver = _componentFactoryResolver;\n    _this6._viewContainerRef = _viewContainerRef;\n    /**\n     * Whether the portal component is initialized.\n     */\n\n    _this6._isInitialized = false;\n    _this6.attached = new EventEmitter();\n    return _this6;\n  }\n  /**\n   * Portal associated with the Portal outlet.\n   * @return {?}\n   */\n\n\n  _createClass(CdkPortalOutlet, [{\n    key: \"portal\",\n    get: function get() {\n      return this._attachedPortal;\n    }\n    /**\n     * @param {?} portal\n     * @return {?}\n     */\n    ,\n    set: function set(portal) {\n      // Ignore the cases where the `portal` is set to a falsy value before the lifecycle hooks have\n      // run. This handles the cases where the user might do something like `<div cdkPortalOutlet>`\n      // and attach a portal programmatically in the parent component. When Angular does the first CD\n      // round, it will fire the setter with empty string, causing the user's content to be cleared.\n      if (this.hasAttached() && !portal && !this._isInitialized) {\n        return;\n      }\n\n      if (this.hasAttached()) {\n        _get(_getPrototypeOf(CdkPortalOutlet.prototype), \"detach\", this).call(this);\n      }\n\n      if (portal) {\n        _get(_getPrototypeOf(CdkPortalOutlet.prototype), \"attach\", this).call(this, portal);\n      }\n\n      this._attachedPortal = portal;\n    }\n    /**\n     * Component or view reference that is attached to the portal.\n     * @return {?}\n     */\n\n  }, {\n    key: \"attachedRef\",\n    get: function get() {\n      return this._attachedRef;\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngOnInit\",\n    value: function ngOnInit() {\n      this._isInitialized = true;\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      _get(_getPrototypeOf(CdkPortalOutlet.prototype), \"dispose\", this).call(this);\n\n      this._attachedPortal = null;\n      this._attachedRef = null;\n    }\n    /**\n     * Attach the given ComponentPortal to this PortalOutlet using the ComponentFactoryResolver.\n     *\n     * @template T\n     * @param {?} portal Portal to be attached to the portal outlet.\n     * @return {?} Reference to the created component.\n     */\n\n  }, {\n    key: \"attachComponentPortal\",\n    value: function attachComponentPortal(portal) {\n      portal.setAttachedHost(this);\n      /** @type {?} */\n\n      var viewContainerRef = portal.viewContainerRef != null ? portal.viewContainerRef : this._viewContainerRef;\n      /** @type {?} */\n\n      var componentFactory = this._componentFactoryResolver.resolveComponentFactory(portal.component);\n      /** @type {?} */\n\n\n      var ref = viewContainerRef.createComponent(componentFactory, viewContainerRef.length, portal.injector || viewContainerRef.injector);\n\n      _get(_getPrototypeOf(CdkPortalOutlet.prototype), \"setDisposeFn\", this).call(this, function () {\n        return ref.destroy();\n      });\n\n      this._attachedPortal = portal;\n      this._attachedRef = ref;\n      this.attached.emit(ref);\n      return ref;\n    }\n    /**\n     * Attach the given TemplatePortal to this PortlHost as an embedded View.\n     * @template C\n     * @param {?} portal Portal to be attached.\n     * @return {?} Reference to the created embedded view.\n     */\n\n  }, {\n    key: \"attachTemplatePortal\",\n    value: function attachTemplatePortal(portal) {\n      var _this7 = this;\n\n      portal.setAttachedHost(this);\n      /** @type {?} */\n\n      var viewRef = this._viewContainerRef.createEmbeddedView(portal.templateRef, portal.context);\n\n      _get(_getPrototypeOf(CdkPortalOutlet.prototype), \"setDisposeFn\", this).call(this, function () {\n        return _this7._viewContainerRef.clear();\n      });\n\n      this._attachedPortal = portal;\n      this._attachedRef = viewRef;\n      this.attached.emit(viewRef);\n      return viewRef;\n    }\n  }]);\n\n  return CdkPortalOutlet;\n}(BasePortalOutlet);\n\nCdkPortalOutlet.Éµfac = function CdkPortalOutlet_Factory(t) {\n  return new (t || CdkPortalOutlet)(Éµngcc0.ÉµÉµdirectiveInject(Éµngcc0.ComponentFactoryResolver), Éµngcc0.ÉµÉµdirectiveInject(Éµngcc0.ViewContainerRef));\n};\n\nCdkPortalOutlet.Éµdir = /*@__PURE__*/Éµngcc0.ÉµÉµdefineDirective({\n  type: CdkPortalOutlet,\n  selectors: [[\"\", \"cdkPortalOutlet\", \"\"], [\"\", \"cdkPortalHost\", \"\"], [\"\", \"portalHost\", \"\"]],\n  inputs: {\n    portal: [\"cdkPortalOutlet\", \"portal\"]\n  },\n  outputs: {\n    attached: \"attached\"\n  },\n  exportAs: [\"cdkPortalOutlet\", \"cdkPortalHost\"],\n  features: [Éµngcc0.ÉµÉµInheritDefinitionFeature]\n});\n/** @nocollapse */\n\nCdkPortalOutlet.ctorParameters = function () {\n  return [{\n    type: ComponentFactoryResolver\n  }, {\n    type: ViewContainerRef\n  }];\n};\n\nCdkPortalOutlet.propDecorators = {\n  attached: [{\n    type: Output\n  }]\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && Éµngcc0.ÉµsetClassMetadata(CdkPortalOutlet, [{\n    type: Directive,\n    args: [{\n      selector: '[cdkPortalOutlet], [cdkPortalHost], [portalHost]',\n      exportAs: 'cdkPortalOutlet, cdkPortalHost',\n      inputs: ['portal: cdkPortalOutlet']\n    }]\n  }], function () {\n    return [{\n      type: Éµngcc0.ComponentFactoryResolver\n    }, {\n      type: Éµngcc0.ViewContainerRef\n    }];\n  }, {\n    attached: [{\n      type: Output\n    }]\n  });\n})();\n\nvar PortalModule = function PortalModule() {\n  _classCallCheck(this, PortalModule);\n};\n\nPortalModule.Éµfac = function PortalModule_Factory(t) {\n  return new (t || PortalModule)();\n};\n\nPortalModule.Éµmod = /*@__PURE__*/Éµngcc0.ÉµÉµdefineNgModule({\n  type: PortalModule\n});\nPortalModule.Éµinj = /*@__PURE__*/Éµngcc0.ÉµÉµdefineInjector({});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && Éµngcc0.ÉµsetClassMetadata(PortalModule, [{\n    type: NgModule,\n    args: [{\n      exports: [CdkPortal, CdkPortalOutlet],\n      declarations: [CdkPortal, CdkPortalOutlet]\n    }]\n  }], null, null);\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && Éµngcc0.ÉµÉµsetNgModuleScope(PortalModule, {\n    declarations: [CdkPortal, CdkPortalOutlet],\n    exports: [CdkPortal, CdkPortalOutlet]\n  });\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * Custom injector to be used when providing custom\n * injection tokens to components inside a portal.\n * \\@docs-private\n */\n\n\nvar PortalInjector = /*#__PURE__*/function () {\n  /**\n   * @param {?} _parentInjector\n   * @param {?} _customTokens\n   */\n  function PortalInjector(_parentInjector, _customTokens) {\n    _classCallCheck(this, PortalInjector);\n\n    this._parentInjector = _parentInjector;\n    this._customTokens = _customTokens;\n  }\n  /**\n   * @param {?} token\n   * @param {?=} notFoundValue\n   * @return {?}\n   */\n\n\n  _createClass(PortalInjector, [{\n    key: \"get\",\n    value: function get(token, notFoundValue) {\n      /** @type {?} */\n      var value = this._customTokens.get(token);\n\n      if (typeof value !== 'undefined') {\n        return value;\n      }\n\n      return this._parentInjector.get(token, notFoundValue);\n    }\n  }]);\n\n  return PortalInjector;\n}();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n\nexport { DomPortalOutlet as DomPortalHost, CdkPortalOutlet as PortalHostDirective, CdkPortal as TemplatePortalDirective, BasePortalOutlet as BasePortalHost, Portal, ComponentPortal, TemplatePortal, BasePortalOutlet, DomPortalOutlet, CdkPortal, CdkPortalOutlet, PortalModule, PortalInjector }; //# sourceMappingURL=portal.js.map","map":{"version":3,"sources":["/Users/adepertat/Dropbox/ECOLES/Openclassroom/P6_de_Pertat_Antoine/AntoinedePertat_6_240521/frontend/node_modules/@angular/cdk/__ivy_ngcc__/esm2015/portal.js"],"names":["ComponentFactoryResolver","Directive","EventEmitter","NgModule","Output","TemplateRef","ViewContainerRef","Éµngcc0","throwNullPortalError","Error","throwPortalAlreadyAttachedError","throwPortalOutletAlreadyDisposedError","throwUnknownPortalTypeError","throwNullPortalOutletError","throwNoPortalAttachedError","Portal","host","hasAttached","_attachedHost","attach","detach","ComponentPortal","component","viewContainerRef","injector","componentFactoryResolver","TemplatePortal","template","context","templateRef","elementRef","undefined","BasePortalOutlet","_isDisposed","_attachedPortal","portal","attachComponentPortal","attachTemplatePortal","setAttachedHost","_invokeDisposeFn","fn","_disposeFn","DomPortalOutlet","outletElement","_componentFactoryResolver","_appRef","_defaultInjector","resolver","componentFactory","resolveComponentFactory","componentRef","createComponent","length","setDisposeFn","destroy","create","attachView","hostView","detachView","appendChild","_getComponentRootNode","viewContainer","viewRef","createEmbeddedView","detectChanges","rootNodes","forEach","rootNode","index","indexOf","remove","parentNode","removeChild","CdkPortal","Éµfac","CdkPortal_Factory","t","ÉµÉµdirectiveInject","Éµdir","ÉµÉµdefineDirective","type","selectors","exportAs","features","ÉµÉµInheritDefinitionFeature","ctorParameters","ngDevMode","ÉµsetClassMetadata","args","selector","CdkPortalOutlet","_viewContainerRef","_isInitialized","attached","_attachedRef","ref","emit","clear","CdkPortalOutlet_Factory","inputs","outputs","propDecorators","PortalModule","PortalModule_Factory","Éµmod","ÉµÉµdefineNgModule","Éµinj","ÉµÉµdefineInjector","exports","declarations","ngJitMode","ÉµÉµsetNgModuleScope","PortalInjector","_parentInjector","_customTokens","token","notFoundValue","value","get","DomPortalHost","PortalHostDirective","TemplatePortalDirective","BasePortalHost"],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { ComponentFactoryResolver, Directive, EventEmitter, NgModule, Output, TemplateRef, ViewContainerRef } from '@angular/core';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * Throws an exception when attempting to attach a null portal to a host.\n * \\@docs-private\n * @return {?}\n */\nimport * as Éµngcc0 from '@angular/core';\nfunction throwNullPortalError() {\n    throw Error('Must provide a portal to attach');\n}\n/**\n * Throws an exception when attempting to attach a portal to a host that is already attached.\n * \\@docs-private\n * @return {?}\n */\nfunction throwPortalAlreadyAttachedError() {\n    throw Error('Host already has a portal attached');\n}\n/**\n * Throws an exception when attempting to attach a portal to an already-disposed host.\n * \\@docs-private\n * @return {?}\n */\nfunction throwPortalOutletAlreadyDisposedError() {\n    throw Error('This PortalOutlet has already been disposed');\n}\n/**\n * Throws an exception when attempting to attach an unknown portal type.\n * \\@docs-private\n * @return {?}\n */\nfunction throwUnknownPortalTypeError() {\n    throw Error('Attempting to attach an unknown Portal type. BasePortalOutlet accepts either ' +\n        'a ComponentPortal or a TemplatePortal.');\n}\n/**\n * Throws an exception when attempting to attach a portal to a null host.\n * \\@docs-private\n * @return {?}\n */\nfunction throwNullPortalOutletError() {\n    throw Error('Attempting to attach a portal to a null PortalOutlet');\n}\n/**\n * Throws an exception when attempting to detach a portal that is not attached.\n * \\@docs-private\n * @return {?}\n */\nfunction throwNoPortalAttachedError() {\n    throw Error('Attempting to detach a portal that is not attached to a host');\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * A `Portal` is something that you want to render somewhere else.\n * It can be attach to / detached from a `PortalOutlet`.\n * @abstract\n * @template T\n */\nclass Portal {\n    /**\n     * Attach this portal to a host.\n     * @param {?} host\n     * @return {?}\n     */\n    attach(host) {\n        if (host == null) {\n            throwNullPortalOutletError();\n        }\n        if (host.hasAttached()) {\n            throwPortalAlreadyAttachedError();\n        }\n        this._attachedHost = host;\n        return /** @type {?} */ (host.attach(this));\n    }\n    /**\n     * Detach this portal from its host\n     * @return {?}\n     */\n    detach() {\n        /** @type {?} */\n        let host = this._attachedHost;\n        if (host == null) {\n            throwNoPortalAttachedError();\n        }\n        else {\n            this._attachedHost = null;\n            host.detach();\n        }\n    }\n    /**\n     * Whether this portal is attached to a host.\n     * @return {?}\n     */\n    get isAttached() {\n        return this._attachedHost != null;\n    }\n    /**\n     * Sets the PortalOutlet reference without performing `attach()`. This is used directly by\n     * the PortalOutlet when it is performing an `attach()` or `detach()`.\n     * @param {?} host\n     * @return {?}\n     */\n    setAttachedHost(host) {\n        this._attachedHost = host;\n    }\n}\n/**\n * A `ComponentPortal` is a portal that instantiates some Component upon attachment.\n * @template T\n */\nclass ComponentPortal extends Portal {\n    /**\n     * @param {?} component\n     * @param {?=} viewContainerRef\n     * @param {?=} injector\n     * @param {?=} componentFactoryResolver\n     */\n    constructor(component, viewContainerRef, injector, componentFactoryResolver) {\n        super();\n        this.component = component;\n        this.viewContainerRef = viewContainerRef;\n        this.injector = injector;\n        this.componentFactoryResolver = componentFactoryResolver;\n    }\n}\n/**\n * A `TemplatePortal` is a portal that represents some embedded template (TemplateRef).\n * @template C\n */\nclass TemplatePortal extends Portal {\n    /**\n     * @param {?} template\n     * @param {?} viewContainerRef\n     * @param {?=} context\n     */\n    constructor(template, viewContainerRef, context) {\n        super();\n        this.templateRef = template;\n        this.viewContainerRef = viewContainerRef;\n        this.context = context;\n    }\n    /**\n     * @return {?}\n     */\n    get origin() {\n        return this.templateRef.elementRef;\n    }\n    /**\n     * Attach the the portal to the provided `PortalOutlet`.\n     * When a context is provided it will override the `context` property of the `TemplatePortal`\n     * instance.\n     * @param {?} host\n     * @param {?=} context\n     * @return {?}\n     */\n    attach(host, context = this.context) {\n        this.context = context;\n        return super.attach(host);\n    }\n    /**\n     * @return {?}\n     */\n    detach() {\n        this.context = undefined;\n        return super.detach();\n    }\n}\n/**\n * Partial implementation of PortalOutlet that handles attaching\n * ComponentPortal and TemplatePortal.\n * @abstract\n */\nclass BasePortalOutlet {\n    constructor() {\n        /**\n         * Whether this host has already been permanently disposed.\n         */\n        this._isDisposed = false;\n    }\n    /**\n     * Whether this host has an attached portal.\n     * @return {?}\n     */\n    hasAttached() {\n        return !!this._attachedPortal;\n    }\n    /**\n     * Attaches a portal.\n     * @param {?} portal\n     * @return {?}\n     */\n    attach(portal) {\n        if (!portal) {\n            throwNullPortalError();\n        }\n        if (this.hasAttached()) {\n            throwPortalAlreadyAttachedError();\n        }\n        if (this._isDisposed) {\n            throwPortalOutletAlreadyDisposedError();\n        }\n        if (portal instanceof ComponentPortal) {\n            this._attachedPortal = portal;\n            return this.attachComponentPortal(portal);\n        }\n        else if (portal instanceof TemplatePortal) {\n            this._attachedPortal = portal;\n            return this.attachTemplatePortal(portal);\n        }\n        throwUnknownPortalTypeError();\n    }\n    /**\n     * Detaches a previously attached portal.\n     * @return {?}\n     */\n    detach() {\n        if (this._attachedPortal) {\n            this._attachedPortal.setAttachedHost(null);\n            this._attachedPortal = null;\n        }\n        this._invokeDisposeFn();\n    }\n    /**\n     * Permanently dispose of this portal host.\n     * @return {?}\n     */\n    dispose() {\n        if (this.hasAttached()) {\n            this.detach();\n        }\n        this._invokeDisposeFn();\n        this._isDisposed = true;\n    }\n    /**\n     * \\@docs-private\n     * @param {?} fn\n     * @return {?}\n     */\n    setDisposeFn(fn) {\n        this._disposeFn = fn;\n    }\n    /**\n     * @return {?}\n     */\n    _invokeDisposeFn() {\n        if (this._disposeFn) {\n            this._disposeFn();\n            this._disposeFn = null;\n        }\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * A PortalOutlet for attaching portals to an arbitrary DOM element outside of the Angular\n * application context.\n */\nclass DomPortalOutlet extends BasePortalOutlet {\n    /**\n     * @param {?} outletElement\n     * @param {?} _componentFactoryResolver\n     * @param {?} _appRef\n     * @param {?} _defaultInjector\n     */\n    constructor(outletElement, _componentFactoryResolver, _appRef, _defaultInjector) {\n        super();\n        this.outletElement = outletElement;\n        this._componentFactoryResolver = _componentFactoryResolver;\n        this._appRef = _appRef;\n        this._defaultInjector = _defaultInjector;\n    }\n    /**\n     * Attach the given ComponentPortal to DOM element using the ComponentFactoryResolver.\n     * @template T\n     * @param {?} portal Portal to be attached\n     * @return {?} Reference to the created component.\n     */\n    attachComponentPortal(portal) {\n        /** @type {?} */\n        const resolver = portal.componentFactoryResolver || this._componentFactoryResolver;\n        /** @type {?} */\n        const componentFactory = resolver.resolveComponentFactory(portal.component);\n        /** @type {?} */\n        let componentRef;\n        // If the portal specifies a ViewContainerRef, we will use that as the attachment point\n        // for the component (in terms of Angular's component tree, not rendering).\n        // When the ViewContainerRef is missing, we use the factory to create the component directly\n        // and then manually attach the view to the application.\n        if (portal.viewContainerRef) {\n            componentRef = portal.viewContainerRef.createComponent(componentFactory, portal.viewContainerRef.length, portal.injector || portal.viewContainerRef.injector);\n            this.setDisposeFn(() => componentRef.destroy());\n        }\n        else {\n            componentRef = componentFactory.create(portal.injector || this._defaultInjector);\n            this._appRef.attachView(componentRef.hostView);\n            this.setDisposeFn(() => {\n                this._appRef.detachView(componentRef.hostView);\n                componentRef.destroy();\n            });\n        }\n        // At this point the component has been instantiated, so we move it to the location in the DOM\n        // where we want it to be rendered.\n        this.outletElement.appendChild(this._getComponentRootNode(componentRef));\n        return componentRef;\n    }\n    /**\n     * Attaches a template portal to the DOM as an embedded view.\n     * @template C\n     * @param {?} portal Portal to be attached.\n     * @return {?} Reference to the created embedded view.\n     */\n    attachTemplatePortal(portal) {\n        /** @type {?} */\n        let viewContainer = portal.viewContainerRef;\n        /** @type {?} */\n        let viewRef = viewContainer.createEmbeddedView(portal.templateRef, portal.context);\n        viewRef.detectChanges();\n        // The method `createEmbeddedView` will add the view as a child of the viewContainer.\n        // But for the DomPortalOutlet the view can be added everywhere in the DOM\n        // (e.g Overlay Container) To move the view to the specified host element. We just\n        // re-append the existing root nodes.\n        viewRef.rootNodes.forEach(rootNode => this.outletElement.appendChild(rootNode));\n        this.setDisposeFn((() => {\n            /** @type {?} */\n            let index = viewContainer.indexOf(viewRef);\n            if (index !== -1) {\n                viewContainer.remove(index);\n            }\n        }));\n        // TODO(jelbourn): Return locals from view.\n        return viewRef;\n    }\n    /**\n     * Clears out a portal from the DOM.\n     * @return {?}\n     */\n    dispose() {\n        super.dispose();\n        if (this.outletElement.parentNode != null) {\n            this.outletElement.parentNode.removeChild(this.outletElement);\n        }\n    }\n    /**\n     * Gets the root HTMLElement for an instantiated component.\n     * @param {?} componentRef\n     * @return {?}\n     */\n    _getComponentRootNode(componentRef) {\n        return /** @type {?} */ ((/** @type {?} */ (componentRef.hostView)).rootNodes[0]);\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * Directive version of a `TemplatePortal`. Because the directive *is* a TemplatePortal,\n * the directive instance itself can be attached to a host, enabling declarative use of portals.\n */\nclass CdkPortal extends TemplatePortal {\n    /**\n     * @param {?} templateRef\n     * @param {?} viewContainerRef\n     */\n    constructor(templateRef, viewContainerRef) {\n        super(templateRef, viewContainerRef);\n    }\n}\nCdkPortal.Éµfac = function CdkPortal_Factory(t) { return new (t || CdkPortal)(Éµngcc0.ÉµÉµdirectiveInject(Éµngcc0.TemplateRef), Éµngcc0.ÉµÉµdirectiveInject(Éµngcc0.ViewContainerRef)); };\nCdkPortal.Éµdir = /*@__PURE__*/ Éµngcc0.ÉµÉµdefineDirective({ type: CdkPortal, selectors: [[\"\", \"cdk-portal\", \"\"], [\"\", \"cdkPortal\", \"\"], [\"\", \"portal\", \"\"]], exportAs: [\"cdkPortal\"], features: [Éµngcc0.ÉµÉµInheritDefinitionFeature] });\n/** @nocollapse */\nCdkPortal.ctorParameters = () => [\n    { type: TemplateRef },\n    { type: ViewContainerRef }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && Éµngcc0.ÉµsetClassMetadata(CdkPortal, [{\n        type: Directive,\n        args: [{\n                selector: '[cdk-portal], [cdkPortal], [portal]',\n                exportAs: 'cdkPortal'\n            }]\n    }], function () { return [{ type: Éµngcc0.TemplateRef }, { type: Éµngcc0.ViewContainerRef }]; }, null); })();\n/**\n * Directive version of a PortalOutlet. Because the directive *is* a PortalOutlet, portals can be\n * directly attached to it, enabling declarative use.\n *\n * Usage:\n * `<ng-template [cdkPortalOutlet]=\"greeting\"></ng-template>`\n */\nclass CdkPortalOutlet extends BasePortalOutlet {\n    /**\n     * @param {?} _componentFactoryResolver\n     * @param {?} _viewContainerRef\n     */\n    constructor(_componentFactoryResolver, _viewContainerRef) {\n        super();\n        this._componentFactoryResolver = _componentFactoryResolver;\n        this._viewContainerRef = _viewContainerRef;\n        /**\n         * Whether the portal component is initialized.\n         */\n        this._isInitialized = false;\n        this.attached = new EventEmitter();\n    }\n    /**\n     * Portal associated with the Portal outlet.\n     * @return {?}\n     */\n    get portal() {\n        return this._attachedPortal;\n    }\n    /**\n     * @param {?} portal\n     * @return {?}\n     */\n    set portal(portal) {\n        // Ignore the cases where the `portal` is set to a falsy value before the lifecycle hooks have\n        // run. This handles the cases where the user might do something like `<div cdkPortalOutlet>`\n        // and attach a portal programmatically in the parent component. When Angular does the first CD\n        // round, it will fire the setter with empty string, causing the user's content to be cleared.\n        if (this.hasAttached() && !portal && !this._isInitialized) {\n            return;\n        }\n        if (this.hasAttached()) {\n            super.detach();\n        }\n        if (portal) {\n            super.attach(portal);\n        }\n        this._attachedPortal = portal;\n    }\n    /**\n     * Component or view reference that is attached to the portal.\n     * @return {?}\n     */\n    get attachedRef() {\n        return this._attachedRef;\n    }\n    /**\n     * @return {?}\n     */\n    ngOnInit() {\n        this._isInitialized = true;\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        super.dispose();\n        this._attachedPortal = null;\n        this._attachedRef = null;\n    }\n    /**\n     * Attach the given ComponentPortal to this PortalOutlet using the ComponentFactoryResolver.\n     *\n     * @template T\n     * @param {?} portal Portal to be attached to the portal outlet.\n     * @return {?} Reference to the created component.\n     */\n    attachComponentPortal(portal) {\n        portal.setAttachedHost(this);\n        /** @type {?} */\n        const viewContainerRef = portal.viewContainerRef != null ?\n            portal.viewContainerRef :\n            this._viewContainerRef;\n        /** @type {?} */\n        const componentFactory = this._componentFactoryResolver.resolveComponentFactory(portal.component);\n        /** @type {?} */\n        const ref = viewContainerRef.createComponent(componentFactory, viewContainerRef.length, portal.injector || viewContainerRef.injector);\n        super.setDisposeFn(() => ref.destroy());\n        this._attachedPortal = portal;\n        this._attachedRef = ref;\n        this.attached.emit(ref);\n        return ref;\n    }\n    /**\n     * Attach the given TemplatePortal to this PortlHost as an embedded View.\n     * @template C\n     * @param {?} portal Portal to be attached.\n     * @return {?} Reference to the created embedded view.\n     */\n    attachTemplatePortal(portal) {\n        portal.setAttachedHost(this);\n        /** @type {?} */\n        const viewRef = this._viewContainerRef.createEmbeddedView(portal.templateRef, portal.context);\n        super.setDisposeFn(() => this._viewContainerRef.clear());\n        this._attachedPortal = portal;\n        this._attachedRef = viewRef;\n        this.attached.emit(viewRef);\n        return viewRef;\n    }\n}\nCdkPortalOutlet.Éµfac = function CdkPortalOutlet_Factory(t) { return new (t || CdkPortalOutlet)(Éµngcc0.ÉµÉµdirectiveInject(Éµngcc0.ComponentFactoryResolver), Éµngcc0.ÉµÉµdirectiveInject(Éµngcc0.ViewContainerRef)); };\nCdkPortalOutlet.Éµdir = /*@__PURE__*/ Éµngcc0.ÉµÉµdefineDirective({ type: CdkPortalOutlet, selectors: [[\"\", \"cdkPortalOutlet\", \"\"], [\"\", \"cdkPortalHost\", \"\"], [\"\", \"portalHost\", \"\"]], inputs: { portal: [\"cdkPortalOutlet\", \"portal\"] }, outputs: { attached: \"attached\" }, exportAs: [\"cdkPortalOutlet\", \"cdkPortalHost\"], features: [Éµngcc0.ÉµÉµInheritDefinitionFeature] });\n/** @nocollapse */\nCdkPortalOutlet.ctorParameters = () => [\n    { type: ComponentFactoryResolver },\n    { type: ViewContainerRef }\n];\nCdkPortalOutlet.propDecorators = {\n    attached: [{ type: Output }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && Éµngcc0.ÉµsetClassMetadata(CdkPortalOutlet, [{\n        type: Directive,\n        args: [{\n                selector: '[cdkPortalOutlet], [cdkPortalHost], [portalHost]',\n                exportAs: 'cdkPortalOutlet, cdkPortalHost',\n                inputs: ['portal: cdkPortalOutlet']\n            }]\n    }], function () { return [{ type: Éµngcc0.ComponentFactoryResolver }, { type: Éµngcc0.ViewContainerRef }]; }, { attached: [{\n            type: Output\n        }] }); })();\nclass PortalModule {\n}\nPortalModule.Éµfac = function PortalModule_Factory(t) { return new (t || PortalModule)(); };\nPortalModule.Éµmod = /*@__PURE__*/ Éµngcc0.ÉµÉµdefineNgModule({ type: PortalModule });\nPortalModule.Éµinj = /*@__PURE__*/ Éµngcc0.ÉµÉµdefineInjector({});\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && Éµngcc0.ÉµsetClassMetadata(PortalModule, [{\n        type: NgModule,\n        args: [{\n                exports: [CdkPortal, CdkPortalOutlet],\n                declarations: [CdkPortal, CdkPortalOutlet]\n            }]\n    }], null, null); })();\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && Éµngcc0.ÉµÉµsetNgModuleScope(PortalModule, { declarations: [CdkPortal, CdkPortalOutlet], exports: [CdkPortal, CdkPortalOutlet] }); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * Custom injector to be used when providing custom\n * injection tokens to components inside a portal.\n * \\@docs-private\n */\nclass PortalInjector {\n    /**\n     * @param {?} _parentInjector\n     * @param {?} _customTokens\n     */\n    constructor(_parentInjector, _customTokens) {\n        this._parentInjector = _parentInjector;\n        this._customTokens = _customTokens;\n    }\n    /**\n     * @param {?} token\n     * @param {?=} notFoundValue\n     * @return {?}\n     */\n    get(token, notFoundValue) {\n        /** @type {?} */\n        const value = this._customTokens.get(token);\n        if (typeof value !== 'undefined') {\n            return value;\n        }\n        return this._parentInjector.get(token, notFoundValue);\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\nexport { DomPortalOutlet as DomPortalHost, CdkPortalOutlet as PortalHostDirective, CdkPortal as TemplatePortalDirective, BasePortalOutlet as BasePortalHost, Portal, ComponentPortal, TemplatePortal, BasePortalOutlet, DomPortalOutlet, CdkPortal, CdkPortalOutlet, PortalModule, PortalInjector };\n\n//# sourceMappingURL=portal.js.map"]},"metadata":{},"sourceType":"module"}