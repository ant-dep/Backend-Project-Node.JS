{"ast":null,"code":"import _createClass from \"/Users/adepertat/Dropbox/ECOLES/Openclassroom/P6_de_Pertat_Antoine/AntoinedePertat_6_240521/frontend/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/Users/adepertat/Dropbox/ECOLES/Openclassroom/P6_de_Pertat_Antoine/AntoinedePertat_6_240521/frontend/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/adepertat/Dropbox/ECOLES/Openclassroom/P6_de_Pertat_Antoine/AntoinedePertat_6_240521/frontend/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _classCallCheck from \"/Users/adepertat/Dropbox/ECOLES/Openclassroom/P6_de_Pertat_Antoine/AntoinedePertat_6_240521/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { AriaDescriber, A11yModule } from '@angular/cdk/a11y';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { DOCUMENT } from '@angular/common';\nimport { Directive, ElementRef, Inject, Input, NgZone, Optional, Renderer2, NgModule } from '@angular/core';\nimport { mixinDisabled, MatCommonModule } from '@angular/material/core';\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/** @type {?} */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/a11y';\nvar nextId = 0;\n/**\n * \\@docs-private\n */\n\nvar MatBadgeBase = function MatBadgeBase() {\n  _classCallCheck(this, MatBadgeBase);\n};\n/** @type {?} */\n\n\nvar _MatBadgeMixinBase = mixinDisabled(MatBadgeBase);\n/**\n * Directive to display a text badge.\n */\n\n\nvar MatBadge = /*#__PURE__*/function (_MatBadgeMixinBase2) {\n  _inherits(MatBadge, _MatBadgeMixinBase2);\n\n  var _super = _createSuper(MatBadge);\n\n  /**\n   * @param {?} _document\n   * @param {?} _ngZone\n   * @param {?} _elementRef\n   * @param {?} _ariaDescriber\n   * @param {?=} _renderer\n   */\n  function MatBadge(_document, _ngZone, _elementRef, _ariaDescriber, _renderer) {\n    var _this;\n\n    _classCallCheck(this, MatBadge);\n\n    _this = _super.call(this);\n    _this._document = _document;\n    _this._ngZone = _ngZone;\n    _this._elementRef = _elementRef;\n    _this._ariaDescriber = _ariaDescriber;\n    _this._renderer = _renderer;\n    /**\n     * Whether the badge has any content.\n     */\n\n    _this._hasContent = false;\n    _this._color = 'primary';\n    _this._overlap = true;\n    /**\n     * Position the badge should reside.\n     * Accepts any combination of 'above'|'below' and 'before'|'after'\n     */\n\n    _this.position = 'above after';\n    /**\n     * Size of the badge. Can be 'small', 'medium', or 'large'.\n     */\n\n    _this.size = 'medium';\n    /**\n     * Unique id for the badge\n     */\n\n    _this._id = nextId++;\n    return _this;\n  }\n  /**\n   * The color of the badge. Can be `primary`, `accent`, or `warn`.\n   * @return {?}\n   */\n\n\n  _createClass(MatBadge, [{\n    key: \"color\",\n    get: function get() {\n      return this._color;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ,\n    set: function set(value) {\n      this._setColor(value);\n\n      this._color = value;\n    }\n    /**\n     * Whether the badge should overlap its contents or not\n     * @return {?}\n     */\n\n  }, {\n    key: \"overlap\",\n    get: function get() {\n      return this._overlap;\n    }\n    /**\n     * @param {?} val\n     * @return {?}\n     */\n    ,\n    set: function set(val) {\n      this._overlap = coerceBooleanProperty(val);\n    }\n    /**\n     * The content for the badge\n     * @return {?}\n     */\n\n  }, {\n    key: \"content\",\n    get: function get() {\n      return this._content;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ,\n    set: function set(value) {\n      this._content = value;\n      this._hasContent = value != null && \"\".concat(value).trim().length > 0;\n\n      this._updateTextContent();\n    }\n    /**\n     * Message used to describe the decorated element via aria-describedby\n     * @return {?}\n     */\n\n  }, {\n    key: \"description\",\n    get: function get() {\n      return this._description;\n    }\n    /**\n     * @param {?} newDescription\n     * @return {?}\n     */\n    ,\n    set: function set(newDescription) {\n      if (newDescription !== this._description) {\n        this._updateHostAriaDescription(newDescription, this._description);\n\n        this._description = newDescription;\n      }\n    }\n    /**\n     * Whether the badge is hidden.\n     * @return {?}\n     */\n\n  }, {\n    key: \"hidden\",\n    get: function get() {\n      return this._hidden;\n    }\n    /**\n     * @param {?} val\n     * @return {?}\n     */\n    ,\n    set: function set(val) {\n      this._hidden = coerceBooleanProperty(val);\n    }\n    /**\n     * Whether the badge is above the host or not\n     * @return {?}\n     */\n\n  }, {\n    key: \"isAbove\",\n    value: function isAbove() {\n      return this.position.indexOf('below') === -1;\n    }\n    /**\n     * Whether the badge is after the host or not\n     * @return {?}\n     */\n\n  }, {\n    key: \"isAfter\",\n    value: function isAfter() {\n      return this.position.indexOf('before') === -1;\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      if (this.description && this._badgeElement) {\n        this._ariaDescriber.removeDescription(this._badgeElement, this.description);\n      }\n    }\n    /**\n     * Injects a span element into the DOM with the content.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_updateTextContent\",\n    value: function _updateTextContent() {\n      if (!this._badgeElement) {\n        this._badgeElement = this._createBadgeElement();\n      } else {\n        this._badgeElement.textContent = this.content;\n      }\n\n      return this._badgeElement;\n    }\n    /**\n     * Creates the badge element\n     * @return {?}\n     */\n\n  }, {\n    key: \"_createBadgeElement\",\n    value: function _createBadgeElement() {\n      /** @type {?} */\n      var rootNode = this._renderer || this._document;\n      /** @type {?} */\n\n      var badgeElement = rootNode.createElement('span');\n      /** @type {?} */\n\n      var activeClass = 'mat-badge-active';\n      badgeElement.setAttribute('id', \"mat-badge-content-\".concat(this._id));\n      badgeElement.classList.add('mat-badge-content');\n      badgeElement.textContent = this.content;\n\n      if (this.description) {\n        badgeElement.setAttribute('aria-label', this.description);\n      }\n\n      this._elementRef.nativeElement.appendChild(badgeElement); // animate in after insertion\n\n\n      if (typeof requestAnimationFrame === 'function') {\n        this._ngZone.runOutsideAngular(function () {\n          requestAnimationFrame(function () {\n            badgeElement.classList.add(activeClass);\n          });\n        });\n      } else {\n        badgeElement.classList.add(activeClass);\n      }\n\n      return badgeElement;\n    }\n    /**\n     * Sets the aria-label property on the element\n     * @param {?} newDescription\n     * @param {?} oldDescription\n     * @return {?}\n     */\n\n  }, {\n    key: \"_updateHostAriaDescription\",\n    value: function _updateHostAriaDescription(newDescription, oldDescription) {\n      /** @type {?} */\n      var content = this._updateTextContent();\n\n      if (oldDescription) {\n        this._ariaDescriber.removeDescription(content, oldDescription);\n      }\n\n      if (newDescription) {\n        this._ariaDescriber.describe(content, newDescription);\n      }\n    }\n    /**\n     * Adds css theme class given the color to the component host\n     * @param {?} colorPalette\n     * @return {?}\n     */\n\n  }, {\n    key: \"_setColor\",\n    value: function _setColor(colorPalette) {\n      if (colorPalette !== this._color) {\n        if (this._color) {\n          this._elementRef.nativeElement.classList.remove(\"mat-badge-\".concat(this._color));\n        }\n\n        if (colorPalette) {\n          this._elementRef.nativeElement.classList.add(\"mat-badge-\".concat(colorPalette));\n        }\n      }\n    }\n  }]);\n\n  return MatBadge;\n}(_MatBadgeMixinBase);\n\nMatBadge.ɵfac = function MatBadge_Factory(t) {\n  return new (t || MatBadge)(ɵngcc0.ɵɵdirectiveInject(DOCUMENT, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.AriaDescriber), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2));\n};\n\nMatBadge.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n  type: MatBadge,\n  selectors: [[\"\", \"matBadge\", \"\"]],\n  hostAttrs: [1, \"mat-badge\"],\n  hostVars: 20,\n  hostBindings: function MatBadge_HostBindings(rf, ctx) {\n    if (rf & 2) {\n      ɵngcc0.ɵɵclassProp(\"mat-badge-overlap\", ctx.overlap)(\"mat-badge-above\", ctx.isAbove())(\"mat-badge-below\", !ctx.isAbove())(\"mat-badge-before\", !ctx.isAfter())(\"mat-badge-after\", ctx.isAfter())(\"mat-badge-small\", ctx.size === \"small\")(\"mat-badge-medium\", ctx.size === \"medium\")(\"mat-badge-large\", ctx.size === \"large\")(\"mat-badge-hidden\", ctx.hidden || !ctx._hasContent)(\"mat-badge-disabled\", ctx.disabled);\n    }\n  },\n  inputs: {\n    disabled: [\"matBadgeDisabled\", \"disabled\"],\n    position: [\"matBadgePosition\", \"position\"],\n    size: [\"matBadgeSize\", \"size\"],\n    color: [\"matBadgeColor\", \"color\"],\n    overlap: [\"matBadgeOverlap\", \"overlap\"],\n    content: [\"matBadge\", \"content\"],\n    description: [\"matBadgeDescription\", \"description\"],\n    hidden: [\"matBadgeHidden\", \"hidden\"]\n  },\n  features: [ɵngcc0.ɵɵInheritDefinitionFeature]\n});\n/** @nocollapse */\n\nMatBadge.ctorParameters = function () {\n  return [{\n    type: undefined,\n    decorators: [{\n      type: Optional\n    }, {\n      type: Inject,\n      args: [DOCUMENT]\n    }]\n  }, {\n    type: NgZone\n  }, {\n    type: ElementRef\n  }, {\n    type: AriaDescriber\n  }, {\n    type: Renderer2\n  }];\n};\n\nMatBadge.propDecorators = {\n  color: [{\n    type: Input,\n    args: ['matBadgeColor']\n  }],\n  overlap: [{\n    type: Input,\n    args: ['matBadgeOverlap']\n  }],\n  position: [{\n    type: Input,\n    args: ['matBadgePosition']\n  }],\n  content: [{\n    type: Input,\n    args: ['matBadge']\n  }],\n  description: [{\n    type: Input,\n    args: ['matBadgeDescription']\n  }],\n  size: [{\n    type: Input,\n    args: ['matBadgeSize']\n  }],\n  hidden: [{\n    type: Input,\n    args: ['matBadgeHidden']\n  }]\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatBadge, [{\n    type: Directive,\n    args: [{\n      selector: '[matBadge]',\n      inputs: ['disabled: matBadgeDisabled'],\n      host: {\n        'class': 'mat-badge',\n        '[class.mat-badge-overlap]': 'overlap',\n        '[class.mat-badge-above]': 'isAbove()',\n        '[class.mat-badge-below]': '!isAbove()',\n        '[class.mat-badge-before]': '!isAfter()',\n        '[class.mat-badge-after]': 'isAfter()',\n        '[class.mat-badge-small]': 'size === \"small\"',\n        '[class.mat-badge-medium]': 'size === \"medium\"',\n        '[class.mat-badge-large]': 'size === \"large\"',\n        '[class.mat-badge-hidden]': 'hidden || !_hasContent',\n        '[class.mat-badge-disabled]': 'disabled'\n      }\n    }]\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }, {\n      type: ɵngcc0.NgZone\n    }, {\n      type: ɵngcc0.ElementRef\n    }, {\n      type: ɵngcc1.AriaDescriber\n    }, {\n      type: ɵngcc0.Renderer2\n    }];\n  }, {\n    position: [{\n      type: Input,\n      args: ['matBadgePosition']\n    }],\n    size: [{\n      type: Input,\n      args: ['matBadgeSize']\n    }],\n    color: [{\n      type: Input,\n      args: ['matBadgeColor']\n    }],\n    overlap: [{\n      type: Input,\n      args: ['matBadgeOverlap']\n    }],\n    content: [{\n      type: Input,\n      args: ['matBadge']\n    }],\n    description: [{\n      type: Input,\n      args: ['matBadgeDescription']\n    }],\n    hidden: [{\n      type: Input,\n      args: ['matBadgeHidden']\n    }]\n  });\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n\nvar MatBadgeModule = function MatBadgeModule() {\n  _classCallCheck(this, MatBadgeModule);\n};\n\nMatBadgeModule.ɵfac = function MatBadgeModule_Factory(t) {\n  return new (t || MatBadgeModule)();\n};\n\nMatBadgeModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n  type: MatBadgeModule\n});\nMatBadgeModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n  imports: [[A11yModule, MatCommonModule]]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatBadgeModule, [{\n    type: NgModule,\n    args: [{\n      imports: [A11yModule, MatCommonModule],\n      exports: [MatBadge],\n      declarations: [MatBadge]\n    }]\n  }], null, null);\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatBadgeModule, {\n    declarations: function declarations() {\n      return [MatBadge];\n    },\n    imports: function imports() {\n      return [A11yModule, MatCommonModule];\n    },\n    exports: function exports() {\n      return [MatBadge];\n    }\n  });\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n\nexport { MatBadgeModule, MatBadgeBase, _MatBadgeMixinBase, MatBadge }; //# sourceMappingURL=badge.js.map","map":{"version":3,"sources":["/Users/adepertat/Dropbox/ECOLES/Openclassroom/P6_de_Pertat_Antoine/AntoinedePertat_6_240521/frontend/node_modules/@angular/material/__ivy_ngcc__/esm2015/badge.js"],"names":["AriaDescriber","A11yModule","coerceBooleanProperty","DOCUMENT","Directive","ElementRef","Inject","Input","NgZone","Optional","Renderer2","NgModule","mixinDisabled","MatCommonModule","ɵngcc0","ɵngcc1","nextId","MatBadgeBase","_MatBadgeMixinBase","MatBadge","_document","_ngZone","_elementRef","_ariaDescriber","_renderer","_hasContent","_color","_overlap","position","size","_id","value","_setColor","val","_content","trim","length","_updateTextContent","_description","newDescription","_updateHostAriaDescription","_hidden","indexOf","description","_badgeElement","removeDescription","_createBadgeElement","textContent","content","rootNode","badgeElement","createElement","activeClass","setAttribute","classList","add","nativeElement","appendChild","requestAnimationFrame","runOutsideAngular","oldDescription","describe","colorPalette","remove","ɵfac","MatBadge_Factory","t","ɵɵdirectiveInject","ɵdir","ɵɵdefineDirective","type","selectors","hostAttrs","hostVars","hostBindings","MatBadge_HostBindings","rf","ctx","ɵɵclassProp","overlap","isAbove","isAfter","hidden","disabled","inputs","color","features","ɵɵInheritDefinitionFeature","ctorParameters","undefined","decorators","args","propDecorators","ngDevMode","ɵsetClassMetadata","selector","host","MatBadgeModule","MatBadgeModule_Factory","ɵmod","ɵɵdefineNgModule","ɵinj","ɵɵdefineInjector","imports","exports","declarations","ngJitMode","ɵɵsetNgModuleScope"],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { AriaDescriber, A11yModule } from '@angular/cdk/a11y';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { DOCUMENT } from '@angular/common';\nimport { Directive, ElementRef, Inject, Input, NgZone, Optional, Renderer2, NgModule } from '@angular/core';\nimport { mixinDisabled, MatCommonModule } from '@angular/material/core';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/** @type {?} */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/a11y';\nlet nextId = 0;\n/**\n * \\@docs-private\n */\nclass MatBadgeBase {\n}\n/** @type {?} */\nconst _MatBadgeMixinBase = mixinDisabled(MatBadgeBase);\n/**\n * Directive to display a text badge.\n */\nclass MatBadge extends _MatBadgeMixinBase {\n    /**\n     * @param {?} _document\n     * @param {?} _ngZone\n     * @param {?} _elementRef\n     * @param {?} _ariaDescriber\n     * @param {?=} _renderer\n     */\n    constructor(_document, _ngZone, _elementRef, _ariaDescriber, _renderer) {\n        super();\n        this._document = _document;\n        this._ngZone = _ngZone;\n        this._elementRef = _elementRef;\n        this._ariaDescriber = _ariaDescriber;\n        this._renderer = _renderer;\n        /**\n         * Whether the badge has any content.\n         */\n        this._hasContent = false;\n        this._color = 'primary';\n        this._overlap = true;\n        /**\n         * Position the badge should reside.\n         * Accepts any combination of 'above'|'below' and 'before'|'after'\n         */\n        this.position = 'above after';\n        /**\n         * Size of the badge. Can be 'small', 'medium', or 'large'.\n         */\n        this.size = 'medium';\n        /**\n         * Unique id for the badge\n         */\n        this._id = nextId++;\n    }\n    /**\n     * The color of the badge. Can be `primary`, `accent`, or `warn`.\n     * @return {?}\n     */\n    get color() { return this._color; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set color(value) {\n        this._setColor(value);\n        this._color = value;\n    }\n    /**\n     * Whether the badge should overlap its contents or not\n     * @return {?}\n     */\n    get overlap() { return this._overlap; }\n    /**\n     * @param {?} val\n     * @return {?}\n     */\n    set overlap(val) {\n        this._overlap = coerceBooleanProperty(val);\n    }\n    /**\n     * The content for the badge\n     * @return {?}\n     */\n    get content() { return this._content; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set content(value) {\n        this._content = value;\n        this._hasContent = value != null && `${value}`.trim().length > 0;\n        this._updateTextContent();\n    }\n    /**\n     * Message used to describe the decorated element via aria-describedby\n     * @return {?}\n     */\n    get description() { return this._description; }\n    /**\n     * @param {?} newDescription\n     * @return {?}\n     */\n    set description(newDescription) {\n        if (newDescription !== this._description) {\n            this._updateHostAriaDescription(newDescription, this._description);\n            this._description = newDescription;\n        }\n    }\n    /**\n     * Whether the badge is hidden.\n     * @return {?}\n     */\n    get hidden() { return this._hidden; }\n    /**\n     * @param {?} val\n     * @return {?}\n     */\n    set hidden(val) {\n        this._hidden = coerceBooleanProperty(val);\n    }\n    /**\n     * Whether the badge is above the host or not\n     * @return {?}\n     */\n    isAbove() {\n        return this.position.indexOf('below') === -1;\n    }\n    /**\n     * Whether the badge is after the host or not\n     * @return {?}\n     */\n    isAfter() {\n        return this.position.indexOf('before') === -1;\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        if (this.description && this._badgeElement) {\n            this._ariaDescriber.removeDescription(this._badgeElement, this.description);\n        }\n    }\n    /**\n     * Injects a span element into the DOM with the content.\n     * @return {?}\n     */\n    _updateTextContent() {\n        if (!this._badgeElement) {\n            this._badgeElement = this._createBadgeElement();\n        }\n        else {\n            this._badgeElement.textContent = this.content;\n        }\n        return this._badgeElement;\n    }\n    /**\n     * Creates the badge element\n     * @return {?}\n     */\n    _createBadgeElement() {\n        /** @type {?} */\n        const rootNode = this._renderer || this._document;\n        /** @type {?} */\n        const badgeElement = rootNode.createElement('span');\n        /** @type {?} */\n        const activeClass = 'mat-badge-active';\n        badgeElement.setAttribute('id', `mat-badge-content-${this._id}`);\n        badgeElement.classList.add('mat-badge-content');\n        badgeElement.textContent = this.content;\n        if (this.description) {\n            badgeElement.setAttribute('aria-label', this.description);\n        }\n        this._elementRef.nativeElement.appendChild(badgeElement);\n        // animate in after insertion\n        if (typeof requestAnimationFrame === 'function') {\n            this._ngZone.runOutsideAngular(() => {\n                requestAnimationFrame(() => {\n                    badgeElement.classList.add(activeClass);\n                });\n            });\n        }\n        else {\n            badgeElement.classList.add(activeClass);\n        }\n        return badgeElement;\n    }\n    /**\n     * Sets the aria-label property on the element\n     * @param {?} newDescription\n     * @param {?} oldDescription\n     * @return {?}\n     */\n    _updateHostAriaDescription(newDescription, oldDescription) {\n        /** @type {?} */\n        const content = this._updateTextContent();\n        if (oldDescription) {\n            this._ariaDescriber.removeDescription(content, oldDescription);\n        }\n        if (newDescription) {\n            this._ariaDescriber.describe(content, newDescription);\n        }\n    }\n    /**\n     * Adds css theme class given the color to the component host\n     * @param {?} colorPalette\n     * @return {?}\n     */\n    _setColor(colorPalette) {\n        if (colorPalette !== this._color) {\n            if (this._color) {\n                this._elementRef.nativeElement.classList.remove(`mat-badge-${this._color}`);\n            }\n            if (colorPalette) {\n                this._elementRef.nativeElement.classList.add(`mat-badge-${colorPalette}`);\n            }\n        }\n    }\n}\nMatBadge.ɵfac = function MatBadge_Factory(t) { return new (t || MatBadge)(ɵngcc0.ɵɵdirectiveInject(DOCUMENT, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.AriaDescriber), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2)); };\nMatBadge.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: MatBadge, selectors: [[\"\", \"matBadge\", \"\"]], hostAttrs: [1, \"mat-badge\"], hostVars: 20, hostBindings: function MatBadge_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"mat-badge-overlap\", ctx.overlap)(\"mat-badge-above\", ctx.isAbove())(\"mat-badge-below\", !ctx.isAbove())(\"mat-badge-before\", !ctx.isAfter())(\"mat-badge-after\", ctx.isAfter())(\"mat-badge-small\", ctx.size === \"small\")(\"mat-badge-medium\", ctx.size === \"medium\")(\"mat-badge-large\", ctx.size === \"large\")(\"mat-badge-hidden\", ctx.hidden || !ctx._hasContent)(\"mat-badge-disabled\", ctx.disabled);\n    } }, inputs: { disabled: [\"matBadgeDisabled\", \"disabled\"], position: [\"matBadgePosition\", \"position\"], size: [\"matBadgeSize\", \"size\"], color: [\"matBadgeColor\", \"color\"], overlap: [\"matBadgeOverlap\", \"overlap\"], content: [\"matBadge\", \"content\"], description: [\"matBadgeDescription\", \"description\"], hidden: [\"matBadgeHidden\", \"hidden\"] }, features: [ɵngcc0.ɵɵInheritDefinitionFeature] });\n/** @nocollapse */\nMatBadge.ctorParameters = () => [\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DOCUMENT,] }] },\n    { type: NgZone },\n    { type: ElementRef },\n    { type: AriaDescriber },\n    { type: Renderer2 }\n];\nMatBadge.propDecorators = {\n    color: [{ type: Input, args: ['matBadgeColor',] }],\n    overlap: [{ type: Input, args: ['matBadgeOverlap',] }],\n    position: [{ type: Input, args: ['matBadgePosition',] }],\n    content: [{ type: Input, args: ['matBadge',] }],\n    description: [{ type: Input, args: ['matBadgeDescription',] }],\n    size: [{ type: Input, args: ['matBadgeSize',] }],\n    hidden: [{ type: Input, args: ['matBadgeHidden',] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatBadge, [{\n        type: Directive,\n        args: [{\n                selector: '[matBadge]',\n                inputs: ['disabled: matBadgeDisabled'],\n                host: {\n                    'class': 'mat-badge',\n                    '[class.mat-badge-overlap]': 'overlap',\n                    '[class.mat-badge-above]': 'isAbove()',\n                    '[class.mat-badge-below]': '!isAbove()',\n                    '[class.mat-badge-before]': '!isAfter()',\n                    '[class.mat-badge-after]': 'isAfter()',\n                    '[class.mat-badge-small]': 'size === \"small\"',\n                    '[class.mat-badge-medium]': 'size === \"medium\"',\n                    '[class.mat-badge-large]': 'size === \"large\"',\n                    '[class.mat-badge-hidden]': 'hidden || !_hasContent',\n                    '[class.mat-badge-disabled]': 'disabled'\n                }\n            }]\n    }], function () { return [{ type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [DOCUMENT]\n            }] }, { type: ɵngcc0.NgZone }, { type: ɵngcc0.ElementRef }, { type: ɵngcc1.AriaDescriber }, { type: ɵngcc0.Renderer2 }]; }, { position: [{\n            type: Input,\n            args: ['matBadgePosition']\n        }], size: [{\n            type: Input,\n            args: ['matBadgeSize']\n        }], color: [{\n            type: Input,\n            args: ['matBadgeColor']\n        }], overlap: [{\n            type: Input,\n            args: ['matBadgeOverlap']\n        }], content: [{\n            type: Input,\n            args: ['matBadge']\n        }], description: [{\n            type: Input,\n            args: ['matBadgeDescription']\n        }], hidden: [{\n            type: Input,\n            args: ['matBadgeHidden']\n        }] }); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\nclass MatBadgeModule {\n}\nMatBadgeModule.ɵfac = function MatBadgeModule_Factory(t) { return new (t || MatBadgeModule)(); };\nMatBadgeModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: MatBadgeModule });\nMatBadgeModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ imports: [[\n            A11yModule,\n            MatCommonModule\n        ]] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatBadgeModule, [{\n        type: NgModule,\n        args: [{\n                imports: [\n                    A11yModule,\n                    MatCommonModule\n                ],\n                exports: [MatBadge],\n                declarations: [MatBadge]\n            }]\n    }], null, null); })();\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatBadgeModule, { declarations: function () { return [MatBadge]; }, imports: function () { return [A11yModule,\n        MatCommonModule]; }, exports: function () { return [MatBadge]; } }); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\nexport { MatBadgeModule, MatBadgeBase, _MatBadgeMixinBase, MatBadge };\n\n//# sourceMappingURL=badge.js.map"]},"metadata":{},"sourceType":"module"}