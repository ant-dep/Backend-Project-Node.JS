{"ast":null,"code":"import _createForOfIteratorHelper from \"/Users/adepertat/Dropbox/ECOLES/Openclassroom/P6_de_Pertat_Antoine/AntoinedePertat_6_240521/frontend/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper\";\nimport _createClass from \"/Users/adepertat/Dropbox/ECOLES/Openclassroom/P6_de_Pertat_Antoine/AntoinedePertat_6_240521/frontend/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/Users/adepertat/Dropbox/ECOLES/Openclassroom/P6_de_Pertat_Antoine/AntoinedePertat_6_240521/frontend/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/adepertat/Dropbox/ECOLES/Openclassroom/P6_de_Pertat_Antoine/AntoinedePertat_6_240521/frontend/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _classCallCheck from \"/Users/adepertat/Dropbox/ECOLES/Openclassroom/P6_de_Pertat_Antoine/AntoinedePertat_6_240521/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { FocusMonitor } from '@angular/cdk/a11y';\nimport { Platform } from '@angular/cdk/platform';\nimport { ChangeDetectionStrategy, Component, ElementRef, ViewChild, ViewEncapsulation, Optional, Inject, Input, NgModule } from '@angular/core';\nimport { MatRipple, mixinColor, mixinDisabled, mixinDisableRipple, MatCommonModule, MatRippleModule } from '@angular/material/core';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\nimport { CommonModule } from '@angular/common';\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/** *\n * Default color palette for round buttons (mat-fab and mat-mini-fab)\n  @type {?} */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/platform';\nimport * as ɵngcc2 from '@angular/cdk/a11y';\nimport * as ɵngcc3 from '@angular/material/core';\nvar _c0 = [\"mat-button\", \"\"];\nvar _c1 = [\"*\"];\nvar _c2 = \".mat-button .mat-button-focus-overlay,.mat-icon-button .mat-button-focus-overlay{opacity:0}.mat-button:hover .mat-button-focus-overlay,.mat-stroked-button:hover .mat-button-focus-overlay{opacity:.04}@media (hover:none){.mat-button:hover .mat-button-focus-overlay,.mat-stroked-button:hover .mat-button-focus-overlay{opacity:0}}.mat-button,.mat-flat-button,.mat-icon-button,.mat-stroked-button{box-sizing:border-box;position:relative;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:pointer;outline:0;border:none;-webkit-tap-highlight-color:transparent;display:inline-block;white-space:nowrap;text-decoration:none;vertical-align:baseline;text-align:center;margin:0;min-width:64px;line-height:36px;padding:0 16px;border-radius:4px;overflow:visible}.mat-button::-moz-focus-inner,.mat-flat-button::-moz-focus-inner,.mat-icon-button::-moz-focus-inner,.mat-stroked-button::-moz-focus-inner{border:0}.mat-button[disabled],.mat-flat-button[disabled],.mat-icon-button[disabled],.mat-stroked-button[disabled]{cursor:default}.mat-button.cdk-keyboard-focused .mat-button-focus-overlay,.mat-button.cdk-program-focused .mat-button-focus-overlay,.mat-flat-button.cdk-keyboard-focused .mat-button-focus-overlay,.mat-flat-button.cdk-program-focused .mat-button-focus-overlay,.mat-icon-button.cdk-keyboard-focused .mat-button-focus-overlay,.mat-icon-button.cdk-program-focused .mat-button-focus-overlay,.mat-stroked-button.cdk-keyboard-focused .mat-button-focus-overlay,.mat-stroked-button.cdk-program-focused .mat-button-focus-overlay{opacity:.12}.mat-button::-moz-focus-inner,.mat-flat-button::-moz-focus-inner,.mat-icon-button::-moz-focus-inner,.mat-stroked-button::-moz-focus-inner{border:0}.mat-raised-button{box-sizing:border-box;position:relative;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:pointer;outline:0;border:none;-webkit-tap-highlight-color:transparent;display:inline-block;white-space:nowrap;text-decoration:none;vertical-align:baseline;text-align:center;margin:0;min-width:64px;line-height:36px;padding:0 16px;border-radius:4px;overflow:visible;transform:translate3d(0,0,0);transition:background .4s cubic-bezier(.25,.8,.25,1),box-shadow 280ms cubic-bezier(.4,0,.2,1)}.mat-raised-button::-moz-focus-inner{border:0}.mat-raised-button[disabled]{cursor:default}.mat-raised-button.cdk-keyboard-focused .mat-button-focus-overlay,.mat-raised-button.cdk-program-focused .mat-button-focus-overlay{opacity:.12}.mat-raised-button::-moz-focus-inner{border:0}._mat-animation-noopable.mat-raised-button{transition:none;animation:none}.mat-stroked-button{border:1px solid currentColor;padding:0 15px;line-height:34px}.mat-fab{box-sizing:border-box;position:relative;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:pointer;outline:0;border:none;-webkit-tap-highlight-color:transparent;display:inline-block;white-space:nowrap;text-decoration:none;vertical-align:baseline;text-align:center;margin:0;min-width:64px;line-height:36px;padding:0 16px;border-radius:4px;overflow:visible;transform:translate3d(0,0,0);transition:background .4s cubic-bezier(.25,.8,.25,1),box-shadow 280ms cubic-bezier(.4,0,.2,1);min-width:0;border-radius:50%;width:56px;height:56px;padding:0;flex-shrink:0}.mat-fab::-moz-focus-inner{border:0}.mat-fab[disabled]{cursor:default}.mat-fab.cdk-keyboard-focused .mat-button-focus-overlay,.mat-fab.cdk-program-focused .mat-button-focus-overlay{opacity:.12}.mat-fab::-moz-focus-inner{border:0}._mat-animation-noopable.mat-fab{transition:none;animation:none}.mat-fab .mat-button-wrapper{padding:16px 0;display:inline-block;line-height:24px}.mat-mini-fab{box-sizing:border-box;position:relative;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:pointer;outline:0;border:none;-webkit-tap-highlight-color:transparent;display:inline-block;white-space:nowrap;text-decoration:none;vertical-align:baseline;text-align:center;margin:0;min-width:64px;line-height:36px;padding:0 16px;border-radius:4px;overflow:visible;transform:translate3d(0,0,0);transition:background .4s cubic-bezier(.25,.8,.25,1),box-shadow 280ms cubic-bezier(.4,0,.2,1);min-width:0;border-radius:50%;width:40px;height:40px;padding:0;flex-shrink:0}.mat-mini-fab::-moz-focus-inner{border:0}.mat-mini-fab[disabled]{cursor:default}.mat-mini-fab.cdk-keyboard-focused .mat-button-focus-overlay,.mat-mini-fab.cdk-program-focused .mat-button-focus-overlay{opacity:.12}.mat-mini-fab::-moz-focus-inner{border:0}._mat-animation-noopable.mat-mini-fab{transition:none;animation:none}.mat-mini-fab .mat-button-wrapper{padding:8px 0;display:inline-block;line-height:24px}.mat-icon-button{padding:0;min-width:0;width:40px;height:40px;flex-shrink:0;line-height:40px;border-radius:50%}.mat-icon-button .mat-icon,.mat-icon-button i{line-height:24px}.mat-button-focus-overlay,.mat-button-ripple.mat-ripple{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none;border-radius:inherit}.mat-button-focus-overlay{border-radius:inherit;opacity:0;transition:opacity .2s cubic-bezier(.35,0,.25,1),background-color .2s cubic-bezier(.35,0,.25,1)}._mat-animation-noopable .mat-button-focus-overlay{transition:none}@media screen and (-ms-high-contrast:active){.mat-button-focus-overlay{background-color:rgba(255,255,255,.5)}}.mat-button-ripple-round{border-radius:50%;z-index:1}.mat-button .mat-button-wrapper>*,.mat-fab .mat-button-wrapper>*,.mat-flat-button .mat-button-wrapper>*,.mat-icon-button .mat-button-wrapper>*,.mat-mini-fab .mat-button-wrapper>*,.mat-raised-button .mat-button-wrapper>*,.mat-stroked-button .mat-button-wrapper>*{vertical-align:middle}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .mat-icon-button,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .mat-icon-button{display:block;font-size:inherit;width:2.5em;height:2.5em}@media screen and (-ms-high-contrast:active){.mat-button,.mat-fab,.mat-flat-button,.mat-icon-button,.mat-mini-fab,.mat-raised-button{outline:solid 1px}}\";\nvar DEFAULT_ROUND_BUTTON_COLOR = 'accent';\n/** *\n * List of classes to add to MatButton instances based on host attributes to\n * style as different variants.\n  @type {?} */\n\nvar BUTTON_HOST_ATTRIBUTES = ['mat-button', 'mat-flat-button', 'mat-icon-button', 'mat-raised-button', 'mat-stroked-button', 'mat-mini-fab', 'mat-fab'];\n/**\n * \\@docs-private\n */\n\nvar MatButtonBase =\n/**\n * @param {?} _elementRef\n */\nfunction MatButtonBase(_elementRef) {\n  _classCallCheck(this, MatButtonBase);\n\n  this._elementRef = _elementRef;\n};\n/** @type {?} */\n\n\nvar _MatButtonMixinBase = /*@__PURE__*/mixinColor( /*@__PURE__*/mixinDisabled( /*@__PURE__*/mixinDisableRipple(MatButtonBase)));\n\nvar MatButton = /*@__PURE__*/function () {\n  var MatButton = /*#__PURE__*/function (_MatButtonMixinBase2) {\n    _inherits(MatButton, _MatButtonMixinBase2);\n\n    var _super = _createSuper(MatButton);\n\n    /**\n     * @param {?} elementRef\n     * @param {?} _platform\n     * @param {?} _focusMonitor\n     * @param {?=} _animationMode\n     */\n    function MatButton(elementRef, _platform, _focusMonitor, // @breaking-change 8.0.0 `_animationMode` parameter to be made required.\n    _animationMode) {\n      var _this;\n\n      _classCallCheck(this, MatButton);\n\n      _this = _super.call(this, elementRef);\n      _this._platform = _platform;\n      _this._focusMonitor = _focusMonitor;\n      _this._animationMode = _animationMode;\n      /**\n       * Whether the button is round.\n       */\n\n      _this.isRoundButton = _this._hasHostAttributes('mat-fab', 'mat-mini-fab');\n      /**\n       * Whether the button is icon button.\n       */\n\n      _this.isIconButton = _this._hasHostAttributes('mat-icon-button'); // For each of the variant selectors that is prevent in the button's host\n      // attributes, add the correct corresponding class.\n\n      var _iterator = _createForOfIteratorHelper(BUTTON_HOST_ATTRIBUTES),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var attr = _step.value;\n\n          if (_this._hasHostAttributes(attr)) {\n            /** @type {?} */\n            elementRef.nativeElement.classList.add(attr);\n          }\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      _this._focusMonitor.monitor(_this._elementRef, true);\n\n      if (_this.isRoundButton) {\n        _this.color = DEFAULT_ROUND_BUTTON_COLOR;\n      }\n\n      return _this;\n    }\n    /**\n     * @return {?}\n     */\n\n\n    _createClass(MatButton, [{\n      key: \"ngOnDestroy\",\n      value: function ngOnDestroy() {\n        this._focusMonitor.stopMonitoring(this._elementRef);\n      }\n      /**\n       * Focuses the button.\n       * @return {?}\n       */\n\n    }, {\n      key: \"focus\",\n      value: function focus() {\n        this._getHostElement().focus();\n      }\n      /**\n       * @return {?}\n       */\n\n    }, {\n      key: \"_getHostElement\",\n      value: function _getHostElement() {\n        return this._elementRef.nativeElement;\n      }\n      /**\n       * @return {?}\n       */\n\n    }, {\n      key: \"_isRippleDisabled\",\n      value: function _isRippleDisabled() {\n        return this.disableRipple || this.disabled;\n      }\n      /**\n       * Gets whether the button has one of the given attributes.\n       * @param {...?} attributes\n       * @return {?}\n       */\n\n    }, {\n      key: \"_hasHostAttributes\",\n      value: function _hasHostAttributes() {\n        var _this2 = this;\n\n        for (var _len = arguments.length, attributes = new Array(_len), _key = 0; _key < _len; _key++) {\n          attributes[_key] = arguments[_key];\n        }\n\n        return attributes.some(function (attribute) {\n          return _this2._getHostElement().hasAttribute(attribute);\n        });\n      }\n    }]);\n\n    return MatButton;\n  }(_MatButtonMixinBase);\n\n  MatButton.ɵfac = function MatButton_Factory(t) {\n    return new (t || MatButton)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.Platform), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.FocusMonitor), ɵngcc0.ɵɵdirectiveInject(ANIMATION_MODULE_TYPE, 8));\n  };\n\n  MatButton.ɵcmp =\n  /*@__PURE__*/\n\n  /*@__PURE__*/\n  ɵngcc0.ɵɵdefineComponent({\n    type: MatButton,\n    selectors: [[\"button\", \"mat-button\", \"\"], [\"button\", \"mat-raised-button\", \"\"], [\"button\", \"mat-icon-button\", \"\"], [\"button\", \"mat-fab\", \"\"], [\"button\", \"mat-mini-fab\", \"\"], [\"button\", \"mat-stroked-button\", \"\"], [\"button\", \"mat-flat-button\", \"\"]],\n    viewQuery: function MatButton_Query(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(MatRipple, 5);\n      }\n\n      if (rf & 2) {\n        var _t;\n\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.ripple = _t.first);\n      }\n    },\n    hostVars: 3,\n    hostBindings: function MatButton_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        ɵngcc0.ɵɵhostProperty(\"disabled\", ctx.disabled || null);\n        ɵngcc0.ɵɵclassProp(\"_mat-animation-noopable\", ctx._animationMode === \"NoopAnimations\");\n      }\n    },\n    inputs: {\n      disabled: \"disabled\",\n      disableRipple: \"disableRipple\",\n      color: \"color\"\n    },\n    exportAs: [\"matButton\"],\n    features: [ɵngcc0.ɵɵInheritDefinitionFeature],\n    attrs: _c0,\n    ngContentSelectors: _c1,\n    decls: 4,\n    vars: 5,\n    consts: [[1, \"mat-button-wrapper\"], [\"matRipple\", \"\", 1, \"mat-button-ripple\", 3, \"matRippleDisabled\", \"matRippleCentered\", \"matRippleTrigger\"], [1, \"mat-button-focus-overlay\"]],\n    template: function MatButton_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵelementStart(0, \"span\", 0);\n        ɵngcc0.ɵɵprojection(1);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelement(2, \"div\", 1);\n        ɵngcc0.ɵɵelement(3, \"div\", 2);\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵclassProp(\"mat-button-ripple-round\", ctx.isRoundButton || ctx.isIconButton);\n        ɵngcc0.ɵɵproperty(\"matRippleDisabled\", ctx._isRippleDisabled())(\"matRippleCentered\", ctx.isIconButton)(\"matRippleTrigger\", ctx._getHostElement());\n      }\n    },\n    directives: [ɵngcc3.MatRipple],\n    styles: [_c2],\n    encapsulation: 2,\n    changeDetection: 0\n  });\n  return MatButton;\n}();\n\nvar MatAnchor = /*@__PURE__*/function () {\n  var MatAnchor = /*#__PURE__*/function (_MatButton) {\n    _inherits(MatAnchor, _MatButton);\n\n    var _super2 = _createSuper(MatAnchor);\n\n    /**\n     * @param {?} platform\n     * @param {?} focusMonitor\n     * @param {?} elementRef\n     * @param {?=} animationMode\n     */\n    function MatAnchor(platform, focusMonitor, elementRef, // @breaking-change 8.0.0 `animationMode` parameter to be made required.\n    animationMode) {\n      _classCallCheck(this, MatAnchor);\n\n      return _super2.call(this, elementRef, platform, focusMonitor, animationMode);\n    }\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n\n\n    _createClass(MatAnchor, [{\n      key: \"_haltDisabledEvents\",\n      value: function _haltDisabledEvents(event) {\n        // A disabled button shouldn't apply any actions\n        if (this.disabled) {\n          event.preventDefault();\n          event.stopImmediatePropagation();\n        }\n      }\n    }]);\n\n    return MatAnchor;\n  }(MatButton);\n\n  MatAnchor.ɵfac = function MatAnchor_Factory(t) {\n    return new (t || MatAnchor)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.Platform), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.FocusMonitor), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ANIMATION_MODULE_TYPE, 8));\n  };\n\n  MatAnchor.ɵcmp =\n  /*@__PURE__*/\n\n  /*@__PURE__*/\n  ɵngcc0.ɵɵdefineComponent({\n    type: MatAnchor,\n    selectors: [[\"a\", \"mat-button\", \"\"], [\"a\", \"mat-raised-button\", \"\"], [\"a\", \"mat-icon-button\", \"\"], [\"a\", \"mat-fab\", \"\"], [\"a\", \"mat-mini-fab\", \"\"], [\"a\", \"mat-stroked-button\", \"\"], [\"a\", \"mat-flat-button\", \"\"]],\n    hostVars: 5,\n    hostBindings: function MatAnchor_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"click\", function MatAnchor_click_HostBindingHandler($event) {\n          return ctx._haltDisabledEvents($event);\n        });\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"tabindex\", ctx.disabled ? -1 : ctx.tabIndex || 0)(\"disabled\", ctx.disabled || null)(\"aria-disabled\", ctx.disabled.toString());\n        ɵngcc0.ɵɵclassProp(\"_mat-animation-noopable\", ctx._animationMode === \"NoopAnimations\");\n      }\n    },\n    inputs: {\n      disabled: \"disabled\",\n      disableRipple: \"disableRipple\",\n      color: \"color\",\n      tabIndex: \"tabIndex\"\n    },\n    exportAs: [\"matButton\", \"matAnchor\"],\n    features: [ɵngcc0.ɵɵInheritDefinitionFeature],\n    attrs: _c0,\n    ngContentSelectors: _c1,\n    decls: 4,\n    vars: 5,\n    consts: [[1, \"mat-button-wrapper\"], [\"matRipple\", \"\", 1, \"mat-button-ripple\", 3, \"matRippleDisabled\", \"matRippleCentered\", \"matRippleTrigger\"], [1, \"mat-button-focus-overlay\"]],\n    template: function MatAnchor_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵelementStart(0, \"span\", 0);\n        ɵngcc0.ɵɵprojection(1);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelement(2, \"div\", 1);\n        ɵngcc0.ɵɵelement(3, \"div\", 2);\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵclassProp(\"mat-button-ripple-round\", ctx.isRoundButton || ctx.isIconButton);\n        ɵngcc0.ɵɵproperty(\"matRippleDisabled\", ctx._isRippleDisabled())(\"matRippleCentered\", ctx.isIconButton)(\"matRippleTrigger\", ctx._getHostElement());\n      }\n    },\n    directives: [ɵngcc3.MatRipple],\n    styles: [_c2],\n    encapsulation: 2,\n    changeDetection: 0\n  });\n  return MatAnchor;\n}();\n\nvar MatButtonModule = /*@__PURE__*/function () {\n  var MatButtonModule = function MatButtonModule() {\n    _classCallCheck(this, MatButtonModule);\n  };\n\n  MatButtonModule.ɵfac = function MatButtonModule_Factory(t) {\n    return new (t || MatButtonModule)();\n  };\n\n  MatButtonModule.ɵmod =\n  /*@__PURE__*/\n\n  /*@__PURE__*/\n  ɵngcc0.ɵɵdefineNgModule({\n    type: MatButtonModule\n  });\n  MatButtonModule.ɵinj =\n  /*@__PURE__*/\n\n  /*@__PURE__*/\n  ɵngcc0.ɵɵdefineInjector({\n    imports: [[CommonModule, MatRippleModule, MatCommonModule], MatCommonModule]\n  });\n  return MatButtonModule;\n}();\n/*@__PURE__*/\n\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatButtonModule, {\n    declarations: function declarations() {\n      return [MatButton, MatAnchor];\n    },\n    imports: function imports() {\n      return [CommonModule, MatRippleModule, MatCommonModule];\n    },\n    exports: function exports() {\n      return [MatButton, MatAnchor, MatCommonModule];\n    }\n  });\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n\nexport { MatButtonModule, MatButtonBase, _MatButtonMixinBase, MatButton, MatAnchor }; //# sourceMappingURL=button.js.map","map":null,"metadata":{},"sourceType":"module"}