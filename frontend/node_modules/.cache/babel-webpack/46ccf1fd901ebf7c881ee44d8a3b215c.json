{"ast":null,"code":"import _createForOfIteratorHelper from \"/Users/adepertat/Dropbox/ECOLES/Openclassroom/P6_de_Pertat_Antoine/AntoinedePertat_6_240521/frontend/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper\";\nimport _createClass from \"/Users/adepertat/Dropbox/ECOLES/Openclassroom/P6_de_Pertat_Antoine/AntoinedePertat_6_240521/frontend/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/Users/adepertat/Dropbox/ECOLES/Openclassroom/P6_de_Pertat_Antoine/AntoinedePertat_6_240521/frontend/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/adepertat/Dropbox/ECOLES/Openclassroom/P6_de_Pertat_Antoine/AntoinedePertat_6_240521/frontend/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _classCallCheck from \"/Users/adepertat/Dropbox/ECOLES/Openclassroom/P6_de_Pertat_Antoine/AntoinedePertat_6_240521/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Directive, Input, ChangeDetectionStrategy, ChangeDetectorRef, Component, ContentChild, ContentChildren, ElementRef, Inject, InjectionToken, NgZone, Optional, ViewChild, ViewEncapsulation, NgModule } from '@angular/core';\nimport { animate, state, style, transition, trigger } from '@angular/animations';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { MAT_LABEL_GLOBAL_OPTIONS, mixinColor } from '@angular/material/core';\nimport { fromEvent, merge } from 'rxjs';\nimport { startWith, take } from 'rxjs/operators';\nimport { Platform } from '@angular/cdk/platform';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\nimport { CommonModule } from '@angular/common';\nimport { ObserversModule } from '@angular/cdk/observers';\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/** @type {?} */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/bidi';\nimport * as ɵngcc2 from '@angular/cdk/platform';\nimport * as ɵngcc3 from '@angular/common';\nimport * as ɵngcc4 from '@angular/cdk/observers';\nvar _c0 = [\"underline\"];\nvar _c1 = [\"connectionContainer\"];\nvar _c2 = [\"inputContainer\"];\nvar _c3 = [\"label\"];\n\nfunction MatFormField_ng_container_3_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementContainerStart(0);\n    ɵngcc0.ɵɵelementStart(1, \"div\", 14);\n    ɵngcc0.ɵɵelement(2, \"div\", 15);\n    ɵngcc0.ɵɵelement(3, \"div\", 16);\n    ɵngcc0.ɵɵelement(4, \"div\", 17);\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementStart(5, \"div\", 18);\n    ɵngcc0.ɵɵelement(6, \"div\", 15);\n    ɵngcc0.ɵɵelement(7, \"div\", 16);\n    ɵngcc0.ɵɵelement(8, \"div\", 17);\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementContainerEnd();\n  }\n}\n\nfunction MatFormField_div_4_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"div\", 19);\n    ɵngcc0.ɵɵprojection(1, 1);\n    ɵngcc0.ɵɵelementEnd();\n  }\n}\n\nfunction MatFormField_label_9_ng_container_2_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementContainerStart(0);\n    ɵngcc0.ɵɵprojection(1, 2);\n    ɵngcc0.ɵɵtext(2);\n    ɵngcc0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r10 = ɵngcc0.ɵɵnextContext(2);\n    ɵngcc0.ɵɵadvance(2);\n    ɵngcc0.ɵɵtextInterpolate(ctx_r10._control.placeholder);\n  }\n}\n\nfunction MatFormField_label_9_ng_content_3_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵprojection(0, 3, [\"*ngSwitchCase\", \"true\"]);\n  }\n}\n\nfunction MatFormField_label_9_span_4_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"span\", 23);\n    ɵngcc0.ɵɵtext(1, \"\\xA0*\");\n    ɵngcc0.ɵɵelementEnd();\n  }\n}\n\nfunction MatFormField_label_9_Template(rf, ctx) {\n  if (rf & 1) {\n    var _r14 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵelementStart(0, \"label\", 20, 21);\n    ɵngcc0.ɵɵlistener(\"cdkObserveContent\", function MatFormField_label_9_Template_label_cdkObserveContent_0_listener() {\n      ɵngcc0.ɵɵrestoreView(_r14);\n      var ctx_r13 = ɵngcc0.ɵɵnextContext();\n      return ctx_r13.updateOutlineGap();\n    });\n    ɵngcc0.ɵɵtemplate(2, MatFormField_label_9_ng_container_2_Template, 3, 1, \"ng-container\", 12);\n    ɵngcc0.ɵɵtemplate(3, MatFormField_label_9_ng_content_3_Template, 1, 0, \"ng-content\", 12);\n    ɵngcc0.ɵɵtemplate(4, MatFormField_label_9_span_4_Template, 2, 0, \"span\", 22);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r4 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵclassProp(\"mat-empty\", ctx_r4._control.empty && !ctx_r4._shouldAlwaysFloat)(\"mat-form-field-empty\", ctx_r4._control.empty && !ctx_r4._shouldAlwaysFloat)(\"mat-accent\", ctx_r4.color == \"accent\")(\"mat-warn\", ctx_r4.color == \"warn\");\n    ɵngcc0.ɵɵproperty(\"cdkObserveContentDisabled\", ctx_r4.appearance != \"outline\")(\"id\", ctx_r4._labelId)(\"ngSwitch\", ctx_r4._hasLabel());\n    ɵngcc0.ɵɵattribute(\"for\", ctx_r4._control.id)(\"aria-owns\", ctx_r4._control.id);\n    ɵngcc0.ɵɵadvance(2);\n    ɵngcc0.ɵɵproperty(\"ngSwitchCase\", false);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngSwitchCase\", true);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngIf\", !ctx_r4.hideRequiredMarker && ctx_r4._control.required && !ctx_r4._control.disabled);\n  }\n}\n\nfunction MatFormField_div_10_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"div\", 24);\n    ɵngcc0.ɵɵprojection(1, 4);\n    ɵngcc0.ɵɵelementEnd();\n  }\n}\n\nfunction MatFormField_div_11_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"div\", 25, 26);\n    ɵngcc0.ɵɵelement(2, \"span\", 27);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r6 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(2);\n    ɵngcc0.ɵɵclassProp(\"mat-accent\", ctx_r6.color == \"accent\")(\"mat-warn\", ctx_r6.color == \"warn\");\n  }\n}\n\nfunction MatFormField_div_13_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"div\");\n    ɵngcc0.ɵɵprojection(1, 5);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r7 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"@transitionMessages\", ctx_r7._subscriptAnimationState);\n  }\n}\n\nfunction MatFormField_div_14_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"div\", 31);\n    ɵngcc0.ɵɵtext(1);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r16 = ɵngcc0.ɵɵnextContext(2);\n    ɵngcc0.ɵɵproperty(\"id\", ctx_r16._hintLabelId);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate(ctx_r16.hintLabel);\n  }\n}\n\nfunction MatFormField_div_14_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"div\", 28);\n    ɵngcc0.ɵɵtemplate(1, MatFormField_div_14_div_1_Template, 2, 2, \"div\", 29);\n    ɵngcc0.ɵɵprojection(2, 6);\n    ɵngcc0.ɵɵelement(3, \"div\", 30);\n    ɵngcc0.ɵɵprojection(4, 7);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r8 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"@transitionMessages\", ctx_r8._subscriptAnimationState);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngIf\", ctx_r8.hintLabel);\n  }\n}\n\nvar _c4 = [\"*\", [[\"\", \"matPrefix\", \"\"]], [[\"mat-placeholder\"]], [[\"mat-label\"]], [[\"\", \"matSuffix\", \"\"]], [[\"mat-error\"]], [[\"mat-hint\", 3, \"align\", \"end\"]], [[\"mat-hint\", \"align\", \"end\"]]];\nvar _c5 = [\"*\", \"[matPrefix]\", \"mat-placeholder\", \"mat-label\", \"[matSuffix]\", \"mat-error\", \"mat-hint:not([align='end'])\", \"mat-hint[align='end']\"];\nvar nextUniqueId = 0;\n\nvar MatError = /*@__PURE__*/function () {\n  var MatError = function MatError() {\n    _classCallCheck(this, MatError);\n\n    this.id = \"mat-error-\".concat(nextUniqueId++);\n  };\n\n  MatError.ɵfac = function MatError_Factory(t) {\n    return new (t || MatError)();\n  };\n\n  MatError.ɵdir =\n  /*@__PURE__*/\n\n  /*@__PURE__*/\n  ɵngcc0.ɵɵdefineDirective({\n    type: MatError,\n    selectors: [[\"mat-error\"]],\n    hostAttrs: [\"role\", \"alert\", 1, \"mat-error\"],\n    hostVars: 1,\n    hostBindings: function MatError_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"id\", ctx.id);\n      }\n    },\n    inputs: {\n      id: \"id\"\n    }\n  });\n  return MatError;\n}();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/** *\n * Animations used by the MatFormField.\n * \\@docs-private\n  @type {?} */\n\n\nvar matFormFieldAnimations = {\n  /** Animation that transitions the form field's error and hint messages. */\n  transitionMessages: /*@__PURE__*/trigger('transitionMessages', [// TODO(mmalerba): Use angular animations for label animation as well.\n\n  /*@__PURE__*/\n  state('enter', /*@__PURE__*/style({\n    opacity: 1,\n    transform: 'translateY(0%)'\n  })), /*@__PURE__*/transition('void => enter', [/*@__PURE__*/style({\n    opacity: 0,\n    transform: 'translateY(-100%)'\n  }), /*@__PURE__*/animate('300ms cubic-bezier(0.55, 0, 0.55, 0.2)')])])\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * An interface which allows a control to work inside of a `MatFormField`.\n * @abstract\n * @template T\n */\n\nvar MatFormFieldControl = function MatFormFieldControl() {\n  _classCallCheck(this, MatFormFieldControl);\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * \\@docs-private\n * @return {?}\n */\n\n\nfunction getMatFormFieldPlaceholderConflictError() {\n  return Error('Placeholder attribute and child element were both specified.');\n}\n/**\n * \\@docs-private\n * @param {?} align\n * @return {?}\n */\n\n\nfunction getMatFormFieldDuplicatedHintError(align) {\n  return Error(\"A hint was already declared for 'align=\\\"\".concat(align, \"\\\"'.\"));\n}\n/**\n * \\@docs-private\n * @return {?}\n */\n\n\nfunction getMatFormFieldMissingControlError() {\n  return Error('mat-form-field must contain a MatFormFieldControl.');\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/** @type {?} */\n\n\nvar nextUniqueId$1 = 0;\n\nvar MatHint = /*@__PURE__*/function () {\n  var MatHint = function MatHint() {\n    _classCallCheck(this, MatHint);\n\n    /**\n     * Whether to align the hint label at the start or end of the line.\n     */\n    this.align = 'start';\n    /**\n     * Unique ID for the hint. Used for the aria-describedby on the form field control.\n     */\n\n    this.id = \"mat-hint-\".concat(nextUniqueId$1++);\n  };\n\n  MatHint.ɵfac = function MatHint_Factory(t) {\n    return new (t || MatHint)();\n  };\n\n  MatHint.ɵdir =\n  /*@__PURE__*/\n\n  /*@__PURE__*/\n  ɵngcc0.ɵɵdefineDirective({\n    type: MatHint,\n    selectors: [[\"mat-hint\"]],\n    hostAttrs: [1, \"mat-hint\"],\n    hostVars: 4,\n    hostBindings: function MatHint_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"id\", ctx.id)(\"align\", null);\n        ɵngcc0.ɵɵclassProp(\"mat-right\", ctx.align == \"end\");\n      }\n    },\n    inputs: {\n      align: \"align\",\n      id: \"id\"\n    }\n  });\n  return MatHint;\n}();\n\nvar MatLabel = /*@__PURE__*/function () {\n  var MatLabel = function MatLabel() {\n    _classCallCheck(this, MatLabel);\n  };\n\n  MatLabel.ɵfac = function MatLabel_Factory(t) {\n    return new (t || MatLabel)();\n  };\n\n  MatLabel.ɵdir =\n  /*@__PURE__*/\n\n  /*@__PURE__*/\n  ɵngcc0.ɵɵdefineDirective({\n    type: MatLabel,\n    selectors: [[\"mat-label\"]]\n  });\n  return MatLabel;\n}();\n\nvar MatPlaceholder = /*@__PURE__*/function () {\n  var MatPlaceholder = function MatPlaceholder() {\n    _classCallCheck(this, MatPlaceholder);\n  };\n\n  MatPlaceholder.ɵfac = function MatPlaceholder_Factory(t) {\n    return new (t || MatPlaceholder)();\n  };\n\n  MatPlaceholder.ɵdir =\n  /*@__PURE__*/\n\n  /*@__PURE__*/\n  ɵngcc0.ɵɵdefineDirective({\n    type: MatPlaceholder,\n    selectors: [[\"mat-placeholder\"]]\n  });\n  return MatPlaceholder;\n}();\n\nvar MatPrefix = /*@__PURE__*/function () {\n  var MatPrefix = function MatPrefix() {\n    _classCallCheck(this, MatPrefix);\n  };\n\n  MatPrefix.ɵfac = function MatPrefix_Factory(t) {\n    return new (t || MatPrefix)();\n  };\n\n  MatPrefix.ɵdir =\n  /*@__PURE__*/\n\n  /*@__PURE__*/\n  ɵngcc0.ɵɵdefineDirective({\n    type: MatPrefix,\n    selectors: [[\"\", \"matPrefix\", \"\"]]\n  });\n  return MatPrefix;\n}();\n\nvar MatSuffix = /*@__PURE__*/function () {\n  var MatSuffix = function MatSuffix() {\n    _classCallCheck(this, MatSuffix);\n  };\n\n  MatSuffix.ɵfac = function MatSuffix_Factory(t) {\n    return new (t || MatSuffix)();\n  };\n\n  MatSuffix.ɵdir =\n  /*@__PURE__*/\n\n  /*@__PURE__*/\n  ɵngcc0.ɵɵdefineDirective({\n    type: MatSuffix,\n    selectors: [[\"\", \"matSuffix\", \"\"]]\n  });\n  return MatSuffix;\n}();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/** @type {?} */\n\n\nvar nextUniqueId$2 = 0;\n/** @type {?} */\n\nvar floatingLabelScale = 0.75;\n/** @type {?} */\n\nvar outlineGapPadding = 5;\n/**\n * Boilerplate for applying mixins to MatFormField.\n * \\@docs-private\n */\n\nvar MatFormFieldBase =\n/**\n * @param {?} _elementRef\n */\nfunction MatFormFieldBase(_elementRef) {\n  _classCallCheck(this, MatFormFieldBase);\n\n  this._elementRef = _elementRef;\n};\n/** *\n * Base class to which we're applying the form field mixins.\n * \\@docs-private\n  @type {?} */\n\n\nvar _MatFormFieldMixinBase = /*@__PURE__*/mixinColor(MatFormFieldBase, 'primary');\n/** *\n * Injection token that can be used to configure the\n * default options for all form field within an app.\n  @type {?} */\n\n\nvar MAT_FORM_FIELD_DEFAULT_OPTIONS = /*@__PURE__*/new InjectionToken('MAT_FORM_FIELD_DEFAULT_OPTIONS');\n\nvar MatFormField = /*@__PURE__*/function () {\n  var MatFormField = /*#__PURE__*/function (_MatFormFieldMixinBas) {\n    _inherits(MatFormField, _MatFormFieldMixinBas);\n\n    var _super = _createSuper(MatFormField);\n\n    /**\n     * @param {?} _elementRef\n     * @param {?} _changeDetectorRef\n     * @param {?} labelOptions\n     * @param {?} _dir\n     * @param {?} _defaults\n     * @param {?=} _platform\n     * @param {?=} _ngZone\n     * @param {?=} _animationMode\n     */\n    function MatFormField(_elementRef, _changeDetectorRef, labelOptions, _dir, _defaults, _platform, _ngZone, _animationMode) {\n      var _this;\n\n      _classCallCheck(this, MatFormField);\n\n      _this = _super.call(this, _elementRef);\n      _this._elementRef = _elementRef;\n      _this._changeDetectorRef = _changeDetectorRef;\n      _this._dir = _dir;\n      _this._defaults = _defaults;\n      _this._platform = _platform;\n      _this._ngZone = _ngZone;\n      _this._outlineGapCalculationNeeded = false;\n      /**\n       * Override for the logic that disables the label animation in certain cases.\n       */\n\n      _this._showAlwaysAnimate = false;\n      /**\n       * State of the mat-hint and mat-error animations.\n       */\n\n      _this._subscriptAnimationState = '';\n      _this._hintLabel = ''; // Unique id for the hint label.\n\n      _this._hintLabelId = \"mat-hint-\".concat(nextUniqueId$2++); // Unique id for the internal form field label.\n\n      _this._labelId = \"mat-form-field-label-\".concat(nextUniqueId$2++);\n      _this._labelOptions = labelOptions ? labelOptions : {};\n      _this.floatLabel = _this._labelOptions.float || 'auto';\n      _this._animationsEnabled = _animationMode !== 'NoopAnimations'; // Set the default through here so we invoke the setter on the first run.\n\n      _this.appearance = _defaults && _defaults.appearance ? _defaults.appearance : 'legacy';\n      return _this;\n    }\n    /**\n     * The form-field appearance style.\n     * @return {?}\n     */\n\n\n    _createClass(MatFormField, [{\n      key: \"appearance\",\n      get: function get() {\n        return this._appearance;\n      }\n      /**\n       * @param {?} value\n       * @return {?}\n       */\n      ,\n      set: function set(value) {\n        /** @type {?} */\n        var oldValue = this._appearance;\n        this._appearance = value || this._defaults && this._defaults.appearance || 'legacy';\n\n        if (this._appearance === 'outline' && oldValue !== value) {\n          this._updateOutlineGapOnStable();\n        }\n      }\n      /**\n       * Whether the required marker should be hidden.\n       * @return {?}\n       */\n\n    }, {\n      key: \"hideRequiredMarker\",\n      get: function get() {\n        return this._hideRequiredMarker;\n      }\n      /**\n       * @param {?} value\n       * @return {?}\n       */\n      ,\n      set: function set(value) {\n        this._hideRequiredMarker = coerceBooleanProperty(value);\n      }\n      /**\n       * Whether the floating label should always float or not.\n       * @return {?}\n       */\n\n    }, {\n      key: \"_shouldAlwaysFloat\",\n      get: function get() {\n        return this.floatLabel === 'always' && !this._showAlwaysAnimate;\n      }\n      /**\n       * Whether the label can float or not.\n       * @return {?}\n       */\n\n    }, {\n      key: \"_canLabelFloat\",\n      get: function get() {\n        return this.floatLabel !== 'never';\n      }\n      /**\n       * Text for the form field hint.\n       * @return {?}\n       */\n\n    }, {\n      key: \"hintLabel\",\n      get: function get() {\n        return this._hintLabel;\n      }\n      /**\n       * @param {?} value\n       * @return {?}\n       */\n      ,\n      set: function set(value) {\n        this._hintLabel = value;\n\n        this._processHints();\n      }\n      /**\n       * Whether the label should always float, never float or float as the user types.\n       *\n       * Note: only the legacy appearance supports the `never` option. `never` was originally added as a\n       * way to make the floating label emulate the behavior of a standard input placeholder. However\n       * the form field now supports both floating labels and placeholders. Therefore in the non-legacy\n       * appearances the `never` option has been disabled in favor of just using the placeholder.\n       * @return {?}\n       */\n\n    }, {\n      key: \"floatLabel\",\n      get: function get() {\n        return this.appearance !== 'legacy' && this._floatLabel === 'never' ? 'auto' : this._floatLabel;\n      }\n      /**\n       * @param {?} value\n       * @return {?}\n       */\n      ,\n      set: function set(value) {\n        if (value !== this._floatLabel) {\n          this._floatLabel = value || this._labelOptions.float || 'auto';\n\n          this._changeDetectorRef.markForCheck();\n        }\n      }\n      /**\n       * Gets an ElementRef for the element that a overlay attached to the form-field should be\n       * positioned relative to.\n       * @return {?}\n       */\n\n    }, {\n      key: \"getConnectedOverlayOrigin\",\n      value: function getConnectedOverlayOrigin() {\n        return this._connectionContainerRef || this._elementRef;\n      }\n      /**\n       * @return {?}\n       */\n\n    }, {\n      key: \"ngAfterContentInit\",\n      value: function ngAfterContentInit() {\n        var _this2 = this;\n\n        this._validateControlChild();\n        /** @type {?} */\n\n\n        var control = this._control;\n\n        if (control.controlType) {\n          this._elementRef.nativeElement.classList.add(\"mat-form-field-type-\".concat(control.controlType));\n        } // Subscribe to changes in the child control state in order to update the form field UI.\n\n\n        control.stateChanges.pipe(startWith(\n        /** @type {?} */\n        null)).subscribe(function () {\n          _this2._validatePlaceholders();\n\n          _this2._syncDescribedByIds();\n\n          _this2._changeDetectorRef.markForCheck();\n        }); // Run change detection if the value changes.\n\n        if (control.ngControl && control.ngControl.valueChanges) {\n          control.ngControl.valueChanges.subscribe(function () {\n            return _this2._changeDetectorRef.markForCheck();\n          });\n        } // Run change detection and update the outline if the suffix or prefix changes.\n\n\n        merge(this._prefixChildren.changes, this._suffixChildren.changes).subscribe(function () {\n          _this2._updateOutlineGapOnStable();\n\n          _this2._changeDetectorRef.markForCheck();\n        }); // Re-validate when the number of hints changes.\n\n        this._hintChildren.changes.pipe(startWith(null)).subscribe(function () {\n          _this2._processHints();\n\n          _this2._changeDetectorRef.markForCheck();\n        }); // Update the aria-described by when the number of errors changes.\n\n\n        this._errorChildren.changes.pipe(startWith(null)).subscribe(function () {\n          _this2._syncDescribedByIds();\n\n          _this2._changeDetectorRef.markForCheck();\n        });\n      }\n      /**\n       * @return {?}\n       */\n\n    }, {\n      key: \"ngAfterContentChecked\",\n      value: function ngAfterContentChecked() {\n        this._validateControlChild();\n\n        if (this._outlineGapCalculationNeeded) {\n          this.updateOutlineGap();\n        }\n      }\n      /**\n       * @return {?}\n       */\n\n    }, {\n      key: \"ngAfterViewInit\",\n      value: function ngAfterViewInit() {\n        // Avoid animations on load.\n        this._subscriptAnimationState = 'enter';\n\n        this._changeDetectorRef.detectChanges();\n      }\n      /**\n       * Determines whether a class from the NgControl should be forwarded to the host element.\n       * @param {?} prop\n       * @return {?}\n       */\n\n    }, {\n      key: \"_shouldForward\",\n      value: function _shouldForward(prop) {\n        /** @type {?} */\n        var ngControl = this._control ? this._control.ngControl : null;\n        return ngControl && ngControl[prop];\n      }\n      /**\n       * @return {?}\n       */\n\n    }, {\n      key: \"_hasPlaceholder\",\n      value: function _hasPlaceholder() {\n        return !!(this._control && this._control.placeholder || this._placeholderChild);\n      }\n      /**\n       * @return {?}\n       */\n\n    }, {\n      key: \"_hasLabel\",\n      value: function _hasLabel() {\n        return !!this._labelChild;\n      }\n      /**\n       * @return {?}\n       */\n\n    }, {\n      key: \"_shouldLabelFloat\",\n      value: function _shouldLabelFloat() {\n        return this._canLabelFloat && (this._control.shouldLabelFloat || this._shouldAlwaysFloat);\n      }\n      /**\n       * @return {?}\n       */\n\n    }, {\n      key: \"_hideControlPlaceholder\",\n      value: function _hideControlPlaceholder() {\n        // In the legacy appearance the placeholder is promoted to a label if no label is given.\n        return this.appearance === 'legacy' && !this._hasLabel() || this._hasLabel() && !this._shouldLabelFloat();\n      }\n      /**\n       * @return {?}\n       */\n\n    }, {\n      key: \"_hasFloatingLabel\",\n      value: function _hasFloatingLabel() {\n        // In the legacy appearance the placeholder is promoted to a label if no label is given.\n        return this._hasLabel() || this.appearance === 'legacy' && this._hasPlaceholder();\n      }\n      /**\n       * Determines whether to display hints or errors.\n       * @return {?}\n       */\n\n    }, {\n      key: \"_getDisplayedMessages\",\n      value: function _getDisplayedMessages() {\n        return this._errorChildren && this._errorChildren.length > 0 && this._control.errorState ? 'error' : 'hint';\n      }\n      /**\n       * Animates the placeholder up and locks it in position.\n       * @return {?}\n       */\n\n    }, {\n      key: \"_animateAndLockLabel\",\n      value: function _animateAndLockLabel() {\n        var _this3 = this;\n\n        if (this._hasFloatingLabel() && this._canLabelFloat) {\n          // If animations are disabled, we shouldn't go in here,\n          // because the `transitionend` will never fire.\n          if (this._animationsEnabled) {\n            this._showAlwaysAnimate = true;\n            fromEvent(this._label.nativeElement, 'transitionend').pipe(take(1)).subscribe(function () {\n              _this3._showAlwaysAnimate = false;\n            });\n          }\n\n          this.floatLabel = 'always';\n\n          this._changeDetectorRef.markForCheck();\n        }\n      }\n      /**\n       * Ensure that there is only one placeholder (either `placeholder` attribute on the child control\n       * or child element with the `mat-placeholder` directive).\n       * @return {?}\n       */\n\n    }, {\n      key: \"_validatePlaceholders\",\n      value: function _validatePlaceholders() {\n        if (this._control.placeholder && this._placeholderChild) {\n          throw getMatFormFieldPlaceholderConflictError();\n        }\n      }\n      /**\n       * Does any extra processing that is required when handling the hints.\n       * @return {?}\n       */\n\n    }, {\n      key: \"_processHints\",\n      value: function _processHints() {\n        this._validateHints();\n\n        this._syncDescribedByIds();\n      }\n      /**\n       * Ensure that there is a maximum of one of each `<mat-hint>` alignment specified, with the\n       * attribute being considered as `align=\"start\"`.\n       * @return {?}\n       */\n\n    }, {\n      key: \"_validateHints\",\n      value: function _validateHints() {\n        var _this4 = this;\n\n        if (this._hintChildren) {\n          /** @type {?} */\n          var startHint;\n          /** @type {?} */\n\n          var endHint;\n\n          this._hintChildren.forEach(function (hint) {\n            if (hint.align === 'start') {\n              if (startHint || _this4.hintLabel) {\n                throw getMatFormFieldDuplicatedHintError('start');\n              }\n\n              startHint = hint;\n            } else if (hint.align === 'end') {\n              if (endHint) {\n                throw getMatFormFieldDuplicatedHintError('end');\n              }\n\n              endHint = hint;\n            }\n          });\n        }\n      }\n      /**\n       * Sets the list of element IDs that describe the child control. This allows the control to update\n       * its `aria-describedby` attribute accordingly.\n       * @return {?}\n       */\n\n    }, {\n      key: \"_syncDescribedByIds\",\n      value: function _syncDescribedByIds() {\n        if (this._control) {\n          /** @type {?} */\n          var ids = [];\n\n          if (this._getDisplayedMessages() === 'hint') {\n            /** @type {?} */\n            var startHint = this._hintChildren ? this._hintChildren.find(function (hint) {\n              return hint.align === 'start';\n            }) : null;\n            /** @type {?} */\n\n            var endHint = this._hintChildren ? this._hintChildren.find(function (hint) {\n              return hint.align === 'end';\n            }) : null;\n\n            if (startHint) {\n              ids.push(startHint.id);\n            } else if (this._hintLabel) {\n              ids.push(this._hintLabelId);\n            }\n\n            if (endHint) {\n              ids.push(endHint.id);\n            }\n          } else if (this._errorChildren) {\n            ids = this._errorChildren.map(function (error) {\n              return error.id;\n            });\n          }\n\n          this._control.setDescribedByIds(ids);\n        }\n      }\n      /**\n       * Throws an error if the form field's control is missing.\n       * @return {?}\n       */\n\n    }, {\n      key: \"_validateControlChild\",\n      value: function _validateControlChild() {\n        if (!this._control) {\n          throw getMatFormFieldMissingControlError();\n        }\n      }\n      /**\n       * Updates the width and position of the gap in the outline. Only relevant for the outline\n       * appearance.\n       * @return {?}\n       */\n\n    }, {\n      key: \"updateOutlineGap\",\n      value: function updateOutlineGap() {\n        /** @type {?} */\n        var labelEl = this._label ? this._label.nativeElement : null;\n\n        if (this.appearance !== 'outline' || !labelEl || !labelEl.children.length || !labelEl.textContent.trim()) {\n          return;\n        }\n\n        if (this._platform && !this._platform.isBrowser) {\n          // getBoundingClientRect isn't available on the server.\n          return;\n        } // If the element is not present in the DOM, the outline gap will need to be calculated\n        // the next time it is checked and in the DOM.\n\n\n        if (!document.documentElement.contains(this._elementRef.nativeElement)) {\n          this._outlineGapCalculationNeeded = true;\n          return;\n        }\n        /** @type {?} */\n\n\n        var startWidth = 0;\n        /** @type {?} */\n\n        var gapWidth = 0;\n        /** @type {?} */\n\n        var startEls = this._connectionContainerRef.nativeElement.querySelectorAll('.mat-form-field-outline-start');\n        /** @type {?} */\n\n\n        var gapEls = this._connectionContainerRef.nativeElement.querySelectorAll('.mat-form-field-outline-gap');\n\n        if (this._label && this._label.nativeElement.children.length) {\n          /** @type {?} */\n          var containerStart = this._getStartEnd(this._connectionContainerRef.nativeElement.getBoundingClientRect());\n          /** @type {?} */\n\n\n          var labelStart = this._getStartEnd(labelEl.children[0].getBoundingClientRect());\n          /** @type {?} */\n\n\n          var labelWidth = 0;\n\n          var _iterator = _createForOfIteratorHelper(labelEl.children),\n              _step;\n\n          try {\n            for (_iterator.s(); !(_step = _iterator.n()).done;) {\n              var child = _step.value;\n              labelWidth += child.offsetWidth;\n            }\n          } catch (err) {\n            _iterator.e(err);\n          } finally {\n            _iterator.f();\n          }\n\n          startWidth = labelStart - containerStart - outlineGapPadding;\n          gapWidth = labelWidth > 0 ? labelWidth * floatingLabelScale + outlineGapPadding * 2 : 0;\n        }\n\n        for (var i = 0; i < startEls.length; i++) {\n          startEls.item(i).style.width = \"\".concat(startWidth, \"px\");\n        }\n\n        for (var _i = 0; _i < gapEls.length; _i++) {\n          gapEls.item(_i).style.width = \"\".concat(gapWidth, \"px\");\n        }\n\n        this._outlineGapCalculationNeeded = false;\n      }\n      /**\n       * Gets the start end of the rect considering the current directionality.\n       * @param {?} rect\n       * @return {?}\n       */\n\n    }, {\n      key: \"_getStartEnd\",\n      value: function _getStartEnd(rect) {\n        return this._dir && this._dir.value === 'rtl' ? rect.right : rect.left;\n      }\n      /**\n       * Updates the outline gap the new time the zone stabilizes.\n       * @return {?}\n       */\n\n    }, {\n      key: \"_updateOutlineGapOnStable\",\n      value: function _updateOutlineGapOnStable() {\n        var _this5 = this;\n\n        // @breaking-change 8.0.0 Remove this check and else block once _ngZone is required.\n        if (this._ngZone) {\n          this._ngZone.onStable.pipe(take(1)).subscribe(function () {\n            return _this5.updateOutlineGap();\n          });\n        } else {\n          Promise.resolve().then(function () {\n            return _this5.updateOutlineGap();\n          });\n        }\n      }\n    }]);\n\n    return MatFormField;\n  }(_MatFormFieldMixinBase);\n\n  MatFormField.ɵfac = function MatFormField_Factory(t) {\n    return new (t || MatFormField)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(MAT_LABEL_GLOBAL_OPTIONS, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.Directionality, 8), ɵngcc0.ɵɵdirectiveInject(MAT_FORM_FIELD_DEFAULT_OPTIONS, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.Platform), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ANIMATION_MODULE_TYPE, 8));\n  };\n\n  MatFormField.ɵcmp =\n  /*@__PURE__*/\n\n  /*@__PURE__*/\n  ɵngcc0.ɵɵdefineComponent({\n    type: MatFormField,\n    selectors: [[\"mat-form-field\"]],\n    contentQueries: function MatFormField_ContentQueries(rf, ctx, dirIndex) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MatFormFieldControl, 5);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MatPlaceholder, 5);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MatLabel, 5);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MatError, 4);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MatHint, 4);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MatPrefix, 4);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MatSuffix, 4);\n      }\n\n      if (rf & 2) {\n        var _t;\n\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._control = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._placeholderChild = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._labelChild = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._errorChildren = _t);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._hintChildren = _t);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._prefixChildren = _t);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._suffixChildren = _t);\n      }\n    },\n    viewQuery: function MatFormField_Query(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(_c0, 5);\n        ɵngcc0.ɵɵviewQuery(_c1, 5);\n        ɵngcc0.ɵɵviewQuery(_c2, 5);\n        ɵngcc0.ɵɵviewQuery(_c3, 5);\n      }\n\n      if (rf & 2) {\n        var _t;\n\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.underlineRef = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._connectionContainerRef = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._inputContainerRef = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._label = _t.first);\n      }\n    },\n    hostAttrs: [1, \"mat-form-field\"],\n    hostVars: 42,\n    hostBindings: function MatFormField_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"mat-form-field-appearance-standard\", ctx.appearance == \"standard\")(\"mat-form-field-appearance-fill\", ctx.appearance == \"fill\")(\"mat-form-field-appearance-outline\", ctx.appearance == \"outline\")(\"mat-form-field-appearance-legacy\", ctx.appearance == \"legacy\")(\"mat-form-field-invalid\", ctx._control.errorState)(\"mat-form-field-can-float\", ctx._canLabelFloat)(\"mat-form-field-should-float\", ctx._shouldLabelFloat())(\"mat-form-field-hide-placeholder\", ctx._hideControlPlaceholder())(\"mat-form-field-disabled\", ctx._control.disabled)(\"mat-form-field-autofilled\", ctx._control.autofilled)(\"mat-focused\", ctx._control.focused)(\"mat-accent\", ctx.color == \"accent\")(\"mat-warn\", ctx.color == \"warn\")(\"ng-untouched\", ctx._shouldForward(\"untouched\"))(\"ng-touched\", ctx._shouldForward(\"touched\"))(\"ng-pristine\", ctx._shouldForward(\"pristine\"))(\"ng-dirty\", ctx._shouldForward(\"dirty\"))(\"ng-valid\", ctx._shouldForward(\"valid\"))(\"ng-invalid\", ctx._shouldForward(\"invalid\"))(\"ng-pending\", ctx._shouldForward(\"pending\"))(\"_mat-animation-noopable\", !ctx._animationsEnabled);\n      }\n    },\n    inputs: {\n      color: \"color\",\n      floatLabel: \"floatLabel\",\n      appearance: \"appearance\",\n      hideRequiredMarker: \"hideRequiredMarker\",\n      hintLabel: \"hintLabel\"\n    },\n    exportAs: [\"matFormField\"],\n    features: [ɵngcc0.ɵɵInheritDefinitionFeature],\n    ngContentSelectors: _c5,\n    decls: 15,\n    vars: 8,\n    consts: [[1, \"mat-form-field-wrapper\"], [1, \"mat-form-field-flex\", 3, \"click\"], [\"connectionContainer\", \"\"], [4, \"ngIf\"], [\"class\", \"mat-form-field-prefix\", 4, \"ngIf\"], [1, \"mat-form-field-infix\"], [\"inputContainer\", \"\"], [1, \"mat-form-field-label-wrapper\"], [\"class\", \"mat-form-field-label\", 3, \"cdkObserveContentDisabled\", \"id\", \"mat-empty\", \"mat-form-field-empty\", \"mat-accent\", \"mat-warn\", \"ngSwitch\", \"cdkObserveContent\", 4, \"ngIf\"], [\"class\", \"mat-form-field-suffix\", 4, \"ngIf\"], [\"class\", \"mat-form-field-underline\", 4, \"ngIf\"], [1, \"mat-form-field-subscript-wrapper\", 3, \"ngSwitch\"], [4, \"ngSwitchCase\"], [\"class\", \"mat-form-field-hint-wrapper\", 4, \"ngSwitchCase\"], [1, \"mat-form-field-outline\"], [1, \"mat-form-field-outline-start\"], [1, \"mat-form-field-outline-gap\"], [1, \"mat-form-field-outline-end\"], [1, \"mat-form-field-outline\", \"mat-form-field-outline-thick\"], [1, \"mat-form-field-prefix\"], [1, \"mat-form-field-label\", 3, \"cdkObserveContentDisabled\", \"id\", \"ngSwitch\", \"cdkObserveContent\"], [\"label\", \"\"], [\"class\", \"mat-placeholder-required mat-form-field-required-marker\", \"aria-hidden\", \"true\", 4, \"ngIf\"], [\"aria-hidden\", \"true\", 1, \"mat-placeholder-required\", \"mat-form-field-required-marker\"], [1, \"mat-form-field-suffix\"], [1, \"mat-form-field-underline\"], [\"underline\", \"\"], [1, \"mat-form-field-ripple\"], [1, \"mat-form-field-hint-wrapper\"], [\"class\", \"mat-hint\", 3, \"id\", 4, \"ngIf\"], [1, \"mat-form-field-hint-spacer\"], [1, \"mat-hint\", 3, \"id\"]],\n    template: function MatFormField_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef(_c4);\n        ɵngcc0.ɵɵelementStart(0, \"div\", 0);\n        ɵngcc0.ɵɵelementStart(1, \"div\", 1, 2);\n        ɵngcc0.ɵɵlistener(\"click\", function MatFormField_Template_div_click_1_listener($event) {\n          return ctx._control.onContainerClick && ctx._control.onContainerClick($event);\n        });\n        ɵngcc0.ɵɵtemplate(3, MatFormField_ng_container_3_Template, 9, 0, \"ng-container\", 3);\n        ɵngcc0.ɵɵtemplate(4, MatFormField_div_4_Template, 2, 0, \"div\", 4);\n        ɵngcc0.ɵɵelementStart(5, \"div\", 5, 6);\n        ɵngcc0.ɵɵprojection(7);\n        ɵngcc0.ɵɵelementStart(8, \"span\", 7);\n        ɵngcc0.ɵɵtemplate(9, MatFormField_label_9_Template, 5, 16, \"label\", 8);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵtemplate(10, MatFormField_div_10_Template, 2, 0, \"div\", 9);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵtemplate(11, MatFormField_div_11_Template, 3, 4, \"div\", 10);\n        ɵngcc0.ɵɵelementStart(12, \"div\", 11);\n        ɵngcc0.ɵɵtemplate(13, MatFormField_div_13_Template, 2, 1, \"div\", 12);\n        ɵngcc0.ɵɵtemplate(14, MatFormField_div_14_Template, 5, 2, \"div\", 13);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵadvance(3);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.appearance == \"outline\");\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx._prefixChildren.length);\n        ɵngcc0.ɵɵadvance(5);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx._hasFloatingLabel());\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx._suffixChildren.length);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.appearance != \"outline\");\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngSwitch\", ctx._getDisplayedMessages());\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngSwitchCase\", \"error\");\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngSwitchCase\", \"hint\");\n      }\n    },\n    directives: [ɵngcc3.NgIf, ɵngcc3.NgSwitch, ɵngcc3.NgSwitchCase, ɵngcc4.CdkObserveContent],\n    styles: [\".mat-form-field{display:inline-block;position:relative;text-align:left}[dir=rtl] .mat-form-field{text-align:right}.mat-form-field-wrapper{position:relative}.mat-form-field-flex{display:inline-flex;align-items:baseline;box-sizing:border-box;width:100%}.mat-form-field-prefix,.mat-form-field-suffix{white-space:nowrap;flex:none;position:relative}.mat-form-field-infix{display:block;position:relative;flex:auto;min-width:0;width:180px}@media screen and (-ms-high-contrast:active){.mat-form-field-infix{border-image:linear-gradient(transparent,transparent)}}.mat-form-field-label-wrapper{position:absolute;left:0;box-sizing:content-box;width:100%;height:100%;overflow:hidden;pointer-events:none}.mat-form-field-label{position:absolute;left:0;font:inherit;pointer-events:none;width:100%;white-space:nowrap;text-overflow:ellipsis;overflow:hidden;transform-origin:0 0;transition:transform .4s cubic-bezier(.25,.8,.25,1),color .4s cubic-bezier(.25,.8,.25,1),width .4s cubic-bezier(.25,.8,.25,1);display:none}[dir=rtl] .mat-form-field-label{transform-origin:100% 0;left:auto;right:0}.mat-form-field-can-float.mat-form-field-should-float .mat-form-field-label,.mat-form-field-empty.mat-form-field-label{display:block}.mat-form-field-autofill-control:-webkit-autofill+.mat-form-field-label-wrapper .mat-form-field-label{display:none}.mat-form-field-can-float .mat-form-field-autofill-control:-webkit-autofill+.mat-form-field-label-wrapper .mat-form-field-label{display:block;transition:none}.mat-input-server:focus+.mat-form-field-label-wrapper .mat-form-field-label,.mat-input-server[placeholder]:not(:placeholder-shown)+.mat-form-field-label-wrapper .mat-form-field-label{display:none}.mat-form-field-can-float .mat-input-server:focus+.mat-form-field-label-wrapper .mat-form-field-label,.mat-form-field-can-float .mat-input-server[placeholder]:not(:placeholder-shown)+.mat-form-field-label-wrapper .mat-form-field-label{display:block}.mat-form-field-label:not(.mat-form-field-empty){transition:none}.mat-form-field-underline{position:absolute;width:100%;pointer-events:none;transform:scaleY(1.0001)}.mat-form-field-ripple{position:absolute;left:0;width:100%;transform-origin:50%;transform:scaleX(.5);opacity:0;transition:background-color .3s cubic-bezier(.55,0,.55,.2)}.mat-form-field.mat-focused .mat-form-field-ripple,.mat-form-field.mat-form-field-invalid .mat-form-field-ripple{opacity:1;transform:scaleX(1);transition:transform .3s cubic-bezier(.25,.8,.25,1),opacity .1s cubic-bezier(.25,.8,.25,1),background-color .3s cubic-bezier(.25,.8,.25,1)}.mat-form-field-subscript-wrapper{position:absolute;box-sizing:border-box;width:100%;overflow:hidden}.mat-form-field-label-wrapper .mat-icon,.mat-form-field-subscript-wrapper .mat-icon{width:1em;height:1em;font-size:inherit;vertical-align:baseline}.mat-form-field-hint-wrapper{display:flex}.mat-form-field-hint-spacer{flex:1 0 1em}.mat-error{display:block}.mat-form-field-control-wrapper{position:relative}.mat-form-field._mat-animation-noopable .mat-form-field-label,.mat-form-field._mat-animation-noopable .mat-form-field-ripple{transition:none} .mat-form-field-appearance-fill .mat-form-field-flex{border-radius:4px 4px 0 0;padding:.75em .75em 0 .75em}@media screen and (-ms-high-contrast:active){.mat-form-field-appearance-fill .mat-form-field-flex{outline:solid 1px}}.mat-form-field-appearance-fill .mat-form-field-underline::before{content:'';display:block;position:absolute;bottom:0;height:1px;width:100%}.mat-form-field-appearance-fill .mat-form-field-ripple{bottom:0;height:2px}@media screen and (-ms-high-contrast:active){.mat-form-field-appearance-fill .mat-form-field-ripple{height:0;border-top:solid 2px}}.mat-form-field-appearance-fill:not(.mat-form-field-disabled) .mat-form-field-flex:hover~.mat-form-field-underline .mat-form-field-ripple{opacity:1;transform:none;transition:opacity .6s cubic-bezier(.25,.8,.25,1)}.mat-form-field-appearance-fill._mat-animation-noopable:not(.mat-form-field-disabled) .mat-form-field-flex:hover~.mat-form-field-underline .mat-form-field-ripple{transition:none}.mat-form-field-appearance-fill .mat-form-field-subscript-wrapper{padding:0 1em} .mat-form-field-appearance-legacy .mat-form-field-label{transform:perspective(100px);-ms-transform:none}.mat-form-field-appearance-legacy .mat-form-field-prefix .mat-icon,.mat-form-field-appearance-legacy .mat-form-field-suffix .mat-icon{width:1em}.mat-form-field-appearance-legacy .mat-form-field-prefix .mat-icon-button,.mat-form-field-appearance-legacy .mat-form-field-suffix .mat-icon-button{font:inherit;vertical-align:baseline}.mat-form-field-appearance-legacy .mat-form-field-prefix .mat-icon-button .mat-icon,.mat-form-field-appearance-legacy .mat-form-field-suffix .mat-icon-button .mat-icon{font-size:inherit}.mat-form-field-appearance-legacy .mat-form-field-underline{height:1px}@media screen and (-ms-high-contrast:active){.mat-form-field-appearance-legacy .mat-form-field-underline{height:0;border-top:solid 1px}}.mat-form-field-appearance-legacy .mat-form-field-ripple{top:0;height:2px;overflow:hidden}@media screen and (-ms-high-contrast:active){.mat-form-field-appearance-legacy .mat-form-field-ripple{height:0;border-top:solid 2px}}.mat-form-field-appearance-legacy.mat-form-field-disabled .mat-form-field-underline{background-position:0;background-color:transparent}@media screen and (-ms-high-contrast:active){.mat-form-field-appearance-legacy.mat-form-field-disabled .mat-form-field-underline{border-top-style:dotted;border-top-width:2px}}.mat-form-field-appearance-legacy.mat-form-field-invalid:not(.mat-focused) .mat-form-field-ripple{height:1px} .mat-form-field-appearance-outline .mat-form-field-wrapper{margin:.25em 0}.mat-form-field-appearance-outline .mat-form-field-flex{padding:0 .75em 0 .75em;margin-top:-.25em;position:relative}.mat-form-field-appearance-outline .mat-form-field-prefix,.mat-form-field-appearance-outline .mat-form-field-suffix{top:.25em}.mat-form-field-appearance-outline .mat-form-field-outline{display:flex;position:absolute;top:.25em;left:0;right:0;bottom:0;pointer-events:none}.mat-form-field-appearance-outline .mat-form-field-outline-end,.mat-form-field-appearance-outline .mat-form-field-outline-start{border:1px solid currentColor;min-width:5px}.mat-form-field-appearance-outline .mat-form-field-outline-start{border-radius:5px 0 0 5px;border-right-style:none}[dir=rtl] .mat-form-field-appearance-outline .mat-form-field-outline-start{border-right-style:solid;border-left-style:none;border-radius:0 5px 5px 0}.mat-form-field-appearance-outline .mat-form-field-outline-end{border-radius:0 5px 5px 0;border-left-style:none;flex-grow:1}[dir=rtl] .mat-form-field-appearance-outline .mat-form-field-outline-end{border-left-style:solid;border-right-style:none;border-radius:5px 0 0 5px}.mat-form-field-appearance-outline .mat-form-field-outline-gap{border-radius:.000001px;border:1px solid currentColor;border-left-style:none;border-right-style:none}.mat-form-field-appearance-outline.mat-form-field-can-float.mat-form-field-should-float .mat-form-field-outline-gap{border-top-color:transparent}.mat-form-field-appearance-outline .mat-form-field-outline-thick{opacity:0}.mat-form-field-appearance-outline .mat-form-field-outline-thick .mat-form-field-outline-end,.mat-form-field-appearance-outline .mat-form-field-outline-thick .mat-form-field-outline-gap,.mat-form-field-appearance-outline .mat-form-field-outline-thick .mat-form-field-outline-start{border-width:2px;transition:border-color .3s cubic-bezier(.25,.8,.25,1)}.mat-form-field-appearance-outline.mat-focused .mat-form-field-outline,.mat-form-field-appearance-outline.mat-form-field-invalid .mat-form-field-outline{opacity:0;transition:opacity .1s cubic-bezier(.25,.8,.25,1)}.mat-form-field-appearance-outline.mat-focused .mat-form-field-outline-thick,.mat-form-field-appearance-outline.mat-form-field-invalid .mat-form-field-outline-thick{opacity:1}.mat-form-field-appearance-outline:not(.mat-form-field-disabled) .mat-form-field-flex:hover .mat-form-field-outline{opacity:0;transition:opacity .6s cubic-bezier(.25,.8,.25,1)}.mat-form-field-appearance-outline:not(.mat-form-field-disabled) .mat-form-field-flex:hover .mat-form-field-outline-thick{opacity:1}.mat-form-field-appearance-outline .mat-form-field-subscript-wrapper{padding:0 1em}.mat-form-field-appearance-outline._mat-animation-noopable .mat-form-field-outline,.mat-form-field-appearance-outline._mat-animation-noopable .mat-form-field-outline-end,.mat-form-field-appearance-outline._mat-animation-noopable .mat-form-field-outline-gap,.mat-form-field-appearance-outline._mat-animation-noopable .mat-form-field-outline-start,.mat-form-field-appearance-outline._mat-animation-noopable:not(.mat-form-field-disabled) .mat-form-field-flex:hover~.mat-form-field-outline{transition:none} .mat-form-field-appearance-standard .mat-form-field-flex{padding-top:.75em}.mat-form-field-appearance-standard .mat-form-field-underline{height:1px}@media screen and (-ms-high-contrast:active){.mat-form-field-appearance-standard .mat-form-field-underline{height:0;border-top:solid 1px}}.mat-form-field-appearance-standard .mat-form-field-ripple{bottom:0;height:2px}@media screen and (-ms-high-contrast:active){.mat-form-field-appearance-standard .mat-form-field-ripple{height:0;border-top:2px}}.mat-form-field-appearance-standard.mat-form-field-disabled .mat-form-field-underline{background-position:0;background-color:transparent}@media screen and (-ms-high-contrast:active){.mat-form-field-appearance-standard.mat-form-field-disabled .mat-form-field-underline{border-top-style:dotted;border-top-width:2px}}.mat-form-field-appearance-standard:not(.mat-form-field-disabled) .mat-form-field-flex:hover~.mat-form-field-underline .mat-form-field-ripple{opacity:1;transform:none;transition:opacity .6s cubic-bezier(.25,.8,.25,1)}.mat-form-field-appearance-standard._mat-animation-noopable:not(.mat-form-field-disabled) .mat-form-field-flex:hover~.mat-form-field-underline .mat-form-field-ripple{transition:none} .mat-input-element{font:inherit;background:0 0;color:currentColor;border:none;outline:0;padding:0;margin:0;width:100%;max-width:100%;vertical-align:bottom;text-align:inherit}.mat-input-element:-moz-ui-invalid{box-shadow:none}.mat-input-element::-ms-clear,.mat-input-element::-ms-reveal{display:none}.mat-input-element,.mat-input-element::-webkit-search-cancel-button,.mat-input-element::-webkit-search-decoration,.mat-input-element::-webkit-search-results-button,.mat-input-element::-webkit-search-results-decoration{-webkit-appearance:none}.mat-input-element::-webkit-caps-lock-indicator,.mat-input-element::-webkit-contacts-auto-fill-button,.mat-input-element::-webkit-credentials-auto-fill-button{visibility:hidden}.mat-input-element[type=date]::after,.mat-input-element[type=datetime-local]::after,.mat-input-element[type=datetime]::after,.mat-input-element[type=month]::after,.mat-input-element[type=time]::after,.mat-input-element[type=week]::after{content:' ';white-space:pre;width:1px}.mat-input-element::-webkit-calendar-picker-indicator,.mat-input-element::-webkit-clear-button,.mat-input-element::-webkit-inner-spin-button{font-size:.75em}.mat-input-element::placeholder{transition:color .4s .133s cubic-bezier(.25,.8,.25,1)}.mat-input-element::-moz-placeholder{transition:color .4s .133s cubic-bezier(.25,.8,.25,1)}.mat-input-element::-webkit-input-placeholder{transition:color .4s .133s cubic-bezier(.25,.8,.25,1)}.mat-input-element:-ms-input-placeholder{transition:color .4s .133s cubic-bezier(.25,.8,.25,1)}.mat-form-field-hide-placeholder .mat-input-element::placeholder{color:transparent!important;-webkit-text-fill-color:transparent;transition:none}.mat-form-field-hide-placeholder .mat-input-element::-moz-placeholder{color:transparent!important;-webkit-text-fill-color:transparent;transition:none}.mat-form-field-hide-placeholder .mat-input-element::-webkit-input-placeholder{color:transparent!important;-webkit-text-fill-color:transparent;transition:none}.mat-form-field-hide-placeholder .mat-input-element:-ms-input-placeholder{color:transparent!important;-webkit-text-fill-color:transparent;transition:none}textarea.mat-input-element{resize:vertical;overflow:auto}textarea.mat-input-element.cdk-textarea-autosize{resize:none}textarea.mat-input-element{padding:2px 0;margin:-2px 0}select.mat-input-element{-moz-appearance:none;-webkit-appearance:none;position:relative;background-color:transparent;display:inline-flex;box-sizing:border-box;padding-top:1em;top:-1em;margin-bottom:-1em}select.mat-input-element::-ms-expand{display:none}select.mat-input-element::-moz-focus-inner{border:0}select.mat-input-element:not(:disabled){cursor:pointer}select.mat-input-element::-ms-value{color:inherit;background:0 0}.mat-form-field-type-mat-native-select .mat-form-field-infix::after{content:'';width:0;height:0;border-left:5px solid transparent;border-right:5px solid transparent;border-top:5px solid;position:absolute;top:50%;right:0;margin-top:-2.5px}[dir=rtl] .mat-form-field-type-mat-native-select .mat-form-field-infix::after{right:auto;left:0}.mat-form-field-type-mat-native-select.mat-form-field-appearance-outline .mat-form-field-infix::after{margin-top:-5px}.mat-form-field-type-mat-native-select.mat-form-field-appearance-fill .mat-form-field-infix::after{margin-top:-10px}\"],\n    encapsulation: 2,\n    data: {\n      animation: [matFormFieldAnimations.transitionMessages]\n    },\n    changeDetection: 0\n  });\n  return MatFormField;\n}();\n\nvar MatFormFieldModule = /*@__PURE__*/function () {\n  var MatFormFieldModule = function MatFormFieldModule() {\n    _classCallCheck(this, MatFormFieldModule);\n  };\n\n  MatFormFieldModule.ɵfac = function MatFormFieldModule_Factory(t) {\n    return new (t || MatFormFieldModule)();\n  };\n\n  MatFormFieldModule.ɵmod =\n  /*@__PURE__*/\n\n  /*@__PURE__*/\n  ɵngcc0.ɵɵdefineNgModule({\n    type: MatFormFieldModule\n  });\n  MatFormFieldModule.ɵinj =\n  /*@__PURE__*/\n\n  /*@__PURE__*/\n  ɵngcc0.ɵɵdefineInjector({\n    imports: [[CommonModule, ObserversModule]]\n  });\n  return MatFormFieldModule;\n}();\n/*@__PURE__*/\n\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatFormFieldModule, {\n    declarations: function declarations() {\n      return [MatError, MatFormField, MatHint, MatLabel, MatPlaceholder, MatPrefix, MatSuffix];\n    },\n    imports: function imports() {\n      return [CommonModule, ObserversModule];\n    },\n    exports: function exports() {\n      return [MatError, MatFormField, MatHint, MatLabel, MatPlaceholder, MatPrefix, MatSuffix];\n    }\n  });\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n\nexport { MatFormFieldModule, MatError, MatFormFieldBase, _MatFormFieldMixinBase, MAT_FORM_FIELD_DEFAULT_OPTIONS, MatFormField, MatFormFieldControl, getMatFormFieldPlaceholderConflictError, getMatFormFieldDuplicatedHintError, getMatFormFieldMissingControlError, MatHint, MatPlaceholder, MatPrefix, MatSuffix, MatLabel, matFormFieldAnimations }; //# sourceMappingURL=form-field.js.map","map":null,"metadata":{},"sourceType":"module"}