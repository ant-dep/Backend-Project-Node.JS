{"ast":null,"code":"import _get from \"/Users/adepertat/Dropbox/ECOLES/Openclassroom/P6_de_Pertat_Antoine/dwj-projet6/node_modules/@babel/runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"/Users/adepertat/Dropbox/ECOLES/Openclassroom/P6_de_Pertat_Antoine/dwj-projet6/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/adepertat/Dropbox/ECOLES/Openclassroom/P6_de_Pertat_Antoine/dwj-projet6/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/adepertat/Dropbox/ECOLES/Openclassroom/P6_de_Pertat_Antoine/dwj-projet6/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _classCallCheck from \"/Users/adepertat/Dropbox/ECOLES/Openclassroom/P6_de_Pertat_Antoine/dwj-projet6/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/adepertat/Dropbox/ECOLES/Openclassroom/P6_de_Pertat_Antoine/dwj-projet6/node_modules/@babel/runtime/helpers/esm/createClass\";\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { DOCUMENT, CommonModule } from '@angular/common';\nimport { Inject, Injectable, Optional, SkipSelf, QueryList, Directive, ElementRef, Input, NgZone, InjectionToken, EventEmitter, Output, NgModule, defineInjectable, inject } from '@angular/core';\nimport { Subject, Subscription, of } from 'rxjs';\nimport { UP_ARROW, DOWN_ARROW, LEFT_ARROW, RIGHT_ARROW, TAB, A, Z, ZERO, NINE } from '@angular/cdk/keycodes';\nimport { debounceTime, filter, map, tap, take } from 'rxjs/operators';\nimport { Platform, normalizePassiveListenerOptions, PlatformModule } from '@angular/cdk/platform';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { ContentObserver, ObserversModule } from '@angular/cdk/observers';\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/** *\n * IDs are deliminated by an empty space, as per the spec.\n  @type {?} */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/platform';\nimport * as ɵngcc2 from '@angular/cdk/observers';\nvar ID_DELIMINATOR = ' ';\n/**\n * Adds the given ID to the specified ARIA attribute on an element.\n * Used for attributes such as aria-labelledby, aria-owns, etc.\n * @param {?} el\n * @param {?} attr\n * @param {?} id\n * @return {?}\n */\n\nfunction addAriaReferencedId(el, attr, id) {\n  /** @type {?} */\n  var ids = getAriaReferenceIds(el, attr);\n\n  if (ids.some(function (existingId) {\n    return existingId.trim() == id.trim();\n  })) {\n    return;\n  }\n\n  ids.push(id.trim());\n  el.setAttribute(attr, ids.join(ID_DELIMINATOR));\n}\n/**\n * Removes the given ID from the specified ARIA attribute on an element.\n * Used for attributes such as aria-labelledby, aria-owns, etc.\n * @param {?} el\n * @param {?} attr\n * @param {?} id\n * @return {?}\n */\n\n\nfunction removeAriaReferencedId(el, attr, id) {\n  /** @type {?} */\n  var ids = getAriaReferenceIds(el, attr);\n  /** @type {?} */\n\n  var filteredIds = ids.filter(function (val) {\n    return val != id.trim();\n  });\n  el.setAttribute(attr, filteredIds.join(ID_DELIMINATOR));\n}\n/**\n * Gets the list of IDs referenced by the given ARIA attribute on an element.\n * Used for attributes such as aria-labelledby, aria-owns, etc.\n * @param {?} el\n * @param {?} attr\n * @return {?}\n */\n\n\nfunction getAriaReferenceIds(el, attr) {\n  // Get string array of all individual ids (whitespace deliminated) in the attribute value\n  return (el.getAttribute(attr) || '').match(/\\S+/g) || [];\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/** *\n * ID used for the body container where all messages are appended.\n  @type {?} */\n\n\nvar MESSAGES_CONTAINER_ID = 'cdk-describedby-message-container';\n/** *\n * ID prefix used for each created message element.\n  @type {?} */\n\nvar CDK_DESCRIBEDBY_ID_PREFIX = 'cdk-describedby-message';\n/** *\n * Attribute given to each host element that is described by a message element.\n  @type {?} */\n\nvar CDK_DESCRIBEDBY_HOST_ATTRIBUTE = 'cdk-describedby-host';\n/** *\n * Global incremental identifier for each registered message element.\n  @type {?} */\n\nvar nextId = 0;\n/** *\n * Global map of all registered message elements that have been placed into the document.\n  @type {?} */\n\nvar messageRegistry = new Map();\n/** *\n * Container for all registered messages.\n  @type {?} */\n\nvar messagesContainer = null;\n/**\n * Utility that creates visually hidden elements with a message content. Useful for elements that\n * want to use aria-describedby to further describe themselves without adding additional visual\n * content.\n * \\@docs-private\n */\n\nvar AriaDescriber = /*#__PURE__*/function () {\n  /**\n   * @param {?} _document\n   */\n  function AriaDescriber(_document) {\n    _classCallCheck(this, AriaDescriber);\n\n    this._document = _document;\n  }\n  /**\n   * Adds to the host element an aria-describedby reference to a hidden element that contains\n   * the message. If the same message has already been registered, then it will reuse the created\n   * message element.\n   * @param {?} hostElement\n   * @param {?} message\n   * @return {?}\n   */\n\n\n  _createClass(AriaDescriber, [{\n    key: \"describe\",\n    value: function describe(hostElement, message) {\n      if (!this._canBeDescribed(hostElement, message)) {\n        return;\n      }\n\n      if (!messageRegistry.has(message)) {\n        this._createMessageElement(message);\n      }\n\n      if (!this._isElementDescribedByMessage(hostElement, message)) {\n        this._addMessageReference(hostElement, message);\n      }\n    }\n    /**\n     * Removes the host element's aria-describedby reference to the message element.\n     * @param {?} hostElement\n     * @param {?} message\n     * @return {?}\n     */\n\n  }, {\n    key: \"removeDescription\",\n    value: function removeDescription(hostElement, message) {\n      if (!this._canBeDescribed(hostElement, message)) {\n        return;\n      }\n\n      if (this._isElementDescribedByMessage(hostElement, message)) {\n        this._removeMessageReference(hostElement, message);\n      }\n      /** @type {?} */\n\n\n      var registeredMessage = messageRegistry.get(message);\n\n      if (registeredMessage && registeredMessage.referenceCount === 0) {\n        this._deleteMessageElement(message);\n      }\n\n      if (messagesContainer && messagesContainer.childNodes.length === 0) {\n        this._deleteMessagesContainer();\n      }\n    }\n    /**\n     * Unregisters all created message elements and removes the message container.\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      /** @type {?} */\n      var describedElements = this._document.querySelectorAll(\"[\".concat(CDK_DESCRIBEDBY_HOST_ATTRIBUTE, \"]\"));\n\n      for (var i = 0; i < describedElements.length; i++) {\n        this._removeCdkDescribedByReferenceIds(describedElements[i]);\n\n        describedElements[i].removeAttribute(CDK_DESCRIBEDBY_HOST_ATTRIBUTE);\n      }\n\n      if (messagesContainer) {\n        this._deleteMessagesContainer();\n      }\n\n      messageRegistry.clear();\n    }\n    /**\n     * Creates a new element in the visually hidden message container element with the message\n     * as its content and adds it to the message registry.\n     * @param {?} message\n     * @return {?}\n     */\n\n  }, {\n    key: \"_createMessageElement\",\n    value: function _createMessageElement(message) {\n      /** @type {?} */\n      var messageElement = this._document.createElement('div');\n\n      messageElement.setAttribute('id', \"\".concat(CDK_DESCRIBEDBY_ID_PREFIX, \"-\").concat(nextId++));\n      messageElement.appendChild(\n      /** @type {?} */\n      this._document.createTextNode(message));\n\n      this._createMessagesContainer();\n      /** @type {?} */\n\n\n      messagesContainer.appendChild(messageElement);\n      messageRegistry.set(message, {\n        messageElement: messageElement,\n        referenceCount: 0\n      });\n    }\n    /**\n     * Deletes the message element from the global messages container.\n     * @param {?} message\n     * @return {?}\n     */\n\n  }, {\n    key: \"_deleteMessageElement\",\n    value: function _deleteMessageElement(message) {\n      /** @type {?} */\n      var registeredMessage = messageRegistry.get(message);\n      /** @type {?} */\n\n      var messageElement = registeredMessage && registeredMessage.messageElement;\n\n      if (messagesContainer && messageElement) {\n        messagesContainer.removeChild(messageElement);\n      }\n\n      messageRegistry.delete(message);\n    }\n    /**\n     * Creates the global container for all aria-describedby messages.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_createMessagesContainer\",\n    value: function _createMessagesContainer() {\n      if (!messagesContainer) {\n        /** @type {?} */\n        var preExistingContainer = this._document.getElementById(MESSAGES_CONTAINER_ID); // When going from the server to the client, we may end up in a situation where there's\n        // already a container on the page, but we don't have a reference to it. Clear the\n        // old container so we don't get duplicates. Doing this, instead of emptying the previous\n        // container, should be slightly faster.\n\n\n        if (preExistingContainer) {\n          /** @type {?} */\n          preExistingContainer.parentNode.removeChild(preExistingContainer);\n        }\n\n        messagesContainer = this._document.createElement('div');\n        messagesContainer.id = MESSAGES_CONTAINER_ID;\n        messagesContainer.setAttribute('aria-hidden', 'true');\n        messagesContainer.style.display = 'none';\n\n        this._document.body.appendChild(messagesContainer);\n      }\n    }\n    /**\n     * Deletes the global messages container.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_deleteMessagesContainer\",\n    value: function _deleteMessagesContainer() {\n      if (messagesContainer && messagesContainer.parentNode) {\n        messagesContainer.parentNode.removeChild(messagesContainer);\n        messagesContainer = null;\n      }\n    }\n    /**\n     * Removes all cdk-describedby messages that are hosted through the element.\n     * @param {?} element\n     * @return {?}\n     */\n\n  }, {\n    key: \"_removeCdkDescribedByReferenceIds\",\n    value: function _removeCdkDescribedByReferenceIds(element) {\n      /** @type {?} */\n      var originalReferenceIds = getAriaReferenceIds(element, 'aria-describedby').filter(function (id) {\n        return id.indexOf(CDK_DESCRIBEDBY_ID_PREFIX) != 0;\n      });\n      element.setAttribute('aria-describedby', originalReferenceIds.join(' '));\n    }\n    /**\n     * Adds a message reference to the element using aria-describedby and increments the registered\n     * message's reference count.\n     * @param {?} element\n     * @param {?} message\n     * @return {?}\n     */\n\n  }, {\n    key: \"_addMessageReference\",\n    value: function _addMessageReference(element, message) {\n      /** @type {?} */\n      var registeredMessage =\n      /** @type {?} */\n      messageRegistry.get(message); // Add the aria-describedby reference and set the\n      // describedby_host attribute to mark the element.\n\n      addAriaReferencedId(element, 'aria-describedby', registeredMessage.messageElement.id);\n      element.setAttribute(CDK_DESCRIBEDBY_HOST_ATTRIBUTE, '');\n      registeredMessage.referenceCount++;\n    }\n    /**\n     * Removes a message reference from the element using aria-describedby\n     * and decrements the registered message's reference count.\n     * @param {?} element\n     * @param {?} message\n     * @return {?}\n     */\n\n  }, {\n    key: \"_removeMessageReference\",\n    value: function _removeMessageReference(element, message) {\n      /** @type {?} */\n      var registeredMessage =\n      /** @type {?} */\n      messageRegistry.get(message);\n      registeredMessage.referenceCount--;\n      removeAriaReferencedId(element, 'aria-describedby', registeredMessage.messageElement.id);\n      element.removeAttribute(CDK_DESCRIBEDBY_HOST_ATTRIBUTE);\n    }\n    /**\n     * Returns true if the element has been described by the provided message ID.\n     * @param {?} element\n     * @param {?} message\n     * @return {?}\n     */\n\n  }, {\n    key: \"_isElementDescribedByMessage\",\n    value: function _isElementDescribedByMessage(element, message) {\n      /** @type {?} */\n      var referenceIds = getAriaReferenceIds(element, 'aria-describedby');\n      /** @type {?} */\n\n      var registeredMessage = messageRegistry.get(message);\n      /** @type {?} */\n\n      var messageId = registeredMessage && registeredMessage.messageElement.id;\n      return !!messageId && referenceIds.indexOf(messageId) != -1;\n    }\n    /**\n     * Determines whether a message can be described on a particular element.\n     * @param {?} element\n     * @param {?} message\n     * @return {?}\n     */\n\n  }, {\n    key: \"_canBeDescribed\",\n    value: function _canBeDescribed(element, message) {\n      return element.nodeType === this._document.ELEMENT_NODE && message != null && !!\"\".concat(message).trim();\n    }\n  }]);\n\n  return AriaDescriber;\n}();\n\nAriaDescriber.ɵfac = function AriaDescriber_Factory(t) {\n  return new (t || AriaDescriber)(ɵngcc0.ɵɵinject(DOCUMENT));\n};\n\nAriaDescriber.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n  token: AriaDescriber,\n  factory: AriaDescriber.ɵfac,\n  providedIn: 'root'\n});\n/** @nocollapse */\n\nAriaDescriber.ctorParameters = function () {\n  return [{\n    type: undefined,\n    decorators: [{\n      type: Inject,\n      args: [DOCUMENT]\n    }]\n  }];\n};\n/** @nocollapse */\n\n\nAriaDescriber.ngInjectableDef = defineInjectable({\n  factory: function AriaDescriber_Factory() {\n    return new AriaDescriber(inject(DOCUMENT));\n  },\n  token: AriaDescriber,\n  providedIn: \"root\"\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(AriaDescriber, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }];\n  }, null);\n})();\n/**\n * \\@docs-private \\@deprecated \\@breaking-change 8.0.0\n * @param {?} parentDispatcher\n * @param {?} _document\n * @return {?}\n */\n\n\nfunction ARIA_DESCRIBER_PROVIDER_FACTORY(parentDispatcher, _document) {\n  return parentDispatcher || new AriaDescriber(_document);\n}\n/** *\n * \\@docs-private \\@deprecated \\@breaking-change 8.0.0\n  @type {?} */\n\n\nvar ARIA_DESCRIBER_PROVIDER = {\n  // If there is already an AriaDescriber available, use that. Otherwise, provide a new one.\n  provide: AriaDescriber,\n  deps: [[new Optional(), new SkipSelf(), AriaDescriber],\n  /** @type {?} */\n  DOCUMENT],\n  useFactory: ARIA_DESCRIBER_PROVIDER_FACTORY\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n// unsupported: template constraints.\n\n/**\n * This class manages keyboard events for selectable lists. If you pass it a query list\n * of items, it will set the active item correctly when arrow events occur.\n * @template T\n */\n\nvar ListKeyManager = /*#__PURE__*/function () {\n  /**\n   * @param {?} _items\n   */\n  function ListKeyManager(_items) {\n    var _this = this;\n\n    _classCallCheck(this, ListKeyManager);\n\n    this._items = _items;\n    this._activeItemIndex = -1;\n    this._wrap = false;\n    this._letterKeyStream = new Subject();\n    this._typeaheadSubscription = Subscription.EMPTY;\n    this._vertical = true;\n    /**\n     * Predicate function that can be used to check whether an item should be skipped\n     * by the key manager. By default, disabled items are skipped.\n     */\n\n    this._skipPredicateFn = function (item) {\n      return item.disabled;\n    };\n\n    this._pressedLetters = [];\n    /**\n     * Stream that emits any time the TAB key is pressed, so components can react\n     * when focus is shifted off of the list.\n     */\n\n    this.tabOut = new Subject();\n    /**\n     * Stream that emits whenever the active item of the list manager changes.\n     */\n\n    this.change = new Subject(); // We allow for the items to be an array because, in some cases, the consumer may\n    // not have access to a QueryList of the items they want to manage (e.g. when the\n    // items aren't being collected via `ViewChildren` or `ContentChildren`).\n\n    if (_items instanceof QueryList) {\n      _items.changes.subscribe(function (newItems) {\n        if (_this._activeItem) {\n          /** @type {?} */\n          var itemArray = newItems.toArray();\n          /** @type {?} */\n\n          var newIndex = itemArray.indexOf(_this._activeItem);\n\n          if (newIndex > -1 && newIndex !== _this._activeItemIndex) {\n            _this._activeItemIndex = newIndex;\n          }\n        }\n      });\n    }\n  }\n  /**\n   * Sets the predicate function that determines which items should be skipped by the\n   * list key manager.\n   * @param {?} predicate Function that determines whether the given item should be skipped.\n   * @return {?}\n   */\n\n\n  _createClass(ListKeyManager, [{\n    key: \"skipPredicate\",\n    value: function skipPredicate(predicate) {\n      this._skipPredicateFn = predicate;\n      return this;\n    }\n    /**\n     * Configures wrapping mode, which determines whether the active item will wrap to\n     * the other end of list when there are no more items in the given direction.\n     * @param {?=} shouldWrap Whether the list should wrap when reaching the end.\n     * @return {?}\n     */\n\n  }, {\n    key: \"withWrap\",\n    value: function withWrap() {\n      var shouldWrap = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n      this._wrap = shouldWrap;\n      return this;\n    }\n    /**\n     * Configures whether the key manager should be able to move the selection vertically.\n     * @param {?=} enabled Whether vertical selection should be enabled.\n     * @return {?}\n     */\n\n  }, {\n    key: \"withVerticalOrientation\",\n    value: function withVerticalOrientation() {\n      var enabled = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n      this._vertical = enabled;\n      return this;\n    }\n    /**\n     * Configures the key manager to move the selection horizontally.\n     * Passing in `null` will disable horizontal movement.\n     * @param {?} direction Direction in which the selection can be moved.\n     * @return {?}\n     */\n\n  }, {\n    key: \"withHorizontalOrientation\",\n    value: function withHorizontalOrientation(direction) {\n      this._horizontal = direction;\n      return this;\n    }\n    /**\n     * Turns on typeahead mode which allows users to set the active item by typing.\n     * @param {?=} debounceInterval Time to wait after the last keystroke before setting the active item.\n     * @return {?}\n     */\n\n  }, {\n    key: \"withTypeAhead\",\n    value: function withTypeAhead() {\n      var _this2 = this;\n\n      var debounceInterval = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 200;\n\n      if (this._items.length && this._items.some(function (item) {\n        return typeof item.getLabel !== 'function';\n      })) {\n        throw Error('ListKeyManager items in typeahead mode must implement the `getLabel` method.');\n      }\n\n      this._typeaheadSubscription.unsubscribe(); // Debounce the presses of non-navigational keys, collect the ones that correspond to letters\n      // and convert those letters back into a string. Afterwards find the first item that starts\n      // with that string and select it.\n\n\n      this._typeaheadSubscription = this._letterKeyStream.pipe(tap(function (keyCode) {\n        return _this2._pressedLetters.push(keyCode);\n      }), debounceTime(debounceInterval), filter(function () {\n        return _this2._pressedLetters.length > 0;\n      }), map(function () {\n        return _this2._pressedLetters.join('');\n      })).subscribe(function (inputString) {\n        /** @type {?} */\n        var items = _this2._getItemsArray(); // Start at 1 because we want to start searching at the item immediately\n        // following the current active item.\n\n\n        for (var i = 1; i < items.length + 1; i++) {\n          /** @type {?} */\n          var index = (_this2._activeItemIndex + i) % items.length;\n          /** @type {?} */\n\n          var item = items[index];\n\n          if (!_this2._skipPredicateFn(item) &&\n          /** @type {?} */\n          item.getLabel().toUpperCase().trim().indexOf(inputString) === 0) {\n            _this2.setActiveItem(index);\n\n            break;\n          }\n        }\n\n        _this2._pressedLetters = [];\n      });\n      return this;\n    }\n    /**\n     * @param {?} item\n     * @return {?}\n     */\n\n  }, {\n    key: \"setActiveItem\",\n    value: function setActiveItem(item) {\n      /** @type {?} */\n      var previousIndex = this._activeItemIndex;\n      this.updateActiveItem(item);\n\n      if (this._activeItemIndex !== previousIndex) {\n        this.change.next(this._activeItemIndex);\n      }\n    }\n    /**\n     * Sets the active item depending on the key event passed in.\n     * @param {?} event Keyboard event to be used for determining which element should be active.\n     * @return {?}\n     */\n\n  }, {\n    key: \"onKeydown\",\n    value: function onKeydown(event) {\n      /** @type {?} */\n      var keyCode = event.keyCode;\n\n      switch (keyCode) {\n        case TAB:\n          this.tabOut.next();\n          return;\n\n        case DOWN_ARROW:\n          if (this._vertical) {\n            this.setNextItemActive();\n            break;\n          } else {\n            return;\n          }\n\n        case UP_ARROW:\n          if (this._vertical) {\n            this.setPreviousItemActive();\n            break;\n          } else {\n            return;\n          }\n\n        case RIGHT_ARROW:\n          if (this._horizontal === 'ltr') {\n            this.setNextItemActive();\n            break;\n          } else if (this._horizontal === 'rtl') {\n            this.setPreviousItemActive();\n            break;\n          } else {\n            return;\n          }\n\n        case LEFT_ARROW:\n          if (this._horizontal === 'ltr') {\n            this.setPreviousItemActive();\n            break;\n          } else if (this._horizontal === 'rtl') {\n            this.setNextItemActive();\n            break;\n          } else {\n            return;\n          }\n\n        default:\n          // Attempt to use the `event.key` which also maps it to the user's keyboard language,\n          // otherwise fall back to resolving alphanumeric characters via the keyCode.\n          if (event.key && event.key.length === 1) {\n            this._letterKeyStream.next(event.key.toLocaleUpperCase());\n          } else if (keyCode >= A && keyCode <= Z || keyCode >= ZERO && keyCode <= NINE) {\n            this._letterKeyStream.next(String.fromCharCode(keyCode));\n          } // Note that we return here, in order to avoid preventing\n          // the default action of non-navigational keys.\n\n\n          return;\n      }\n\n      this._pressedLetters = [];\n      event.preventDefault();\n    }\n    /**\n     * Index of the currently active item.\n     * @return {?}\n     */\n\n  }, {\n    key: \"activeItemIndex\",\n    get: function get() {\n      return this._activeItemIndex;\n    }\n    /**\n     * The active item.\n     * @return {?}\n     */\n\n  }, {\n    key: \"activeItem\",\n    get: function get() {\n      return this._activeItem;\n    }\n    /**\n     * Sets the active item to the first enabled item in the list.\n     * @return {?}\n     */\n\n  }, {\n    key: \"setFirstItemActive\",\n    value: function setFirstItemActive() {\n      this._setActiveItemByIndex(0, 1);\n    }\n    /**\n     * Sets the active item to the last enabled item in the list.\n     * @return {?}\n     */\n\n  }, {\n    key: \"setLastItemActive\",\n    value: function setLastItemActive() {\n      this._setActiveItemByIndex(this._items.length - 1, -1);\n    }\n    /**\n     * Sets the active item to the next enabled item in the list.\n     * @return {?}\n     */\n\n  }, {\n    key: \"setNextItemActive\",\n    value: function setNextItemActive() {\n      this._activeItemIndex < 0 ? this.setFirstItemActive() : this._setActiveItemByDelta(1);\n    }\n    /**\n     * Sets the active item to a previous enabled item in the list.\n     * @return {?}\n     */\n\n  }, {\n    key: \"setPreviousItemActive\",\n    value: function setPreviousItemActive() {\n      this._activeItemIndex < 0 && this._wrap ? this.setLastItemActive() : this._setActiveItemByDelta(-1);\n    }\n    /**\n     * @param {?} item\n     * @return {?}\n     */\n\n  }, {\n    key: \"updateActiveItem\",\n    value: function updateActiveItem(item) {\n      /** @type {?} */\n      var itemArray = this._getItemsArray();\n      /** @type {?} */\n\n\n      var index = typeof item === 'number' ? item : itemArray.indexOf(item);\n      this._activeItemIndex = index;\n      this._activeItem = itemArray[index];\n    }\n    /**\n     * Allows setting of the activeItemIndex without any other effects.\n     * @deprecated Use `updateActiveItem` instead.\n     * \\@breaking-change 8.0.0\n     * @param {?} index The new activeItemIndex.\n     * @return {?}\n     */\n\n  }, {\n    key: \"updateActiveItemIndex\",\n    value: function updateActiveItemIndex(index) {\n      this.updateActiveItem(index);\n    }\n    /**\n     * This method sets the active item, given a list of items and the delta between the\n     * currently active item and the new active item. It will calculate differently\n     * depending on whether wrap mode is turned on.\n     * @param {?} delta\n     * @return {?}\n     */\n\n  }, {\n    key: \"_setActiveItemByDelta\",\n    value: function _setActiveItemByDelta(delta) {\n      this._wrap ? this._setActiveInWrapMode(delta) : this._setActiveInDefaultMode(delta);\n    }\n    /**\n     * Sets the active item properly given \"wrap\" mode. In other words, it will continue to move\n     * down the list until it finds an item that is not disabled, and it will wrap if it\n     * encounters either end of the list.\n     * @param {?} delta\n     * @return {?}\n     */\n\n  }, {\n    key: \"_setActiveInWrapMode\",\n    value: function _setActiveInWrapMode(delta) {\n      /** @type {?} */\n      var items = this._getItemsArray();\n\n      for (var i = 1; i <= items.length; i++) {\n        /** @type {?} */\n        var index = (this._activeItemIndex + delta * i + items.length) % items.length;\n        /** @type {?} */\n\n        var item = items[index];\n\n        if (!this._skipPredicateFn(item)) {\n          this.setActiveItem(index);\n          return;\n        }\n      }\n    }\n    /**\n     * Sets the active item properly given the default mode. In other words, it will\n     * continue to move down the list until it finds an item that is not disabled. If\n     * it encounters either end of the list, it will stop and not wrap.\n     * @param {?} delta\n     * @return {?}\n     */\n\n  }, {\n    key: \"_setActiveInDefaultMode\",\n    value: function _setActiveInDefaultMode(delta) {\n      this._setActiveItemByIndex(this._activeItemIndex + delta, delta);\n    }\n    /**\n     * Sets the active item to the first enabled item starting at the index specified. If the\n     * item is disabled, it will move in the fallbackDelta direction until it either\n     * finds an enabled item or encounters the end of the list.\n     * @param {?} index\n     * @param {?} fallbackDelta\n     * @return {?}\n     */\n\n  }, {\n    key: \"_setActiveItemByIndex\",\n    value: function _setActiveItemByIndex(index, fallbackDelta) {\n      /** @type {?} */\n      var items = this._getItemsArray();\n\n      if (!items[index]) {\n        return;\n      }\n\n      while (this._skipPredicateFn(items[index])) {\n        index += fallbackDelta;\n\n        if (!items[index]) {\n          return;\n        }\n      }\n\n      this.setActiveItem(index);\n    }\n    /**\n     * Returns the items as an array.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_getItemsArray\",\n    value: function _getItemsArray() {\n      return this._items instanceof QueryList ? this._items.toArray() : this._items;\n    }\n  }]);\n\n  return ListKeyManager;\n}();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * @template T\n */\n\n\nvar ActiveDescendantKeyManager = /*#__PURE__*/function (_ListKeyManager) {\n  _inherits(ActiveDescendantKeyManager, _ListKeyManager);\n\n  var _super = _createSuper(ActiveDescendantKeyManager);\n\n  function ActiveDescendantKeyManager() {\n    _classCallCheck(this, ActiveDescendantKeyManager);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(ActiveDescendantKeyManager, [{\n    key: \"setActiveItem\",\n    value:\n    /**\n     * @param {?} index\n     * @return {?}\n     */\n    function setActiveItem(index) {\n      if (this.activeItem) {\n        this.activeItem.setInactiveStyles();\n      }\n\n      _get(_getPrototypeOf(ActiveDescendantKeyManager.prototype), \"setActiveItem\", this).call(this, index);\n\n      if (this.activeItem) {\n        this.activeItem.setActiveStyles();\n      }\n    }\n  }]);\n\n  return ActiveDescendantKeyManager;\n}(ListKeyManager);\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * @template T\n */\n\n\nvar FocusKeyManager = /*#__PURE__*/function (_ListKeyManager2) {\n  _inherits(FocusKeyManager, _ListKeyManager2);\n\n  var _super2 = _createSuper(FocusKeyManager);\n\n  function FocusKeyManager() {\n    var _this3;\n\n    _classCallCheck(this, FocusKeyManager);\n\n    _this3 = _super2.apply(this, arguments);\n    _this3._origin = 'program';\n    return _this3;\n  }\n  /**\n   * Sets the focus origin that will be passed in to the items for any subsequent `focus` calls.\n   * @param {?} origin Focus origin to be used when focusing items.\n   * @return {?}\n   */\n\n\n  _createClass(FocusKeyManager, [{\n    key: \"setFocusOrigin\",\n    value: function setFocusOrigin(origin) {\n      this._origin = origin;\n      return this;\n    }\n    /**\n     * @param {?} item\n     * @return {?}\n     */\n\n  }, {\n    key: \"setActiveItem\",\n    value: function setActiveItem(item) {\n      _get(_getPrototypeOf(FocusKeyManager.prototype), \"setActiveItem\", this).call(this, item);\n\n      if (this.activeItem) {\n        this.activeItem.focus(this._origin);\n      }\n    }\n  }]);\n\n  return FocusKeyManager;\n}(ListKeyManager);\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * Utility for checking the interactivity of an element, such as whether is is focusable or\n * tabbable.\n */\n\n\nvar InteractivityChecker = /*#__PURE__*/function () {\n  /**\n   * @param {?} _platform\n   */\n  function InteractivityChecker(_platform) {\n    _classCallCheck(this, InteractivityChecker);\n\n    this._platform = _platform;\n  }\n  /**\n   * Gets whether an element is disabled.\n   *\n   * @param {?} element Element to be checked.\n   * @return {?} Whether the element is disabled.\n   */\n\n\n  _createClass(InteractivityChecker, [{\n    key: \"isDisabled\",\n    value: function isDisabled(element) {\n      // This does not capture some cases, such as a non-form control with a disabled attribute or\n      // a form control inside of a disabled form, but should capture the most common cases.\n      return element.hasAttribute('disabled');\n    }\n    /**\n     * Gets whether an element is visible for the purposes of interactivity.\n     *\n     * This will capture states like `display: none` and `visibility: hidden`, but not things like\n     * being clipped by an `overflow: hidden` parent or being outside the viewport.\n     *\n     * @param {?} element\n     * @return {?} Whether the element is visible.\n     */\n\n  }, {\n    key: \"isVisible\",\n    value: function isVisible(element) {\n      return hasGeometry(element) && getComputedStyle(element).visibility === 'visible';\n    }\n    /**\n     * Gets whether an element can be reached via Tab key.\n     * Assumes that the element has already been checked with isFocusable.\n     *\n     * @param {?} element Element to be checked.\n     * @return {?} Whether the element is tabbable.\n     */\n\n  }, {\n    key: \"isTabbable\",\n    value: function isTabbable(element) {\n      // Nothing is tabbable on the the server 😎\n      if (!this._platform.isBrowser) {\n        return false;\n      }\n      /** @type {?} */\n\n\n      var frameElement = getFrameElement(getWindow(element));\n\n      if (frameElement) {\n        /** @type {?} */\n        var frameType = frameElement && frameElement.nodeName.toLowerCase(); // Frame elements inherit their tabindex onto all child elements.\n\n        if (getTabIndexValue(frameElement) === -1) {\n          return false;\n        } // Webkit and Blink consider anything inside of an <object> element as non-tabbable.\n\n\n        if ((this._platform.BLINK || this._platform.WEBKIT) && frameType === 'object') {\n          return false;\n        } // Webkit and Blink disable tabbing to an element inside of an invisible frame.\n\n\n        if ((this._platform.BLINK || this._platform.WEBKIT) && !this.isVisible(frameElement)) {\n          return false;\n        }\n      }\n      /** @type {?} */\n\n\n      var nodeName = element.nodeName.toLowerCase();\n      /** @type {?} */\n\n      var tabIndexValue = getTabIndexValue(element);\n\n      if (element.hasAttribute('contenteditable')) {\n        return tabIndexValue !== -1;\n      }\n\n      if (nodeName === 'iframe') {\n        // The frames may be tabbable depending on content, but it's not possibly to reliably\n        // investigate the content of the frames.\n        return false;\n      }\n\n      if (nodeName === 'audio') {\n        if (!element.hasAttribute('controls')) {\n          // By default an <audio> element without the controls enabled is not tabbable.\n          return false;\n        } else if (this._platform.BLINK) {\n          // In Blink <audio controls> elements are always tabbable.\n          return true;\n        }\n      }\n\n      if (nodeName === 'video') {\n        if (!element.hasAttribute('controls') && this._platform.TRIDENT) {\n          // In Trident a <video> element without the controls enabled is not tabbable.\n          return false;\n        } else if (this._platform.BLINK || this._platform.FIREFOX) {\n          // In Chrome and Firefox <video controls> elements are always tabbable.\n          return true;\n        }\n      }\n\n      if (nodeName === 'object' && (this._platform.BLINK || this._platform.WEBKIT)) {\n        // In all Blink and WebKit based browsers <object> elements are never tabbable.\n        return false;\n      } // In iOS the browser only considers some specific elements as tabbable.\n\n\n      if (this._platform.WEBKIT && this._platform.IOS && !isPotentiallyTabbableIOS(element)) {\n        return false;\n      }\n\n      return element.tabIndex >= 0;\n    }\n    /**\n     * Gets whether an element can be focused by the user.\n     *\n     * @param {?} element Element to be checked.\n     * @return {?} Whether the element is focusable.\n     */\n\n  }, {\n    key: \"isFocusable\",\n    value: function isFocusable(element) {\n      // Perform checks in order of left to most expensive.\n      // Again, naive approach that does not capture many edge cases and browser quirks.\n      return isPotentiallyFocusable(element) && !this.isDisabled(element) && this.isVisible(element);\n    }\n  }]);\n\n  return InteractivityChecker;\n}();\n\nInteractivityChecker.ɵfac = function InteractivityChecker_Factory(t) {\n  return new (t || InteractivityChecker)(ɵngcc0.ɵɵinject(ɵngcc1.Platform));\n};\n\nInteractivityChecker.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n  token: InteractivityChecker,\n  factory: InteractivityChecker.ɵfac,\n  providedIn: 'root'\n});\n/** @nocollapse */\n\nInteractivityChecker.ctorParameters = function () {\n  return [{\n    type: Platform\n  }];\n};\n/** @nocollapse */\n\n\nInteractivityChecker.ngInjectableDef = defineInjectable({\n  factory: function InteractivityChecker_Factory() {\n    return new InteractivityChecker(inject(Platform));\n  },\n  token: InteractivityChecker,\n  providedIn: \"root\"\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(InteractivityChecker, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc1.Platform\n    }];\n  }, null);\n})();\n/**\n * Returns the frame element from a window object. Since browsers like MS Edge throw errors if\n * the frameElement property is being accessed from a different host address, this property\n * should be accessed carefully.\n * @param {?} window\n * @return {?}\n */\n\n\nfunction getFrameElement(window) {\n  try {\n    return (\n      /** @type {?} */\n      window.frameElement\n    );\n  } catch (_a) {\n    return null;\n  }\n}\n/**\n * Checks whether the specified element has any geometry / rectangles.\n * @param {?} element\n * @return {?}\n */\n\n\nfunction hasGeometry(element) {\n  // Use logic from jQuery to check for an invisible element.\n  // See https://github.com/jquery/jquery/blob/master/src/css/hiddenVisibleSelectors.js#L12\n  return !!(element.offsetWidth || element.offsetHeight || typeof element.getClientRects === 'function' && element.getClientRects().length);\n}\n/**\n * Gets whether an element's\n * @param {?} element\n * @return {?}\n */\n\n\nfunction isNativeFormElement(element) {\n  /** @type {?} */\n  var nodeName = element.nodeName.toLowerCase();\n  return nodeName === 'input' || nodeName === 'select' || nodeName === 'button' || nodeName === 'textarea';\n}\n/**\n * Gets whether an element is an `<input type=\"hidden\">`.\n * @param {?} element\n * @return {?}\n */\n\n\nfunction isHiddenInput(element) {\n  return isInputElement(element) && element.type == 'hidden';\n}\n/**\n * Gets whether an element is an anchor that has an href attribute.\n * @param {?} element\n * @return {?}\n */\n\n\nfunction isAnchorWithHref(element) {\n  return isAnchorElement(element) && element.hasAttribute('href');\n}\n/**\n * Gets whether an element is an input element.\n * @param {?} element\n * @return {?}\n */\n\n\nfunction isInputElement(element) {\n  return element.nodeName.toLowerCase() == 'input';\n}\n/**\n * Gets whether an element is an anchor element.\n * @param {?} element\n * @return {?}\n */\n\n\nfunction isAnchorElement(element) {\n  return element.nodeName.toLowerCase() == 'a';\n}\n/**\n * Gets whether an element has a valid tabindex.\n * @param {?} element\n * @return {?}\n */\n\n\nfunction hasValidTabIndex(element) {\n  if (!element.hasAttribute('tabindex') || element.tabIndex === undefined) {\n    return false;\n  }\n  /** @type {?} */\n\n\n  var tabIndex = element.getAttribute('tabindex'); // IE11 parses tabindex=\"\" as the value \"-32768\"\n\n  if (tabIndex == '-32768') {\n    return false;\n  }\n\n  return !!(tabIndex && !isNaN(parseInt(tabIndex, 10)));\n}\n/**\n * Returns the parsed tabindex from the element attributes instead of returning the\n * evaluated tabindex from the browsers defaults.\n * @param {?} element\n * @return {?}\n */\n\n\nfunction getTabIndexValue(element) {\n  if (!hasValidTabIndex(element)) {\n    return null;\n  }\n  /** @type {?} */\n\n\n  var tabIndex = parseInt(element.getAttribute('tabindex') || '', 10);\n  return isNaN(tabIndex) ? -1 : tabIndex;\n}\n/**\n * Checks whether the specified element is potentially tabbable on iOS\n * @param {?} element\n * @return {?}\n */\n\n\nfunction isPotentiallyTabbableIOS(element) {\n  /** @type {?} */\n  var nodeName = element.nodeName.toLowerCase();\n  /** @type {?} */\n\n  var inputType = nodeName === 'input' &&\n  /** @type {?} */\n  element.type;\n  return inputType === 'text' || inputType === 'password' || nodeName === 'select' || nodeName === 'textarea';\n}\n/**\n * Gets whether an element is potentially focusable without taking current visible/disabled state\n * into account.\n * @param {?} element\n * @return {?}\n */\n\n\nfunction isPotentiallyFocusable(element) {\n  // Inputs are potentially focusable *unless* they're type=\"hidden\".\n  if (isHiddenInput(element)) {\n    return false;\n  }\n\n  return isNativeFormElement(element) || isAnchorWithHref(element) || element.hasAttribute('contenteditable') || hasValidTabIndex(element);\n}\n/**\n * Gets the parent window of a DOM node with regards of being inside of an iframe.\n * @param {?} node\n * @return {?}\n */\n\n\nfunction getWindow(node) {\n  // ownerDocument is null if `node` itself *is* a document.\n  return node.ownerDocument && node.ownerDocument.defaultView || window;\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * Class that allows for trapping focus within a DOM element.\n *\n * This class currently uses a relatively simple approach to focus trapping.\n * It assumes that the tab order is the same as DOM order, which is not necessarily true.\n * Things like `tabIndex > 0`, flex `order`, and shadow roots can cause to two to misalign.\n */\n\n\nvar FocusTrap = /*#__PURE__*/function () {\n  /**\n   * @param {?} _element\n   * @param {?} _checker\n   * @param {?} _ngZone\n   * @param {?} _document\n   * @param {?=} deferAnchors\n   */\n  function FocusTrap(_element, _checker, _ngZone, _document) {\n    var deferAnchors = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n\n    _classCallCheck(this, FocusTrap);\n\n    this._element = _element;\n    this._checker = _checker;\n    this._ngZone = _ngZone;\n    this._document = _document;\n    this._hasAttached = false;\n    this._enabled = true;\n\n    if (!deferAnchors) {\n      this.attachAnchors();\n    }\n  }\n  /**\n   * Whether the focus trap is active.\n   * @return {?}\n   */\n\n\n  _createClass(FocusTrap, [{\n    key: \"enabled\",\n    get: function get() {\n      return this._enabled;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ,\n    set: function set(value) {\n      this._enabled = value;\n\n      if (this._startAnchor && this._endAnchor) {\n        this._toggleAnchorTabIndex(value, this._startAnchor);\n\n        this._toggleAnchorTabIndex(value, this._endAnchor);\n      }\n    }\n    /**\n     * Destroys the focus trap by cleaning up the anchors.\n     * @return {?}\n     */\n\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      if (this._startAnchor && this._startAnchor.parentNode) {\n        this._startAnchor.parentNode.removeChild(this._startAnchor);\n      }\n\n      if (this._endAnchor && this._endAnchor.parentNode) {\n        this._endAnchor.parentNode.removeChild(this._endAnchor);\n      }\n\n      this._startAnchor = this._endAnchor = null;\n    }\n    /**\n     * Inserts the anchors into the DOM. This is usually done automatically\n     * in the constructor, but can be deferred for cases like directives with `*ngIf`.\n     * @return {?} Whether the focus trap managed to attach successfuly. This may not be the case\n     * if the target element isn't currently in the DOM.\n     */\n\n  }, {\n    key: \"attachAnchors\",\n    value: function attachAnchors() {\n      var _this4 = this;\n\n      // If we're not on the browser, there can be no focus to trap.\n      if (this._hasAttached) {\n        return true;\n      }\n\n      this._ngZone.runOutsideAngular(function () {\n        if (!_this4._startAnchor) {\n          _this4._startAnchor = _this4._createAnchor();\n          /** @type {?} */\n\n          _this4._startAnchor.addEventListener('focus', function () {\n            return _this4.focusLastTabbableElement();\n          });\n        }\n\n        if (!_this4._endAnchor) {\n          _this4._endAnchor = _this4._createAnchor();\n          /** @type {?} */\n\n          _this4._endAnchor.addEventListener('focus', function () {\n            return _this4.focusFirstTabbableElement();\n          });\n        }\n      });\n\n      if (this._element.parentNode) {\n        this._element.parentNode.insertBefore(\n        /** @type {?} */\n        this._startAnchor, this._element);\n\n        this._element.parentNode.insertBefore(\n        /** @type {?} */\n        this._endAnchor, this._element.nextSibling);\n\n        this._hasAttached = true;\n      }\n\n      return this._hasAttached;\n    }\n    /**\n     * Waits for the zone to stabilize, then either focuses the first element that the\n     * user specified, or the first tabbable element.\n     * @return {?} Returns a promise that resolves with a boolean, depending\n     * on whether focus was moved successfuly.\n     */\n\n  }, {\n    key: \"focusInitialElementWhenReady\",\n    value: function focusInitialElementWhenReady() {\n      var _this5 = this;\n\n      return new Promise(function (resolve) {\n        _this5._executeOnStable(function () {\n          return resolve(_this5.focusInitialElement());\n        });\n      });\n    }\n    /**\n     * Waits for the zone to stabilize, then focuses\n     * the first tabbable element within the focus trap region.\n     * @return {?} Returns a promise that resolves with a boolean, depending\n     * on whether focus was moved successfuly.\n     */\n\n  }, {\n    key: \"focusFirstTabbableElementWhenReady\",\n    value: function focusFirstTabbableElementWhenReady() {\n      var _this6 = this;\n\n      return new Promise(function (resolve) {\n        _this6._executeOnStable(function () {\n          return resolve(_this6.focusFirstTabbableElement());\n        });\n      });\n    }\n    /**\n     * Waits for the zone to stabilize, then focuses\n     * the last tabbable element within the focus trap region.\n     * @return {?} Returns a promise that resolves with a boolean, depending\n     * on whether focus was moved successfuly.\n     */\n\n  }, {\n    key: \"focusLastTabbableElementWhenReady\",\n    value: function focusLastTabbableElementWhenReady() {\n      var _this7 = this;\n\n      return new Promise(function (resolve) {\n        _this7._executeOnStable(function () {\n          return resolve(_this7.focusLastTabbableElement());\n        });\n      });\n    }\n    /**\n     * Get the specified boundary element of the trapped region.\n     * @param {?} bound The boundary to get (start or end of trapped region).\n     * @return {?} The boundary element.\n     */\n\n  }, {\n    key: \"_getRegionBoundary\",\n    value: function _getRegionBoundary(bound) {\n      /** @type {?} */\n      var markers =\n      /** @type {?} */\n      this._element.querySelectorAll(\"[cdk-focus-region-\".concat(bound, \"], \") + \"[cdkFocusRegion\".concat(bound, \"], \") + \"[cdk-focus-\".concat(bound, \"]\"));\n\n      for (var i = 0; i < markers.length; i++) {\n        // @breaking-change 8.0.0\n        if (markers[i].hasAttribute(\"cdk-focus-\".concat(bound))) {\n          console.warn(\"Found use of deprecated attribute 'cdk-focus-\".concat(bound, \"', \") + \"use 'cdkFocusRegion\".concat(bound, \"' instead. The deprecated \") + \"attribute will be removed in 8.0.0.\", markers[i]);\n        } else if (markers[i].hasAttribute(\"cdk-focus-region-\".concat(bound))) {\n          console.warn(\"Found use of deprecated attribute 'cdk-focus-region-\".concat(bound, \"', \") + \"use 'cdkFocusRegion\".concat(bound, \"' instead. The deprecated attribute \") + \"will be removed in 8.0.0.\", markers[i]);\n        }\n      }\n\n      if (bound == 'start') {\n        return markers.length ? markers[0] : this._getFirstTabbableElement(this._element);\n      }\n\n      return markers.length ? markers[markers.length - 1] : this._getLastTabbableElement(this._element);\n    }\n    /**\n     * Focuses the element that should be focused when the focus trap is initialized.\n     * @return {?} Whether focus was moved successfuly.\n     */\n\n  }, {\n    key: \"focusInitialElement\",\n    value: function focusInitialElement() {\n      /** @type {?} */\n      var redirectToElement =\n      /** @type {?} */\n      this._element.querySelector(\"[cdk-focus-initial], \" + \"[cdkFocusInitial]\");\n\n      if (redirectToElement) {\n        // @breaking-change 8.0.0\n        if (redirectToElement.hasAttribute(\"cdk-focus-initial\")) {\n          console.warn(\"Found use of deprecated attribute 'cdk-focus-initial', \" + \"use 'cdkFocusInitial' instead. The deprecated attribute \" + \"will be removed in 8.0.0\", redirectToElement);\n        }\n\n        redirectToElement.focus();\n        return true;\n      }\n\n      return this.focusFirstTabbableElement();\n    }\n    /**\n     * Focuses the first tabbable element within the focus trap region.\n     * @return {?} Whether focus was moved successfuly.\n     */\n\n  }, {\n    key: \"focusFirstTabbableElement\",\n    value: function focusFirstTabbableElement() {\n      /** @type {?} */\n      var redirectToElement = this._getRegionBoundary('start');\n\n      if (redirectToElement) {\n        redirectToElement.focus();\n      }\n\n      return !!redirectToElement;\n    }\n    /**\n     * Focuses the last tabbable element within the focus trap region.\n     * @return {?} Whether focus was moved successfuly.\n     */\n\n  }, {\n    key: \"focusLastTabbableElement\",\n    value: function focusLastTabbableElement() {\n      /** @type {?} */\n      var redirectToElement = this._getRegionBoundary('end');\n\n      if (redirectToElement) {\n        redirectToElement.focus();\n      }\n\n      return !!redirectToElement;\n    }\n    /**\n     * Checks whether the focus trap has successfuly been attached.\n     * @return {?}\n     */\n\n  }, {\n    key: \"hasAttached\",\n    value: function hasAttached() {\n      return this._hasAttached;\n    }\n    /**\n     * Get the first tabbable element from a DOM subtree (inclusive).\n     * @param {?} root\n     * @return {?}\n     */\n\n  }, {\n    key: \"_getFirstTabbableElement\",\n    value: function _getFirstTabbableElement(root) {\n      if (this._checker.isFocusable(root) && this._checker.isTabbable(root)) {\n        return root;\n      }\n      /** @type {?} */\n\n\n      var children = root.children || root.childNodes;\n\n      for (var i = 0; i < children.length; i++) {\n        /** @type {?} */\n        var tabbableChild = children[i].nodeType === this._document.ELEMENT_NODE ? this._getFirstTabbableElement(\n        /** @type {?} */\n        children[i]) : null;\n\n        if (tabbableChild) {\n          return tabbableChild;\n        }\n      }\n\n      return null;\n    }\n    /**\n     * Get the last tabbable element from a DOM subtree (inclusive).\n     * @param {?} root\n     * @return {?}\n     */\n\n  }, {\n    key: \"_getLastTabbableElement\",\n    value: function _getLastTabbableElement(root) {\n      if (this._checker.isFocusable(root) && this._checker.isTabbable(root)) {\n        return root;\n      }\n      /** @type {?} */\n\n\n      var children = root.children || root.childNodes;\n\n      for (var i = children.length - 1; i >= 0; i--) {\n        /** @type {?} */\n        var tabbableChild = children[i].nodeType === this._document.ELEMENT_NODE ? this._getLastTabbableElement(\n        /** @type {?} */\n        children[i]) : null;\n\n        if (tabbableChild) {\n          return tabbableChild;\n        }\n      }\n\n      return null;\n    }\n    /**\n     * Creates an anchor element.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_createAnchor\",\n    value: function _createAnchor() {\n      /** @type {?} */\n      var anchor = this._document.createElement('div');\n\n      this._toggleAnchorTabIndex(this._enabled, anchor);\n\n      anchor.classList.add('cdk-visually-hidden');\n      anchor.classList.add('cdk-focus-trap-anchor');\n      return anchor;\n    }\n    /**\n     * Toggles the `tabindex` of an anchor, based on the enabled state of the focus trap.\n     * @param {?} isEnabled Whether the focus trap is enabled.\n     * @param {?} anchor Anchor on which to toggle the tabindex.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_toggleAnchorTabIndex\",\n    value: function _toggleAnchorTabIndex(isEnabled, anchor) {\n      // Remove the tabindex completely, rather than setting it to -1, because if the\n      // element has a tabindex, the user might still hit it when navigating with the arrow keys.\n      isEnabled ? anchor.setAttribute('tabindex', '0') : anchor.removeAttribute('tabindex');\n    }\n    /**\n     * Executes a function when the zone is stable.\n     * @param {?} fn\n     * @return {?}\n     */\n\n  }, {\n    key: \"_executeOnStable\",\n    value: function _executeOnStable(fn) {\n      if (this._ngZone.isStable) {\n        fn();\n      } else {\n        this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(fn);\n      }\n    }\n  }]);\n\n  return FocusTrap;\n}();\n/**\n * Factory that allows easy instantiation of focus traps.\n */\n\n\nvar FocusTrapFactory = /*#__PURE__*/function () {\n  /**\n   * @param {?} _checker\n   * @param {?} _ngZone\n   * @param {?} _document\n   */\n  function FocusTrapFactory(_checker, _ngZone, _document) {\n    _classCallCheck(this, FocusTrapFactory);\n\n    this._checker = _checker;\n    this._ngZone = _ngZone;\n    this._document = _document;\n  }\n  /**\n   * Creates a focus-trapped region around the given element.\n   * @param {?} element The element around which focus will be trapped.\n   * @param {?=} deferCaptureElements Defers the creation of focus-capturing elements to be done\n   *     manually by the user.\n   * @return {?} The created focus trap instance.\n   */\n\n\n  _createClass(FocusTrapFactory, [{\n    key: \"create\",\n    value: function create(element) {\n      var deferCaptureElements = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      return new FocusTrap(element, this._checker, this._ngZone, this._document, deferCaptureElements);\n    }\n  }]);\n\n  return FocusTrapFactory;\n}();\n\nFocusTrapFactory.ɵfac = function FocusTrapFactory_Factory(t) {\n  return new (t || FocusTrapFactory)(ɵngcc0.ɵɵinject(InteractivityChecker), ɵngcc0.ɵɵinject(ɵngcc0.NgZone), ɵngcc0.ɵɵinject(DOCUMENT));\n};\n\nFocusTrapFactory.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n  token: FocusTrapFactory,\n  factory: FocusTrapFactory.ɵfac,\n  providedIn: 'root'\n});\n/** @nocollapse */\n\nFocusTrapFactory.ctorParameters = function () {\n  return [{\n    type: InteractivityChecker\n  }, {\n    type: NgZone\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Inject,\n      args: [DOCUMENT]\n    }]\n  }];\n};\n/** @nocollapse */\n\n\nFocusTrapFactory.ngInjectableDef = defineInjectable({\n  factory: function FocusTrapFactory_Factory() {\n    return new FocusTrapFactory(inject(InteractivityChecker), inject(NgZone), inject(DOCUMENT));\n  },\n  token: FocusTrapFactory,\n  providedIn: \"root\"\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(FocusTrapFactory, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: InteractivityChecker\n    }, {\n      type: ɵngcc0.NgZone\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }];\n  }, null);\n})();\n/**\n * Directive for trapping focus within a region.\n */\n\n\nvar CdkTrapFocus = /*#__PURE__*/function () {\n  /**\n   * @param {?} _elementRef\n   * @param {?} _focusTrapFactory\n   * @param {?} _document\n   */\n  function CdkTrapFocus(_elementRef, _focusTrapFactory, _document) {\n    _classCallCheck(this, CdkTrapFocus);\n\n    this._elementRef = _elementRef;\n    this._focusTrapFactory = _focusTrapFactory;\n    /**\n     * Previously focused element to restore focus to upon destroy when using autoCapture.\n     */\n\n    this._previouslyFocusedElement = null;\n    this._document = _document;\n    this.focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement, true);\n  }\n  /**\n   * Whether the focus trap is active.\n   * @return {?}\n   */\n\n\n  _createClass(CdkTrapFocus, [{\n    key: \"enabled\",\n    get: function get() {\n      return this.focusTrap.enabled;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ,\n    set: function set(value) {\n      this.focusTrap.enabled = coerceBooleanProperty(value);\n    }\n    /**\n     * Whether the directive should automatially move focus into the trapped region upon\n     * initialization and return focus to the previous activeElement upon destruction.\n     * @return {?}\n     */\n\n  }, {\n    key: \"autoCapture\",\n    get: function get() {\n      return this._autoCapture;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ,\n    set: function set(value) {\n      this._autoCapture = coerceBooleanProperty(value);\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      this.focusTrap.destroy(); // If we stored a previously focused element when using autoCapture, return focus to that\n      // element now that the trapped region is being destroyed.\n\n      if (this._previouslyFocusedElement) {\n        this._previouslyFocusedElement.focus();\n\n        this._previouslyFocusedElement = null;\n      }\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngAfterContentInit\",\n    value: function ngAfterContentInit() {\n      this.focusTrap.attachAnchors();\n\n      if (this.autoCapture) {\n        this._previouslyFocusedElement =\n        /** @type {?} */\n        this._document.activeElement;\n        this.focusTrap.focusInitialElementWhenReady();\n      }\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngDoCheck\",\n    value: function ngDoCheck() {\n      if (!this.focusTrap.hasAttached()) {\n        this.focusTrap.attachAnchors();\n      }\n    }\n  }]);\n\n  return CdkTrapFocus;\n}();\n\nCdkTrapFocus.ɵfac = function CdkTrapFocus_Factory(t) {\n  return new (t || CdkTrapFocus)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(FocusTrapFactory), ɵngcc0.ɵɵdirectiveInject(DOCUMENT));\n};\n\nCdkTrapFocus.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n  type: CdkTrapFocus,\n  selectors: [[\"\", \"cdkTrapFocus\", \"\"]],\n  inputs: {\n    enabled: [\"cdkTrapFocus\", \"enabled\"],\n    autoCapture: [\"cdkTrapFocusAutoCapture\", \"autoCapture\"]\n  },\n  exportAs: [\"cdkTrapFocus\"]\n});\n/** @nocollapse */\n\nCdkTrapFocus.ctorParameters = function () {\n  return [{\n    type: ElementRef\n  }, {\n    type: FocusTrapFactory\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Inject,\n      args: [DOCUMENT]\n    }]\n  }];\n};\n\nCdkTrapFocus.propDecorators = {\n  enabled: [{\n    type: Input,\n    args: ['cdkTrapFocus']\n  }],\n  autoCapture: [{\n    type: Input,\n    args: ['cdkTrapFocusAutoCapture']\n  }]\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkTrapFocus, [{\n    type: Directive,\n    args: [{\n      selector: '[cdkTrapFocus]',\n      exportAs: 'cdkTrapFocus'\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ElementRef\n    }, {\n      type: FocusTrapFactory\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }];\n  }, {\n    enabled: [{\n      type: Input,\n      args: ['cdkTrapFocus']\n    }],\n    autoCapture: [{\n      type: Input,\n      args: ['cdkTrapFocusAutoCapture']\n    }]\n  });\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/** @type {?} */\n\n\nvar LIVE_ANNOUNCER_ELEMENT_TOKEN = new InjectionToken('liveAnnouncerElement', {\n  providedIn: 'root',\n  factory: LIVE_ANNOUNCER_ELEMENT_TOKEN_FACTORY\n});\n/**\n * \\@docs-private\n * @return {?}\n */\n\nfunction LIVE_ANNOUNCER_ELEMENT_TOKEN_FACTORY() {\n  return null;\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n\nvar LiveAnnouncer = /*#__PURE__*/function () {\n  /**\n   * @param {?} elementToken\n   * @param {?} _ngZone\n   * @param {?} _document\n   */\n  function LiveAnnouncer(elementToken, _ngZone, _document) {\n    _classCallCheck(this, LiveAnnouncer);\n\n    this._ngZone = _ngZone; // We inject the live element and document as `any` because the constructor signature cannot\n    // reference browser globals (HTMLElement, Document) on non-browser environments, since having\n    // a class decorator causes TypeScript to preserve the constructor signature types.\n\n    this._document = _document;\n    this._liveElement = elementToken || this._createLiveElement();\n  }\n  /**\n   * Announces a message to screenreaders.\n   * @param {?} message Message to be announced to the screenreader\n   * @param {?=} politeness The politeness of the announcer element\n   * @return {?} Promise that will be resolved when the message is added to the DOM.\n   */\n\n\n  _createClass(LiveAnnouncer, [{\n    key: \"announce\",\n    value: function announce(message) {\n      var _this8 = this;\n\n      var politeness = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'polite';\n      this._liveElement.textContent = ''; // TODO: ensure changing the politeness works on all environments we support.\n\n      this._liveElement.setAttribute('aria-live', politeness); // This 100ms timeout is necessary for some browser + screen-reader combinations:\n      // - Both JAWS and NVDA over IE11 will not announce anything without a non-zero timeout.\n      // - With Chrome and IE11 with NVDA or JAWS, a repeated (identical) message won't be read a\n      //   second time without clearing and then using a non-zero delay.\n      // (using JAWS 17 at time of this writing).\n\n\n      return this._ngZone.runOutsideAngular(function () {\n        return new Promise(function (resolve) {\n          setTimeout(function () {\n            _this8._liveElement.textContent = message;\n            resolve();\n          }, 100);\n        });\n      });\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      if (this._liveElement && this._liveElement.parentNode) {\n        this._liveElement.parentNode.removeChild(this._liveElement);\n      }\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"_createLiveElement\",\n    value: function _createLiveElement() {\n      /** @type {?} */\n      var elementClass = 'cdk-live-announcer-element';\n      /** @type {?} */\n\n      var previousElements = this._document.getElementsByClassName(elementClass);\n      /** @type {?} */\n\n\n      var liveEl = this._document.createElement('div'); // Remove any old containers. This can happen when coming in from a server-side-rendered page.\n\n\n      for (var i = 0; i < previousElements.length; i++) {\n        /** @type {?} */\n        previousElements[i].parentNode.removeChild(previousElements[i]);\n      }\n\n      liveEl.classList.add(elementClass);\n      liveEl.classList.add('cdk-visually-hidden');\n      liveEl.setAttribute('aria-atomic', 'true');\n      liveEl.setAttribute('aria-live', 'polite');\n\n      this._document.body.appendChild(liveEl);\n\n      return liveEl;\n    }\n  }]);\n\n  return LiveAnnouncer;\n}();\n\nLiveAnnouncer.ɵfac = function LiveAnnouncer_Factory(t) {\n  return new (t || LiveAnnouncer)(ɵngcc0.ɵɵinject(LIVE_ANNOUNCER_ELEMENT_TOKEN, 8), ɵngcc0.ɵɵinject(ɵngcc0.NgZone), ɵngcc0.ɵɵinject(DOCUMENT));\n};\n\nLiveAnnouncer.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n  token: LiveAnnouncer,\n  factory: LiveAnnouncer.ɵfac,\n  providedIn: 'root'\n});\n/** @nocollapse */\n\nLiveAnnouncer.ctorParameters = function () {\n  return [{\n    type: undefined,\n    decorators: [{\n      type: Optional\n    }, {\n      type: Inject,\n      args: [LIVE_ANNOUNCER_ELEMENT_TOKEN]\n    }]\n  }, {\n    type: NgZone\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Inject,\n      args: [DOCUMENT]\n    }]\n  }];\n};\n/** @nocollapse */\n\n\nLiveAnnouncer.ngInjectableDef = defineInjectable({\n  factory: function LiveAnnouncer_Factory() {\n    return new LiveAnnouncer(inject(LIVE_ANNOUNCER_ELEMENT_TOKEN, 8), inject(NgZone), inject(DOCUMENT));\n  },\n  token: LiveAnnouncer,\n  providedIn: \"root\"\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(LiveAnnouncer, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [LIVE_ANNOUNCER_ELEMENT_TOKEN]\n      }]\n    }, {\n      type: ɵngcc0.NgZone\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }];\n  }, null);\n})();\n/**\n * A directive that works similarly to aria-live, but uses the LiveAnnouncer to ensure compatibility\n * with a wider range of browsers and screen readers.\n */\n\n\nvar CdkAriaLive = /*#__PURE__*/function () {\n  /**\n   * @param {?} _elementRef\n   * @param {?} _liveAnnouncer\n   * @param {?} _contentObserver\n   * @param {?} _ngZone\n   */\n  function CdkAriaLive(_elementRef, _liveAnnouncer, _contentObserver, _ngZone) {\n    _classCallCheck(this, CdkAriaLive);\n\n    this._elementRef = _elementRef;\n    this._liveAnnouncer = _liveAnnouncer;\n    this._contentObserver = _contentObserver;\n    this._ngZone = _ngZone;\n    this._politeness = 'off';\n  }\n  /**\n   * The aria-live politeness level to use when announcing messages.\n   * @return {?}\n   */\n\n\n  _createClass(CdkAriaLive, [{\n    key: \"politeness\",\n    get: function get() {\n      return this._politeness;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ,\n    set: function set(value) {\n      var _this9 = this;\n\n      this._politeness = value === 'polite' || value === 'assertive' ? value : 'off';\n\n      if (this._politeness === 'off') {\n        if (this._subscription) {\n          this._subscription.unsubscribe();\n\n          this._subscription = null;\n        }\n      } else if (!this._subscription) {\n        this._subscription = this._ngZone.runOutsideAngular(function () {\n          return _this9._contentObserver.observe(_this9._elementRef).subscribe(function () {\n            /** @type {?} */\n            var element = _this9._elementRef.nativeElement;\n\n            _this9._liveAnnouncer.announce(element.textContent, _this9._politeness);\n          });\n        });\n      }\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      if (this._subscription) {\n        this._subscription.unsubscribe();\n      }\n    }\n  }]);\n\n  return CdkAriaLive;\n}();\n\nCdkAriaLive.ɵfac = function CdkAriaLive_Factory(t) {\n  return new (t || CdkAriaLive)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(LiveAnnouncer), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.ContentObserver), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone));\n};\n\nCdkAriaLive.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n  type: CdkAriaLive,\n  selectors: [[\"\", \"cdkAriaLive\", \"\"]],\n  inputs: {\n    politeness: [\"cdkAriaLive\", \"politeness\"]\n  },\n  exportAs: [\"cdkAriaLive\"]\n});\n/** @nocollapse */\n\nCdkAriaLive.ctorParameters = function () {\n  return [{\n    type: ElementRef\n  }, {\n    type: LiveAnnouncer\n  }, {\n    type: ContentObserver\n  }, {\n    type: NgZone\n  }];\n};\n\nCdkAriaLive.propDecorators = {\n  politeness: [{\n    type: Input,\n    args: ['cdkAriaLive']\n  }]\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkAriaLive, [{\n    type: Directive,\n    args: [{\n      selector: '[cdkAriaLive]',\n      exportAs: 'cdkAriaLive'\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ElementRef\n    }, {\n      type: LiveAnnouncer\n    }, {\n      type: ɵngcc2.ContentObserver\n    }, {\n      type: ɵngcc0.NgZone\n    }];\n  }, {\n    politeness: [{\n      type: Input,\n      args: ['cdkAriaLive']\n    }]\n  });\n})();\n/**\n * \\@docs-private \\@deprecated \\@breaking-change 8.0.0\n * @param {?} parentDispatcher\n * @param {?} liveElement\n * @param {?} _document\n * @param {?} ngZone\n * @return {?}\n */\n\n\nfunction LIVE_ANNOUNCER_PROVIDER_FACTORY(parentDispatcher, liveElement, _document, ngZone) {\n  return parentDispatcher || new LiveAnnouncer(liveElement, _document, ngZone);\n}\n/** *\n * \\@docs-private \\@deprecated \\@breaking-change 8.0.0\n  @type {?} */\n\n\nvar LIVE_ANNOUNCER_PROVIDER = {\n  // If there is already a LiveAnnouncer available, use that. Otherwise, provide a new one.\n  provide: LiveAnnouncer,\n  deps: [[new Optional(), new SkipSelf(), LiveAnnouncer], [new Optional(), new Inject(LIVE_ANNOUNCER_ELEMENT_TOKEN)], DOCUMENT, NgZone],\n  useFactory: LIVE_ANNOUNCER_PROVIDER_FACTORY\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/** @type {?} */\n\nvar TOUCH_BUFFER_MS = 650;\n/**\n * Monitors mouse and keyboard events to determine the cause of focus events.\n */\n\nvar FocusMonitor = /*#__PURE__*/function () {\n  /**\n   * @param {?} _ngZone\n   * @param {?} _platform\n   */\n  function FocusMonitor(_ngZone, _platform) {\n    _classCallCheck(this, FocusMonitor);\n\n    this._ngZone = _ngZone;\n    this._platform = _platform;\n    /**\n     * The focus origin that the next focus event is a result of.\n     */\n\n    this._origin = null;\n    /**\n     * Whether the window has just been focused.\n     */\n\n    this._windowFocused = false;\n    /**\n     * Map of elements being monitored to their info.\n     */\n\n    this._elementInfo = new Map();\n    /**\n     * A map of global objects to lists of current listeners.\n     */\n\n    this._unregisterGlobalListeners = function () {};\n    /**\n     * The number of elements currently being monitored.\n     */\n\n\n    this._monitoredElementCount = 0;\n  }\n  /**\n   * @param {?} element\n   * @param {?=} checkChildren\n   * @return {?}\n   */\n\n\n  _createClass(FocusMonitor, [{\n    key: \"monitor\",\n    value: function monitor(element) {\n      var _this10 = this;\n\n      var checkChildren = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n      // Do nothing if we're not on the browser platform.\n      if (!this._platform.isBrowser) {\n        return of(null);\n      }\n      /** @type {?} */\n\n\n      var nativeElement = this._getNativeElement(element); // Check if we're already monitoring this element.\n\n\n      if (this._elementInfo.has(nativeElement)) {\n        /** @type {?} */\n        var cachedInfo = this._elementInfo.get(nativeElement);\n        /** @type {?} */\n\n\n        cachedInfo.checkChildren = checkChildren;\n        return (\n          /** @type {?} */\n          cachedInfo.subject.asObservable()\n        );\n      }\n      /** @type {?} */\n\n\n      var info = {\n        unlisten: function unlisten() {},\n        checkChildren: checkChildren,\n        subject: new Subject()\n      };\n\n      this._elementInfo.set(nativeElement, info);\n\n      this._incrementMonitoredElementCount();\n      /** @type {?} */\n\n\n      var focusListener = function focusListener(event) {\n        return _this10._onFocus(event, nativeElement);\n      };\n      /** @type {?} */\n\n\n      var blurListener = function blurListener(event) {\n        return _this10._onBlur(event, nativeElement);\n      };\n\n      this._ngZone.runOutsideAngular(function () {\n        nativeElement.addEventListener('focus', focusListener, true);\n        nativeElement.addEventListener('blur', blurListener, true);\n      }); // Create an unlisten function for later.\n\n\n      info.unlisten = function () {\n        nativeElement.removeEventListener('focus', focusListener, true);\n        nativeElement.removeEventListener('blur', blurListener, true);\n      };\n\n      return info.subject.asObservable();\n    }\n    /**\n     * @param {?} element\n     * @return {?}\n     */\n\n  }, {\n    key: \"stopMonitoring\",\n    value: function stopMonitoring(element) {\n      /** @type {?} */\n      var nativeElement = this._getNativeElement(element);\n      /** @type {?} */\n\n\n      var elementInfo = this._elementInfo.get(nativeElement);\n\n      if (elementInfo) {\n        elementInfo.unlisten();\n        elementInfo.subject.complete();\n\n        this._setClasses(nativeElement);\n\n        this._elementInfo.delete(nativeElement);\n\n        this._decrementMonitoredElementCount();\n      }\n    }\n    /**\n     * @param {?} element\n     * @param {?} origin\n     * @param {?=} options\n     * @return {?}\n     */\n\n  }, {\n    key: \"focusVia\",\n    value: function focusVia(element, origin, options) {\n      /** @type {?} */\n      var nativeElement = this._getNativeElement(element);\n\n      this._setOriginForCurrentEventQueue(origin); // `focus` isn't available on the server\n\n\n      if (typeof nativeElement.focus === 'function') {\n        // Cast the element to `any`, because the TS typings don't have the `options` parameter yet.\n\n        /** @type {?} */\n        nativeElement.focus(options);\n      }\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      var _this11 = this;\n\n      this._elementInfo.forEach(function (_info, element) {\n        return _this11.stopMonitoring(element);\n      });\n    }\n    /**\n     * Register necessary event listeners on the document and window.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_registerGlobalListeners\",\n    value: function _registerGlobalListeners() {\n      var _this12 = this;\n\n      // Do nothing if we're not on the browser platform.\n      if (!this._platform.isBrowser) {\n        return;\n      }\n      /** @type {?} */\n\n\n      var documentKeydownListener = function documentKeydownListener() {\n        _this12._lastTouchTarget = null;\n\n        _this12._setOriginForCurrentEventQueue('keyboard');\n      };\n      /** @type {?} */\n\n\n      var documentMousedownListener = function documentMousedownListener() {\n        if (!_this12._lastTouchTarget) {\n          _this12._setOriginForCurrentEventQueue('mouse');\n        }\n      };\n      /** @type {?} */\n\n\n      var documentTouchstartListener = function documentTouchstartListener(event) {\n        if (_this12._touchTimeoutId != null) {\n          clearTimeout(_this12._touchTimeoutId);\n        }\n\n        _this12._lastTouchTarget = event.target;\n        _this12._touchTimeoutId = setTimeout(function () {\n          return _this12._lastTouchTarget = null;\n        }, TOUCH_BUFFER_MS);\n      };\n      /** @type {?} */\n\n\n      var windowFocusListener = function windowFocusListener() {\n        _this12._windowFocused = true;\n        _this12._windowFocusTimeoutId = setTimeout(function () {\n          return _this12._windowFocused = false;\n        });\n      };\n      /** @type {?} */\n\n\n      var captureEventListenerOptions = normalizePassiveListenerOptions({\n        passive: true,\n        capture: true\n      }); // Note: we listen to events in the capture phase so we can detect them even if the user stops\n      // propagation.\n\n      this._ngZone.runOutsideAngular(function () {\n        document.addEventListener('keydown', documentKeydownListener, captureEventListenerOptions);\n        document.addEventListener('mousedown', documentMousedownListener, captureEventListenerOptions);\n        document.addEventListener('touchstart', documentTouchstartListener, captureEventListenerOptions);\n        window.addEventListener('focus', windowFocusListener);\n      });\n\n      this._unregisterGlobalListeners = function () {\n        document.removeEventListener('keydown', documentKeydownListener, captureEventListenerOptions);\n        document.removeEventListener('mousedown', documentMousedownListener, captureEventListenerOptions);\n        document.removeEventListener('touchstart', documentTouchstartListener, captureEventListenerOptions);\n        window.removeEventListener('focus', windowFocusListener); // Clear timeouts for all potentially pending timeouts to prevent the leaks.\n\n        clearTimeout(_this12._windowFocusTimeoutId);\n        clearTimeout(_this12._touchTimeoutId);\n        clearTimeout(_this12._originTimeoutId);\n      };\n    }\n    /**\n     * @param {?} element\n     * @param {?} className\n     * @param {?} shouldSet\n     * @return {?}\n     */\n\n  }, {\n    key: \"_toggleClass\",\n    value: function _toggleClass(element, className, shouldSet) {\n      if (shouldSet) {\n        element.classList.add(className);\n      } else {\n        element.classList.remove(className);\n      }\n    }\n    /**\n     * Sets the focus classes on the element based on the given focus origin.\n     * @param {?} element The element to update the classes on.\n     * @param {?=} origin The focus origin.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_setClasses\",\n    value: function _setClasses(element, origin) {\n      /** @type {?} */\n      var elementInfo = this._elementInfo.get(element);\n\n      if (elementInfo) {\n        this._toggleClass(element, 'cdk-focused', !!origin);\n\n        this._toggleClass(element, 'cdk-touch-focused', origin === 'touch');\n\n        this._toggleClass(element, 'cdk-keyboard-focused', origin === 'keyboard');\n\n        this._toggleClass(element, 'cdk-mouse-focused', origin === 'mouse');\n\n        this._toggleClass(element, 'cdk-program-focused', origin === 'program');\n      }\n    }\n    /**\n     * Sets the origin and schedules an async function to clear it at the end of the event queue.\n     * @param {?} origin The origin to set.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_setOriginForCurrentEventQueue\",\n    value: function _setOriginForCurrentEventQueue(origin) {\n      var _this13 = this;\n\n      this._ngZone.runOutsideAngular(function () {\n        _this13._origin = origin; // Sometimes the focus origin won't be valid in Firefox because Firefox seems to focus *one*\n        // tick after the interaction event fired. To ensure the focus origin is always correct,\n        // the focus origin will be determined at the beginning of the next tick.\n\n        _this13._originTimeoutId = setTimeout(function () {\n          return _this13._origin = null;\n        }, 1);\n      });\n    }\n    /**\n     * Checks whether the given focus event was caused by a touchstart event.\n     * @param {?} event The focus event to check.\n     * @return {?} Whether the event was caused by a touch.\n     */\n\n  }, {\n    key: \"_wasCausedByTouch\",\n    value: function _wasCausedByTouch(event) {\n      /** @type {?} */\n      var focusTarget = event.target;\n      return this._lastTouchTarget instanceof Node && focusTarget instanceof Node && (focusTarget === this._lastTouchTarget || focusTarget.contains(this._lastTouchTarget));\n    }\n    /**\n     * Handles focus events on a registered element.\n     * @param {?} event The focus event.\n     * @param {?} element The monitored element.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_onFocus\",\n    value: function _onFocus(event, element) {\n      /** @type {?} */\n      var elementInfo = this._elementInfo.get(element);\n\n      if (!elementInfo || !elementInfo.checkChildren && element !== event.target) {\n        return;\n      }\n      /** @type {?} */\n\n\n      var origin = this._origin;\n\n      if (!origin) {\n        if (this._windowFocused && this._lastFocusOrigin) {\n          origin = this._lastFocusOrigin;\n        } else if (this._wasCausedByTouch(event)) {\n          origin = 'touch';\n        } else {\n          origin = 'program';\n        }\n      }\n\n      this._setClasses(element, origin);\n\n      this._emitOrigin(elementInfo.subject, origin);\n\n      this._lastFocusOrigin = origin;\n    }\n    /**\n     * Handles blur events on a registered element.\n     * @param {?} event The blur event.\n     * @param {?} element The monitored element.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_onBlur\",\n    value: function _onBlur(event, element) {\n      /** @type {?} */\n      var elementInfo = this._elementInfo.get(element);\n\n      if (!elementInfo || elementInfo.checkChildren && event.relatedTarget instanceof Node && element.contains(event.relatedTarget)) {\n        return;\n      }\n\n      this._setClasses(element);\n\n      this._emitOrigin(elementInfo.subject, null);\n    }\n    /**\n     * @param {?} subject\n     * @param {?} origin\n     * @return {?}\n     */\n\n  }, {\n    key: \"_emitOrigin\",\n    value: function _emitOrigin(subject, origin) {\n      this._ngZone.run(function () {\n        return subject.next(origin);\n      });\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"_incrementMonitoredElementCount\",\n    value: function _incrementMonitoredElementCount() {\n      // Register global listeners when first element is monitored.\n      if (++this._monitoredElementCount == 1) {\n        this._registerGlobalListeners();\n      }\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"_decrementMonitoredElementCount\",\n    value: function _decrementMonitoredElementCount() {\n      // Unregister global listeners when last element is unmonitored.\n      if (! --this._monitoredElementCount) {\n        this._unregisterGlobalListeners();\n\n        this._unregisterGlobalListeners = function () {};\n      }\n    }\n    /**\n     * @param {?} element\n     * @return {?}\n     */\n\n  }, {\n    key: \"_getNativeElement\",\n    value: function _getNativeElement(element) {\n      return element instanceof ElementRef ? element.nativeElement : element;\n    }\n  }]);\n\n  return FocusMonitor;\n}();\n\nFocusMonitor.ɵfac = function FocusMonitor_Factory(t) {\n  return new (t || FocusMonitor)(ɵngcc0.ɵɵinject(ɵngcc0.NgZone), ɵngcc0.ɵɵinject(ɵngcc1.Platform));\n};\n\nFocusMonitor.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n  token: FocusMonitor,\n  factory: FocusMonitor.ɵfac,\n  providedIn: 'root'\n});\n/** @nocollapse */\n\nFocusMonitor.ctorParameters = function () {\n  return [{\n    type: NgZone\n  }, {\n    type: Platform\n  }];\n};\n/** @nocollapse */\n\n\nFocusMonitor.ngInjectableDef = defineInjectable({\n  factory: function FocusMonitor_Factory() {\n    return new FocusMonitor(inject(NgZone), inject(Platform));\n  },\n  token: FocusMonitor,\n  providedIn: \"root\"\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(FocusMonitor, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.NgZone\n    }, {\n      type: ɵngcc1.Platform\n    }];\n  }, null);\n})();\n/**\n * Directive that determines how a particular element was focused (via keyboard, mouse, touch, or\n * programmatically) and adds corresponding classes to the element.\n *\n * There are two variants of this directive:\n * 1) cdkMonitorElementFocus: does not consider an element to be focused if one of its children is\n *    focused.\n * 2) cdkMonitorSubtreeFocus: considers an element focused if it or any of its children are focused.\n */\n\n\nvar CdkMonitorFocus = /*#__PURE__*/function () {\n  /**\n   * @param {?} _elementRef\n   * @param {?} _focusMonitor\n   */\n  function CdkMonitorFocus(_elementRef, _focusMonitor) {\n    var _this14 = this;\n\n    _classCallCheck(this, CdkMonitorFocus);\n\n    this._elementRef = _elementRef;\n    this._focusMonitor = _focusMonitor;\n    this.cdkFocusChange = new EventEmitter();\n    this._monitorSubscription = this._focusMonitor.monitor(this._elementRef, this._elementRef.nativeElement.hasAttribute('cdkMonitorSubtreeFocus')).subscribe(function (origin) {\n      return _this14.cdkFocusChange.emit(origin);\n    });\n  }\n  /**\n   * @return {?}\n   */\n\n\n  _createClass(CdkMonitorFocus, [{\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      this._focusMonitor.stopMonitoring(this._elementRef);\n\n      this._monitorSubscription.unsubscribe();\n    }\n  }]);\n\n  return CdkMonitorFocus;\n}();\n\nCdkMonitorFocus.ɵfac = function CdkMonitorFocus_Factory(t) {\n  return new (t || CdkMonitorFocus)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(FocusMonitor));\n};\n\nCdkMonitorFocus.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n  type: CdkMonitorFocus,\n  selectors: [[\"\", \"cdkMonitorElementFocus\", \"\"], [\"\", \"cdkMonitorSubtreeFocus\", \"\"]],\n  outputs: {\n    cdkFocusChange: \"cdkFocusChange\"\n  }\n});\n/** @nocollapse */\n\nCdkMonitorFocus.ctorParameters = function () {\n  return [{\n    type: ElementRef\n  }, {\n    type: FocusMonitor\n  }];\n};\n\nCdkMonitorFocus.propDecorators = {\n  cdkFocusChange: [{\n    type: Output\n  }]\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkMonitorFocus, [{\n    type: Directive,\n    args: [{\n      selector: '[cdkMonitorElementFocus], [cdkMonitorSubtreeFocus]'\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ElementRef\n    }, {\n      type: FocusMonitor\n    }];\n  }, {\n    cdkFocusChange: [{\n      type: Output\n    }]\n  });\n})();\n/**\n * \\@docs-private \\@deprecated \\@breaking-change 8.0.0\n * @param {?} parentDispatcher\n * @param {?} ngZone\n * @param {?} platform\n * @return {?}\n */\n\n\nfunction FOCUS_MONITOR_PROVIDER_FACTORY(parentDispatcher, ngZone, platform) {\n  return parentDispatcher || new FocusMonitor(ngZone, platform);\n}\n/** *\n * \\@docs-private \\@deprecated \\@breaking-change 8.0.0\n  @type {?} */\n\n\nvar FOCUS_MONITOR_PROVIDER = {\n  // If there is already a FocusMonitor available, use that. Otherwise, provide a new one.\n  provide: FocusMonitor,\n  deps: [[new Optional(), new SkipSelf(), FocusMonitor], NgZone, Platform],\n  useFactory: FOCUS_MONITOR_PROVIDER_FACTORY\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * Screenreaders will often fire fake mousedown events when a focusable element\n * is activated using the keyboard. We can typically distinguish between these faked\n * mousedown events and real mousedown events using the \"buttons\" property. While\n * real mousedowns will indicate the mouse button that was pressed (e.g. \"1\" for\n * the left mouse button), faked mousedowns will usually set the property value to 0.\n * @param {?} event\n * @return {?}\n */\n\nfunction isFakeMousedownFromScreenReader(event) {\n  return event.buttons === 0;\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n\nvar A11yModule = function A11yModule() {\n  _classCallCheck(this, A11yModule);\n};\n\nA11yModule.ɵfac = function A11yModule_Factory(t) {\n  return new (t || A11yModule)();\n};\n\nA11yModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n  type: A11yModule\n});\nA11yModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n  imports: [[CommonModule, PlatformModule, ObserversModule]]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(A11yModule, [{\n    type: NgModule,\n    args: [{\n      imports: [CommonModule, PlatformModule, ObserversModule],\n      declarations: [CdkAriaLive, CdkTrapFocus, CdkMonitorFocus],\n      exports: [CdkAriaLive, CdkTrapFocus, CdkMonitorFocus]\n    }]\n  }], null, null);\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(A11yModule, {\n    declarations: function declarations() {\n      return [CdkAriaLive, CdkTrapFocus, CdkMonitorFocus];\n    },\n    imports: function imports() {\n      return [CommonModule, PlatformModule, ObserversModule];\n    },\n    exports: function exports() {\n      return [CdkAriaLive, CdkTrapFocus, CdkMonitorFocus];\n    }\n  });\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n\nexport { ARIA_DESCRIBER_PROVIDER_FACTORY, MESSAGES_CONTAINER_ID, CDK_DESCRIBEDBY_ID_PREFIX, CDK_DESCRIBEDBY_HOST_ATTRIBUTE, AriaDescriber, ARIA_DESCRIBER_PROVIDER, ActiveDescendantKeyManager, FocusKeyManager, ListKeyManager, FocusTrap, FocusTrapFactory, CdkTrapFocus, InteractivityChecker, LIVE_ANNOUNCER_PROVIDER_FACTORY, LiveAnnouncer, CdkAriaLive, LIVE_ANNOUNCER_PROVIDER, LIVE_ANNOUNCER_ELEMENT_TOKEN_FACTORY, LIVE_ANNOUNCER_ELEMENT_TOKEN, FOCUS_MONITOR_PROVIDER_FACTORY, TOUCH_BUFFER_MS, FocusMonitor, CdkMonitorFocus, FOCUS_MONITOR_PROVIDER, isFakeMousedownFromScreenReader, A11yModule }; //# sourceMappingURL=a11y.js.map","map":{"version":3,"sources":["/Users/adepertat/Dropbox/ECOLES/Openclassroom/P6_de_Pertat_Antoine/dwj-projet6/node_modules/@angular/cdk/__ivy_ngcc__/esm2015/a11y.js"],"names":["DOCUMENT","CommonModule","Inject","Injectable","Optional","SkipSelf","QueryList","Directive","ElementRef","Input","NgZone","InjectionToken","EventEmitter","Output","NgModule","defineInjectable","inject","Subject","Subscription","of","UP_ARROW","DOWN_ARROW","LEFT_ARROW","RIGHT_ARROW","TAB","A","Z","ZERO","NINE","debounceTime","filter","map","tap","take","Platform","normalizePassiveListenerOptions","PlatformModule","coerceBooleanProperty","ContentObserver","ObserversModule","ɵngcc0","ɵngcc1","ɵngcc2","ID_DELIMINATOR","addAriaReferencedId","el","attr","id","ids","getAriaReferenceIds","some","existingId","trim","push","setAttribute","join","removeAriaReferencedId","filteredIds","val","getAttribute","match","MESSAGES_CONTAINER_ID","CDK_DESCRIBEDBY_ID_PREFIX","CDK_DESCRIBEDBY_HOST_ATTRIBUTE","nextId","messageRegistry","Map","messagesContainer","AriaDescriber","_document","hostElement","message","_canBeDescribed","has","_createMessageElement","_isElementDescribedByMessage","_addMessageReference","_removeMessageReference","registeredMessage","get","referenceCount","_deleteMessageElement","childNodes","length","_deleteMessagesContainer","describedElements","querySelectorAll","i","_removeCdkDescribedByReferenceIds","removeAttribute","clear","messageElement","createElement","appendChild","createTextNode","_createMessagesContainer","set","removeChild","delete","preExistingContainer","getElementById","parentNode","style","display","body","element","originalReferenceIds","indexOf","referenceIds","messageId","nodeType","ELEMENT_NODE","ɵfac","AriaDescriber_Factory","t","ɵɵinject","ɵprov","ɵɵdefineInjectable","token","factory","providedIn","ctorParameters","type","undefined","decorators","args","ngInjectableDef","ngDevMode","ɵsetClassMetadata","ARIA_DESCRIBER_PROVIDER_FACTORY","parentDispatcher","ARIA_DESCRIBER_PROVIDER","provide","deps","useFactory","ListKeyManager","_items","_activeItemIndex","_wrap","_letterKeyStream","_typeaheadSubscription","EMPTY","_vertical","_skipPredicateFn","item","disabled","_pressedLetters","tabOut","change","changes","subscribe","newItems","_activeItem","itemArray","toArray","newIndex","predicate","shouldWrap","enabled","direction","_horizontal","debounceInterval","getLabel","Error","unsubscribe","pipe","keyCode","inputString","items","_getItemsArray","index","toUpperCase","setActiveItem","previousIndex","updateActiveItem","next","event","setNextItemActive","setPreviousItemActive","key","toLocaleUpperCase","String","fromCharCode","preventDefault","_setActiveItemByIndex","setFirstItemActive","_setActiveItemByDelta","setLastItemActive","delta","_setActiveInWrapMode","_setActiveInDefaultMode","fallbackDelta","ActiveDescendantKeyManager","activeItem","setInactiveStyles","setActiveStyles","FocusKeyManager","arguments","_origin","origin","focus","InteractivityChecker","_platform","hasAttribute","hasGeometry","getComputedStyle","visibility","isBrowser","frameElement","getFrameElement","getWindow","frameType","nodeName","toLowerCase","getTabIndexValue","BLINK","WEBKIT","isVisible","tabIndexValue","TRIDENT","FIREFOX","IOS","isPotentiallyTabbableIOS","tabIndex","isPotentiallyFocusable","isDisabled","InteractivityChecker_Factory","window","_a","offsetWidth","offsetHeight","getClientRects","isNativeFormElement","isHiddenInput","isInputElement","isAnchorWithHref","isAnchorElement","hasValidTabIndex","isNaN","parseInt","inputType","node","ownerDocument","defaultView","FocusTrap","_element","_checker","_ngZone","deferAnchors","_hasAttached","_enabled","attachAnchors","value","_startAnchor","_endAnchor","_toggleAnchorTabIndex","runOutsideAngular","_createAnchor","addEventListener","focusLastTabbableElement","focusFirstTabbableElement","insertBefore","nextSibling","Promise","resolve","_executeOnStable","focusInitialElement","bound","markers","console","warn","_getFirstTabbableElement","_getLastTabbableElement","redirectToElement","querySelector","_getRegionBoundary","root","isFocusable","isTabbable","children","tabbableChild","anchor","classList","add","isEnabled","fn","isStable","onStable","asObservable","FocusTrapFactory","deferCaptureElements","FocusTrapFactory_Factory","CdkTrapFocus","_elementRef","_focusTrapFactory","_previouslyFocusedElement","focusTrap","create","nativeElement","_autoCapture","destroy","autoCapture","activeElement","focusInitialElementWhenReady","hasAttached","CdkTrapFocus_Factory","ɵɵdirectiveInject","ɵdir","ɵɵdefineDirective","selectors","inputs","exportAs","propDecorators","selector","LIVE_ANNOUNCER_ELEMENT_TOKEN","LIVE_ANNOUNCER_ELEMENT_TOKEN_FACTORY","LiveAnnouncer","elementToken","_liveElement","_createLiveElement","politeness","textContent","setTimeout","elementClass","previousElements","getElementsByClassName","liveEl","LiveAnnouncer_Factory","CdkAriaLive","_liveAnnouncer","_contentObserver","_politeness","_subscription","observe","announce","CdkAriaLive_Factory","LIVE_ANNOUNCER_PROVIDER_FACTORY","liveElement","ngZone","LIVE_ANNOUNCER_PROVIDER","TOUCH_BUFFER_MS","FocusMonitor","_windowFocused","_elementInfo","_unregisterGlobalListeners","_monitoredElementCount","checkChildren","_getNativeElement","cachedInfo","subject","info","unlisten","_incrementMonitoredElementCount","focusListener","_onFocus","blurListener","_onBlur","removeEventListener","elementInfo","complete","_setClasses","_decrementMonitoredElementCount","options","_setOriginForCurrentEventQueue","forEach","_info","stopMonitoring","documentKeydownListener","_lastTouchTarget","documentMousedownListener","documentTouchstartListener","_touchTimeoutId","clearTimeout","target","windowFocusListener","_windowFocusTimeoutId","captureEventListenerOptions","passive","capture","document","_originTimeoutId","className","shouldSet","remove","_toggleClass","focusTarget","Node","contains","_lastFocusOrigin","_wasCausedByTouch","_emitOrigin","relatedTarget","run","_registerGlobalListeners","FocusMonitor_Factory","CdkMonitorFocus","_focusMonitor","cdkFocusChange","_monitorSubscription","monitor","emit","CdkMonitorFocus_Factory","outputs","FOCUS_MONITOR_PROVIDER_FACTORY","platform","FOCUS_MONITOR_PROVIDER","isFakeMousedownFromScreenReader","buttons","A11yModule","A11yModule_Factory","ɵmod","ɵɵdefineNgModule","ɵinj","ɵɵdefineInjector","imports","declarations","exports","ngJitMode","ɵɵsetNgModuleScope"],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { DOCUMENT, CommonModule } from '@angular/common';\nimport { Inject, Injectable, Optional, SkipSelf, QueryList, Directive, ElementRef, Input, NgZone, InjectionToken, EventEmitter, Output, NgModule, defineInjectable, inject } from '@angular/core';\nimport { Subject, Subscription, of } from 'rxjs';\nimport { UP_ARROW, DOWN_ARROW, LEFT_ARROW, RIGHT_ARROW, TAB, A, Z, ZERO, NINE } from '@angular/cdk/keycodes';\nimport { debounceTime, filter, map, tap, take } from 'rxjs/operators';\nimport { Platform, normalizePassiveListenerOptions, PlatformModule } from '@angular/cdk/platform';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { ContentObserver, ObserversModule } from '@angular/cdk/observers';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/** *\n * IDs are deliminated by an empty space, as per the spec.\n  @type {?} */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/platform';\nimport * as ɵngcc2 from '@angular/cdk/observers';\nconst ID_DELIMINATOR = ' ';\n/**\n * Adds the given ID to the specified ARIA attribute on an element.\n * Used for attributes such as aria-labelledby, aria-owns, etc.\n * @param {?} el\n * @param {?} attr\n * @param {?} id\n * @return {?}\n */\nfunction addAriaReferencedId(el, attr, id) {\n    /** @type {?} */\n    const ids = getAriaReferenceIds(el, attr);\n    if (ids.some(existingId => existingId.trim() == id.trim())) {\n        return;\n    }\n    ids.push(id.trim());\n    el.setAttribute(attr, ids.join(ID_DELIMINATOR));\n}\n/**\n * Removes the given ID from the specified ARIA attribute on an element.\n * Used for attributes such as aria-labelledby, aria-owns, etc.\n * @param {?} el\n * @param {?} attr\n * @param {?} id\n * @return {?}\n */\nfunction removeAriaReferencedId(el, attr, id) {\n    /** @type {?} */\n    const ids = getAriaReferenceIds(el, attr);\n    /** @type {?} */\n    const filteredIds = ids.filter(val => val != id.trim());\n    el.setAttribute(attr, filteredIds.join(ID_DELIMINATOR));\n}\n/**\n * Gets the list of IDs referenced by the given ARIA attribute on an element.\n * Used for attributes such as aria-labelledby, aria-owns, etc.\n * @param {?} el\n * @param {?} attr\n * @return {?}\n */\nfunction getAriaReferenceIds(el, attr) {\n    // Get string array of all individual ids (whitespace deliminated) in the attribute value\n    return (el.getAttribute(attr) || '').match(/\\S+/g) || [];\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/** *\n * ID used for the body container where all messages are appended.\n  @type {?} */\nconst MESSAGES_CONTAINER_ID = 'cdk-describedby-message-container';\n/** *\n * ID prefix used for each created message element.\n  @type {?} */\nconst CDK_DESCRIBEDBY_ID_PREFIX = 'cdk-describedby-message';\n/** *\n * Attribute given to each host element that is described by a message element.\n  @type {?} */\nconst CDK_DESCRIBEDBY_HOST_ATTRIBUTE = 'cdk-describedby-host';\n/** *\n * Global incremental identifier for each registered message element.\n  @type {?} */\nlet nextId = 0;\n/** *\n * Global map of all registered message elements that have been placed into the document.\n  @type {?} */\nconst messageRegistry = new Map();\n/** *\n * Container for all registered messages.\n  @type {?} */\nlet messagesContainer = null;\n/**\n * Utility that creates visually hidden elements with a message content. Useful for elements that\n * want to use aria-describedby to further describe themselves without adding additional visual\n * content.\n * \\@docs-private\n */\nclass AriaDescriber {\n    /**\n     * @param {?} _document\n     */\n    constructor(_document) {\n        this._document = _document;\n    }\n    /**\n     * Adds to the host element an aria-describedby reference to a hidden element that contains\n     * the message. If the same message has already been registered, then it will reuse the created\n     * message element.\n     * @param {?} hostElement\n     * @param {?} message\n     * @return {?}\n     */\n    describe(hostElement, message) {\n        if (!this._canBeDescribed(hostElement, message)) {\n            return;\n        }\n        if (!messageRegistry.has(message)) {\n            this._createMessageElement(message);\n        }\n        if (!this._isElementDescribedByMessage(hostElement, message)) {\n            this._addMessageReference(hostElement, message);\n        }\n    }\n    /**\n     * Removes the host element's aria-describedby reference to the message element.\n     * @param {?} hostElement\n     * @param {?} message\n     * @return {?}\n     */\n    removeDescription(hostElement, message) {\n        if (!this._canBeDescribed(hostElement, message)) {\n            return;\n        }\n        if (this._isElementDescribedByMessage(hostElement, message)) {\n            this._removeMessageReference(hostElement, message);\n        }\n        /** @type {?} */\n        const registeredMessage = messageRegistry.get(message);\n        if (registeredMessage && registeredMessage.referenceCount === 0) {\n            this._deleteMessageElement(message);\n        }\n        if (messagesContainer && messagesContainer.childNodes.length === 0) {\n            this._deleteMessagesContainer();\n        }\n    }\n    /**\n     * Unregisters all created message elements and removes the message container.\n     * @return {?}\n     */\n    ngOnDestroy() {\n        /** @type {?} */\n        const describedElements = this._document.querySelectorAll(`[${CDK_DESCRIBEDBY_HOST_ATTRIBUTE}]`);\n        for (let i = 0; i < describedElements.length; i++) {\n            this._removeCdkDescribedByReferenceIds(describedElements[i]);\n            describedElements[i].removeAttribute(CDK_DESCRIBEDBY_HOST_ATTRIBUTE);\n        }\n        if (messagesContainer) {\n            this._deleteMessagesContainer();\n        }\n        messageRegistry.clear();\n    }\n    /**\n     * Creates a new element in the visually hidden message container element with the message\n     * as its content and adds it to the message registry.\n     * @param {?} message\n     * @return {?}\n     */\n    _createMessageElement(message) {\n        /** @type {?} */\n        const messageElement = this._document.createElement('div');\n        messageElement.setAttribute('id', `${CDK_DESCRIBEDBY_ID_PREFIX}-${nextId++}`);\n        messageElement.appendChild(/** @type {?} */ ((this._document.createTextNode(message))));\n        this._createMessagesContainer(); /** @type {?} */\n        ((messagesContainer)).appendChild(messageElement);\n        messageRegistry.set(message, { messageElement, referenceCount: 0 });\n    }\n    /**\n     * Deletes the message element from the global messages container.\n     * @param {?} message\n     * @return {?}\n     */\n    _deleteMessageElement(message) {\n        /** @type {?} */\n        const registeredMessage = messageRegistry.get(message);\n        /** @type {?} */\n        const messageElement = registeredMessage && registeredMessage.messageElement;\n        if (messagesContainer && messageElement) {\n            messagesContainer.removeChild(messageElement);\n        }\n        messageRegistry.delete(message);\n    }\n    /**\n     * Creates the global container for all aria-describedby messages.\n     * @return {?}\n     */\n    _createMessagesContainer() {\n        if (!messagesContainer) {\n            /** @type {?} */\n            const preExistingContainer = this._document.getElementById(MESSAGES_CONTAINER_ID);\n            // When going from the server to the client, we may end up in a situation where there's\n            // already a container on the page, but we don't have a reference to it. Clear the\n            // old container so we don't get duplicates. Doing this, instead of emptying the previous\n            // container, should be slightly faster.\n            if (preExistingContainer) {\n                /** @type {?} */ ((preExistingContainer.parentNode)).removeChild(preExistingContainer);\n            }\n            messagesContainer = this._document.createElement('div');\n            messagesContainer.id = MESSAGES_CONTAINER_ID;\n            messagesContainer.setAttribute('aria-hidden', 'true');\n            messagesContainer.style.display = 'none';\n            this._document.body.appendChild(messagesContainer);\n        }\n    }\n    /**\n     * Deletes the global messages container.\n     * @return {?}\n     */\n    _deleteMessagesContainer() {\n        if (messagesContainer && messagesContainer.parentNode) {\n            messagesContainer.parentNode.removeChild(messagesContainer);\n            messagesContainer = null;\n        }\n    }\n    /**\n     * Removes all cdk-describedby messages that are hosted through the element.\n     * @param {?} element\n     * @return {?}\n     */\n    _removeCdkDescribedByReferenceIds(element) {\n        /** @type {?} */\n        const originalReferenceIds = getAriaReferenceIds(element, 'aria-describedby')\n            .filter(id => id.indexOf(CDK_DESCRIBEDBY_ID_PREFIX) != 0);\n        element.setAttribute('aria-describedby', originalReferenceIds.join(' '));\n    }\n    /**\n     * Adds a message reference to the element using aria-describedby and increments the registered\n     * message's reference count.\n     * @param {?} element\n     * @param {?} message\n     * @return {?}\n     */\n    _addMessageReference(element, message) {\n        /** @type {?} */\n        const registeredMessage = /** @type {?} */ ((messageRegistry.get(message)));\n        // Add the aria-describedby reference and set the\n        // describedby_host attribute to mark the element.\n        addAriaReferencedId(element, 'aria-describedby', registeredMessage.messageElement.id);\n        element.setAttribute(CDK_DESCRIBEDBY_HOST_ATTRIBUTE, '');\n        registeredMessage.referenceCount++;\n    }\n    /**\n     * Removes a message reference from the element using aria-describedby\n     * and decrements the registered message's reference count.\n     * @param {?} element\n     * @param {?} message\n     * @return {?}\n     */\n    _removeMessageReference(element, message) {\n        /** @type {?} */\n        const registeredMessage = /** @type {?} */ ((messageRegistry.get(message)));\n        registeredMessage.referenceCount--;\n        removeAriaReferencedId(element, 'aria-describedby', registeredMessage.messageElement.id);\n        element.removeAttribute(CDK_DESCRIBEDBY_HOST_ATTRIBUTE);\n    }\n    /**\n     * Returns true if the element has been described by the provided message ID.\n     * @param {?} element\n     * @param {?} message\n     * @return {?}\n     */\n    _isElementDescribedByMessage(element, message) {\n        /** @type {?} */\n        const referenceIds = getAriaReferenceIds(element, 'aria-describedby');\n        /** @type {?} */\n        const registeredMessage = messageRegistry.get(message);\n        /** @type {?} */\n        const messageId = registeredMessage && registeredMessage.messageElement.id;\n        return !!messageId && referenceIds.indexOf(messageId) != -1;\n    }\n    /**\n     * Determines whether a message can be described on a particular element.\n     * @param {?} element\n     * @param {?} message\n     * @return {?}\n     */\n    _canBeDescribed(element, message) {\n        return element.nodeType === this._document.ELEMENT_NODE && message != null &&\n            !!`${message}`.trim();\n    }\n}\nAriaDescriber.ɵfac = function AriaDescriber_Factory(t) { return new (t || AriaDescriber)(ɵngcc0.ɵɵinject(DOCUMENT)); };\nAriaDescriber.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: AriaDescriber, factory: AriaDescriber.ɵfac, providedIn: 'root' });\n/** @nocollapse */\nAriaDescriber.ctorParameters = () => [\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }\n];\n/** @nocollapse */ AriaDescriber.ngInjectableDef = defineInjectable({ factory: function AriaDescriber_Factory() { return new AriaDescriber(inject(DOCUMENT)); }, token: AriaDescriber, providedIn: \"root\" });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(AriaDescriber, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return [{ type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }]; }, null); })();\n/**\n * \\@docs-private \\@deprecated \\@breaking-change 8.0.0\n * @param {?} parentDispatcher\n * @param {?} _document\n * @return {?}\n */\nfunction ARIA_DESCRIBER_PROVIDER_FACTORY(parentDispatcher, _document) {\n    return parentDispatcher || new AriaDescriber(_document);\n}\n/** *\n * \\@docs-private \\@deprecated \\@breaking-change 8.0.0\n  @type {?} */\nconst ARIA_DESCRIBER_PROVIDER = {\n    // If there is already an AriaDescriber available, use that. Otherwise, provide a new one.\n    provide: AriaDescriber,\n    deps: [\n        [new Optional(), new SkipSelf(), AriaDescriber],\n        /** @type {?} */ (DOCUMENT)\n    ],\n    useFactory: ARIA_DESCRIBER_PROVIDER_FACTORY\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n// unsupported: template constraints.\n/**\n * This class manages keyboard events for selectable lists. If you pass it a query list\n * of items, it will set the active item correctly when arrow events occur.\n * @template T\n */\nclass ListKeyManager {\n    /**\n     * @param {?} _items\n     */\n    constructor(_items) {\n        this._items = _items;\n        this._activeItemIndex = -1;\n        this._wrap = false;\n        this._letterKeyStream = new Subject();\n        this._typeaheadSubscription = Subscription.EMPTY;\n        this._vertical = true;\n        /**\n         * Predicate function that can be used to check whether an item should be skipped\n         * by the key manager. By default, disabled items are skipped.\n         */\n        this._skipPredicateFn = (item) => item.disabled;\n        this._pressedLetters = [];\n        /**\n         * Stream that emits any time the TAB key is pressed, so components can react\n         * when focus is shifted off of the list.\n         */\n        this.tabOut = new Subject();\n        /**\n         * Stream that emits whenever the active item of the list manager changes.\n         */\n        this.change = new Subject();\n        // We allow for the items to be an array because, in some cases, the consumer may\n        // not have access to a QueryList of the items they want to manage (e.g. when the\n        // items aren't being collected via `ViewChildren` or `ContentChildren`).\n        if (_items instanceof QueryList) {\n            _items.changes.subscribe((newItems) => {\n                if (this._activeItem) {\n                    /** @type {?} */\n                    const itemArray = newItems.toArray();\n                    /** @type {?} */\n                    const newIndex = itemArray.indexOf(this._activeItem);\n                    if (newIndex > -1 && newIndex !== this._activeItemIndex) {\n                        this._activeItemIndex = newIndex;\n                    }\n                }\n            });\n        }\n    }\n    /**\n     * Sets the predicate function that determines which items should be skipped by the\n     * list key manager.\n     * @param {?} predicate Function that determines whether the given item should be skipped.\n     * @return {?}\n     */\n    skipPredicate(predicate) {\n        this._skipPredicateFn = predicate;\n        return this;\n    }\n    /**\n     * Configures wrapping mode, which determines whether the active item will wrap to\n     * the other end of list when there are no more items in the given direction.\n     * @param {?=} shouldWrap Whether the list should wrap when reaching the end.\n     * @return {?}\n     */\n    withWrap(shouldWrap = true) {\n        this._wrap = shouldWrap;\n        return this;\n    }\n    /**\n     * Configures whether the key manager should be able to move the selection vertically.\n     * @param {?=} enabled Whether vertical selection should be enabled.\n     * @return {?}\n     */\n    withVerticalOrientation(enabled = true) {\n        this._vertical = enabled;\n        return this;\n    }\n    /**\n     * Configures the key manager to move the selection horizontally.\n     * Passing in `null` will disable horizontal movement.\n     * @param {?} direction Direction in which the selection can be moved.\n     * @return {?}\n     */\n    withHorizontalOrientation(direction) {\n        this._horizontal = direction;\n        return this;\n    }\n    /**\n     * Turns on typeahead mode which allows users to set the active item by typing.\n     * @param {?=} debounceInterval Time to wait after the last keystroke before setting the active item.\n     * @return {?}\n     */\n    withTypeAhead(debounceInterval = 200) {\n        if (this._items.length && this._items.some(item => typeof item.getLabel !== 'function')) {\n            throw Error('ListKeyManager items in typeahead mode must implement the `getLabel` method.');\n        }\n        this._typeaheadSubscription.unsubscribe();\n        // Debounce the presses of non-navigational keys, collect the ones that correspond to letters\n        // and convert those letters back into a string. Afterwards find the first item that starts\n        // with that string and select it.\n        this._typeaheadSubscription = this._letterKeyStream.pipe(tap(keyCode => this._pressedLetters.push(keyCode)), debounceTime(debounceInterval), filter(() => this._pressedLetters.length > 0), map(() => this._pressedLetters.join(''))).subscribe(inputString => {\n            /** @type {?} */\n            const items = this._getItemsArray();\n            // Start at 1 because we want to start searching at the item immediately\n            // following the current active item.\n            for (let i = 1; i < items.length + 1; i++) {\n                /** @type {?} */\n                const index = (this._activeItemIndex + i) % items.length;\n                /** @type {?} */\n                const item = items[index];\n                if (!this._skipPredicateFn(item) && /** @type {?} */ ((item.getLabel))().toUpperCase().trim().indexOf(inputString) === 0) {\n                    this.setActiveItem(index);\n                    break;\n                }\n            }\n            this._pressedLetters = [];\n        });\n        return this;\n    }\n    /**\n     * @param {?} item\n     * @return {?}\n     */\n    setActiveItem(item) {\n        /** @type {?} */\n        const previousIndex = this._activeItemIndex;\n        this.updateActiveItem(item);\n        if (this._activeItemIndex !== previousIndex) {\n            this.change.next(this._activeItemIndex);\n        }\n    }\n    /**\n     * Sets the active item depending on the key event passed in.\n     * @param {?} event Keyboard event to be used for determining which element should be active.\n     * @return {?}\n     */\n    onKeydown(event) {\n        /** @type {?} */\n        const keyCode = event.keyCode;\n        switch (keyCode) {\n            case TAB:\n                this.tabOut.next();\n                return;\n            case DOWN_ARROW:\n                if (this._vertical) {\n                    this.setNextItemActive();\n                    break;\n                }\n                else {\n                    return;\n                }\n            case UP_ARROW:\n                if (this._vertical) {\n                    this.setPreviousItemActive();\n                    break;\n                }\n                else {\n                    return;\n                }\n            case RIGHT_ARROW:\n                if (this._horizontal === 'ltr') {\n                    this.setNextItemActive();\n                    break;\n                }\n                else if (this._horizontal === 'rtl') {\n                    this.setPreviousItemActive();\n                    break;\n                }\n                else {\n                    return;\n                }\n            case LEFT_ARROW:\n                if (this._horizontal === 'ltr') {\n                    this.setPreviousItemActive();\n                    break;\n                }\n                else if (this._horizontal === 'rtl') {\n                    this.setNextItemActive();\n                    break;\n                }\n                else {\n                    return;\n                }\n            default:\n                // Attempt to use the `event.key` which also maps it to the user's keyboard language,\n                // otherwise fall back to resolving alphanumeric characters via the keyCode.\n                if (event.key && event.key.length === 1) {\n                    this._letterKeyStream.next(event.key.toLocaleUpperCase());\n                }\n                else if ((keyCode >= A && keyCode <= Z) || (keyCode >= ZERO && keyCode <= NINE)) {\n                    this._letterKeyStream.next(String.fromCharCode(keyCode));\n                }\n                // Note that we return here, in order to avoid preventing\n                // the default action of non-navigational keys.\n                return;\n        }\n        this._pressedLetters = [];\n        event.preventDefault();\n    }\n    /**\n     * Index of the currently active item.\n     * @return {?}\n     */\n    get activeItemIndex() {\n        return this._activeItemIndex;\n    }\n    /**\n     * The active item.\n     * @return {?}\n     */\n    get activeItem() {\n        return this._activeItem;\n    }\n    /**\n     * Sets the active item to the first enabled item in the list.\n     * @return {?}\n     */\n    setFirstItemActive() {\n        this._setActiveItemByIndex(0, 1);\n    }\n    /**\n     * Sets the active item to the last enabled item in the list.\n     * @return {?}\n     */\n    setLastItemActive() {\n        this._setActiveItemByIndex(this._items.length - 1, -1);\n    }\n    /**\n     * Sets the active item to the next enabled item in the list.\n     * @return {?}\n     */\n    setNextItemActive() {\n        this._activeItemIndex < 0 ? this.setFirstItemActive() : this._setActiveItemByDelta(1);\n    }\n    /**\n     * Sets the active item to a previous enabled item in the list.\n     * @return {?}\n     */\n    setPreviousItemActive() {\n        this._activeItemIndex < 0 && this._wrap ? this.setLastItemActive()\n            : this._setActiveItemByDelta(-1);\n    }\n    /**\n     * @param {?} item\n     * @return {?}\n     */\n    updateActiveItem(item) {\n        /** @type {?} */\n        const itemArray = this._getItemsArray();\n        /** @type {?} */\n        const index = typeof item === 'number' ? item : itemArray.indexOf(item);\n        this._activeItemIndex = index;\n        this._activeItem = itemArray[index];\n    }\n    /**\n     * Allows setting of the activeItemIndex without any other effects.\n     * @deprecated Use `updateActiveItem` instead.\n     * \\@breaking-change 8.0.0\n     * @param {?} index The new activeItemIndex.\n     * @return {?}\n     */\n    updateActiveItemIndex(index) {\n        this.updateActiveItem(index);\n    }\n    /**\n     * This method sets the active item, given a list of items and the delta between the\n     * currently active item and the new active item. It will calculate differently\n     * depending on whether wrap mode is turned on.\n     * @param {?} delta\n     * @return {?}\n     */\n    _setActiveItemByDelta(delta) {\n        this._wrap ? this._setActiveInWrapMode(delta) : this._setActiveInDefaultMode(delta);\n    }\n    /**\n     * Sets the active item properly given \"wrap\" mode. In other words, it will continue to move\n     * down the list until it finds an item that is not disabled, and it will wrap if it\n     * encounters either end of the list.\n     * @param {?} delta\n     * @return {?}\n     */\n    _setActiveInWrapMode(delta) {\n        /** @type {?} */\n        const items = this._getItemsArray();\n        for (let i = 1; i <= items.length; i++) {\n            /** @type {?} */\n            const index = (this._activeItemIndex + (delta * i) + items.length) % items.length;\n            /** @type {?} */\n            const item = items[index];\n            if (!this._skipPredicateFn(item)) {\n                this.setActiveItem(index);\n                return;\n            }\n        }\n    }\n    /**\n     * Sets the active item properly given the default mode. In other words, it will\n     * continue to move down the list until it finds an item that is not disabled. If\n     * it encounters either end of the list, it will stop and not wrap.\n     * @param {?} delta\n     * @return {?}\n     */\n    _setActiveInDefaultMode(delta) {\n        this._setActiveItemByIndex(this._activeItemIndex + delta, delta);\n    }\n    /**\n     * Sets the active item to the first enabled item starting at the index specified. If the\n     * item is disabled, it will move in the fallbackDelta direction until it either\n     * finds an enabled item or encounters the end of the list.\n     * @param {?} index\n     * @param {?} fallbackDelta\n     * @return {?}\n     */\n    _setActiveItemByIndex(index, fallbackDelta) {\n        /** @type {?} */\n        const items = this._getItemsArray();\n        if (!items[index]) {\n            return;\n        }\n        while (this._skipPredicateFn(items[index])) {\n            index += fallbackDelta;\n            if (!items[index]) {\n                return;\n            }\n        }\n        this.setActiveItem(index);\n    }\n    /**\n     * Returns the items as an array.\n     * @return {?}\n     */\n    _getItemsArray() {\n        return this._items instanceof QueryList ? this._items.toArray() : this._items;\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @template T\n */\nclass ActiveDescendantKeyManager extends ListKeyManager {\n    /**\n     * @param {?} index\n     * @return {?}\n     */\n    setActiveItem(index) {\n        if (this.activeItem) {\n            this.activeItem.setInactiveStyles();\n        }\n        super.setActiveItem(index);\n        if (this.activeItem) {\n            this.activeItem.setActiveStyles();\n        }\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @template T\n */\nclass FocusKeyManager extends ListKeyManager {\n    constructor() {\n        super(...arguments);\n        this._origin = 'program';\n    }\n    /**\n     * Sets the focus origin that will be passed in to the items for any subsequent `focus` calls.\n     * @param {?} origin Focus origin to be used when focusing items.\n     * @return {?}\n     */\n    setFocusOrigin(origin) {\n        this._origin = origin;\n        return this;\n    }\n    /**\n     * @param {?} item\n     * @return {?}\n     */\n    setActiveItem(item) {\n        super.setActiveItem(item);\n        if (this.activeItem) {\n            this.activeItem.focus(this._origin);\n        }\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * Utility for checking the interactivity of an element, such as whether is is focusable or\n * tabbable.\n */\nclass InteractivityChecker {\n    /**\n     * @param {?} _platform\n     */\n    constructor(_platform) {\n        this._platform = _platform;\n    }\n    /**\n     * Gets whether an element is disabled.\n     *\n     * @param {?} element Element to be checked.\n     * @return {?} Whether the element is disabled.\n     */\n    isDisabled(element) {\n        // This does not capture some cases, such as a non-form control with a disabled attribute or\n        // a form control inside of a disabled form, but should capture the most common cases.\n        return element.hasAttribute('disabled');\n    }\n    /**\n     * Gets whether an element is visible for the purposes of interactivity.\n     *\n     * This will capture states like `display: none` and `visibility: hidden`, but not things like\n     * being clipped by an `overflow: hidden` parent or being outside the viewport.\n     *\n     * @param {?} element\n     * @return {?} Whether the element is visible.\n     */\n    isVisible(element) {\n        return hasGeometry(element) && getComputedStyle(element).visibility === 'visible';\n    }\n    /**\n     * Gets whether an element can be reached via Tab key.\n     * Assumes that the element has already been checked with isFocusable.\n     *\n     * @param {?} element Element to be checked.\n     * @return {?} Whether the element is tabbable.\n     */\n    isTabbable(element) {\n        // Nothing is tabbable on the the server 😎\n        if (!this._platform.isBrowser) {\n            return false;\n        }\n        /** @type {?} */\n        const frameElement = getFrameElement(getWindow(element));\n        if (frameElement) {\n            /** @type {?} */\n            const frameType = frameElement && frameElement.nodeName.toLowerCase();\n            // Frame elements inherit their tabindex onto all child elements.\n            if (getTabIndexValue(frameElement) === -1) {\n                return false;\n            }\n            // Webkit and Blink consider anything inside of an <object> element as non-tabbable.\n            if ((this._platform.BLINK || this._platform.WEBKIT) && frameType === 'object') {\n                return false;\n            }\n            // Webkit and Blink disable tabbing to an element inside of an invisible frame.\n            if ((this._platform.BLINK || this._platform.WEBKIT) && !this.isVisible(frameElement)) {\n                return false;\n            }\n        }\n        /** @type {?} */\n        let nodeName = element.nodeName.toLowerCase();\n        /** @type {?} */\n        let tabIndexValue = getTabIndexValue(element);\n        if (element.hasAttribute('contenteditable')) {\n            return tabIndexValue !== -1;\n        }\n        if (nodeName === 'iframe') {\n            // The frames may be tabbable depending on content, but it's not possibly to reliably\n            // investigate the content of the frames.\n            return false;\n        }\n        if (nodeName === 'audio') {\n            if (!element.hasAttribute('controls')) {\n                // By default an <audio> element without the controls enabled is not tabbable.\n                return false;\n            }\n            else if (this._platform.BLINK) {\n                // In Blink <audio controls> elements are always tabbable.\n                return true;\n            }\n        }\n        if (nodeName === 'video') {\n            if (!element.hasAttribute('controls') && this._platform.TRIDENT) {\n                // In Trident a <video> element without the controls enabled is not tabbable.\n                return false;\n            }\n            else if (this._platform.BLINK || this._platform.FIREFOX) {\n                // In Chrome and Firefox <video controls> elements are always tabbable.\n                return true;\n            }\n        }\n        if (nodeName === 'object' && (this._platform.BLINK || this._platform.WEBKIT)) {\n            // In all Blink and WebKit based browsers <object> elements are never tabbable.\n            return false;\n        }\n        // In iOS the browser only considers some specific elements as tabbable.\n        if (this._platform.WEBKIT && this._platform.IOS && !isPotentiallyTabbableIOS(element)) {\n            return false;\n        }\n        return element.tabIndex >= 0;\n    }\n    /**\n     * Gets whether an element can be focused by the user.\n     *\n     * @param {?} element Element to be checked.\n     * @return {?} Whether the element is focusable.\n     */\n    isFocusable(element) {\n        // Perform checks in order of left to most expensive.\n        // Again, naive approach that does not capture many edge cases and browser quirks.\n        return isPotentiallyFocusable(element) && !this.isDisabled(element) && this.isVisible(element);\n    }\n}\nInteractivityChecker.ɵfac = function InteractivityChecker_Factory(t) { return new (t || InteractivityChecker)(ɵngcc0.ɵɵinject(ɵngcc1.Platform)); };\nInteractivityChecker.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: InteractivityChecker, factory: InteractivityChecker.ɵfac, providedIn: 'root' });\n/** @nocollapse */\nInteractivityChecker.ctorParameters = () => [\n    { type: Platform }\n];\n/** @nocollapse */ InteractivityChecker.ngInjectableDef = defineInjectable({ factory: function InteractivityChecker_Factory() { return new InteractivityChecker(inject(Platform)); }, token: InteractivityChecker, providedIn: \"root\" });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(InteractivityChecker, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return [{ type: ɵngcc1.Platform }]; }, null); })();\n/**\n * Returns the frame element from a window object. Since browsers like MS Edge throw errors if\n * the frameElement property is being accessed from a different host address, this property\n * should be accessed carefully.\n * @param {?} window\n * @return {?}\n */\nfunction getFrameElement(window) {\n    try {\n        return /** @type {?} */ (window.frameElement);\n    }\n    catch (_a) {\n        return null;\n    }\n}\n/**\n * Checks whether the specified element has any geometry / rectangles.\n * @param {?} element\n * @return {?}\n */\nfunction hasGeometry(element) {\n    // Use logic from jQuery to check for an invisible element.\n    // See https://github.com/jquery/jquery/blob/master/src/css/hiddenVisibleSelectors.js#L12\n    return !!(element.offsetWidth || element.offsetHeight ||\n        (typeof element.getClientRects === 'function' && element.getClientRects().length));\n}\n/**\n * Gets whether an element's\n * @param {?} element\n * @return {?}\n */\nfunction isNativeFormElement(element) {\n    /** @type {?} */\n    let nodeName = element.nodeName.toLowerCase();\n    return nodeName === 'input' ||\n        nodeName === 'select' ||\n        nodeName === 'button' ||\n        nodeName === 'textarea';\n}\n/**\n * Gets whether an element is an `<input type=\"hidden\">`.\n * @param {?} element\n * @return {?}\n */\nfunction isHiddenInput(element) {\n    return isInputElement(element) && element.type == 'hidden';\n}\n/**\n * Gets whether an element is an anchor that has an href attribute.\n * @param {?} element\n * @return {?}\n */\nfunction isAnchorWithHref(element) {\n    return isAnchorElement(element) && element.hasAttribute('href');\n}\n/**\n * Gets whether an element is an input element.\n * @param {?} element\n * @return {?}\n */\nfunction isInputElement(element) {\n    return element.nodeName.toLowerCase() == 'input';\n}\n/**\n * Gets whether an element is an anchor element.\n * @param {?} element\n * @return {?}\n */\nfunction isAnchorElement(element) {\n    return element.nodeName.toLowerCase() == 'a';\n}\n/**\n * Gets whether an element has a valid tabindex.\n * @param {?} element\n * @return {?}\n */\nfunction hasValidTabIndex(element) {\n    if (!element.hasAttribute('tabindex') || element.tabIndex === undefined) {\n        return false;\n    }\n    /** @type {?} */\n    let tabIndex = element.getAttribute('tabindex');\n    // IE11 parses tabindex=\"\" as the value \"-32768\"\n    if (tabIndex == '-32768') {\n        return false;\n    }\n    return !!(tabIndex && !isNaN(parseInt(tabIndex, 10)));\n}\n/**\n * Returns the parsed tabindex from the element attributes instead of returning the\n * evaluated tabindex from the browsers defaults.\n * @param {?} element\n * @return {?}\n */\nfunction getTabIndexValue(element) {\n    if (!hasValidTabIndex(element)) {\n        return null;\n    }\n    /** @type {?} */\n    const tabIndex = parseInt(element.getAttribute('tabindex') || '', 10);\n    return isNaN(tabIndex) ? -1 : tabIndex;\n}\n/**\n * Checks whether the specified element is potentially tabbable on iOS\n * @param {?} element\n * @return {?}\n */\nfunction isPotentiallyTabbableIOS(element) {\n    /** @type {?} */\n    let nodeName = element.nodeName.toLowerCase();\n    /** @type {?} */\n    let inputType = nodeName === 'input' && (/** @type {?} */ (element)).type;\n    return inputType === 'text'\n        || inputType === 'password'\n        || nodeName === 'select'\n        || nodeName === 'textarea';\n}\n/**\n * Gets whether an element is potentially focusable without taking current visible/disabled state\n * into account.\n * @param {?} element\n * @return {?}\n */\nfunction isPotentiallyFocusable(element) {\n    // Inputs are potentially focusable *unless* they're type=\"hidden\".\n    if (isHiddenInput(element)) {\n        return false;\n    }\n    return isNativeFormElement(element) ||\n        isAnchorWithHref(element) ||\n        element.hasAttribute('contenteditable') ||\n        hasValidTabIndex(element);\n}\n/**\n * Gets the parent window of a DOM node with regards of being inside of an iframe.\n * @param {?} node\n * @return {?}\n */\nfunction getWindow(node) {\n    // ownerDocument is null if `node` itself *is* a document.\n    return node.ownerDocument && node.ownerDocument.defaultView || window;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * Class that allows for trapping focus within a DOM element.\n *\n * This class currently uses a relatively simple approach to focus trapping.\n * It assumes that the tab order is the same as DOM order, which is not necessarily true.\n * Things like `tabIndex > 0`, flex `order`, and shadow roots can cause to two to misalign.\n */\nclass FocusTrap {\n    /**\n     * @param {?} _element\n     * @param {?} _checker\n     * @param {?} _ngZone\n     * @param {?} _document\n     * @param {?=} deferAnchors\n     */\n    constructor(_element, _checker, _ngZone, _document, deferAnchors = false) {\n        this._element = _element;\n        this._checker = _checker;\n        this._ngZone = _ngZone;\n        this._document = _document;\n        this._hasAttached = false;\n        this._enabled = true;\n        if (!deferAnchors) {\n            this.attachAnchors();\n        }\n    }\n    /**\n     * Whether the focus trap is active.\n     * @return {?}\n     */\n    get enabled() { return this._enabled; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set enabled(value) {\n        this._enabled = value;\n        if (this._startAnchor && this._endAnchor) {\n            this._toggleAnchorTabIndex(value, this._startAnchor);\n            this._toggleAnchorTabIndex(value, this._endAnchor);\n        }\n    }\n    /**\n     * Destroys the focus trap by cleaning up the anchors.\n     * @return {?}\n     */\n    destroy() {\n        if (this._startAnchor && this._startAnchor.parentNode) {\n            this._startAnchor.parentNode.removeChild(this._startAnchor);\n        }\n        if (this._endAnchor && this._endAnchor.parentNode) {\n            this._endAnchor.parentNode.removeChild(this._endAnchor);\n        }\n        this._startAnchor = this._endAnchor = null;\n    }\n    /**\n     * Inserts the anchors into the DOM. This is usually done automatically\n     * in the constructor, but can be deferred for cases like directives with `*ngIf`.\n     * @return {?} Whether the focus trap managed to attach successfuly. This may not be the case\n     * if the target element isn't currently in the DOM.\n     */\n    attachAnchors() {\n        // If we're not on the browser, there can be no focus to trap.\n        if (this._hasAttached) {\n            return true;\n        }\n        this._ngZone.runOutsideAngular(() => {\n            if (!this._startAnchor) {\n                this._startAnchor = this._createAnchor(); /** @type {?} */\n                ((this._startAnchor)).addEventListener('focus', () => this.focusLastTabbableElement());\n            }\n            if (!this._endAnchor) {\n                this._endAnchor = this._createAnchor(); /** @type {?} */\n                ((this._endAnchor)).addEventListener('focus', () => this.focusFirstTabbableElement());\n            }\n        });\n        if (this._element.parentNode) {\n            this._element.parentNode.insertBefore(/** @type {?} */ ((this._startAnchor)), this._element);\n            this._element.parentNode.insertBefore(/** @type {?} */ ((this._endAnchor)), this._element.nextSibling);\n            this._hasAttached = true;\n        }\n        return this._hasAttached;\n    }\n    /**\n     * Waits for the zone to stabilize, then either focuses the first element that the\n     * user specified, or the first tabbable element.\n     * @return {?} Returns a promise that resolves with a boolean, depending\n     * on whether focus was moved successfuly.\n     */\n    focusInitialElementWhenReady() {\n        return new Promise(resolve => {\n            this._executeOnStable(() => resolve(this.focusInitialElement()));\n        });\n    }\n    /**\n     * Waits for the zone to stabilize, then focuses\n     * the first tabbable element within the focus trap region.\n     * @return {?} Returns a promise that resolves with a boolean, depending\n     * on whether focus was moved successfuly.\n     */\n    focusFirstTabbableElementWhenReady() {\n        return new Promise(resolve => {\n            this._executeOnStable(() => resolve(this.focusFirstTabbableElement()));\n        });\n    }\n    /**\n     * Waits for the zone to stabilize, then focuses\n     * the last tabbable element within the focus trap region.\n     * @return {?} Returns a promise that resolves with a boolean, depending\n     * on whether focus was moved successfuly.\n     */\n    focusLastTabbableElementWhenReady() {\n        return new Promise(resolve => {\n            this._executeOnStable(() => resolve(this.focusLastTabbableElement()));\n        });\n    }\n    /**\n     * Get the specified boundary element of the trapped region.\n     * @param {?} bound The boundary to get (start or end of trapped region).\n     * @return {?} The boundary element.\n     */\n    _getRegionBoundary(bound) {\n        /** @type {?} */\n        let markers = /** @type {?} */ (this._element.querySelectorAll(`[cdk-focus-region-${bound}], ` +\n            `[cdkFocusRegion${bound}], ` +\n            `[cdk-focus-${bound}]`));\n        for (let i = 0; i < markers.length; i++) {\n            // @breaking-change 8.0.0\n            if (markers[i].hasAttribute(`cdk-focus-${bound}`)) {\n                console.warn(`Found use of deprecated attribute 'cdk-focus-${bound}', ` +\n                    `use 'cdkFocusRegion${bound}' instead. The deprecated ` +\n                    `attribute will be removed in 8.0.0.`, markers[i]);\n            }\n            else if (markers[i].hasAttribute(`cdk-focus-region-${bound}`)) {\n                console.warn(`Found use of deprecated attribute 'cdk-focus-region-${bound}', ` +\n                    `use 'cdkFocusRegion${bound}' instead. The deprecated attribute ` +\n                    `will be removed in 8.0.0.`, markers[i]);\n            }\n        }\n        if (bound == 'start') {\n            return markers.length ? markers[0] : this._getFirstTabbableElement(this._element);\n        }\n        return markers.length ?\n            markers[markers.length - 1] : this._getLastTabbableElement(this._element);\n    }\n    /**\n     * Focuses the element that should be focused when the focus trap is initialized.\n     * @return {?} Whether focus was moved successfuly.\n     */\n    focusInitialElement() {\n        /** @type {?} */\n        const redirectToElement = /** @type {?} */ (this._element.querySelector(`[cdk-focus-initial], ` +\n            `[cdkFocusInitial]`));\n        if (redirectToElement) {\n            // @breaking-change 8.0.0\n            if (redirectToElement.hasAttribute(`cdk-focus-initial`)) {\n                console.warn(`Found use of deprecated attribute 'cdk-focus-initial', ` +\n                    `use 'cdkFocusInitial' instead. The deprecated attribute ` +\n                    `will be removed in 8.0.0`, redirectToElement);\n            }\n            redirectToElement.focus();\n            return true;\n        }\n        return this.focusFirstTabbableElement();\n    }\n    /**\n     * Focuses the first tabbable element within the focus trap region.\n     * @return {?} Whether focus was moved successfuly.\n     */\n    focusFirstTabbableElement() {\n        /** @type {?} */\n        const redirectToElement = this._getRegionBoundary('start');\n        if (redirectToElement) {\n            redirectToElement.focus();\n        }\n        return !!redirectToElement;\n    }\n    /**\n     * Focuses the last tabbable element within the focus trap region.\n     * @return {?} Whether focus was moved successfuly.\n     */\n    focusLastTabbableElement() {\n        /** @type {?} */\n        const redirectToElement = this._getRegionBoundary('end');\n        if (redirectToElement) {\n            redirectToElement.focus();\n        }\n        return !!redirectToElement;\n    }\n    /**\n     * Checks whether the focus trap has successfuly been attached.\n     * @return {?}\n     */\n    hasAttached() {\n        return this._hasAttached;\n    }\n    /**\n     * Get the first tabbable element from a DOM subtree (inclusive).\n     * @param {?} root\n     * @return {?}\n     */\n    _getFirstTabbableElement(root) {\n        if (this._checker.isFocusable(root) && this._checker.isTabbable(root)) {\n            return root;\n        }\n        /** @type {?} */\n        let children = root.children || root.childNodes;\n        for (let i = 0; i < children.length; i++) {\n            /** @type {?} */\n            let tabbableChild = children[i].nodeType === this._document.ELEMENT_NODE ?\n                this._getFirstTabbableElement(/** @type {?} */ (children[i])) :\n                null;\n            if (tabbableChild) {\n                return tabbableChild;\n            }\n        }\n        return null;\n    }\n    /**\n     * Get the last tabbable element from a DOM subtree (inclusive).\n     * @param {?} root\n     * @return {?}\n     */\n    _getLastTabbableElement(root) {\n        if (this._checker.isFocusable(root) && this._checker.isTabbable(root)) {\n            return root;\n        }\n        /** @type {?} */\n        let children = root.children || root.childNodes;\n        for (let i = children.length - 1; i >= 0; i--) {\n            /** @type {?} */\n            let tabbableChild = children[i].nodeType === this._document.ELEMENT_NODE ?\n                this._getLastTabbableElement(/** @type {?} */ (children[i])) :\n                null;\n            if (tabbableChild) {\n                return tabbableChild;\n            }\n        }\n        return null;\n    }\n    /**\n     * Creates an anchor element.\n     * @return {?}\n     */\n    _createAnchor() {\n        /** @type {?} */\n        const anchor = this._document.createElement('div');\n        this._toggleAnchorTabIndex(this._enabled, anchor);\n        anchor.classList.add('cdk-visually-hidden');\n        anchor.classList.add('cdk-focus-trap-anchor');\n        return anchor;\n    }\n    /**\n     * Toggles the `tabindex` of an anchor, based on the enabled state of the focus trap.\n     * @param {?} isEnabled Whether the focus trap is enabled.\n     * @param {?} anchor Anchor on which to toggle the tabindex.\n     * @return {?}\n     */\n    _toggleAnchorTabIndex(isEnabled, anchor) {\n        // Remove the tabindex completely, rather than setting it to -1, because if the\n        // element has a tabindex, the user might still hit it when navigating with the arrow keys.\n        isEnabled ? anchor.setAttribute('tabindex', '0') : anchor.removeAttribute('tabindex');\n    }\n    /**\n     * Executes a function when the zone is stable.\n     * @param {?} fn\n     * @return {?}\n     */\n    _executeOnStable(fn) {\n        if (this._ngZone.isStable) {\n            fn();\n        }\n        else {\n            this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(fn);\n        }\n    }\n}\n/**\n * Factory that allows easy instantiation of focus traps.\n */\nclass FocusTrapFactory {\n    /**\n     * @param {?} _checker\n     * @param {?} _ngZone\n     * @param {?} _document\n     */\n    constructor(_checker, _ngZone, _document) {\n        this._checker = _checker;\n        this._ngZone = _ngZone;\n        this._document = _document;\n    }\n    /**\n     * Creates a focus-trapped region around the given element.\n     * @param {?} element The element around which focus will be trapped.\n     * @param {?=} deferCaptureElements Defers the creation of focus-capturing elements to be done\n     *     manually by the user.\n     * @return {?} The created focus trap instance.\n     */\n    create(element, deferCaptureElements = false) {\n        return new FocusTrap(element, this._checker, this._ngZone, this._document, deferCaptureElements);\n    }\n}\nFocusTrapFactory.ɵfac = function FocusTrapFactory_Factory(t) { return new (t || FocusTrapFactory)(ɵngcc0.ɵɵinject(InteractivityChecker), ɵngcc0.ɵɵinject(ɵngcc0.NgZone), ɵngcc0.ɵɵinject(DOCUMENT)); };\nFocusTrapFactory.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: FocusTrapFactory, factory: FocusTrapFactory.ɵfac, providedIn: 'root' });\n/** @nocollapse */\nFocusTrapFactory.ctorParameters = () => [\n    { type: InteractivityChecker },\n    { type: NgZone },\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }\n];\n/** @nocollapse */ FocusTrapFactory.ngInjectableDef = defineInjectable({ factory: function FocusTrapFactory_Factory() { return new FocusTrapFactory(inject(InteractivityChecker), inject(NgZone), inject(DOCUMENT)); }, token: FocusTrapFactory, providedIn: \"root\" });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(FocusTrapFactory, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return [{ type: InteractivityChecker }, { type: ɵngcc0.NgZone }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }]; }, null); })();\n/**\n * Directive for trapping focus within a region.\n */\nclass CdkTrapFocus {\n    /**\n     * @param {?} _elementRef\n     * @param {?} _focusTrapFactory\n     * @param {?} _document\n     */\n    constructor(_elementRef, _focusTrapFactory, _document) {\n        this._elementRef = _elementRef;\n        this._focusTrapFactory = _focusTrapFactory;\n        /**\n         * Previously focused element to restore focus to upon destroy when using autoCapture.\n         */\n        this._previouslyFocusedElement = null;\n        this._document = _document;\n        this.focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement, true);\n    }\n    /**\n     * Whether the focus trap is active.\n     * @return {?}\n     */\n    get enabled() { return this.focusTrap.enabled; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set enabled(value) { this.focusTrap.enabled = coerceBooleanProperty(value); }\n    /**\n     * Whether the directive should automatially move focus into the trapped region upon\n     * initialization and return focus to the previous activeElement upon destruction.\n     * @return {?}\n     */\n    get autoCapture() { return this._autoCapture; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set autoCapture(value) { this._autoCapture = coerceBooleanProperty(value); }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this.focusTrap.destroy();\n        // If we stored a previously focused element when using autoCapture, return focus to that\n        // element now that the trapped region is being destroyed.\n        if (this._previouslyFocusedElement) {\n            this._previouslyFocusedElement.focus();\n            this._previouslyFocusedElement = null;\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngAfterContentInit() {\n        this.focusTrap.attachAnchors();\n        if (this.autoCapture) {\n            this._previouslyFocusedElement = /** @type {?} */ (this._document.activeElement);\n            this.focusTrap.focusInitialElementWhenReady();\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngDoCheck() {\n        if (!this.focusTrap.hasAttached()) {\n            this.focusTrap.attachAnchors();\n        }\n    }\n}\nCdkTrapFocus.ɵfac = function CdkTrapFocus_Factory(t) { return new (t || CdkTrapFocus)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(FocusTrapFactory), ɵngcc0.ɵɵdirectiveInject(DOCUMENT)); };\nCdkTrapFocus.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: CdkTrapFocus, selectors: [[\"\", \"cdkTrapFocus\", \"\"]], inputs: { enabled: [\"cdkTrapFocus\", \"enabled\"], autoCapture: [\"cdkTrapFocusAutoCapture\", \"autoCapture\"] }, exportAs: [\"cdkTrapFocus\"] });\n/** @nocollapse */\nCdkTrapFocus.ctorParameters = () => [\n    { type: ElementRef },\n    { type: FocusTrapFactory },\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }\n];\nCdkTrapFocus.propDecorators = {\n    enabled: [{ type: Input, args: ['cdkTrapFocus',] }],\n    autoCapture: [{ type: Input, args: ['cdkTrapFocusAutoCapture',] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkTrapFocus, [{\n        type: Directive,\n        args: [{\n                selector: '[cdkTrapFocus]',\n                exportAs: 'cdkTrapFocus'\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: FocusTrapFactory }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }]; }, { enabled: [{\n            type: Input,\n            args: ['cdkTrapFocus']\n        }], autoCapture: [{\n            type: Input,\n            args: ['cdkTrapFocusAutoCapture']\n        }] }); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst LIVE_ANNOUNCER_ELEMENT_TOKEN = new InjectionToken('liveAnnouncerElement', {\n    providedIn: 'root',\n    factory: LIVE_ANNOUNCER_ELEMENT_TOKEN_FACTORY,\n});\n/**\n * \\@docs-private\n * @return {?}\n */\nfunction LIVE_ANNOUNCER_ELEMENT_TOKEN_FACTORY() {\n    return null;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\nclass LiveAnnouncer {\n    /**\n     * @param {?} elementToken\n     * @param {?} _ngZone\n     * @param {?} _document\n     */\n    constructor(elementToken, _ngZone, _document) {\n        this._ngZone = _ngZone;\n        // We inject the live element and document as `any` because the constructor signature cannot\n        // reference browser globals (HTMLElement, Document) on non-browser environments, since having\n        // a class decorator causes TypeScript to preserve the constructor signature types.\n        this._document = _document;\n        this._liveElement = elementToken || this._createLiveElement();\n    }\n    /**\n     * Announces a message to screenreaders.\n     * @param {?} message Message to be announced to the screenreader\n     * @param {?=} politeness The politeness of the announcer element\n     * @return {?} Promise that will be resolved when the message is added to the DOM.\n     */\n    announce(message, politeness = 'polite') {\n        this._liveElement.textContent = '';\n        // TODO: ensure changing the politeness works on all environments we support.\n        this._liveElement.setAttribute('aria-live', politeness);\n        // This 100ms timeout is necessary for some browser + screen-reader combinations:\n        // - Both JAWS and NVDA over IE11 will not announce anything without a non-zero timeout.\n        // - With Chrome and IE11 with NVDA or JAWS, a repeated (identical) message won't be read a\n        //   second time without clearing and then using a non-zero delay.\n        // (using JAWS 17 at time of this writing).\n        return this._ngZone.runOutsideAngular(() => {\n            return new Promise(resolve => {\n                setTimeout(() => {\n                    this._liveElement.textContent = message;\n                    resolve();\n                }, 100);\n            });\n        });\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        if (this._liveElement && this._liveElement.parentNode) {\n            this._liveElement.parentNode.removeChild(this._liveElement);\n        }\n    }\n    /**\n     * @return {?}\n     */\n    _createLiveElement() {\n        /** @type {?} */\n        const elementClass = 'cdk-live-announcer-element';\n        /** @type {?} */\n        const previousElements = this._document.getElementsByClassName(elementClass);\n        /** @type {?} */\n        const liveEl = this._document.createElement('div');\n        // Remove any old containers. This can happen when coming in from a server-side-rendered page.\n        for (let i = 0; i < previousElements.length; i++) {\n            /** @type {?} */ ((previousElements[i].parentNode)).removeChild(previousElements[i]);\n        }\n        liveEl.classList.add(elementClass);\n        liveEl.classList.add('cdk-visually-hidden');\n        liveEl.setAttribute('aria-atomic', 'true');\n        liveEl.setAttribute('aria-live', 'polite');\n        this._document.body.appendChild(liveEl);\n        return liveEl;\n    }\n}\nLiveAnnouncer.ɵfac = function LiveAnnouncer_Factory(t) { return new (t || LiveAnnouncer)(ɵngcc0.ɵɵinject(LIVE_ANNOUNCER_ELEMENT_TOKEN, 8), ɵngcc0.ɵɵinject(ɵngcc0.NgZone), ɵngcc0.ɵɵinject(DOCUMENT)); };\nLiveAnnouncer.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: LiveAnnouncer, factory: LiveAnnouncer.ɵfac, providedIn: 'root' });\n/** @nocollapse */\nLiveAnnouncer.ctorParameters = () => [\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [LIVE_ANNOUNCER_ELEMENT_TOKEN,] }] },\n    { type: NgZone },\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }\n];\n/** @nocollapse */ LiveAnnouncer.ngInjectableDef = defineInjectable({ factory: function LiveAnnouncer_Factory() { return new LiveAnnouncer(inject(LIVE_ANNOUNCER_ELEMENT_TOKEN, 8), inject(NgZone), inject(DOCUMENT)); }, token: LiveAnnouncer, providedIn: \"root\" });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(LiveAnnouncer, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return [{ type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [LIVE_ANNOUNCER_ELEMENT_TOKEN]\n            }] }, { type: ɵngcc0.NgZone }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }]; }, null); })();\n/**\n * A directive that works similarly to aria-live, but uses the LiveAnnouncer to ensure compatibility\n * with a wider range of browsers and screen readers.\n */\nclass CdkAriaLive {\n    /**\n     * @param {?} _elementRef\n     * @param {?} _liveAnnouncer\n     * @param {?} _contentObserver\n     * @param {?} _ngZone\n     */\n    constructor(_elementRef, _liveAnnouncer, _contentObserver, _ngZone) {\n        this._elementRef = _elementRef;\n        this._liveAnnouncer = _liveAnnouncer;\n        this._contentObserver = _contentObserver;\n        this._ngZone = _ngZone;\n        this._politeness = 'off';\n    }\n    /**\n     * The aria-live politeness level to use when announcing messages.\n     * @return {?}\n     */\n    get politeness() { return this._politeness; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set politeness(value) {\n        this._politeness = value === 'polite' || value === 'assertive' ? value : 'off';\n        if (this._politeness === 'off') {\n            if (this._subscription) {\n                this._subscription.unsubscribe();\n                this._subscription = null;\n            }\n        }\n        else if (!this._subscription) {\n            this._subscription = this._ngZone.runOutsideAngular(() => {\n                return this._contentObserver\n                    .observe(this._elementRef)\n                    .subscribe(() => {\n                    /** @type {?} */\n                    const element = this._elementRef.nativeElement;\n                    this._liveAnnouncer.announce(element.textContent, this._politeness);\n                });\n            });\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        if (this._subscription) {\n            this._subscription.unsubscribe();\n        }\n    }\n}\nCdkAriaLive.ɵfac = function CdkAriaLive_Factory(t) { return new (t || CdkAriaLive)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(LiveAnnouncer), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.ContentObserver), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone)); };\nCdkAriaLive.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: CdkAriaLive, selectors: [[\"\", \"cdkAriaLive\", \"\"]], inputs: { politeness: [\"cdkAriaLive\", \"politeness\"] }, exportAs: [\"cdkAriaLive\"] });\n/** @nocollapse */\nCdkAriaLive.ctorParameters = () => [\n    { type: ElementRef },\n    { type: LiveAnnouncer },\n    { type: ContentObserver },\n    { type: NgZone }\n];\nCdkAriaLive.propDecorators = {\n    politeness: [{ type: Input, args: ['cdkAriaLive',] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkAriaLive, [{\n        type: Directive,\n        args: [{\n                selector: '[cdkAriaLive]',\n                exportAs: 'cdkAriaLive'\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: LiveAnnouncer }, { type: ɵngcc2.ContentObserver }, { type: ɵngcc0.NgZone }]; }, { politeness: [{\n            type: Input,\n            args: ['cdkAriaLive']\n        }] }); })();\n/**\n * \\@docs-private \\@deprecated \\@breaking-change 8.0.0\n * @param {?} parentDispatcher\n * @param {?} liveElement\n * @param {?} _document\n * @param {?} ngZone\n * @return {?}\n */\nfunction LIVE_ANNOUNCER_PROVIDER_FACTORY(parentDispatcher, liveElement, _document, ngZone) {\n    return parentDispatcher || new LiveAnnouncer(liveElement, _document, ngZone);\n}\n/** *\n * \\@docs-private \\@deprecated \\@breaking-change 8.0.0\n  @type {?} */\nconst LIVE_ANNOUNCER_PROVIDER = {\n    // If there is already a LiveAnnouncer available, use that. Otherwise, provide a new one.\n    provide: LiveAnnouncer,\n    deps: [\n        [new Optional(), new SkipSelf(), LiveAnnouncer],\n        [new Optional(), new Inject(LIVE_ANNOUNCER_ELEMENT_TOKEN)],\n        DOCUMENT,\n        NgZone,\n    ],\n    useFactory: LIVE_ANNOUNCER_PROVIDER_FACTORY\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst TOUCH_BUFFER_MS = 650;\n/**\n * Monitors mouse and keyboard events to determine the cause of focus events.\n */\nclass FocusMonitor {\n    /**\n     * @param {?} _ngZone\n     * @param {?} _platform\n     */\n    constructor(_ngZone, _platform) {\n        this._ngZone = _ngZone;\n        this._platform = _platform;\n        /**\n         * The focus origin that the next focus event is a result of.\n         */\n        this._origin = null;\n        /**\n         * Whether the window has just been focused.\n         */\n        this._windowFocused = false;\n        /**\n         * Map of elements being monitored to their info.\n         */\n        this._elementInfo = new Map();\n        /**\n         * A map of global objects to lists of current listeners.\n         */\n        this._unregisterGlobalListeners = () => { };\n        /**\n         * The number of elements currently being monitored.\n         */\n        this._monitoredElementCount = 0;\n    }\n    /**\n     * @param {?} element\n     * @param {?=} checkChildren\n     * @return {?}\n     */\n    monitor(element, checkChildren = false) {\n        // Do nothing if we're not on the browser platform.\n        if (!this._platform.isBrowser) {\n            return of(null);\n        }\n        /** @type {?} */\n        const nativeElement = this._getNativeElement(element);\n        // Check if we're already monitoring this element.\n        if (this._elementInfo.has(nativeElement)) {\n            /** @type {?} */\n            let cachedInfo = this._elementInfo.get(nativeElement); /** @type {?} */\n            ((cachedInfo)).checkChildren = checkChildren;\n            return /** @type {?} */ ((cachedInfo)).subject.asObservable();\n        }\n        /** @type {?} */\n        let info = {\n            unlisten: () => { },\n            checkChildren: checkChildren,\n            subject: new Subject()\n        };\n        this._elementInfo.set(nativeElement, info);\n        this._incrementMonitoredElementCount();\n        /** @type {?} */\n        let focusListener = (event) => this._onFocus(event, nativeElement);\n        /** @type {?} */\n        let blurListener = (event) => this._onBlur(event, nativeElement);\n        this._ngZone.runOutsideAngular(() => {\n            nativeElement.addEventListener('focus', focusListener, true);\n            nativeElement.addEventListener('blur', blurListener, true);\n        });\n        // Create an unlisten function for later.\n        info.unlisten = () => {\n            nativeElement.removeEventListener('focus', focusListener, true);\n            nativeElement.removeEventListener('blur', blurListener, true);\n        };\n        return info.subject.asObservable();\n    }\n    /**\n     * @param {?} element\n     * @return {?}\n     */\n    stopMonitoring(element) {\n        /** @type {?} */\n        const nativeElement = this._getNativeElement(element);\n        /** @type {?} */\n        const elementInfo = this._elementInfo.get(nativeElement);\n        if (elementInfo) {\n            elementInfo.unlisten();\n            elementInfo.subject.complete();\n            this._setClasses(nativeElement);\n            this._elementInfo.delete(nativeElement);\n            this._decrementMonitoredElementCount();\n        }\n    }\n    /**\n     * @param {?} element\n     * @param {?} origin\n     * @param {?=} options\n     * @return {?}\n     */\n    focusVia(element, origin, options) {\n        /** @type {?} */\n        const nativeElement = this._getNativeElement(element);\n        this._setOriginForCurrentEventQueue(origin);\n        // `focus` isn't available on the server\n        if (typeof nativeElement.focus === 'function') {\n            // Cast the element to `any`, because the TS typings don't have the `options` parameter yet.\n            (/** @type {?} */ (nativeElement)).focus(options);\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this._elementInfo.forEach((_info, element) => this.stopMonitoring(element));\n    }\n    /**\n     * Register necessary event listeners on the document and window.\n     * @return {?}\n     */\n    _registerGlobalListeners() {\n        // Do nothing if we're not on the browser platform.\n        if (!this._platform.isBrowser) {\n            return;\n        }\n        /** @type {?} */\n        let documentKeydownListener = () => {\n            this._lastTouchTarget = null;\n            this._setOriginForCurrentEventQueue('keyboard');\n        };\n        /** @type {?} */\n        let documentMousedownListener = () => {\n            if (!this._lastTouchTarget) {\n                this._setOriginForCurrentEventQueue('mouse');\n            }\n        };\n        /** @type {?} */\n        let documentTouchstartListener = (event) => {\n            if (this._touchTimeoutId != null) {\n                clearTimeout(this._touchTimeoutId);\n            }\n            this._lastTouchTarget = event.target;\n            this._touchTimeoutId = setTimeout(() => this._lastTouchTarget = null, TOUCH_BUFFER_MS);\n        };\n        /** @type {?} */\n        let windowFocusListener = () => {\n            this._windowFocused = true;\n            this._windowFocusTimeoutId = setTimeout(() => this._windowFocused = false);\n        };\n        /** @type {?} */\n        const captureEventListenerOptions = normalizePassiveListenerOptions({\n            passive: true,\n            capture: true\n        });\n        // Note: we listen to events in the capture phase so we can detect them even if the user stops\n        // propagation.\n        this._ngZone.runOutsideAngular(() => {\n            document.addEventListener('keydown', documentKeydownListener, captureEventListenerOptions);\n            document.addEventListener('mousedown', documentMousedownListener, captureEventListenerOptions);\n            document.addEventListener('touchstart', documentTouchstartListener, captureEventListenerOptions);\n            window.addEventListener('focus', windowFocusListener);\n        });\n        this._unregisterGlobalListeners = () => {\n            document.removeEventListener('keydown', documentKeydownListener, captureEventListenerOptions);\n            document.removeEventListener('mousedown', documentMousedownListener, captureEventListenerOptions);\n            document.removeEventListener('touchstart', documentTouchstartListener, captureEventListenerOptions);\n            window.removeEventListener('focus', windowFocusListener);\n            // Clear timeouts for all potentially pending timeouts to prevent the leaks.\n            clearTimeout(this._windowFocusTimeoutId);\n            clearTimeout(this._touchTimeoutId);\n            clearTimeout(this._originTimeoutId);\n        };\n    }\n    /**\n     * @param {?} element\n     * @param {?} className\n     * @param {?} shouldSet\n     * @return {?}\n     */\n    _toggleClass(element, className, shouldSet) {\n        if (shouldSet) {\n            element.classList.add(className);\n        }\n        else {\n            element.classList.remove(className);\n        }\n    }\n    /**\n     * Sets the focus classes on the element based on the given focus origin.\n     * @param {?} element The element to update the classes on.\n     * @param {?=} origin The focus origin.\n     * @return {?}\n     */\n    _setClasses(element, origin) {\n        /** @type {?} */\n        const elementInfo = this._elementInfo.get(element);\n        if (elementInfo) {\n            this._toggleClass(element, 'cdk-focused', !!origin);\n            this._toggleClass(element, 'cdk-touch-focused', origin === 'touch');\n            this._toggleClass(element, 'cdk-keyboard-focused', origin === 'keyboard');\n            this._toggleClass(element, 'cdk-mouse-focused', origin === 'mouse');\n            this._toggleClass(element, 'cdk-program-focused', origin === 'program');\n        }\n    }\n    /**\n     * Sets the origin and schedules an async function to clear it at the end of the event queue.\n     * @param {?} origin The origin to set.\n     * @return {?}\n     */\n    _setOriginForCurrentEventQueue(origin) {\n        this._ngZone.runOutsideAngular(() => {\n            this._origin = origin;\n            // Sometimes the focus origin won't be valid in Firefox because Firefox seems to focus *one*\n            // tick after the interaction event fired. To ensure the focus origin is always correct,\n            // the focus origin will be determined at the beginning of the next tick.\n            this._originTimeoutId = setTimeout(() => this._origin = null, 1);\n        });\n    }\n    /**\n     * Checks whether the given focus event was caused by a touchstart event.\n     * @param {?} event The focus event to check.\n     * @return {?} Whether the event was caused by a touch.\n     */\n    _wasCausedByTouch(event) {\n        /** @type {?} */\n        let focusTarget = event.target;\n        return this._lastTouchTarget instanceof Node && focusTarget instanceof Node &&\n            (focusTarget === this._lastTouchTarget || focusTarget.contains(this._lastTouchTarget));\n    }\n    /**\n     * Handles focus events on a registered element.\n     * @param {?} event The focus event.\n     * @param {?} element The monitored element.\n     * @return {?}\n     */\n    _onFocus(event, element) {\n        /** @type {?} */\n        const elementInfo = this._elementInfo.get(element);\n        if (!elementInfo || (!elementInfo.checkChildren && element !== event.target)) {\n            return;\n        }\n        /** @type {?} */\n        let origin = this._origin;\n        if (!origin) {\n            if (this._windowFocused && this._lastFocusOrigin) {\n                origin = this._lastFocusOrigin;\n            }\n            else if (this._wasCausedByTouch(event)) {\n                origin = 'touch';\n            }\n            else {\n                origin = 'program';\n            }\n        }\n        this._setClasses(element, origin);\n        this._emitOrigin(elementInfo.subject, origin);\n        this._lastFocusOrigin = origin;\n    }\n    /**\n     * Handles blur events on a registered element.\n     * @param {?} event The blur event.\n     * @param {?} element The monitored element.\n     * @return {?}\n     */\n    _onBlur(event, element) {\n        /** @type {?} */\n        const elementInfo = this._elementInfo.get(element);\n        if (!elementInfo || (elementInfo.checkChildren && event.relatedTarget instanceof Node &&\n            element.contains(event.relatedTarget))) {\n            return;\n        }\n        this._setClasses(element);\n        this._emitOrigin(elementInfo.subject, null);\n    }\n    /**\n     * @param {?} subject\n     * @param {?} origin\n     * @return {?}\n     */\n    _emitOrigin(subject, origin) {\n        this._ngZone.run(() => subject.next(origin));\n    }\n    /**\n     * @return {?}\n     */\n    _incrementMonitoredElementCount() {\n        // Register global listeners when first element is monitored.\n        if (++this._monitoredElementCount == 1) {\n            this._registerGlobalListeners();\n        }\n    }\n    /**\n     * @return {?}\n     */\n    _decrementMonitoredElementCount() {\n        // Unregister global listeners when last element is unmonitored.\n        if (!--this._monitoredElementCount) {\n            this._unregisterGlobalListeners();\n            this._unregisterGlobalListeners = () => { };\n        }\n    }\n    /**\n     * @param {?} element\n     * @return {?}\n     */\n    _getNativeElement(element) {\n        return element instanceof ElementRef ? element.nativeElement : element;\n    }\n}\nFocusMonitor.ɵfac = function FocusMonitor_Factory(t) { return new (t || FocusMonitor)(ɵngcc0.ɵɵinject(ɵngcc0.NgZone), ɵngcc0.ɵɵinject(ɵngcc1.Platform)); };\nFocusMonitor.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: FocusMonitor, factory: FocusMonitor.ɵfac, providedIn: 'root' });\n/** @nocollapse */\nFocusMonitor.ctorParameters = () => [\n    { type: NgZone },\n    { type: Platform }\n];\n/** @nocollapse */ FocusMonitor.ngInjectableDef = defineInjectable({ factory: function FocusMonitor_Factory() { return new FocusMonitor(inject(NgZone), inject(Platform)); }, token: FocusMonitor, providedIn: \"root\" });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(FocusMonitor, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return [{ type: ɵngcc0.NgZone }, { type: ɵngcc1.Platform }]; }, null); })();\n/**\n * Directive that determines how a particular element was focused (via keyboard, mouse, touch, or\n * programmatically) and adds corresponding classes to the element.\n *\n * There are two variants of this directive:\n * 1) cdkMonitorElementFocus: does not consider an element to be focused if one of its children is\n *    focused.\n * 2) cdkMonitorSubtreeFocus: considers an element focused if it or any of its children are focused.\n */\nclass CdkMonitorFocus {\n    /**\n     * @param {?} _elementRef\n     * @param {?} _focusMonitor\n     */\n    constructor(_elementRef, _focusMonitor) {\n        this._elementRef = _elementRef;\n        this._focusMonitor = _focusMonitor;\n        this.cdkFocusChange = new EventEmitter();\n        this._monitorSubscription = this._focusMonitor.monitor(this._elementRef, this._elementRef.nativeElement.hasAttribute('cdkMonitorSubtreeFocus'))\n            .subscribe(origin => this.cdkFocusChange.emit(origin));\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this._focusMonitor.stopMonitoring(this._elementRef);\n        this._monitorSubscription.unsubscribe();\n    }\n}\nCdkMonitorFocus.ɵfac = function CdkMonitorFocus_Factory(t) { return new (t || CdkMonitorFocus)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(FocusMonitor)); };\nCdkMonitorFocus.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: CdkMonitorFocus, selectors: [[\"\", \"cdkMonitorElementFocus\", \"\"], [\"\", \"cdkMonitorSubtreeFocus\", \"\"]], outputs: { cdkFocusChange: \"cdkFocusChange\" } });\n/** @nocollapse */\nCdkMonitorFocus.ctorParameters = () => [\n    { type: ElementRef },\n    { type: FocusMonitor }\n];\nCdkMonitorFocus.propDecorators = {\n    cdkFocusChange: [{ type: Output }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkMonitorFocus, [{\n        type: Directive,\n        args: [{\n                selector: '[cdkMonitorElementFocus], [cdkMonitorSubtreeFocus]'\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: FocusMonitor }]; }, { cdkFocusChange: [{\n            type: Output\n        }] }); })();\n/**\n * \\@docs-private \\@deprecated \\@breaking-change 8.0.0\n * @param {?} parentDispatcher\n * @param {?} ngZone\n * @param {?} platform\n * @return {?}\n */\nfunction FOCUS_MONITOR_PROVIDER_FACTORY(parentDispatcher, ngZone, platform) {\n    return parentDispatcher || new FocusMonitor(ngZone, platform);\n}\n/** *\n * \\@docs-private \\@deprecated \\@breaking-change 8.0.0\n  @type {?} */\nconst FOCUS_MONITOR_PROVIDER = {\n    // If there is already a FocusMonitor available, use that. Otherwise, provide a new one.\n    provide: FocusMonitor,\n    deps: [[new Optional(), new SkipSelf(), FocusMonitor], NgZone, Platform],\n    useFactory: FOCUS_MONITOR_PROVIDER_FACTORY\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * Screenreaders will often fire fake mousedown events when a focusable element\n * is activated using the keyboard. We can typically distinguish between these faked\n * mousedown events and real mousedown events using the \"buttons\" property. While\n * real mousedowns will indicate the mouse button that was pressed (e.g. \"1\" for\n * the left mouse button), faked mousedowns will usually set the property value to 0.\n * @param {?} event\n * @return {?}\n */\nfunction isFakeMousedownFromScreenReader(event) {\n    return event.buttons === 0;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\nclass A11yModule {\n}\nA11yModule.ɵfac = function A11yModule_Factory(t) { return new (t || A11yModule)(); };\nA11yModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: A11yModule });\nA11yModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ imports: [[CommonModule, PlatformModule, ObserversModule]] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(A11yModule, [{\n        type: NgModule,\n        args: [{\n                imports: [CommonModule, PlatformModule, ObserversModule],\n                declarations: [CdkAriaLive, CdkTrapFocus, CdkMonitorFocus],\n                exports: [CdkAriaLive, CdkTrapFocus, CdkMonitorFocus]\n            }]\n    }], null, null); })();\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(A11yModule, { declarations: function () { return [CdkAriaLive, CdkTrapFocus, CdkMonitorFocus]; }, imports: function () { return [CommonModule, PlatformModule, ObserversModule]; }, exports: function () { return [CdkAriaLive, CdkTrapFocus, CdkMonitorFocus]; } }); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\nexport { ARIA_DESCRIBER_PROVIDER_FACTORY, MESSAGES_CONTAINER_ID, CDK_DESCRIBEDBY_ID_PREFIX, CDK_DESCRIBEDBY_HOST_ATTRIBUTE, AriaDescriber, ARIA_DESCRIBER_PROVIDER, ActiveDescendantKeyManager, FocusKeyManager, ListKeyManager, FocusTrap, FocusTrapFactory, CdkTrapFocus, InteractivityChecker, LIVE_ANNOUNCER_PROVIDER_FACTORY, LiveAnnouncer, CdkAriaLive, LIVE_ANNOUNCER_PROVIDER, LIVE_ANNOUNCER_ELEMENT_TOKEN_FACTORY, LIVE_ANNOUNCER_ELEMENT_TOKEN, FOCUS_MONITOR_PROVIDER_FACTORY, TOUCH_BUFFER_MS, FocusMonitor, CdkMonitorFocus, FOCUS_MONITOR_PROVIDER, isFakeMousedownFromScreenReader, A11yModule };\n\n//# sourceMappingURL=a11y.js.map"]},"metadata":{},"sourceType":"module"}