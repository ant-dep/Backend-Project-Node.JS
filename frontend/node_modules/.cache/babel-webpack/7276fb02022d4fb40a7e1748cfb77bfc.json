{"ast":null,"code":"import _createClass from \"/Users/adepertat/Dropbox/ECOLES/Openclassroom/P6_de_Pertat_Antoine/AntoinedePertat_6_240521/frontend/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/Users/adepertat/Dropbox/ECOLES/Openclassroom/P6_de_Pertat_Antoine/AntoinedePertat_6_240521/frontend/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/adepertat/Dropbox/ECOLES/Openclassroom/P6_de_Pertat_Antoine/AntoinedePertat_6_240521/frontend/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _classCallCheck from \"/Users/adepertat/Dropbox/ECOLES/Openclassroom/P6_de_Pertat_Antoine/AntoinedePertat_6_240521/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { InjectionToken, Component, ViewChild, ElementRef, ChangeDetectionStrategy, ViewEncapsulation, ChangeDetectorRef, EventEmitter, Inject, Optional, NgModule, Injectable, Injector, SkipSelf, TemplateRef, defineInjectable, inject, INJECTOR } from '@angular/core';\nimport { animate, state, style, transition, trigger } from '@angular/animations';\nimport { AnimationCurves, AnimationDurations, MatCommonModule } from '@angular/material/core';\nimport { BasePortalOutlet, CdkPortalOutlet, PortalModule, ComponentPortal, PortalInjector, TemplatePortal } from '@angular/cdk/portal';\nimport { BreakpointObserver, Breakpoints } from '@angular/cdk/layout';\nimport { DOCUMENT, CommonModule, Location } from '@angular/common';\nimport { FocusTrapFactory } from '@angular/cdk/a11y';\nimport { OverlayModule, Overlay, OverlayConfig } from '@angular/cdk/overlay';\nimport { ESCAPE } from '@angular/cdk/keycodes';\nimport { merge, Subject, of } from 'rxjs';\nimport { filter, take } from 'rxjs/operators';\nimport { Directionality } from '@angular/cdk/bidi';\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/** *\n * Injection token that can be used to access the data that was passed in to a bottom sheet.\n  @type {?} */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/a11y';\nimport * as ɵngcc2 from '@angular/cdk/layout';\nimport * as ɵngcc3 from '@angular/cdk/portal';\nimport * as ɵngcc4 from '@angular/cdk/overlay';\nimport * as ɵngcc5 from '@angular/common';\n\nfunction MatBottomSheetContainer_ng_template_0_Template(rf, ctx) {}\n\nvar MAT_BOTTOM_SHEET_DATA = /*@__PURE__*/new InjectionToken('MatBottomSheetData');\n/**\n * Configuration used when opening a bottom sheet.\n * @template D\n */\n\nvar MatBottomSheetConfig = function MatBottomSheetConfig() {\n  _classCallCheck(this, MatBottomSheetConfig);\n\n  /**\n   * Data being injected into the child component.\n   */\n  this.data = null;\n  /**\n   * Whether the bottom sheet has a backdrop.\n   */\n\n  this.hasBackdrop = true;\n  /**\n   * Whether the user can use escape or clicking outside to close the bottom sheet.\n   */\n\n  this.disableClose = false;\n  /**\n   * Aria label to assign to the bottom sheet element.\n   */\n\n  this.ariaLabel = null;\n  /**\n   * Whether the bottom sheet should close when the user goes backwards/forwards in history.\n   * Note that this usually doesn't include clicking on links (unless the user is using\n   * the `HashLocationStrategy`).\n   */\n\n  this.closeOnNavigation = true;\n  /**\n   * Whether the bottom sheet should focus the first focusable element on open.\n   */\n\n  this.autoFocus = true;\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/** *\n * Animations used by the Material bottom sheet.\n  @type {?} */\n\n\nvar matBottomSheetAnimations = {\n  /** Animation that shows and hides a bottom sheet. */\n  bottomSheetState: /*@__PURE__*/trigger('state', [/*@__PURE__*/state('void, hidden', /*@__PURE__*/style({\n    transform: 'translateY(100%)'\n  })), /*@__PURE__*/state('visible', /*@__PURE__*/style({\n    transform: 'translateY(0%)'\n  })), /*@__PURE__*/transition('visible => void, visible => hidden', /*@__PURE__*/animate(\"\".concat(AnimationDurations.COMPLEX, \" \").concat(AnimationCurves.ACCELERATION_CURVE))), /*@__PURE__*/transition('void => visible', /*@__PURE__*/animate(\"\".concat(AnimationDurations.EXITING, \" \").concat(AnimationCurves.DECELERATION_CURVE)))])\n};\n\nvar MatBottomSheetContainer = /*@__PURE__*/function () {\n  var MatBottomSheetContainer = /*#__PURE__*/function (_BasePortalOutlet) {\n    _inherits(MatBottomSheetContainer, _BasePortalOutlet);\n\n    var _super = _createSuper(MatBottomSheetContainer);\n\n    /**\n     * @param {?} _elementRef\n     * @param {?} _changeDetectorRef\n     * @param {?} _focusTrapFactory\n     * @param {?} breakpointObserver\n     * @param {?} document\n     * @param {?} bottomSheetConfig\n     */\n    function MatBottomSheetContainer(_elementRef, _changeDetectorRef, _focusTrapFactory, breakpointObserver, document, bottomSheetConfig) {\n      var _this;\n\n      _classCallCheck(this, MatBottomSheetContainer);\n\n      _this = _super.call(this);\n      _this._elementRef = _elementRef;\n      _this._changeDetectorRef = _changeDetectorRef;\n      _this._focusTrapFactory = _focusTrapFactory;\n      _this.bottomSheetConfig = bottomSheetConfig;\n      /**\n       * The state of the bottom sheet animations.\n       */\n\n      _this._animationState = 'void';\n      /**\n       * Emits whenever the state of the animation changes.\n       */\n\n      _this._animationStateChanged = new EventEmitter();\n      /**\n       * Element that was focused before the bottom sheet was opened.\n       */\n\n      _this._elementFocusedBeforeOpened = null;\n      _this._document = document;\n      _this._breakpointSubscription = breakpointObserver.observe([Breakpoints.Medium, Breakpoints.Large, Breakpoints.XLarge]).subscribe(function () {\n        _this._toggleClass('mat-bottom-sheet-container-medium', breakpointObserver.isMatched(Breakpoints.Medium));\n\n        _this._toggleClass('mat-bottom-sheet-container-large', breakpointObserver.isMatched(Breakpoints.Large));\n\n        _this._toggleClass('mat-bottom-sheet-container-xlarge', breakpointObserver.isMatched(Breakpoints.XLarge));\n      });\n      return _this;\n    }\n    /**\n     * Attach a component portal as content to this bottom sheet container.\n     * @template T\n     * @param {?} portal\n     * @return {?}\n     */\n\n\n    _createClass(MatBottomSheetContainer, [{\n      key: \"attachComponentPortal\",\n      value: function attachComponentPortal(portal) {\n        this._validatePortalAttached();\n\n        this._setPanelClass();\n\n        this._savePreviouslyFocusedElement();\n\n        return this._portalOutlet.attachComponentPortal(portal);\n      }\n      /**\n       * Attach a template portal as content to this bottom sheet container.\n       * @template C\n       * @param {?} portal\n       * @return {?}\n       */\n\n    }, {\n      key: \"attachTemplatePortal\",\n      value: function attachTemplatePortal(portal) {\n        this._validatePortalAttached();\n\n        this._setPanelClass();\n\n        this._savePreviouslyFocusedElement();\n\n        return this._portalOutlet.attachTemplatePortal(portal);\n      }\n      /**\n       * Begin animation of bottom sheet entrance into view.\n       * @return {?}\n       */\n\n    }, {\n      key: \"enter\",\n      value: function enter() {\n        if (!this._destroyed) {\n          this._animationState = 'visible';\n\n          this._changeDetectorRef.detectChanges();\n        }\n      }\n      /**\n       * Begin animation of the bottom sheet exiting from view.\n       * @return {?}\n       */\n\n    }, {\n      key: \"exit\",\n      value: function exit() {\n        if (!this._destroyed) {\n          this._animationState = 'hidden';\n\n          this._changeDetectorRef.markForCheck();\n        }\n      }\n      /**\n       * @return {?}\n       */\n\n    }, {\n      key: \"ngOnDestroy\",\n      value: function ngOnDestroy() {\n        this._breakpointSubscription.unsubscribe();\n\n        this._destroyed = true;\n      }\n      /**\n       * @param {?} event\n       * @return {?}\n       */\n\n    }, {\n      key: \"_onAnimationDone\",\n      value: function _onAnimationDone(event) {\n        if (event.toState === 'hidden') {\n          this._restoreFocus();\n        } else if (event.toState === 'visible' && this.bottomSheetConfig.autoFocus) {\n          this._trapFocus();\n        }\n\n        this._animationStateChanged.emit(event);\n      }\n      /**\n       * @param {?} event\n       * @return {?}\n       */\n\n    }, {\n      key: \"_onAnimationStart\",\n      value: function _onAnimationStart(event) {\n        this._animationStateChanged.emit(event);\n      }\n      /**\n       * @param {?} cssClass\n       * @param {?} add\n       * @return {?}\n       */\n\n    }, {\n      key: \"_toggleClass\",\n      value: function _toggleClass(cssClass, add) {\n        /** @type {?} */\n        var classList = this._elementRef.nativeElement.classList;\n        add ? classList.add(cssClass) : classList.remove(cssClass);\n      }\n      /**\n       * @return {?}\n       */\n\n    }, {\n      key: \"_validatePortalAttached\",\n      value: function _validatePortalAttached() {\n        if (this._portalOutlet.hasAttached()) {\n          throw Error('Attempting to attach bottom sheet content after content is already attached');\n        }\n      }\n      /**\n       * @return {?}\n       */\n\n    }, {\n      key: \"_setPanelClass\",\n      value: function _setPanelClass() {\n        /** @type {?} */\n        var element = this._elementRef.nativeElement;\n        /** @type {?} */\n\n        var panelClass = this.bottomSheetConfig.panelClass;\n\n        if (Array.isArray(panelClass)) {\n          // Note that we can't use a spread here, because IE doesn't support multiple arguments.\n          panelClass.forEach(function (cssClass) {\n            return element.classList.add(cssClass);\n          });\n        } else if (panelClass) {\n          element.classList.add(panelClass);\n        }\n      }\n      /**\n       * Moves the focus inside the focus trap.\n       * @return {?}\n       */\n\n    }, {\n      key: \"_trapFocus\",\n      value: function _trapFocus() {\n        if (!this._focusTrap) {\n          this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n        }\n\n        this._focusTrap.focusInitialElementWhenReady();\n      }\n      /**\n       * Restores focus to the element that was focused before the bottom sheet opened.\n       * @return {?}\n       */\n\n    }, {\n      key: \"_restoreFocus\",\n      value: function _restoreFocus() {\n        /** @type {?} */\n        var toFocus = this._elementFocusedBeforeOpened; // We need the extra check, because IE can set the `activeElement` to null in some cases.\n\n        if (toFocus && typeof toFocus.focus === 'function') {\n          toFocus.focus();\n        }\n\n        if (this._focusTrap) {\n          this._focusTrap.destroy();\n        }\n      }\n      /**\n       * Saves a reference to the element that was focused before the bottom sheet was opened.\n       * @return {?}\n       */\n\n    }, {\n      key: \"_savePreviouslyFocusedElement\",\n      value: function _savePreviouslyFocusedElement() {\n        var _this2 = this;\n\n        this._elementFocusedBeforeOpened =\n        /** @type {?} */\n        this._document.activeElement; // The `focus` method isn't available during server-side rendering.\n\n        if (this._elementRef.nativeElement.focus) {\n          Promise.resolve().then(function () {\n            return _this2._elementRef.nativeElement.focus();\n          });\n        }\n      }\n    }]);\n\n    return MatBottomSheetContainer;\n  }(BasePortalOutlet);\n\n  MatBottomSheetContainer.ɵfac = function MatBottomSheetContainer_Factory(t) {\n    return new (t || MatBottomSheetContainer)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.FocusTrapFactory), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.BreakpointObserver), ɵngcc0.ɵɵdirectiveInject(DOCUMENT, 8), ɵngcc0.ɵɵdirectiveInject(MatBottomSheetConfig));\n  };\n\n  MatBottomSheetContainer.ɵcmp =\n  /*@__PURE__*/\n\n  /*@__PURE__*/\n  ɵngcc0.ɵɵdefineComponent({\n    type: MatBottomSheetContainer,\n    selectors: [[\"mat-bottom-sheet-container\"]],\n    viewQuery: function MatBottomSheetContainer_Query(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(CdkPortalOutlet, 5);\n      }\n\n      if (rf & 2) {\n        var _t;\n\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._portalOutlet = _t.first);\n      }\n    },\n    hostAttrs: [\"tabindex\", \"-1\", \"role\", \"dialog\", \"aria-modal\", \"true\", 1, \"mat-bottom-sheet-container\"],\n    hostVars: 2,\n    hostBindings: function MatBottomSheetContainer_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵsyntheticHostListener(\"@state.start\", function MatBottomSheetContainer_animation_state_start_HostBindingHandler($event) {\n          return ctx._onAnimationStart($event);\n        })(\"@state.done\", function MatBottomSheetContainer_animation_state_done_HostBindingHandler($event) {\n          return ctx._onAnimationDone($event);\n        });\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"aria-label\", ctx.bottomSheetConfig == null ? null : ctx.bottomSheetConfig.ariaLabel);\n        ɵngcc0.ɵɵsyntheticHostProperty(\"@state\", ctx._animationState);\n      }\n    },\n    features: [ɵngcc0.ɵɵInheritDefinitionFeature],\n    decls: 1,\n    vars: 0,\n    consts: [[\"cdkPortalOutlet\", \"\"]],\n    template: function MatBottomSheetContainer_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵtemplate(0, MatBottomSheetContainer_ng_template_0_Template, 0, 0, \"ng-template\", 0);\n      }\n    },\n    directives: [ɵngcc3.CdkPortalOutlet],\n    styles: [\".mat-bottom-sheet-container{padding:8px 16px;min-width:100vw;box-sizing:border-box;display:block;outline:0;max-height:80vh;overflow:auto}@media screen and (-ms-high-contrast:active){.mat-bottom-sheet-container{outline:1px solid}}.mat-bottom-sheet-container-large,.mat-bottom-sheet-container-medium,.mat-bottom-sheet-container-xlarge{border-top-left-radius:4px;border-top-right-radius:4px}.mat-bottom-sheet-container-medium{min-width:384px;max-width:calc(100vw - 128px)}.mat-bottom-sheet-container-large{min-width:512px;max-width:calc(100vw - 256px)}.mat-bottom-sheet-container-xlarge{min-width:576px;max-width:calc(100vw - 384px)}\"],\n    encapsulation: 2,\n    data: {\n      animation: [matBottomSheetAnimations.bottomSheetState]\n    },\n    changeDetection: 0\n  });\n  return MatBottomSheetContainer;\n}();\n\nvar MatBottomSheetModule = /*@__PURE__*/function () {\n  var MatBottomSheetModule = function MatBottomSheetModule() {\n    _classCallCheck(this, MatBottomSheetModule);\n  };\n\n  MatBottomSheetModule.ɵfac = function MatBottomSheetModule_Factory(t) {\n    return new (t || MatBottomSheetModule)();\n  };\n\n  MatBottomSheetModule.ɵmod =\n  /*@__PURE__*/\n\n  /*@__PURE__*/\n  ɵngcc0.ɵɵdefineNgModule({\n    type: MatBottomSheetModule\n  });\n  MatBottomSheetModule.ɵinj =\n  /*@__PURE__*/\n\n  /*@__PURE__*/\n  ɵngcc0.ɵɵdefineInjector({\n    imports: [[CommonModule, OverlayModule, MatCommonModule, PortalModule], MatCommonModule]\n  });\n  return MatBottomSheetModule;\n}();\n/*@__PURE__*/\n\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatBottomSheetModule, {\n    declarations: function declarations() {\n      return [MatBottomSheetContainer];\n    },\n    imports: function imports() {\n      return [CommonModule, OverlayModule, MatCommonModule, PortalModule];\n    },\n    exports: function exports() {\n      return [MatBottomSheetContainer, MatCommonModule];\n    }\n  });\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * Reference to a bottom sheet dispatched from the bottom sheet service.\n * @template T, R\n */\n\n\nvar MatBottomSheetRef = /*#__PURE__*/function () {\n  /**\n   * @param {?} containerInstance\n   * @param {?} _overlayRef\n   * @param {?=} _location\n   */\n  function MatBottomSheetRef(containerInstance, _overlayRef, // @breaking-change 8.0.0 `_location` parameter to be removed.\n  _location) {\n    var _this3 = this;\n\n    _classCallCheck(this, MatBottomSheetRef);\n\n    this._overlayRef = _overlayRef;\n    /**\n     * Subject for notifying the user that the bottom sheet has been dismissed.\n     */\n\n    this._afterDismissed = new Subject();\n    /**\n     * Subject for notifying the user that the bottom sheet has opened and appeared.\n     */\n\n    this._afterOpened = new Subject();\n    this.containerInstance = containerInstance; // Emit when opening animation completes\n\n    containerInstance._animationStateChanged.pipe(filter(function (event) {\n      return event.phaseName === 'done' && event.toState === 'visible';\n    }), take(1)).subscribe(function () {\n      _this3._afterOpened.next();\n\n      _this3._afterOpened.complete();\n    }); // Dispose overlay when closing animation is complete\n\n\n    containerInstance._animationStateChanged.pipe(filter(function (event) {\n      return event.phaseName === 'done' && event.toState === 'hidden';\n    }), take(1)).subscribe(function () {\n      _this3._overlayRef.dispose();\n\n      _this3._afterDismissed.next(_this3._result);\n\n      _this3._afterDismissed.complete();\n    });\n\n    if (!containerInstance.bottomSheetConfig.disableClose) {\n      merge(_overlayRef.backdropClick(), _overlayRef.keydownEvents().pipe(filter(function (event) {\n        return event.keyCode === ESCAPE;\n      }))).subscribe(function () {\n        return _this3.dismiss();\n      });\n    }\n  }\n  /**\n   * Dismisses the bottom sheet.\n   * @param {?=} result Data to be passed back to the bottom sheet opener.\n   * @return {?}\n   */\n\n\n  _createClass(MatBottomSheetRef, [{\n    key: \"dismiss\",\n    value: function dismiss(result) {\n      var _this4 = this;\n\n      if (!this._afterDismissed.closed) {\n        // Transition the backdrop in parallel to the bottom sheet.\n        this.containerInstance._animationStateChanged.pipe(filter(function (event) {\n          return event.phaseName === 'start';\n        }), take(1)).subscribe(function () {\n          return _this4._overlayRef.detachBackdrop();\n        });\n\n        this._result = result;\n        this.containerInstance.exit();\n      }\n    }\n    /**\n     * Gets an observable that is notified when the bottom sheet is finished closing.\n     * @return {?}\n     */\n\n  }, {\n    key: \"afterDismissed\",\n    value: function afterDismissed() {\n      return this._afterDismissed.asObservable();\n    }\n    /**\n     * Gets an observable that is notified when the bottom sheet has opened and appeared.\n     * @return {?}\n     */\n\n  }, {\n    key: \"afterOpened\",\n    value: function afterOpened() {\n      return this._afterOpened.asObservable();\n    }\n    /**\n     * Gets an observable that emits when the overlay's backdrop has been clicked.\n     * @return {?}\n     */\n\n  }, {\n    key: \"backdropClick\",\n    value: function backdropClick() {\n      return this._overlayRef.backdropClick();\n    }\n    /**\n     * Gets an observable that emits when keydown events are targeted on the overlay.\n     * @return {?}\n     */\n\n  }, {\n    key: \"keydownEvents\",\n    value: function keydownEvents() {\n      return this._overlayRef.keydownEvents();\n    }\n  }]);\n\n  return MatBottomSheetRef;\n}();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/** *\n * Injection token that can be used to specify default bottom sheet options.\n  @type {?} */\n\n\nvar MAT_BOTTOM_SHEET_DEFAULT_OPTIONS = /*@__PURE__*/new InjectionToken('mat-bottom-sheet-default-options');\n\nvar MatBottomSheet = /*@__PURE__*/function () {\n  var MatBottomSheet = /*#__PURE__*/function () {\n    /**\n     * @param {?} _overlay\n     * @param {?} _injector\n     * @param {?} _parentBottomSheet\n     * @param {?=} _location\n     * @param {?=} _defaultOptions\n     */\n    function MatBottomSheet(_overlay, _injector, _parentBottomSheet, _location, _defaultOptions) {\n      _classCallCheck(this, MatBottomSheet);\n\n      this._overlay = _overlay;\n      this._injector = _injector;\n      this._parentBottomSheet = _parentBottomSheet;\n      this._location = _location;\n      this._defaultOptions = _defaultOptions;\n      this._bottomSheetRefAtThisLevel = null;\n    }\n    /**\n     * Reference to the currently opened bottom sheet.\n     * @return {?}\n     */\n\n\n    _createClass(MatBottomSheet, [{\n      key: \"_openedBottomSheetRef\",\n      get: function get() {\n        /** @type {?} */\n        var parent = this._parentBottomSheet;\n        return parent ? parent._openedBottomSheetRef : this._bottomSheetRefAtThisLevel;\n      }\n      /**\n       * @param {?} value\n       * @return {?}\n       */\n      ,\n      set: function set(value) {\n        if (this._parentBottomSheet) {\n          this._parentBottomSheet._openedBottomSheetRef = value;\n        } else {\n          this._bottomSheetRefAtThisLevel = value;\n        }\n      }\n      /**\n       * @template T, D, R\n       * @param {?} componentOrTemplateRef\n       * @param {?=} config\n       * @return {?}\n       */\n\n    }, {\n      key: \"open\",\n      value: function open(componentOrTemplateRef, config) {\n        var _this5 = this;\n\n        /** @type {?} */\n        var _config = _applyConfigDefaults(this._defaultOptions || new MatBottomSheetConfig(), config);\n        /** @type {?} */\n\n\n        var overlayRef = this._createOverlay(_config);\n        /** @type {?} */\n\n\n        var container = this._attachContainer(overlayRef, _config);\n        /** @type {?} */\n\n\n        var ref = new MatBottomSheetRef(container, overlayRef, this._location);\n\n        if (componentOrTemplateRef instanceof TemplateRef) {\n          container.attachTemplatePortal(new TemplatePortal(componentOrTemplateRef,\n          /** @type {?} */\n          null,\n          /** @type {?} */\n          {\n            $implicit: _config.data,\n            bottomSheetRef: ref\n          }));\n        } else {\n          /** @type {?} */\n          var portal = new ComponentPortal(componentOrTemplateRef, undefined, this._createInjector(_config, ref));\n          /** @type {?} */\n\n          var contentRef = container.attachComponentPortal(portal);\n          ref.instance = contentRef.instance;\n        } // When the bottom sheet is dismissed, clear the reference to it.\n\n\n        ref.afterDismissed().subscribe(function () {\n          // Clear the bottom sheet ref if it hasn't already been replaced by a newer one.\n          if (_this5._openedBottomSheetRef == ref) {\n            _this5._openedBottomSheetRef = null;\n          }\n        });\n\n        if (this._openedBottomSheetRef) {\n          // If a bottom sheet is already in view, dismiss it and enter the\n          // new bottom sheet after exit animation is complete.\n          this._openedBottomSheetRef.afterDismissed().subscribe(function () {\n            return ref.containerInstance.enter();\n          });\n\n          this._openedBottomSheetRef.dismiss();\n        } else {\n          // If no bottom sheet is in view, enter the new bottom sheet.\n          ref.containerInstance.enter();\n        }\n\n        this._openedBottomSheetRef = ref;\n        return ref;\n      }\n      /**\n       * Dismisses the currently-visible bottom sheet.\n       * @return {?}\n       */\n\n    }, {\n      key: \"dismiss\",\n      value: function dismiss() {\n        if (this._openedBottomSheetRef) {\n          this._openedBottomSheetRef.dismiss();\n        }\n      }\n      /**\n       * @return {?}\n       */\n\n    }, {\n      key: \"ngOnDestroy\",\n      value: function ngOnDestroy() {\n        if (this._bottomSheetRefAtThisLevel) {\n          this._bottomSheetRefAtThisLevel.dismiss();\n        }\n      }\n      /**\n       * Attaches the bottom sheet container component to the overlay.\n       * @param {?} overlayRef\n       * @param {?} config\n       * @return {?}\n       */\n\n    }, {\n      key: \"_attachContainer\",\n      value: function _attachContainer(overlayRef, config) {\n        /** @type {?} */\n        var userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n        /** @type {?} */\n\n        var injector = new PortalInjector(userInjector || this._injector, new WeakMap([[MatBottomSheetConfig, config]]));\n        /** @type {?} */\n\n        var containerPortal = new ComponentPortal(MatBottomSheetContainer, config.viewContainerRef, injector);\n        /** @type {?} */\n\n        var containerRef = overlayRef.attach(containerPortal);\n        return containerRef.instance;\n      }\n      /**\n       * Creates a new overlay and places it in the correct location.\n       * @param {?} config The user-specified bottom sheet config.\n       * @return {?}\n       */\n\n    }, {\n      key: \"_createOverlay\",\n      value: function _createOverlay(config) {\n        /** @type {?} */\n        var overlayConfig = new OverlayConfig({\n          direction: config.direction,\n          hasBackdrop: config.hasBackdrop,\n          disposeOnNavigation: config.closeOnNavigation,\n          maxWidth: '100%',\n          scrollStrategy: this._overlay.scrollStrategies.block(),\n          positionStrategy: this._overlay.position().global().centerHorizontally().bottom('0')\n        });\n\n        if (config.backdropClass) {\n          overlayConfig.backdropClass = config.backdropClass;\n        }\n\n        return this._overlay.create(overlayConfig);\n      }\n      /**\n       * Creates an injector to be used inside of a bottom sheet component.\n       * @template T\n       * @param {?} config Config that was used to create the bottom sheet.\n       * @param {?} bottomSheetRef Reference to the bottom sheet.\n       * @return {?}\n       */\n\n    }, {\n      key: \"_createInjector\",\n      value: function _createInjector(config, bottomSheetRef) {\n        /** @type {?} */\n        var userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n        /** @type {?} */\n\n        var injectionTokens = new WeakMap([[MatBottomSheetRef, bottomSheetRef], [MAT_BOTTOM_SHEET_DATA, config.data]]);\n\n        if (config.direction && (!userInjector || !userInjector.get(Directionality, null))) {\n          injectionTokens.set(Directionality, {\n            value: config.direction,\n            change: of()\n          });\n        }\n\n        return new PortalInjector(userInjector || this._injector, injectionTokens);\n      }\n    }]);\n\n    return MatBottomSheet;\n  }();\n\n  MatBottomSheet.ɵfac = function MatBottomSheet_Factory(t) {\n    return new (t || MatBottomSheet)(ɵngcc0.ɵɵinject(ɵngcc4.Overlay), ɵngcc0.ɵɵinject(ɵngcc0.Injector), ɵngcc0.ɵɵinject(MatBottomSheet, 12), ɵngcc0.ɵɵinject(ɵngcc5.Location, 8), ɵngcc0.ɵɵinject(MAT_BOTTOM_SHEET_DEFAULT_OPTIONS, 8));\n  };\n\n  MatBottomSheet.ɵprov =\n  /*@__PURE__*/\n\n  /*@__PURE__*/\n  ɵngcc0.ɵɵdefineInjectable({\n    token: MatBottomSheet,\n    factory: MatBottomSheet.ɵfac,\n    providedIn: MatBottomSheetModule\n  });\n  /** @nocollapse */\n\n  MatBottomSheet.ngInjectableDef = /*@__PURE__*/defineInjectable({\n    factory: function MatBottomSheet_Factory() {\n      return new MatBottomSheet(inject(Overlay), inject(INJECTOR), inject(MatBottomSheet, 12), inject(Location, 8), inject(MAT_BOTTOM_SHEET_DEFAULT_OPTIONS, 8));\n    },\n    token: MatBottomSheet,\n    providedIn: MatBottomSheetModule\n  });\n  return MatBottomSheet;\n}();\n/**\n * Applies default options to the bottom sheet config.\n * @param {?} defaults Object containing the default values to which to fall back.\n * @param {?=} config The configuration to which the defaults will be applied.\n * @return {?} The new configuration object with defaults applied.\n */\n\n\nfunction _applyConfigDefaults(defaults, config) {\n  return Object.assign({}, defaults, config);\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n\nexport { MatBottomSheetModule, MAT_BOTTOM_SHEET_DEFAULT_OPTIONS, MatBottomSheet, MAT_BOTTOM_SHEET_DATA, MatBottomSheetConfig, MatBottomSheetContainer, matBottomSheetAnimations, MatBottomSheetRef }; //# sourceMappingURL=bottom-sheet.js.map","map":null,"metadata":{},"sourceType":"module"}