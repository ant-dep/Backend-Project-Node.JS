{"ast":null,"code":"import _toConsumableArray from \"/Users/adepertat/Dropbox/ECOLES/Openclassroom/P6_de_Pertat_Antoine/AntoinedePertat_6_240521/frontend/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _createForOfIteratorHelper from \"/Users/adepertat/Dropbox/ECOLES/Openclassroom/P6_de_Pertat_Antoine/AntoinedePertat_6_240521/frontend/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper\";\nimport _createClass from \"/Users/adepertat/Dropbox/ECOLES/Openclassroom/P6_de_Pertat_Antoine/AntoinedePertat_6_240521/frontend/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"/Users/adepertat/Dropbox/ECOLES/Openclassroom/P6_de_Pertat_Antoine/AntoinedePertat_6_240521/frontend/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"/Users/adepertat/Dropbox/ECOLES/Openclassroom/P6_de_Pertat_Antoine/AntoinedePertat_6_240521/frontend/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/adepertat/Dropbox/ECOLES/Openclassroom/P6_de_Pertat_Antoine/AntoinedePertat_6_240521/frontend/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _classCallCheck from \"/Users/adepertat/Dropbox/ECOLES/Openclassroom/P6_de_Pertat_Antoine/AntoinedePertat_6_240521/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { BACKSPACE, DELETE, SPACE, END, HOME, ENTER } from '@angular/cdk/keycodes';\nimport { Platform } from '@angular/cdk/platform';\nimport { ContentChild, Directive, ElementRef, EventEmitter, forwardRef, Inject, Input, NgZone, Optional, Output, InjectionToken, ChangeDetectionStrategy, ChangeDetectorRef, Component, ContentChildren, Self, ViewEncapsulation, NgModule } from '@angular/core';\nimport { MAT_RIPPLE_GLOBAL_OPTIONS, mixinColor, mixinDisabled, mixinDisableRipple, RippleRenderer, ErrorStateMatcher, mixinErrorState } from '@angular/material/core';\nimport { Subject, merge } from 'rxjs';\nimport { take, startWith, takeUntil } from 'rxjs/operators';\nimport { FocusKeyManager } from '@angular/cdk/a11y';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { SelectionModel } from '@angular/cdk/collections';\nimport { FormGroupDirective, NgControl, NgForm } from '@angular/forms';\nimport { MatFormFieldControl } from '@angular/material/form-field';\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * Event object emitted by MatChip when selected or deselected.\n */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/platform';\nimport * as ɵngcc2 from '@angular/cdk/bidi';\nimport * as ɵngcc3 from '@angular/forms';\nimport * as ɵngcc4 from '@angular/material/core';\nvar _c0 = [\"*\"];\n\nvar MatChipSelectionChange =\n/**\n * @param {?} source\n * @param {?} selected\n * @param {?=} isUserInput\n */\nfunction MatChipSelectionChange(source, selected) {\n  var isUserInput = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\n  _classCallCheck(this, MatChipSelectionChange);\n\n  this.source = source;\n  this.selected = selected;\n  this.isUserInput = isUserInput;\n};\n/**\n * \\@docs-private\n */\n\n\nvar MatChipBase =\n/**\n * @param {?} _elementRef\n */\nfunction MatChipBase(_elementRef) {\n  _classCallCheck(this, MatChipBase);\n\n  this._elementRef = _elementRef;\n};\n/** @type {?} */\n\n\nvar _MatChipMixinBase = /*@__PURE__*/mixinColor( /*@__PURE__*/mixinDisableRipple( /*@__PURE__*/mixinDisabled(MatChipBase)), 'primary');\n/** @type {?} */\n\n\nvar CHIP_ATTRIBUTE_NAMES = ['mat-basic-chip'];\n\nvar MatChipAvatar = /*@__PURE__*/function () {\n  var MatChipAvatar = function MatChipAvatar() {\n    _classCallCheck(this, MatChipAvatar);\n  };\n\n  MatChipAvatar.ɵfac = function MatChipAvatar_Factory(t) {\n    return new (t || MatChipAvatar)();\n  };\n\n  MatChipAvatar.ɵdir =\n  /*@__PURE__*/\n\n  /*@__PURE__*/\n  ɵngcc0.ɵɵdefineDirective({\n    type: MatChipAvatar,\n    selectors: [[\"mat-chip-avatar\"], [\"\", \"matChipAvatar\", \"\"]],\n    hostAttrs: [1, \"mat-chip-avatar\"]\n  });\n  return MatChipAvatar;\n}();\n\nvar MatChipTrailingIcon = /*@__PURE__*/function () {\n  var MatChipTrailingIcon = function MatChipTrailingIcon() {\n    _classCallCheck(this, MatChipTrailingIcon);\n  };\n\n  MatChipTrailingIcon.ɵfac = function MatChipTrailingIcon_Factory(t) {\n    return new (t || MatChipTrailingIcon)();\n  };\n\n  MatChipTrailingIcon.ɵdir =\n  /*@__PURE__*/\n\n  /*@__PURE__*/\n  ɵngcc0.ɵɵdefineDirective({\n    type: MatChipTrailingIcon,\n    selectors: [[\"mat-chip-trailing-icon\"], [\"\", \"matChipTrailingIcon\", \"\"]],\n    hostAttrs: [1, \"mat-chip-trailing-icon\"]\n  });\n  return MatChipTrailingIcon;\n}();\n\nvar MatChip = /*@__PURE__*/function () {\n  var MatChip = /*#__PURE__*/function (_MatChipMixinBase2) {\n    _inherits(MatChip, _MatChipMixinBase2);\n\n    var _super = _createSuper(MatChip);\n\n    /**\n     * @param {?} _elementRef\n     * @param {?} _ngZone\n     * @param {?} platform\n     * @param {?} globalOptions\n     */\n    function MatChip(_elementRef, _ngZone, platform, globalOptions) {\n      var _this;\n\n      _classCallCheck(this, MatChip);\n\n      _this = _super.call(this, _elementRef);\n      _this._elementRef = _elementRef;\n      _this._ngZone = _ngZone;\n      /**\n       * Whether the ripples are globally disabled through the RippleGlobalOptions\n       */\n\n      _this._ripplesGloballyDisabled = false;\n      /**\n       * Ripple configuration for ripples that are launched on pointer down.\n       * \\@docs-private\n       */\n\n      _this.rippleConfig = {};\n      /**\n       * Whether the chip has focus.\n       */\n\n      _this._hasFocus = false;\n      /**\n       * Whether the chip list is selectable\n       */\n\n      _this.chipListSelectable = true;\n      _this._selected = false;\n      _this._selectable = true;\n      _this._removable = true;\n      /**\n       * Emits when the chip is focused.\n       */\n\n      _this._onFocus = new Subject();\n      /**\n       * Emits when the chip is blured.\n       */\n\n      _this._onBlur = new Subject();\n      /**\n       * Emitted when the chip is selected or deselected.\n       */\n\n      _this.selectionChange = new EventEmitter();\n      /**\n       * Emitted when the chip is destroyed.\n       */\n\n      _this.destroyed = new EventEmitter();\n      /**\n       * Emitted when a chip is to be removed.\n       */\n\n      _this.removed = new EventEmitter();\n\n      _this._addHostClassName();\n\n      _this._chipRipple = new RippleRenderer(_assertThisInitialized(_this), _ngZone, _elementRef, platform);\n\n      _this._chipRipple.setupTriggerEvents(_elementRef.nativeElement);\n\n      if (globalOptions) {\n        // TODO(paul): Do not copy each option manually. Allow dynamic global option changes: #9729\n        _this._ripplesGloballyDisabled = !!globalOptions.disabled;\n        _this.rippleConfig = {\n          animation: globalOptions.animation,\n          terminateOnPointerUp: globalOptions.terminateOnPointerUp\n        };\n      }\n\n      return _this;\n    }\n    /**\n     * Whether ripples are disabled on interaction\n     * \\@docs-private\n     * @return {?}\n     */\n\n\n    _createClass(MatChip, [{\n      key: \"rippleDisabled\",\n      get: function get() {\n        return this.disabled || this.disableRipple || this._ripplesGloballyDisabled;\n      }\n      /**\n       * Whether the chip is selected.\n       * @return {?}\n       */\n\n    }, {\n      key: \"selected\",\n      get: function get() {\n        return this._selected;\n      }\n      /**\n       * @param {?} value\n       * @return {?}\n       */\n      ,\n      set: function set(value) {\n        /** @type {?} */\n        var coercedValue = coerceBooleanProperty(value);\n\n        if (coercedValue !== this._selected) {\n          this._selected = coercedValue;\n\n          this._dispatchSelectionChange();\n        }\n      }\n      /**\n       * The value of the chip. Defaults to the content inside `<mat-chip>` tags.\n       * @return {?}\n       */\n\n    }, {\n      key: \"value\",\n      get: function get() {\n        return this._value != undefined ? this._value : this._elementRef.nativeElement.textContent;\n      }\n      /**\n       * @param {?} value\n       * @return {?}\n       */\n      ,\n      set: function set(value) {\n        this._value = value;\n      }\n      /**\n       * Whether or not the chip is selectable. When a chip is not selectable,\n       * changes to it's selected state are always ignored. By default a chip is\n       * selectable, and it becomes non-selectable if it's parent chip list is\n       * not selectable.\n       * @return {?}\n       */\n\n    }, {\n      key: \"selectable\",\n      get: function get() {\n        return this._selectable && this.chipListSelectable;\n      }\n      /**\n       * @param {?} value\n       * @return {?}\n       */\n      ,\n      set: function set(value) {\n        this._selectable = coerceBooleanProperty(value);\n      }\n      /**\n       * Determines whether or not the chip displays the remove styling and emits (removed) events.\n       * @return {?}\n       */\n\n    }, {\n      key: \"removable\",\n      get: function get() {\n        return this._removable;\n      }\n      /**\n       * @param {?} value\n       * @return {?}\n       */\n      ,\n      set: function set(value) {\n        this._removable = coerceBooleanProperty(value);\n      }\n      /**\n       * The ARIA selected applied to the chip.\n       * @return {?}\n       */\n\n    }, {\n      key: \"ariaSelected\",\n      get: function get() {\n        return this.selectable ? this.selected.toString() : null;\n      }\n      /**\n       * @return {?}\n       */\n\n    }, {\n      key: \"_addHostClassName\",\n      value: function _addHostClassName() {\n        // Add class for the different chips\n        var _iterator = _createForOfIteratorHelper(CHIP_ATTRIBUTE_NAMES),\n            _step;\n\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var attr = _step.value;\n\n            if (this._elementRef.nativeElement.hasAttribute(attr) || this._elementRef.nativeElement.tagName.toLowerCase() === attr) {\n              /** @type {?} */\n              this._elementRef.nativeElement.classList.add(attr);\n\n              return;\n            }\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n\n        /** @type {?} */\n        this._elementRef.nativeElement.classList.add('mat-standard-chip');\n      }\n      /**\n       * @return {?}\n       */\n\n    }, {\n      key: \"ngOnDestroy\",\n      value: function ngOnDestroy() {\n        this.destroyed.emit({\n          chip: this\n        });\n\n        this._chipRipple._removeTriggerEvents();\n      }\n      /**\n       * Selects the chip.\n       * @return {?}\n       */\n\n    }, {\n      key: \"select\",\n      value: function select() {\n        if (!this._selected) {\n          this._selected = true;\n\n          this._dispatchSelectionChange();\n        }\n      }\n      /**\n       * Deselects the chip.\n       * @return {?}\n       */\n\n    }, {\n      key: \"deselect\",\n      value: function deselect() {\n        if (this._selected) {\n          this._selected = false;\n\n          this._dispatchSelectionChange();\n        }\n      }\n      /**\n       * Select this chip and emit selected event\n       * @return {?}\n       */\n\n    }, {\n      key: \"selectViaInteraction\",\n      value: function selectViaInteraction() {\n        if (!this._selected) {\n          this._selected = true;\n\n          this._dispatchSelectionChange(true);\n        }\n      }\n      /**\n       * Toggles the current selected state of this chip.\n       * @param {?=} isUserInput\n       * @return {?}\n       */\n\n    }, {\n      key: \"toggleSelected\",\n      value: function toggleSelected() {\n        var isUserInput = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n        this._selected = !this.selected;\n\n        this._dispatchSelectionChange(isUserInput);\n\n        return this.selected;\n      }\n      /**\n       * Allows for programmatic focusing of the chip.\n       * @return {?}\n       */\n\n    }, {\n      key: \"focus\",\n      value: function focus() {\n        if (!this._hasFocus) {\n          this._elementRef.nativeElement.focus();\n\n          this._onFocus.next({\n            chip: this\n          });\n        }\n\n        this._hasFocus = true;\n      }\n      /**\n       * Allows for programmatic removal of the chip. Called by the MatChipList when the DELETE or\n       * BACKSPACE keys are pressed.\n       *\n       * Informs any listeners of the removal request. Does not remove the chip from the DOM.\n       * @return {?}\n       */\n\n    }, {\n      key: \"remove\",\n      value: function remove() {\n        if (this.removable) {\n          this.removed.emit({\n            chip: this\n          });\n        }\n      }\n      /**\n       * Handles click events on the chip.\n       * @param {?} event\n       * @return {?}\n       */\n\n    }, {\n      key: \"_handleClick\",\n      value: function _handleClick(event) {\n        if (this.disabled) {\n          event.preventDefault();\n        } else {\n          event.stopPropagation();\n        }\n      }\n      /**\n       * Handle custom key presses.\n       * @param {?} event\n       * @return {?}\n       */\n\n    }, {\n      key: \"_handleKeydown\",\n      value: function _handleKeydown(event) {\n        if (this.disabled) {\n          return;\n        }\n\n        switch (event.keyCode) {\n          case DELETE:\n          case BACKSPACE:\n            // If we are removable, remove the focused chip\n            this.remove(); // Always prevent so page navigation does not occur\n\n            event.preventDefault();\n            break;\n\n          case SPACE:\n            // If we are selectable, toggle the focused chip\n            if (this.selectable) {\n              this.toggleSelected(true);\n            } // Always prevent space from scrolling the page since the list has focus\n\n\n            event.preventDefault();\n            break;\n        }\n      }\n      /**\n       * @return {?}\n       */\n\n    }, {\n      key: \"_blur\",\n      value: function _blur() {\n        var _this2 = this;\n\n        // When animations are enabled, Angular may end up removing the chip from the DOM a little\n        // earlier than usual, causing it to be blurred and throwing off the logic in the chip list\n        // that moves focus not the next item. To work around the issue, we defer marking the chip\n        // as not focused until the next time the zone stabilizes.\n        this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(function () {\n          _this2._ngZone.run(function () {\n            _this2._hasFocus = false;\n\n            _this2._onBlur.next({\n              chip: _this2\n            });\n          });\n        });\n      }\n      /**\n       * @param {?=} isUserInput\n       * @return {?}\n       */\n\n    }, {\n      key: \"_dispatchSelectionChange\",\n      value: function _dispatchSelectionChange() {\n        var isUserInput = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n        this.selectionChange.emit({\n          source: this,\n          isUserInput: isUserInput,\n          selected: this._selected\n        });\n      }\n    }]);\n\n    return MatChip;\n  }(_MatChipMixinBase);\n\n  MatChip.ɵfac = function MatChip_Factory(t) {\n    return new (t || MatChip)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.Platform), ɵngcc0.ɵɵdirectiveInject(MAT_RIPPLE_GLOBAL_OPTIONS, 8));\n  };\n\n  MatChip.ɵdir =\n  /*@__PURE__*/\n\n  /*@__PURE__*/\n  ɵngcc0.ɵɵdefineDirective({\n    type: MatChip,\n    selectors: [[\"mat-basic-chip\"], [\"\", \"mat-basic-chip\", \"\"], [\"mat-chip\"], [\"\", \"mat-chip\", \"\"]],\n    contentQueries: function MatChip_ContentQueries(rf, ctx, dirIndex) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MatChipAvatar, 5);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MatChipTrailingIcon, 5);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MatChipRemove, 5);\n      }\n\n      if (rf & 2) {\n        var _t;\n\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.avatar = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.trailingIcon = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.removeIcon = _t.first);\n      }\n    },\n    hostAttrs: [\"role\", \"option\", 1, \"mat-chip\"],\n    hostVars: 12,\n    hostBindings: function MatChip_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"click\", function MatChip_click_HostBindingHandler($event) {\n          return ctx._handleClick($event);\n        })(\"keydown\", function MatChip_keydown_HostBindingHandler($event) {\n          return ctx._handleKeydown($event);\n        })(\"focus\", function MatChip_focus_HostBindingHandler() {\n          return ctx.focus();\n        })(\"blur\", function MatChip_blur_HostBindingHandler() {\n          return ctx._blur();\n        });\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"tabindex\", ctx.disabled ? null : -1)(\"disabled\", ctx.disabled || null)(\"aria-disabled\", ctx.disabled.toString())(\"aria-selected\", ctx.ariaSelected);\n        ɵngcc0.ɵɵclassProp(\"mat-chip-selected\", ctx.selected)(\"mat-chip-with-avatar\", ctx.avatar)(\"mat-chip-with-trailing-icon\", ctx.trailingIcon || ctx.removeIcon)(\"mat-chip-disabled\", ctx.disabled);\n      }\n    },\n    inputs: {\n      color: \"color\",\n      disabled: \"disabled\",\n      disableRipple: \"disableRipple\",\n      selected: \"selected\",\n      value: \"value\",\n      selectable: \"selectable\",\n      removable: \"removable\"\n    },\n    outputs: {\n      selectionChange: \"selectionChange\",\n      destroyed: \"destroyed\",\n      removed: \"removed\"\n    },\n    exportAs: [\"matChip\"],\n    features: [ɵngcc0.ɵɵInheritDefinitionFeature]\n  });\n  return MatChip;\n}();\n\nvar MatChipRemove = /*@__PURE__*/function () {\n  var MatChipRemove = /*#__PURE__*/function () {\n    /**\n     * @param {?} _parentChip\n     */\n    function MatChipRemove(_parentChip) {\n      _classCallCheck(this, MatChipRemove);\n\n      this._parentChip = _parentChip;\n    }\n    /**\n     * Calls the parent chip's public `remove()` method if applicable.\n     * @param {?} event\n     * @return {?}\n     */\n\n\n    _createClass(MatChipRemove, [{\n      key: \"_handleClick\",\n      value: function _handleClick(event) {\n        if (this._parentChip.removable) {\n          this._parentChip.remove();\n        } // We need to stop event propagation because otherwise the event will bubble up to the\n        // form field and cause the `onContainerClick` method to be invoked. This method would then\n        // reset the focused chip that has been focused after chip removal. Usually the parent\n        // the parent click listener of the `MatChip` would prevent propagation, but it can happen\n        // that the chip is being removed before the event bubbles up.\n\n\n        event.stopPropagation();\n      }\n    }]);\n\n    return MatChipRemove;\n  }();\n\n  MatChipRemove.ɵfac = function MatChipRemove_Factory(t) {\n    return new (t || MatChipRemove)(ɵngcc0.ɵɵdirectiveInject(MatChip));\n  };\n\n  MatChipRemove.ɵdir =\n  /*@__PURE__*/\n\n  /*@__PURE__*/\n  ɵngcc0.ɵɵdefineDirective({\n    type: MatChipRemove,\n    selectors: [[\"\", \"matChipRemove\", \"\"]],\n    hostAttrs: [1, \"mat-chip-remove\", \"mat-chip-trailing-icon\"],\n    hostBindings: function MatChipRemove_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"click\", function MatChipRemove_click_HostBindingHandler($event) {\n          return ctx._handleClick($event);\n        });\n      }\n    }\n  });\n  return MatChipRemove;\n}();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/** *\n * Injection token to be used to override the default options for the chips module.\n  @type {?} */\n\n\nvar MAT_CHIPS_DEFAULT_OPTIONS = /*@__PURE__*/new InjectionToken('mat-chips-default-options');\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * \\@docs-private\n */\n\nvar MatChipListBase =\n/**\n * @param {?} _defaultErrorStateMatcher\n * @param {?} _parentForm\n * @param {?} _parentFormGroup\n * @param {?} ngControl\n */\nfunction MatChipListBase(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl) {\n  _classCallCheck(this, MatChipListBase);\n\n  this._defaultErrorStateMatcher = _defaultErrorStateMatcher;\n  this._parentForm = _parentForm;\n  this._parentFormGroup = _parentFormGroup;\n  this.ngControl = ngControl;\n};\n/** @type {?} */\n\n\nvar _MatChipListMixinBase = /*@__PURE__*/mixinErrorState(MatChipListBase);\n/** @type {?} */\n\n\nvar nextUniqueId = 0;\n/**\n * Change event object that is emitted when the chip list value has changed.\n */\n\nvar MatChipListChange =\n/**\n * @param {?} source\n * @param {?} value\n */\nfunction MatChipListChange(source, value) {\n  _classCallCheck(this, MatChipListChange);\n\n  this.source = source;\n  this.value = value;\n};\n\nvar MatChipList = /*@__PURE__*/function () {\n  var MatChipList = /*#__PURE__*/function (_MatChipListMixinBase2) {\n    _inherits(MatChipList, _MatChipListMixinBase2);\n\n    var _super2 = _createSuper(MatChipList);\n\n    /**\n     * @param {?} _elementRef\n     * @param {?} _changeDetectorRef\n     * @param {?} _dir\n     * @param {?} _parentForm\n     * @param {?} _parentFormGroup\n     * @param {?} _defaultErrorStateMatcher\n     * @param {?} ngControl\n     */\n    function MatChipList(_elementRef, _changeDetectorRef, _dir, _parentForm, _parentFormGroup, _defaultErrorStateMatcher,\n    /** @docs-private */\n    ngControl) {\n      var _this3;\n\n      _classCallCheck(this, MatChipList);\n\n      _this3 = _super2.call(this, _defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n      _this3._elementRef = _elementRef;\n      _this3._changeDetectorRef = _changeDetectorRef;\n      _this3._dir = _dir;\n      _this3.ngControl = ngControl;\n      /**\n       * Implemented as part of MatFormFieldControl.\n       * \\@docs-private\n       */\n\n      _this3.controlType = 'mat-chip-list';\n      /**\n       * When a chip is destroyed, we store the index of the destroyed chip until the chips\n       * query list notifies about the update. This is necessary because we cannot determine an\n       * appropriate chip that should receive focus until the array of chips updated completely.\n       */\n\n      _this3._lastDestroyedChipIndex = null;\n      /**\n       * Subject that emits when the component has been destroyed.\n       */\n\n      _this3._destroyed = new Subject();\n      /**\n       * Uid of the chip list\n       */\n\n      _this3._uid = \"mat-chip-list-\".concat(nextUniqueId++);\n      /**\n       * Tab index for the chip list.\n       */\n\n      _this3._tabIndex = 0;\n      /**\n       * User defined tab index.\n       * When it is not null, use user defined tab index. Otherwise use _tabIndex\n       */\n\n      _this3._userTabIndex = null;\n      /**\n       * Function when touched\n       */\n\n      _this3._onTouched = function () {};\n      /**\n       * Function when changed\n       */\n\n\n      _this3._onChange = function () {};\n\n      _this3._multiple = false;\n\n      _this3._compareWith = function (o1, o2) {\n        return o1 === o2;\n      };\n\n      _this3._required = false;\n      _this3._disabled = false;\n      /**\n       * Orientation of the chip list.\n       */\n\n      _this3.ariaOrientation = 'horizontal';\n      _this3._selectable = true;\n      /**\n       * Event emitted when the selected chip list value has been changed by the user.\n       */\n\n      _this3.change = new EventEmitter();\n      /**\n       * Event that emits whenever the raw value of the chip-list changes. This is here primarily\n       * to facilitate the two-way binding for the `value` input.\n       * \\@docs-private\n       */\n\n      _this3.valueChange = new EventEmitter();\n\n      if (_this3.ngControl) {\n        _this3.ngControl.valueAccessor = _assertThisInitialized(_this3);\n      }\n\n      return _this3;\n    }\n    /**\n     * The array of selected chips inside chip list.\n     * @return {?}\n     */\n\n\n    _createClass(MatChipList, [{\n      key: \"selected\",\n      get: function get() {\n        return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n      }\n      /**\n       * The ARIA role applied to the chip list.\n       * @return {?}\n       */\n\n    }, {\n      key: \"role\",\n      get: function get() {\n        return this.empty ? null : 'listbox';\n      }\n      /**\n       * Whether the user should be allowed to select multiple chips.\n       * @return {?}\n       */\n\n    }, {\n      key: \"multiple\",\n      get: function get() {\n        return this._multiple;\n      }\n      /**\n       * @param {?} value\n       * @return {?}\n       */\n      ,\n      set: function set(value) {\n        this._multiple = coerceBooleanProperty(value);\n      }\n      /**\n       * A function to compare the option values with the selected values. The first argument\n       * is a value from an option. The second is a value from the selection. A boolean\n       * should be returned.\n       * @return {?}\n       */\n\n    }, {\n      key: \"compareWith\",\n      get: function get() {\n        return this._compareWith;\n      }\n      /**\n       * @param {?} fn\n       * @return {?}\n       */\n      ,\n      set: function set(fn) {\n        this._compareWith = fn;\n\n        if (this._selectionModel) {\n          // A different comparator means the selection could change.\n          this._initializeSelection();\n        }\n      }\n      /**\n       * Implemented as part of MatFormFieldControl.\n       * \\@docs-private\n       * @return {?}\n       */\n\n    }, {\n      key: \"value\",\n      get: function get() {\n        return this._value;\n      }\n      /**\n       * @param {?} value\n       * @return {?}\n       */\n      ,\n      set: function set(value) {\n        this.writeValue(value);\n        this._value = value;\n      }\n      /**\n       * Implemented as part of MatFormFieldControl.\n       * \\@docs-private\n       * @return {?}\n       */\n\n    }, {\n      key: \"id\",\n      get: function get() {\n        return this._chipInput ? this._chipInput.id : this._uid;\n      }\n      /**\n       * Implemented as part of MatFormFieldControl.\n       * \\@docs-private\n       * @return {?}\n       */\n\n    }, {\n      key: \"required\",\n      get: function get() {\n        return this._required;\n      }\n      /**\n       * @param {?} value\n       * @return {?}\n       */\n      ,\n      set: function set(value) {\n        this._required = coerceBooleanProperty(value);\n        this.stateChanges.next();\n      }\n      /**\n       * Implemented as part of MatFormFieldControl.\n       * \\@docs-private\n       * @return {?}\n       */\n\n    }, {\n      key: \"placeholder\",\n      get: function get() {\n        return this._chipInput ? this._chipInput.placeholder : this._placeholder;\n      }\n      /**\n       * @param {?} value\n       * @return {?}\n       */\n      ,\n      set: function set(value) {\n        this._placeholder = value;\n        this.stateChanges.next();\n      }\n      /**\n       * Whether any chips or the matChipInput inside of this chip-list has focus.\n       * @return {?}\n       */\n\n    }, {\n      key: \"focused\",\n      get: function get() {\n        return this._chipInput && this._chipInput.focused || this._hasFocusedChip();\n      }\n      /**\n       * Implemented as part of MatFormFieldControl.\n       * \\@docs-private\n       * @return {?}\n       */\n\n    }, {\n      key: \"empty\",\n      get: function get() {\n        return (!this._chipInput || this._chipInput.empty) && this.chips.length === 0;\n      }\n      /**\n       * Implemented as part of MatFormFieldControl.\n       * \\@docs-private\n       * @return {?}\n       */\n\n    }, {\n      key: \"shouldLabelFloat\",\n      get: function get() {\n        return !this.empty || this.focused;\n      }\n      /**\n       * Implemented as part of MatFormFieldControl.\n       * \\@docs-private\n       * @return {?}\n       */\n\n    }, {\n      key: \"disabled\",\n      get: function get() {\n        return this.ngControl ? !!this.ngControl.disabled : this._disabled;\n      }\n      /**\n       * @param {?} value\n       * @return {?}\n       */\n      ,\n      set: function set(value) {\n        var _this4 = this;\n\n        this._disabled = coerceBooleanProperty(value);\n\n        if (this.chips) {\n          this.chips.forEach(function (chip) {\n            return chip.disabled = _this4._disabled;\n          });\n        }\n      }\n      /**\n       * Whether or not this chip list is selectable. When a chip list is not selectable,\n       * the selected states for all the chips inside the chip list are always ignored.\n       * @return {?}\n       */\n\n    }, {\n      key: \"selectable\",\n      get: function get() {\n        return this._selectable;\n      }\n      /**\n       * @param {?} value\n       * @return {?}\n       */\n      ,\n      set: function set(value) {\n        var _this5 = this;\n\n        this._selectable = coerceBooleanProperty(value);\n\n        if (this.chips) {\n          this.chips.forEach(function (chip) {\n            return chip.chipListSelectable = _this5._selectable;\n          });\n        }\n      }\n      /**\n       * @param {?} value\n       * @return {?}\n       */\n\n    }, {\n      key: \"tabIndex\",\n      set: function set(value) {\n        this._userTabIndex = value;\n        this._tabIndex = value;\n      }\n      /**\n       * Combined stream of all of the child chips' selection change events.\n       * @return {?}\n       */\n\n    }, {\n      key: \"chipSelectionChanges\",\n      get: function get() {\n        return merge.apply(void 0, _toConsumableArray(this.chips.map(function (chip) {\n          return chip.selectionChange;\n        })));\n      }\n      /**\n       * Combined stream of all of the child chips' focus change events.\n       * @return {?}\n       */\n\n    }, {\n      key: \"chipFocusChanges\",\n      get: function get() {\n        return merge.apply(void 0, _toConsumableArray(this.chips.map(function (chip) {\n          return chip._onFocus;\n        })));\n      }\n      /**\n       * Combined stream of all of the child chips' blur change events.\n       * @return {?}\n       */\n\n    }, {\n      key: \"chipBlurChanges\",\n      get: function get() {\n        return merge.apply(void 0, _toConsumableArray(this.chips.map(function (chip) {\n          return chip._onBlur;\n        })));\n      }\n      /**\n       * Combined stream of all of the child chips' remove change events.\n       * @return {?}\n       */\n\n    }, {\n      key: \"chipRemoveChanges\",\n      get: function get() {\n        return merge.apply(void 0, _toConsumableArray(this.chips.map(function (chip) {\n          return chip.destroyed;\n        })));\n      }\n      /**\n       * @return {?}\n       */\n\n    }, {\n      key: \"ngAfterContentInit\",\n      value: function ngAfterContentInit() {\n        var _this6 = this;\n\n        this._keyManager = new FocusKeyManager(this.chips).withWrap().withVerticalOrientation().withHorizontalOrientation(this._dir ? this._dir.value : 'ltr'); // Prevents the chip list from capturing focus and redirecting\n        // it back to the first chip when the user tabs out.\n\n        this._keyManager.tabOut.pipe(takeUntil(this._destroyed)).subscribe(function () {\n          _this6._tabIndex = -1;\n          setTimeout(function () {\n            return _this6._tabIndex = _this6._userTabIndex || 0;\n          });\n        }); // When the list changes, re-subscribe\n\n\n        this.chips.changes.pipe(startWith(null), takeUntil(this._destroyed)).subscribe(function () {\n          _this6._resetChips(); // Reset chips selected/deselected status\n\n\n          _this6._initializeSelection(); // Check to see if we need to update our tab index\n\n\n          _this6._updateTabIndex(); // Check to see if we have a destroyed chip and need to refocus\n\n\n          _this6._updateFocusForDestroyedChips();\n\n          _this6.stateChanges.next();\n        });\n      }\n      /**\n       * @return {?}\n       */\n\n    }, {\n      key: \"ngOnInit\",\n      value: function ngOnInit() {\n        this._selectionModel = new SelectionModel(this.multiple, undefined, false);\n        this.stateChanges.next();\n      }\n      /**\n       * @return {?}\n       */\n\n    }, {\n      key: \"ngDoCheck\",\n      value: function ngDoCheck() {\n        if (this.ngControl) {\n          // We need to re-evaluate this on every change detection cycle, because there are some\n          // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n          // that whatever logic is in here has to be super lean or we risk destroying the performance.\n          this.updateErrorState();\n        }\n      }\n      /**\n       * @return {?}\n       */\n\n    }, {\n      key: \"ngOnDestroy\",\n      value: function ngOnDestroy() {\n        this._destroyed.next();\n\n        this._destroyed.complete();\n\n        this.stateChanges.complete();\n\n        this._dropSubscriptions();\n      }\n      /**\n       * Associates an HTML input element with this chip list.\n       * @param {?} inputElement\n       * @return {?}\n       */\n\n    }, {\n      key: \"registerInput\",\n      value: function registerInput(inputElement) {\n        this._chipInput = inputElement;\n      }\n      /**\n       * Implemented as part of MatFormFieldControl.\n       * \\@docs-private\n       * @param {?} ids\n       * @return {?}\n       */\n\n    }, {\n      key: \"setDescribedByIds\",\n      value: function setDescribedByIds(ids) {\n        this._ariaDescribedby = ids.join(' ');\n      }\n      /**\n       * @param {?} value\n       * @return {?}\n       */\n\n    }, {\n      key: \"writeValue\",\n      value: function writeValue(value) {\n        if (this.chips) {\n          this._setSelectionByValue(value, false);\n        }\n      }\n      /**\n       * @param {?} fn\n       * @return {?}\n       */\n\n    }, {\n      key: \"registerOnChange\",\n      value: function registerOnChange(fn) {\n        this._onChange = fn;\n      }\n      /**\n       * @param {?} fn\n       * @return {?}\n       */\n\n    }, {\n      key: \"registerOnTouched\",\n      value: function registerOnTouched(fn) {\n        this._onTouched = fn;\n      }\n      /**\n       * @param {?} isDisabled\n       * @return {?}\n       */\n\n    }, {\n      key: \"setDisabledState\",\n      value: function setDisabledState(isDisabled) {\n        this.disabled = isDisabled;\n        this.stateChanges.next();\n      }\n      /**\n       * Implemented as part of MatFormFieldControl.\n       * \\@docs-private\n       * @param {?} event\n       * @return {?}\n       */\n\n    }, {\n      key: \"onContainerClick\",\n      value: function onContainerClick(event) {\n        if (!this._originatesFromChip(event)) {\n          this.focus();\n        }\n      }\n      /**\n       * Focuses the the first non-disabled chip in this chip list, or the associated input when there\n       * are no eligible chips.\n       * @return {?}\n       */\n\n    }, {\n      key: \"focus\",\n      value: function focus() {\n        if (this.disabled) {\n          return;\n        } // TODO: ARIA says this should focus the first `selected` chip if any are selected.\n        // Focus on first element if there's no chipInput inside chip-list\n\n\n        if (this._chipInput && this._chipInput.focused) {// do nothing\n        } else if (this.chips.length > 0) {\n          this._keyManager.setFirstItemActive();\n\n          this.stateChanges.next();\n        } else {\n          this._focusInput();\n\n          this.stateChanges.next();\n        }\n      }\n      /**\n       * Attempt to focus an input if we have one.\n       * @return {?}\n       */\n\n    }, {\n      key: \"_focusInput\",\n      value: function _focusInput() {\n        if (this._chipInput) {\n          this._chipInput.focus();\n        }\n      }\n      /**\n       * Pass events to the keyboard manager. Available here for tests.\n       * @param {?} event\n       * @return {?}\n       */\n\n    }, {\n      key: \"_keydown\",\n      value: function _keydown(event) {\n        /** @type {?} */\n        var target =\n        /** @type {?} */\n        event.target; // If they are on an empty input and hit backspace, focus the last chip\n\n        if (event.keyCode === BACKSPACE && this._isInputEmpty(target)) {\n          this._keyManager.setLastItemActive();\n\n          event.preventDefault();\n        } else if (target && target.classList.contains('mat-chip')) {\n          if (event.keyCode === HOME) {\n            this._keyManager.setFirstItemActive();\n\n            event.preventDefault();\n          } else if (event.keyCode === END) {\n            this._keyManager.setLastItemActive();\n\n            event.preventDefault();\n          } else {\n            this._keyManager.onKeydown(event);\n          }\n\n          this.stateChanges.next();\n        }\n      }\n      /**\n       * Check the tab index as you should not be allowed to focus an empty list.\n       * @return {?}\n       */\n\n    }, {\n      key: \"_updateTabIndex\",\n      value: function _updateTabIndex() {\n        // If we have 0 chips, we should not allow keyboard focus\n        this._tabIndex = this._userTabIndex || (this.chips.length === 0 ? -1 : 0);\n      }\n      /**\n       * If the amount of chips changed, we need to update the\n       * key manager state and focus the next closest chip.\n       * @return {?}\n       */\n\n    }, {\n      key: \"_updateFocusForDestroyedChips\",\n      value: function _updateFocusForDestroyedChips() {\n        if (this._lastDestroyedChipIndex != null && this.chips.length) {\n          /** @type {?} */\n          var newChipIndex = Math.min(this._lastDestroyedChipIndex, this.chips.length - 1);\n\n          this._keyManager.setActiveItem(newChipIndex);\n        }\n\n        this._lastDestroyedChipIndex = null;\n      }\n      /**\n       * Utility to ensure all indexes are valid.\n       *\n       * @param {?} index The index to be checked.\n       * @return {?} True if the index is valid for our list of chips.\n       */\n\n    }, {\n      key: \"_isValidIndex\",\n      value: function _isValidIndex(index) {\n        return index >= 0 && index < this.chips.length;\n      }\n      /**\n       * @param {?} element\n       * @return {?}\n       */\n\n    }, {\n      key: \"_isInputEmpty\",\n      value: function _isInputEmpty(element) {\n        if (element && element.nodeName.toLowerCase() === 'input') {\n          /** @type {?} */\n          var input =\n          /** @type {?} */\n          element;\n          return !input.value;\n        }\n\n        return false;\n      }\n      /**\n       * @param {?} value\n       * @param {?=} isUserInput\n       * @return {?}\n       */\n\n    }, {\n      key: \"_setSelectionByValue\",\n      value: function _setSelectionByValue(value) {\n        var _this7 = this;\n\n        var isUserInput = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n\n        this._clearSelection();\n\n        this.chips.forEach(function (chip) {\n          return chip.deselect();\n        });\n\n        if (Array.isArray(value)) {\n          value.forEach(function (currentValue) {\n            return _this7._selectValue(currentValue, isUserInput);\n          });\n\n          this._sortValues();\n        } else {\n          /** @type {?} */\n          var correspondingChip = this._selectValue(value, isUserInput); // Shift focus to the active item. Note that we shouldn't do this in multiple\n          // mode, because we don't know what chip the user interacted with last.\n\n\n          if (correspondingChip) {\n            if (isUserInput) {\n              this._keyManager.setActiveItem(correspondingChip);\n            }\n          }\n        }\n      }\n      /**\n       * Finds and selects the chip based on its value.\n       * @param {?} value\n       * @param {?=} isUserInput\n       * @return {?} Chip that has the corresponding value.\n       */\n\n    }, {\n      key: \"_selectValue\",\n      value: function _selectValue(value) {\n        var _this8 = this;\n\n        var isUserInput = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n\n        /** @type {?} */\n        var correspondingChip = this.chips.find(function (chip) {\n          return chip.value != null && _this8._compareWith(chip.value, value);\n        });\n\n        if (correspondingChip) {\n          isUserInput ? correspondingChip.selectViaInteraction() : correspondingChip.select();\n\n          this._selectionModel.select(correspondingChip);\n        }\n\n        return correspondingChip;\n      }\n      /**\n       * @return {?}\n       */\n\n    }, {\n      key: \"_initializeSelection\",\n      value: function _initializeSelection() {\n        var _this9 = this;\n\n        // Defer setting the value in order to avoid the \"Expression\n        // has changed after it was checked\" errors from Angular.\n        Promise.resolve().then(function () {\n          if (_this9.ngControl || _this9._value) {\n            _this9._setSelectionByValue(_this9.ngControl ? _this9.ngControl.value : _this9._value, false);\n\n            _this9.stateChanges.next();\n          }\n        });\n      }\n      /**\n       * Deselects every chip in the list.\n       * @param {?=} skip Chip that should not be deselected.\n       * @return {?}\n       */\n\n    }, {\n      key: \"_clearSelection\",\n      value: function _clearSelection(skip) {\n        this._selectionModel.clear();\n\n        this.chips.forEach(function (chip) {\n          if (chip !== skip) {\n            chip.deselect();\n          }\n        });\n        this.stateChanges.next();\n      }\n      /**\n       * Sorts the model values, ensuring that they keep the same\n       * order that they have in the panel.\n       * @return {?}\n       */\n\n    }, {\n      key: \"_sortValues\",\n      value: function _sortValues() {\n        var _this10 = this;\n\n        if (this._multiple) {\n          this._selectionModel.clear();\n\n          this.chips.forEach(function (chip) {\n            if (chip.selected) {\n              _this10._selectionModel.select(chip);\n            }\n          });\n          this.stateChanges.next();\n        }\n      }\n      /**\n       * Emits change event to set the model value.\n       * @param {?=} fallbackValue\n       * @return {?}\n       */\n\n    }, {\n      key: \"_propagateChanges\",\n      value: function _propagateChanges(fallbackValue) {\n        /** @type {?} */\n        var valueToEmit = null;\n\n        if (Array.isArray(this.selected)) {\n          valueToEmit = this.selected.map(function (chip) {\n            return chip.value;\n          });\n        } else {\n          valueToEmit = this.selected ? this.selected.value : fallbackValue;\n        }\n\n        this._value = valueToEmit;\n        this.change.emit(new MatChipListChange(this, valueToEmit));\n        this.valueChange.emit(valueToEmit);\n\n        this._onChange(valueToEmit);\n\n        this._changeDetectorRef.markForCheck();\n      }\n      /**\n       * When blurred, mark the field as touched when focus moved outside the chip list.\n       * @return {?}\n       */\n\n    }, {\n      key: \"_blur\",\n      value: function _blur() {\n        var _this11 = this;\n\n        if (!this._hasFocusedChip()) {\n          this._keyManager.setActiveItem(-1);\n        }\n\n        if (!this.disabled) {\n          if (this._chipInput) {\n            // If there's a chip input, we should check whether the focus moved to chip input.\n            // If the focus is not moved to chip input, mark the field as touched. If the focus moved\n            // to chip input, do nothing.\n            // Timeout is needed to wait for the focus() event trigger on chip input.\n            setTimeout(function () {\n              if (!_this11.focused) {\n                _this11._markAsTouched();\n              }\n            });\n          } else {\n            // If there's no chip input, then mark the field as touched.\n            this._markAsTouched();\n          }\n        }\n      }\n      /**\n       * Mark the field as touched\n       * @return {?}\n       */\n\n    }, {\n      key: \"_markAsTouched\",\n      value: function _markAsTouched() {\n        this._onTouched();\n\n        this._changeDetectorRef.markForCheck();\n\n        this.stateChanges.next();\n      }\n      /**\n       * @return {?}\n       */\n\n    }, {\n      key: \"_resetChips\",\n      value: function _resetChips() {\n        this._dropSubscriptions();\n\n        this._listenToChipsFocus();\n\n        this._listenToChipsSelection();\n\n        this._listenToChipsRemoved();\n      }\n      /**\n       * @return {?}\n       */\n\n    }, {\n      key: \"_dropSubscriptions\",\n      value: function _dropSubscriptions() {\n        if (this._chipFocusSubscription) {\n          this._chipFocusSubscription.unsubscribe();\n\n          this._chipFocusSubscription = null;\n        }\n\n        if (this._chipBlurSubscription) {\n          this._chipBlurSubscription.unsubscribe();\n\n          this._chipBlurSubscription = null;\n        }\n\n        if (this._chipSelectionSubscription) {\n          this._chipSelectionSubscription.unsubscribe();\n\n          this._chipSelectionSubscription = null;\n        }\n\n        if (this._chipRemoveSubscription) {\n          this._chipRemoveSubscription.unsubscribe();\n\n          this._chipRemoveSubscription = null;\n        }\n      }\n      /**\n       * Listens to user-generated selection events on each chip.\n       * @return {?}\n       */\n\n    }, {\n      key: \"_listenToChipsSelection\",\n      value: function _listenToChipsSelection() {\n        var _this12 = this;\n\n        this._chipSelectionSubscription = this.chipSelectionChanges.subscribe(function (event) {\n          event.source.selected ? _this12._selectionModel.select(event.source) : _this12._selectionModel.deselect(event.source); // For single selection chip list, make sure the deselected value is unselected.\n\n          if (!_this12.multiple) {\n            _this12.chips.forEach(function (chip) {\n              if (!_this12._selectionModel.isSelected(chip) && chip.selected) {\n                chip.deselect();\n              }\n            });\n          }\n\n          if (event.isUserInput) {\n            _this12._propagateChanges();\n          }\n        });\n      }\n      /**\n       * Listens to user-generated selection events on each chip.\n       * @return {?}\n       */\n\n    }, {\n      key: \"_listenToChipsFocus\",\n      value: function _listenToChipsFocus() {\n        var _this13 = this;\n\n        this._chipFocusSubscription = this.chipFocusChanges.subscribe(function (event) {\n          /** @type {?} */\n          var chipIndex = _this13.chips.toArray().indexOf(event.chip);\n\n          if (_this13._isValidIndex(chipIndex)) {\n            _this13._keyManager.updateActiveItemIndex(chipIndex);\n          }\n\n          _this13.stateChanges.next();\n        });\n        this._chipBlurSubscription = this.chipBlurChanges.subscribe(function () {\n          _this13._blur();\n\n          _this13.stateChanges.next();\n        });\n      }\n      /**\n       * @return {?}\n       */\n\n    }, {\n      key: \"_listenToChipsRemoved\",\n      value: function _listenToChipsRemoved() {\n        var _this14 = this;\n\n        this._chipRemoveSubscription = this.chipRemoveChanges.subscribe(function (event) {\n          /** @type {?} */\n          var chip = event.chip;\n          /** @type {?} */\n\n          var chipIndex = _this14.chips.toArray().indexOf(event.chip); // In case the chip that will be removed is currently focused, we temporarily store\n          // the index in order to be able to determine an appropriate sibling chip that will\n          // receive focus.\n\n\n          if (_this14._isValidIndex(chipIndex) && chip._hasFocus) {\n            _this14._lastDestroyedChipIndex = chipIndex;\n          }\n        });\n      }\n      /**\n       * Checks whether an event comes from inside a chip element.\n       * @param {?} event\n       * @return {?}\n       */\n\n    }, {\n      key: \"_originatesFromChip\",\n      value: function _originatesFromChip(event) {\n        /** @type {?} */\n        var currentElement =\n        /** @type {?} */\n        event.target;\n\n        while (currentElement && currentElement !== this._elementRef.nativeElement) {\n          if (currentElement.classList.contains('mat-chip')) {\n            return true;\n          }\n\n          currentElement = currentElement.parentElement;\n        }\n\n        return false;\n      }\n      /**\n       * Checks whether any of the chips is focused.\n       * @return {?}\n       */\n\n    }, {\n      key: \"_hasFocusedChip\",\n      value: function _hasFocusedChip() {\n        return this.chips.some(function (chip) {\n          return chip._hasFocus;\n        });\n      }\n    }]);\n\n    return MatChipList;\n  }(_MatChipListMixinBase);\n\n  MatChipList.ɵfac = function MatChipList_Factory(t) {\n    return new (t || MatChipList)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.Directionality, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.NgForm, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.FormGroupDirective, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc4.ErrorStateMatcher), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.NgControl, 10));\n  };\n\n  MatChipList.ɵcmp =\n  /*@__PURE__*/\n\n  /*@__PURE__*/\n  ɵngcc0.ɵɵdefineComponent({\n    type: MatChipList,\n    selectors: [[\"mat-chip-list\"]],\n    contentQueries: function MatChipList_ContentQueries(rf, ctx, dirIndex) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MatChip, 4);\n      }\n\n      if (rf & 2) {\n        var _t;\n\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.chips = _t);\n      }\n    },\n    hostAttrs: [1, \"mat-chip-list\"],\n    hostVars: 15,\n    hostBindings: function MatChipList_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"focus\", function MatChipList_focus_HostBindingHandler() {\n          return ctx.focus();\n        })(\"blur\", function MatChipList_blur_HostBindingHandler() {\n          return ctx._blur();\n        })(\"keydown\", function MatChipList_keydown_HostBindingHandler($event) {\n          return ctx._keydown($event);\n        });\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵhostProperty(\"id\", ctx._uid);\n        ɵngcc0.ɵɵattribute(\"tabindex\", ctx.disabled ? null : ctx._tabIndex)(\"aria-describedby\", ctx._ariaDescribedby || null)(\"aria-required\", ctx.required.toString())(\"aria-disabled\", ctx.disabled.toString())(\"aria-invalid\", ctx.errorState)(\"aria-multiselectable\", ctx.multiple)(\"role\", ctx.role)(\"aria-orientation\", ctx.ariaOrientation);\n        ɵngcc0.ɵɵclassProp(\"mat-chip-list-disabled\", ctx.disabled)(\"mat-chip-list-invalid\", ctx.errorState)(\"mat-chip-list-required\", ctx.required);\n      }\n    },\n    inputs: {\n      ariaOrientation: [\"aria-orientation\", \"ariaOrientation\"],\n      multiple: \"multiple\",\n      compareWith: \"compareWith\",\n      value: \"value\",\n      required: \"required\",\n      placeholder: \"placeholder\",\n      disabled: \"disabled\",\n      selectable: \"selectable\",\n      tabIndex: \"tabIndex\",\n      errorStateMatcher: \"errorStateMatcher\"\n    },\n    outputs: {\n      change: \"change\",\n      valueChange: \"valueChange\"\n    },\n    exportAs: [\"matChipList\"],\n    features: [/*@__PURE__*/ɵngcc0.ɵɵProvidersFeature([{\n      provide: MatFormFieldControl,\n      useExisting: MatChipList\n    }]), ɵngcc0.ɵɵInheritDefinitionFeature],\n    ngContentSelectors: _c0,\n    decls: 2,\n    vars: 0,\n    consts: [[1, \"mat-chip-list-wrapper\"]],\n    template: function MatChipList_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵelementStart(0, \"div\", 0);\n        ɵngcc0.ɵɵprojection(1);\n        ɵngcc0.ɵɵelementEnd();\n      }\n    },\n    styles: [\".mat-chip{position:relative;overflow:hidden;box-sizing:border-box;-webkit-tap-highlight-color:transparent;transform:translateZ(0)}.mat-standard-chip{transition:box-shadow 280ms cubic-bezier(.4,0,.2,1);display:inline-flex;padding:7px 12px;border-radius:16px;align-items:center;cursor:default;min-height:32px;height:1px}.mat-standard-chip .mat-chip-remove.mat-icon{width:18px;height:18px}.mat-standard-chip::after{top:0;left:0;right:0;bottom:0;position:absolute;border-radius:inherit;background-color:#000;opacity:0;content:'';pointer-events:none;transition:opacity .2s cubic-bezier(.35,0,.25,1)}.mat-standard-chip:hover::after{opacity:.12}.mat-standard-chip:focus{outline:0}.mat-standard-chip:focus::after{opacity:.16}.mat-standard-chip:active{box-shadow:0 3px 3px -2px rgba(0,0,0,.2),0 3px 4px 0 rgba(0,0,0,.14),0 1px 8px 0 rgba(0,0,0,.12)}@media screen and (-ms-high-contrast:active){.mat-standard-chip{outline:solid 1px}.mat-standard-chip:focus{outline:dotted 2px}}.mat-standard-chip.mat-chip-with-avatar,.mat-standard-chip.mat-chip-with-trailing-icon.mat-chip-with-avatar{padding-top:0;padding-bottom:0}.mat-standard-chip.mat-chip-with-trailing-icon.mat-chip-with-avatar{padding-right:8px;padding-left:0}[dir=rtl] .mat-standard-chip.mat-chip-with-trailing-icon.mat-chip-with-avatar{padding-left:8px;padding-right:0}.mat-standard-chip.mat-chip-with-trailing-icon{padding-top:7px;padding-bottom:7px;padding-right:8px;padding-left:12px}[dir=rtl] .mat-standard-chip.mat-chip-with-trailing-icon{padding-left:8px;padding-right:12px}.mat-standard-chip.mat-chip-with-avatar{padding-left:0;padding-right:12px}[dir=rtl] .mat-standard-chip.mat-chip-with-avatar{padding-right:0;padding-left:12px}.mat-standard-chip .mat-chip-avatar{width:24px;height:24px;margin-right:8px;margin-left:4px}[dir=rtl] .mat-standard-chip .mat-chip-avatar{margin-left:8px;margin-right:4px}.mat-standard-chip .mat-chip-remove,.mat-standard-chip .mat-chip-trailing-icon{width:18px;height:18px;cursor:pointer}.mat-standard-chip .mat-chip-remove,.mat-standard-chip .mat-chip-trailing-icon{margin-left:8px;margin-right:0}[dir=rtl] .mat-standard-chip .mat-chip-remove,[dir=rtl] .mat-standard-chip .mat-chip-trailing-icon{margin-right:8px;margin-left:0}.mat-chip-list-wrapper{display:flex;flex-direction:row;flex-wrap:wrap;align-items:center;margin:-4px}.mat-chip-list-wrapper .mat-standard-chip,.mat-chip-list-wrapper input.mat-input-element{margin:4px}.mat-chip-list-stacked .mat-chip-list-wrapper{flex-direction:column;align-items:flex-start}.mat-chip-list-stacked .mat-chip-list-wrapper .mat-standard-chip{width:100%}.mat-chip-avatar{border-radius:50%;justify-content:center;align-items:center;display:flex;overflow:hidden;object-fit:cover}input.mat-chip-input{width:150px;margin:4px;flex:1 0 150px}\"],\n    encapsulation: 2,\n    changeDetection: 0\n  });\n  return MatChipList;\n}();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/** @type {?} */\n\n\nvar nextUniqueId$1 = 0;\n\nvar MatChipInput = /*@__PURE__*/function () {\n  var MatChipInput = /*#__PURE__*/function () {\n    /**\n     * @param {?} _elementRef\n     * @param {?} _defaultOptions\n     */\n    function MatChipInput(_elementRef, _defaultOptions) {\n      _classCallCheck(this, MatChipInput);\n\n      this._elementRef = _elementRef;\n      this._defaultOptions = _defaultOptions;\n      /**\n       * Whether the control is focused.\n       */\n\n      this.focused = false;\n      this._addOnBlur = false;\n      /**\n       * The list of key codes that will trigger a chipEnd event.\n       *\n       * Defaults to `[ENTER]`.\n       */\n\n      this.separatorKeyCodes = this._defaultOptions.separatorKeyCodes;\n      /**\n       * Emitted when a chip is to be added.\n       */\n\n      this.chipEnd = new EventEmitter();\n      /**\n       * The input's placeholder text.\n       */\n\n      this.placeholder = '';\n      /**\n       * Unique id for the input.\n       */\n\n      this.id = \"mat-chip-list-input-\".concat(nextUniqueId$1++);\n      this._disabled = false;\n      this._inputElement =\n      /** @type {?} */\n      this._elementRef.nativeElement;\n    }\n    /**\n     * Register input for chip list\n     * @param {?} value\n     * @return {?}\n     */\n\n\n    _createClass(MatChipInput, [{\n      key: \"chipList\",\n      set: function set(value) {\n        if (value) {\n          this._chipList = value;\n\n          this._chipList.registerInput(this);\n        }\n      }\n      /**\n       * Whether or not the chipEnd event will be emitted when the input is blurred.\n       * @return {?}\n       */\n\n    }, {\n      key: \"addOnBlur\",\n      get: function get() {\n        return this._addOnBlur;\n      }\n      /**\n       * @param {?} value\n       * @return {?}\n       */\n      ,\n      set: function set(value) {\n        this._addOnBlur = coerceBooleanProperty(value);\n      }\n      /**\n       * Whether the input is disabled.\n       * @return {?}\n       */\n\n    }, {\n      key: \"disabled\",\n      get: function get() {\n        return this._disabled || this._chipList && this._chipList.disabled;\n      }\n      /**\n       * @param {?} value\n       * @return {?}\n       */\n      ,\n      set: function set(value) {\n        this._disabled = coerceBooleanProperty(value);\n      }\n      /**\n       * Whether the input is empty.\n       * @return {?}\n       */\n\n    }, {\n      key: \"empty\",\n      get: function get() {\n        return !this._inputElement.value;\n      }\n      /**\n       * @return {?}\n       */\n\n    }, {\n      key: \"ngOnChanges\",\n      value: function ngOnChanges() {\n        this._chipList.stateChanges.next();\n      }\n      /**\n       * Utility method to make host definition/tests more clear.\n       * @param {?=} event\n       * @return {?}\n       */\n\n    }, {\n      key: \"_keydown\",\n      value: function _keydown(event) {\n        this._emitChipEnd(event);\n      }\n      /**\n       * Checks to see if the blur should emit the (chipEnd) event.\n       * @return {?}\n       */\n\n    }, {\n      key: \"_blur\",\n      value: function _blur() {\n        if (this.addOnBlur) {\n          this._emitChipEnd();\n        }\n\n        this.focused = false; // Blur the chip list if it is not focused\n\n        if (!this._chipList.focused) {\n          this._chipList._blur();\n        }\n\n        this._chipList.stateChanges.next();\n      }\n      /**\n       * @return {?}\n       */\n\n    }, {\n      key: \"_focus\",\n      value: function _focus() {\n        this.focused = true;\n\n        this._chipList.stateChanges.next();\n      }\n      /**\n       * Checks to see if the (chipEnd) event needs to be emitted.\n       * @param {?=} event\n       * @return {?}\n       */\n\n    }, {\n      key: \"_emitChipEnd\",\n      value: function _emitChipEnd(event) {\n        if (!this._inputElement.value && !!event) {\n          this._chipList._keydown(event);\n        }\n\n        if (!event || this._isSeparatorKey(event.keyCode)) {\n          this.chipEnd.emit({\n            input: this._inputElement,\n            value: this._inputElement.value\n          });\n\n          if (event) {\n            event.preventDefault();\n          }\n        }\n      }\n      /**\n       * @return {?}\n       */\n\n    }, {\n      key: \"_onInput\",\n      value: function _onInput() {\n        // Let chip list know whenever the value changes.\n        this._chipList.stateChanges.next();\n      }\n      /**\n       * Focuses the input.\n       * @return {?}\n       */\n\n    }, {\n      key: \"focus\",\n      value: function focus() {\n        this._inputElement.focus();\n      }\n      /**\n       * Checks whether a keycode is one of the configured separators.\n       * @param {?} keyCode\n       * @return {?}\n       */\n\n    }, {\n      key: \"_isSeparatorKey\",\n      value: function _isSeparatorKey(keyCode) {\n        /** @type {?} */\n        var separators = this.separatorKeyCodes;\n        return Array.isArray(separators) ? separators.indexOf(keyCode) > -1 : separators.has(keyCode);\n      }\n    }]);\n\n    return MatChipInput;\n  }();\n\n  MatChipInput.ɵfac = function MatChipInput_Factory(t) {\n    return new (t || MatChipInput)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(MAT_CHIPS_DEFAULT_OPTIONS));\n  };\n\n  MatChipInput.ɵdir =\n  /*@__PURE__*/\n\n  /*@__PURE__*/\n  ɵngcc0.ɵɵdefineDirective({\n    type: MatChipInput,\n    selectors: [[\"input\", \"matChipInputFor\", \"\"]],\n    hostAttrs: [1, \"mat-chip-input\", \"mat-input-element\"],\n    hostVars: 4,\n    hostBindings: function MatChipInput_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"keydown\", function MatChipInput_keydown_HostBindingHandler($event) {\n          return ctx._keydown($event);\n        })(\"blur\", function MatChipInput_blur_HostBindingHandler() {\n          return ctx._blur();\n        })(\"focus\", function MatChipInput_focus_HostBindingHandler() {\n          return ctx._focus();\n        })(\"input\", function MatChipInput_input_HostBindingHandler() {\n          return ctx._onInput();\n        });\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵhostProperty(\"id\", ctx.id);\n        ɵngcc0.ɵɵattribute(\"disabled\", ctx.disabled || null)(\"placeholder\", ctx.placeholder || null)(\"aria-invalid\", ctx._chipList && ctx._chipList.ngControl ? ctx._chipList.ngControl.invalid : null);\n      }\n    },\n    inputs: {\n      separatorKeyCodes: [\"matChipInputSeparatorKeyCodes\", \"separatorKeyCodes\"],\n      placeholder: \"placeholder\",\n      id: \"id\",\n      chipList: [\"matChipInputFor\", \"chipList\"],\n      addOnBlur: [\"matChipInputAddOnBlur\", \"addOnBlur\"],\n      disabled: \"disabled\"\n    },\n    outputs: {\n      chipEnd: \"matChipInputTokenEnd\"\n    },\n    exportAs: [\"matChipInput\", \"matChipInputFor\"],\n    features: [ɵngcc0.ɵɵNgOnChangesFeature]\n  });\n  return MatChipInput;\n}();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/** @type {?} */\n\n\nvar CHIP_DECLARATIONS = [MatChipList, MatChip, MatChipInput, MatChipRemove, MatChipAvatar, MatChipTrailingIcon];\nvar ɵ0 = {\n  separatorKeyCodes: [ENTER]\n};\n\nvar MatChipsModule = /*@__PURE__*/function () {\n  var MatChipsModule = function MatChipsModule() {\n    _classCallCheck(this, MatChipsModule);\n  };\n\n  MatChipsModule.ɵfac = function MatChipsModule_Factory(t) {\n    return new (t || MatChipsModule)();\n  };\n\n  MatChipsModule.ɵmod =\n  /*@__PURE__*/\n\n  /*@__PURE__*/\n  ɵngcc0.ɵɵdefineNgModule({\n    type: MatChipsModule\n  });\n  MatChipsModule.ɵinj =\n  /*@__PURE__*/\n\n  /*@__PURE__*/\n  ɵngcc0.ɵɵdefineInjector({\n    providers: [ErrorStateMatcher, {\n      provide: MAT_CHIPS_DEFAULT_OPTIONS,\n      useValue:\n      /** @type {?} */\n      ɵ0\n    }]\n  });\n  return MatChipsModule;\n}();\n/*@__PURE__*/\n\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatChipsModule, {\n    declarations: [MatChipList, MatChip, MatChipInput, MatChipRemove, MatChipAvatar, MatChipTrailingIcon],\n    exports: [MatChipList, MatChip, MatChipInput, MatChipRemove, MatChipAvatar, MatChipTrailingIcon]\n  });\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n\nexport { MatChipsModule, MatChipListBase, _MatChipListMixinBase, MatChipListChange, MatChipList, MatChipSelectionChange, MatChipBase, _MatChipMixinBase, MatChipAvatar, MatChipTrailingIcon, MatChip, MatChipRemove, MatChipInput, MAT_CHIPS_DEFAULT_OPTIONS }; //# sourceMappingURL=chips.js.map","map":null,"metadata":{},"sourceType":"module"}