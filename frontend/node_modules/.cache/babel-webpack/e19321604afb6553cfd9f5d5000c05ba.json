{"ast":null,"code":"import _createForOfIteratorHelper from \"/Users/adepertat/Dropbox/ECOLES/Openclassroom/P6_de_Pertat_Antoine/AntoinedePertat_6_240521/frontend/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper\";\nimport _createClass from \"/Users/adepertat/Dropbox/ECOLES/Openclassroom/P6_de_Pertat_Antoine/AntoinedePertat_6_240521/frontend/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/Users/adepertat/Dropbox/ECOLES/Openclassroom/P6_de_Pertat_Antoine/AntoinedePertat_6_240521/frontend/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/adepertat/Dropbox/ECOLES/Openclassroom/P6_de_Pertat_Antoine/AntoinedePertat_6_240521/frontend/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _classCallCheck from \"/Users/adepertat/Dropbox/ECOLES/Openclassroom/P6_de_Pertat_Antoine/AntoinedePertat_6_240521/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Observable, of, Subject } from 'rxjs';\nimport { Injectable, defineInjectable } from '@angular/core';\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * @abstract\n * @template T\n */\n\nimport * as Éµngcc0 from '@angular/core';\n\nvar DataSource = function DataSource() {\n  _classCallCheck(this, DataSource);\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * DataSource wrapper for a native array.\n * @template T\n */\n\n\nvar ArrayDataSource = /*#__PURE__*/function (_DataSource) {\n  _inherits(ArrayDataSource, _DataSource);\n\n  var _super = _createSuper(ArrayDataSource);\n\n  /**\n   * @param {?} _data\n   */\n  function ArrayDataSource(_data) {\n    var _this;\n\n    _classCallCheck(this, ArrayDataSource);\n\n    _this = _super.call(this);\n    _this._data = _data;\n    return _this;\n  }\n  /**\n   * @return {?}\n   */\n\n\n  _createClass(ArrayDataSource, [{\n    key: \"connect\",\n    value: function connect() {\n      return this._data instanceof Observable ? this._data : of(this._data);\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"disconnect\",\n    value: function disconnect() {}\n  }]);\n\n  return ArrayDataSource;\n}(DataSource);\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * Class to be used to power selecting one or more options from a list.\n * @template T\n */\n\n\nvar SelectionModel = /*#__PURE__*/function () {\n  /**\n   * @param {?=} _multiple\n   * @param {?=} initiallySelectedValues\n   * @param {?=} _emitChanges\n   */\n  function SelectionModel() {\n    var _this2 = this;\n\n    var _multiple = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n\n    var initiallySelectedValues = arguments.length > 1 ? arguments[1] : undefined;\n\n    var _emitChanges = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n\n    _classCallCheck(this, SelectionModel);\n\n    this._multiple = _multiple;\n    this._emitChanges = _emitChanges;\n    /**\n     * Currently-selected values.\n     */\n\n    this._selection = new Set();\n    /**\n     * Keeps track of the deselected options that haven't been emitted by the change event.\n     */\n\n    this._deselectedToEmit = [];\n    /**\n     * Keeps track of the selected options that haven't been emitted by the change event.\n     */\n\n    this._selectedToEmit = [];\n    /**\n     * Event emitted when the value has changed.\n     */\n\n    this.changed = new Subject();\n    /**\n     * Event emitted when the value has changed.\n     * @deprecated Use `changed` instead.\n     * \\@breaking-change 8.0.0 To be changed to `changed`\n     */\n\n    this.onChange = this.changed;\n\n    if (initiallySelectedValues && initiallySelectedValues.length) {\n      if (_multiple) {\n        initiallySelectedValues.forEach(function (value) {\n          return _this2._markSelected(value);\n        });\n      } else {\n        this._markSelected(initiallySelectedValues[0]);\n      } // Clear the array in order to avoid firing the change event for preselected values.\n\n\n      this._selectedToEmit.length = 0;\n    }\n  }\n  /**\n   * Selected values.\n   * @return {?}\n   */\n\n\n  _createClass(SelectionModel, [{\n    key: \"selected\",\n    get: function get() {\n      if (!this._selected) {\n        this._selected = Array.from(this._selection.values());\n      }\n\n      return this._selected;\n    }\n    /**\n     * Selects a value or an array of values.\n     * @param {...?} values\n     * @return {?}\n     */\n\n  }, {\n    key: \"select\",\n    value: function select() {\n      var _this3 = this;\n\n      for (var _len = arguments.length, values = new Array(_len), _key = 0; _key < _len; _key++) {\n        values[_key] = arguments[_key];\n      }\n\n      this._verifyValueAssignment(values);\n\n      values.forEach(function (value) {\n        return _this3._markSelected(value);\n      });\n\n      this._emitChangeEvent();\n    }\n    /**\n     * Deselects a value or an array of values.\n     * @param {...?} values\n     * @return {?}\n     */\n\n  }, {\n    key: \"deselect\",\n    value: function deselect() {\n      var _this4 = this;\n\n      for (var _len2 = arguments.length, values = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        values[_key2] = arguments[_key2];\n      }\n\n      this._verifyValueAssignment(values);\n\n      values.forEach(function (value) {\n        return _this4._unmarkSelected(value);\n      });\n\n      this._emitChangeEvent();\n    }\n    /**\n     * Toggles a value between selected and deselected.\n     * @param {?} value\n     * @return {?}\n     */\n\n  }, {\n    key: \"toggle\",\n    value: function toggle(value) {\n      this.isSelected(value) ? this.deselect(value) : this.select(value);\n    }\n    /**\n     * Clears all of the selected values.\n     * @return {?}\n     */\n\n  }, {\n    key: \"clear\",\n    value: function clear() {\n      this._unmarkAll();\n\n      this._emitChangeEvent();\n    }\n    /**\n     * Determines whether a value is selected.\n     * @param {?} value\n     * @return {?}\n     */\n\n  }, {\n    key: \"isSelected\",\n    value: function isSelected(value) {\n      return this._selection.has(value);\n    }\n    /**\n     * Determines whether the model does not have a value.\n     * @return {?}\n     */\n\n  }, {\n    key: \"isEmpty\",\n    value: function isEmpty() {\n      return this._selection.size === 0;\n    }\n    /**\n     * Determines whether the model has a value.\n     * @return {?}\n     */\n\n  }, {\n    key: \"hasValue\",\n    value: function hasValue() {\n      return !this.isEmpty();\n    }\n    /**\n     * Sorts the selected values based on a predicate function.\n     * @param {?=} predicate\n     * @return {?}\n     */\n\n  }, {\n    key: \"sort\",\n    value: function sort(predicate) {\n      if (this._multiple && this.selected) {\n        /** @type {?} */\n        this._selected.sort(predicate);\n      }\n    }\n    /**\n     * Gets whether multiple values can be selected.\n     * @return {?}\n     */\n\n  }, {\n    key: \"isMultipleSelection\",\n    value: function isMultipleSelection() {\n      return this._multiple;\n    }\n    /**\n     * Emits a change event and clears the records of selected and deselected values.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_emitChangeEvent\",\n    value: function _emitChangeEvent() {\n      // Clear the selected values so they can be re-cached.\n      this._selected = null;\n\n      if (this._selectedToEmit.length || this._deselectedToEmit.length) {\n        this.changed.next({\n          source: this,\n          added: this._selectedToEmit,\n          removed: this._deselectedToEmit\n        });\n        this._deselectedToEmit = [];\n        this._selectedToEmit = [];\n      }\n    }\n    /**\n     * Selects a value.\n     * @param {?} value\n     * @return {?}\n     */\n\n  }, {\n    key: \"_markSelected\",\n    value: function _markSelected(value) {\n      if (!this.isSelected(value)) {\n        if (!this._multiple) {\n          this._unmarkAll();\n        }\n\n        this._selection.add(value);\n\n        if (this._emitChanges) {\n          this._selectedToEmit.push(value);\n        }\n      }\n    }\n    /**\n     * Deselects a value.\n     * @param {?} value\n     * @return {?}\n     */\n\n  }, {\n    key: \"_unmarkSelected\",\n    value: function _unmarkSelected(value) {\n      if (this.isSelected(value)) {\n        this._selection.delete(value);\n\n        if (this._emitChanges) {\n          this._deselectedToEmit.push(value);\n        }\n      }\n    }\n    /**\n     * Clears out the selected values.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_unmarkAll\",\n    value: function _unmarkAll() {\n      var _this5 = this;\n\n      if (!this.isEmpty()) {\n        this._selection.forEach(function (value) {\n          return _this5._unmarkSelected(value);\n        });\n      }\n    }\n    /**\n     * Verifies the value assignment and throws an error if the specified value array is\n     * including multiple values while the selection model is not supporting multiple values.\n     * @param {?} values\n     * @return {?}\n     */\n\n  }, {\n    key: \"_verifyValueAssignment\",\n    value: function _verifyValueAssignment(values) {\n      if (values.length > 1 && !this._multiple) {\n        throw getMultipleValuesInSingleSelectionError();\n      }\n    }\n  }]);\n\n  return SelectionModel;\n}();\n/**\n * Returns an error that reports that multiple values are passed into a selection model\n * with a single value.\n * \\@docs-private\n * @return {?}\n */\n\n\nfunction getMultipleValuesInSingleSelectionError() {\n  return Error('Cannot pass multiple values into SelectionModel with single-value mode.');\n}\n\nvar UniqueSelectionDispatcher = /*@__PURE__*/function () {\n  var UniqueSelectionDispatcher = /*#__PURE__*/function () {\n    function UniqueSelectionDispatcher() {\n      _classCallCheck(this, UniqueSelectionDispatcher);\n\n      this._listeners = [];\n    }\n    /**\n     * Notify other items that selection for the given name has been set.\n     * @param {?} id ID of the item.\n     * @param {?} name Name of the item.\n     * @return {?}\n     */\n\n\n    _createClass(UniqueSelectionDispatcher, [{\n      key: \"notify\",\n      value: function notify(id, name) {\n        var _iterator = _createForOfIteratorHelper(this._listeners),\n            _step;\n\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var listener = _step.value;\n            listener(id, name);\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n      }\n      /**\n       * Listen for future changes to item selection.\n       * @param {?} listener\n       * @return {?} Function used to deregister listener\n       */\n\n    }, {\n      key: \"listen\",\n      value: function listen(listener) {\n        var _this6 = this;\n\n        this._listeners.push(listener);\n\n        return function () {\n          _this6._listeners = _this6._listeners.filter(function (registered) {\n            return listener !== registered;\n          });\n        };\n      }\n      /**\n       * @return {?}\n       */\n\n    }, {\n      key: \"ngOnDestroy\",\n      value: function ngOnDestroy() {\n        this._listeners = [];\n      }\n    }]);\n\n    return UniqueSelectionDispatcher;\n  }();\n\n  UniqueSelectionDispatcher.Éµfac = function UniqueSelectionDispatcher_Factory(t) {\n    return new (t || UniqueSelectionDispatcher)();\n  };\n\n  UniqueSelectionDispatcher.Éµprov =\n  /*@__PURE__*/\n\n  /*@__PURE__*/\n  Éµngcc0.ÉµÉµdefineInjectable({\n    token: UniqueSelectionDispatcher,\n    factory: UniqueSelectionDispatcher.Éµfac,\n    providedIn: 'root'\n  });\n  /** @nocollapse */\n\n  UniqueSelectionDispatcher.ngInjectableDef = /*@__PURE__*/defineInjectable({\n    factory: function UniqueSelectionDispatcher_Factory() {\n      return new UniqueSelectionDispatcher();\n    },\n    token: UniqueSelectionDispatcher,\n    providedIn: \"root\"\n  });\n  return UniqueSelectionDispatcher;\n}();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n\nexport { UniqueSelectionDispatcher, ArrayDataSource, DataSource, getMultipleValuesInSingleSelectionError, SelectionModel }; //# sourceMappingURL=collections.js.map","map":null,"metadata":{},"sourceType":"module"}