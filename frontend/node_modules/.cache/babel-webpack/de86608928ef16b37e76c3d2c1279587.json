{"ast":null,"code":"import { operate } from '../util/lift';\nimport { OperatorSubscriber } from './OperatorSubscriber';\nimport { identity } from '../util/identity';\nexport function retry(configOrCount) {\n  if (configOrCount === void 0) {\n    configOrCount = Infinity;\n  }\n\n  var config;\n\n  if (configOrCount && typeof configOrCount === 'object') {\n    config = configOrCount;\n  } else {\n    config = {\n      count: configOrCount\n    };\n  }\n\n  var count = config.count,\n      _a = config.resetOnSuccess,\n      resetOnSuccess = _a === void 0 ? false : _a;\n  return count <= 0 ? identity : operate(function (source, subscriber) {\n    var soFar = 0;\n    var innerSub;\n\n    var subscribeForRetry = function subscribeForRetry() {\n      var syncUnsub = false;\n      innerSub = source.subscribe(new OperatorSubscriber(subscriber, function (value) {\n        if (resetOnSuccess) {\n          soFar = 0;\n        }\n\n        subscriber.next(value);\n      }, undefined, function (err) {\n        if (soFar++ < count) {\n          if (innerSub) {\n            innerSub.unsubscribe();\n            innerSub = null;\n            subscribeForRetry();\n          } else {\n            syncUnsub = true;\n          }\n        } else {\n          subscriber.error(err);\n        }\n      }));\n\n      if (syncUnsub) {\n        innerSub.unsubscribe();\n        innerSub = null;\n        subscribeForRetry();\n      }\n    };\n\n    subscribeForRetry();\n  });\n} //# sourceMappingURL=retry.js.map","map":null,"metadata":{},"sourceType":"module"}