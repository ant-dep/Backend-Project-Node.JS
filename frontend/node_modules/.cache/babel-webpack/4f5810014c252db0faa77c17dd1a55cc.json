{"ast":null,"code":"import _createForOfIteratorHelper from \"/Users/adepertat/Dropbox/ECOLES/Openclassroom/P6_de_Pertat_Antoine/AntoinedePertat_6_240521/frontend/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper\";\nimport _createClass from \"/Users/adepertat/Dropbox/ECOLES/Openclassroom/P6_de_Pertat_Antoine/AntoinedePertat_6_240521/frontend/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/Users/adepertat/Dropbox/ECOLES/Openclassroom/P6_de_Pertat_Antoine/AntoinedePertat_6_240521/frontend/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/adepertat/Dropbox/ECOLES/Openclassroom/P6_de_Pertat_Antoine/AntoinedePertat_6_240521/frontend/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _classCallCheck from \"/Users/adepertat/Dropbox/ECOLES/Openclassroom/P6_de_Pertat_Antoine/AntoinedePertat_6_240521/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Observable, of, Subject } from 'rxjs';\nimport { Injectable, defineInjectable } from '@angular/core';\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * @abstract\n * @template T\n */\n\nimport * as Éµngcc0 from '@angular/core';\n\nvar DataSource = function DataSource() {\n  _classCallCheck(this, DataSource);\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * DataSource wrapper for a native array.\n * @template T\n */\n\n\nvar ArrayDataSource = /*#__PURE__*/function (_DataSource) {\n  _inherits(ArrayDataSource, _DataSource);\n\n  var _super = _createSuper(ArrayDataSource);\n\n  /**\n   * @param {?} _data\n   */\n  function ArrayDataSource(_data) {\n    var _this;\n\n    _classCallCheck(this, ArrayDataSource);\n\n    _this = _super.call(this);\n    _this._data = _data;\n    return _this;\n  }\n  /**\n   * @return {?}\n   */\n\n\n  _createClass(ArrayDataSource, [{\n    key: \"connect\",\n    value: function connect() {\n      return this._data instanceof Observable ? this._data : of(this._data);\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"disconnect\",\n    value: function disconnect() {}\n  }]);\n\n  return ArrayDataSource;\n}(DataSource);\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * Class to be used to power selecting one or more options from a list.\n * @template T\n */\n\n\nvar SelectionModel = /*#__PURE__*/function () {\n  /**\n   * @param {?=} _multiple\n   * @param {?=} initiallySelectedValues\n   * @param {?=} _emitChanges\n   */\n  function SelectionModel() {\n    var _this2 = this;\n\n    var _multiple = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n\n    var initiallySelectedValues = arguments.length > 1 ? arguments[1] : undefined;\n\n    var _emitChanges = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n\n    _classCallCheck(this, SelectionModel);\n\n    this._multiple = _multiple;\n    this._emitChanges = _emitChanges;\n    /**\n     * Currently-selected values.\n     */\n\n    this._selection = new Set();\n    /**\n     * Keeps track of the deselected options that haven't been emitted by the change event.\n     */\n\n    this._deselectedToEmit = [];\n    /**\n     * Keeps track of the selected options that haven't been emitted by the change event.\n     */\n\n    this._selectedToEmit = [];\n    /**\n     * Event emitted when the value has changed.\n     */\n\n    this.changed = new Subject();\n    /**\n     * Event emitted when the value has changed.\n     * @deprecated Use `changed` instead.\n     * \\@breaking-change 8.0.0 To be changed to `changed`\n     */\n\n    this.onChange = this.changed;\n\n    if (initiallySelectedValues && initiallySelectedValues.length) {\n      if (_multiple) {\n        initiallySelectedValues.forEach(function (value) {\n          return _this2._markSelected(value);\n        });\n      } else {\n        this._markSelected(initiallySelectedValues[0]);\n      } // Clear the array in order to avoid firing the change event for preselected values.\n\n\n      this._selectedToEmit.length = 0;\n    }\n  }\n  /**\n   * Selected values.\n   * @return {?}\n   */\n\n\n  _createClass(SelectionModel, [{\n    key: \"selected\",\n    get: function get() {\n      if (!this._selected) {\n        this._selected = Array.from(this._selection.values());\n      }\n\n      return this._selected;\n    }\n    /**\n     * Selects a value or an array of values.\n     * @param {...?} values\n     * @return {?}\n     */\n\n  }, {\n    key: \"select\",\n    value: function select() {\n      var _this3 = this;\n\n      for (var _len = arguments.length, values = new Array(_len), _key = 0; _key < _len; _key++) {\n        values[_key] = arguments[_key];\n      }\n\n      this._verifyValueAssignment(values);\n\n      values.forEach(function (value) {\n        return _this3._markSelected(value);\n      });\n\n      this._emitChangeEvent();\n    }\n    /**\n     * Deselects a value or an array of values.\n     * @param {...?} values\n     * @return {?}\n     */\n\n  }, {\n    key: \"deselect\",\n    value: function deselect() {\n      var _this4 = this;\n\n      for (var _len2 = arguments.length, values = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        values[_key2] = arguments[_key2];\n      }\n\n      this._verifyValueAssignment(values);\n\n      values.forEach(function (value) {\n        return _this4._unmarkSelected(value);\n      });\n\n      this._emitChangeEvent();\n    }\n    /**\n     * Toggles a value between selected and deselected.\n     * @param {?} value\n     * @return {?}\n     */\n\n  }, {\n    key: \"toggle\",\n    value: function toggle(value) {\n      this.isSelected(value) ? this.deselect(value) : this.select(value);\n    }\n    /**\n     * Clears all of the selected values.\n     * @return {?}\n     */\n\n  }, {\n    key: \"clear\",\n    value: function clear() {\n      this._unmarkAll();\n\n      this._emitChangeEvent();\n    }\n    /**\n     * Determines whether a value is selected.\n     * @param {?} value\n     * @return {?}\n     */\n\n  }, {\n    key: \"isSelected\",\n    value: function isSelected(value) {\n      return this._selection.has(value);\n    }\n    /**\n     * Determines whether the model does not have a value.\n     * @return {?}\n     */\n\n  }, {\n    key: \"isEmpty\",\n    value: function isEmpty() {\n      return this._selection.size === 0;\n    }\n    /**\n     * Determines whether the model has a value.\n     * @return {?}\n     */\n\n  }, {\n    key: \"hasValue\",\n    value: function hasValue() {\n      return !this.isEmpty();\n    }\n    /**\n     * Sorts the selected values based on a predicate function.\n     * @param {?=} predicate\n     * @return {?}\n     */\n\n  }, {\n    key: \"sort\",\n    value: function sort(predicate) {\n      if (this._multiple && this.selected) {\n        /** @type {?} */\n        this._selected.sort(predicate);\n      }\n    }\n    /**\n     * Gets whether multiple values can be selected.\n     * @return {?}\n     */\n\n  }, {\n    key: \"isMultipleSelection\",\n    value: function isMultipleSelection() {\n      return this._multiple;\n    }\n    /**\n     * Emits a change event and clears the records of selected and deselected values.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_emitChangeEvent\",\n    value: function _emitChangeEvent() {\n      // Clear the selected values so they can be re-cached.\n      this._selected = null;\n\n      if (this._selectedToEmit.length || this._deselectedToEmit.length) {\n        this.changed.next({\n          source: this,\n          added: this._selectedToEmit,\n          removed: this._deselectedToEmit\n        });\n        this._deselectedToEmit = [];\n        this._selectedToEmit = [];\n      }\n    }\n    /**\n     * Selects a value.\n     * @param {?} value\n     * @return {?}\n     */\n\n  }, {\n    key: \"_markSelected\",\n    value: function _markSelected(value) {\n      if (!this.isSelected(value)) {\n        if (!this._multiple) {\n          this._unmarkAll();\n        }\n\n        this._selection.add(value);\n\n        if (this._emitChanges) {\n          this._selectedToEmit.push(value);\n        }\n      }\n    }\n    /**\n     * Deselects a value.\n     * @param {?} value\n     * @return {?}\n     */\n\n  }, {\n    key: \"_unmarkSelected\",\n    value: function _unmarkSelected(value) {\n      if (this.isSelected(value)) {\n        this._selection.delete(value);\n\n        if (this._emitChanges) {\n          this._deselectedToEmit.push(value);\n        }\n      }\n    }\n    /**\n     * Clears out the selected values.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_unmarkAll\",\n    value: function _unmarkAll() {\n      var _this5 = this;\n\n      if (!this.isEmpty()) {\n        this._selection.forEach(function (value) {\n          return _this5._unmarkSelected(value);\n        });\n      }\n    }\n    /**\n     * Verifies the value assignment and throws an error if the specified value array is\n     * including multiple values while the selection model is not supporting multiple values.\n     * @param {?} values\n     * @return {?}\n     */\n\n  }, {\n    key: \"_verifyValueAssignment\",\n    value: function _verifyValueAssignment(values) {\n      if (values.length > 1 && !this._multiple) {\n        throw getMultipleValuesInSingleSelectionError();\n      }\n    }\n  }]);\n\n  return SelectionModel;\n}();\n/**\n * Returns an error that reports that multiple values are passed into a selection model\n * with a single value.\n * \\@docs-private\n * @return {?}\n */\n\n\nfunction getMultipleValuesInSingleSelectionError() {\n  return Error('Cannot pass multiple values into SelectionModel with single-value mode.');\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * Class to coordinate unique selection based on name.\n * Intended to be consumed as an Angular service.\n * This service is needed because native radio change events are only fired on the item currently\n * being selected, and we still need to uncheck the previous selection.\n *\n * This service does not *store* any IDs and names because they may change at any time, so it is\n * less error-prone if they are simply passed through when the events occur.\n */\n\n\nvar UniqueSelectionDispatcher = /*#__PURE__*/function () {\n  function UniqueSelectionDispatcher() {\n    _classCallCheck(this, UniqueSelectionDispatcher);\n\n    this._listeners = [];\n  }\n  /**\n   * Notify other items that selection for the given name has been set.\n   * @param {?} id ID of the item.\n   * @param {?} name Name of the item.\n   * @return {?}\n   */\n\n\n  _createClass(UniqueSelectionDispatcher, [{\n    key: \"notify\",\n    value: function notify(id, name) {\n      var _iterator = _createForOfIteratorHelper(this._listeners),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var listener = _step.value;\n          listener(id, name);\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n    }\n    /**\n     * Listen for future changes to item selection.\n     * @param {?} listener\n     * @return {?} Function used to deregister listener\n     */\n\n  }, {\n    key: \"listen\",\n    value: function listen(listener) {\n      var _this6 = this;\n\n      this._listeners.push(listener);\n\n      return function () {\n        _this6._listeners = _this6._listeners.filter(function (registered) {\n          return listener !== registered;\n        });\n      };\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      this._listeners = [];\n    }\n  }]);\n\n  return UniqueSelectionDispatcher;\n}();\n\nUniqueSelectionDispatcher.Éµfac = function UniqueSelectionDispatcher_Factory(t) {\n  return new (t || UniqueSelectionDispatcher)();\n};\n\nUniqueSelectionDispatcher.Éµprov = /*@__PURE__*/Éµngcc0.ÉµÉµdefineInjectable({\n  token: UniqueSelectionDispatcher,\n  factory: UniqueSelectionDispatcher.Éµfac,\n  providedIn: 'root'\n});\n/** @nocollapse */\n\nUniqueSelectionDispatcher.ngInjectableDef = defineInjectable({\n  factory: function UniqueSelectionDispatcher_Factory() {\n    return new UniqueSelectionDispatcher();\n  },\n  token: UniqueSelectionDispatcher,\n  providedIn: \"root\"\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && Éµngcc0.ÉµsetClassMetadata(UniqueSelectionDispatcher, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [];\n  }, null);\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n\nexport { UniqueSelectionDispatcher, ArrayDataSource, DataSource, getMultipleValuesInSingleSelectionError, SelectionModel }; //# sourceMappingURL=collections.js.map","map":{"version":3,"sources":["/Users/adepertat/Dropbox/ECOLES/Openclassroom/P6_de_Pertat_Antoine/AntoinedePertat_6_240521/frontend/node_modules/@angular/cdk/__ivy_ngcc__/esm2015/collections.js"],"names":["Observable","of","Subject","Injectable","defineInjectable","Éµngcc0","DataSource","ArrayDataSource","_data","SelectionModel","_multiple","initiallySelectedValues","_emitChanges","_selection","Set","_deselectedToEmit","_selectedToEmit","changed","onChange","length","forEach","value","_markSelected","_selected","Array","from","values","_verifyValueAssignment","_emitChangeEvent","_unmarkSelected","isSelected","deselect","select","_unmarkAll","has","size","isEmpty","predicate","selected","sort","next","source","added","removed","add","push","delete","getMultipleValuesInSingleSelectionError","Error","UniqueSelectionDispatcher","_listeners","id","name","listener","filter","registered","Éµfac","UniqueSelectionDispatcher_Factory","t","Éµprov","ÉµÉµdefineInjectable","token","factory","providedIn","ngInjectableDef","ngDevMode","ÉµsetClassMetadata","type","args"],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Observable, of, Subject } from 'rxjs';\nimport { Injectable, defineInjectable } from '@angular/core';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * @abstract\n * @template T\n */\nimport * as Éµngcc0 from '@angular/core';\nclass DataSource {\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * DataSource wrapper for a native array.\n * @template T\n */\nclass ArrayDataSource extends DataSource {\n    /**\n     * @param {?} _data\n     */\n    constructor(_data) {\n        super();\n        this._data = _data;\n    }\n    /**\n     * @return {?}\n     */\n    connect() {\n        return this._data instanceof Observable ? this._data : of(this._data);\n    }\n    /**\n     * @return {?}\n     */\n    disconnect() { }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * Class to be used to power selecting one or more options from a list.\n * @template T\n */\nclass SelectionModel {\n    /**\n     * @param {?=} _multiple\n     * @param {?=} initiallySelectedValues\n     * @param {?=} _emitChanges\n     */\n    constructor(_multiple = false, initiallySelectedValues, _emitChanges = true) {\n        this._multiple = _multiple;\n        this._emitChanges = _emitChanges;\n        /**\n         * Currently-selected values.\n         */\n        this._selection = new Set();\n        /**\n         * Keeps track of the deselected options that haven't been emitted by the change event.\n         */\n        this._deselectedToEmit = [];\n        /**\n         * Keeps track of the selected options that haven't been emitted by the change event.\n         */\n        this._selectedToEmit = [];\n        /**\n         * Event emitted when the value has changed.\n         */\n        this.changed = new Subject();\n        /**\n         * Event emitted when the value has changed.\n         * @deprecated Use `changed` instead.\n         * \\@breaking-change 8.0.0 To be changed to `changed`\n         */\n        this.onChange = this.changed;\n        if (initiallySelectedValues && initiallySelectedValues.length) {\n            if (_multiple) {\n                initiallySelectedValues.forEach(value => this._markSelected(value));\n            }\n            else {\n                this._markSelected(initiallySelectedValues[0]);\n            }\n            // Clear the array in order to avoid firing the change event for preselected values.\n            this._selectedToEmit.length = 0;\n        }\n    }\n    /**\n     * Selected values.\n     * @return {?}\n     */\n    get selected() {\n        if (!this._selected) {\n            this._selected = Array.from(this._selection.values());\n        }\n        return this._selected;\n    }\n    /**\n     * Selects a value or an array of values.\n     * @param {...?} values\n     * @return {?}\n     */\n    select(...values) {\n        this._verifyValueAssignment(values);\n        values.forEach(value => this._markSelected(value));\n        this._emitChangeEvent();\n    }\n    /**\n     * Deselects a value or an array of values.\n     * @param {...?} values\n     * @return {?}\n     */\n    deselect(...values) {\n        this._verifyValueAssignment(values);\n        values.forEach(value => this._unmarkSelected(value));\n        this._emitChangeEvent();\n    }\n    /**\n     * Toggles a value between selected and deselected.\n     * @param {?} value\n     * @return {?}\n     */\n    toggle(value) {\n        this.isSelected(value) ? this.deselect(value) : this.select(value);\n    }\n    /**\n     * Clears all of the selected values.\n     * @return {?}\n     */\n    clear() {\n        this._unmarkAll();\n        this._emitChangeEvent();\n    }\n    /**\n     * Determines whether a value is selected.\n     * @param {?} value\n     * @return {?}\n     */\n    isSelected(value) {\n        return this._selection.has(value);\n    }\n    /**\n     * Determines whether the model does not have a value.\n     * @return {?}\n     */\n    isEmpty() {\n        return this._selection.size === 0;\n    }\n    /**\n     * Determines whether the model has a value.\n     * @return {?}\n     */\n    hasValue() {\n        return !this.isEmpty();\n    }\n    /**\n     * Sorts the selected values based on a predicate function.\n     * @param {?=} predicate\n     * @return {?}\n     */\n    sort(predicate) {\n        if (this._multiple && this.selected) {\n            /** @type {?} */ ((this._selected)).sort(predicate);\n        }\n    }\n    /**\n     * Gets whether multiple values can be selected.\n     * @return {?}\n     */\n    isMultipleSelection() {\n        return this._multiple;\n    }\n    /**\n     * Emits a change event and clears the records of selected and deselected values.\n     * @return {?}\n     */\n    _emitChangeEvent() {\n        // Clear the selected values so they can be re-cached.\n        this._selected = null;\n        if (this._selectedToEmit.length || this._deselectedToEmit.length) {\n            this.changed.next({\n                source: this,\n                added: this._selectedToEmit,\n                removed: this._deselectedToEmit\n            });\n            this._deselectedToEmit = [];\n            this._selectedToEmit = [];\n        }\n    }\n    /**\n     * Selects a value.\n     * @param {?} value\n     * @return {?}\n     */\n    _markSelected(value) {\n        if (!this.isSelected(value)) {\n            if (!this._multiple) {\n                this._unmarkAll();\n            }\n            this._selection.add(value);\n            if (this._emitChanges) {\n                this._selectedToEmit.push(value);\n            }\n        }\n    }\n    /**\n     * Deselects a value.\n     * @param {?} value\n     * @return {?}\n     */\n    _unmarkSelected(value) {\n        if (this.isSelected(value)) {\n            this._selection.delete(value);\n            if (this._emitChanges) {\n                this._deselectedToEmit.push(value);\n            }\n        }\n    }\n    /**\n     * Clears out the selected values.\n     * @return {?}\n     */\n    _unmarkAll() {\n        if (!this.isEmpty()) {\n            this._selection.forEach(value => this._unmarkSelected(value));\n        }\n    }\n    /**\n     * Verifies the value assignment and throws an error if the specified value array is\n     * including multiple values while the selection model is not supporting multiple values.\n     * @param {?} values\n     * @return {?}\n     */\n    _verifyValueAssignment(values) {\n        if (values.length > 1 && !this._multiple) {\n            throw getMultipleValuesInSingleSelectionError();\n        }\n    }\n}\n/**\n * Returns an error that reports that multiple values are passed into a selection model\n * with a single value.\n * \\@docs-private\n * @return {?}\n */\nfunction getMultipleValuesInSingleSelectionError() {\n    return Error('Cannot pass multiple values into SelectionModel with single-value mode.');\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * Class to coordinate unique selection based on name.\n * Intended to be consumed as an Angular service.\n * This service is needed because native radio change events are only fired on the item currently\n * being selected, and we still need to uncheck the previous selection.\n *\n * This service does not *store* any IDs and names because they may change at any time, so it is\n * less error-prone if they are simply passed through when the events occur.\n */\nclass UniqueSelectionDispatcher {\n    constructor() {\n        this._listeners = [];\n    }\n    /**\n     * Notify other items that selection for the given name has been set.\n     * @param {?} id ID of the item.\n     * @param {?} name Name of the item.\n     * @return {?}\n     */\n    notify(id, name) {\n        for (let listener of this._listeners) {\n            listener(id, name);\n        }\n    }\n    /**\n     * Listen for future changes to item selection.\n     * @param {?} listener\n     * @return {?} Function used to deregister listener\n     */\n    listen(listener) {\n        this._listeners.push(listener);\n        return () => {\n            this._listeners = this._listeners.filter((registered) => {\n                return listener !== registered;\n            });\n        };\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this._listeners = [];\n    }\n}\nUniqueSelectionDispatcher.Éµfac = function UniqueSelectionDispatcher_Factory(t) { return new (t || UniqueSelectionDispatcher)(); };\nUniqueSelectionDispatcher.Éµprov = /*@__PURE__*/ Éµngcc0.ÉµÉµdefineInjectable({ token: UniqueSelectionDispatcher, factory: UniqueSelectionDispatcher.Éµfac, providedIn: 'root' });\n/** @nocollapse */ UniqueSelectionDispatcher.ngInjectableDef = defineInjectable({ factory: function UniqueSelectionDispatcher_Factory() { return new UniqueSelectionDispatcher(); }, token: UniqueSelectionDispatcher, providedIn: \"root\" });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && Éµngcc0.ÉµsetClassMetadata(UniqueSelectionDispatcher, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return []; }, null); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\nexport { UniqueSelectionDispatcher, ArrayDataSource, DataSource, getMultipleValuesInSingleSelectionError, SelectionModel };\n\n//# sourceMappingURL=collections.js.map"]},"metadata":{},"sourceType":"module"}