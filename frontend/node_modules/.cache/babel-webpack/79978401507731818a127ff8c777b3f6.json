{"ast":null,"code":"import { Subject } from '../Subject';\nimport { asyncScheduler } from '../scheduler/async';\nimport { Subscription } from '../Subscription';\nimport { operate } from '../util/lift';\nimport { OperatorSubscriber } from './OperatorSubscriber';\nimport { arrRemove } from '../util/arrRemove';\nimport { popScheduler } from '../util/args';\nexport function windowTime(windowTimeSpan) {\n  var _a, _b;\n\n  for (var _len = arguments.length, otherArgs = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    otherArgs[_key - 1] = arguments[_key];\n  }\n\n  var scheduler = (_a = popScheduler(otherArgs)) !== null && _a !== void 0 ? _a : asyncScheduler;\n  var windowCreationInterval = (_b = otherArgs[0]) !== null && _b !== void 0 ? _b : null;\n  var maxWindowSize = otherArgs[1] || Infinity;\n  return operate(function (source, subscriber) {\n    var windowRecords = [];\n    var restartOnClose = false;\n\n    var closeWindow = function closeWindow(record) {\n      var window = record.window,\n          subs = record.subs;\n      window.complete();\n      subs.unsubscribe();\n      arrRemove(windowRecords, record);\n      restartOnClose && startWindow();\n    };\n\n    var startWindow = function startWindow() {\n      if (windowRecords) {\n        var subs = new Subscription();\n        subscriber.add(subs);\n        var window = new Subject();\n        var record = {\n          window: window,\n          subs: subs,\n          seen: 0\n        };\n        windowRecords.push(record);\n        subscriber.next(window.asObservable());\n        subs.add(scheduler.schedule(function () {\n          return closeWindow(record);\n        }, windowTimeSpan));\n      }\n    };\n\n    windowCreationInterval !== null && windowCreationInterval >= 0 ? subscriber.add(scheduler.schedule(function () {\n      startWindow();\n      !this.closed && subscriber.add(this.schedule(null, windowCreationInterval));\n    }, windowCreationInterval)) : restartOnClose = true;\n    startWindow();\n\n    var loop = function loop(cb) {\n      return windowRecords.slice().forEach(cb);\n    };\n\n    var terminate = function terminate(cb) {\n      loop(function (_ref) {\n        var window = _ref.window;\n        return cb(window);\n      });\n      cb(subscriber);\n      subscriber.unsubscribe();\n    };\n\n    source.subscribe(new OperatorSubscriber(subscriber, function (value) {\n      loop(function (record) {\n        record.window.next(value);\n        maxWindowSize <= ++record.seen && closeWindow(record);\n      });\n    }, function () {\n      return terminate(function (consumer) {\n        return consumer.complete();\n      });\n    }, function (err) {\n      return terminate(function (consumer) {\n        return consumer.error(err);\n      });\n    }));\n    return function () {\n      windowRecords = null;\n    };\n  });\n} //# sourceMappingURL=windowTime.js.map","map":{"version":3,"sources":["/Users/adepertat/Dropbox/ECOLES/Openclassroom/P6_de_Pertat_Antoine/dwj-projet6/node_modules/rxjs/dist/esm/internal/operators/windowTime.js"],"names":["Subject","asyncScheduler","Subscription","operate","OperatorSubscriber","arrRemove","popScheduler","windowTime","windowTimeSpan","_a","_b","otherArgs","scheduler","windowCreationInterval","maxWindowSize","Infinity","source","subscriber","windowRecords","restartOnClose","closeWindow","record","window","subs","complete","unsubscribe","startWindow","add","seen","push","next","asObservable","schedule","closed","loop","cb","slice","forEach","terminate","subscribe","value","consumer","err","error"],"mappings":"AAAA,SAASA,OAAT,QAAwB,YAAxB;AACA,SAASC,cAAT,QAA+B,oBAA/B;AACA,SAASC,YAAT,QAA6B,iBAA7B;AACA,SAASC,OAAT,QAAwB,cAAxB;AACA,SAASC,kBAAT,QAAmC,sBAAnC;AACA,SAASC,SAAT,QAA0B,mBAA1B;AACA,SAASC,YAAT,QAA6B,cAA7B;AACA,OAAO,SAASC,UAAT,CAAoBC,cAApB,EAAkD;AACrD,MAAIC,EAAJ,EAAQC,EAAR;;AADqD,oCAAXC,SAAW;AAAXA,IAAAA,SAAW;AAAA;;AAErD,MAAMC,SAAS,GAAG,CAACH,EAAE,GAAGH,YAAY,CAACK,SAAD,CAAlB,MAAmC,IAAnC,IAA2CF,EAAE,KAAK,KAAK,CAAvD,GAA2DA,EAA3D,GAAgER,cAAlF;AACA,MAAMY,sBAAsB,GAAG,CAACH,EAAE,GAAGC,SAAS,CAAC,CAAD,CAAf,MAAwB,IAAxB,IAAgCD,EAAE,KAAK,KAAK,CAA5C,GAAgDA,EAAhD,GAAqD,IAApF;AACA,MAAMI,aAAa,GAAGH,SAAS,CAAC,CAAD,CAAT,IAAgBI,QAAtC;AACA,SAAOZ,OAAO,CAAC,UAACa,MAAD,EAASC,UAAT,EAAwB;AACnC,QAAIC,aAAa,GAAG,EAApB;AACA,QAAIC,cAAc,GAAG,KAArB;;AACA,QAAMC,WAAW,GAAG,SAAdA,WAAc,CAACC,MAAD,EAAY;AAC5B,UAAQC,MAAR,GAAyBD,MAAzB,CAAQC,MAAR;AAAA,UAAgBC,IAAhB,GAAyBF,MAAzB,CAAgBE,IAAhB;AACAD,MAAAA,MAAM,CAACE,QAAP;AACAD,MAAAA,IAAI,CAACE,WAAL;AACApB,MAAAA,SAAS,CAACa,aAAD,EAAgBG,MAAhB,CAAT;AACAF,MAAAA,cAAc,IAAIO,WAAW,EAA7B;AACH,KAND;;AAOA,QAAMA,WAAW,GAAG,SAAdA,WAAc,GAAM;AACtB,UAAIR,aAAJ,EAAmB;AACf,YAAMK,IAAI,GAAG,IAAIrB,YAAJ,EAAb;AACAe,QAAAA,UAAU,CAACU,GAAX,CAAeJ,IAAf;AACA,YAAMD,MAAM,GAAG,IAAItB,OAAJ,EAAf;AACA,YAAMqB,MAAM,GAAG;AACXC,UAAAA,MAAM,EAANA,MADW;AAEXC,UAAAA,IAAI,EAAJA,IAFW;AAGXK,UAAAA,IAAI,EAAE;AAHK,SAAf;AAKAV,QAAAA,aAAa,CAACW,IAAd,CAAmBR,MAAnB;AACAJ,QAAAA,UAAU,CAACa,IAAX,CAAgBR,MAAM,CAACS,YAAP,EAAhB;AACAR,QAAAA,IAAI,CAACI,GAAL,CAASf,SAAS,CAACoB,QAAV,CAAmB;AAAA,iBAAMZ,WAAW,CAACC,MAAD,CAAjB;AAAA,SAAnB,EAA8Cb,cAA9C,CAAT;AACH;AACJ,KAdD;;AAeAK,IAAAA,sBAAsB,KAAK,IAA3B,IAAmCA,sBAAsB,IAAI,CAA7D,GAEQI,UAAU,CAACU,GAAX,CAAef,SAAS,CAACoB,QAAV,CAAmB,YAAY;AAC1CN,MAAAA,WAAW;AACX,OAAC,KAAKO,MAAN,IAAgBhB,UAAU,CAACU,GAAX,CAAe,KAAKK,QAAL,CAAc,IAAd,EAAoBnB,sBAApB,CAAf,CAAhB;AACH,KAHc,EAGZA,sBAHY,CAAf,CAFR,GAMOM,cAAc,GAAG,IANxB;AAOAO,IAAAA,WAAW;;AACX,QAAMQ,IAAI,GAAG,SAAPA,IAAO,CAACC,EAAD;AAAA,aAAQjB,aAAa,CAACkB,KAAd,GAAsBC,OAAtB,CAA8BF,EAA9B,CAAR;AAAA,KAAb;;AACA,QAAMG,SAAS,GAAG,SAAZA,SAAY,CAACH,EAAD,EAAQ;AACtBD,MAAAA,IAAI,CAAC;AAAA,YAAGZ,MAAH,QAAGA,MAAH;AAAA,eAAgBa,EAAE,CAACb,MAAD,CAAlB;AAAA,OAAD,CAAJ;AACAa,MAAAA,EAAE,CAAClB,UAAD,CAAF;AACAA,MAAAA,UAAU,CAACQ,WAAX;AACH,KAJD;;AAKAT,IAAAA,MAAM,CAACuB,SAAP,CAAiB,IAAInC,kBAAJ,CAAuBa,UAAvB,EAAmC,UAACuB,KAAD,EAAW;AAC3DN,MAAAA,IAAI,CAAC,UAACb,MAAD,EAAY;AACbA,QAAAA,MAAM,CAACC,MAAP,CAAcQ,IAAd,CAAmBU,KAAnB;AACA1B,QAAAA,aAAa,IAAI,EAAEO,MAAM,CAACO,IAA1B,IAAkCR,WAAW,CAACC,MAAD,CAA7C;AACH,OAHG,CAAJ;AAIH,KALgB,EAKd;AAAA,aAAMiB,SAAS,CAAC,UAACG,QAAD;AAAA,eAAcA,QAAQ,CAACjB,QAAT,EAAd;AAAA,OAAD,CAAf;AAAA,KALc,EAKsC,UAACkB,GAAD;AAAA,aAASJ,SAAS,CAAC,UAACG,QAAD;AAAA,eAAcA,QAAQ,CAACE,KAAT,CAAeD,GAAf,CAAd;AAAA,OAAD,CAAlB;AAAA,KALtC,CAAjB;AAMA,WAAO,YAAM;AACTxB,MAAAA,aAAa,GAAG,IAAhB;AACH,KAFD;AAGH,GAhDa,CAAd;AAiDH,C,CACD","sourcesContent":["import { Subject } from '../Subject';\nimport { asyncScheduler } from '../scheduler/async';\nimport { Subscription } from '../Subscription';\nimport { operate } from '../util/lift';\nimport { OperatorSubscriber } from './OperatorSubscriber';\nimport { arrRemove } from '../util/arrRemove';\nimport { popScheduler } from '../util/args';\nexport function windowTime(windowTimeSpan, ...otherArgs) {\n    var _a, _b;\n    const scheduler = (_a = popScheduler(otherArgs)) !== null && _a !== void 0 ? _a : asyncScheduler;\n    const windowCreationInterval = (_b = otherArgs[0]) !== null && _b !== void 0 ? _b : null;\n    const maxWindowSize = otherArgs[1] || Infinity;\n    return operate((source, subscriber) => {\n        let windowRecords = [];\n        let restartOnClose = false;\n        const closeWindow = (record) => {\n            const { window, subs } = record;\n            window.complete();\n            subs.unsubscribe();\n            arrRemove(windowRecords, record);\n            restartOnClose && startWindow();\n        };\n        const startWindow = () => {\n            if (windowRecords) {\n                const subs = new Subscription();\n                subscriber.add(subs);\n                const window = new Subject();\n                const record = {\n                    window,\n                    subs,\n                    seen: 0,\n                };\n                windowRecords.push(record);\n                subscriber.next(window.asObservable());\n                subs.add(scheduler.schedule(() => closeWindow(record), windowTimeSpan));\n            }\n        };\n        windowCreationInterval !== null && windowCreationInterval >= 0\n            ?\n                subscriber.add(scheduler.schedule(function () {\n                    startWindow();\n                    !this.closed && subscriber.add(this.schedule(null, windowCreationInterval));\n                }, windowCreationInterval))\n            : (restartOnClose = true);\n        startWindow();\n        const loop = (cb) => windowRecords.slice().forEach(cb);\n        const terminate = (cb) => {\n            loop(({ window }) => cb(window));\n            cb(subscriber);\n            subscriber.unsubscribe();\n        };\n        source.subscribe(new OperatorSubscriber(subscriber, (value) => {\n            loop((record) => {\n                record.window.next(value);\n                maxWindowSize <= ++record.seen && closeWindow(record);\n            });\n        }, () => terminate((consumer) => consumer.complete()), (err) => terminate((consumer) => consumer.error(err))));\n        return () => {\n            windowRecords = null;\n        };\n    });\n}\n//# sourceMappingURL=windowTime.js.map"]},"metadata":{},"sourceType":"module"}