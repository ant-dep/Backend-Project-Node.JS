{"ast":null,"code":"import _get from \"/Users/adepertat/Dropbox/ECOLES/Openclassroom/P6_de_Pertat_Antoine/AntoinedePertat_6_240521/frontend/node_modules/@babel/runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"/Users/adepertat/Dropbox/ECOLES/Openclassroom/P6_de_Pertat_Antoine/AntoinedePertat_6_240521/frontend/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/adepertat/Dropbox/ECOLES/Openclassroom/P6_de_Pertat_Antoine/AntoinedePertat_6_240521/frontend/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/adepertat/Dropbox/ECOLES/Openclassroom/P6_de_Pertat_Antoine/AntoinedePertat_6_240521/frontend/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _toConsumableArray from \"/Users/adepertat/Dropbox/ECOLES/Openclassroom/P6_de_Pertat_Antoine/AntoinedePertat_6_240521/frontend/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"/Users/adepertat/Dropbox/ECOLES/Openclassroom/P6_de_Pertat_Antoine/AntoinedePertat_6_240521/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/adepertat/Dropbox/ECOLES/Openclassroom/P6_de_Pertat_Antoine/AntoinedePertat_6_240521/frontend/node_modules/@babel/runtime/helpers/esm/createClass\";\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { InjectionToken, Component, ViewEncapsulation, ElementRef, Input, Optional, ContentChildren, Directive, ChangeDetectionStrategy, Inject, NgModule } from '@angular/core';\nimport { MatLine, setLines, MatLineModule, MatCommonModule } from '@angular/material/core';\nimport { coerceNumberProperty } from '@angular/cdk/coercion';\nimport { Directionality } from '@angular/cdk/bidi';\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/** *\n * Injection token used to provide a grid list to a tile and to avoid circular imports.\n * \\@docs-private\n  @type {?} */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/bidi';\nvar _c0 = [\"*\"];\nvar _c1 = [[[\"\", \"mat-grid-avatar\", \"\"], [\"\", \"matGridAvatar\", \"\"]], [[\"\", \"mat-line\", \"\"], [\"\", \"matLine\", \"\"]], \"*\"];\nvar _c2 = [\"[mat-grid-avatar], [matGridAvatar]\", \"[mat-line], [matLine]\", \"*\"];\nvar _c3 = \".mat-grid-list{display:block;position:relative}.mat-grid-tile{display:block;position:absolute;overflow:hidden}.mat-grid-tile .mat-figure{top:0;left:0;right:0;bottom:0;position:absolute;display:flex;align-items:center;justify-content:center;height:100%;padding:0;margin:0}.mat-grid-tile .mat-grid-tile-footer,.mat-grid-tile .mat-grid-tile-header{display:flex;align-items:center;height:48px;color:#fff;background:rgba(0,0,0,.38);overflow:hidden;padding:0 16px;position:absolute;left:0;right:0}.mat-grid-tile .mat-grid-tile-footer>*,.mat-grid-tile .mat-grid-tile-header>*{margin:0;padding:0;font-weight:400;font-size:inherit}.mat-grid-tile .mat-grid-tile-footer.mat-2-line,.mat-grid-tile .mat-grid-tile-header.mat-2-line{height:68px}.mat-grid-tile .mat-grid-list-text{display:flex;flex-direction:column;width:100%;box-sizing:border-box;overflow:hidden}.mat-grid-tile .mat-grid-list-text>*{margin:0;padding:0;font-weight:400;font-size:inherit}.mat-grid-tile .mat-grid-list-text:empty{display:none}.mat-grid-tile .mat-grid-tile-header{top:0}.mat-grid-tile .mat-grid-tile-footer{bottom:0}.mat-grid-tile .mat-grid-avatar{padding-right:16px}[dir=rtl] .mat-grid-tile .mat-grid-avatar{padding-right:0;padding-left:16px}.mat-grid-tile .mat-grid-avatar:empty{display:none}\";\nvar MAT_GRID_LIST = new InjectionToken('MAT_GRID_LIST');\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\nvar MatGridTile = /*#__PURE__*/function () {\n  /**\n   * @param {?} _element\n   * @param {?=} _gridList\n   */\n  function MatGridTile(_element, _gridList) {\n    _classCallCheck(this, MatGridTile);\n\n    this._element = _element;\n    this._gridList = _gridList;\n    this._rowspan = 1;\n    this._colspan = 1;\n  }\n  /**\n   * Amount of rows that the grid tile takes up.\n   * @return {?}\n   */\n\n\n  _createClass(MatGridTile, [{\n    key: \"rowspan\",\n    get: function get() {\n      return this._rowspan;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ,\n    set: function set(value) {\n      this._rowspan = Math.round(coerceNumberProperty(value));\n    }\n    /**\n     * Amount of columns that the grid tile takes up.\n     * @return {?}\n     */\n\n  }, {\n    key: \"colspan\",\n    get: function get() {\n      return this._colspan;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ,\n    set: function set(value) {\n      this._colspan = Math.round(coerceNumberProperty(value));\n    }\n    /**\n     * Sets the style of the grid-tile element.  Needs to be set manually to avoid\n     * \"Changed after checked\" errors that would occur with HostBinding.\n     * @param {?} property\n     * @param {?} value\n     * @return {?}\n     */\n\n  }, {\n    key: \"_setStyle\",\n    value: function _setStyle(property, value) {\n      /** @type {?} */\n      this._element.nativeElement.style[property] = value;\n    }\n  }]);\n\n  return MatGridTile;\n}();\n\nMatGridTile.ɵfac = function MatGridTile_Factory(t) {\n  return new (t || MatGridTile)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(MAT_GRID_LIST, 8));\n};\n\nMatGridTile.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n  type: MatGridTile,\n  selectors: [[\"mat-grid-tile\"]],\n  hostAttrs: [1, \"mat-grid-tile\"],\n  inputs: {\n    rowspan: \"rowspan\",\n    colspan: \"colspan\"\n  },\n  exportAs: [\"matGridTile\"],\n  ngContentSelectors: _c0,\n  decls: 2,\n  vars: 0,\n  consts: [[1, \"mat-figure\"]],\n  template: function MatGridTile_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵprojectionDef();\n      ɵngcc0.ɵɵelementStart(0, \"figure\", 0);\n      ɵngcc0.ɵɵprojection(1);\n      ɵngcc0.ɵɵelementEnd();\n    }\n  },\n  styles: [_c3],\n  encapsulation: 2,\n  changeDetection: 0\n});\n/** @nocollapse */\n\nMatGridTile.ctorParameters = function () {\n  return [{\n    type: ElementRef\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Optional\n    }, {\n      type: Inject,\n      args: [MAT_GRID_LIST]\n    }]\n  }];\n};\n\nMatGridTile.propDecorators = {\n  rowspan: [{\n    type: Input\n  }],\n  colspan: [{\n    type: Input\n  }]\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatGridTile, [{\n    type: Component,\n    args: [{\n      selector: 'mat-grid-tile',\n      exportAs: 'matGridTile',\n      host: {\n        'class': 'mat-grid-tile'\n      },\n      template: \"<figure class=\\\"mat-figure\\\"><ng-content></ng-content></figure>\",\n      styles: [\".mat-grid-list{display:block;position:relative}.mat-grid-tile{display:block;position:absolute;overflow:hidden}.mat-grid-tile .mat-figure{top:0;left:0;right:0;bottom:0;position:absolute;display:flex;align-items:center;justify-content:center;height:100%;padding:0;margin:0}.mat-grid-tile .mat-grid-tile-footer,.mat-grid-tile .mat-grid-tile-header{display:flex;align-items:center;height:48px;color:#fff;background:rgba(0,0,0,.38);overflow:hidden;padding:0 16px;position:absolute;left:0;right:0}.mat-grid-tile .mat-grid-tile-footer>*,.mat-grid-tile .mat-grid-tile-header>*{margin:0;padding:0;font-weight:400;font-size:inherit}.mat-grid-tile .mat-grid-tile-footer.mat-2-line,.mat-grid-tile .mat-grid-tile-header.mat-2-line{height:68px}.mat-grid-tile .mat-grid-list-text{display:flex;flex-direction:column;width:100%;box-sizing:border-box;overflow:hidden}.mat-grid-tile .mat-grid-list-text>*{margin:0;padding:0;font-weight:400;font-size:inherit}.mat-grid-tile .mat-grid-list-text:empty{display:none}.mat-grid-tile .mat-grid-tile-header{top:0}.mat-grid-tile .mat-grid-tile-footer{bottom:0}.mat-grid-tile .mat-grid-avatar{padding-right:16px}[dir=rtl] .mat-grid-tile .mat-grid-avatar{padding-right:0;padding-left:16px}.mat-grid-tile .mat-grid-avatar:empty{display:none}\"],\n      encapsulation: ViewEncapsulation.None,\n      changeDetection: ChangeDetectionStrategy.OnPush\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ElementRef\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [MAT_GRID_LIST]\n      }]\n    }];\n  }, {\n    rowspan: [{\n      type: Input\n    }],\n    colspan: [{\n      type: Input\n    }]\n  });\n})();\n\nvar MatGridTileText = /*#__PURE__*/function () {\n  /**\n   * @param {?} _element\n   */\n  function MatGridTileText(_element) {\n    _classCallCheck(this, MatGridTileText);\n\n    this._element = _element;\n  }\n  /**\n   * @return {?}\n   */\n\n\n  _createClass(MatGridTileText, [{\n    key: \"ngAfterContentInit\",\n    value: function ngAfterContentInit() {\n      setLines(this._lines, this._element);\n    }\n  }]);\n\n  return MatGridTileText;\n}();\n\nMatGridTileText.ɵfac = function MatGridTileText_Factory(t) {\n  return new (t || MatGridTileText)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef));\n};\n\nMatGridTileText.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n  type: MatGridTileText,\n  selectors: [[\"mat-grid-tile-header\"], [\"mat-grid-tile-footer\"]],\n  contentQueries: function MatGridTileText_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵcontentQuery(dirIndex, MatLine, 4);\n    }\n\n    if (rf & 2) {\n      var _t;\n\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._lines = _t);\n    }\n  },\n  ngContentSelectors: _c2,\n  decls: 4,\n  vars: 0,\n  consts: [[1, \"mat-grid-list-text\"]],\n  template: function MatGridTileText_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵprojectionDef(_c1);\n      ɵngcc0.ɵɵprojection(0);\n      ɵngcc0.ɵɵelementStart(1, \"div\", 0);\n      ɵngcc0.ɵɵprojection(2, 1);\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵprojection(3, 2);\n    }\n  },\n  encapsulation: 2,\n  changeDetection: 0\n});\n/** @nocollapse */\n\nMatGridTileText.ctorParameters = function () {\n  return [{\n    type: ElementRef\n  }];\n};\n\nMatGridTileText.propDecorators = {\n  _lines: [{\n    type: ContentChildren,\n    args: [MatLine]\n  }]\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatGridTileText, [{\n    type: Component,\n    args: [{\n      selector: 'mat-grid-tile-header, mat-grid-tile-footer',\n      template: \"<ng-content select=\\\"[mat-grid-avatar], [matGridAvatar]\\\"></ng-content><div class=\\\"mat-grid-list-text\\\"><ng-content select=\\\"[mat-line], [matLine]\\\"></ng-content></div><ng-content></ng-content>\",\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      encapsulation: ViewEncapsulation.None\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ElementRef\n    }];\n  }, {\n    _lines: [{\n      type: ContentChildren,\n      args: [MatLine]\n    }]\n  });\n})();\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * \\@docs-private\n */\n\n\nvar MatGridAvatarCssMatStyler = function MatGridAvatarCssMatStyler() {\n  _classCallCheck(this, MatGridAvatarCssMatStyler);\n};\n\nMatGridAvatarCssMatStyler.ɵfac = function MatGridAvatarCssMatStyler_Factory(t) {\n  return new (t || MatGridAvatarCssMatStyler)();\n};\n\nMatGridAvatarCssMatStyler.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n  type: MatGridAvatarCssMatStyler,\n  selectors: [[\"\", \"mat-grid-avatar\", \"\"], [\"\", \"matGridAvatar\", \"\"]],\n  hostAttrs: [1, \"mat-grid-avatar\"]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatGridAvatarCssMatStyler, [{\n    type: Directive,\n    args: [{\n      selector: '[mat-grid-avatar], [matGridAvatar]',\n      host: {\n        'class': 'mat-grid-avatar'\n      }\n    }]\n  }], null, null);\n})();\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * \\@docs-private\n */\n\n\nvar MatGridTileHeaderCssMatStyler = function MatGridTileHeaderCssMatStyler() {\n  _classCallCheck(this, MatGridTileHeaderCssMatStyler);\n};\n\nMatGridTileHeaderCssMatStyler.ɵfac = function MatGridTileHeaderCssMatStyler_Factory(t) {\n  return new (t || MatGridTileHeaderCssMatStyler)();\n};\n\nMatGridTileHeaderCssMatStyler.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n  type: MatGridTileHeaderCssMatStyler,\n  selectors: [[\"mat-grid-tile-header\"]],\n  hostAttrs: [1, \"mat-grid-tile-header\"]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatGridTileHeaderCssMatStyler, [{\n    type: Directive,\n    args: [{\n      selector: 'mat-grid-tile-header',\n      host: {\n        'class': 'mat-grid-tile-header'\n      }\n    }]\n  }], null, null);\n})();\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * \\@docs-private\n */\n\n\nvar MatGridTileFooterCssMatStyler = function MatGridTileFooterCssMatStyler() {\n  _classCallCheck(this, MatGridTileFooterCssMatStyler);\n};\n\nMatGridTileFooterCssMatStyler.ɵfac = function MatGridTileFooterCssMatStyler_Factory(t) {\n  return new (t || MatGridTileFooterCssMatStyler)();\n};\n\nMatGridTileFooterCssMatStyler.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n  type: MatGridTileFooterCssMatStyler,\n  selectors: [[\"mat-grid-tile-footer\"]],\n  hostAttrs: [1, \"mat-grid-tile-footer\"]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatGridTileFooterCssMatStyler, [{\n    type: Directive,\n    args: [{\n      selector: 'mat-grid-tile-footer',\n      host: {\n        'class': 'mat-grid-tile-footer'\n      }\n    }]\n  }], null, null);\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * Class for determining, from a list of tiles, the (row, col) position of each of those tiles\n * in the grid. This is necessary (rather than just rendering the tiles in normal document flow)\n * because the tiles can have a rowspan.\n *\n * The positioning algorithm greedily places each tile as soon as it encounters a gap in the grid\n * large enough to accommodate it so that the tiles still render in the same order in which they\n * are given.\n *\n * The basis of the algorithm is the use of an array to track the already placed tiles. Each\n * element of the array corresponds to a column, and the value indicates how many cells in that\n * column are already occupied; zero indicates an empty cell. Moving \"down\" to the next row\n * decrements each value in the tracking array (indicating that the column is one cell closer to\n * being free).\n *\n * \\@docs-private\n */\n\n\nvar TileCoordinator = /*#__PURE__*/function () {\n  function TileCoordinator() {\n    _classCallCheck(this, TileCoordinator);\n\n    /**\n     * Index at which the search for the next gap will start.\n     */\n    this.columnIndex = 0;\n    /**\n     * The current row index.\n     */\n\n    this.rowIndex = 0;\n  }\n  /**\n   * Gets the total number of rows occupied by tiles\n   * @return {?}\n   */\n\n\n  _createClass(TileCoordinator, [{\n    key: \"rowCount\",\n    get: function get() {\n      return this.rowIndex + 1;\n    }\n    /**\n     * Gets the total span of rows occupied by tiles.\n     * Ex: A list with 1 row that contains a tile with rowspan 2 will have a total rowspan of 2.\n     * @return {?}\n     */\n\n  }, {\n    key: \"rowspan\",\n    get: function get() {\n      /** @type {?} */\n      var lastRowMax = Math.max.apply(Math, _toConsumableArray(this.tracker)); // if any of the tiles has a rowspan that pushes it beyond the total row count,\n      // add the difference to the rowcount\n\n      return lastRowMax > 1 ? this.rowCount + lastRowMax - 1 : this.rowCount;\n    }\n    /**\n     * Updates the tile positions.\n     * @param {?} numColumns Amount of columns in the grid.\n     * @param {?} tiles\n     * @return {?}\n     */\n\n  }, {\n    key: \"update\",\n    value: function update(numColumns, tiles) {\n      var _this = this;\n\n      this.columnIndex = 0;\n      this.rowIndex = 0;\n      this.tracker = new Array(numColumns);\n      this.tracker.fill(0, 0, this.tracker.length);\n      this.positions = tiles.map(function (tile) {\n        return _this._trackTile(tile);\n      });\n    }\n    /**\n     * Calculates the row and col position of a tile.\n     * @param {?} tile\n     * @return {?}\n     */\n\n  }, {\n    key: \"_trackTile\",\n    value: function _trackTile(tile) {\n      /** @type {?} */\n      var gapStartIndex = this._findMatchingGap(tile.colspan); // Place tile in the resulting gap.\n\n\n      this._markTilePosition(gapStartIndex, tile); // The next time we look for a gap, the search will start at columnIndex, which should be\n      // immediately after the tile that has just been placed.\n\n\n      this.columnIndex = gapStartIndex + tile.colspan;\n      return new TilePosition(this.rowIndex, gapStartIndex);\n    }\n    /**\n     * Finds the next available space large enough to fit the tile.\n     * @param {?} tileCols\n     * @return {?}\n     */\n\n  }, {\n    key: \"_findMatchingGap\",\n    value: function _findMatchingGap(tileCols) {\n      if (tileCols > this.tracker.length) {\n        throw Error(\"mat-grid-list: tile with colspan \".concat(tileCols, \" is wider than \") + \"grid with cols=\\\"\".concat(this.tracker.length, \"\\\".\"));\n      }\n      /** @type {?} */\n\n\n      var gapStartIndex = -1;\n      /** @type {?} */\n\n      var gapEndIndex = -1; // Look for a gap large enough to fit the given tile. Empty spaces are marked with a zero.\n\n      do {\n        // If we've reached the end of the row, go to the next row.\n        if (this.columnIndex + tileCols > this.tracker.length) {\n          this._nextRow();\n\n          gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\n          gapEndIndex = this._findGapEndIndex(gapStartIndex);\n          continue;\n        }\n\n        gapStartIndex = this.tracker.indexOf(0, this.columnIndex); // If there are no more empty spaces in this row at all, move on to the next row.\n\n        if (gapStartIndex == -1) {\n          this._nextRow();\n\n          gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\n          gapEndIndex = this._findGapEndIndex(gapStartIndex);\n          continue;\n        }\n\n        gapEndIndex = this._findGapEndIndex(gapStartIndex); // If a gap large enough isn't found, we want to start looking immediately after the current\n        // gap on the next iteration.\n\n        this.columnIndex = gapStartIndex + 1; // Continue iterating until we find a gap wide enough for this tile. Since gapEndIndex is\n        // exclusive, gapEndIndex is 0 means we didn't find a gap and should continue.\n      } while (gapEndIndex - gapStartIndex < tileCols || gapEndIndex == 0); // If we still didn't manage to find a gap, ensure that the index is\n      // at least zero so the tile doesn't get pulled out of the grid.\n\n\n      return Math.max(gapStartIndex, 0);\n    }\n    /**\n     * Move \"down\" to the next row.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_nextRow\",\n    value: function _nextRow() {\n      this.columnIndex = 0;\n      this.rowIndex++; // Decrement all spaces by one to reflect moving down one row.\n\n      for (var i = 0; i < this.tracker.length; i++) {\n        this.tracker[i] = Math.max(0, this.tracker[i] - 1);\n      }\n    }\n    /**\n     * Finds the end index (exclusive) of a gap given the index from which to start looking.\n     * The gap ends when a non-zero value is found.\n     * @param {?} gapStartIndex\n     * @return {?}\n     */\n\n  }, {\n    key: \"_findGapEndIndex\",\n    value: function _findGapEndIndex(gapStartIndex) {\n      for (var i = gapStartIndex + 1; i < this.tracker.length; i++) {\n        if (this.tracker[i] != 0) {\n          return i;\n        }\n      } // The gap ends with the end of the row.\n\n\n      return this.tracker.length;\n    }\n    /**\n     * Update the tile tracker to account for the given tile in the given space.\n     * @param {?} start\n     * @param {?} tile\n     * @return {?}\n     */\n\n  }, {\n    key: \"_markTilePosition\",\n    value: function _markTilePosition(start, tile) {\n      for (var i = 0; i < tile.colspan; i++) {\n        this.tracker[start + i] = tile.rowspan;\n      }\n    }\n  }]);\n\n  return TileCoordinator;\n}();\n/**\n * Simple data structure for tile position (row, col).\n * \\@docs-private\n */\n\n\nvar TilePosition =\n/**\n * @param {?} row\n * @param {?} col\n */\nfunction TilePosition(row, col) {\n  _classCallCheck(this, TilePosition);\n\n  this.row = row;\n  this.col = col;\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/** *\n * RegExp that can be used to check whether a value will\n * be allowed inside a CSS `calc()` expression.\n  @type {?} */\n\n\nvar cssCalcAllowedValue = /^-?\\d+((\\.\\d+)?[A-Za-z%$]?)+$/;\n/**\n * Sets the style properties for an individual tile, given the position calculated by the\n * Tile Coordinator.\n * \\@docs-private\n * @abstract\n */\n\nvar TileStyler = /*#__PURE__*/function () {\n  function TileStyler() {\n    _classCallCheck(this, TileStyler);\n\n    this._rows = 0;\n    this._rowspan = 0;\n  }\n  /**\n   * Adds grid-list layout info once it is available. Cannot be processed in the constructor\n   * because these properties haven't been calculated by that point.\n   *\n   * @param {?} gutterSize Size of the grid's gutter.\n   * @param {?} tracker Instance of the TileCoordinator.\n   * @param {?} cols Amount of columns in the grid.\n   * @param {?} direction Layout direction of the grid.\n   * @return {?}\n   */\n\n\n  _createClass(TileStyler, [{\n    key: \"init\",\n    value: function init(gutterSize, tracker, cols, direction) {\n      this._gutterSize = normalizeUnits(gutterSize);\n      this._rows = tracker.rowCount;\n      this._rowspan = tracker.rowspan;\n      this._cols = cols;\n      this._direction = direction;\n    }\n    /**\n     * Computes the amount of space a single 1x1 tile would take up (width or height).\n     * Used as a basis for other calculations.\n     * @param {?} sizePercent Percent of the total grid-list space that one 1x1 tile would take up.\n     * @param {?} gutterFraction Fraction of the gutter size taken up by one 1x1 tile.\n     * @return {?} The size of a 1x1 tile as an expression that can be evaluated via CSS calc().\n     */\n\n  }, {\n    key: \"getBaseTileSize\",\n    value: function getBaseTileSize(sizePercent, gutterFraction) {\n      // Take the base size percent (as would be if evenly dividing the size between cells),\n      // and then subtracting the size of one gutter. However, since there are no gutters on the\n      // edges, each tile only uses a fraction (gutterShare = numGutters / numCells) of the gutter\n      // size. (Imagine having one gutter per tile, and then breaking up the extra gutter on the\n      // edge evenly among the cells).\n      return \"(\".concat(sizePercent, \"% - (\").concat(this._gutterSize, \" * \").concat(gutterFraction, \"))\");\n    }\n    /**\n     * Gets The horizontal or vertical position of a tile, e.g., the 'top' or 'left' property value.\n     * @param {?} baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n     * @param {?} offset Number of tiles that have already been rendered in the row/column.\n     * @return {?} Position of the tile as a CSS calc() expression.\n     */\n\n  }, {\n    key: \"getTilePosition\",\n    value: function getTilePosition(baseSize, offset) {\n      // The position comes the size of a 1x1 tile plus gutter for each previous tile in the\n      // row/column (offset).\n      return offset === 0 ? '0' : calc(\"(\".concat(baseSize, \" + \").concat(this._gutterSize, \") * \").concat(offset));\n    }\n    /**\n     * Gets the actual size of a tile, e.g., width or height, taking rowspan or colspan into account.\n     * @param {?} baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n     * @param {?} span The tile's rowspan or colspan.\n     * @return {?} Size of the tile as a CSS calc() expression.\n     */\n\n  }, {\n    key: \"getTileSize\",\n    value: function getTileSize(baseSize, span) {\n      return \"(\".concat(baseSize, \" * \").concat(span, \") + (\").concat(span - 1, \" * \").concat(this._gutterSize, \")\");\n    }\n    /**\n     * Sets the style properties to be applied to a tile for the given row and column index.\n     * @param {?} tile Tile to which to apply the styling.\n     * @param {?} rowIndex Index of the tile's row.\n     * @param {?} colIndex Index of the tile's column.\n     * @return {?}\n     */\n\n  }, {\n    key: \"setStyle\",\n    value: function setStyle(tile, rowIndex, colIndex) {\n      /** @type {?} */\n      var percentWidthPerTile = 100 / this._cols;\n      /** @type {?} */\n\n      var gutterWidthFractionPerTile = (this._cols - 1) / this._cols;\n      this.setColStyles(tile, colIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n      this.setRowStyles(tile, rowIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n    }\n    /**\n     * Sets the horizontal placement of the tile in the list.\n     * @param {?} tile\n     * @param {?} colIndex\n     * @param {?} percentWidth\n     * @param {?} gutterWidth\n     * @return {?}\n     */\n\n  }, {\n    key: \"setColStyles\",\n    value: function setColStyles(tile, colIndex, percentWidth, gutterWidth) {\n      /** @type {?} */\n      var baseTileWidth = this.getBaseTileSize(percentWidth, gutterWidth);\n      /** @type {?} */\n\n      var side = this._direction === 'rtl' ? 'right' : 'left';\n\n      tile._setStyle(side, this.getTilePosition(baseTileWidth, colIndex));\n\n      tile._setStyle('width', calc(this.getTileSize(baseTileWidth, tile.colspan)));\n    }\n    /**\n     * Calculates the total size taken up by gutters across one axis of a list.\n     * @return {?}\n     */\n\n  }, {\n    key: \"getGutterSpan\",\n    value: function getGutterSpan() {\n      return \"\".concat(this._gutterSize, \" * (\").concat(this._rowspan, \" - 1)\");\n    }\n    /**\n     * Calculates the total size taken up by tiles across one axis of a list.\n     * @param {?} tileHeight Height of the tile.\n     * @return {?}\n     */\n\n  }, {\n    key: \"getTileSpan\",\n    value: function getTileSpan(tileHeight) {\n      return \"\".concat(this._rowspan, \" * \").concat(this.getTileSize(tileHeight, 1));\n    }\n    /**\n     * Calculates the computed height and returns the correct style property to set.\n     * This method can be implemented by each type of TileStyler.\n     * \\@docs-private\n     * @return {?}\n     */\n\n  }, {\n    key: \"getComputedHeight\",\n    value: function getComputedHeight() {\n      return null;\n    }\n  }]);\n\n  return TileStyler;\n}();\n/**\n * This type of styler is instantiated when the user passes in a fixed row height.\n * Example `<mat-grid-list cols=\"3\" rowHeight=\"100px\">`\n * \\@docs-private\n */\n\n\nvar FixedTileStyler = /*#__PURE__*/function (_TileStyler) {\n  _inherits(FixedTileStyler, _TileStyler);\n\n  var _super = _createSuper(FixedTileStyler);\n\n  /**\n   * @param {?} fixedRowHeight\n   */\n  function FixedTileStyler(fixedRowHeight) {\n    var _this2;\n\n    _classCallCheck(this, FixedTileStyler);\n\n    _this2 = _super.call(this);\n    _this2.fixedRowHeight = fixedRowHeight;\n    return _this2;\n  }\n  /**\n   * @param {?} gutterSize\n   * @param {?} tracker\n   * @param {?} cols\n   * @param {?} direction\n   * @return {?}\n   */\n\n\n  _createClass(FixedTileStyler, [{\n    key: \"init\",\n    value: function init(gutterSize, tracker, cols, direction) {\n      _get(_getPrototypeOf(FixedTileStyler.prototype), \"init\", this).call(this, gutterSize, tracker, cols, direction);\n\n      this.fixedRowHeight = normalizeUnits(this.fixedRowHeight);\n\n      if (!cssCalcAllowedValue.test(this.fixedRowHeight)) {\n        throw Error(\"Invalid value \\\"\".concat(this.fixedRowHeight, \"\\\" set as rowHeight.\"));\n      }\n    }\n    /**\n     * @param {?} tile\n     * @param {?} rowIndex\n     * @return {?}\n     */\n\n  }, {\n    key: \"setRowStyles\",\n    value: function setRowStyles(tile, rowIndex) {\n      tile._setStyle('top', this.getTilePosition(this.fixedRowHeight, rowIndex));\n\n      tile._setStyle('height', calc(this.getTileSize(this.fixedRowHeight, tile.rowspan)));\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"getComputedHeight\",\n    value: function getComputedHeight() {\n      return ['height', calc(\"\".concat(this.getTileSpan(this.fixedRowHeight), \" + \").concat(this.getGutterSpan()))];\n    }\n    /**\n     * @param {?} list\n     * @return {?}\n     */\n\n  }, {\n    key: \"reset\",\n    value: function reset(list) {\n      list._setListStyle(['height', null]);\n\n      if (list._tiles) {\n        list._tiles.forEach(function (tile) {\n          tile._setStyle('top', null);\n\n          tile._setStyle('height', null);\n        });\n      }\n    }\n  }]);\n\n  return FixedTileStyler;\n}(TileStyler);\n/**\n * This type of styler is instantiated when the user passes in a width:height ratio\n * for the row height.  Example `<mat-grid-list cols=\"3\" rowHeight=\"3:1\">`\n * \\@docs-private\n */\n\n\nvar RatioTileStyler = /*#__PURE__*/function (_TileStyler2) {\n  _inherits(RatioTileStyler, _TileStyler2);\n\n  var _super2 = _createSuper(RatioTileStyler);\n\n  /**\n   * @param {?} value\n   */\n  function RatioTileStyler(value) {\n    var _this3;\n\n    _classCallCheck(this, RatioTileStyler);\n\n    _this3 = _super2.call(this);\n\n    _this3._parseRatio(value);\n\n    return _this3;\n  }\n  /**\n   * @param {?} tile\n   * @param {?} rowIndex\n   * @param {?} percentWidth\n   * @param {?} gutterWidth\n   * @return {?}\n   */\n\n\n  _createClass(RatioTileStyler, [{\n    key: \"setRowStyles\",\n    value: function setRowStyles(tile, rowIndex, percentWidth, gutterWidth) {\n      /** @type {?} */\n      var percentHeightPerTile = percentWidth / this.rowHeightRatio;\n      this.baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterWidth); // Use padding-top and margin-top to maintain the given aspect ratio, as\n      // a percentage-based value for these properties is applied versus the *width* of the\n      // containing block. See http://www.w3.org/TR/CSS2/box.html#margin-properties\n\n      tile._setStyle('marginTop', this.getTilePosition(this.baseTileHeight, rowIndex));\n\n      tile._setStyle('paddingTop', calc(this.getTileSize(this.baseTileHeight, tile.rowspan)));\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"getComputedHeight\",\n    value: function getComputedHeight() {\n      return ['paddingBottom', calc(\"\".concat(this.getTileSpan(this.baseTileHeight), \" + \").concat(this.getGutterSpan()))];\n    }\n    /**\n     * @param {?} list\n     * @return {?}\n     */\n\n  }, {\n    key: \"reset\",\n    value: function reset(list) {\n      list._setListStyle(['paddingBottom', null]);\n\n      list._tiles.forEach(function (tile) {\n        tile._setStyle('marginTop', null);\n\n        tile._setStyle('paddingTop', null);\n      });\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n\n  }, {\n    key: \"_parseRatio\",\n    value: function _parseRatio(value) {\n      /** @type {?} */\n      var ratioParts = value.split(':');\n\n      if (ratioParts.length !== 2) {\n        throw Error(\"mat-grid-list: invalid ratio given for row-height: \\\"\".concat(value, \"\\\"\"));\n      }\n\n      this.rowHeightRatio = parseFloat(ratioParts[0]) / parseFloat(ratioParts[1]);\n    }\n  }]);\n\n  return RatioTileStyler;\n}(TileStyler);\n/**\n * This type of styler is instantiated when the user selects a \"fit\" row height mode.\n * In other words, the row height will reflect the total height of the container divided\n * by the number of rows.  Example `<mat-grid-list cols=\"3\" rowHeight=\"fit\">`\n *\n * \\@docs-private\n */\n\n\nvar FitTileStyler = /*#__PURE__*/function (_TileStyler3) {\n  _inherits(FitTileStyler, _TileStyler3);\n\n  var _super3 = _createSuper(FitTileStyler);\n\n  function FitTileStyler() {\n    _classCallCheck(this, FitTileStyler);\n\n    return _super3.apply(this, arguments);\n  }\n\n  _createClass(FitTileStyler, [{\n    key: \"setRowStyles\",\n    value:\n    /**\n     * @param {?} tile\n     * @param {?} rowIndex\n     * @return {?}\n     */\n    function setRowStyles(tile, rowIndex) {\n      /** @type {?} */\n      var percentHeightPerTile = 100 / this._rowspan;\n      /** @type {?} */\n\n      var gutterHeightPerTile = (this._rows - 1) / this._rows;\n      /** @type {?} */\n\n      var baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterHeightPerTile);\n\n      tile._setStyle('top', this.getTilePosition(baseTileHeight, rowIndex));\n\n      tile._setStyle('height', calc(this.getTileSize(baseTileHeight, tile.rowspan)));\n    }\n    /**\n     * @param {?} list\n     * @return {?}\n     */\n\n  }, {\n    key: \"reset\",\n    value: function reset(list) {\n      if (list._tiles) {\n        list._tiles.forEach(function (tile) {\n          tile._setStyle('top', null);\n\n          tile._setStyle('height', null);\n        });\n      }\n    }\n  }]);\n\n  return FitTileStyler;\n}(TileStyler);\n/**\n * Wraps a CSS string in a calc function\n * @param {?} exp\n * @return {?}\n */\n\n\nfunction calc(exp) {\n  return \"calc(\".concat(exp, \")\");\n}\n/**\n * Appends pixels to a CSS string if no units are given.\n * @param {?} value\n * @return {?}\n */\n\n\nfunction normalizeUnits(value) {\n  return value.match(/px|em|rem/) ? value : value + 'px';\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/** @type {?} */\n\n\nvar MAT_FIT_MODE = 'fit';\n\nvar MatGridList = /*#__PURE__*/function () {\n  /**\n   * @param {?} _element\n   * @param {?} _dir\n   */\n  function MatGridList(_element, _dir) {\n    _classCallCheck(this, MatGridList);\n\n    this._element = _element;\n    this._dir = _dir;\n    /**\n     * The amount of space between tiles. This will be something like '5px' or '2em'.\n     */\n\n    this._gutter = '1px';\n  }\n  /**\n   * Amount of columns in the grid list.\n   * @return {?}\n   */\n\n\n  _createClass(MatGridList, [{\n    key: \"cols\",\n    get: function get() {\n      return this._cols;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ,\n    set: function set(value) {\n      this._cols = Math.max(1, Math.round(coerceNumberProperty(value)));\n    }\n    /**\n     * Size of the grid list's gutter in pixels.\n     * @return {?}\n     */\n\n  }, {\n    key: \"gutterSize\",\n    get: function get() {\n      return this._gutter;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ,\n    set: function set(value) {\n      this._gutter = \"\".concat(value == null ? '' : value);\n    }\n    /**\n     * Set internal representation of row height from the user-provided value.\n     * @return {?}\n     */\n\n  }, {\n    key: \"rowHeight\",\n    get: function get() {\n      return this._rowHeight;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ,\n    set: function set(value) {\n      /** @type {?} */\n      var newValue = \"\".concat(value == null ? '' : value);\n\n      if (newValue !== this._rowHeight) {\n        this._rowHeight = newValue;\n\n        this._setTileStyler(this._rowHeight);\n      }\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngOnInit\",\n    value: function ngOnInit() {\n      this._checkCols();\n\n      this._checkRowHeight();\n    }\n    /**\n     * The layout calculation is fairly cheap if nothing changes, so there's little cost\n     * to run it frequently.\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngAfterContentChecked\",\n    value: function ngAfterContentChecked() {\n      this._layoutTiles();\n    }\n    /**\n     * Throw a friendly error if cols property is missing\n     * @return {?}\n     */\n\n  }, {\n    key: \"_checkCols\",\n    value: function _checkCols() {\n      if (!this.cols) {\n        throw Error(\"mat-grid-list: must pass in number of columns. \" + \"Example: <mat-grid-list cols=\\\"3\\\">\");\n      }\n    }\n    /**\n     * Default to equal width:height if rowHeight property is missing\n     * @return {?}\n     */\n\n  }, {\n    key: \"_checkRowHeight\",\n    value: function _checkRowHeight() {\n      if (!this._rowHeight) {\n        this._setTileStyler('1:1');\n      }\n    }\n    /**\n     * Creates correct Tile Styler subtype based on rowHeight passed in by user\n     * @param {?} rowHeight\n     * @return {?}\n     */\n\n  }, {\n    key: \"_setTileStyler\",\n    value: function _setTileStyler(rowHeight) {\n      if (this._tileStyler) {\n        this._tileStyler.reset(this);\n      }\n\n      if (rowHeight === MAT_FIT_MODE) {\n        this._tileStyler = new FitTileStyler();\n      } else if (rowHeight && rowHeight.indexOf(':') > -1) {\n        this._tileStyler = new RatioTileStyler(rowHeight);\n      } else {\n        this._tileStyler = new FixedTileStyler(rowHeight);\n      }\n    }\n    /**\n     * Computes and applies the size and position for all children grid tiles.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_layoutTiles\",\n    value: function _layoutTiles() {\n      var _this4 = this;\n\n      if (!this._tileCoordinator) {\n        this._tileCoordinator = new TileCoordinator();\n      }\n      /** @type {?} */\n\n\n      var tracker = this._tileCoordinator;\n      /** @type {?} */\n\n      var tiles = this._tiles.filter(function (tile) {\n        return !tile._gridList || tile._gridList === _this4;\n      });\n      /** @type {?} */\n\n\n      var direction = this._dir ? this._dir.value : 'ltr';\n\n      this._tileCoordinator.update(this.cols, tiles);\n\n      this._tileStyler.init(this.gutterSize, tracker, this.cols, direction);\n\n      tiles.forEach(function (tile, index) {\n        /** @type {?} */\n        var pos = tracker.positions[index];\n\n        _this4._tileStyler.setStyle(tile, pos.row, pos.col);\n      });\n\n      this._setListStyle(this._tileStyler.getComputedHeight());\n    }\n    /**\n     * Sets style on the main grid-list element, given the style name and value.\n     * @param {?} style\n     * @return {?}\n     */\n\n  }, {\n    key: \"_setListStyle\",\n    value: function _setListStyle(style) {\n      if (style) {\n        /** @type {?} */\n        this._element.nativeElement.style[style[0]] = style[1];\n      }\n    }\n  }]);\n\n  return MatGridList;\n}();\n\nMatGridList.ɵfac = function MatGridList_Factory(t) {\n  return new (t || MatGridList)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.Directionality, 8));\n};\n\nMatGridList.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n  type: MatGridList,\n  selectors: [[\"mat-grid-list\"]],\n  contentQueries: function MatGridList_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵcontentQuery(dirIndex, MatGridTile, 5);\n    }\n\n    if (rf & 2) {\n      var _t;\n\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._tiles = _t);\n    }\n  },\n  hostAttrs: [1, \"mat-grid-list\"],\n  inputs: {\n    cols: \"cols\",\n    gutterSize: \"gutterSize\",\n    rowHeight: \"rowHeight\"\n  },\n  exportAs: [\"matGridList\"],\n  features: [ɵngcc0.ɵɵProvidersFeature([{\n    provide: MAT_GRID_LIST,\n    useExisting: MatGridList\n  }])],\n  ngContentSelectors: _c0,\n  decls: 2,\n  vars: 0,\n  template: function MatGridList_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵprojectionDef();\n      ɵngcc0.ɵɵelementStart(0, \"div\");\n      ɵngcc0.ɵɵprojection(1);\n      ɵngcc0.ɵɵelementEnd();\n    }\n  },\n  styles: [_c3],\n  encapsulation: 2,\n  changeDetection: 0\n});\n/** @nocollapse */\n\nMatGridList.ctorParameters = function () {\n  return [{\n    type: ElementRef\n  }, {\n    type: Directionality,\n    decorators: [{\n      type: Optional\n    }]\n  }];\n};\n\nMatGridList.propDecorators = {\n  _tiles: [{\n    type: ContentChildren,\n    args: [MatGridTile, {\n      descendants: true\n    }]\n  }],\n  cols: [{\n    type: Input\n  }],\n  gutterSize: [{\n    type: Input\n  }],\n  rowHeight: [{\n    type: Input\n  }]\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatGridList, [{\n    type: Component,\n    args: [{\n      selector: 'mat-grid-list',\n      exportAs: 'matGridList',\n      template: \"<div><ng-content></ng-content></div>\",\n      styles: [\".mat-grid-list{display:block;position:relative}.mat-grid-tile{display:block;position:absolute;overflow:hidden}.mat-grid-tile .mat-figure{top:0;left:0;right:0;bottom:0;position:absolute;display:flex;align-items:center;justify-content:center;height:100%;padding:0;margin:0}.mat-grid-tile .mat-grid-tile-footer,.mat-grid-tile .mat-grid-tile-header{display:flex;align-items:center;height:48px;color:#fff;background:rgba(0,0,0,.38);overflow:hidden;padding:0 16px;position:absolute;left:0;right:0}.mat-grid-tile .mat-grid-tile-footer>*,.mat-grid-tile .mat-grid-tile-header>*{margin:0;padding:0;font-weight:400;font-size:inherit}.mat-grid-tile .mat-grid-tile-footer.mat-2-line,.mat-grid-tile .mat-grid-tile-header.mat-2-line{height:68px}.mat-grid-tile .mat-grid-list-text{display:flex;flex-direction:column;width:100%;box-sizing:border-box;overflow:hidden}.mat-grid-tile .mat-grid-list-text>*{margin:0;padding:0;font-weight:400;font-size:inherit}.mat-grid-tile .mat-grid-list-text:empty{display:none}.mat-grid-tile .mat-grid-tile-header{top:0}.mat-grid-tile .mat-grid-tile-footer{bottom:0}.mat-grid-tile .mat-grid-avatar{padding-right:16px}[dir=rtl] .mat-grid-tile .mat-grid-avatar{padding-right:0;padding-left:16px}.mat-grid-tile .mat-grid-avatar:empty{display:none}\"],\n      host: {\n        'class': 'mat-grid-list'\n      },\n      providers: [{\n        provide: MAT_GRID_LIST,\n        useExisting: MatGridList\n      }],\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      encapsulation: ViewEncapsulation.None\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ElementRef\n    }, {\n      type: ɵngcc1.Directionality,\n      decorators: [{\n        type: Optional\n      }]\n    }];\n  }, {\n    cols: [{\n      type: Input\n    }],\n    gutterSize: [{\n      type: Input\n    }],\n    rowHeight: [{\n      type: Input\n    }],\n    _tiles: [{\n      type: ContentChildren,\n      args: [MatGridTile, {\n        descendants: true\n      }]\n    }]\n  });\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n\nvar MatGridListModule = function MatGridListModule() {\n  _classCallCheck(this, MatGridListModule);\n};\n\nMatGridListModule.ɵfac = function MatGridListModule_Factory(t) {\n  return new (t || MatGridListModule)();\n};\n\nMatGridListModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n  type: MatGridListModule\n});\nMatGridListModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n  imports: [[MatLineModule, MatCommonModule], MatLineModule, MatCommonModule]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatGridListModule, [{\n    type: NgModule,\n    args: [{\n      imports: [MatLineModule, MatCommonModule],\n      exports: [MatGridList, MatGridTile, MatGridTileText, MatLineModule, MatCommonModule, MatGridTileHeaderCssMatStyler, MatGridTileFooterCssMatStyler, MatGridAvatarCssMatStyler],\n      declarations: [MatGridList, MatGridTile, MatGridTileText, MatGridTileHeaderCssMatStyler, MatGridTileFooterCssMatStyler, MatGridAvatarCssMatStyler]\n    }]\n  }], null, null);\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatGridListModule, {\n    declarations: function declarations() {\n      return [MatGridList, MatGridTile, MatGridTileText, MatGridTileHeaderCssMatStyler, MatGridTileFooterCssMatStyler, MatGridAvatarCssMatStyler];\n    },\n    imports: function imports() {\n      return [MatLineModule, MatCommonModule];\n    },\n    exports: function exports() {\n      return [MatGridList, MatGridTile, MatGridTileText, MatLineModule, MatCommonModule, MatGridTileHeaderCssMatStyler, MatGridTileFooterCssMatStyler, MatGridAvatarCssMatStyler];\n    }\n  });\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n\nexport { MatGridListModule, MatGridList, MatGridTile, MatGridTileText, MatGridAvatarCssMatStyler, MatGridTileHeaderCssMatStyler, MatGridTileFooterCssMatStyler, MAT_GRID_LIST as ɵa12 }; //# sourceMappingURL=grid-list.js.map","map":{"version":3,"sources":["/Users/adepertat/Dropbox/ECOLES/Openclassroom/P6_de_Pertat_Antoine/AntoinedePertat_6_240521/frontend/node_modules/@angular/material/__ivy_ngcc__/esm2015/grid-list.js"],"names":["InjectionToken","Component","ViewEncapsulation","ElementRef","Input","Optional","ContentChildren","Directive","ChangeDetectionStrategy","Inject","NgModule","MatLine","setLines","MatLineModule","MatCommonModule","coerceNumberProperty","Directionality","ɵngcc0","ɵngcc1","_c0","_c1","_c2","_c3","MAT_GRID_LIST","MatGridTile","_element","_gridList","_rowspan","_colspan","value","Math","round","property","nativeElement","style","ɵfac","MatGridTile_Factory","t","ɵɵdirectiveInject","ɵcmp","ɵɵdefineComponent","type","selectors","hostAttrs","inputs","rowspan","colspan","exportAs","ngContentSelectors","decls","vars","consts","template","MatGridTile_Template","rf","ctx","ɵɵprojectionDef","ɵɵelementStart","ɵɵprojection","ɵɵelementEnd","styles","encapsulation","changeDetection","ctorParameters","undefined","decorators","args","propDecorators","ngDevMode","ɵsetClassMetadata","selector","host","None","OnPush","MatGridTileText","_lines","MatGridTileText_Factory","contentQueries","MatGridTileText_ContentQueries","dirIndex","ɵɵcontentQuery","_t","ɵɵqueryRefresh","ɵɵloadQuery","MatGridTileText_Template","MatGridAvatarCssMatStyler","MatGridAvatarCssMatStyler_Factory","ɵdir","ɵɵdefineDirective","MatGridTileHeaderCssMatStyler","MatGridTileHeaderCssMatStyler_Factory","MatGridTileFooterCssMatStyler","MatGridTileFooterCssMatStyler_Factory","TileCoordinator","columnIndex","rowIndex","lastRowMax","max","tracker","rowCount","numColumns","tiles","Array","fill","length","positions","map","tile","_trackTile","gapStartIndex","_findMatchingGap","_markTilePosition","TilePosition","tileCols","Error","gapEndIndex","_nextRow","indexOf","_findGapEndIndex","i","start","row","col","cssCalcAllowedValue","TileStyler","_rows","gutterSize","cols","direction","_gutterSize","normalizeUnits","_cols","_direction","sizePercent","gutterFraction","baseSize","offset","calc","span","colIndex","percentWidthPerTile","gutterWidthFractionPerTile","setColStyles","setRowStyles","percentWidth","gutterWidth","baseTileWidth","getBaseTileSize","side","_setStyle","getTilePosition","getTileSize","tileHeight","FixedTileStyler","fixedRowHeight","test","getTileSpan","getGutterSpan","list","_setListStyle","_tiles","forEach","RatioTileStyler","_parseRatio","percentHeightPerTile","rowHeightRatio","baseTileHeight","ratioParts","split","parseFloat","FitTileStyler","gutterHeightPerTile","exp","match","MAT_FIT_MODE","MatGridList","_dir","_gutter","_rowHeight","newValue","_setTileStyler","_checkCols","_checkRowHeight","_layoutTiles","rowHeight","_tileStyler","reset","_tileCoordinator","filter","update","init","index","pos","setStyle","getComputedHeight","MatGridList_Factory","MatGridList_ContentQueries","features","ɵɵProvidersFeature","provide","useExisting","MatGridList_Template","descendants","providers","MatGridListModule","MatGridListModule_Factory","ɵmod","ɵɵdefineNgModule","ɵinj","ɵɵdefineInjector","imports","exports","declarations","ngJitMode","ɵɵsetNgModuleScope","ɵa12"],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { InjectionToken, Component, ViewEncapsulation, ElementRef, Input, Optional, ContentChildren, Directive, ChangeDetectionStrategy, Inject, NgModule } from '@angular/core';\nimport { MatLine, setLines, MatLineModule, MatCommonModule } from '@angular/material/core';\nimport { coerceNumberProperty } from '@angular/cdk/coercion';\nimport { Directionality } from '@angular/cdk/bidi';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/** *\n * Injection token used to provide a grid list to a tile and to avoid circular imports.\n * \\@docs-private\n  @type {?} */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/bidi';\n\nconst _c0 = [\"*\"];\nconst _c1 = [[[\"\", \"mat-grid-avatar\", \"\"], [\"\", \"matGridAvatar\", \"\"]], [[\"\", \"mat-line\", \"\"], [\"\", \"matLine\", \"\"]], \"*\"];\nconst _c2 = [\"[mat-grid-avatar], [matGridAvatar]\", \"[mat-line], [matLine]\", \"*\"];\nconst _c3 = \".mat-grid-list{display:block;position:relative}.mat-grid-tile{display:block;position:absolute;overflow:hidden}.mat-grid-tile .mat-figure{top:0;left:0;right:0;bottom:0;position:absolute;display:flex;align-items:center;justify-content:center;height:100%;padding:0;margin:0}.mat-grid-tile .mat-grid-tile-footer,.mat-grid-tile .mat-grid-tile-header{display:flex;align-items:center;height:48px;color:#fff;background:rgba(0,0,0,.38);overflow:hidden;padding:0 16px;position:absolute;left:0;right:0}.mat-grid-tile .mat-grid-tile-footer>*,.mat-grid-tile .mat-grid-tile-header>*{margin:0;padding:0;font-weight:400;font-size:inherit}.mat-grid-tile .mat-grid-tile-footer.mat-2-line,.mat-grid-tile .mat-grid-tile-header.mat-2-line{height:68px}.mat-grid-tile .mat-grid-list-text{display:flex;flex-direction:column;width:100%;box-sizing:border-box;overflow:hidden}.mat-grid-tile .mat-grid-list-text>*{margin:0;padding:0;font-weight:400;font-size:inherit}.mat-grid-tile .mat-grid-list-text:empty{display:none}.mat-grid-tile .mat-grid-tile-header{top:0}.mat-grid-tile .mat-grid-tile-footer{bottom:0}.mat-grid-tile .mat-grid-avatar{padding-right:16px}[dir=rtl] .mat-grid-tile .mat-grid-avatar{padding-right:0;padding-left:16px}.mat-grid-tile .mat-grid-avatar:empty{display:none}\";\nconst MAT_GRID_LIST = new InjectionToken('MAT_GRID_LIST');\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\nclass MatGridTile {\n    /**\n     * @param {?} _element\n     * @param {?=} _gridList\n     */\n    constructor(_element, _gridList) {\n        this._element = _element;\n        this._gridList = _gridList;\n        this._rowspan = 1;\n        this._colspan = 1;\n    }\n    /**\n     * Amount of rows that the grid tile takes up.\n     * @return {?}\n     */\n    get rowspan() { return this._rowspan; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set rowspan(value) { this._rowspan = Math.round(coerceNumberProperty(value)); }\n    /**\n     * Amount of columns that the grid tile takes up.\n     * @return {?}\n     */\n    get colspan() { return this._colspan; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set colspan(value) { this._colspan = Math.round(coerceNumberProperty(value)); }\n    /**\n     * Sets the style of the grid-tile element.  Needs to be set manually to avoid\n     * \"Changed after checked\" errors that would occur with HostBinding.\n     * @param {?} property\n     * @param {?} value\n     * @return {?}\n     */\n    _setStyle(property, value) {\n        (/** @type {?} */ (this._element.nativeElement.style))[property] = value;\n    }\n}\nMatGridTile.ɵfac = function MatGridTile_Factory(t) { return new (t || MatGridTile)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(MAT_GRID_LIST, 8)); };\nMatGridTile.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: MatGridTile, selectors: [[\"mat-grid-tile\"]], hostAttrs: [1, \"mat-grid-tile\"], inputs: { rowspan: \"rowspan\", colspan: \"colspan\" }, exportAs: [\"matGridTile\"], ngContentSelectors: _c0, decls: 2, vars: 0, consts: [[1, \"mat-figure\"]], template: function MatGridTile_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵelementStart(0, \"figure\", 0);\n        ɵngcc0.ɵɵprojection(1);\n        ɵngcc0.ɵɵelementEnd();\n    } }, styles: [_c3], encapsulation: 2, changeDetection: 0 });\n/** @nocollapse */\nMatGridTile.ctorParameters = () => [\n    { type: ElementRef },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_GRID_LIST,] }] }\n];\nMatGridTile.propDecorators = {\n    rowspan: [{ type: Input }],\n    colspan: [{ type: Input }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatGridTile, [{\n        type: Component,\n        args: [{ selector: 'mat-grid-tile',\n                exportAs: 'matGridTile',\n                host: {\n                    'class': 'mat-grid-tile'\n                },\n                template: \"<figure class=\\\"mat-figure\\\"><ng-content></ng-content></figure>\",\n                styles: [\".mat-grid-list{display:block;position:relative}.mat-grid-tile{display:block;position:absolute;overflow:hidden}.mat-grid-tile .mat-figure{top:0;left:0;right:0;bottom:0;position:absolute;display:flex;align-items:center;justify-content:center;height:100%;padding:0;margin:0}.mat-grid-tile .mat-grid-tile-footer,.mat-grid-tile .mat-grid-tile-header{display:flex;align-items:center;height:48px;color:#fff;background:rgba(0,0,0,.38);overflow:hidden;padding:0 16px;position:absolute;left:0;right:0}.mat-grid-tile .mat-grid-tile-footer>*,.mat-grid-tile .mat-grid-tile-header>*{margin:0;padding:0;font-weight:400;font-size:inherit}.mat-grid-tile .mat-grid-tile-footer.mat-2-line,.mat-grid-tile .mat-grid-tile-header.mat-2-line{height:68px}.mat-grid-tile .mat-grid-list-text{display:flex;flex-direction:column;width:100%;box-sizing:border-box;overflow:hidden}.mat-grid-tile .mat-grid-list-text>*{margin:0;padding:0;font-weight:400;font-size:inherit}.mat-grid-tile .mat-grid-list-text:empty{display:none}.mat-grid-tile .mat-grid-tile-header{top:0}.mat-grid-tile .mat-grid-tile-footer{bottom:0}.mat-grid-tile .mat-grid-avatar{padding-right:16px}[dir=rtl] .mat-grid-tile .mat-grid-avatar{padding-right:0;padding-left:16px}.mat-grid-tile .mat-grid-avatar:empty{display:none}\"],\n                encapsulation: ViewEncapsulation.None,\n                changeDetection: ChangeDetectionStrategy.OnPush }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [MAT_GRID_LIST]\n            }] }]; }, { rowspan: [{\n            type: Input\n        }], colspan: [{\n            type: Input\n        }] }); })();\nclass MatGridTileText {\n    /**\n     * @param {?} _element\n     */\n    constructor(_element) {\n        this._element = _element;\n    }\n    /**\n     * @return {?}\n     */\n    ngAfterContentInit() {\n        setLines(this._lines, this._element);\n    }\n}\nMatGridTileText.ɵfac = function MatGridTileText_Factory(t) { return new (t || MatGridTileText)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };\nMatGridTileText.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: MatGridTileText, selectors: [[\"mat-grid-tile-header\"], [\"mat-grid-tile-footer\"]], contentQueries: function MatGridTileText_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MatLine, 4);\n    } if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._lines = _t);\n    } }, ngContentSelectors: _c2, decls: 4, vars: 0, consts: [[1, \"mat-grid-list-text\"]], template: function MatGridTileText_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef(_c1);\n        ɵngcc0.ɵɵprojection(0);\n        ɵngcc0.ɵɵelementStart(1, \"div\", 0);\n        ɵngcc0.ɵɵprojection(2, 1);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵprojection(3, 2);\n    } }, encapsulation: 2, changeDetection: 0 });\n/** @nocollapse */\nMatGridTileText.ctorParameters = () => [\n    { type: ElementRef }\n];\nMatGridTileText.propDecorators = {\n    _lines: [{ type: ContentChildren, args: [MatLine,] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatGridTileText, [{\n        type: Component,\n        args: [{ selector: 'mat-grid-tile-header, mat-grid-tile-footer',\n                template: \"<ng-content select=\\\"[mat-grid-avatar], [matGridAvatar]\\\"></ng-content><div class=\\\"mat-grid-list-text\\\"><ng-content select=\\\"[mat-line], [matLine]\\\"></ng-content></div><ng-content></ng-content>\",\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                encapsulation: ViewEncapsulation.None }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }]; }, { _lines: [{\n            type: ContentChildren,\n            args: [MatLine]\n        }] }); })();\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * \\@docs-private\n */\nclass MatGridAvatarCssMatStyler {\n}\nMatGridAvatarCssMatStyler.ɵfac = function MatGridAvatarCssMatStyler_Factory(t) { return new (t || MatGridAvatarCssMatStyler)(); };\nMatGridAvatarCssMatStyler.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: MatGridAvatarCssMatStyler, selectors: [[\"\", \"mat-grid-avatar\", \"\"], [\"\", \"matGridAvatar\", \"\"]], hostAttrs: [1, \"mat-grid-avatar\"] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatGridAvatarCssMatStyler, [{\n        type: Directive,\n        args: [{\n                selector: '[mat-grid-avatar], [matGridAvatar]',\n                host: { 'class': 'mat-grid-avatar' }\n            }]\n    }], null, null); })();\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * \\@docs-private\n */\nclass MatGridTileHeaderCssMatStyler {\n}\nMatGridTileHeaderCssMatStyler.ɵfac = function MatGridTileHeaderCssMatStyler_Factory(t) { return new (t || MatGridTileHeaderCssMatStyler)(); };\nMatGridTileHeaderCssMatStyler.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: MatGridTileHeaderCssMatStyler, selectors: [[\"mat-grid-tile-header\"]], hostAttrs: [1, \"mat-grid-tile-header\"] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatGridTileHeaderCssMatStyler, [{\n        type: Directive,\n        args: [{\n                selector: 'mat-grid-tile-header',\n                host: { 'class': 'mat-grid-tile-header' }\n            }]\n    }], null, null); })();\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * \\@docs-private\n */\nclass MatGridTileFooterCssMatStyler {\n}\nMatGridTileFooterCssMatStyler.ɵfac = function MatGridTileFooterCssMatStyler_Factory(t) { return new (t || MatGridTileFooterCssMatStyler)(); };\nMatGridTileFooterCssMatStyler.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: MatGridTileFooterCssMatStyler, selectors: [[\"mat-grid-tile-footer\"]], hostAttrs: [1, \"mat-grid-tile-footer\"] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatGridTileFooterCssMatStyler, [{\n        type: Directive,\n        args: [{\n                selector: 'mat-grid-tile-footer',\n                host: { 'class': 'mat-grid-tile-footer' }\n            }]\n    }], null, null); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * Class for determining, from a list of tiles, the (row, col) position of each of those tiles\n * in the grid. This is necessary (rather than just rendering the tiles in normal document flow)\n * because the tiles can have a rowspan.\n *\n * The positioning algorithm greedily places each tile as soon as it encounters a gap in the grid\n * large enough to accommodate it so that the tiles still render in the same order in which they\n * are given.\n *\n * The basis of the algorithm is the use of an array to track the already placed tiles. Each\n * element of the array corresponds to a column, and the value indicates how many cells in that\n * column are already occupied; zero indicates an empty cell. Moving \"down\" to the next row\n * decrements each value in the tracking array (indicating that the column is one cell closer to\n * being free).\n *\n * \\@docs-private\n */\nclass TileCoordinator {\n    constructor() {\n        /**\n         * Index at which the search for the next gap will start.\n         */\n        this.columnIndex = 0;\n        /**\n         * The current row index.\n         */\n        this.rowIndex = 0;\n    }\n    /**\n     * Gets the total number of rows occupied by tiles\n     * @return {?}\n     */\n    get rowCount() { return this.rowIndex + 1; }\n    /**\n     * Gets the total span of rows occupied by tiles.\n     * Ex: A list with 1 row that contains a tile with rowspan 2 will have a total rowspan of 2.\n     * @return {?}\n     */\n    get rowspan() {\n        /** @type {?} */\n        const lastRowMax = Math.max(...this.tracker);\n        // if any of the tiles has a rowspan that pushes it beyond the total row count,\n        // add the difference to the rowcount\n        return lastRowMax > 1 ? this.rowCount + lastRowMax - 1 : this.rowCount;\n    }\n    /**\n     * Updates the tile positions.\n     * @param {?} numColumns Amount of columns in the grid.\n     * @param {?} tiles\n     * @return {?}\n     */\n    update(numColumns, tiles) {\n        this.columnIndex = 0;\n        this.rowIndex = 0;\n        this.tracker = new Array(numColumns);\n        this.tracker.fill(0, 0, this.tracker.length);\n        this.positions = tiles.map(tile => this._trackTile(tile));\n    }\n    /**\n     * Calculates the row and col position of a tile.\n     * @param {?} tile\n     * @return {?}\n     */\n    _trackTile(tile) {\n        /** @type {?} */\n        const gapStartIndex = this._findMatchingGap(tile.colspan);\n        // Place tile in the resulting gap.\n        this._markTilePosition(gapStartIndex, tile);\n        // The next time we look for a gap, the search will start at columnIndex, which should be\n        // immediately after the tile that has just been placed.\n        this.columnIndex = gapStartIndex + tile.colspan;\n        return new TilePosition(this.rowIndex, gapStartIndex);\n    }\n    /**\n     * Finds the next available space large enough to fit the tile.\n     * @param {?} tileCols\n     * @return {?}\n     */\n    _findMatchingGap(tileCols) {\n        if (tileCols > this.tracker.length) {\n            throw Error(`mat-grid-list: tile with colspan ${tileCols} is wider than ` +\n                `grid with cols=\"${this.tracker.length}\".`);\n        }\n        /** @type {?} */\n        let gapStartIndex = -1;\n        /** @type {?} */\n        let gapEndIndex = -1;\n        // Look for a gap large enough to fit the given tile. Empty spaces are marked with a zero.\n        do {\n            // If we've reached the end of the row, go to the next row.\n            if (this.columnIndex + tileCols > this.tracker.length) {\n                this._nextRow();\n                gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\n                gapEndIndex = this._findGapEndIndex(gapStartIndex);\n                continue;\n            }\n            gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\n            // If there are no more empty spaces in this row at all, move on to the next row.\n            if (gapStartIndex == -1) {\n                this._nextRow();\n                gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\n                gapEndIndex = this._findGapEndIndex(gapStartIndex);\n                continue;\n            }\n            gapEndIndex = this._findGapEndIndex(gapStartIndex);\n            // If a gap large enough isn't found, we want to start looking immediately after the current\n            // gap on the next iteration.\n            this.columnIndex = gapStartIndex + 1;\n            // Continue iterating until we find a gap wide enough for this tile. Since gapEndIndex is\n            // exclusive, gapEndIndex is 0 means we didn't find a gap and should continue.\n        } while ((gapEndIndex - gapStartIndex < tileCols) || (gapEndIndex == 0));\n        // If we still didn't manage to find a gap, ensure that the index is\n        // at least zero so the tile doesn't get pulled out of the grid.\n        return Math.max(gapStartIndex, 0);\n    }\n    /**\n     * Move \"down\" to the next row.\n     * @return {?}\n     */\n    _nextRow() {\n        this.columnIndex = 0;\n        this.rowIndex++;\n        // Decrement all spaces by one to reflect moving down one row.\n        for (let i = 0; i < this.tracker.length; i++) {\n            this.tracker[i] = Math.max(0, this.tracker[i] - 1);\n        }\n    }\n    /**\n     * Finds the end index (exclusive) of a gap given the index from which to start looking.\n     * The gap ends when a non-zero value is found.\n     * @param {?} gapStartIndex\n     * @return {?}\n     */\n    _findGapEndIndex(gapStartIndex) {\n        for (let i = gapStartIndex + 1; i < this.tracker.length; i++) {\n            if (this.tracker[i] != 0) {\n                return i;\n            }\n        }\n        // The gap ends with the end of the row.\n        return this.tracker.length;\n    }\n    /**\n     * Update the tile tracker to account for the given tile in the given space.\n     * @param {?} start\n     * @param {?} tile\n     * @return {?}\n     */\n    _markTilePosition(start, tile) {\n        for (let i = 0; i < tile.colspan; i++) {\n            this.tracker[start + i] = tile.rowspan;\n        }\n    }\n}\n/**\n * Simple data structure for tile position (row, col).\n * \\@docs-private\n */\nclass TilePosition {\n    /**\n     * @param {?} row\n     * @param {?} col\n     */\n    constructor(row, col) {\n        this.row = row;\n        this.col = col;\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/** *\n * RegExp that can be used to check whether a value will\n * be allowed inside a CSS `calc()` expression.\n  @type {?} */\nconst cssCalcAllowedValue = /^-?\\d+((\\.\\d+)?[A-Za-z%$]?)+$/;\n/**\n * Sets the style properties for an individual tile, given the position calculated by the\n * Tile Coordinator.\n * \\@docs-private\n * @abstract\n */\nclass TileStyler {\n    constructor() {\n        this._rows = 0;\n        this._rowspan = 0;\n    }\n    /**\n     * Adds grid-list layout info once it is available. Cannot be processed in the constructor\n     * because these properties haven't been calculated by that point.\n     *\n     * @param {?} gutterSize Size of the grid's gutter.\n     * @param {?} tracker Instance of the TileCoordinator.\n     * @param {?} cols Amount of columns in the grid.\n     * @param {?} direction Layout direction of the grid.\n     * @return {?}\n     */\n    init(gutterSize, tracker, cols, direction) {\n        this._gutterSize = normalizeUnits(gutterSize);\n        this._rows = tracker.rowCount;\n        this._rowspan = tracker.rowspan;\n        this._cols = cols;\n        this._direction = direction;\n    }\n    /**\n     * Computes the amount of space a single 1x1 tile would take up (width or height).\n     * Used as a basis for other calculations.\n     * @param {?} sizePercent Percent of the total grid-list space that one 1x1 tile would take up.\n     * @param {?} gutterFraction Fraction of the gutter size taken up by one 1x1 tile.\n     * @return {?} The size of a 1x1 tile as an expression that can be evaluated via CSS calc().\n     */\n    getBaseTileSize(sizePercent, gutterFraction) {\n        // Take the base size percent (as would be if evenly dividing the size between cells),\n        // and then subtracting the size of one gutter. However, since there are no gutters on the\n        // edges, each tile only uses a fraction (gutterShare = numGutters / numCells) of the gutter\n        // size. (Imagine having one gutter per tile, and then breaking up the extra gutter on the\n        // edge evenly among the cells).\n        return `(${sizePercent}% - (${this._gutterSize} * ${gutterFraction}))`;\n    }\n    /**\n     * Gets The horizontal or vertical position of a tile, e.g., the 'top' or 'left' property value.\n     * @param {?} baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n     * @param {?} offset Number of tiles that have already been rendered in the row/column.\n     * @return {?} Position of the tile as a CSS calc() expression.\n     */\n    getTilePosition(baseSize, offset) {\n        // The position comes the size of a 1x1 tile plus gutter for each previous tile in the\n        // row/column (offset).\n        return offset === 0 ? '0' : calc(`(${baseSize} + ${this._gutterSize}) * ${offset}`);\n    }\n    /**\n     * Gets the actual size of a tile, e.g., width or height, taking rowspan or colspan into account.\n     * @param {?} baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n     * @param {?} span The tile's rowspan or colspan.\n     * @return {?} Size of the tile as a CSS calc() expression.\n     */\n    getTileSize(baseSize, span) {\n        return `(${baseSize} * ${span}) + (${span - 1} * ${this._gutterSize})`;\n    }\n    /**\n     * Sets the style properties to be applied to a tile for the given row and column index.\n     * @param {?} tile Tile to which to apply the styling.\n     * @param {?} rowIndex Index of the tile's row.\n     * @param {?} colIndex Index of the tile's column.\n     * @return {?}\n     */\n    setStyle(tile, rowIndex, colIndex) {\n        /** @type {?} */\n        let percentWidthPerTile = 100 / this._cols;\n        /** @type {?} */\n        let gutterWidthFractionPerTile = (this._cols - 1) / this._cols;\n        this.setColStyles(tile, colIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n        this.setRowStyles(tile, rowIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n    }\n    /**\n     * Sets the horizontal placement of the tile in the list.\n     * @param {?} tile\n     * @param {?} colIndex\n     * @param {?} percentWidth\n     * @param {?} gutterWidth\n     * @return {?}\n     */\n    setColStyles(tile, colIndex, percentWidth, gutterWidth) {\n        /** @type {?} */\n        let baseTileWidth = this.getBaseTileSize(percentWidth, gutterWidth);\n        /** @type {?} */\n        let side = this._direction === 'rtl' ? 'right' : 'left';\n        tile._setStyle(side, this.getTilePosition(baseTileWidth, colIndex));\n        tile._setStyle('width', calc(this.getTileSize(baseTileWidth, tile.colspan)));\n    }\n    /**\n     * Calculates the total size taken up by gutters across one axis of a list.\n     * @return {?}\n     */\n    getGutterSpan() {\n        return `${this._gutterSize} * (${this._rowspan} - 1)`;\n    }\n    /**\n     * Calculates the total size taken up by tiles across one axis of a list.\n     * @param {?} tileHeight Height of the tile.\n     * @return {?}\n     */\n    getTileSpan(tileHeight) {\n        return `${this._rowspan} * ${this.getTileSize(tileHeight, 1)}`;\n    }\n    /**\n     * Calculates the computed height and returns the correct style property to set.\n     * This method can be implemented by each type of TileStyler.\n     * \\@docs-private\n     * @return {?}\n     */\n    getComputedHeight() { return null; }\n}\n/**\n * This type of styler is instantiated when the user passes in a fixed row height.\n * Example `<mat-grid-list cols=\"3\" rowHeight=\"100px\">`\n * \\@docs-private\n */\nclass FixedTileStyler extends TileStyler {\n    /**\n     * @param {?} fixedRowHeight\n     */\n    constructor(fixedRowHeight) {\n        super();\n        this.fixedRowHeight = fixedRowHeight;\n    }\n    /**\n     * @param {?} gutterSize\n     * @param {?} tracker\n     * @param {?} cols\n     * @param {?} direction\n     * @return {?}\n     */\n    init(gutterSize, tracker, cols, direction) {\n        super.init(gutterSize, tracker, cols, direction);\n        this.fixedRowHeight = normalizeUnits(this.fixedRowHeight);\n        if (!cssCalcAllowedValue.test(this.fixedRowHeight)) {\n            throw Error(`Invalid value \"${this.fixedRowHeight}\" set as rowHeight.`);\n        }\n    }\n    /**\n     * @param {?} tile\n     * @param {?} rowIndex\n     * @return {?}\n     */\n    setRowStyles(tile, rowIndex) {\n        tile._setStyle('top', this.getTilePosition(this.fixedRowHeight, rowIndex));\n        tile._setStyle('height', calc(this.getTileSize(this.fixedRowHeight, tile.rowspan)));\n    }\n    /**\n     * @return {?}\n     */\n    getComputedHeight() {\n        return [\n            'height', calc(`${this.getTileSpan(this.fixedRowHeight)} + ${this.getGutterSpan()}`)\n        ];\n    }\n    /**\n     * @param {?} list\n     * @return {?}\n     */\n    reset(list) {\n        list._setListStyle(['height', null]);\n        if (list._tiles) {\n            list._tiles.forEach(tile => {\n                tile._setStyle('top', null);\n                tile._setStyle('height', null);\n            });\n        }\n    }\n}\n/**\n * This type of styler is instantiated when the user passes in a width:height ratio\n * for the row height.  Example `<mat-grid-list cols=\"3\" rowHeight=\"3:1\">`\n * \\@docs-private\n */\nclass RatioTileStyler extends TileStyler {\n    /**\n     * @param {?} value\n     */\n    constructor(value) {\n        super();\n        this._parseRatio(value);\n    }\n    /**\n     * @param {?} tile\n     * @param {?} rowIndex\n     * @param {?} percentWidth\n     * @param {?} gutterWidth\n     * @return {?}\n     */\n    setRowStyles(tile, rowIndex, percentWidth, gutterWidth) {\n        /** @type {?} */\n        let percentHeightPerTile = percentWidth / this.rowHeightRatio;\n        this.baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterWidth);\n        // Use padding-top and margin-top to maintain the given aspect ratio, as\n        // a percentage-based value for these properties is applied versus the *width* of the\n        // containing block. See http://www.w3.org/TR/CSS2/box.html#margin-properties\n        tile._setStyle('marginTop', this.getTilePosition(this.baseTileHeight, rowIndex));\n        tile._setStyle('paddingTop', calc(this.getTileSize(this.baseTileHeight, tile.rowspan)));\n    }\n    /**\n     * @return {?}\n     */\n    getComputedHeight() {\n        return [\n            'paddingBottom', calc(`${this.getTileSpan(this.baseTileHeight)} + ${this.getGutterSpan()}`)\n        ];\n    }\n    /**\n     * @param {?} list\n     * @return {?}\n     */\n    reset(list) {\n        list._setListStyle(['paddingBottom', null]);\n        list._tiles.forEach(tile => {\n            tile._setStyle('marginTop', null);\n            tile._setStyle('paddingTop', null);\n        });\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    _parseRatio(value) {\n        /** @type {?} */\n        const ratioParts = value.split(':');\n        if (ratioParts.length !== 2) {\n            throw Error(`mat-grid-list: invalid ratio given for row-height: \"${value}\"`);\n        }\n        this.rowHeightRatio = parseFloat(ratioParts[0]) / parseFloat(ratioParts[1]);\n    }\n}\n/**\n * This type of styler is instantiated when the user selects a \"fit\" row height mode.\n * In other words, the row height will reflect the total height of the container divided\n * by the number of rows.  Example `<mat-grid-list cols=\"3\" rowHeight=\"fit\">`\n *\n * \\@docs-private\n */\nclass FitTileStyler extends TileStyler {\n    /**\n     * @param {?} tile\n     * @param {?} rowIndex\n     * @return {?}\n     */\n    setRowStyles(tile, rowIndex) {\n        /** @type {?} */\n        let percentHeightPerTile = 100 / this._rowspan;\n        /** @type {?} */\n        let gutterHeightPerTile = (this._rows - 1) / this._rows;\n        /** @type {?} */\n        let baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterHeightPerTile);\n        tile._setStyle('top', this.getTilePosition(baseTileHeight, rowIndex));\n        tile._setStyle('height', calc(this.getTileSize(baseTileHeight, tile.rowspan)));\n    }\n    /**\n     * @param {?} list\n     * @return {?}\n     */\n    reset(list) {\n        if (list._tiles) {\n            list._tiles.forEach(tile => {\n                tile._setStyle('top', null);\n                tile._setStyle('height', null);\n            });\n        }\n    }\n}\n/**\n * Wraps a CSS string in a calc function\n * @param {?} exp\n * @return {?}\n */\nfunction calc(exp) { return `calc(${exp})`; }\n/**\n * Appends pixels to a CSS string if no units are given.\n * @param {?} value\n * @return {?}\n */\nfunction normalizeUnits(value) {\n    return (value.match(/px|em|rem/)) ? value : value + 'px';\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst MAT_FIT_MODE = 'fit';\nclass MatGridList {\n    /**\n     * @param {?} _element\n     * @param {?} _dir\n     */\n    constructor(_element, _dir) {\n        this._element = _element;\n        this._dir = _dir;\n        /**\n         * The amount of space between tiles. This will be something like '5px' or '2em'.\n         */\n        this._gutter = '1px';\n    }\n    /**\n     * Amount of columns in the grid list.\n     * @return {?}\n     */\n    get cols() { return this._cols; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set cols(value) {\n        this._cols = Math.max(1, Math.round(coerceNumberProperty(value)));\n    }\n    /**\n     * Size of the grid list's gutter in pixels.\n     * @return {?}\n     */\n    get gutterSize() { return this._gutter; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set gutterSize(value) { this._gutter = `${value == null ? '' : value}`; }\n    /**\n     * Set internal representation of row height from the user-provided value.\n     * @return {?}\n     */\n    get rowHeight() { return this._rowHeight; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set rowHeight(value) {\n        /** @type {?} */\n        const newValue = `${value == null ? '' : value}`;\n        if (newValue !== this._rowHeight) {\n            this._rowHeight = newValue;\n            this._setTileStyler(this._rowHeight);\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngOnInit() {\n        this._checkCols();\n        this._checkRowHeight();\n    }\n    /**\n     * The layout calculation is fairly cheap if nothing changes, so there's little cost\n     * to run it frequently.\n     * @return {?}\n     */\n    ngAfterContentChecked() {\n        this._layoutTiles();\n    }\n    /**\n     * Throw a friendly error if cols property is missing\n     * @return {?}\n     */\n    _checkCols() {\n        if (!this.cols) {\n            throw Error(`mat-grid-list: must pass in number of columns. ` +\n                `Example: <mat-grid-list cols=\"3\">`);\n        }\n    }\n    /**\n     * Default to equal width:height if rowHeight property is missing\n     * @return {?}\n     */\n    _checkRowHeight() {\n        if (!this._rowHeight) {\n            this._setTileStyler('1:1');\n        }\n    }\n    /**\n     * Creates correct Tile Styler subtype based on rowHeight passed in by user\n     * @param {?} rowHeight\n     * @return {?}\n     */\n    _setTileStyler(rowHeight) {\n        if (this._tileStyler) {\n            this._tileStyler.reset(this);\n        }\n        if (rowHeight === MAT_FIT_MODE) {\n            this._tileStyler = new FitTileStyler();\n        }\n        else if (rowHeight && rowHeight.indexOf(':') > -1) {\n            this._tileStyler = new RatioTileStyler(rowHeight);\n        }\n        else {\n            this._tileStyler = new FixedTileStyler(rowHeight);\n        }\n    }\n    /**\n     * Computes and applies the size and position for all children grid tiles.\n     * @return {?}\n     */\n    _layoutTiles() {\n        if (!this._tileCoordinator) {\n            this._tileCoordinator = new TileCoordinator();\n        }\n        /** @type {?} */\n        const tracker = this._tileCoordinator;\n        /** @type {?} */\n        const tiles = this._tiles.filter(tile => !tile._gridList || tile._gridList === this);\n        /** @type {?} */\n        const direction = this._dir ? this._dir.value : 'ltr';\n        this._tileCoordinator.update(this.cols, tiles);\n        this._tileStyler.init(this.gutterSize, tracker, this.cols, direction);\n        tiles.forEach((tile, index) => {\n            /** @type {?} */\n            const pos = tracker.positions[index];\n            this._tileStyler.setStyle(tile, pos.row, pos.col);\n        });\n        this._setListStyle(this._tileStyler.getComputedHeight());\n    }\n    /**\n     * Sets style on the main grid-list element, given the style name and value.\n     * @param {?} style\n     * @return {?}\n     */\n    _setListStyle(style) {\n        if (style) {\n            (/** @type {?} */ (this._element.nativeElement.style))[style[0]] = style[1];\n        }\n    }\n}\nMatGridList.ɵfac = function MatGridList_Factory(t) { return new (t || MatGridList)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.Directionality, 8)); };\nMatGridList.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: MatGridList, selectors: [[\"mat-grid-list\"]], contentQueries: function MatGridList_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MatGridTile, 5);\n    } if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._tiles = _t);\n    } }, hostAttrs: [1, \"mat-grid-list\"], inputs: { cols: \"cols\", gutterSize: \"gutterSize\", rowHeight: \"rowHeight\" }, exportAs: [\"matGridList\"], features: [ɵngcc0.ɵɵProvidersFeature([{\n                provide: MAT_GRID_LIST,\n                useExisting: MatGridList\n            }])], ngContentSelectors: _c0, decls: 2, vars: 0, template: function MatGridList_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵelementStart(0, \"div\");\n        ɵngcc0.ɵɵprojection(1);\n        ɵngcc0.ɵɵelementEnd();\n    } }, styles: [_c3], encapsulation: 2, changeDetection: 0 });\n/** @nocollapse */\nMatGridList.ctorParameters = () => [\n    { type: ElementRef },\n    { type: Directionality, decorators: [{ type: Optional }] }\n];\nMatGridList.propDecorators = {\n    _tiles: [{ type: ContentChildren, args: [MatGridTile, { descendants: true },] }],\n    cols: [{ type: Input }],\n    gutterSize: [{ type: Input }],\n    rowHeight: [{ type: Input }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatGridList, [{\n        type: Component,\n        args: [{ selector: 'mat-grid-list',\n                exportAs: 'matGridList',\n                template: \"<div><ng-content></ng-content></div>\",\n                styles: [\".mat-grid-list{display:block;position:relative}.mat-grid-tile{display:block;position:absolute;overflow:hidden}.mat-grid-tile .mat-figure{top:0;left:0;right:0;bottom:0;position:absolute;display:flex;align-items:center;justify-content:center;height:100%;padding:0;margin:0}.mat-grid-tile .mat-grid-tile-footer,.mat-grid-tile .mat-grid-tile-header{display:flex;align-items:center;height:48px;color:#fff;background:rgba(0,0,0,.38);overflow:hidden;padding:0 16px;position:absolute;left:0;right:0}.mat-grid-tile .mat-grid-tile-footer>*,.mat-grid-tile .mat-grid-tile-header>*{margin:0;padding:0;font-weight:400;font-size:inherit}.mat-grid-tile .mat-grid-tile-footer.mat-2-line,.mat-grid-tile .mat-grid-tile-header.mat-2-line{height:68px}.mat-grid-tile .mat-grid-list-text{display:flex;flex-direction:column;width:100%;box-sizing:border-box;overflow:hidden}.mat-grid-tile .mat-grid-list-text>*{margin:0;padding:0;font-weight:400;font-size:inherit}.mat-grid-tile .mat-grid-list-text:empty{display:none}.mat-grid-tile .mat-grid-tile-header{top:0}.mat-grid-tile .mat-grid-tile-footer{bottom:0}.mat-grid-tile .mat-grid-avatar{padding-right:16px}[dir=rtl] .mat-grid-tile .mat-grid-avatar{padding-right:0;padding-left:16px}.mat-grid-tile .mat-grid-avatar:empty{display:none}\"],\n                host: {\n                    'class': 'mat-grid-list'\n                }, providers: [{\n                        provide: MAT_GRID_LIST,\n                        useExisting: MatGridList\n                    }], changeDetection: ChangeDetectionStrategy.OnPush,\n                encapsulation: ViewEncapsulation.None }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc1.Directionality, decorators: [{\n                type: Optional\n            }] }]; }, { cols: [{\n            type: Input\n        }], gutterSize: [{\n            type: Input\n        }], rowHeight: [{\n            type: Input\n        }], _tiles: [{\n            type: ContentChildren,\n            args: [MatGridTile, { descendants: true }]\n        }] }); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\nclass MatGridListModule {\n}\nMatGridListModule.ɵfac = function MatGridListModule_Factory(t) { return new (t || MatGridListModule)(); };\nMatGridListModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: MatGridListModule });\nMatGridListModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ imports: [[MatLineModule, MatCommonModule], MatLineModule,\n        MatCommonModule] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatGridListModule, [{\n        type: NgModule,\n        args: [{\n                imports: [MatLineModule, MatCommonModule],\n                exports: [\n                    MatGridList,\n                    MatGridTile,\n                    MatGridTileText,\n                    MatLineModule,\n                    MatCommonModule,\n                    MatGridTileHeaderCssMatStyler,\n                    MatGridTileFooterCssMatStyler,\n                    MatGridAvatarCssMatStyler\n                ],\n                declarations: [\n                    MatGridList,\n                    MatGridTile,\n                    MatGridTileText,\n                    MatGridTileHeaderCssMatStyler,\n                    MatGridTileFooterCssMatStyler,\n                    MatGridAvatarCssMatStyler\n                ]\n            }]\n    }], null, null); })();\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatGridListModule, { declarations: function () { return [MatGridList, MatGridTile, MatGridTileText, MatGridTileHeaderCssMatStyler, MatGridTileFooterCssMatStyler, MatGridAvatarCssMatStyler]; }, imports: function () { return [MatLineModule, MatCommonModule]; }, exports: function () { return [MatGridList, MatGridTile, MatGridTileText, MatLineModule,\n        MatCommonModule, MatGridTileHeaderCssMatStyler, MatGridTileFooterCssMatStyler, MatGridAvatarCssMatStyler]; } }); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\nexport { MatGridListModule, MatGridList, MatGridTile, MatGridTileText, MatGridAvatarCssMatStyler, MatGridTileHeaderCssMatStyler, MatGridTileFooterCssMatStyler, MAT_GRID_LIST as ɵa12 };\n\n//# sourceMappingURL=grid-list.js.map"]},"metadata":{},"sourceType":"module"}