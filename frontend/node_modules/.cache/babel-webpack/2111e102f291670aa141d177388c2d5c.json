{"ast":null,"code":"import _toConsumableArray from \"/Users/adepertat/Dropbox/ECOLES/Openclassroom/P6_de_Pertat_Antoine/AntoinedePertat_6_240521/frontend/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _createForOfIteratorHelper from \"/Users/adepertat/Dropbox/ECOLES/Openclassroom/P6_de_Pertat_Antoine/AntoinedePertat_6_240521/frontend/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper\";\nimport _get from \"/Users/adepertat/Dropbox/ECOLES/Openclassroom/P6_de_Pertat_Antoine/AntoinedePertat_6_240521/frontend/node_modules/@babel/runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"/Users/adepertat/Dropbox/ECOLES/Openclassroom/P6_de_Pertat_Antoine/AntoinedePertat_6_240521/frontend/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _classCallCheck from \"/Users/adepertat/Dropbox/ECOLES/Openclassroom/P6_de_Pertat_Antoine/AntoinedePertat_6_240521/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/adepertat/Dropbox/ECOLES/Openclassroom/P6_de_Pertat_Antoine/AntoinedePertat_6_240521/frontend/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/Users/adepertat/Dropbox/ECOLES/Openclassroom/P6_de_Pertat_Antoine/AntoinedePertat_6_240521/frontend/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/adepertat/Dropbox/ECOLES/Openclassroom/P6_de_Pertat_Antoine/AntoinedePertat_6_240521/frontend/node_modules/@babel/runtime/helpers/esm/createSuper\";\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { ContentChild, Directive, ElementRef, Input, TemplateRef, ChangeDetectionStrategy, Component, IterableDiffers, ViewContainerRef, ViewEncapsulation, Attribute, ChangeDetectorRef, ContentChildren, isDevMode, Optional, ViewChild, Inject, NgModule } from '@angular/core';\nimport { DataSource } from '@angular/cdk/collections';\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/bidi';\nimport * as ɵngcc2 from '@angular/cdk/platform';\nexport { DataSource } from '@angular/cdk/collections';\nimport { DOCUMENT, CommonModule } from '@angular/common';\nimport { BehaviorSubject, Observable, of, Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { Platform } from '@angular/cdk/platform';\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * Mixin to provide a directive with a function that checks if the sticky input has been\n * changed since the last time the function was called. Essentially adds a dirty-check to the\n * sticky value.\n * \\@docs-private\n * @template T\n * @param {?} base\n * @return {?}\n */\n\nfunction mixinHasStickyInput(base) {\n  return /*#__PURE__*/function (_base) {\n    _inherits(_class, _base);\n\n    var _super = _createSuper(_class);\n\n    /**\n     * @param {...?} args\n     */\n    function _class() {\n      var _this;\n\n      _classCallCheck(this, _class);\n\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      _this = _super.call.apply(_super, [this].concat(args));\n      _this._sticky = false;\n      /**\n       * Whether the sticky input has changed since it was last checked.\n       */\n\n      _this._hasStickyChanged = false;\n      return _this;\n    }\n    /**\n     * Whether sticky positioning should be applied.\n     * @return {?}\n     */\n\n\n    _createClass(_class, [{\n      key: \"sticky\",\n      get: function get() {\n        return this._sticky;\n      }\n      /**\n       * @param {?} v\n       * @return {?}\n       */\n      ,\n      set: function set(v) {\n        /** @type {?} */\n        var prevValue = this._sticky;\n        this._sticky = coerceBooleanProperty(v);\n        this._hasStickyChanged = prevValue !== this._sticky;\n      }\n      /**\n       * Whether the sticky value has changed since this was last called.\n       * @return {?}\n       */\n\n    }, {\n      key: \"hasStickyChanged\",\n      value: function hasStickyChanged() {\n        /** @type {?} */\n        var hasStickyChanged = this._hasStickyChanged;\n        this._hasStickyChanged = false;\n        return hasStickyChanged;\n      }\n      /**\n       * Resets the dirty check for cases where the sticky state has been used without checking.\n       * @return {?}\n       */\n\n    }, {\n      key: \"resetStickyChanged\",\n      value: function resetStickyChanged() {\n        this._hasStickyChanged = false;\n      }\n    }]);\n\n    return _class;\n  }(base);\n}\n\nvar CdkCellDef = /*@__PURE__*/function () {\n  var CdkCellDef =\n  /**\n   * @param {?} template\n   */\n  function CdkCellDef(template) {\n    _classCallCheck(this, CdkCellDef);\n\n    this.template = template;\n  };\n\n  CdkCellDef.ɵfac = function CdkCellDef_Factory(t) {\n    return new (t || CdkCellDef)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef));\n  };\n\n  CdkCellDef.ɵdir =\n  /*@__PURE__*/\n\n  /*@__PURE__*/\n  ɵngcc0.ɵɵdefineDirective({\n    type: CdkCellDef,\n    selectors: [[\"\", \"cdkCellDef\", \"\"]]\n  });\n  return CdkCellDef;\n}();\n\nvar CdkHeaderCellDef = /*@__PURE__*/function () {\n  var CdkHeaderCellDef =\n  /**\n   * @param {?} template\n   */\n  function CdkHeaderCellDef(template) {\n    _classCallCheck(this, CdkHeaderCellDef);\n\n    this.template = template;\n  };\n\n  CdkHeaderCellDef.ɵfac = function CdkHeaderCellDef_Factory(t) {\n    return new (t || CdkHeaderCellDef)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef));\n  };\n\n  CdkHeaderCellDef.ɵdir =\n  /*@__PURE__*/\n\n  /*@__PURE__*/\n  ɵngcc0.ɵɵdefineDirective({\n    type: CdkHeaderCellDef,\n    selectors: [[\"\", \"cdkHeaderCellDef\", \"\"]]\n  });\n  return CdkHeaderCellDef;\n}();\n\nvar CdkFooterCellDef = /*@__PURE__*/function () {\n  var CdkFooterCellDef =\n  /**\n   * @param {?} template\n   */\n  function CdkFooterCellDef(template) {\n    _classCallCheck(this, CdkFooterCellDef);\n\n    this.template = template;\n  };\n\n  CdkFooterCellDef.ɵfac = function CdkFooterCellDef_Factory(t) {\n    return new (t || CdkFooterCellDef)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef));\n  };\n\n  CdkFooterCellDef.ɵdir =\n  /*@__PURE__*/\n\n  /*@__PURE__*/\n  ɵngcc0.ɵɵdefineDirective({\n    type: CdkFooterCellDef,\n    selectors: [[\"\", \"cdkFooterCellDef\", \"\"]]\n  });\n  return CdkFooterCellDef;\n}();\n/**\n * \\@docs-private\n */\n\n\nvar CdkColumnDefBase = function CdkColumnDefBase() {\n  _classCallCheck(this, CdkColumnDefBase);\n};\n/** @type {?} */\n\n\nvar _CdkColumnDefBase = /*@__PURE__*/mixinHasStickyInput(CdkColumnDefBase);\n\nvar CdkColumnDef = /*@__PURE__*/function () {\n  var CdkColumnDef = /*#__PURE__*/function (_CdkColumnDefBase2) {\n    _inherits(CdkColumnDef, _CdkColumnDefBase2);\n\n    var _super2 = _createSuper(CdkColumnDef);\n\n    function CdkColumnDef() {\n      var _this2;\n\n      _classCallCheck(this, CdkColumnDef);\n\n      _this2 = _super2.apply(this, arguments);\n      _this2._stickyEnd = false;\n      return _this2;\n    }\n    /**\n     * Unique name for this column.\n     * @return {?}\n     */\n\n\n    _createClass(CdkColumnDef, [{\n      key: \"name\",\n      get: function get() {\n        return this._name;\n      }\n      /**\n       * @param {?} name\n       * @return {?}\n       */\n      ,\n      set: function set(name) {\n        // If the directive is set without a name (updated programatically), then this setter will\n        // trigger with an empty string and should not overwrite the programatically set value.\n        if (!name) {\n          return;\n        }\n\n        this._name = name;\n        this.cssClassFriendlyName = name.replace(/[^a-z0-9_-]/ig, '-');\n      }\n      /**\n       * Whether this column should be sticky positioned on the end of the row. Should make sure\n       * that it mimics the `CanStick` mixin such that `_hasStickyChanged` is set to true if the value\n       * has been changed.\n       * @return {?}\n       */\n\n    }, {\n      key: \"stickyEnd\",\n      get: function get() {\n        return this._stickyEnd;\n      }\n      /**\n       * @param {?} v\n       * @return {?}\n       */\n      ,\n      set: function set(v) {\n        /** @type {?} */\n        var prevValue = this._stickyEnd;\n        this._stickyEnd = coerceBooleanProperty(v);\n        this._hasStickyChanged = prevValue !== this._stickyEnd;\n      }\n    }]);\n\n    return CdkColumnDef;\n  }(_CdkColumnDefBase);\n\n  CdkColumnDef.ɵfac =\n  /*@__PURE__*/\n\n  /*@__PURE__*/\n  function () {\n    var ɵCdkColumnDef_BaseFactory;\n    return function CdkColumnDef_Factory(t) {\n      return (ɵCdkColumnDef_BaseFactory || (ɵCdkColumnDef_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(CdkColumnDef)))(t || CdkColumnDef);\n    };\n  }();\n\n  CdkColumnDef.ɵdir =\n  /*@__PURE__*/\n\n  /*@__PURE__*/\n  ɵngcc0.ɵɵdefineDirective({\n    type: CdkColumnDef,\n    selectors: [[\"\", \"cdkColumnDef\", \"\"]],\n    contentQueries: function CdkColumnDef_ContentQueries(rf, ctx, dirIndex) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, CdkCellDef, 5);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, CdkHeaderCellDef, 5);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, CdkFooterCellDef, 5);\n      }\n\n      if (rf & 2) {\n        var _t;\n\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.cell = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.headerCell = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.footerCell = _t.first);\n      }\n    },\n    inputs: {\n      sticky: \"sticky\",\n      name: [\"cdkColumnDef\", \"name\"],\n      stickyEnd: \"stickyEnd\"\n    },\n    features: [/*@__PURE__*/ɵngcc0.ɵɵProvidersFeature([{\n      provide: 'MAT_SORT_HEADER_COLUMN_DEF',\n      useExisting: CdkColumnDef\n    }]), ɵngcc0.ɵɵInheritDefinitionFeature]\n  });\n  return CdkColumnDef;\n}();\n/**\n * Base class for the cells. Adds a CSS classname that identifies the column it renders in.\n */\n\n\nvar BaseCdkCell =\n/**\n * @param {?} columnDef\n * @param {?} elementRef\n */\nfunction BaseCdkCell(columnDef, elementRef) {\n  _classCallCheck(this, BaseCdkCell);\n\n  /** @type {?} */\n  var columnClassName = \"cdk-column-\".concat(columnDef.cssClassFriendlyName);\n  elementRef.nativeElement.classList.add(columnClassName);\n};\n\nvar CdkHeaderCell = /*@__PURE__*/function () {\n  var CdkHeaderCell = /*#__PURE__*/function (_BaseCdkCell) {\n    _inherits(CdkHeaderCell, _BaseCdkCell);\n\n    var _super3 = _createSuper(CdkHeaderCell);\n\n    /**\n     * @param {?} columnDef\n     * @param {?} elementRef\n     */\n    function CdkHeaderCell(columnDef, elementRef) {\n      _classCallCheck(this, CdkHeaderCell);\n\n      return _super3.call(this, columnDef, elementRef);\n    }\n\n    return CdkHeaderCell;\n  }(BaseCdkCell);\n\n  CdkHeaderCell.ɵfac = function CdkHeaderCell_Factory(t) {\n    return new (t || CdkHeaderCell)(ɵngcc0.ɵɵdirectiveInject(CdkColumnDef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef));\n  };\n\n  CdkHeaderCell.ɵdir =\n  /*@__PURE__*/\n\n  /*@__PURE__*/\n  ɵngcc0.ɵɵdefineDirective({\n    type: CdkHeaderCell,\n    selectors: [[\"cdk-header-cell\"], [\"th\", \"cdk-header-cell\", \"\"]],\n    hostAttrs: [\"role\", \"columnheader\", 1, \"cdk-header-cell\"],\n    features: [ɵngcc0.ɵɵInheritDefinitionFeature]\n  });\n  return CdkHeaderCell;\n}();\n\nvar CdkFooterCell = /*@__PURE__*/function () {\n  var CdkFooterCell = /*#__PURE__*/function (_BaseCdkCell2) {\n    _inherits(CdkFooterCell, _BaseCdkCell2);\n\n    var _super4 = _createSuper(CdkFooterCell);\n\n    /**\n     * @param {?} columnDef\n     * @param {?} elementRef\n     */\n    function CdkFooterCell(columnDef, elementRef) {\n      _classCallCheck(this, CdkFooterCell);\n\n      return _super4.call(this, columnDef, elementRef);\n    }\n\n    return CdkFooterCell;\n  }(BaseCdkCell);\n\n  CdkFooterCell.ɵfac = function CdkFooterCell_Factory(t) {\n    return new (t || CdkFooterCell)(ɵngcc0.ɵɵdirectiveInject(CdkColumnDef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef));\n  };\n\n  CdkFooterCell.ɵdir =\n  /*@__PURE__*/\n\n  /*@__PURE__*/\n  ɵngcc0.ɵɵdefineDirective({\n    type: CdkFooterCell,\n    selectors: [[\"cdk-footer-cell\"], [\"td\", \"cdk-footer-cell\", \"\"]],\n    hostAttrs: [\"role\", \"gridcell\", 1, \"cdk-footer-cell\"],\n    features: [ɵngcc0.ɵɵInheritDefinitionFeature]\n  });\n  return CdkFooterCell;\n}();\n\nvar CdkCell = /*@__PURE__*/function () {\n  var CdkCell = /*#__PURE__*/function (_BaseCdkCell3) {\n    _inherits(CdkCell, _BaseCdkCell3);\n\n    var _super5 = _createSuper(CdkCell);\n\n    /**\n     * @param {?} columnDef\n     * @param {?} elementRef\n     */\n    function CdkCell(columnDef, elementRef) {\n      _classCallCheck(this, CdkCell);\n\n      return _super5.call(this, columnDef, elementRef);\n    }\n\n    return CdkCell;\n  }(BaseCdkCell);\n\n  CdkCell.ɵfac = function CdkCell_Factory(t) {\n    return new (t || CdkCell)(ɵngcc0.ɵɵdirectiveInject(CdkColumnDef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef));\n  };\n\n  CdkCell.ɵdir =\n  /*@__PURE__*/\n\n  /*@__PURE__*/\n  ɵngcc0.ɵɵdefineDirective({\n    type: CdkCell,\n    selectors: [[\"cdk-cell\"], [\"td\", \"cdk-cell\", \"\"]],\n    hostAttrs: [\"role\", \"gridcell\", 1, \"cdk-cell\"],\n    features: [ɵngcc0.ɵɵInheritDefinitionFeature]\n  });\n  return CdkCell;\n}();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/** *\n * The row template that can be used by the mat-table. Should not be used outside of the\n * material library.\n  @type {?} */\n\n\nvar CDK_ROW_TEMPLATE = \"<ng-container cdkCellOutlet></ng-container>\";\n\nvar BaseRowDef = /*@__PURE__*/function () {\n  var BaseRowDef = /*#__PURE__*/function () {\n    /**\n     * @param {?} template\n     * @param {?} _differs\n     */\n    function BaseRowDef(template, _differs) {\n      _classCallCheck(this, BaseRowDef);\n\n      this.template = template;\n      this._differs = _differs;\n    }\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n\n\n    _createClass(BaseRowDef, [{\n      key: \"ngOnChanges\",\n      value: function ngOnChanges(changes) {\n        // Create a new columns differ if one does not yet exist. Initialize it based on initial value\n        // of the columns property or an empty array if none is provided.\n        if (!this._columnsDiffer) {\n          /** @type {?} */\n          var columns = changes['columns'] && changes['columns'].currentValue || [];\n          this._columnsDiffer = this._differs.find(columns).create();\n\n          this._columnsDiffer.diff(columns);\n        }\n      }\n      /**\n       * Returns the difference between the current columns and the columns from the last diff, or null\n       * if there is no difference.\n       * @return {?}\n       */\n\n    }, {\n      key: \"getColumnsDiff\",\n      value: function getColumnsDiff() {\n        return this._columnsDiffer.diff(this.columns);\n      }\n      /**\n       * Gets this row def's relevant cell template from the provided column def.\n       * @param {?} column\n       * @return {?}\n       */\n\n    }, {\n      key: \"extractCellTemplate\",\n      value: function extractCellTemplate(column) {\n        if (this instanceof CdkHeaderRowDef) {\n          return column.headerCell.template;\n        }\n\n        if (this instanceof CdkFooterRowDef) {\n          return column.footerCell.template;\n        } else {\n          return column.cell.template;\n        }\n      }\n    }]);\n\n    return BaseRowDef;\n  }();\n\n  BaseRowDef.ɵfac = function BaseRowDef_Factory(t) {\n    ɵngcc0.ɵɵinvalidFactory();\n  };\n\n  BaseRowDef.ɵdir =\n  /*@__PURE__*/\n\n  /*@__PURE__*/\n  ɵngcc0.ɵɵdefineDirective({\n    type: BaseRowDef,\n    features: [ɵngcc0.ɵɵNgOnChangesFeature]\n  });\n  return BaseRowDef;\n}();\n/**\n * \\@docs-private\n */\n\n\nvar CdkHeaderRowDefBase = /*#__PURE__*/function (_BaseRowDef) {\n  _inherits(CdkHeaderRowDefBase, _BaseRowDef);\n\n  var _super6 = _createSuper(CdkHeaderRowDefBase);\n\n  function CdkHeaderRowDefBase() {\n    _classCallCheck(this, CdkHeaderRowDefBase);\n\n    return _super6.apply(this, arguments);\n  }\n\n  return CdkHeaderRowDefBase;\n}(BaseRowDef);\n/** @type {?} */\n\n\nvar _CdkHeaderRowDefBase = /*@__PURE__*/mixinHasStickyInput(CdkHeaderRowDefBase);\n\nvar CdkHeaderRowDef = /*@__PURE__*/function () {\n  var CdkHeaderRowDef = /*#__PURE__*/function (_CdkHeaderRowDefBase2) {\n    _inherits(CdkHeaderRowDef, _CdkHeaderRowDefBase2);\n\n    var _super7 = _createSuper(CdkHeaderRowDef);\n\n    /**\n     * @param {?} template\n     * @param {?} _differs\n     */\n    function CdkHeaderRowDef(template, _differs) {\n      _classCallCheck(this, CdkHeaderRowDef);\n\n      return _super7.call(this, template, _differs);\n    }\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n\n\n    _createClass(CdkHeaderRowDef, [{\n      key: \"ngOnChanges\",\n      value: function ngOnChanges(changes) {\n        _get(_getPrototypeOf(CdkHeaderRowDef.prototype), \"ngOnChanges\", this).call(this, changes);\n      }\n    }]);\n\n    return CdkHeaderRowDef;\n  }(_CdkHeaderRowDefBase);\n\n  CdkHeaderRowDef.ɵfac = function CdkHeaderRowDef_Factory(t) {\n    return new (t || CdkHeaderRowDef)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.IterableDiffers));\n  };\n\n  CdkHeaderRowDef.ɵdir =\n  /*@__PURE__*/\n\n  /*@__PURE__*/\n  ɵngcc0.ɵɵdefineDirective({\n    type: CdkHeaderRowDef,\n    selectors: [[\"\", \"cdkHeaderRowDef\", \"\"]],\n    inputs: {\n      columns: [\"cdkHeaderRowDef\", \"columns\"],\n      sticky: [\"cdkHeaderRowDefSticky\", \"sticky\"]\n    },\n    features: [ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature]\n  });\n  return CdkHeaderRowDef;\n}();\n/**\n * \\@docs-private\n */\n\n\nvar CdkFooterRowDefBase = /*#__PURE__*/function (_BaseRowDef2) {\n  _inherits(CdkFooterRowDefBase, _BaseRowDef2);\n\n  var _super8 = _createSuper(CdkFooterRowDefBase);\n\n  function CdkFooterRowDefBase() {\n    _classCallCheck(this, CdkFooterRowDefBase);\n\n    return _super8.apply(this, arguments);\n  }\n\n  return CdkFooterRowDefBase;\n}(BaseRowDef);\n/** @type {?} */\n\n\nvar _CdkFooterRowDefBase = /*@__PURE__*/mixinHasStickyInput(CdkFooterRowDefBase);\n\nvar CdkFooterRowDef = /*@__PURE__*/function () {\n  var CdkFooterRowDef = /*#__PURE__*/function (_CdkFooterRowDefBase2) {\n    _inherits(CdkFooterRowDef, _CdkFooterRowDefBase2);\n\n    var _super9 = _createSuper(CdkFooterRowDef);\n\n    /**\n     * @param {?} template\n     * @param {?} _differs\n     */\n    function CdkFooterRowDef(template, _differs) {\n      _classCallCheck(this, CdkFooterRowDef);\n\n      return _super9.call(this, template, _differs);\n    }\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n\n\n    _createClass(CdkFooterRowDef, [{\n      key: \"ngOnChanges\",\n      value: function ngOnChanges(changes) {\n        _get(_getPrototypeOf(CdkFooterRowDef.prototype), \"ngOnChanges\", this).call(this, changes);\n      }\n    }]);\n\n    return CdkFooterRowDef;\n  }(_CdkFooterRowDefBase);\n\n  CdkFooterRowDef.ɵfac = function CdkFooterRowDef_Factory(t) {\n    return new (t || CdkFooterRowDef)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.IterableDiffers));\n  };\n\n  CdkFooterRowDef.ɵdir =\n  /*@__PURE__*/\n\n  /*@__PURE__*/\n  ɵngcc0.ɵɵdefineDirective({\n    type: CdkFooterRowDef,\n    selectors: [[\"\", \"cdkFooterRowDef\", \"\"]],\n    inputs: {\n      columns: [\"cdkFooterRowDef\", \"columns\"],\n      sticky: [\"cdkFooterRowDefSticky\", \"sticky\"]\n    },\n    features: [ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature]\n  });\n  return CdkFooterRowDef;\n}();\n\nvar CdkRowDef = /*@__PURE__*/function () {\n  var CdkRowDef = /*#__PURE__*/function (_BaseRowDef3) {\n    _inherits(CdkRowDef, _BaseRowDef3);\n\n    var _super10 = _createSuper(CdkRowDef);\n\n    /**\n     * @param {?} template\n     * @param {?} _differs\n     */\n    function CdkRowDef(template, _differs) {\n      _classCallCheck(this, CdkRowDef);\n\n      return _super10.call(this, template, _differs);\n    }\n\n    return CdkRowDef;\n  }(BaseRowDef);\n\n  CdkRowDef.ɵfac = function CdkRowDef_Factory(t) {\n    return new (t || CdkRowDef)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.IterableDiffers));\n  };\n\n  CdkRowDef.ɵdir =\n  /*@__PURE__*/\n\n  /*@__PURE__*/\n  ɵngcc0.ɵɵdefineDirective({\n    type: CdkRowDef,\n    selectors: [[\"\", \"cdkRowDef\", \"\"]],\n    inputs: {\n      columns: [\"cdkRowDefColumns\", \"columns\"],\n      when: [\"cdkRowDefWhen\", \"when\"]\n    },\n    features: [ɵngcc0.ɵɵInheritDefinitionFeature]\n  });\n  return CdkRowDef;\n}();\n\nvar CdkCellOutlet = /*@__PURE__*/function () {\n  var CdkCellOutlet = /*#__PURE__*/function () {\n    /**\n     * @param {?} _viewContainer\n     */\n    function CdkCellOutlet(_viewContainer) {\n      _classCallCheck(this, CdkCellOutlet);\n\n      this._viewContainer = _viewContainer;\n      CdkCellOutlet.mostRecentCellOutlet = this;\n    }\n    /**\n     * @return {?}\n     */\n\n\n    _createClass(CdkCellOutlet, [{\n      key: \"ngOnDestroy\",\n      value: function ngOnDestroy() {\n        // If this was the last outlet being rendered in the view, remove the reference\n        // from the static property after it has been destroyed to avoid leaking memory.\n        if (CdkCellOutlet.mostRecentCellOutlet === this) {\n          CdkCellOutlet.mostRecentCellOutlet = null;\n        }\n      }\n    }]);\n\n    return CdkCellOutlet;\n  }();\n\n  CdkCellOutlet.ɵfac = function CdkCellOutlet_Factory(t) {\n    return new (t || CdkCellOutlet)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef));\n  };\n\n  CdkCellOutlet.ɵdir =\n  /*@__PURE__*/\n\n  /*@__PURE__*/\n  ɵngcc0.ɵɵdefineDirective({\n    type: CdkCellOutlet,\n    selectors: [[\"\", \"cdkCellOutlet\", \"\"]]\n  });\n  /**\n   * Static property containing the latest constructed instance of this class.\n   * Used by the CDK table when each CdkHeaderRow and CdkRow component is created using\n   * createEmbeddedView. After one of these components are created, this property will provide\n   * a handle to provide that component's cells and context. After init, the CdkCellOutlet will\n   * construct the cells with the provided context.\n   */\n\n  CdkCellOutlet.mostRecentCellOutlet = null;\n  return CdkCellOutlet;\n}();\n\nvar CdkHeaderRow = /*@__PURE__*/function () {\n  var CdkHeaderRow = function CdkHeaderRow() {\n    _classCallCheck(this, CdkHeaderRow);\n  };\n\n  CdkHeaderRow.ɵfac = function CdkHeaderRow_Factory(t) {\n    return new (t || CdkHeaderRow)();\n  };\n\n  CdkHeaderRow.ɵcmp =\n  /*@__PURE__*/\n\n  /*@__PURE__*/\n  ɵngcc0.ɵɵdefineComponent({\n    type: CdkHeaderRow,\n    selectors: [[\"cdk-header-row\"], [\"tr\", \"cdk-header-row\", \"\"]],\n    hostAttrs: [\"role\", \"row\", 1, \"cdk-header-row\"],\n    decls: 1,\n    vars: 0,\n    consts: [[\"cdkCellOutlet\", \"\"]],\n    template: function CdkHeaderRow_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵelementContainer(0, 0);\n      }\n    },\n    directives: [CdkCellOutlet],\n    encapsulation: 2,\n    changeDetection: 0\n  });\n  return CdkHeaderRow;\n}();\n\nvar CdkFooterRow = /*@__PURE__*/function () {\n  var CdkFooterRow = function CdkFooterRow() {\n    _classCallCheck(this, CdkFooterRow);\n  };\n\n  CdkFooterRow.ɵfac = function CdkFooterRow_Factory(t) {\n    return new (t || CdkFooterRow)();\n  };\n\n  CdkFooterRow.ɵcmp =\n  /*@__PURE__*/\n\n  /*@__PURE__*/\n  ɵngcc0.ɵɵdefineComponent({\n    type: CdkFooterRow,\n    selectors: [[\"cdk-footer-row\"], [\"tr\", \"cdk-footer-row\", \"\"]],\n    hostAttrs: [\"role\", \"row\", 1, \"cdk-footer-row\"],\n    decls: 1,\n    vars: 0,\n    consts: [[\"cdkCellOutlet\", \"\"]],\n    template: function CdkFooterRow_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵelementContainer(0, 0);\n      }\n    },\n    directives: [CdkCellOutlet],\n    encapsulation: 2,\n    changeDetection: 0\n  });\n  return CdkFooterRow;\n}();\n\nvar CdkRow = /*@__PURE__*/function () {\n  var CdkRow = function CdkRow() {\n    _classCallCheck(this, CdkRow);\n  };\n\n  CdkRow.ɵfac = function CdkRow_Factory(t) {\n    return new (t || CdkRow)();\n  };\n\n  CdkRow.ɵcmp =\n  /*@__PURE__*/\n\n  /*@__PURE__*/\n  ɵngcc0.ɵɵdefineComponent({\n    type: CdkRow,\n    selectors: [[\"cdk-row\"], [\"tr\", \"cdk-row\", \"\"]],\n    hostAttrs: [\"role\", \"row\", 1, \"cdk-row\"],\n    decls: 1,\n    vars: 0,\n    consts: [[\"cdkCellOutlet\", \"\"]],\n    template: function CdkRow_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵelementContainer(0, 0);\n      }\n    },\n    directives: [CdkCellOutlet],\n    encapsulation: 2,\n    changeDetection: 0\n  });\n  return CdkRow;\n}();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * Returns an error to be thrown when attempting to find an unexisting column.\n * \\@docs-private\n * @param {?} id Id whose lookup failed.\n * @return {?}\n */\n\n\nfunction getTableUnknownColumnError(id) {\n  return Error(\"Could not find column with id \\\"\".concat(id, \"\\\".\"));\n}\n/**\n * Returns an error to be thrown when two column definitions have the same name.\n * \\@docs-private\n * @param {?} name\n * @return {?}\n */\n\n\nfunction getTableDuplicateColumnNameError(name) {\n  return Error(\"Duplicate column definition name provided: \\\"\".concat(name, \"\\\".\"));\n}\n/**\n * Returns an error to be thrown when there are multiple rows that are missing a when function.\n * \\@docs-private\n * @return {?}\n */\n\n\nfunction getTableMultipleDefaultRowDefsError() {\n  return Error(\"There can only be one default row without a when predicate function.\");\n}\n/**\n * Returns an error to be thrown when there are no matching row defs for a particular set of data.\n * \\@docs-private\n * @param {?} data\n * @return {?}\n */\n\n\nfunction getTableMissingMatchingRowDefError(data) {\n  return Error(\"Could not find a matching row definition for the\" + \"provided row data: \".concat(JSON.stringify(data)));\n}\n/**\n * Returns an error to be thrown when there is no row definitions present in the content.\n * \\@docs-private\n * @return {?}\n */\n\n\nfunction getTableMissingRowDefsError() {\n  return Error('Missing definitions for header, footer, and row; ' + 'cannot determine which columns should be rendered.');\n}\n/**\n * Returns an error to be thrown when the data source does not match the compatible types.\n * \\@docs-private\n * @return {?}\n */\n\n\nfunction getTableUnknownDataSourceError() {\n  return Error(\"Provided data source did not match an array, Observable, or DataSource\");\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/** *\n * List of all possible directions that can be used for sticky positioning.\n * \\@docs-private\n  @type {?} */\n\n\nvar STICKY_DIRECTIONS = ['top', 'bottom', 'left', 'right'];\n/**\n * Applies and removes sticky positioning styles to the `CdkTable` rows and columns cells.\n * \\@docs-private\n */\n\nvar StickyStyler = /*#__PURE__*/function () {\n  /**\n   * @param {?} isNativeHtmlTable Whether the sticky logic should be based on a table\n   *     that uses the native `<table>` element.\n   * @param {?} stickCellCss The CSS class that will be applied to every row/cell that has\n   *     sticky positioning applied.\n   * @param {?} direction The directionality context of the table (ltr/rtl); affects column positioning\n   *     by reversing left/right positions.\n   * @param {?=} _isBrowser Whether the table is currently being rendered on the server or the client.\n   */\n  function StickyStyler(isNativeHtmlTable, stickCellCss, direction) {\n    var _isBrowser = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;\n\n    _classCallCheck(this, StickyStyler);\n\n    this.isNativeHtmlTable = isNativeHtmlTable;\n    this.stickCellCss = stickCellCss;\n    this.direction = direction;\n    this._isBrowser = _isBrowser;\n  }\n  /**\n   * Clears the sticky positioning styles from the row and its cells by resetting the `position`\n   * style, setting the zIndex to 0, and unsetting each provided sticky direction.\n   * @param {?} rows The list of rows that should be cleared from sticking in the provided directions\n   * @param {?} stickyDirections The directions that should no longer be set as sticky on the rows.\n   * @return {?}\n   */\n\n\n  _createClass(StickyStyler, [{\n    key: \"clearStickyPositioning\",\n    value: function clearStickyPositioning(rows, stickyDirections) {\n      var _iterator = _createForOfIteratorHelper(rows),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var row = _step.value;\n\n          // If the row isn't an element (e.g. if it's an `ng-container`),\n          // it won't have inline styles or `children` so we skip it.\n          if (row.nodeType !== row.ELEMENT_NODE) {\n            continue;\n          }\n\n          this._removeStickyStyle(row, stickyDirections);\n\n          for (var i = 0; i < row.children.length; i++) {\n            /** @type {?} */\n            var cell =\n            /** @type {?} */\n            row.children[i];\n\n            this._removeStickyStyle(cell, stickyDirections);\n          }\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n    }\n    /**\n     * Applies sticky left and right positions to the cells of each row according to the sticky\n     * states of the rendered column definitions.\n     * @param {?} rows The rows that should have its set of cells stuck according to the sticky states.\n     * @param {?} stickyStartStates A list of boolean states where each state represents whether the cell\n     *     in this index position should be stuck to the start of the row.\n     * @param {?} stickyEndStates A list of boolean states where each state represents whether the cell\n     *     in this index position should be stuck to the end of the row.\n     * @return {?}\n     */\n\n  }, {\n    key: \"updateStickyColumns\",\n    value: function updateStickyColumns(rows, stickyStartStates, stickyEndStates) {\n      /** @type {?} */\n      var hasStickyColumns = stickyStartStates.some(function (state) {\n        return state;\n      }) || stickyEndStates.some(function (state) {\n        return state;\n      });\n\n      if (!rows.length || !hasStickyColumns || !this._isBrowser) {\n        return;\n      }\n      /** @type {?} */\n\n\n      var firstRow = rows[0];\n      /** @type {?} */\n\n      var numCells = firstRow.children.length;\n      /** @type {?} */\n\n      var cellWidths = this._getCellWidths(firstRow);\n      /** @type {?} */\n\n\n      var startPositions = this._getStickyStartColumnPositions(cellWidths, stickyStartStates);\n      /** @type {?} */\n\n\n      var endPositions = this._getStickyEndColumnPositions(cellWidths, stickyEndStates);\n      /** @type {?} */\n\n\n      var isRtl = this.direction === 'rtl';\n\n      var _iterator2 = _createForOfIteratorHelper(rows),\n          _step2;\n\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var row = _step2.value;\n\n          for (var i = 0; i < numCells; i++) {\n            /** @type {?} */\n            var cell =\n            /** @type {?} */\n            row.children[i];\n\n            if (stickyStartStates[i]) {\n              this._addStickyStyle(cell, isRtl ? 'right' : 'left', startPositions[i]);\n            }\n\n            if (stickyEndStates[i]) {\n              this._addStickyStyle(cell, isRtl ? 'left' : 'right', endPositions[i]);\n            }\n          }\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n    }\n    /**\n     * Applies sticky positioning to the row's cells if using the native table layout, and to the\n     * row itself otherwise.\n     * @param {?} rowsToStick The list of rows that should be stuck according to their corresponding\n     *     sticky state and to the provided top or bottom position.\n     * @param {?} stickyStates A list of boolean states where each state represents whether the row\n     *     should be stuck in the particular top or bottom position.\n     * @param {?} position The position direction in which the row should be stuck if that row should be\n     *     sticky.\n     *\n     * @return {?}\n     */\n\n  }, {\n    key: \"stickRows\",\n    value: function stickRows(rowsToStick, stickyStates, position) {\n      // Since we can't measure the rows on the server, we can't stick the rows properly.\n      if (!this._isBrowser) {\n        return;\n      }\n      /** @type {?} */\n\n\n      var rows = position === 'bottom' ? rowsToStick.reverse() : rowsToStick;\n      /** @type {?} */\n\n      var stickyHeight = 0;\n\n      for (var rowIndex = 0; rowIndex < rows.length; rowIndex++) {\n        if (!stickyStates[rowIndex]) {\n          continue;\n        }\n        /** @type {?} */\n\n\n        var row = rows[rowIndex];\n\n        if (this.isNativeHtmlTable) {\n          for (var j = 0; j < row.children.length; j++) {\n            /** @type {?} */\n            var cell =\n            /** @type {?} */\n            row.children[j];\n\n            this._addStickyStyle(cell, position, stickyHeight);\n          }\n        } else {\n          // Flex does not respect the stick positioning on the cells, needs to be applied to the row.\n          // If this is applied on a native table, Safari causes the header to fly in wrong direction.\n          this._addStickyStyle(row, position, stickyHeight);\n        }\n\n        if (rowIndex === rows.length - 1) {\n          // prevent unnecessary reflow from getBoundingClientRect()\n          return;\n        }\n\n        stickyHeight += row.getBoundingClientRect().height;\n      }\n    }\n    /**\n     * When using the native table in Safari, sticky footer cells do not stick. The only way to stick\n     * footer rows is to apply sticky styling to the tfoot container. This should only be done if\n     * all footer rows are sticky. If not all footer rows are sticky, remove sticky positioning from\n     * the tfoot element.\n     * @param {?} tableElement\n     * @param {?} stickyStates\n     * @return {?}\n     */\n\n  }, {\n    key: \"updateStickyFooterContainer\",\n    value: function updateStickyFooterContainer(tableElement, stickyStates) {\n      if (!this.isNativeHtmlTable) {\n        return;\n      }\n      /** @type {?} */\n\n\n      var tfoot =\n      /** @type {?} */\n      tableElement.querySelector('tfoot');\n\n      if (stickyStates.some(function (state) {\n        return !state;\n      })) {\n        this._removeStickyStyle(tfoot, ['bottom']);\n      } else {\n        this._addStickyStyle(tfoot, 'bottom', 0);\n      }\n    }\n    /**\n     * Removes the sticky style on the element by removing the sticky cell CSS class, re-evaluating\n     * the zIndex, removing each of the provided sticky directions, and removing the\n     * sticky position if there are no more directions.\n     * @param {?} element\n     * @param {?} stickyDirections\n     * @return {?}\n     */\n\n  }, {\n    key: \"_removeStickyStyle\",\n    value: function _removeStickyStyle(element, stickyDirections) {\n      var _iterator3 = _createForOfIteratorHelper(stickyDirections),\n          _step3;\n\n      try {\n        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n          var dir = _step3.value;\n          element.style[dir] = '';\n        }\n      } catch (err) {\n        _iterator3.e(err);\n      } finally {\n        _iterator3.f();\n      }\n\n      element.style.zIndex = this._getCalculatedZIndex(element);\n      /** @type {?} */\n\n      var hasDirection = STICKY_DIRECTIONS.some(function (dir) {\n        return !!element.style[dir];\n      });\n\n      if (!hasDirection) {\n        element.style.position = '';\n        element.classList.remove(this.stickCellCss);\n      }\n    }\n    /**\n     * Adds the sticky styling to the element by adding the sticky style class, changing position\n     * to be sticky (and -webkit-sticky), setting the appropriate zIndex, and adding a sticky\n     * direction and value.\n     * @param {?} element\n     * @param {?} dir\n     * @param {?} dirValue\n     * @return {?}\n     */\n\n  }, {\n    key: \"_addStickyStyle\",\n    value: function _addStickyStyle(element, dir, dirValue) {\n      element.classList.add(this.stickCellCss);\n      element.style[dir] = \"\".concat(dirValue, \"px\");\n      element.style.cssText += 'position: -webkit-sticky; position: sticky; ';\n      element.style.zIndex = this._getCalculatedZIndex(element);\n    }\n    /**\n     * Calculate what the z-index should be for the element, depending on what directions (top,\n     * bottom, left, right) have been set. It should be true that elements with a top direction\n     * should have the highest index since these are elements like a table header. If any of those\n     * elements are also sticky in another direction, then they should appear above other elements\n     * that are only sticky top (e.g. a sticky column on a sticky header). Bottom-sticky elements\n     * (e.g. footer rows) should then be next in the ordering such that they are below the header\n     * but above any non-sticky elements. Finally, left/right sticky elements (e.g. sticky columns)\n     * should minimally increment so that they are above non-sticky elements but below top and bottom\n     * elements.\n     * @param {?} element\n     * @return {?}\n     */\n\n  }, {\n    key: \"_getCalculatedZIndex\",\n    value: function _getCalculatedZIndex(element) {\n      /** @type {?} */\n      var zIndexIncrements = {\n        top: 100,\n        bottom: 10,\n        left: 1,\n        right: 1\n      };\n      /** @type {?} */\n\n      var zIndex = 0;\n\n      var _iterator4 = _createForOfIteratorHelper(STICKY_DIRECTIONS),\n          _step4;\n\n      try {\n        for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n          var dir = _step4.value;\n\n          if (element.style[dir]) {\n            zIndex += zIndexIncrements[dir];\n          }\n        }\n      } catch (err) {\n        _iterator4.e(err);\n      } finally {\n        _iterator4.f();\n      }\n\n      return zIndex ? \"\".concat(zIndex) : '';\n    }\n    /**\n     * Gets the widths for each cell in the provided row.\n     * @param {?} row\n     * @return {?}\n     */\n\n  }, {\n    key: \"_getCellWidths\",\n    value: function _getCellWidths(row) {\n      /** @type {?} */\n      var cellWidths = [];\n      /** @type {?} */\n\n      var firstRowCells = row.children;\n\n      for (var i = 0; i < firstRowCells.length; i++) {\n        /** @type {?} */\n        var cell =\n        /** @type {?} */\n        firstRowCells[i];\n        cellWidths.push(cell.getBoundingClientRect().width);\n      }\n\n      return cellWidths;\n    }\n    /**\n     * Determines the left and right positions of each sticky column cell, which will be the\n     * accumulation of all sticky column cell widths to the left and right, respectively.\n     * Non-sticky cells do not need to have a value set since their positions will not be applied.\n     * @param {?} widths\n     * @param {?} stickyStates\n     * @return {?}\n     */\n\n  }, {\n    key: \"_getStickyStartColumnPositions\",\n    value: function _getStickyStartColumnPositions(widths, stickyStates) {\n      /** @type {?} */\n      var positions = [];\n      /** @type {?} */\n\n      var nextPosition = 0;\n\n      for (var i = 0; i < widths.length; i++) {\n        if (stickyStates[i]) {\n          positions[i] = nextPosition;\n          nextPosition += widths[i];\n        }\n      }\n\n      return positions;\n    }\n    /**\n     * Determines the left and right positions of each sticky column cell, which will be the\n     * accumulation of all sticky column cell widths to the left and right, respectively.\n     * Non-sticky cells do not need to have a value set since their positions will not be applied.\n     * @param {?} widths\n     * @param {?} stickyStates\n     * @return {?}\n     */\n\n  }, {\n    key: \"_getStickyEndColumnPositions\",\n    value: function _getStickyEndColumnPositions(widths, stickyStates) {\n      /** @type {?} */\n      var positions = [];\n      /** @type {?} */\n\n      var nextPosition = 0;\n\n      for (var i = widths.length; i > 0; i--) {\n        if (stickyStates[i]) {\n          positions[i] = nextPosition;\n          nextPosition += widths[i];\n        }\n      }\n\n      return positions;\n    }\n  }]);\n\n  return StickyStyler;\n}();\n\nvar DataRowOutlet = /*@__PURE__*/function () {\n  var DataRowOutlet =\n  /**\n   * @param {?} viewContainer\n   * @param {?} elementRef\n   */\n  function DataRowOutlet(viewContainer, elementRef) {\n    _classCallCheck(this, DataRowOutlet);\n\n    this.viewContainer = viewContainer;\n    this.elementRef = elementRef;\n  };\n\n  DataRowOutlet.ɵfac = function DataRowOutlet_Factory(t) {\n    return new (t || DataRowOutlet)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef));\n  };\n\n  DataRowOutlet.ɵdir =\n  /*@__PURE__*/\n\n  /*@__PURE__*/\n  ɵngcc0.ɵɵdefineDirective({\n    type: DataRowOutlet,\n    selectors: [[\"\", \"rowOutlet\", \"\"]]\n  });\n  return DataRowOutlet;\n}();\n\nvar HeaderRowOutlet = /*@__PURE__*/function () {\n  var HeaderRowOutlet =\n  /**\n   * @param {?} viewContainer\n   * @param {?} elementRef\n   */\n  function HeaderRowOutlet(viewContainer, elementRef) {\n    _classCallCheck(this, HeaderRowOutlet);\n\n    this.viewContainer = viewContainer;\n    this.elementRef = elementRef;\n  };\n\n  HeaderRowOutlet.ɵfac = function HeaderRowOutlet_Factory(t) {\n    return new (t || HeaderRowOutlet)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef));\n  };\n\n  HeaderRowOutlet.ɵdir =\n  /*@__PURE__*/\n\n  /*@__PURE__*/\n  ɵngcc0.ɵɵdefineDirective({\n    type: HeaderRowOutlet,\n    selectors: [[\"\", \"headerRowOutlet\", \"\"]]\n  });\n  return HeaderRowOutlet;\n}();\n\nvar FooterRowOutlet = /*@__PURE__*/function () {\n  var FooterRowOutlet =\n  /**\n   * @param {?} viewContainer\n   * @param {?} elementRef\n   */\n  function FooterRowOutlet(viewContainer, elementRef) {\n    _classCallCheck(this, FooterRowOutlet);\n\n    this.viewContainer = viewContainer;\n    this.elementRef = elementRef;\n  };\n\n  FooterRowOutlet.ɵfac = function FooterRowOutlet_Factory(t) {\n    return new (t || FooterRowOutlet)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef));\n  };\n\n  FooterRowOutlet.ɵdir =\n  /*@__PURE__*/\n\n  /*@__PURE__*/\n  ɵngcc0.ɵɵdefineDirective({\n    type: FooterRowOutlet,\n    selectors: [[\"\", \"footerRowOutlet\", \"\"]]\n  });\n  return FooterRowOutlet;\n}();\n/** *\n * The table template that can be used by the mat-table. Should not be used outside of the\n * material library.\n * \\@docs-private\n  @type {?} */\n\n\nvar CDK_TABLE_TEMPLATE = \"\\n  <ng-container headerRowOutlet></ng-container>\\n  <ng-container rowOutlet></ng-container>\\n  <ng-container footerRowOutlet></ng-container>\";\n\nvar CdkTable = /*@__PURE__*/function () {\n  var CdkTable = /*#__PURE__*/function () {\n    /**\n     * @param {?} _differs\n     * @param {?} _changeDetectorRef\n     * @param {?} _elementRef\n     * @param {?} role\n     * @param {?} _dir\n     * @param {?=} _document\n     * @param {?=} _platform\n     */\n    function CdkTable(_differs, _changeDetectorRef, _elementRef, role, _dir,\n    /**\n    * @deprecated\n    * @breaking-change 8.0.0 `_document` and `_platform` to\n    *    be made into a required parameters.\n    */\n    _document, _platform) {\n      _classCallCheck(this, CdkTable);\n\n      this._differs = _differs;\n      this._changeDetectorRef = _changeDetectorRef;\n      this._elementRef = _elementRef;\n      this._dir = _dir;\n      this._platform = _platform;\n      /**\n       * Subject that emits when the component has been destroyed.\n       */\n\n      this._onDestroy = new Subject();\n      /**\n       * Map of all the user's defined columns (header, data, and footer cell template) identified by\n       * name. Collection populated by the column definitions gathered by `ContentChildren` as well as\n       * any custom column definitions added to `_customColumnDefs`.\n       */\n\n      this._columnDefsByName = new Map();\n      /**\n       * Column definitions that were defined outside of the direct content children of the table.\n       * These will be defined when, e.g., creating a wrapper around the cdkTable that has\n       * column definitions as *it's* content child.\n       */\n\n      this._customColumnDefs = new Set();\n      /**\n       * Data row definitions that were defined outside of the direct content children of the table.\n       * These will be defined when, e.g., creating a wrapper around the cdkTable that has\n       * built-in data rows as *it's* content child.\n       */\n\n      this._customRowDefs = new Set();\n      /**\n       * Header row definitions that were defined outside of the direct content children of the table.\n       * These will be defined when, e.g., creating a wrapper around the cdkTable that has\n       * built-in header rows as *it's* content child.\n       */\n\n      this._customHeaderRowDefs = new Set();\n      /**\n       * Footer row definitions that were defined outside of the direct content children of the table.\n       * These will be defined when, e.g., creating a wrapper around the cdkTable that has a\n       * built-in footer row as *it's* content child.\n       */\n\n      this._customFooterRowDefs = new Set();\n      /**\n       * Whether the header row definition has been changed. Triggers an update to the header row after\n       * content is checked. Initialized as true so that the table renders the initial set of rows.\n       */\n\n      this._headerRowDefChanged = true;\n      /**\n       * Whether the footer row definition has been changed. Triggers an update to the footer row after\n       * content is checked. Initialized as true so that the table renders the initial set of rows.\n       */\n\n      this._footerRowDefChanged = true;\n      /**\n       * Cache of the latest rendered `RenderRow` objects as a map for easy retrieval when constructing\n       * a new list of `RenderRow` objects for rendering rows. Since the new list is constructed with\n       * the cached `RenderRow` objects when possible, the row identity is preserved when the data\n       * and row template matches, which allows the `IterableDiffer` to check rows by reference\n       * and understand which rows are added/moved/removed.\n       *\n       * Implemented as a map of maps where the first key is the `data: T` object and the second is the\n       * `CdkRowDef<T>` object. With the two keys, the cache points to a `RenderRow<T>` object that\n       * contains an array of created pairs. The array is necessary to handle cases where the data\n       * array contains multiple duplicate data objects and each instantiated `RenderRow` must be\n       * stored.\n       */\n\n      this._cachedRenderRowsMap = new Map();\n      /**\n       * CSS class added to any row or cell that has sticky positioning applied. May be overriden by\n       * table subclasses.\n       */\n\n      this.stickyCssClass = 'cdk-table-sticky';\n      this._multiTemplateDataRows = false;\n      /**\n       * Stream containing the latest information on what rows are being displayed on screen.\n       * Can be used by the data source to as a heuristic of what data should be provided.\n       */\n\n      this.viewChange = new BehaviorSubject({\n        start: 0,\n        end: Number.MAX_VALUE\n      });\n\n      if (!role) {\n        this._elementRef.nativeElement.setAttribute('role', 'grid');\n      }\n\n      this._document = _document;\n      this._isNativeHtmlTable = this._elementRef.nativeElement.nodeName === 'TABLE';\n    }\n    /**\n     * Tracking function that will be used to check the differences in data changes. Used similarly\n     * to `ngFor` `trackBy` function. Optimize row operations by identifying a row based on its data\n     * relative to the function to know if a row should be added/removed/moved.\n     * Accepts a function that takes two parameters, `index` and `item`.\n     * @return {?}\n     */\n\n\n    _createClass(CdkTable, [{\n      key: \"trackBy\",\n      get: function get() {\n        return this._trackByFn;\n      }\n      /**\n       * @param {?} fn\n       * @return {?}\n       */\n      ,\n      set: function set(fn) {\n        if (isDevMode() && fn != null && typeof fn !== 'function' &&\n        /** @type {?} */\n        console &&\n        /** @type {?} */\n        console.warn) {\n          console.warn(\"trackBy must be a function, but received \".concat(JSON.stringify(fn), \".\"));\n        }\n\n        this._trackByFn = fn;\n      }\n      /**\n       * The table's source of data, which can be provided in three ways (in order of complexity):\n       *   - Simple data array (each object represents one table row)\n       *   - Stream that emits a data array each time the array changes\n       *   - `DataSource` object that implements the connect/disconnect interface.\n       *\n       * If a data array is provided, the table must be notified when the array's objects are\n       * added, removed, or moved. This can be done by calling the `renderRows()` function which will\n       * render the diff since the last table render. If the data array reference is changed, the table\n       * will automatically trigger an update to the rows.\n       *\n       * When providing an Observable stream, the table will trigger an update automatically when the\n       * stream emits a new array of data.\n       *\n       * Finally, when providing a `DataSource` object, the table will use the Observable stream\n       * provided by the connect function and trigger updates when that stream emits new data array\n       * values. During the table's ngOnDestroy or when the data source is removed from the table, the\n       * table will call the DataSource's `disconnect` function (may be useful for cleaning up any\n       * subscriptions registered during the connect process).\n       * @return {?}\n       */\n\n    }, {\n      key: \"dataSource\",\n      get: function get() {\n        return this._dataSource;\n      }\n      /**\n       * @param {?} dataSource\n       * @return {?}\n       */\n      ,\n      set: function set(dataSource) {\n        if (this._dataSource !== dataSource) {\n          this._switchDataSource(dataSource);\n        }\n      }\n      /**\n       * Whether to allow multiple rows per data object by evaluating which rows evaluate their 'when'\n       * predicate to true. If `multiTemplateDataRows` is false, which is the default value, then each\n       * dataobject will render the first row that evaluates its when predicate to true, in the order\n       * defined in the table, or otherwise the default row which does not have a when predicate.\n       * @return {?}\n       */\n\n    }, {\n      key: \"multiTemplateDataRows\",\n      get: function get() {\n        return this._multiTemplateDataRows;\n      }\n      /**\n       * @param {?} v\n       * @return {?}\n       */\n      ,\n      set: function set(v) {\n        this._multiTemplateDataRows = coerceBooleanProperty(v);\n\n        if (this._rowOutlet.viewContainer.length) {\n          this._forceRenderDataRows();\n        }\n      }\n      /**\n       * @return {?}\n       */\n\n    }, {\n      key: \"ngOnInit\",\n      value: function ngOnInit() {\n        var _this3 = this;\n\n        this._setupStickyStyler();\n\n        if (this._isNativeHtmlTable) {\n          this._applyNativeTableSections();\n        } // Set up the trackBy function so that it uses the `RenderRow` as its identity by default. If\n        // the user has provided a custom trackBy, return the result of that function as evaluated\n        // with the values of the `RenderRow`'s data and index.\n\n\n        this._dataDiffer = this._differs.find([]).create(function (_i, dataRow) {\n          return _this3.trackBy ? _this3.trackBy(dataRow.dataIndex, dataRow.data) : dataRow;\n        });\n      }\n      /**\n       * @return {?}\n       */\n\n    }, {\n      key: \"ngAfterContentChecked\",\n      value: function ngAfterContentChecked() {\n        // Cache the row and column definitions gathered by ContentChildren and programmatic injection.\n        this._cacheRowDefs();\n\n        this._cacheColumnDefs(); // Make sure that the user has at least added header, footer, or data row def.\n\n\n        if (!this._headerRowDefs.length && !this._footerRowDefs.length && !this._rowDefs.length) {\n          throw getTableMissingRowDefsError();\n        } // Render updates if the list of columns have been changed for the header, row, or footer defs.\n\n\n        this._renderUpdatedColumns(); // If the header row definition has been changed, trigger a render to the header row.\n\n\n        if (this._headerRowDefChanged) {\n          this._forceRenderHeaderRows();\n\n          this._headerRowDefChanged = false;\n        } // If the footer row definition has been changed, trigger a render to the footer row.\n\n\n        if (this._footerRowDefChanged) {\n          this._forceRenderFooterRows();\n\n          this._footerRowDefChanged = false;\n        } // If there is a data source and row definitions, connect to the data source unless a\n        // connection has already been made.\n\n\n        if (this.dataSource && this._rowDefs.length > 0 && !this._renderChangeSubscription) {\n          this._observeRenderChanges();\n        }\n\n        this._checkStickyStates();\n      }\n      /**\n       * @return {?}\n       */\n\n    }, {\n      key: \"ngOnDestroy\",\n      value: function ngOnDestroy() {\n        this._rowOutlet.viewContainer.clear();\n\n        this._headerRowOutlet.viewContainer.clear();\n\n        this._footerRowOutlet.viewContainer.clear();\n\n        this._cachedRenderRowsMap.clear();\n\n        this._onDestroy.next();\n\n        this._onDestroy.complete();\n\n        if (this.dataSource instanceof DataSource) {\n          this.dataSource.disconnect(this);\n        }\n      }\n      /**\n       * Renders rows based on the table's latest set of data, which was either provided directly as an\n       * input or retrieved through an Observable stream (directly or from a DataSource).\n       * Checks for differences in the data since the last diff to perform only the necessary\n       * changes (add/remove/move rows).\n       *\n       * If the table's data source is a DataSource or Observable, this will be invoked automatically\n       * each time the provided Observable stream emits a new data array. Otherwise if your data is\n       * an array, this function will need to be called to render any changes.\n       * @return {?}\n       */\n\n    }, {\n      key: \"renderRows\",\n      value: function renderRows() {\n        var _this4 = this;\n\n        this._renderRows = this._getAllRenderRows();\n        /** @type {?} */\n\n        var changes = this._dataDiffer.diff(this._renderRows);\n\n        if (!changes) {\n          return;\n        }\n        /** @type {?} */\n\n\n        var viewContainer = this._rowOutlet.viewContainer;\n        changes.forEachOperation(function (record, prevIndex, currentIndex) {\n          if (record.previousIndex == null) {\n            _this4._insertRow(record.item,\n            /** @type {?} */\n            currentIndex);\n          } else if (currentIndex == null) {\n            viewContainer.remove(\n            /** @type {?} */\n            prevIndex);\n          } else {\n            /** @type {?} */\n            var view =\n            /** @type {?} */\n            viewContainer.get(\n            /** @type {?} */\n            prevIndex);\n            viewContainer.move(\n            /** @type {?} */\n            view, currentIndex);\n          }\n        }); // Update the meta context of a row's context data (index, count, first, last, ...)\n\n        this._updateRowIndexContext(); // Update rows that did not get added/removed/moved but may have had their identity changed,\n        // e.g. if trackBy matched data on some property but the actual data reference changed.\n\n\n        changes.forEachIdentityChange(function (record) {\n          /** @type {?} */\n          var rowView =\n          /** @type {?} */\n          viewContainer.get(\n          /** @type {?} */\n          record.currentIndex);\n          rowView.context.$implicit = record.item.data;\n        });\n        this.updateStickyColumnStyles();\n      }\n      /**\n       * Sets the header row definition to be used. Overrides the header row definition gathered by\n       * using `ContentChild`, if one exists. Sets a flag that will re-render the header row after the\n       * table's content is checked.\n       * \\@docs-private\n       * @deprecated Use `addHeaderRowDef` and `removeHeaderRowDef` instead\n       * \\@breaking-change 8.0.0\n       * @param {?} headerRowDef\n       * @return {?}\n       */\n\n    }, {\n      key: \"setHeaderRowDef\",\n      value: function setHeaderRowDef(headerRowDef) {\n        this._customHeaderRowDefs = new Set([headerRowDef]);\n        this._headerRowDefChanged = true;\n      }\n      /**\n       * Sets the footer row definition to be used. Overrides the footer row definition gathered by\n       * using `ContentChild`, if one exists. Sets a flag that will re-render the footer row after the\n       * table's content is checked.\n       * \\@docs-private\n       * @deprecated Use `addFooterRowDef` and `removeFooterRowDef` instead\n       * \\@breaking-change 8.0.0\n       * @param {?} footerRowDef\n       * @return {?}\n       */\n\n    }, {\n      key: \"setFooterRowDef\",\n      value: function setFooterRowDef(footerRowDef) {\n        this._customFooterRowDefs = new Set([footerRowDef]);\n        this._footerRowDefChanged = true;\n      }\n      /**\n       * Adds a column definition that was not included as part of the content children.\n       * @param {?} columnDef\n       * @return {?}\n       */\n\n    }, {\n      key: \"addColumnDef\",\n      value: function addColumnDef(columnDef) {\n        this._customColumnDefs.add(columnDef);\n      }\n      /**\n       * Removes a column definition that was not included as part of the content children.\n       * @param {?} columnDef\n       * @return {?}\n       */\n\n    }, {\n      key: \"removeColumnDef\",\n      value: function removeColumnDef(columnDef) {\n        this._customColumnDefs.delete(columnDef);\n      }\n      /**\n       * Adds a row definition that was not included as part of the content children.\n       * @param {?} rowDef\n       * @return {?}\n       */\n\n    }, {\n      key: \"addRowDef\",\n      value: function addRowDef(rowDef) {\n        this._customRowDefs.add(rowDef);\n      }\n      /**\n       * Removes a row definition that was not included as part of the content children.\n       * @param {?} rowDef\n       * @return {?}\n       */\n\n    }, {\n      key: \"removeRowDef\",\n      value: function removeRowDef(rowDef) {\n        this._customRowDefs.delete(rowDef);\n      }\n      /**\n       * Adds a header row definition that was not included as part of the content children.\n       * @param {?} headerRowDef\n       * @return {?}\n       */\n\n    }, {\n      key: \"addHeaderRowDef\",\n      value: function addHeaderRowDef(headerRowDef) {\n        this._customHeaderRowDefs.add(headerRowDef);\n\n        this._headerRowDefChanged = true;\n      }\n      /**\n       * Removes a header row definition that was not included as part of the content children.\n       * @param {?} headerRowDef\n       * @return {?}\n       */\n\n    }, {\n      key: \"removeHeaderRowDef\",\n      value: function removeHeaderRowDef(headerRowDef) {\n        this._customHeaderRowDefs.delete(headerRowDef);\n\n        this._headerRowDefChanged = true;\n      }\n      /**\n       * Adds a footer row definition that was not included as part of the content children.\n       * @param {?} footerRowDef\n       * @return {?}\n       */\n\n    }, {\n      key: \"addFooterRowDef\",\n      value: function addFooterRowDef(footerRowDef) {\n        this._customFooterRowDefs.add(footerRowDef);\n\n        this._footerRowDefChanged = true;\n      }\n      /**\n       * Removes a footer row definition that was not included as part of the content children.\n       * @param {?} footerRowDef\n       * @return {?}\n       */\n\n    }, {\n      key: \"removeFooterRowDef\",\n      value: function removeFooterRowDef(footerRowDef) {\n        this._customFooterRowDefs.delete(footerRowDef);\n\n        this._footerRowDefChanged = true;\n      }\n      /**\n       * Updates the header sticky styles. First resets all applied styles with respect to the cells\n       * sticking to the top. Then, evaluating which cells need to be stuck to the top. This is\n       * automatically called when the header row changes its displayed set of columns, or if its\n       * sticky input changes. May be called manually for cases where the cell content changes outside\n       * of these events.\n       * @return {?}\n       */\n\n    }, {\n      key: \"updateStickyHeaderRowStyles\",\n      value: function updateStickyHeaderRowStyles() {\n        /** @type {?} */\n        var headerRows = this._getRenderedRows(this._headerRowOutlet);\n\n        this._stickyStyler.clearStickyPositioning(headerRows, ['top']);\n        /** @type {?} */\n\n\n        var stickyStates = this._headerRowDefs.map(function (def) {\n          return def.sticky;\n        });\n\n        this._stickyStyler.stickRows(headerRows, stickyStates, 'top'); // Reset the dirty state of the sticky input change since it has been used.\n\n\n        this._headerRowDefs.forEach(function (def) {\n          return def.resetStickyChanged();\n        });\n      }\n      /**\n       * Updates the footer sticky styles. First resets all applied styles with respect to the cells\n       * sticking to the bottom. Then, evaluating which cells need to be stuck to the bottom. This is\n       * automatically called when the footer row changes its displayed set of columns, or if its\n       * sticky input changes. May be called manually for cases where the cell content changes outside\n       * of these events.\n       * @return {?}\n       */\n\n    }, {\n      key: \"updateStickyFooterRowStyles\",\n      value: function updateStickyFooterRowStyles() {\n        /** @type {?} */\n        var footerRows = this._getRenderedRows(this._footerRowOutlet);\n\n        this._stickyStyler.clearStickyPositioning(footerRows, ['bottom']);\n        /** @type {?} */\n\n\n        var stickyStates = this._footerRowDefs.map(function (def) {\n          return def.sticky;\n        });\n\n        this._stickyStyler.stickRows(footerRows, stickyStates, 'bottom');\n\n        this._stickyStyler.updateStickyFooterContainer(this._elementRef.nativeElement, stickyStates); // Reset the dirty state of the sticky input change since it has been used.\n\n\n        this._footerRowDefs.forEach(function (def) {\n          return def.resetStickyChanged();\n        });\n      }\n      /**\n       * Updates the column sticky styles. First resets all applied styles with respect to the cells\n       * sticking to the left and right. Then sticky styles are added for the left and right according\n       * to the column definitions for each cell in each row. This is automatically called when\n       * the data source provides a new set of data or when a column definition changes its sticky\n       * input. May be called manually for cases where the cell content changes outside of these events.\n       * @return {?}\n       */\n\n    }, {\n      key: \"updateStickyColumnStyles\",\n      value: function updateStickyColumnStyles() {\n        var _this5 = this;\n\n        /** @type {?} */\n        var headerRows = this._getRenderedRows(this._headerRowOutlet);\n        /** @type {?} */\n\n\n        var dataRows = this._getRenderedRows(this._rowOutlet);\n        /** @type {?} */\n\n\n        var footerRows = this._getRenderedRows(this._footerRowOutlet); // Clear the left and right positioning from all columns in the table across all rows since\n        // sticky columns span across all table sections (header, data, footer)\n\n\n        this._stickyStyler.clearStickyPositioning([].concat(_toConsumableArray(headerRows), _toConsumableArray(dataRows), _toConsumableArray(footerRows)), ['left', 'right']); // Update the sticky styles for each header row depending on the def's sticky state\n\n\n        headerRows.forEach(function (headerRow, i) {\n          _this5._addStickyColumnStyles([headerRow], _this5._headerRowDefs[i]);\n        }); // Update the sticky styles for each data row depending on its def's sticky state\n\n        this._rowDefs.forEach(function (rowDef) {\n          /** @type {?} */\n          var rows = [];\n\n          for (var i = 0; i < dataRows.length; i++) {\n            if (_this5._renderRows[i].rowDef === rowDef) {\n              rows.push(dataRows[i]);\n            }\n          }\n\n          _this5._addStickyColumnStyles(rows, rowDef);\n        }); // Update the sticky styles for each footer row depending on the def's sticky state\n\n\n        footerRows.forEach(function (footerRow, i) {\n          _this5._addStickyColumnStyles([footerRow], _this5._footerRowDefs[i]);\n        }); // Reset the dirty state of the sticky input change since it has been used.\n\n        Array.from(this._columnDefsByName.values()).forEach(function (def) {\n          return def.resetStickyChanged();\n        });\n      }\n      /**\n       * Get the list of RenderRow objects to render according to the current list of data and defined\n       * row definitions. If the previous list already contained a particular pair, it should be reused\n       * so that the differ equates their references.\n       * @return {?}\n       */\n\n    }, {\n      key: \"_getAllRenderRows\",\n      value: function _getAllRenderRows() {\n        /** @type {?} */\n        var renderRows = [];\n        /** @type {?} */\n\n        var prevCachedRenderRows = this._cachedRenderRowsMap;\n        this._cachedRenderRowsMap = new Map(); // For each data object, get the list of rows that should be rendered, represented by the\n        // respective `RenderRow` object which is the pair of `data` and `CdkRowDef`.\n\n        for (var i = 0; i < this._data.length; i++) {\n          /** @type {?} */\n          var data = this._data[i];\n          /** @type {?} */\n\n          var renderRowsForData = this._getRenderRowsForData(data, i, prevCachedRenderRows.get(data));\n\n          if (!this._cachedRenderRowsMap.has(data)) {\n            this._cachedRenderRowsMap.set(data, new WeakMap());\n          }\n\n          for (var j = 0; j < renderRowsForData.length; j++) {\n            /** @type {?} */\n            var renderRow = renderRowsForData[j];\n            /** @type {?} */\n\n            var cache =\n            /** @type {?} */\n            this._cachedRenderRowsMap.get(renderRow.data);\n\n            if (cache.has(renderRow.rowDef)) {\n              /** @type {?} */\n              cache.get(renderRow.rowDef).push(renderRow);\n            } else {\n              cache.set(renderRow.rowDef, [renderRow]);\n            }\n\n            renderRows.push(renderRow);\n          }\n        }\n\n        return renderRows;\n      }\n      /**\n       * Gets a list of `RenderRow<T>` for the provided data object and any `CdkRowDef` objects that\n       * should be rendered for this data. Reuses the cached RenderRow objects if they match the same\n       * `(T, CdkRowDef)` pair.\n       * @param {?} data\n       * @param {?} dataIndex\n       * @param {?=} cache\n       * @return {?}\n       */\n\n    }, {\n      key: \"_getRenderRowsForData\",\n      value: function _getRenderRowsForData(data, dataIndex, cache) {\n        /** @type {?} */\n        var rowDefs = this._getRowDefs(data, dataIndex);\n\n        return rowDefs.map(function (rowDef) {\n          /** @type {?} */\n          var cachedRenderRows = cache && cache.has(rowDef) ?\n          /** @type {?} */\n          cache.get(rowDef) : [];\n\n          if (cachedRenderRows.length) {\n            /** @type {?} */\n            var dataRow =\n            /** @type {?} */\n            cachedRenderRows.shift();\n            dataRow.dataIndex = dataIndex;\n            return dataRow;\n          } else {\n            return {\n              data: data,\n              rowDef: rowDef,\n              dataIndex: dataIndex\n            };\n          }\n        });\n      }\n      /**\n       * Update the map containing the content's column definitions.\n       * @return {?}\n       */\n\n    }, {\n      key: \"_cacheColumnDefs\",\n      value: function _cacheColumnDefs() {\n        var _this6 = this;\n\n        this._columnDefsByName.clear();\n        /** @type {?} */\n\n\n        var columnDefs = mergeQueryListAndSet(this._contentColumnDefs, this._customColumnDefs);\n        columnDefs.forEach(function (columnDef) {\n          if (_this6._columnDefsByName.has(columnDef.name)) {\n            throw getTableDuplicateColumnNameError(columnDef.name);\n          }\n\n          _this6._columnDefsByName.set(columnDef.name, columnDef);\n        });\n      }\n      /**\n       * Update the list of all available row definitions that can be used.\n       * @return {?}\n       */\n\n    }, {\n      key: \"_cacheRowDefs\",\n      value: function _cacheRowDefs() {\n        this._headerRowDefs = mergeQueryListAndSet(this._contentHeaderRowDefs, this._customHeaderRowDefs);\n        this._footerRowDefs = mergeQueryListAndSet(this._contentFooterRowDefs, this._customFooterRowDefs);\n        this._rowDefs = mergeQueryListAndSet(this._contentRowDefs, this._customRowDefs);\n        /** @type {?} */\n\n        var defaultRowDefs = this._rowDefs.filter(function (def) {\n          return !def.when;\n        });\n\n        if (!this.multiTemplateDataRows && defaultRowDefs.length > 1) {\n          throw getTableMultipleDefaultRowDefsError();\n        }\n\n        this._defaultRowDef = defaultRowDefs[0];\n      }\n      /**\n       * Check if the header, data, or footer rows have changed what columns they want to display or\n       * whether the sticky states have changed for the header or footer. If there is a diff, then\n       * re-render that section.\n       * @return {?}\n       */\n\n    }, {\n      key: \"_renderUpdatedColumns\",\n      value: function _renderUpdatedColumns() {\n        /** @type {?} */\n        var columnsDiffReducer = function columnsDiffReducer(acc, def) {\n          return acc || !!def.getColumnsDiff();\n        }; // Force re-render data rows if the list of column definitions have changed.\n\n\n        if (this._rowDefs.reduce(columnsDiffReducer, false)) {\n          this._forceRenderDataRows();\n        } // Force re-render header/footer rows if the list of column definitions have changed..\n\n\n        if (this._headerRowDefs.reduce(columnsDiffReducer, false)) {\n          this._forceRenderHeaderRows();\n        }\n\n        if (this._footerRowDefs.reduce(columnsDiffReducer, false)) {\n          this._forceRenderFooterRows();\n        }\n      }\n      /**\n       * Switch to the provided data source by resetting the data and unsubscribing from the current\n       * render change subscription if one exists. If the data source is null, interpret this by\n       * clearing the row outlet. Otherwise start listening for new data.\n       * @param {?} dataSource\n       * @return {?}\n       */\n\n    }, {\n      key: \"_switchDataSource\",\n      value: function _switchDataSource(dataSource) {\n        this._data = [];\n\n        if (this.dataSource instanceof DataSource) {\n          this.dataSource.disconnect(this);\n        } // Stop listening for data from the previous data source.\n\n\n        if (this._renderChangeSubscription) {\n          this._renderChangeSubscription.unsubscribe();\n\n          this._renderChangeSubscription = null;\n        }\n\n        if (!dataSource) {\n          if (this._dataDiffer) {\n            this._dataDiffer.diff([]);\n          }\n\n          this._rowOutlet.viewContainer.clear();\n        }\n\n        this._dataSource = dataSource;\n      }\n      /**\n       * Set up a subscription for the data provided by the data source.\n       * @return {?}\n       */\n\n    }, {\n      key: \"_observeRenderChanges\",\n      value: function _observeRenderChanges() {\n        var _this7 = this;\n\n        // If no data source has been set, there is nothing to observe for changes.\n        if (!this.dataSource) {\n          return;\n        }\n        /** @type {?} */\n\n\n        var dataStream; // Check if the datasource is a DataSource object by observing if it has a connect function.\n        // Cannot check this.dataSource['connect'] due to potential property renaming, nor can it\n        // checked as an instanceof DataSource<T> since the table should allow for data sources\n        // that did not explicitly extend DataSource<T>.\n\n        if (\n        /** @type {?} */\n        this.dataSource.connect instanceof Function) {\n          dataStream =\n          /** @type {?} */\n          this.dataSource.connect(this);\n        } else if (this.dataSource instanceof Observable) {\n          dataStream = this.dataSource;\n        } else if (Array.isArray(this.dataSource)) {\n          dataStream = of(this.dataSource);\n        }\n\n        if (dataStream === undefined) {\n          throw getTableUnknownDataSourceError();\n        }\n\n        this._renderChangeSubscription = dataStream.pipe(takeUntil(this._onDestroy)).subscribe(function (data) {\n          _this7._data = data || [];\n\n          _this7.renderRows();\n        });\n      }\n      /**\n       * Clears any existing content in the header row outlet and creates a new embedded view\n       * in the outlet using the header row definition.\n       * @return {?}\n       */\n\n    }, {\n      key: \"_forceRenderHeaderRows\",\n      value: function _forceRenderHeaderRows() {\n        var _this8 = this;\n\n        // Clear the header row outlet if any content exists.\n        if (this._headerRowOutlet.viewContainer.length > 0) {\n          this._headerRowOutlet.viewContainer.clear();\n        }\n\n        this._headerRowDefs.forEach(function (def, i) {\n          return _this8._renderRow(_this8._headerRowOutlet, def, i);\n        });\n\n        this.updateStickyHeaderRowStyles();\n        this.updateStickyColumnStyles();\n      }\n      /**\n       * Clears any existing content in the footer row outlet and creates a new embedded view\n       * in the outlet using the footer row definition.\n       * @return {?}\n       */\n\n    }, {\n      key: \"_forceRenderFooterRows\",\n      value: function _forceRenderFooterRows() {\n        var _this9 = this;\n\n        // Clear the footer row outlet if any content exists.\n        if (this._footerRowOutlet.viewContainer.length > 0) {\n          this._footerRowOutlet.viewContainer.clear();\n        }\n\n        this._footerRowDefs.forEach(function (def, i) {\n          return _this9._renderRow(_this9._footerRowOutlet, def, i);\n        });\n\n        this.updateStickyFooterRowStyles();\n        this.updateStickyColumnStyles();\n      }\n      /**\n       * Adds the sticky column styles for the rows according to the columns' stick states.\n       * @param {?} rows\n       * @param {?} rowDef\n       * @return {?}\n       */\n\n    }, {\n      key: \"_addStickyColumnStyles\",\n      value: function _addStickyColumnStyles(rows, rowDef) {\n        var _this10 = this;\n\n        /** @type {?} */\n        var columnDefs = Array.from(rowDef.columns || []).map(function (c) {\n          return (\n            /** @type {?} */\n            _this10._columnDefsByName.get(c)\n          );\n        });\n        /** @type {?} */\n\n        var stickyStartStates = columnDefs.map(function (columnDef) {\n          return columnDef.sticky;\n        });\n        /** @type {?} */\n\n        var stickyEndStates = columnDefs.map(function (columnDef) {\n          return columnDef.stickyEnd;\n        });\n\n        this._stickyStyler.updateStickyColumns(rows, stickyStartStates, stickyEndStates);\n      }\n      /**\n       * Gets the list of rows that have been rendered in the row outlet.\n       * @param {?} rowOutlet\n       * @return {?}\n       */\n\n    }, {\n      key: \"_getRenderedRows\",\n      value: function _getRenderedRows(rowOutlet) {\n        /** @type {?} */\n        var renderedRows = [];\n\n        for (var i = 0; i < rowOutlet.viewContainer.length; i++) {\n          /** @type {?} */\n          var viewRef =\n          /** @type {?} */\n          rowOutlet.viewContainer.get(i);\n          renderedRows.push(viewRef.rootNodes[0]);\n        }\n\n        return renderedRows;\n      }\n      /**\n       * Get the matching row definitions that should be used for this row data. If there is only\n       * one row definition, it is returned. Otherwise, find the row definitions that has a when\n       * predicate that returns true with the data. If none return true, return the default row\n       * definition.\n       * @param {?} data\n       * @param {?} dataIndex\n       * @return {?}\n       */\n\n    }, {\n      key: \"_getRowDefs\",\n      value: function _getRowDefs(data, dataIndex) {\n        if (this._rowDefs.length == 1) {\n          return [this._rowDefs[0]];\n        }\n        /** @type {?} */\n\n\n        var rowDefs = [];\n\n        if (this.multiTemplateDataRows) {\n          rowDefs = this._rowDefs.filter(function (def) {\n            return !def.when || def.when(dataIndex, data);\n          });\n        } else {\n          /** @type {?} */\n          var rowDef = this._rowDefs.find(function (def) {\n            return def.when && def.when(dataIndex, data);\n          }) || this._defaultRowDef;\n\n          if (rowDef) {\n            rowDefs.push(rowDef);\n          }\n        }\n\n        if (!rowDefs.length) {\n          throw getTableMissingMatchingRowDefError(data);\n        }\n\n        return rowDefs;\n      }\n      /**\n       * Create the embedded view for the data row template and place it in the correct index location\n       * within the data row view container.\n       * @param {?} renderRow\n       * @param {?} renderIndex\n       * @return {?}\n       */\n\n    }, {\n      key: \"_insertRow\",\n      value: function _insertRow(renderRow, renderIndex) {\n        /** @type {?} */\n        var rowDef = renderRow.rowDef;\n        /** @type {?} */\n\n        var context = {\n          $implicit: renderRow.data\n        };\n\n        this._renderRow(this._rowOutlet, rowDef, renderIndex, context);\n      }\n      /**\n       * Creates a new row template in the outlet and fills it with the set of cell templates.\n       * Optionally takes a context to provide to the row and cells, as well as an optional index\n       * of where to place the new row template in the outlet.\n       * @param {?} outlet\n       * @param {?} rowDef\n       * @param {?} index\n       * @param {?=} context\n       * @return {?}\n       */\n\n    }, {\n      key: \"_renderRow\",\n      value: function _renderRow(outlet, rowDef, index) {\n        var context = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n        // TODO(andrewseguin): enforce that one outlet was instantiated from createEmbeddedView\n        outlet.viewContainer.createEmbeddedView(rowDef.template, context, index);\n\n        var _iterator5 = _createForOfIteratorHelper(this._getCellTemplates(rowDef)),\n            _step5;\n\n        try {\n          for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n            var cellTemplate = _step5.value;\n\n            if (CdkCellOutlet.mostRecentCellOutlet) {\n              CdkCellOutlet.mostRecentCellOutlet._viewContainer.createEmbeddedView(cellTemplate, context);\n            }\n          }\n        } catch (err) {\n          _iterator5.e(err);\n        } finally {\n          _iterator5.f();\n        }\n\n        this._changeDetectorRef.markForCheck();\n      }\n      /**\n       * Updates the index-related context for each row to reflect any changes in the index of the rows,\n       * e.g. first/last/even/odd.\n       * @return {?}\n       */\n\n    }, {\n      key: \"_updateRowIndexContext\",\n      value: function _updateRowIndexContext() {\n        /** @type {?} */\n        var viewContainer = this._rowOutlet.viewContainer;\n\n        for (var renderIndex = 0, count = viewContainer.length; renderIndex < count; renderIndex++) {\n          /** @type {?} */\n          var viewRef =\n          /** @type {?} */\n          viewContainer.get(renderIndex);\n          /** @type {?} */\n\n          var context =\n          /** @type {?} */\n          viewRef.context;\n          context.count = count;\n          context.first = renderIndex === 0;\n          context.last = renderIndex === count - 1;\n          context.even = renderIndex % 2 === 0;\n          context.odd = !context.even;\n\n          if (this.multiTemplateDataRows) {\n            context.dataIndex = this._renderRows[renderIndex].dataIndex;\n            context.renderIndex = renderIndex;\n          } else {\n            context.index = this._renderRows[renderIndex].dataIndex;\n          }\n        }\n      }\n      /**\n       * Gets the column definitions for the provided row def.\n       * @param {?} rowDef\n       * @return {?}\n       */\n\n    }, {\n      key: \"_getCellTemplates\",\n      value: function _getCellTemplates(rowDef) {\n        var _this11 = this;\n\n        if (!rowDef || !rowDef.columns) {\n          return [];\n        }\n\n        return Array.from(rowDef.columns, function (columnId) {\n          /** @type {?} */\n          var column = _this11._columnDefsByName.get(columnId);\n\n          if (!column) {\n            throw getTableUnknownColumnError(columnId);\n          }\n\n          return rowDef.extractCellTemplate(column);\n        });\n      }\n      /**\n       * Adds native table sections (e.g. tbody) and moves the row outlets into them.\n       * @return {?}\n       */\n\n    }, {\n      key: \"_applyNativeTableSections\",\n      value: function _applyNativeTableSections() {\n        /** @type {?} */\n        var sections = [{\n          tag: 'thead',\n          outlet: this._headerRowOutlet\n        }, {\n          tag: 'tbody',\n          outlet: this._rowOutlet\n        }, {\n          tag: 'tfoot',\n          outlet: this._footerRowOutlet\n        }];\n\n        for (var _i2 = 0, _sections = sections; _i2 < _sections.length; _i2++) {\n          var section = _sections[_i2];\n\n          /** @type {?} */\n          var documentRef = this._document || document;\n          /** @type {?} */\n\n          var element = documentRef.createElement(section.tag);\n          element.appendChild(section.outlet.elementRef.nativeElement);\n\n          this._elementRef.nativeElement.appendChild(element);\n        }\n      }\n      /**\n       * Forces a re-render of the data rows. Should be called in cases where there has been an input\n       * change that affects the evaluation of which rows should be rendered, e.g. toggling\n       * `multiTemplateDataRows` or adding/removing row definitions.\n       * @return {?}\n       */\n\n    }, {\n      key: \"_forceRenderDataRows\",\n      value: function _forceRenderDataRows() {\n        this._dataDiffer.diff([]);\n\n        this._rowOutlet.viewContainer.clear();\n\n        this.renderRows();\n        this.updateStickyColumnStyles();\n      }\n      /**\n       * Checks if there has been a change in sticky states since last check and applies the correct\n       * sticky styles. Since checking resets the \"dirty\" state, this should only be performed once\n       * during a change detection and after the inputs are settled (after content check).\n       * @return {?}\n       */\n\n    }, {\n      key: \"_checkStickyStates\",\n      value: function _checkStickyStates() {\n        /** @type {?} */\n        var stickyCheckReducer = function stickyCheckReducer(acc, d) {\n          return acc || d.hasStickyChanged();\n        }; // Note that the check needs to occur for every definition since it notifies the definition\n        // that it can reset its dirty state. Using another operator like `some` may short-circuit\n        // remaining definitions and leave them in an unchecked state.\n\n\n        if (this._headerRowDefs.reduce(stickyCheckReducer, false)) {\n          this.updateStickyHeaderRowStyles();\n        }\n\n        if (this._footerRowDefs.reduce(stickyCheckReducer, false)) {\n          this.updateStickyFooterRowStyles();\n        }\n\n        if (Array.from(this._columnDefsByName.values()).reduce(stickyCheckReducer, false)) {\n          this.updateStickyColumnStyles();\n        }\n      }\n      /**\n       * Creates the sticky styler that will be used for sticky rows and columns. Listens\n       * for directionality changes and provides the latest direction to the styler. Re-applies column\n       * stickiness when directionality changes.\n       * @return {?}\n       */\n\n    }, {\n      key: \"_setupStickyStyler\",\n      value: function _setupStickyStyler() {\n        var _this12 = this;\n\n        /** @type {?} */\n        var direction = this._dir ? this._dir.value : 'ltr';\n        this._stickyStyler = new StickyStyler(this._isNativeHtmlTable, // @breaking-change 8.0.0 remove the null check for `this._platform`.\n        this.stickyCssClass, direction, this._platform ? this._platform.isBrowser : true);\n        (this._dir ? this._dir.change : of()).pipe(takeUntil(this._onDestroy)).subscribe(function (value) {\n          _this12._stickyStyler.direction = value;\n\n          _this12.updateStickyColumnStyles();\n        });\n      }\n    }]);\n\n    return CdkTable;\n  }();\n\n  CdkTable.ɵfac = function CdkTable_Factory(t) {\n    return new (t || CdkTable)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.IterableDiffers), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵinjectAttribute('role'), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.Directionality, 8), ɵngcc0.ɵɵdirectiveInject(DOCUMENT), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.Platform));\n  };\n\n  CdkTable.ɵcmp =\n  /*@__PURE__*/\n\n  /*@__PURE__*/\n  ɵngcc0.ɵɵdefineComponent({\n    type: CdkTable,\n    selectors: [[\"cdk-table\"], [\"table\", \"cdk-table\", \"\"]],\n    contentQueries: function CdkTable_ContentQueries(rf, ctx, dirIndex) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, CdkColumnDef, 4);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, CdkRowDef, 4);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, CdkHeaderRowDef, 4);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, CdkFooterRowDef, 4);\n      }\n\n      if (rf & 2) {\n        var _t;\n\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._contentColumnDefs = _t);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._contentRowDefs = _t);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._contentHeaderRowDefs = _t);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._contentFooterRowDefs = _t);\n      }\n    },\n    viewQuery: function CdkTable_Query(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(DataRowOutlet, 5);\n        ɵngcc0.ɵɵviewQuery(HeaderRowOutlet, 5);\n        ɵngcc0.ɵɵviewQuery(FooterRowOutlet, 5);\n      }\n\n      if (rf & 2) {\n        var _t;\n\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._rowOutlet = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._headerRowOutlet = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._footerRowOutlet = _t.first);\n      }\n    },\n    hostAttrs: [1, \"cdk-table\"],\n    inputs: {\n      trackBy: \"trackBy\",\n      dataSource: \"dataSource\",\n      multiTemplateDataRows: \"multiTemplateDataRows\"\n    },\n    exportAs: [\"cdkTable\"],\n    decls: 3,\n    vars: 0,\n    consts: [[\"headerRowOutlet\", \"\"], [\"rowOutlet\", \"\"], [\"footerRowOutlet\", \"\"]],\n    template: function CdkTable_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵelementContainer(0, 0);\n        ɵngcc0.ɵɵelementContainer(1, 1);\n        ɵngcc0.ɵɵelementContainer(2, 2);\n      }\n    },\n    directives: [HeaderRowOutlet, DataRowOutlet, FooterRowOutlet],\n    encapsulation: 2,\n    changeDetection: 0\n  });\n  return CdkTable;\n}();\n/**\n * Utility function that gets a merged list of the entries in a QueryList and values of a Set.\n * @template T\n * @param {?} queryList\n * @param {?} set\n * @return {?}\n */\n\n\nfunction mergeQueryListAndSet(queryList, set) {\n  return queryList.toArray().concat(Array.from(set));\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/** @type {?} */\n\n\nvar EXPORTED_DECLARATIONS = [CdkTable, CdkRowDef, CdkCellDef, CdkCellOutlet, CdkHeaderCellDef, CdkFooterCellDef, CdkColumnDef, CdkCell, CdkRow, CdkHeaderCell, CdkFooterCell, CdkHeaderRow, CdkHeaderRowDef, CdkFooterRow, CdkFooterRowDef, DataRowOutlet, HeaderRowOutlet, FooterRowOutlet];\n\nvar CdkTableModule = /*@__PURE__*/function () {\n  var CdkTableModule = function CdkTableModule() {\n    _classCallCheck(this, CdkTableModule);\n  };\n\n  CdkTableModule.ɵfac = function CdkTableModule_Factory(t) {\n    return new (t || CdkTableModule)();\n  };\n\n  CdkTableModule.ɵmod =\n  /*@__PURE__*/\n\n  /*@__PURE__*/\n  ɵngcc0.ɵɵdefineNgModule({\n    type: CdkTableModule\n  });\n  CdkTableModule.ɵinj =\n  /*@__PURE__*/\n\n  /*@__PURE__*/\n  ɵngcc0.ɵɵdefineInjector({\n    imports: [[CommonModule]]\n  });\n  return CdkTableModule;\n}();\n/*@__PURE__*/\n\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(CdkTableModule, {\n    declarations: function declarations() {\n      return [CdkTable, CdkRowDef, CdkCellDef, CdkCellOutlet, CdkHeaderCellDef, CdkFooterCellDef, CdkColumnDef, CdkCell, CdkRow, CdkHeaderCell, CdkFooterCell, CdkHeaderRow, CdkHeaderRowDef, CdkFooterRow, CdkFooterRowDef, DataRowOutlet, HeaderRowOutlet, FooterRowOutlet];\n    },\n    imports: function imports() {\n      return [CommonModule];\n    },\n    exports: function exports() {\n      return [CdkTable, CdkRowDef, CdkCellDef, CdkCellOutlet, CdkHeaderCellDef, CdkFooterCellDef, CdkColumnDef, CdkCell, CdkRow, CdkHeaderCell, CdkFooterCell, CdkHeaderRow, CdkHeaderRowDef, CdkFooterRow, CdkFooterRowDef, DataRowOutlet, HeaderRowOutlet, FooterRowOutlet];\n    }\n  });\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n\nexport { DataRowOutlet, HeaderRowOutlet, FooterRowOutlet, CDK_TABLE_TEMPLATE, CdkTable, CdkCellDef, CdkHeaderCellDef, CdkFooterCellDef, CdkColumnDefBase, _CdkColumnDefBase, CdkColumnDef, BaseCdkCell, CdkHeaderCell, CdkFooterCell, CdkCell, CDK_ROW_TEMPLATE, BaseRowDef, CdkHeaderRowDefBase, _CdkHeaderRowDefBase, CdkHeaderRowDef, CdkFooterRowDefBase, _CdkFooterRowDefBase, CdkFooterRowDef, CdkRowDef, CdkCellOutlet, CdkHeaderRow, CdkFooterRow, CdkRow, CdkTableModule, STICKY_DIRECTIONS, StickyStyler, mixinHasStickyInput }; //# sourceMappingURL=table.js.map","map":null,"metadata":{},"sourceType":"module"}