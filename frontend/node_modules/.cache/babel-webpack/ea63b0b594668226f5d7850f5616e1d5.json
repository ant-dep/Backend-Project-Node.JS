{"ast":null,"code":"import _classCallCheck from \"/Users/adepertat/Dropbox/ECOLES/Openclassroom/P6_de_Pertat_Antoine/AntoinedePertat_6_240521/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/adepertat/Dropbox/ECOLES/Openclassroom/P6_de_Pertat_Antoine/AntoinedePertat_6_240521/frontend/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/Users/adepertat/Dropbox/ECOLES/Openclassroom/P6_de_Pertat_Antoine/AntoinedePertat_6_240521/frontend/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/adepertat/Dropbox/ECOLES/Openclassroom/P6_de_Pertat_Antoine/AntoinedePertat_6_240521/frontend/node_modules/@babel/runtime/helpers/esm/createSuper\";\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { animate, state, style, transition, trigger } from '@angular/animations';\nimport { FocusMonitor, FocusTrapFactory } from '@angular/cdk/a11y';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { coerceBooleanProperty, coerceNumberProperty } from '@angular/cdk/coercion';\nimport { ESCAPE } from '@angular/cdk/keycodes';\nimport { Platform, PlatformModule } from '@angular/cdk/platform';\nimport { CdkScrollable, ScrollDispatcher, ScrollingModule } from '@angular/cdk/scrolling';\nimport { DOCUMENT, CommonModule } from '@angular/common';\nimport { ChangeDetectionStrategy, ChangeDetectorRef, Component, ContentChild, ContentChildren, ElementRef, EventEmitter, forwardRef, Inject, InjectionToken, Input, NgZone, Optional, Output, ViewChild, ViewEncapsulation, NgModule } from '@angular/core';\nimport { fromEvent, merge, Subject } from 'rxjs';\nimport { debounceTime, filter, map, startWith, take, takeUntil, distinctUntilChanged } from 'rxjs/operators';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\nimport { MatCommonModule } from '@angular/material/core';\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/** *\n * Animations used by the Material drawers.\n * \\@docs-private\n  @type {?} */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/scrolling';\nimport * as ɵngcc2 from '@angular/cdk/a11y';\nimport * as ɵngcc3 from '@angular/cdk/platform';\nimport * as ɵngcc4 from '@angular/cdk/bidi';\nimport * as ɵngcc5 from '@angular/common';\nvar _c0 = [\"*\"];\n\nfunction MatDrawerContainer_div_0_Template(rf, ctx) {\n  if (rf & 1) {\n    var _r3 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵelementStart(0, \"div\", 2);\n    ɵngcc0.ɵɵlistener(\"click\", function MatDrawerContainer_div_0_Template_div_click_0_listener() {\n      ɵngcc0.ɵɵrestoreView(_r3);\n      var ctx_r2 = ɵngcc0.ɵɵnextContext();\n      return ctx_r2._onBackdropClicked();\n    });\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵclassProp(\"mat-drawer-shown\", ctx_r0._isShowingBackdrop());\n  }\n}\n\nfunction MatDrawerContainer_mat_drawer_content_3_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"mat-drawer-content\");\n    ɵngcc0.ɵɵprojection(1, 2);\n    ɵngcc0.ɵɵelementEnd();\n  }\n}\n\nvar _c1 = [[[\"mat-drawer\"]], [[\"mat-drawer-content\"]], \"*\"];\nvar _c2 = [\"mat-drawer\", \"mat-drawer-content\", \"*\"];\n\nfunction MatSidenavContainer_div_0_Template(rf, ctx) {\n  if (rf & 1) {\n    var _r3 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵelementStart(0, \"div\", 2);\n    ɵngcc0.ɵɵlistener(\"click\", function MatSidenavContainer_div_0_Template_div_click_0_listener() {\n      ɵngcc0.ɵɵrestoreView(_r3);\n      var ctx_r2 = ɵngcc0.ɵɵnextContext();\n      return ctx_r2._onBackdropClicked();\n    });\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵclassProp(\"mat-drawer-shown\", ctx_r0._isShowingBackdrop());\n  }\n}\n\nfunction MatSidenavContainer_mat_sidenav_content_3_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"mat-sidenav-content\", 3);\n    ɵngcc0.ɵɵprojection(1, 2);\n    ɵngcc0.ɵɵelementEnd();\n  }\n}\n\nvar _c3 = [[[\"mat-sidenav\"]], [[\"mat-sidenav-content\"]], \"*\"];\nvar _c4 = [\"mat-sidenav\", \"mat-sidenav-content\", \"*\"];\nvar _c5 = \".mat-drawer-container{position:relative;z-index:1;box-sizing:border-box;-webkit-overflow-scrolling:touch;display:block;overflow:hidden}.mat-drawer-container[fullscreen]{top:0;left:0;right:0;bottom:0;position:absolute}.mat-drawer-container[fullscreen].mat-drawer-opened{overflow:hidden}.mat-drawer-container.mat-drawer-container-explicit-backdrop .mat-drawer-side{z-index:3}.mat-drawer-container.ng-animate-disabled .mat-drawer-backdrop,.mat-drawer-container.ng-animate-disabled .mat-drawer-content,.ng-animate-disabled .mat-drawer-container .mat-drawer-backdrop,.ng-animate-disabled .mat-drawer-container .mat-drawer-content{transition:none}.mat-drawer-backdrop{top:0;left:0;right:0;bottom:0;position:absolute;display:block;z-index:3;visibility:hidden}.mat-drawer-backdrop.mat-drawer-shown{visibility:visible}.mat-drawer-transition .mat-drawer-backdrop{transition-duration:.4s;transition-timing-function:cubic-bezier(.25,.8,.25,1);transition-property:background-color,visibility}@media screen and (-ms-high-contrast:active){.mat-drawer-backdrop{opacity:.5}}.mat-drawer-content{position:relative;z-index:1;display:block;height:100%;overflow:auto}.mat-drawer-transition .mat-drawer-content{transition-duration:.4s;transition-timing-function:cubic-bezier(.25,.8,.25,1);transition-property:transform,margin-left,margin-right}.mat-drawer{position:relative;z-index:4;display:block;position:absolute;top:0;bottom:0;z-index:3;outline:0;box-sizing:border-box;overflow-y:auto;transform:translate3d(-100%,0,0)}@media screen and (-ms-high-contrast:active){.mat-drawer,[dir=rtl] .mat-drawer.mat-drawer-end{border-right:solid 1px currentColor}}@media screen and (-ms-high-contrast:active){.mat-drawer.mat-drawer-end,[dir=rtl] .mat-drawer{border-left:solid 1px currentColor;border-right:none}}.mat-drawer.mat-drawer-side{z-index:2}.mat-drawer.mat-drawer-end{right:0;transform:translate3d(100%,0,0)}[dir=rtl] .mat-drawer{transform:translate3d(100%,0,0)}[dir=rtl] .mat-drawer.mat-drawer-end{left:0;right:auto;transform:translate3d(-100%,0,0)}.mat-drawer-inner-container{width:100%;height:100%;overflow:auto;-webkit-overflow-scrolling:touch}.mat-sidenav-fixed{position:fixed}\";\nvar matDrawerAnimations = {\n  /** Animation that slides a drawer in and out. */\n  transformDrawer: /*@__PURE__*/trigger('transform', [// We remove the `transform` here completely, rather than setting it to zero, because:\n  // 1. Having a transform can cause elements with ripples or an animated\n  //    transform to shift around in Chrome with an RTL layout (see #10023).\n  // 2. 3d transforms causes text to appear blurry on IE and Edge.\n\n  /*@__PURE__*/\n  state('open, open-instant', /*@__PURE__*/style({\n    'transform': 'none',\n    'visibility': 'visible'\n  })), /*@__PURE__*/state('void', /*@__PURE__*/style({\n    // Avoids the shadow showing up when closed in SSR.\n    'box-shadow': 'none',\n    'visibility': 'hidden'\n  })), /*@__PURE__*/transition('void => open-instant', /*@__PURE__*/animate('0ms')), /*@__PURE__*/transition('void <=> open, open-instant => void', /*@__PURE__*/animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)'))])\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * Throws an exception when two MatDrawer are matching the same position.\n * \\@docs-private\n * @param {?} position\n * @return {?}\n */\n\nfunction throwMatDuplicatedDrawerError(position) {\n  throw Error(\"A drawer was already declared for 'position=\\\"\".concat(position, \"\\\"'\"));\n}\n/** *\n * Configures whether drawers should use auto sizing by default.\n  @type {?} */\n\n\nvar MAT_DRAWER_DEFAULT_AUTOSIZE = /*@__PURE__*/new InjectionToken('MAT_DRAWER_DEFAULT_AUTOSIZE', {\n  providedIn: 'root',\n  factory: MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY\n});\n/**\n * \\@docs-private\n * @return {?}\n */\n\nfunction MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY() {\n  return false;\n}\n\nvar MatDrawerContent = /*@__PURE__*/function () {\n  var MatDrawerContent = /*#__PURE__*/function (_CdkScrollable) {\n    _inherits(MatDrawerContent, _CdkScrollable);\n\n    var _super = _createSuper(MatDrawerContent);\n\n    /**\n     * @param {?} _changeDetectorRef\n     * @param {?} _container\n     * @param {?} elementRef\n     * @param {?} scrollDispatcher\n     * @param {?} ngZone\n     */\n    function MatDrawerContent(_changeDetectorRef, _container, elementRef, scrollDispatcher, ngZone) {\n      var _this;\n\n      _classCallCheck(this, MatDrawerContent);\n\n      _this = _super.call(this, elementRef, scrollDispatcher, ngZone);\n      _this._changeDetectorRef = _changeDetectorRef;\n      _this._container = _container;\n      return _this;\n    }\n    /**\n     * @return {?}\n     */\n\n\n    _createClass(MatDrawerContent, [{\n      key: \"ngAfterContentInit\",\n      value: function ngAfterContentInit() {\n        var _this2 = this;\n\n        this._container._contentMarginChanges.subscribe(function () {\n          _this2._changeDetectorRef.markForCheck();\n        });\n      }\n    }]);\n\n    return MatDrawerContent;\n  }(CdkScrollable);\n\n  MatDrawerContent.ɵfac = function MatDrawerContent_Factory(t) {\n    return new (t || MatDrawerContent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(forwardRef(function () {\n      return MatDrawerContainer;\n    })), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.ScrollDispatcher), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone));\n  };\n\n  MatDrawerContent.ɵcmp =\n  /*@__PURE__*/\n\n  /*@__PURE__*/\n  ɵngcc0.ɵɵdefineComponent({\n    type: MatDrawerContent,\n    selectors: [[\"mat-drawer-content\"]],\n    hostAttrs: [1, \"mat-drawer-content\"],\n    hostVars: 4,\n    hostBindings: function MatDrawerContent_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        ɵngcc0.ɵɵstyleProp(\"margin-left\", ctx._container._contentMargins.left, \"px\")(\"margin-right\", ctx._container._contentMargins.right, \"px\");\n      }\n    },\n    features: [ɵngcc0.ɵɵInheritDefinitionFeature],\n    ngContentSelectors: _c0,\n    decls: 1,\n    vars: 0,\n    template: function MatDrawerContent_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵprojection(0);\n      }\n    },\n    encapsulation: 2,\n    changeDetection: 0\n  });\n  return MatDrawerContent;\n}();\n\nvar MatDrawer = /*@__PURE__*/function () {\n  var MatDrawer = /*#__PURE__*/function () {\n    /**\n     * @param {?} _elementRef\n     * @param {?} _focusTrapFactory\n     * @param {?} _focusMonitor\n     * @param {?} _platform\n     * @param {?} _ngZone\n     * @param {?} _doc\n     */\n    function MatDrawer(_elementRef, _focusTrapFactory, _focusMonitor, _platform, _ngZone, _doc) {\n      var _this3 = this;\n\n      _classCallCheck(this, MatDrawer);\n\n      this._elementRef = _elementRef;\n      this._focusTrapFactory = _focusTrapFactory;\n      this._focusMonitor = _focusMonitor;\n      this._platform = _platform;\n      this._ngZone = _ngZone;\n      this._doc = _doc;\n      this._elementFocusedBeforeDrawerWasOpened = null;\n      /**\n       * Whether the drawer is initialized. Used for disabling the initial animation.\n       */\n\n      this._enableAnimations = false;\n      this._position = 'start';\n      this._mode = 'over';\n      this._disableClose = false;\n      this._autoFocus = true;\n      /**\n       * Emits whenever the drawer has started animating.\n       */\n\n      this._animationStarted = new Subject();\n      /**\n       * Emits whenever the drawer is done animating.\n       */\n\n      this._animationEnd = new Subject();\n      /**\n       * Current state of the sidenav animation.\n       */\n\n      this._animationState = 'void';\n      /**\n       * Event emitted when the drawer open state is changed.\n       */\n\n      this.openedChange = // Note this has to be async in order to avoid some issues with two-bindings (see #8872).\n      new EventEmitter(\n      /* isAsync */\n\n      /* isAsync */\n      true);\n      /**\n       * Event emitted when the drawer's position changes.\n       */\n\n      this.onPositionChanged = new EventEmitter();\n      /**\n       * An observable that emits when the drawer mode changes. This is used by the drawer container to\n       * to know when to when the mode changes so it can adapt the margins on the content.\n       */\n\n      this._modeChanged = new Subject();\n      this._opened = false;\n      this.openedChange.subscribe(function (opened) {\n        if (opened) {\n          if (_this3._doc) {\n            _this3._elementFocusedBeforeDrawerWasOpened =\n            /** @type {?} */\n            _this3._doc.activeElement;\n          }\n\n          if (_this3._isFocusTrapEnabled && _this3._focusTrap) {\n            _this3._trapFocus();\n          }\n        } else {\n          _this3._restoreFocus();\n        }\n      });\n      /**\n           * Listen to `keydown` events outside the zone so that change detection is not run every\n           * time a key is pressed. Instead we re-enter the zone only if the `ESC` key is pressed\n           * and we don't have close disabled.\n           */\n\n      this._ngZone.runOutsideAngular(function () {\n        fromEvent(_this3._elementRef.nativeElement, 'keydown').pipe(filter(function (event) {\n          return event.keyCode === ESCAPE && !_this3.disableClose;\n        })).subscribe(function (event) {\n          return _this3._ngZone.run(function () {\n            _this3.close();\n\n            event.stopPropagation();\n          });\n        });\n      }); // We need a Subject with distinctUntilChanged, because the `done` event\n      // fires twice on some browsers. See https://github.com/angular/angular/issues/24084\n\n\n      this._animationEnd.pipe(distinctUntilChanged(function (x, y) {\n        return x.fromState === y.fromState && x.toState === y.toState;\n      })).subscribe(function (event) {\n        var fromState = event.fromState,\n            toState = event.toState;\n\n        if (toState.indexOf('open') === 0 && fromState === 'void' || toState === 'void' && fromState.indexOf('open') === 0) {\n          _this3.openedChange.emit(_this3._opened);\n        }\n      });\n    }\n    /**\n     * The side that the drawer is attached to.\n     * @return {?}\n     */\n\n\n    _createClass(MatDrawer, [{\n      key: \"position\",\n      get: function get() {\n        return this._position;\n      }\n      /**\n       * @param {?} value\n       * @return {?}\n       */\n      ,\n      set: function set(value) {\n        // Make sure we have a valid value.\n        value = value === 'end' ? 'end' : 'start';\n\n        if (value != this._position) {\n          this._position = value;\n          this.onPositionChanged.emit();\n        }\n      }\n      /**\n       * Mode of the drawer; one of 'over', 'push' or 'side'.\n       * @return {?}\n       */\n\n    }, {\n      key: \"mode\",\n      get: function get() {\n        return this._mode;\n      }\n      /**\n       * @param {?} value\n       * @return {?}\n       */\n      ,\n      set: function set(value) {\n        this._mode = value;\n\n        this._modeChanged.next();\n      }\n      /**\n       * Whether the drawer can be closed with the escape key or by clicking on the backdrop.\n       * @return {?}\n       */\n\n    }, {\n      key: \"disableClose\",\n      get: function get() {\n        return this._disableClose;\n      }\n      /**\n       * @param {?} value\n       * @return {?}\n       */\n      ,\n      set: function set(value) {\n        this._disableClose = coerceBooleanProperty(value);\n      }\n      /**\n       * Whether the drawer should focus the first focusable element automatically when opened.\n       * @return {?}\n       */\n\n    }, {\n      key: \"autoFocus\",\n      get: function get() {\n        return this._autoFocus;\n      }\n      /**\n       * @param {?} value\n       * @return {?}\n       */\n      ,\n      set: function set(value) {\n        this._autoFocus = coerceBooleanProperty(value);\n      }\n      /**\n       * Event emitted when the drawer has been opened.\n       * @return {?}\n       */\n\n    }, {\n      key: \"_openedStream\",\n      get: function get() {\n        return this.openedChange.pipe(filter(function (o) {\n          return o;\n        }), map(function () {}));\n      }\n      /**\n       * Event emitted when the drawer has started opening.\n       * @return {?}\n       */\n\n    }, {\n      key: \"openedStart\",\n      get: function get() {\n        return this._animationStarted.pipe(filter(function (e) {\n          return e.fromState !== e.toState && e.toState.indexOf('open') === 0;\n        }), map(function () {}));\n      }\n      /**\n       * Event emitted when the drawer has been closed.\n       * @return {?}\n       */\n\n    }, {\n      key: \"_closedStream\",\n      get: function get() {\n        return this.openedChange.pipe(filter(function (o) {\n          return !o;\n        }), map(function () {}));\n      }\n      /**\n       * Event emitted when the drawer has started closing.\n       * @return {?}\n       */\n\n    }, {\n      key: \"closedStart\",\n      get: function get() {\n        return this._animationStarted.pipe(filter(function (e) {\n          return e.fromState !== e.toState && e.toState === 'void';\n        }), map(function () {}));\n      }\n      /**\n       * @return {?}\n       */\n\n    }, {\n      key: \"_isFocusTrapEnabled\",\n      get: function get() {\n        // The focus trap is only enabled when the drawer is open in any mode other than side.\n        return this.opened && this.mode !== 'side';\n      }\n      /**\n       * Traps focus inside the drawer.\n       * @return {?}\n       */\n\n    }, {\n      key: \"_trapFocus\",\n      value: function _trapFocus() {\n        var _this4 = this;\n\n        if (!this.autoFocus) {\n          return;\n        }\n\n        this._focusTrap.focusInitialElementWhenReady().then(function (hasMovedFocus) {\n          // If there were no focusable elements, focus the sidenav itself so the keyboard navigation\n          // still works. We need to check that `focus` is a function due to Universal.\n          if (!hasMovedFocus && typeof _this4._elementRef.nativeElement.focus === 'function') {\n            _this4._elementRef.nativeElement.focus();\n          }\n        });\n      }\n      /**\n       * If focus is currently inside the drawer, restores it to where it was before the drawer\n       * opened.\n       * @return {?}\n       */\n\n    }, {\n      key: \"_restoreFocus\",\n      value: function _restoreFocus() {\n        if (!this.autoFocus) {\n          return;\n        }\n        /** @type {?} */\n\n\n        var activeEl = this._doc && this._doc.activeElement;\n\n        if (activeEl && this._elementRef.nativeElement.contains(activeEl)) {\n          if (this._elementFocusedBeforeDrawerWasOpened instanceof HTMLElement) {\n            this._focusMonitor.focusVia(this._elementFocusedBeforeDrawerWasOpened, this._openedVia);\n          } else {\n            this._elementRef.nativeElement.blur();\n          }\n        }\n\n        this._elementFocusedBeforeDrawerWasOpened = null;\n        this._openedVia = null;\n      }\n      /**\n       * @return {?}\n       */\n\n    }, {\n      key: \"ngAfterContentInit\",\n      value: function ngAfterContentInit() {\n        this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n        this._focusTrap.enabled = this._isFocusTrapEnabled;\n      }\n      /**\n       * @return {?}\n       */\n\n    }, {\n      key: \"ngAfterContentChecked\",\n      value: function ngAfterContentChecked() {\n        // Enable the animations after the lifecycle hooks have run, in order to avoid animating\n        // drawers that are open by default. When we're on the server, we shouldn't enable the\n        // animations, because we don't want the drawer to animate the first time the user sees\n        // the page.\n        if (this._platform.isBrowser) {\n          this._enableAnimations = true;\n        }\n      }\n      /**\n       * @return {?}\n       */\n\n    }, {\n      key: \"ngOnDestroy\",\n      value: function ngOnDestroy() {\n        if (this._focusTrap) {\n          this._focusTrap.destroy();\n        }\n\n        this._animationStarted.complete();\n\n        this._animationEnd.complete();\n      }\n      /**\n       * Whether the drawer is opened. We overload this because we trigger an event when it\n       * starts or end.\n       * @return {?}\n       */\n\n    }, {\n      key: \"opened\",\n      get: function get() {\n        return this._opened;\n      }\n      /**\n       * @param {?} value\n       * @return {?}\n       */\n      ,\n      set: function set(value) {\n        this.toggle(coerceBooleanProperty(value));\n      }\n      /**\n       * Open the drawer.\n       * @param {?=} openedVia Whether the drawer was opened by a key press, mouse click or programmatically.\n       * Used for focus management after the sidenav is closed.\n       * @return {?}\n       */\n\n    }, {\n      key: \"open\",\n      value: function open(openedVia) {\n        return this.toggle(true, openedVia);\n      }\n      /**\n       * Close the drawer.\n       * @return {?}\n       */\n\n    }, {\n      key: \"close\",\n      value: function close() {\n        return this.toggle(false);\n      }\n      /**\n       * Toggle this drawer.\n       * @param {?=} isOpen Whether the drawer should be open.\n       * @param {?=} openedVia Whether the drawer was opened by a key press, mouse click or programmatically.\n       * Used for focus management after the sidenav is closed.\n       * @return {?}\n       */\n\n    }, {\n      key: \"toggle\",\n      value: function toggle() {\n        var _this5 = this;\n\n        var isOpen = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : !this.opened;\n        var openedVia = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'program';\n        this._opened = isOpen;\n\n        if (isOpen) {\n          this._animationState = this._enableAnimations ? 'open' : 'open-instant';\n          this._openedVia = openedVia;\n        } else {\n          this._animationState = 'void';\n\n          this._restoreFocus();\n        }\n\n        if (this._focusTrap) {\n          this._focusTrap.enabled = this._isFocusTrapEnabled;\n        }\n\n        return new Promise(function (resolve) {\n          _this5.openedChange.pipe(take(1)).subscribe(function (open) {\n            return resolve(open ? 'open' : 'close');\n          });\n        });\n      }\n      /**\n       * @return {?}\n       */\n\n    }, {\n      key: \"_width\",\n      get: function get() {\n        return this._elementRef.nativeElement ? this._elementRef.nativeElement.offsetWidth || 0 : 0;\n      }\n    }]);\n\n    return MatDrawer;\n  }();\n\n  MatDrawer.ɵfac = function MatDrawer_Factory(t) {\n    return new (t || MatDrawer)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.FocusTrapFactory), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.FocusMonitor), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.Platform), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(DOCUMENT, 8));\n  };\n\n  MatDrawer.ɵcmp =\n  /*@__PURE__*/\n\n  /*@__PURE__*/\n  ɵngcc0.ɵɵdefineComponent({\n    type: MatDrawer,\n    selectors: [[\"mat-drawer\"]],\n    hostAttrs: [\"tabIndex\", \"-1\", 1, \"mat-drawer\"],\n    hostVars: 10,\n    hostBindings: function MatDrawer_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵsyntheticHostListener(\"@transform.start\", function MatDrawer_animation_transform_start_HostBindingHandler($event) {\n          return ctx._animationStarted.next($event);\n        })(\"@transform.done\", function MatDrawer_animation_transform_done_HostBindingHandler($event) {\n          return ctx._animationEnd.next($event);\n        });\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"align\", null);\n        ɵngcc0.ɵɵsyntheticHostProperty(\"@transform\", ctx._animationState);\n        ɵngcc0.ɵɵclassProp(\"mat-drawer-end\", ctx.position === \"end\")(\"mat-drawer-over\", ctx.mode === \"over\")(\"mat-drawer-push\", ctx.mode === \"push\")(\"mat-drawer-side\", ctx.mode === \"side\");\n      }\n    },\n    inputs: {\n      position: \"position\",\n      mode: \"mode\",\n      disableClose: \"disableClose\",\n      autoFocus: \"autoFocus\",\n      opened: \"opened\"\n    },\n    outputs: {\n      openedChange: \"openedChange\",\n      onPositionChanged: \"positionChanged\",\n      _openedStream: \"opened\",\n      openedStart: \"openedStart\",\n      _closedStream: \"closed\",\n      closedStart: \"closedStart\"\n    },\n    exportAs: [\"matDrawer\"],\n    ngContentSelectors: _c0,\n    decls: 2,\n    vars: 0,\n    consts: [[1, \"mat-drawer-inner-container\"]],\n    template: function MatDrawer_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵelementStart(0, \"div\", 0);\n        ɵngcc0.ɵɵprojection(1);\n        ɵngcc0.ɵɵelementEnd();\n      }\n    },\n    encapsulation: 2,\n    data: {\n      animation: [matDrawerAnimations.transformDrawer]\n    },\n    changeDetection: 0\n  });\n  return MatDrawer;\n}();\n\nvar MatDrawerContainer = /*@__PURE__*/function () {\n  var MatDrawerContainer = /*#__PURE__*/function () {\n    /**\n     * @param {?} _dir\n     * @param {?} _element\n     * @param {?} _ngZone\n     * @param {?} _changeDetectorRef\n     * @param {?=} defaultAutosize\n     * @param {?=} _animationMode\n     */\n    function MatDrawerContainer(_dir, _element, _ngZone, _changeDetectorRef) {\n      var _this6 = this;\n\n      var defaultAutosize = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n\n      var _animationMode = arguments.length > 5 ? arguments[5] : undefined;\n\n      _classCallCheck(this, MatDrawerContainer);\n\n      this._dir = _dir;\n      this._element = _element;\n      this._ngZone = _ngZone;\n      this._changeDetectorRef = _changeDetectorRef;\n      this._animationMode = _animationMode;\n      /**\n       * Event emitted when the drawer backdrop is clicked.\n       */\n\n      this.backdropClick = new EventEmitter();\n      /**\n       * Emits when the component is destroyed.\n       */\n\n      this._destroyed = new Subject();\n      /**\n       * Emits on every ngDoCheck. Used for debouncing reflows.\n       */\n\n      this._doCheckSubject = new Subject();\n      /**\n       * Margins to be applied to the content. These are used to push / shrink the drawer content when a\n       * drawer is open. We use margin rather than transform even for push mode because transform breaks\n       * fixed position elements inside of the transformed element.\n       */\n\n      this._contentMargins = {\n        left: null,\n        right: null\n      };\n      this._contentMarginChanges = new Subject(); // If a `Dir` directive exists up the tree, listen direction changes\n      // and update the left/right properties to point to the proper start/end.\n\n      if (_dir) {\n        _dir.change.pipe(takeUntil(this._destroyed)).subscribe(function () {\n          _this6._validateDrawers();\n\n          _this6._updateContentMargins();\n        });\n      }\n\n      this._autosize = defaultAutosize;\n    }\n    /**\n     * The drawer child with the `start` position.\n     * @return {?}\n     */\n\n\n    _createClass(MatDrawerContainer, [{\n      key: \"start\",\n      get: function get() {\n        return this._start;\n      }\n      /**\n       * The drawer child with the `end` position.\n       * @return {?}\n       */\n\n    }, {\n      key: \"end\",\n      get: function get() {\n        return this._end;\n      }\n      /**\n       * Whether to automatically resize the container whenever\n       * the size of any of its drawers changes.\n       *\n       * **Use at your own risk!** Enabling this option can cause layout thrashing by measuring\n       * the drawers on every change detection cycle. Can be configured globally via the\n       * `MAT_DRAWER_DEFAULT_AUTOSIZE` token.\n       * @return {?}\n       */\n\n    }, {\n      key: \"autosize\",\n      get: function get() {\n        return this._autosize;\n      }\n      /**\n       * @param {?} value\n       * @return {?}\n       */\n      ,\n      set: function set(value) {\n        this._autosize = coerceBooleanProperty(value);\n      }\n      /**\n       * Whether the drawer container should have a backdrop while one of the sidenavs is open.\n       * If explicitly set to `true`, the backdrop will be enabled for drawers in the `side`\n       * mode as well.\n       * @return {?}\n       */\n\n    }, {\n      key: \"hasBackdrop\",\n      get: function get() {\n        if (this._backdropOverride == null) {\n          return !this._start || this._start.mode !== 'side' || !this._end || this._end.mode !== 'side';\n        }\n\n        return this._backdropOverride;\n      }\n      /**\n       * @param {?} value\n       * @return {?}\n       */\n      ,\n      set: function set(value) {\n        this._backdropOverride = value == null ? null : coerceBooleanProperty(value);\n      }\n      /**\n       * Reference to the CdkScrollable instance that wraps the scrollable content.\n       * @return {?}\n       */\n\n    }, {\n      key: \"scrollable\",\n      get: function get() {\n        return this._userContent || this._content;\n      }\n      /**\n       * @return {?}\n       */\n\n    }, {\n      key: \"ngAfterContentInit\",\n      value: function ngAfterContentInit() {\n        var _this7 = this;\n\n        this._drawers.changes.pipe(startWith(null)).subscribe(function () {\n          _this7._validateDrawers();\n\n          _this7._drawers.forEach(function (drawer) {\n            _this7._watchDrawerToggle(drawer);\n\n            _this7._watchDrawerPosition(drawer);\n\n            _this7._watchDrawerMode(drawer);\n          });\n\n          if (!_this7._drawers.length || _this7._isDrawerOpen(_this7._start) || _this7._isDrawerOpen(_this7._end)) {\n            _this7._updateContentMargins();\n          }\n\n          _this7._changeDetectorRef.markForCheck();\n        });\n\n        this._doCheckSubject.pipe(debounceTime(10), // Arbitrary debounce time, less than a frame at 60fps\n        // Arbitrary debounce time, less than a frame at 60fps\n        takeUntil(this._destroyed)).subscribe(function () {\n          return _this7._updateContentMargins();\n        });\n      }\n      /**\n       * @return {?}\n       */\n\n    }, {\n      key: \"ngOnDestroy\",\n      value: function ngOnDestroy() {\n        this._doCheckSubject.complete();\n\n        this._destroyed.next();\n\n        this._destroyed.complete();\n      }\n      /**\n       * Calls `open` of both start and end drawers\n       * @return {?}\n       */\n\n    }, {\n      key: \"open\",\n      value: function open() {\n        this._drawers.forEach(function (drawer) {\n          return drawer.open();\n        });\n      }\n      /**\n       * Calls `close` of both start and end drawers\n       * @return {?}\n       */\n\n    }, {\n      key: \"close\",\n      value: function close() {\n        this._drawers.forEach(function (drawer) {\n          return drawer.close();\n        });\n      }\n      /**\n       * @return {?}\n       */\n\n    }, {\n      key: \"ngDoCheck\",\n      value: function ngDoCheck() {\n        var _this8 = this;\n\n        // If users opted into autosizing, do a check every change detection cycle.\n        if (this._autosize && this._isPushed()) {\n          // Run outside the NgZone, otherwise the debouncer will throw us into an infinite loop.\n          this._ngZone.runOutsideAngular(function () {\n            return _this8._doCheckSubject.next();\n          });\n        }\n      }\n      /**\n       * Subscribes to drawer events in order to set a class on the main container element when the\n       * drawer is open and the backdrop is visible. This ensures any overflow on the container element\n       * is properly hidden.\n       * @param {?} drawer\n       * @return {?}\n       */\n\n    }, {\n      key: \"_watchDrawerToggle\",\n      value: function _watchDrawerToggle(drawer) {\n        var _this9 = this;\n\n        drawer._animationStarted.pipe(takeUntil(this._drawers.changes), filter(function (event) {\n          return event.fromState !== event.toState;\n        })).subscribe(function (event) {\n          // Set the transition class on the container so that the animations occur. This should not\n          // be set initially because animations should only be triggered via a change in state.\n          if (event.toState !== 'open-instant' && _this9._animationMode !== 'NoopAnimations') {\n            _this9._element.nativeElement.classList.add('mat-drawer-transition');\n          }\n\n          _this9._updateContentMargins();\n\n          _this9._changeDetectorRef.markForCheck();\n        });\n\n        if (drawer.mode !== 'side') {\n          drawer.openedChange.pipe(takeUntil(this._drawers.changes)).subscribe(function () {\n            return _this9._setContainerClass(drawer.opened);\n          });\n        }\n      }\n      /**\n       * Subscribes to drawer onPositionChanged event in order to\n       * re-validate drawers when the position changes.\n       * @param {?} drawer\n       * @return {?}\n       */\n\n    }, {\n      key: \"_watchDrawerPosition\",\n      value: function _watchDrawerPosition(drawer) {\n        var _this10 = this;\n\n        if (!drawer) {\n          return;\n        } // NOTE: We need to wait for the microtask queue to be empty before validating,\n        // since both drawers may be swapping positions at the same time.\n\n\n        drawer.onPositionChanged.pipe(takeUntil(this._drawers.changes)).subscribe(function () {\n          _this10._ngZone.onMicrotaskEmpty.asObservable().pipe(take(1)).subscribe(function () {\n            _this10._validateDrawers();\n          });\n        });\n      }\n      /**\n       * Subscribes to changes in drawer mode so we can run change detection.\n       * @param {?} drawer\n       * @return {?}\n       */\n\n    }, {\n      key: \"_watchDrawerMode\",\n      value: function _watchDrawerMode(drawer) {\n        var _this11 = this;\n\n        if (drawer) {\n          drawer._modeChanged.pipe(takeUntil(merge(this._drawers.changes, this._destroyed))).subscribe(function () {\n            _this11._updateContentMargins();\n\n            _this11._changeDetectorRef.markForCheck();\n          });\n        }\n      }\n      /**\n       * Toggles the 'mat-drawer-opened' class on the main 'mat-drawer-container' element.\n       * @param {?} isAdd\n       * @return {?}\n       */\n\n    }, {\n      key: \"_setContainerClass\",\n      value: function _setContainerClass(isAdd) {\n        if (isAdd) {\n          this._element.nativeElement.classList.add('mat-drawer-opened');\n        } else {\n          this._element.nativeElement.classList.remove('mat-drawer-opened');\n        }\n      }\n      /**\n       * Validate the state of the drawer children components.\n       * @return {?}\n       */\n\n    }, {\n      key: \"_validateDrawers\",\n      value: function _validateDrawers() {\n        var _this12 = this;\n\n        this._start = this._end = null; // Ensure that we have at most one start and one end drawer.\n\n        this._drawers.forEach(function (drawer) {\n          if (drawer.position == 'end') {\n            if (_this12._end != null) {\n              throwMatDuplicatedDrawerError('end');\n            }\n\n            _this12._end = drawer;\n          } else {\n            if (_this12._start != null) {\n              throwMatDuplicatedDrawerError('start');\n            }\n\n            _this12._start = drawer;\n          }\n        });\n\n        this._right = this._left = null; // Detect if we're LTR or RTL.\n\n        if (this._dir && this._dir.value === 'rtl') {\n          this._left = this._end;\n          this._right = this._start;\n        } else {\n          this._left = this._start;\n          this._right = this._end;\n        }\n      }\n      /**\n       * Whether the container is being pushed to the side by one of the drawers.\n       * @return {?}\n       */\n\n    }, {\n      key: \"_isPushed\",\n      value: function _isPushed() {\n        return this._isDrawerOpen(this._start) && this._start.mode != 'over' || this._isDrawerOpen(this._end) && this._end.mode != 'over';\n      }\n      /**\n       * @return {?}\n       */\n\n    }, {\n      key: \"_onBackdropClicked\",\n      value: function _onBackdropClicked() {\n        this.backdropClick.emit();\n\n        this._closeModalDrawer();\n      }\n      /**\n       * @return {?}\n       */\n\n    }, {\n      key: \"_closeModalDrawer\",\n      value: function _closeModalDrawer() {\n        var _this13 = this;\n\n        // Close all open drawers where closing is not disabled and the mode is not `side`.\n        [this._start, this._end].filter(function (drawer) {\n          return drawer && !drawer.disableClose && _this13._canHaveBackdrop(drawer);\n        }).forEach(function (drawer) {\n          return (\n            /** @type {?} */\n            drawer.close()\n          );\n        });\n      }\n      /**\n       * @return {?}\n       */\n\n    }, {\n      key: \"_isShowingBackdrop\",\n      value: function _isShowingBackdrop() {\n        return this._isDrawerOpen(this._start) && this._canHaveBackdrop(this._start) || this._isDrawerOpen(this._end) && this._canHaveBackdrop(this._end);\n      }\n      /**\n       * @param {?} drawer\n       * @return {?}\n       */\n\n    }, {\n      key: \"_canHaveBackdrop\",\n      value: function _canHaveBackdrop(drawer) {\n        return drawer.mode !== 'side' || !!this._backdropOverride;\n      }\n      /**\n       * @param {?} drawer\n       * @return {?}\n       */\n\n    }, {\n      key: \"_isDrawerOpen\",\n      value: function _isDrawerOpen(drawer) {\n        return drawer != null && drawer.opened;\n      }\n      /**\n       * Recalculates and updates the inline styles for the content. Note that this should be used\n       * sparingly, because it causes a reflow.\n       * @return {?}\n       */\n\n    }, {\n      key: \"_updateContentMargins\",\n      value: function _updateContentMargins() {\n        var _this14 = this;\n\n        /** @type {?} */\n        var left = 0;\n        /** @type {?} */\n\n        var right = 0;\n\n        if (this._left && this._left.opened) {\n          if (this._left.mode == 'side') {\n            left += this._left._width;\n          } else if (this._left.mode == 'push') {\n            /** @type {?} */\n            var width = this._left._width;\n            left += width;\n            right -= width;\n          }\n        }\n\n        if (this._right && this._right.opened) {\n          if (this._right.mode == 'side') {\n            right += this._right._width;\n          } else if (this._right.mode == 'push') {\n            /** @type {?} */\n            var _width = this._right._width;\n            right += _width;\n            left -= _width;\n          }\n        } // If either `right` or `left` is zero, don't set a style to the element. This\n        // allows users to specify a custom size via CSS class in SSR scenarios where the\n        // measured widths will always be zero. Note that we reset to `null` here, rather\n        // than below, in order to ensure that the types in the `if` below are consistent.\n\n\n        left = left ||\n        /** @type {?} */\n        null;\n        right = right ||\n        /** @type {?} */\n        null;\n\n        if (left !== this._contentMargins.left || right !== this._contentMargins.right) {\n          this._contentMargins = {\n            left: left,\n            right: right\n          }; // Pull back into the NgZone since in some cases we could be outside. We need to be careful\n          // to do it only when something changed, otherwise we can end up hitting the zone too often.\n\n          this._ngZone.run(function () {\n            return _this14._contentMarginChanges.next(_this14._contentMargins);\n          });\n        }\n      }\n    }]);\n\n    return MatDrawerContainer;\n  }();\n\n  MatDrawerContainer.ɵfac = function MatDrawerContainer_Factory(t) {\n    return new (t || MatDrawerContainer)(ɵngcc0.ɵɵdirectiveInject(ɵngcc4.Directionality, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(MAT_DRAWER_DEFAULT_AUTOSIZE), ɵngcc0.ɵɵdirectiveInject(ANIMATION_MODULE_TYPE, 8));\n  };\n\n  MatDrawerContainer.ɵcmp =\n  /*@__PURE__*/\n\n  /*@__PURE__*/\n  ɵngcc0.ɵɵdefineComponent({\n    type: MatDrawerContainer,\n    selectors: [[\"mat-drawer-container\"]],\n    contentQueries: function MatDrawerContainer_ContentQueries(rf, ctx, dirIndex) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MatDrawerContent, 5);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MatDrawer, 4);\n      }\n\n      if (rf & 2) {\n        var _t;\n\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._content = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._drawers = _t);\n      }\n    },\n    viewQuery: function MatDrawerContainer_Query(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(MatDrawerContent, 5);\n      }\n\n      if (rf & 2) {\n        var _t;\n\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._userContent = _t.first);\n      }\n    },\n    hostAttrs: [1, \"mat-drawer-container\"],\n    hostVars: 2,\n    hostBindings: function MatDrawerContainer_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"mat-drawer-container-explicit-backdrop\", ctx._backdropOverride);\n      }\n    },\n    inputs: {\n      autosize: \"autosize\",\n      hasBackdrop: \"hasBackdrop\"\n    },\n    outputs: {\n      backdropClick: \"backdropClick\"\n    },\n    exportAs: [\"matDrawerContainer\"],\n    ngContentSelectors: _c2,\n    decls: 4,\n    vars: 2,\n    consts: [[\"class\", \"mat-drawer-backdrop\", 3, \"mat-drawer-shown\", \"click\", 4, \"ngIf\"], [4, \"ngIf\"], [1, \"mat-drawer-backdrop\", 3, \"click\"]],\n    template: function MatDrawerContainer_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef(_c1);\n        ɵngcc0.ɵɵtemplate(0, MatDrawerContainer_div_0_Template, 1, 2, \"div\", 0);\n        ɵngcc0.ɵɵprojection(1);\n        ɵngcc0.ɵɵprojection(2, 1);\n        ɵngcc0.ɵɵtemplate(3, MatDrawerContainer_mat_drawer_content_3_Template, 2, 0, \"mat-drawer-content\", 1);\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.hasBackdrop);\n        ɵngcc0.ɵɵadvance(3);\n        ɵngcc0.ɵɵproperty(\"ngIf\", !ctx._content);\n      }\n    },\n    directives: [ɵngcc5.NgIf, MatDrawerContent],\n    styles: [_c5],\n    encapsulation: 2,\n    changeDetection: 0\n  });\n  return MatDrawerContainer;\n}();\n\nvar MatSidenavContent = /*@__PURE__*/function () {\n  var MatSidenavContent = /*#__PURE__*/function (_MatDrawerContent) {\n    _inherits(MatSidenavContent, _MatDrawerContent);\n\n    var _super2 = _createSuper(MatSidenavContent);\n\n    /**\n     * @param {?} changeDetectorRef\n     * @param {?} container\n     * @param {?} elementRef\n     * @param {?} scrollDispatcher\n     * @param {?} ngZone\n     */\n    function MatSidenavContent(changeDetectorRef, container, elementRef, scrollDispatcher, ngZone) {\n      _classCallCheck(this, MatSidenavContent);\n\n      return _super2.call(this, changeDetectorRef, container, elementRef, scrollDispatcher, ngZone);\n    }\n\n    return MatSidenavContent;\n  }(MatDrawerContent);\n\n  MatSidenavContent.ɵfac = function MatSidenavContent_Factory(t) {\n    return new (t || MatSidenavContent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(forwardRef(function () {\n      return MatSidenavContainer;\n    })), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.ScrollDispatcher), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone));\n  };\n\n  MatSidenavContent.ɵcmp =\n  /*@__PURE__*/\n\n  /*@__PURE__*/\n  ɵngcc0.ɵɵdefineComponent({\n    type: MatSidenavContent,\n    selectors: [[\"mat-sidenav-content\"]],\n    hostAttrs: [1, \"mat-drawer-content\", \"mat-sidenav-content\"],\n    hostVars: 4,\n    hostBindings: function MatSidenavContent_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        ɵngcc0.ɵɵstyleProp(\"margin-left\", ctx._container._contentMargins.left, \"px\")(\"margin-right\", ctx._container._contentMargins.right, \"px\");\n      }\n    },\n    features: [ɵngcc0.ɵɵInheritDefinitionFeature],\n    ngContentSelectors: _c0,\n    decls: 1,\n    vars: 0,\n    template: function MatSidenavContent_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵprojection(0);\n      }\n    },\n    encapsulation: 2,\n    changeDetection: 0\n  });\n  return MatSidenavContent;\n}();\n\nvar MatSidenav = /*@__PURE__*/function () {\n  var MatSidenav = /*#__PURE__*/function (_MatDrawer) {\n    _inherits(MatSidenav, _MatDrawer);\n\n    var _super3 = _createSuper(MatSidenav);\n\n    function MatSidenav() {\n      var _this15;\n\n      _classCallCheck(this, MatSidenav);\n\n      _this15 = _super3.apply(this, arguments);\n      _this15._fixedInViewport = false;\n      _this15._fixedTopGap = 0;\n      _this15._fixedBottomGap = 0;\n      return _this15;\n    }\n    /**\n     * Whether the sidenav is fixed in the viewport.\n     * @return {?}\n     */\n\n\n    _createClass(MatSidenav, [{\n      key: \"fixedInViewport\",\n      get: function get() {\n        return this._fixedInViewport;\n      }\n      /**\n       * @param {?} value\n       * @return {?}\n       */\n      ,\n      set: function set(value) {\n        this._fixedInViewport = coerceBooleanProperty(value);\n      }\n      /**\n       * The gap between the top of the sidenav and the top of the viewport when the sidenav is in fixed\n       * mode.\n       * @return {?}\n       */\n\n    }, {\n      key: \"fixedTopGap\",\n      get: function get() {\n        return this._fixedTopGap;\n      }\n      /**\n       * @param {?} value\n       * @return {?}\n       */\n      ,\n      set: function set(value) {\n        this._fixedTopGap = coerceNumberProperty(value);\n      }\n      /**\n       * The gap between the bottom of the sidenav and the bottom of the viewport when the sidenav is in\n       * fixed mode.\n       * @return {?}\n       */\n\n    }, {\n      key: \"fixedBottomGap\",\n      get: function get() {\n        return this._fixedBottomGap;\n      }\n      /**\n       * @param {?} value\n       * @return {?}\n       */\n      ,\n      set: function set(value) {\n        this._fixedBottomGap = coerceNumberProperty(value);\n      }\n    }]);\n\n    return MatSidenav;\n  }(MatDrawer);\n\n  MatSidenav.ɵfac =\n  /*@__PURE__*/\n\n  /*@__PURE__*/\n  function () {\n    var ɵMatSidenav_BaseFactory;\n    return function MatSidenav_Factory(t) {\n      return (ɵMatSidenav_BaseFactory || (ɵMatSidenav_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(MatSidenav)))(t || MatSidenav);\n    };\n  }();\n\n  MatSidenav.ɵcmp =\n  /*@__PURE__*/\n\n  /*@__PURE__*/\n  ɵngcc0.ɵɵdefineComponent({\n    type: MatSidenav,\n    selectors: [[\"mat-sidenav\"]],\n    hostAttrs: [\"tabIndex\", \"-1\", 1, \"mat-drawer\", \"mat-sidenav\"],\n    hostVars: 16,\n    hostBindings: function MatSidenav_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵsyntheticHostListener(\"@transform.start\", function MatSidenav_animation_transform_start_HostBindingHandler($event) {\n          return ctx._animationStarted.next($event);\n        })(\"@transform.done\", function MatSidenav_animation_transform_done_HostBindingHandler($event) {\n          return ctx._animationEnd.next($event);\n        });\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"align\", null);\n        ɵngcc0.ɵɵsyntheticHostProperty(\"@transform\", ctx._animationState);\n        ɵngcc0.ɵɵstyleProp(\"top\", ctx.fixedInViewport ? ctx.fixedTopGap : null, \"px\")(\"bottom\", ctx.fixedInViewport ? ctx.fixedBottomGap : null, \"px\");\n        ɵngcc0.ɵɵclassProp(\"mat-drawer-end\", ctx.position === \"end\")(\"mat-drawer-over\", ctx.mode === \"over\")(\"mat-drawer-push\", ctx.mode === \"push\")(\"mat-drawer-side\", ctx.mode === \"side\")(\"mat-sidenav-fixed\", ctx.fixedInViewport);\n      }\n    },\n    inputs: {\n      fixedInViewport: \"fixedInViewport\",\n      fixedTopGap: \"fixedTopGap\",\n      fixedBottomGap: \"fixedBottomGap\"\n    },\n    exportAs: [\"matSidenav\"],\n    features: [ɵngcc0.ɵɵInheritDefinitionFeature],\n    ngContentSelectors: _c0,\n    decls: 2,\n    vars: 0,\n    consts: [[1, \"mat-drawer-inner-container\"]],\n    template: function MatSidenav_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵelementStart(0, \"div\", 0);\n        ɵngcc0.ɵɵprojection(1);\n        ɵngcc0.ɵɵelementEnd();\n      }\n    },\n    encapsulation: 2,\n    data: {\n      animation: [matDrawerAnimations.transformDrawer]\n    },\n    changeDetection: 0\n  });\n  return MatSidenav;\n}();\n\nvar MatSidenavContainer = /*@__PURE__*/function () {\n  var MatSidenavContainer = /*#__PURE__*/function (_MatDrawerContainer) {\n    _inherits(MatSidenavContainer, _MatDrawerContainer);\n\n    var _super4 = _createSuper(MatSidenavContainer);\n\n    function MatSidenavContainer() {\n      _classCallCheck(this, MatSidenavContainer);\n\n      return _super4.apply(this, arguments);\n    }\n\n    return MatSidenavContainer;\n  }(MatDrawerContainer);\n\n  MatSidenavContainer.ɵfac =\n  /*@__PURE__*/\n\n  /*@__PURE__*/\n  function () {\n    var ɵMatSidenavContainer_BaseFactory;\n    return function MatSidenavContainer_Factory(t) {\n      return (ɵMatSidenavContainer_BaseFactory || (ɵMatSidenavContainer_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(MatSidenavContainer)))(t || MatSidenavContainer);\n    };\n  }();\n\n  MatSidenavContainer.ɵcmp =\n  /*@__PURE__*/\n\n  /*@__PURE__*/\n  ɵngcc0.ɵɵdefineComponent({\n    type: MatSidenavContainer,\n    selectors: [[\"mat-sidenav-container\"]],\n    contentQueries: function MatSidenavContainer_ContentQueries(rf, ctx, dirIndex) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MatSidenavContent, 5);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MatSidenav, 4);\n      }\n\n      if (rf & 2) {\n        var _t;\n\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._content = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._drawers = _t);\n      }\n    },\n    hostAttrs: [1, \"mat-drawer-container\", \"mat-sidenav-container\"],\n    hostVars: 2,\n    hostBindings: function MatSidenavContainer_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"mat-drawer-container-explicit-backdrop\", ctx._backdropOverride);\n      }\n    },\n    exportAs: [\"matSidenavContainer\"],\n    features: [ɵngcc0.ɵɵInheritDefinitionFeature],\n    ngContentSelectors: _c4,\n    decls: 4,\n    vars: 2,\n    consts: [[\"class\", \"mat-drawer-backdrop\", 3, \"mat-drawer-shown\", \"click\", 4, \"ngIf\"], [\"cdkScrollable\", \"\", 4, \"ngIf\"], [1, \"mat-drawer-backdrop\", 3, \"click\"], [\"cdkScrollable\", \"\"]],\n    template: function MatSidenavContainer_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef(_c3);\n        ɵngcc0.ɵɵtemplate(0, MatSidenavContainer_div_0_Template, 1, 2, \"div\", 0);\n        ɵngcc0.ɵɵprojection(1);\n        ɵngcc0.ɵɵprojection(2, 1);\n        ɵngcc0.ɵɵtemplate(3, MatSidenavContainer_mat_sidenav_content_3_Template, 2, 0, \"mat-sidenav-content\", 1);\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.hasBackdrop);\n        ɵngcc0.ɵɵadvance(3);\n        ɵngcc0.ɵɵproperty(\"ngIf\", !ctx._content);\n      }\n    },\n    directives: [ɵngcc5.NgIf, MatSidenavContent, ɵngcc1.CdkScrollable],\n    styles: [_c5],\n    encapsulation: 2,\n    changeDetection: 0\n  });\n  return MatSidenavContainer;\n}();\n\nvar MatSidenavModule = /*@__PURE__*/function () {\n  var MatSidenavModule = function MatSidenavModule() {\n    _classCallCheck(this, MatSidenavModule);\n  };\n\n  MatSidenavModule.ɵfac = function MatSidenavModule_Factory(t) {\n    return new (t || MatSidenavModule)();\n  };\n\n  MatSidenavModule.ɵmod =\n  /*@__PURE__*/\n\n  /*@__PURE__*/\n  ɵngcc0.ɵɵdefineNgModule({\n    type: MatSidenavModule\n  });\n  MatSidenavModule.ɵinj =\n  /*@__PURE__*/\n\n  /*@__PURE__*/\n  ɵngcc0.ɵɵdefineInjector({\n    imports: [[CommonModule, MatCommonModule, ScrollingModule, PlatformModule], MatCommonModule]\n  });\n  return MatSidenavModule;\n}();\n/*@__PURE__*/\n\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatSidenavModule, {\n    declarations: function declarations() {\n      return [MatDrawer, MatDrawerContainer, MatDrawerContent, MatSidenav, MatSidenavContainer, MatSidenavContent];\n    },\n    imports: function imports() {\n      return [CommonModule, MatCommonModule, ScrollingModule, PlatformModule];\n    },\n    exports: function exports() {\n      return [MatCommonModule, MatDrawer, MatDrawerContainer, MatDrawerContent, MatSidenav, MatSidenavContainer, MatSidenavContent];\n    }\n  });\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n\nexport { MatSidenavModule, throwMatDuplicatedDrawerError, MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY, MAT_DRAWER_DEFAULT_AUTOSIZE, MatDrawerContent, MatDrawer, MatDrawerContainer, MatSidenavContent, MatSidenav, MatSidenavContainer, matDrawerAnimations }; //# sourceMappingURL=sidenav.js.map","map":null,"metadata":{},"sourceType":"module"}