{"ast":null,"code":"import _get from \"/Users/adepertat/Dropbox/ECOLES/Openclassroom/P6_de_Pertat_Antoine/dwj-projet6/node_modules/@babel/runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"/Users/adepertat/Dropbox/ECOLES/Openclassroom/P6_de_Pertat_Antoine/dwj-projet6/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/adepertat/Dropbox/ECOLES/Openclassroom/P6_de_Pertat_Antoine/dwj-projet6/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/adepertat/Dropbox/ECOLES/Openclassroom/P6_de_Pertat_Antoine/dwj-projet6/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _createForOfIteratorHelper from \"/Users/adepertat/Dropbox/ECOLES/Openclassroom/P6_de_Pertat_Antoine/dwj-projet6/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper\";\nimport _classCallCheck from \"/Users/adepertat/Dropbox/ECOLES/Openclassroom/P6_de_Pertat_Antoine/dwj-projet6/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/adepertat/Dropbox/ECOLES/Openclassroom/P6_de_Pertat_Antoine/dwj-projet6/node_modules/@babel/runtime/helpers/esm/createClass\";\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { coerceCssPixelValue, coerceArray, coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { ScrollDispatcher, ViewportRuler, ScrollingModule, VIEWPORT_RULER_PROVIDER } from '@angular/cdk/scrolling';\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/scrolling';\nimport * as ɵngcc2 from '@angular/cdk/platform';\nimport * as ɵngcc3 from '@angular/cdk/bidi';\nimport * as ɵngcc4 from '@angular/common';\nexport { ViewportRuler, VIEWPORT_RULER_PROVIDER, CdkScrollable, ScrollDispatcher } from '@angular/cdk/scrolling';\nimport { DOCUMENT, Location } from '@angular/common';\nimport { Inject, Injectable, NgZone, Optional, NgModule, SkipSelf, ApplicationRef, ComponentFactoryResolver, Injector, ElementRef, Directive, EventEmitter, InjectionToken, Input, Output, TemplateRef, ViewContainerRef, defineInjectable, inject } from '@angular/core';\nimport { Observable, Subject, merge, Subscription } from 'rxjs';\nimport { take, takeUntil } from 'rxjs/operators';\nimport { Platform } from '@angular/cdk/platform';\nimport { Directionality, BidiModule } from '@angular/cdk/bidi';\nimport { DomPortalOutlet, TemplatePortal, PortalModule } from '@angular/cdk/portal';\nimport { ESCAPE } from '@angular/cdk/keycodes';\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * Strategy that will prevent the user from scrolling while the overlay is visible.\n */\n\nvar BlockScrollStrategy = /*#__PURE__*/function () {\n  /**\n   * @param {?} _viewportRuler\n   * @param {?} document\n   */\n  function BlockScrollStrategy(_viewportRuler, document) {\n    _classCallCheck(this, BlockScrollStrategy);\n\n    this._viewportRuler = _viewportRuler;\n    this._previousHTMLStyles = {\n      top: '',\n      left: ''\n    };\n    this._isEnabled = false;\n    this._document = document;\n  }\n  /**\n   * Attaches this scroll strategy to an overlay.\n   * @return {?}\n   */\n\n\n  _createClass(BlockScrollStrategy, [{\n    key: \"attach\",\n    value: function attach() {}\n    /**\n     * Blocks page-level scroll while the attached overlay is open.\n     * @return {?}\n     */\n\n  }, {\n    key: \"enable\",\n    value: function enable() {\n      if (this._canBeEnabled()) {\n        /** @type {?} */\n        var root =\n        /** @type {?} */\n        this._document.documentElement;\n        this._previousScrollPosition = this._viewportRuler.getViewportScrollPosition(); // Cache the previous inline styles in case the user had set them.\n\n        this._previousHTMLStyles.left = root.style.left || '';\n        this._previousHTMLStyles.top = root.style.top || ''; // Note: we're using the `html` node, instead of the `body`, because the `body` may\n        // have the user agent margin, whereas the `html` is guaranteed not to have one.\n\n        root.style.left = coerceCssPixelValue(-this._previousScrollPosition.left);\n        root.style.top = coerceCssPixelValue(-this._previousScrollPosition.top);\n        root.classList.add('cdk-global-scrollblock');\n        this._isEnabled = true;\n      }\n    }\n    /**\n     * Unblocks page-level scroll while the attached overlay is open.\n     * @return {?}\n     */\n\n  }, {\n    key: \"disable\",\n    value: function disable() {\n      if (this._isEnabled) {\n        /** @type {?} */\n        var html =\n        /** @type {?} */\n        this._document.documentElement;\n        /** @type {?} */\n\n        var body =\n        /** @type {?} */\n        this._document.body;\n        /** @type {?} */\n\n        var htmlStyle =\n        /** @type {?} */\n        html.style;\n        /** @type {?} */\n\n        var bodyStyle =\n        /** @type {?} */\n        body.style;\n        /** @type {?} */\n\n        var previousHtmlScrollBehavior = htmlStyle.scrollBehavior || '';\n        /** @type {?} */\n\n        var previousBodyScrollBehavior = bodyStyle.scrollBehavior || '';\n        this._isEnabled = false;\n        htmlStyle.left = this._previousHTMLStyles.left;\n        htmlStyle.top = this._previousHTMLStyles.top;\n        html.classList.remove('cdk-global-scrollblock'); // Disable user-defined smooth scrolling temporarily while we restore the scroll position.\n        // See https://developer.mozilla.org/en-US/docs/Web/CSS/scroll-behavior\n\n        htmlStyle.scrollBehavior = bodyStyle.scrollBehavior = 'auto';\n        window.scroll(this._previousScrollPosition.left, this._previousScrollPosition.top);\n        htmlStyle.scrollBehavior = previousHtmlScrollBehavior;\n        bodyStyle.scrollBehavior = previousBodyScrollBehavior;\n      }\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"_canBeEnabled\",\n    value: function _canBeEnabled() {\n      /** @type {?} */\n      var html =\n      /** @type {?} */\n      this._document.documentElement;\n\n      if (html.classList.contains('cdk-global-scrollblock') || this._isEnabled) {\n        return false;\n      }\n      /** @type {?} */\n\n\n      var body = this._document.body;\n      /** @type {?} */\n\n      var viewport = this._viewportRuler.getViewportSize();\n\n      return body.scrollHeight > viewport.height || body.scrollWidth > viewport.width;\n    }\n  }]);\n\n  return BlockScrollStrategy;\n}();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * Returns an error to be thrown when attempting to attach an already-attached scroll strategy.\n * @return {?}\n */\n\n\nfunction getMatScrollStrategyAlreadyAttachedError() {\n  return Error(\"Scroll strategy has already been attached.\");\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * Strategy that will close the overlay as soon as the user starts scrolling.\n */\n\n\nvar CloseScrollStrategy = /*#__PURE__*/function () {\n  /**\n   * @param {?} _scrollDispatcher\n   * @param {?} _ngZone\n   * @param {?} _viewportRuler\n   * @param {?=} _config\n   */\n  function CloseScrollStrategy(_scrollDispatcher, _ngZone, _viewportRuler, _config) {\n    var _this = this;\n\n    _classCallCheck(this, CloseScrollStrategy);\n\n    this._scrollDispatcher = _scrollDispatcher;\n    this._ngZone = _ngZone;\n    this._viewportRuler = _viewportRuler;\n    this._config = _config;\n    this._scrollSubscription = null;\n    /**\n     * Detaches the overlay ref and disables the scroll strategy.\n     */\n\n    this._detach = function () {\n      _this.disable();\n\n      if (_this._overlayRef.hasAttached()) {\n        _this._ngZone.run(function () {\n          return _this._overlayRef.detach();\n        });\n      }\n    };\n  }\n  /**\n   * Attaches this scroll strategy to an overlay.\n   * @param {?} overlayRef\n   * @return {?}\n   */\n\n\n  _createClass(CloseScrollStrategy, [{\n    key: \"attach\",\n    value: function attach(overlayRef) {\n      if (this._overlayRef) {\n        throw getMatScrollStrategyAlreadyAttachedError();\n      }\n\n      this._overlayRef = overlayRef;\n    }\n    /**\n     * Enables the closing of the attached overlay on scroll.\n     * @return {?}\n     */\n\n  }, {\n    key: \"enable\",\n    value: function enable() {\n      var _this2 = this;\n\n      if (this._scrollSubscription) {\n        return;\n      }\n      /** @type {?} */\n\n\n      var stream = this._scrollDispatcher.scrolled(0);\n\n      if (this._config && this._config.threshold && this._config.threshold > 1) {\n        this._initialScrollPosition = this._viewportRuler.getViewportScrollPosition().top;\n        this._scrollSubscription = stream.subscribe(function () {\n          /** @type {?} */\n          var scrollPosition = _this2._viewportRuler.getViewportScrollPosition().top;\n\n          if (Math.abs(scrollPosition - _this2._initialScrollPosition) >\n          /** @type {?} */\n\n          /** @type {?} */\n          _this2._config.threshold) {\n            _this2._detach();\n          } else {\n            _this2._overlayRef.updatePosition();\n          }\n        });\n      } else {\n        this._scrollSubscription = stream.subscribe(this._detach);\n      }\n    }\n    /**\n     * Disables the closing the attached overlay on scroll.\n     * @return {?}\n     */\n\n  }, {\n    key: \"disable\",\n    value: function disable() {\n      if (this._scrollSubscription) {\n        this._scrollSubscription.unsubscribe();\n\n        this._scrollSubscription = null;\n      }\n    }\n  }]);\n\n  return CloseScrollStrategy;\n}();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * Scroll strategy that doesn't do anything.\n */\n\n\nvar NoopScrollStrategy = /*#__PURE__*/function () {\n  function NoopScrollStrategy() {\n    _classCallCheck(this, NoopScrollStrategy);\n  }\n\n  _createClass(NoopScrollStrategy, [{\n    key: \"enable\",\n    value:\n    /**\n     * Does nothing, as this scroll strategy is a no-op.\n     * @return {?}\n     */\n    function enable() {}\n    /**\n     * Does nothing, as this scroll strategy is a no-op.\n     * @return {?}\n     */\n\n  }, {\n    key: \"disable\",\n    value: function disable() {}\n    /**\n     * Does nothing, as this scroll strategy is a no-op.\n     * @return {?}\n     */\n\n  }, {\n    key: \"attach\",\n    value: function attach() {}\n  }]);\n\n  return NoopScrollStrategy;\n}();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n// TODO(jelbourn): move this to live with the rest of the scrolling code\n// TODO(jelbourn): someday replace this with IntersectionObservers\n\n/**\n * Gets whether an element is scrolled outside of view by any of its parent scrolling containers.\n * \\@docs-private\n * @param {?} element Dimensions of the element (from getBoundingClientRect)\n * @param {?} scrollContainers Dimensions of element's scrolling containers (from getBoundingClientRect)\n * @return {?} Whether the element is scrolled out of view\n */\n\n\nfunction isElementScrolledOutsideView(element, scrollContainers) {\n  return scrollContainers.some(function (containerBounds) {\n    /** @type {?} */\n    var outsideAbove = element.bottom < containerBounds.top;\n    /** @type {?} */\n\n    var outsideBelow = element.top > containerBounds.bottom;\n    /** @type {?} */\n\n    var outsideLeft = element.right < containerBounds.left;\n    /** @type {?} */\n\n    var outsideRight = element.left > containerBounds.right;\n    return outsideAbove || outsideBelow || outsideLeft || outsideRight;\n  });\n}\n/**\n * Gets whether an element is clipped by any of its scrolling containers.\n * \\@docs-private\n * @param {?} element Dimensions of the element (from getBoundingClientRect)\n * @param {?} scrollContainers Dimensions of element's scrolling containers (from getBoundingClientRect)\n * @return {?} Whether the element is clipped\n */\n\n\nfunction isElementClippedByScrolling(element, scrollContainers) {\n  return scrollContainers.some(function (scrollContainerRect) {\n    /** @type {?} */\n    var clippedAbove = element.top < scrollContainerRect.top;\n    /** @type {?} */\n\n    var clippedBelow = element.bottom > scrollContainerRect.bottom;\n    /** @type {?} */\n\n    var clippedLeft = element.left < scrollContainerRect.left;\n    /** @type {?} */\n\n    var clippedRight = element.right > scrollContainerRect.right;\n    return clippedAbove || clippedBelow || clippedLeft || clippedRight;\n  });\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * Strategy that will update the element position as the user is scrolling.\n */\n\n\nvar RepositionScrollStrategy = /*#__PURE__*/function () {\n  /**\n   * @param {?} _scrollDispatcher\n   * @param {?} _viewportRuler\n   * @param {?} _ngZone\n   * @param {?=} _config\n   */\n  function RepositionScrollStrategy(_scrollDispatcher, _viewportRuler, _ngZone, _config) {\n    _classCallCheck(this, RepositionScrollStrategy);\n\n    this._scrollDispatcher = _scrollDispatcher;\n    this._viewportRuler = _viewportRuler;\n    this._ngZone = _ngZone;\n    this._config = _config;\n    this._scrollSubscription = null;\n  }\n  /**\n   * Attaches this scroll strategy to an overlay.\n   * @param {?} overlayRef\n   * @return {?}\n   */\n\n\n  _createClass(RepositionScrollStrategy, [{\n    key: \"attach\",\n    value: function attach(overlayRef) {\n      if (this._overlayRef) {\n        throw getMatScrollStrategyAlreadyAttachedError();\n      }\n\n      this._overlayRef = overlayRef;\n    }\n    /**\n     * Enables repositioning of the attached overlay on scroll.\n     * @return {?}\n     */\n\n  }, {\n    key: \"enable\",\n    value: function enable() {\n      var _this3 = this;\n\n      if (!this._scrollSubscription) {\n        /** @type {?} */\n        var throttle = this._config ? this._config.scrollThrottle : 0;\n        this._scrollSubscription = this._scrollDispatcher.scrolled(throttle).subscribe(function () {\n          _this3._overlayRef.updatePosition(); // TODO(crisbeto): make `close` on by default once all components can handle it.\n\n\n          if (_this3._config && _this3._config.autoClose) {\n            /** @type {?} */\n            var overlayRect = _this3._overlayRef.overlayElement.getBoundingClientRect();\n\n            var _this3$_viewportRuler = _this3._viewportRuler.getViewportSize(),\n                width = _this3$_viewportRuler.width,\n                height = _this3$_viewportRuler.height;\n            /** @type {?} */\n\n\n            var parentRects = [{\n              width: width,\n              height: height,\n              bottom: height,\n              right: width,\n              top: 0,\n              left: 0\n            }];\n\n            if (isElementScrolledOutsideView(overlayRect, parentRects)) {\n              _this3.disable();\n\n              _this3._ngZone.run(function () {\n                return _this3._overlayRef.detach();\n              });\n            }\n          }\n        });\n      }\n    }\n    /**\n     * Disables repositioning of the attached overlay on scroll.\n     * @return {?}\n     */\n\n  }, {\n    key: \"disable\",\n    value: function disable() {\n      if (this._scrollSubscription) {\n        this._scrollSubscription.unsubscribe();\n\n        this._scrollSubscription = null;\n      }\n    }\n  }]);\n\n  return RepositionScrollStrategy;\n}();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * Options for how an overlay will handle scrolling.\n *\n * Users can provide a custom value for `ScrollStrategyOptions` to replace the default\n * behaviors. This class primarily acts as a factory for ScrollStrategy instances.\n */\n\n\nvar ScrollStrategyOptions =\n/**\n * @param {?} _scrollDispatcher\n * @param {?} _viewportRuler\n * @param {?} _ngZone\n * @param {?} document\n */\nfunction ScrollStrategyOptions(_scrollDispatcher, _viewportRuler, _ngZone, document) {\n  var _this4 = this;\n\n  _classCallCheck(this, ScrollStrategyOptions);\n\n  this._scrollDispatcher = _scrollDispatcher;\n  this._viewportRuler = _viewportRuler;\n  this._ngZone = _ngZone;\n  /**\n   * Do nothing on scroll.\n   */\n\n  this.noop = function () {\n    return new NoopScrollStrategy();\n  };\n  /**\n   * Close the overlay as soon as the user scrolls.\n   * @param config Configuration to be used inside the scroll strategy.\n   */\n\n\n  this.close = function (config) {\n    return new CloseScrollStrategy(_this4._scrollDispatcher, _this4._ngZone, _this4._viewportRuler, config);\n  };\n  /**\n   * Block scrolling.\n   */\n\n\n  this.block = function () {\n    return new BlockScrollStrategy(_this4._viewportRuler, _this4._document);\n  };\n  /**\n   * Update the overlay's position on scroll.\n   * @param config Configuration to be used inside the scroll strategy.\n   * Allows debouncing the reposition calls.\n   */\n\n\n  this.reposition = function (config) {\n    return new RepositionScrollStrategy(_this4._scrollDispatcher, _this4._viewportRuler, _this4._ngZone, config);\n  };\n\n  this._document = document;\n};\n\nScrollStrategyOptions.ɵfac = function ScrollStrategyOptions_Factory(t) {\n  return new (t || ScrollStrategyOptions)(ɵngcc0.ɵɵinject(ɵngcc1.ScrollDispatcher), ɵngcc0.ɵɵinject(ɵngcc1.ViewportRuler), ɵngcc0.ɵɵinject(ɵngcc0.NgZone), ɵngcc0.ɵɵinject(DOCUMENT));\n};\n\nScrollStrategyOptions.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n  token: ScrollStrategyOptions,\n  factory: ScrollStrategyOptions.ɵfac,\n  providedIn: 'root'\n});\n/** @nocollapse */\n\nScrollStrategyOptions.ctorParameters = function () {\n  return [{\n    type: ScrollDispatcher\n  }, {\n    type: ViewportRuler\n  }, {\n    type: NgZone\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Inject,\n      args: [DOCUMENT]\n    }]\n  }];\n};\n/** @nocollapse */\n\n\nScrollStrategyOptions.ngInjectableDef = defineInjectable({\n  factory: function ScrollStrategyOptions_Factory() {\n    return new ScrollStrategyOptions(inject(ScrollDispatcher), inject(ViewportRuler), inject(NgZone), inject(DOCUMENT));\n  },\n  token: ScrollStrategyOptions,\n  providedIn: \"root\"\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ScrollStrategyOptions, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc1.ScrollDispatcher\n    }, {\n      type: ɵngcc1.ViewportRuler\n    }, {\n      type: ɵngcc0.NgZone\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }];\n  }, null);\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * Initial configuration used when creating an overlay.\n */\n\n\nvar OverlayConfig =\n/**\n * @param {?=} config\n */\nfunction OverlayConfig(config) {\n  var _this5 = this;\n\n  _classCallCheck(this, OverlayConfig);\n\n  /**\n   * Strategy to be used when handling scroll events while the overlay is open.\n   */\n  this.scrollStrategy = new NoopScrollStrategy();\n  /**\n   * Custom class to add to the overlay pane.\n   */\n\n  this.panelClass = '';\n  /**\n   * Whether the overlay has a backdrop.\n   */\n\n  this.hasBackdrop = false;\n  /**\n   * Custom class to add to the backdrop\n   */\n\n  this.backdropClass = 'cdk-overlay-dark-backdrop';\n  /**\n   * Whether the overlay should be disposed of when the user goes backwards/forwards in history.\n   * Note that this usually doesn't include clicking on links (unless the user is using\n   * the `HashLocationStrategy`).\n   */\n\n  this.disposeOnNavigation = false;\n\n  if (config) {\n    Object.keys(config).forEach(function (k) {\n      /** @type {?} */\n      var key =\n      /** @type {?} */\n      k;\n\n      if (typeof config[key] !== 'undefined') {\n        _this5[key] = config[key];\n      }\n    });\n  }\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * The points of the origin element and the overlay element to connect.\n */\n\n\nvar ConnectionPositionPair =\n/**\n * @param {?} origin\n * @param {?} overlay\n * @param {?=} offsetX\n * @param {?=} offsetY\n * @param {?=} panelClass\n */\nfunction ConnectionPositionPair(origin, overlay, offsetX, offsetY, panelClass) {\n  _classCallCheck(this, ConnectionPositionPair);\n\n  this.offsetX = offsetX;\n  this.offsetY = offsetY;\n  this.panelClass = panelClass;\n  this.originX = origin.originX;\n  this.originY = origin.originY;\n  this.overlayX = overlay.overlayX;\n  this.overlayY = overlay.overlayY;\n};\n/**\n * Set of properties regarding the position of the origin and overlay relative to the viewport\n * with respect to the containing Scrollable elements.\n *\n * The overlay and origin are clipped if any part of their bounding client rectangle exceeds the\n * bounds of any one of the strategy's Scrollable's bounding client rectangle.\n *\n * The overlay and origin are outside view if there is no overlap between their bounding client\n * rectangle and any one of the strategy's Scrollable's bounding client rectangle.\n *\n *       -----------                    -----------\n *       | outside |                    | clipped |\n *       |  view   |              --------------------------\n *       |         |              |     |         |        |\n *       ----------               |     -----------        |\n *  --------------------------    |                        |\n *  |                        |    |      Scrollable        |\n *  |                        |    |                        |\n *  |                        |     --------------------------\n *  |      Scrollable        |\n *  |                        |\n *  --------------------------\n *\n * \\@docs-private\n */\n\n\nvar ScrollingVisibility = function ScrollingVisibility() {\n  _classCallCheck(this, ScrollingVisibility);\n};\n/**\n * The change event emitted by the strategy when a fallback position is used.\n */\n\n\nvar ConnectedOverlayPositionChange =\n/**\n * @param {?} connectionPair\n * @param {?} scrollableViewProperties\n */\nfunction ConnectedOverlayPositionChange(connectionPair,\n/** @docs-private */\nscrollableViewProperties) {\n  _classCallCheck(this, ConnectedOverlayPositionChange);\n\n  this.connectionPair = connectionPair;\n  this.scrollableViewProperties = scrollableViewProperties;\n};\n/** @nocollapse */\n\n\nConnectedOverlayPositionChange.ctorParameters = function () {\n  return [{\n    type: ConnectionPositionPair\n  }, {\n    type: ScrollingVisibility,\n    decorators: [{\n      type: Optional\n    }]\n  }];\n};\n/**\n * Validates whether a vertical position property matches the expected values.\n * \\@docs-private\n * @param {?} property Name of the property being validated.\n * @param {?} value Value of the property being validated.\n * @return {?}\n */\n\n\nfunction validateVerticalPosition(property, value) {\n  if (value !== 'top' && value !== 'bottom' && value !== 'center') {\n    throw Error(\"ConnectedPosition: Invalid \".concat(property, \" \\\"\").concat(value, \"\\\". \") + \"Expected \\\"top\\\", \\\"bottom\\\" or \\\"center\\\".\");\n  }\n}\n/**\n * Validates whether a horizontal position property matches the expected values.\n * \\@docs-private\n * @param {?} property Name of the property being validated.\n * @param {?} value Value of the property being validated.\n * @return {?}\n */\n\n\nfunction validateHorizontalPosition(property, value) {\n  if (value !== 'start' && value !== 'end' && value !== 'center') {\n    throw Error(\"ConnectedPosition: Invalid \".concat(property, \" \\\"\").concat(value, \"\\\". \") + \"Expected \\\"start\\\", \\\"end\\\" or \\\"center\\\".\");\n  }\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * Service for dispatching keyboard events that land on the body to appropriate overlay ref,\n * if any. It maintains a list of attached overlays to determine best suited overlay based\n * on event target and order of overlay opens.\n */\n\n\nvar OverlayKeyboardDispatcher = /*#__PURE__*/function () {\n  /**\n   * @param {?} document\n   */\n  function OverlayKeyboardDispatcher(document) {\n    var _this6 = this;\n\n    _classCallCheck(this, OverlayKeyboardDispatcher);\n\n    /**\n     * Currently attached overlays in the order they were attached.\n     */\n    this._attachedOverlays = [];\n    /**\n     * Keyboard event listener that will be attached to the body.\n     */\n\n    this._keydownListener = function (event) {\n      /** @type {?} */\n      var overlays = _this6._attachedOverlays;\n\n      for (var i = overlays.length - 1; i > -1; i--) {\n        // Dispatch the keydown event to the top overlay which has subscribers to its keydown events.\n        // We want to target the most recent overlay, rather than trying to match where the event came\n        // from, because some components might open an overlay, but keep focus on a trigger element\n        // (e.g. for select and autocomplete). We skip overlays without keydown event subscriptions,\n        // because we don't want overlays that don't handle keyboard events to block the ones below\n        // them that do.\n        if (overlays[i]._keydownEventSubscriptions > 0) {\n          overlays[i]._keydownEvents.next(event);\n\n          break;\n        }\n      }\n    };\n\n    this._document = document;\n  }\n  /**\n   * @return {?}\n   */\n\n\n  _createClass(OverlayKeyboardDispatcher, [{\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      this._detach();\n    }\n    /**\n     * Add a new overlay to the list of attached overlay refs.\n     * @param {?} overlayRef\n     * @return {?}\n     */\n\n  }, {\n    key: \"add\",\n    value: function add(overlayRef) {\n      // Ensure that we don't get the same overlay multiple times.\n      this.remove(overlayRef); // Lazily start dispatcher once first overlay is added\n\n      if (!this._isAttached) {\n        this._document.body.addEventListener('keydown', this._keydownListener, true);\n\n        this._isAttached = true;\n      }\n\n      this._attachedOverlays.push(overlayRef);\n    }\n    /**\n     * Remove an overlay from the list of attached overlay refs.\n     * @param {?} overlayRef\n     * @return {?}\n     */\n\n  }, {\n    key: \"remove\",\n    value: function remove(overlayRef) {\n      /** @type {?} */\n      var index = this._attachedOverlays.indexOf(overlayRef);\n\n      if (index > -1) {\n        this._attachedOverlays.splice(index, 1);\n      } // Remove the global listener once there are no more overlays.\n\n\n      if (this._attachedOverlays.length === 0) {\n        this._detach();\n      }\n    }\n    /**\n     * Detaches the global keyboard event listener.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_detach\",\n    value: function _detach() {\n      if (this._isAttached) {\n        this._document.body.removeEventListener('keydown', this._keydownListener, true);\n\n        this._isAttached = false;\n      }\n    }\n  }]);\n\n  return OverlayKeyboardDispatcher;\n}();\n\nOverlayKeyboardDispatcher.ɵfac = function OverlayKeyboardDispatcher_Factory(t) {\n  return new (t || OverlayKeyboardDispatcher)(ɵngcc0.ɵɵinject(DOCUMENT));\n};\n\nOverlayKeyboardDispatcher.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n  token: OverlayKeyboardDispatcher,\n  factory: OverlayKeyboardDispatcher.ɵfac,\n  providedIn: 'root'\n});\n/** @nocollapse */\n\nOverlayKeyboardDispatcher.ctorParameters = function () {\n  return [{\n    type: undefined,\n    decorators: [{\n      type: Inject,\n      args: [DOCUMENT]\n    }]\n  }];\n};\n/** @nocollapse */\n\n\nOverlayKeyboardDispatcher.ngInjectableDef = defineInjectable({\n  factory: function OverlayKeyboardDispatcher_Factory() {\n    return new OverlayKeyboardDispatcher(inject(DOCUMENT));\n  },\n  token: OverlayKeyboardDispatcher,\n  providedIn: \"root\"\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(OverlayKeyboardDispatcher, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }];\n  }, null);\n})();\n/**\n * \\@docs-private \\@deprecated \\@breaking-change 8.0.0\n * @param {?} dispatcher\n * @param {?} _document\n * @return {?}\n */\n\n\nfunction OVERLAY_KEYBOARD_DISPATCHER_PROVIDER_FACTORY(dispatcher, _document) {\n  return dispatcher || new OverlayKeyboardDispatcher(_document);\n}\n/** *\n * \\@docs-private \\@deprecated \\@breaking-change 8.0.0\n  @type {?} */\n\n\nvar OVERLAY_KEYBOARD_DISPATCHER_PROVIDER = {\n  // If there is already an OverlayKeyboardDispatcher available, use that.\n  // Otherwise, provide a new one.\n  provide: OverlayKeyboardDispatcher,\n  deps: [[new Optional(), new SkipSelf(), OverlayKeyboardDispatcher],\n  /** @type {?} */\n  // Coerce to `InjectionToken` so that the `deps` match the \"shape\"\n  // of the type expected by Angular\n  DOCUMENT],\n  useFactory: OVERLAY_KEYBOARD_DISPATCHER_PROVIDER_FACTORY\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * Container inside which all overlays will render.\n */\n\nvar OverlayContainer = /*#__PURE__*/function () {\n  /**\n   * @param {?} _document\n   */\n  function OverlayContainer(_document) {\n    _classCallCheck(this, OverlayContainer);\n\n    this._document = _document;\n  }\n  /**\n   * @return {?}\n   */\n\n\n  _createClass(OverlayContainer, [{\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      if (this._containerElement && this._containerElement.parentNode) {\n        this._containerElement.parentNode.removeChild(this._containerElement);\n      }\n    }\n    /**\n     * This method returns the overlay container element. It will lazily\n     * create the element the first time  it is called to facilitate using\n     * the container in non-browser environments.\n     * @return {?} the container element\n     */\n\n  }, {\n    key: \"getContainerElement\",\n    value: function getContainerElement() {\n      if (!this._containerElement) {\n        this._createContainer();\n      }\n\n      return this._containerElement;\n    }\n    /**\n     * Create the overlay container element, which is simply a div\n     * with the 'cdk-overlay-container' class on the document body.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_createContainer\",\n    value: function _createContainer() {\n      /** @type {?} */\n      var container = this._document.createElement('div');\n\n      container.classList.add('cdk-overlay-container');\n\n      this._document.body.appendChild(container);\n\n      this._containerElement = container;\n    }\n  }]);\n\n  return OverlayContainer;\n}();\n\nOverlayContainer.ɵfac = function OverlayContainer_Factory(t) {\n  return new (t || OverlayContainer)(ɵngcc0.ɵɵinject(DOCUMENT));\n};\n\nOverlayContainer.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n  token: OverlayContainer,\n  factory: OverlayContainer.ɵfac,\n  providedIn: 'root'\n});\n/** @nocollapse */\n\nOverlayContainer.ctorParameters = function () {\n  return [{\n    type: undefined,\n    decorators: [{\n      type: Inject,\n      args: [DOCUMENT]\n    }]\n  }];\n};\n/** @nocollapse */\n\n\nOverlayContainer.ngInjectableDef = defineInjectable({\n  factory: function OverlayContainer_Factory() {\n    return new OverlayContainer(inject(DOCUMENT));\n  },\n  token: OverlayContainer,\n  providedIn: \"root\"\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(OverlayContainer, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }];\n  }, null);\n})();\n/**\n * \\@docs-private \\@deprecated \\@breaking-change 8.0.0\n * @param {?} parentContainer\n * @param {?} _document\n * @return {?}\n */\n\n\nfunction OVERLAY_CONTAINER_PROVIDER_FACTORY(parentContainer, _document) {\n  return parentContainer || new OverlayContainer(_document);\n}\n/** *\n * \\@docs-private \\@deprecated \\@breaking-change 8.0.0\n  @type {?} */\n\n\nvar OVERLAY_CONTAINER_PROVIDER = {\n  // If there is already an OverlayContainer available, use that. Otherwise, provide a new one.\n  provide: OverlayContainer,\n  deps: [[new Optional(), new SkipSelf(), OverlayContainer],\n  /** @type {?} */\n  DOCUMENT // We need to use the InjectionToken somewhere to keep TS happy\n  // We need to use the InjectionToken somewhere to keep TS happy\n  ],\n  useFactory: OVERLAY_CONTAINER_PROVIDER_FACTORY\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * Reference to an overlay that has been created with the Overlay service.\n * Used to manipulate or dispose of said overlay.\n */\n\nvar OverlayRef = /*#__PURE__*/function () {\n  /**\n   * @param {?} _portalOutlet\n   * @param {?} _host\n   * @param {?} _pane\n   * @param {?} _config\n   * @param {?} _ngZone\n   * @param {?} _keyboardDispatcher\n   * @param {?} _document\n   * @param {?=} _location\n   */\n  function OverlayRef(_portalOutlet, _host, _pane, _config, _ngZone, _keyboardDispatcher, _document, _location) {\n    var _this7 = this;\n\n    _classCallCheck(this, OverlayRef);\n\n    this._portalOutlet = _portalOutlet;\n    this._host = _host;\n    this._pane = _pane;\n    this._config = _config;\n    this._ngZone = _ngZone;\n    this._keyboardDispatcher = _keyboardDispatcher;\n    this._document = _document;\n    this._location = _location;\n    this._backdropElement = null;\n    this._backdropClick = new Subject();\n    this._attachments = new Subject();\n    this._detachments = new Subject();\n    this._locationChanges = Subscription.EMPTY;\n    this._keydownEventsObservable = Observable.create(function (observer) {\n      /** @type {?} */\n      var subscription = _this7._keydownEvents.subscribe(observer);\n\n      _this7._keydownEventSubscriptions++;\n      return function () {\n        subscription.unsubscribe();\n        _this7._keydownEventSubscriptions--;\n      };\n    });\n    /**\n     * Stream of keydown events dispatched to this overlay.\n     */\n\n    this._keydownEvents = new Subject();\n    /**\n     * Amount of subscriptions to the keydown events.\n     */\n\n    this._keydownEventSubscriptions = 0;\n\n    if (_config.scrollStrategy) {\n      _config.scrollStrategy.attach(this);\n    }\n\n    this._positionStrategy = _config.positionStrategy;\n  }\n  /**\n   * The overlay's HTML element\n   * @return {?}\n   */\n\n\n  _createClass(OverlayRef, [{\n    key: \"overlayElement\",\n    get: function get() {\n      return this._pane;\n    }\n    /**\n     * The overlay's backdrop HTML element.\n     * @return {?}\n     */\n\n  }, {\n    key: \"backdropElement\",\n    get: function get() {\n      return this._backdropElement;\n    }\n    /**\n     * Wrapper around the panel element. Can be used for advanced\n     * positioning where a wrapper with specific styling is\n     * required around the overlay pane.\n     * @return {?}\n     */\n\n  }, {\n    key: \"hostElement\",\n    get: function get() {\n      return this._host;\n    }\n    /**\n     * Attaches content, given via a Portal, to the overlay.\n     * If the overlay is configured to have a backdrop, it will be created.\n     *\n     * @param {?} portal Portal instance to which to attach the overlay.\n     * @return {?} The portal attachment result.\n     */\n\n  }, {\n    key: \"attach\",\n    value: function attach(portal) {\n      var _this8 = this;\n\n      /** @type {?} */\n      var attachResult = this._portalOutlet.attach(portal);\n\n      if (this._positionStrategy) {\n        this._positionStrategy.attach(this);\n      } // Update the pane element with the given configuration.\n\n\n      if (!this._host.parentElement && this._previousHostParent) {\n        this._previousHostParent.appendChild(this._host);\n      }\n\n      this._updateStackingOrder();\n\n      this._updateElementSize();\n\n      this._updateElementDirection();\n\n      if (this._config.scrollStrategy) {\n        this._config.scrollStrategy.enable();\n      } // Update the position once the zone is stable so that the overlay will be fully rendered\n      // before attempting to position it, as the position may depend on the size of the rendered\n      // content.\n\n\n      this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(function () {\n        // The overlay could've been detached before the zone has stabilized.\n        if (_this8.hasAttached()) {\n          _this8.updatePosition();\n        }\n      }); // Enable pointer events for the overlay pane element.\n\n\n      this._togglePointerEvents(true);\n\n      if (this._config.hasBackdrop) {\n        this._attachBackdrop();\n      }\n\n      if (this._config.panelClass) {\n        this._toggleClasses(this._pane, this._config.panelClass, true);\n      } // Only emit the `attachments` event once all other setup is done.\n\n\n      this._attachments.next(); // Track this overlay by the keyboard dispatcher\n\n\n      this._keyboardDispatcher.add(this); // @breaking-change 8.0.0 remove the null check for `_location`\n      // once the constructor parameter is made required.\n\n\n      if (this._config.disposeOnNavigation && this._location) {\n        this._locationChanges = this._location.subscribe(function () {\n          return _this8.dispose();\n        });\n      }\n\n      return attachResult;\n    }\n    /**\n     * Detaches an overlay from a portal.\n     * @return {?} The portal detachment result.\n     */\n\n  }, {\n    key: \"detach\",\n    value: function detach() {\n      if (!this.hasAttached()) {\n        return;\n      }\n\n      this.detachBackdrop(); // When the overlay is detached, the pane element should disable pointer events.\n      // This is necessary because otherwise the pane element will cover the page and disable\n      // pointer events therefore. Depends on the position strategy and the applied pane boundaries.\n\n      this._togglePointerEvents(false);\n\n      if (this._positionStrategy && this._positionStrategy.detach) {\n        this._positionStrategy.detach();\n      }\n\n      if (this._config.scrollStrategy) {\n        this._config.scrollStrategy.disable();\n      }\n      /** @type {?} */\n\n\n      var detachmentResult = this._portalOutlet.detach(); // Only emit after everything is detached.\n\n\n      this._detachments.next(); // Remove this overlay from keyboard dispatcher tracking.\n\n\n      this._keyboardDispatcher.remove(this); // Keeping the host element in DOM the can cause scroll jank, because it still gets\n      // rendered, even though it's transparent and unclickable which is why we remove it.\n\n\n      this._detachContentWhenStable(); // Stop listening for location changes.\n\n\n      this._locationChanges.unsubscribe();\n\n      return detachmentResult;\n    }\n    /**\n     * Cleans up the overlay from the DOM.\n     * @return {?}\n     */\n\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      /** @type {?} */\n      var isAttached = this.hasAttached();\n\n      if (this._positionStrategy) {\n        this._positionStrategy.dispose();\n      }\n\n      if (this._config.scrollStrategy) {\n        this._config.scrollStrategy.disable();\n      }\n\n      this.detachBackdrop();\n\n      this._locationChanges.unsubscribe();\n\n      this._keyboardDispatcher.remove(this);\n\n      this._portalOutlet.dispose();\n\n      this._attachments.complete();\n\n      this._backdropClick.complete();\n\n      this._keydownEvents.complete();\n\n      if (this._host && this._host.parentNode) {\n        this._host.parentNode.removeChild(this._host);\n\n        this._host =\n        /** @type {?} */\n        null;\n      }\n\n      this._previousHostParent = this._pane =\n      /** @type {?} */\n      null;\n\n      if (isAttached) {\n        this._detachments.next();\n      }\n\n      this._detachments.complete();\n    }\n    /**\n     * Whether the overlay has attached content.\n     * @return {?}\n     */\n\n  }, {\n    key: \"hasAttached\",\n    value: function hasAttached() {\n      return this._portalOutlet.hasAttached();\n    }\n    /**\n     * Gets an observable that emits when the backdrop has been clicked.\n     * @return {?}\n     */\n\n  }, {\n    key: \"backdropClick\",\n    value: function backdropClick() {\n      return this._backdropClick.asObservable();\n    }\n    /**\n     * Gets an observable that emits when the overlay has been attached.\n     * @return {?}\n     */\n\n  }, {\n    key: \"attachments\",\n    value: function attachments() {\n      return this._attachments.asObservable();\n    }\n    /**\n     * Gets an observable that emits when the overlay has been detached.\n     * @return {?}\n     */\n\n  }, {\n    key: \"detachments\",\n    value: function detachments() {\n      return this._detachments.asObservable();\n    }\n    /**\n     * Gets an observable of keydown events targeted to this overlay.\n     * @return {?}\n     */\n\n  }, {\n    key: \"keydownEvents\",\n    value: function keydownEvents() {\n      return this._keydownEventsObservable;\n    }\n    /**\n     * Gets the the current overlay configuration, which is immutable.\n     * @return {?}\n     */\n\n  }, {\n    key: \"getConfig\",\n    value: function getConfig() {\n      return this._config;\n    }\n    /**\n     * Updates the position of the overlay based on the position strategy.\n     * @return {?}\n     */\n\n  }, {\n    key: \"updatePosition\",\n    value: function updatePosition() {\n      if (this._positionStrategy) {\n        this._positionStrategy.apply();\n      }\n    }\n    /**\n     * Switches to a new position strategy and updates the overlay position.\n     * @param {?} strategy\n     * @return {?}\n     */\n\n  }, {\n    key: \"updatePositionStrategy\",\n    value: function updatePositionStrategy(strategy) {\n      if (strategy === this._positionStrategy) {\n        return;\n      }\n\n      if (this._positionStrategy) {\n        this._positionStrategy.dispose();\n      }\n\n      this._positionStrategy = strategy;\n\n      if (this.hasAttached()) {\n        strategy.attach(this);\n        this.updatePosition();\n      }\n    }\n    /**\n     * Update the size properties of the overlay.\n     * @param {?} sizeConfig\n     * @return {?}\n     */\n\n  }, {\n    key: \"updateSize\",\n    value: function updateSize(sizeConfig) {\n      this._config = Object.assign({}, this._config, sizeConfig);\n\n      this._updateElementSize();\n    }\n    /**\n     * Sets the LTR/RTL direction for the overlay.\n     * @param {?} dir\n     * @return {?}\n     */\n\n  }, {\n    key: \"setDirection\",\n    value: function setDirection(dir) {\n      this._config = Object.assign({}, this._config, {\n        direction: dir\n      });\n\n      this._updateElementDirection();\n    }\n    /**\n     * Returns the layout direction of the overlay panel.\n     * @return {?}\n     */\n\n  }, {\n    key: \"getDirection\",\n    value: function getDirection() {\n      /** @type {?} */\n      var direction = this._config.direction;\n\n      if (!direction) {\n        return 'ltr';\n      }\n\n      return typeof direction === 'string' ? direction : direction.value;\n    }\n    /**\n     * Updates the text direction of the overlay panel.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_updateElementDirection\",\n    value: function _updateElementDirection() {\n      this._host.setAttribute('dir', this.getDirection());\n    }\n    /**\n     * Updates the size of the overlay element based on the overlay config.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_updateElementSize\",\n    value: function _updateElementSize() {\n      /** @type {?} */\n      var style = this._pane.style;\n      style.width = coerceCssPixelValue(this._config.width);\n      style.height = coerceCssPixelValue(this._config.height);\n      style.minWidth = coerceCssPixelValue(this._config.minWidth);\n      style.minHeight = coerceCssPixelValue(this._config.minHeight);\n      style.maxWidth = coerceCssPixelValue(this._config.maxWidth);\n      style.maxHeight = coerceCssPixelValue(this._config.maxHeight);\n    }\n    /**\n     * Toggles the pointer events for the overlay pane element.\n     * @param {?} enablePointer\n     * @return {?}\n     */\n\n  }, {\n    key: \"_togglePointerEvents\",\n    value: function _togglePointerEvents(enablePointer) {\n      this._pane.style.pointerEvents = enablePointer ? 'auto' : 'none';\n    }\n    /**\n     * Attaches a backdrop for this overlay.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_attachBackdrop\",\n    value: function _attachBackdrop() {\n      var _this9 = this;\n\n      /** @type {?} */\n      var showingClass = 'cdk-overlay-backdrop-showing';\n      this._backdropElement = this._document.createElement('div');\n\n      this._backdropElement.classList.add('cdk-overlay-backdrop');\n\n      if (this._config.backdropClass) {\n        this._toggleClasses(this._backdropElement, this._config.backdropClass, true);\n      }\n      /** @type {?} */\n\n\n      // Insert the backdrop before the pane in the DOM order,\n      // in order to handle stacked overlays properly.\n      this._host.parentElement.insertBefore(this._backdropElement, this._host); // Forward backdrop clicks such that the consumer of the overlay can perform whatever\n      // action desired when such a click occurs (usually closing the overlay).\n\n\n      this._backdropElement.addEventListener('click', function (event) {\n        return _this9._backdropClick.next(event);\n      }); // Add class to fade-in the backdrop after one frame.\n\n\n      if (typeof requestAnimationFrame !== 'undefined') {\n        this._ngZone.runOutsideAngular(function () {\n          requestAnimationFrame(function () {\n            if (_this9._backdropElement) {\n              _this9._backdropElement.classList.add(showingClass);\n            }\n          });\n        });\n      } else {\n        this._backdropElement.classList.add(showingClass);\n      }\n    }\n    /**\n     * Updates the stacking order of the element, moving it to the top if necessary.\n     * This is required in cases where one overlay was detached, while another one,\n     * that should be behind it, was destroyed. The next time both of them are opened,\n     * the stacking will be wrong, because the detached element's pane will still be\n     * in its original DOM position.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_updateStackingOrder\",\n    value: function _updateStackingOrder() {\n      if (this._host.nextSibling) {\n        /** @type {?} */\n        this._host.parentNode.appendChild(this._host);\n      }\n    }\n    /**\n     * Detaches the backdrop (if any) associated with the overlay.\n     * @return {?}\n     */\n\n  }, {\n    key: \"detachBackdrop\",\n    value: function detachBackdrop() {\n      var _this10 = this;\n\n      /** @type {?} */\n      var backdropToDetach = this._backdropElement;\n\n      if (backdropToDetach) {\n        /** @type {?} */\n        var timeoutId;\n        /** @type {?} */\n\n        var finishDetach = function finishDetach() {\n          // It may not be attached to anything in certain cases (e.g. unit tests).\n          if (backdropToDetach && backdropToDetach.parentNode) {\n            backdropToDetach.parentNode.removeChild(backdropToDetach);\n          } // It is possible that a new portal has been attached to this overlay since we started\n          // removing the backdrop. If that is the case, only clear the backdrop reference if it\n          // is still the same instance that we started to remove.\n\n\n          if (_this10._backdropElement == backdropToDetach) {\n            _this10._backdropElement = null;\n          }\n\n          clearTimeout(timeoutId);\n        };\n\n        backdropToDetach.classList.remove('cdk-overlay-backdrop-showing');\n\n        if (this._config.backdropClass) {\n          this._toggleClasses(backdropToDetach, this._config.backdropClass, false);\n        }\n\n        this._ngZone.runOutsideAngular(function () {\n          /** @type {?} */\n          backdropToDetach.addEventListener('transitionend', finishDetach);\n        }); // If the backdrop doesn't have a transition, the `transitionend` event won't fire.\n        // In this case we make it unclickable and we try to remove it after a delay.\n\n\n        backdropToDetach.style.pointerEvents = 'none'; // Run this outside the Angular zone because there's nothing that Angular cares about.\n        // If it were to run inside the Angular zone, every test that used Overlay would have to be\n        // either async or fakeAsync.\n\n        timeoutId = this._ngZone.runOutsideAngular(function () {\n          return setTimeout(finishDetach, 500);\n        });\n      }\n    }\n    /**\n     * Toggles a single CSS class or an array of classes on an element.\n     * @param {?} element\n     * @param {?} cssClasses\n     * @param {?} isAdd\n     * @return {?}\n     */\n\n  }, {\n    key: \"_toggleClasses\",\n    value: function _toggleClasses(element, cssClasses, isAdd) {\n      /** @type {?} */\n      var classList = element.classList;\n      coerceArray(cssClasses).forEach(function (cssClass) {\n        // We can't do a spread here, because IE doesn't support setting multiple classes.\n        isAdd ? classList.add(cssClass) : classList.remove(cssClass);\n      });\n    }\n    /**\n     * Detaches the overlay content next time the zone stabilizes.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_detachContentWhenStable\",\n    value: function _detachContentWhenStable() {\n      var _this11 = this;\n\n      // Normally we wouldn't have to explicitly run this outside the `NgZone`, however\n      // if the consumer is using `zone-patch-rxjs`, the `Subscription.unsubscribe` call will\n      // be patched to run inside the zone, which will throw us into an infinite loop.\n      this._ngZone.runOutsideAngular(function () {\n        /** @type {?} */\n        var subscription = _this11._ngZone.onStable.asObservable().pipe(takeUntil(merge(_this11._attachments, _this11._detachments))).subscribe(function () {\n          // Needs a couple of checks for the pane and host, because\n          // they may have been removed by the time the zone stabilizes.\n          if (!_this11._pane || !_this11._host || _this11._pane.children.length === 0) {\n            if (_this11._pane && _this11._config.panelClass) {\n              _this11._toggleClasses(_this11._pane, _this11._config.panelClass, false);\n            }\n\n            if (_this11._host && _this11._host.parentElement) {\n              _this11._previousHostParent = _this11._host.parentElement;\n\n              _this11._previousHostParent.removeChild(_this11._host);\n            }\n\n            subscription.unsubscribe();\n          }\n        });\n      });\n    }\n  }]);\n\n  return OverlayRef;\n}();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/** *\n * Class to be added to the overlay bounding box.\n  @type {?} */\n\n\nvar boundingBoxClass = 'cdk-overlay-connected-position-bounding-box';\n/**\n * A strategy for positioning overlays. Using this strategy, an overlay is given an\n * implicit position relative some origin element. The relative position is defined in terms of\n * a point on the origin element that is connected to a point on the overlay element. For example,\n * a basic dropdown is connecting the bottom-left corner of the origin to the top-left corner\n * of the overlay.\n */\n\nvar FlexibleConnectedPositionStrategy = /*#__PURE__*/function () {\n  /**\n   * @param {?} connectedTo\n   * @param {?} _viewportRuler\n   * @param {?} _document\n   * @param {?=} _platform\n   * @param {?=} _overlayContainer\n   */\n  function FlexibleConnectedPositionStrategy(connectedTo, _viewportRuler, _document, _platform, _overlayContainer) {\n    var _this12 = this;\n\n    _classCallCheck(this, FlexibleConnectedPositionStrategy);\n\n    this._viewportRuler = _viewportRuler;\n    this._document = _document;\n    this._platform = _platform;\n    this._overlayContainer = _overlayContainer;\n    /**\n     * Last size used for the bounding box. Used to avoid resizing the overlay after open.\n     */\n\n    this._lastBoundingBoxSize = {\n      width: 0,\n      height: 0\n    };\n    /**\n     * Whether the overlay was pushed in a previous positioning.\n     */\n\n    this._isPushed = false;\n    /**\n     * Whether the overlay can be pushed on-screen on the initial open.\n     */\n\n    this._canPush = true;\n    /**\n     * Whether the overlay can grow via flexible width/height after the initial open.\n     */\n\n    this._growAfterOpen = false;\n    /**\n     * Whether the overlay's width and height can be constrained to fit within the viewport.\n     */\n\n    this._hasFlexibleDimensions = true;\n    /**\n     * Whether the overlay position is locked.\n     */\n\n    this._positionLocked = false;\n    /**\n     * Amount of space that must be maintained between the overlay and the edge of the viewport.\n     */\n\n    this._viewportMargin = 0;\n    /**\n     * The Scrollable containers used to check scrollable view properties on position change.\n     */\n\n    this.scrollables = [];\n    /**\n     * Ordered list of preferred positions, from most to least desirable.\n     */\n\n    this._preferredPositions = [];\n    /**\n     * Subject that emits whenever the position changes.\n     */\n\n    this._positionChanges = new Subject();\n    /**\n     * Subscription to viewport size changes.\n     */\n\n    this._resizeSubscription = Subscription.EMPTY;\n    /**\n     * Default offset for the overlay along the x axis.\n     */\n\n    this._offsetX = 0;\n    /**\n     * Default offset for the overlay along the y axis.\n     */\n\n    this._offsetY = 0;\n    /**\n     * Amount of subscribers to the `positionChanges` stream.\n     */\n\n    this._positionChangeSubscriptions = 0;\n    /**\n     * Keeps track of the CSS classes that the position strategy has applied on the overlay panel.\n     */\n\n    this._appliedPanelClasses = [];\n    /**\n     * Observable sequence of position changes.\n     */\n\n    this.positionChanges = Observable.create(function (observer) {\n      /** @type {?} */\n      var subscription = _this12._positionChanges.subscribe(observer);\n\n      _this12._positionChangeSubscriptions++;\n      return function () {\n        subscription.unsubscribe();\n        _this12._positionChangeSubscriptions--;\n      };\n    });\n    this.setOrigin(connectedTo);\n  }\n  /**\n   * Ordered list of preferred positions, from most to least desirable.\n   * @return {?}\n   */\n\n\n  _createClass(FlexibleConnectedPositionStrategy, [{\n    key: \"positions\",\n    get: function get() {\n      return this._preferredPositions;\n    }\n    /**\n     * Attaches this position strategy to an overlay.\n     * @param {?} overlayRef\n     * @return {?}\n     */\n\n  }, {\n    key: \"attach\",\n    value: function attach(overlayRef) {\n      var _this13 = this;\n\n      if (this._overlayRef && overlayRef !== this._overlayRef) {\n        throw Error('This position strategy is already attached to an overlay');\n      }\n\n      this._validatePositions();\n\n      overlayRef.hostElement.classList.add(boundingBoxClass);\n      this._overlayRef = overlayRef;\n      this._boundingBox = overlayRef.hostElement;\n      this._pane = overlayRef.overlayElement;\n      this._isDisposed = false;\n      this._isInitialRender = true;\n      this._lastPosition = null;\n\n      this._resizeSubscription.unsubscribe();\n\n      this._resizeSubscription = this._viewportRuler.change().subscribe(function () {\n        // When the window is resized, we want to trigger the next reposition as if it\n        // was an initial render, in order for the strategy to pick a new optimal position,\n        // otherwise position locking will cause it to stay at the old one.\n        _this13._isInitialRender = true;\n\n        _this13.apply();\n      });\n    }\n    /**\n     * Updates the position of the overlay element, using whichever preferred position relative\n     * to the origin best fits on-screen.\n     *\n     * The selection of a position goes as follows:\n     *  - If any positions fit completely within the viewport as-is,\n     *      choose the first position that does so.\n     *  - If flexible dimensions are enabled and at least one satifies the given minimum width/height,\n     *      choose the position with the greatest available size modified by the positions' weight.\n     *  - If pushing is enabled, take the position that went off-screen the least and push it\n     *      on-screen.\n     *  - If none of the previous criteria were met, use the position that goes off-screen the least.\n     * \\@docs-private\n     * @return {?}\n     */\n\n  }, {\n    key: \"apply\",\n    value: function apply() {\n      // We shouldn't do anything if the strategy was disposed or we're on the server.\n      // @breaking-change 8.0.0 Remove `_platform` null check once it's guaranteed to be defined.\n      if (this._isDisposed || this._platform && !this._platform.isBrowser) {\n        return;\n      } // If the position has been applied already (e.g. when the overlay was opened) and the\n      // consumer opted into locking in the position, re-use the old position, in order to\n      // prevent the overlay from jumping around.\n\n\n      if (!this._isInitialRender && this._positionLocked && this._lastPosition) {\n        this.reapplyLastPosition();\n        return;\n      }\n\n      this._clearPanelClasses();\n\n      this._resetOverlayElementStyles();\n\n      this._resetBoundingBoxStyles(); // We need the bounding rects for the origin and the overlay to determine how to position\n      // the overlay relative to the origin.\n      // We use the viewport rect to determine whether a position would go off-screen.\n\n\n      this._viewportRect = this._getNarrowedViewportRect();\n      this._originRect = this._origin.getBoundingClientRect();\n      this._overlayRect = this._pane.getBoundingClientRect();\n      /** @type {?} */\n\n      var originRect = this._originRect;\n      /** @type {?} */\n\n      var overlayRect = this._overlayRect;\n      /** @type {?} */\n\n      var viewportRect = this._viewportRect;\n      /** @type {?} */\n\n      var flexibleFits = [];\n      /** @type {?} */\n\n      var fallback; // Go through each of the preferred positions looking for a good fit.\n      // If a good fit is found, it will be applied immediately.\n\n      var _iterator = _createForOfIteratorHelper(this._preferredPositions),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var pos = _step.value;\n\n          /** @type {?} */\n          var originPoint = this._getOriginPoint(originRect, pos);\n          /** @type {?} */\n\n\n          var overlayPoint = this._getOverlayPoint(originPoint, overlayRect, pos);\n          /** @type {?} */\n\n\n          var overlayFit = this._getOverlayFit(overlayPoint, overlayRect, viewportRect, pos); // If the overlay, without any further work, fits into the viewport, use this position.\n\n\n          if (overlayFit.isCompletelyWithinViewport) {\n            this._isPushed = false;\n\n            this._applyPosition(pos, originPoint);\n\n            return;\n          } // If the overlay has flexible dimensions, we can use this position\n          // so long as there's enough space for the minimum dimensions.\n\n\n          if (this._canFitWithFlexibleDimensions(overlayFit, overlayPoint, viewportRect)) {\n            // Save positions where the overlay will fit with flexible dimensions. We will use these\n            // if none of the positions fit *without* flexible dimensions.\n            flexibleFits.push({\n              position: pos,\n              origin: originPoint,\n              overlayRect: overlayRect,\n              boundingBoxRect: this._calculateBoundingBoxRect(originPoint, pos)\n            });\n            continue;\n          } // If the current preferred position does not fit on the screen, remember the position\n          // if it has more visible area on-screen than we've seen and move onto the next preferred\n          // position.\n\n\n          if (!fallback || fallback.overlayFit.visibleArea < overlayFit.visibleArea) {\n            fallback = {\n              overlayFit: overlayFit,\n              overlayPoint: overlayPoint,\n              originPoint: originPoint,\n              position: pos,\n              overlayRect: overlayRect\n            };\n          }\n        } // If there are any positions where the overlay would fit with flexible dimensions, choose the\n        // one that has the greatest area available modified by the position's weight\n\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      if (flexibleFits.length) {\n        /** @type {?} */\n        var bestFit = null;\n        /** @type {?} */\n\n        var bestScore = -1;\n\n        var _iterator2 = _createForOfIteratorHelper(flexibleFits),\n            _step2;\n\n        try {\n          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n            var fit = _step2.value;\n\n            /** @type {?} */\n            var score = fit.boundingBoxRect.width * fit.boundingBoxRect.height * (fit.position.weight || 1);\n\n            if (score > bestScore) {\n              bestScore = score;\n              bestFit = fit;\n            }\n          }\n        } catch (err) {\n          _iterator2.e(err);\n        } finally {\n          _iterator2.f();\n        }\n\n        this._isPushed = false;\n\n        this._applyPosition(\n        /** @type {?} */\n        bestFit.position,\n        /** @type {?} */\n        bestFit.origin);\n\n        return;\n      } // When none of the preferred positions fit within the viewport, take the position\n      // that went off-screen the least and attempt to push it on-screen.\n\n\n      if (this._canPush) {\n        // TODO(jelbourn): after pushing, the opening \"direction\" of the overlay might not make sense.\n        this._isPushed = true;\n\n        this._applyPosition(\n        /** @type {?} */\n        fallback.position,\n        /** @type {?} */\n        fallback.originPoint);\n\n        return;\n      } // All options for getting the overlay within the viewport have been exhausted, so go with the\n      // position that went off-screen the least.\n\n\n      this._applyPosition(\n      /** @type {?} */\n      fallback.position,\n      /** @type {?} */\n      fallback.originPoint);\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"detach\",\n    value: function detach() {\n      this._clearPanelClasses();\n\n      this._lastPosition = null;\n      this._previousPushAmount = null;\n\n      this._resizeSubscription.unsubscribe();\n    }\n    /**\n     * Cleanup after the element gets destroyed.\n     * @return {?}\n     */\n\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      if (this._isDisposed) {\n        return;\n      } // We can't use `_resetBoundingBoxStyles` here, because it resets\n      // some properties to zero, rather than removing them.\n\n\n      if (this._boundingBox) {\n        extendStyles(this._boundingBox.style,\n        /** @type {?} */\n        {\n          top: '',\n          left: '',\n          right: '',\n          bottom: '',\n          height: '',\n          width: '',\n          alignItems: '',\n          justifyContent: ''\n        });\n      }\n\n      if (this._pane) {\n        this._resetOverlayElementStyles();\n      }\n\n      if (this._overlayRef) {\n        this._overlayRef.hostElement.classList.remove(boundingBoxClass);\n      }\n\n      this.detach();\n\n      this._positionChanges.complete();\n\n      this._overlayRef = this._boundingBox =\n      /** @type {?} */\n      null;\n      this._isDisposed = true;\n    }\n    /**\n     * This re-aligns the overlay element with the trigger in its last calculated position,\n     * even if a position higher in the \"preferred positions\" list would now fit. This\n     * allows one to re-align the panel without changing the orientation of the panel.\n     * @return {?}\n     */\n\n  }, {\n    key: \"reapplyLastPosition\",\n    value: function reapplyLastPosition() {\n      if (!this._isDisposed && (!this._platform || this._platform.isBrowser)) {\n        this._originRect = this._origin.getBoundingClientRect();\n        this._overlayRect = this._pane.getBoundingClientRect();\n        this._viewportRect = this._getNarrowedViewportRect();\n        /** @type {?} */\n\n        var lastPosition = this._lastPosition || this._preferredPositions[0];\n        /** @type {?} */\n\n        var originPoint = this._getOriginPoint(this._originRect, lastPosition);\n\n        this._applyPosition(lastPosition, originPoint);\n      }\n    }\n    /**\n     * Sets the list of Scrollable containers that host the origin element so that\n     * on reposition we can evaluate if it or the overlay has been clipped or outside view. Every\n     * Scrollable must be an ancestor element of the strategy's origin element.\n     * @param {?} scrollables\n     * @return {?}\n     */\n\n  }, {\n    key: \"withScrollableContainers\",\n    value: function withScrollableContainers(scrollables) {\n      this.scrollables = scrollables;\n    }\n    /**\n     * Adds new preferred positions.\n     * @param {?} positions List of positions options for this overlay.\n     * @return {?}\n     */\n\n  }, {\n    key: \"withPositions\",\n    value: function withPositions(positions) {\n      this._preferredPositions = positions; // If the last calculated position object isn't part of the positions anymore, clear\n      // it in order to avoid it being picked up if the consumer tries to re-apply.\n\n      if (positions.indexOf(\n      /** @type {?} */\n      this._lastPosition) === -1) {\n        this._lastPosition = null;\n      }\n\n      this._validatePositions();\n\n      return this;\n    }\n    /**\n     * Sets a minimum distance the overlay may be positioned to the edge of the viewport.\n     * @param {?} margin Required margin between the overlay and the viewport edge in pixels.\n     * @return {?}\n     */\n\n  }, {\n    key: \"withViewportMargin\",\n    value: function withViewportMargin(margin) {\n      this._viewportMargin = margin;\n      return this;\n    }\n    /**\n     * Sets whether the overlay's width and height can be constrained to fit within the viewport.\n     * @param {?=} flexibleDimensions\n     * @return {?}\n     */\n\n  }, {\n    key: \"withFlexibleDimensions\",\n    value: function withFlexibleDimensions() {\n      var flexibleDimensions = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n      this._hasFlexibleDimensions = flexibleDimensions;\n      return this;\n    }\n    /**\n     * Sets whether the overlay can grow after the initial open via flexible width/height.\n     * @param {?=} growAfterOpen\n     * @return {?}\n     */\n\n  }, {\n    key: \"withGrowAfterOpen\",\n    value: function withGrowAfterOpen() {\n      var growAfterOpen = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n      this._growAfterOpen = growAfterOpen;\n      return this;\n    }\n    /**\n     * Sets whether the overlay can be pushed on-screen if none of the provided positions fit.\n     * @param {?=} canPush\n     * @return {?}\n     */\n\n  }, {\n    key: \"withPush\",\n    value: function withPush() {\n      var canPush = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n      this._canPush = canPush;\n      return this;\n    }\n    /**\n     * Sets whether the overlay's position should be locked in after it is positioned\n     * initially. When an overlay is locked in, it won't attempt to reposition itself\n     * when the position is re-applied (e.g. when the user scrolls away).\n     * @param {?=} isLocked Whether the overlay should locked in.\n     * @return {?}\n     */\n\n  }, {\n    key: \"withLockedPosition\",\n    value: function withLockedPosition() {\n      var isLocked = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n      this._positionLocked = isLocked;\n      return this;\n    }\n    /**\n     * Sets the origin element, relative to which to position the overlay.\n     * @param {?} origin Reference to the new origin element.\n     * @return {?}\n     */\n\n  }, {\n    key: \"setOrigin\",\n    value: function setOrigin(origin) {\n      this._origin = origin instanceof ElementRef ? origin.nativeElement : origin;\n      return this;\n    }\n    /**\n     * Sets the default offset for the overlay's connection point on the x-axis.\n     * @param {?} offset New offset in the X axis.\n     * @return {?}\n     */\n\n  }, {\n    key: \"withDefaultOffsetX\",\n    value: function withDefaultOffsetX(offset) {\n      this._offsetX = offset;\n      return this;\n    }\n    /**\n     * Sets the default offset for the overlay's connection point on the y-axis.\n     * @param {?} offset New offset in the Y axis.\n     * @return {?}\n     */\n\n  }, {\n    key: \"withDefaultOffsetY\",\n    value: function withDefaultOffsetY(offset) {\n      this._offsetY = offset;\n      return this;\n    }\n    /**\n     * Configures that the position strategy should set a `transform-origin` on some elements\n     * inside the overlay, depending on the current position that is being applied. This is\n     * useful for the cases where the origin of an animation can change depending on the\n     * alignment of the overlay.\n     * @param {?} selector CSS selector that will be used to find the target\n     *    elements onto which to set the transform origin.\n     * @return {?}\n     */\n\n  }, {\n    key: \"withTransformOriginOn\",\n    value: function withTransformOriginOn(selector) {\n      this._transformOriginSelector = selector;\n      return this;\n    }\n    /**\n     * Gets the (x, y) coordinate of a connection point on the origin based on a relative position.\n     * @param {?} originRect\n     * @param {?} pos\n     * @return {?}\n     */\n\n  }, {\n    key: \"_getOriginPoint\",\n    value: function _getOriginPoint(originRect, pos) {\n      /** @type {?} */\n      var x;\n\n      if (pos.originX == 'center') {\n        // Note: when centering we should always use the `left`\n        // offset, otherwise the position will be wrong in RTL.\n        x = originRect.left + originRect.width / 2;\n      } else {\n        /** @type {?} */\n        var startX = this._isRtl() ? originRect.right : originRect.left;\n        /** @type {?} */\n\n        var endX = this._isRtl() ? originRect.left : originRect.right;\n        x = pos.originX == 'start' ? startX : endX;\n      }\n      /** @type {?} */\n\n\n      var y;\n\n      if (pos.originY == 'center') {\n        y = originRect.top + originRect.height / 2;\n      } else {\n        y = pos.originY == 'top' ? originRect.top : originRect.bottom;\n      }\n\n      return {\n        x: x,\n        y: y\n      };\n    }\n    /**\n     * Gets the (x, y) coordinate of the top-left corner of the overlay given a given position and\n     * origin point to which the overlay should be connected.\n     * @param {?} originPoint\n     * @param {?} overlayRect\n     * @param {?} pos\n     * @return {?}\n     */\n\n  }, {\n    key: \"_getOverlayPoint\",\n    value: function _getOverlayPoint(originPoint, overlayRect, pos) {\n      /** @type {?} */\n      var overlayStartX;\n\n      if (pos.overlayX == 'center') {\n        overlayStartX = -overlayRect.width / 2;\n      } else if (pos.overlayX === 'start') {\n        overlayStartX = this._isRtl() ? -overlayRect.width : 0;\n      } else {\n        overlayStartX = this._isRtl() ? 0 : -overlayRect.width;\n      }\n      /** @type {?} */\n\n\n      var overlayStartY;\n\n      if (pos.overlayY == 'center') {\n        overlayStartY = -overlayRect.height / 2;\n      } else {\n        overlayStartY = pos.overlayY == 'top' ? 0 : -overlayRect.height;\n      } // The (x, y) coordinates of the overlay.\n\n\n      return {\n        x: originPoint.x + overlayStartX,\n        y: originPoint.y + overlayStartY\n      };\n    }\n    /**\n     * Gets how well an overlay at the given point will fit within the viewport.\n     * @param {?} point\n     * @param {?} overlay\n     * @param {?} viewport\n     * @param {?} position\n     * @return {?}\n     */\n\n  }, {\n    key: \"_getOverlayFit\",\n    value: function _getOverlayFit(point, overlay, viewport, position) {\n      var x = point.x,\n          y = point.y;\n      /** @type {?} */\n\n      var offsetX = this._getOffset(position, 'x');\n      /** @type {?} */\n\n\n      var offsetY = this._getOffset(position, 'y'); // Account for the offsets since they could push the overlay out of the viewport.\n\n\n      if (offsetX) {\n        x += offsetX;\n      }\n\n      if (offsetY) {\n        y += offsetY;\n      }\n      /** @type {?} */\n\n\n      var leftOverflow = 0 - x;\n      /** @type {?} */\n\n      var rightOverflow = x + overlay.width - viewport.width;\n      /** @type {?} */\n\n      var topOverflow = 0 - y;\n      /** @type {?} */\n\n      var bottomOverflow = y + overlay.height - viewport.height;\n      /** @type {?} */\n\n      var visibleWidth = this._subtractOverflows(overlay.width, leftOverflow, rightOverflow);\n      /** @type {?} */\n\n\n      var visibleHeight = this._subtractOverflows(overlay.height, topOverflow, bottomOverflow);\n      /** @type {?} */\n\n\n      var visibleArea = visibleWidth * visibleHeight;\n      return {\n        visibleArea: visibleArea,\n        isCompletelyWithinViewport: overlay.width * overlay.height === visibleArea,\n        fitsInViewportVertically: visibleHeight === overlay.height,\n        fitsInViewportHorizontally: visibleWidth == overlay.width\n      };\n    }\n    /**\n     * Whether the overlay can fit within the viewport when it may resize either its width or height.\n     * @param {?} fit How well the overlay fits in the viewport at some position.\n     * @param {?} point The (x, y) coordinates of the overlat at some position.\n     * @param {?} viewport The geometry of the viewport.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_canFitWithFlexibleDimensions\",\n    value: function _canFitWithFlexibleDimensions(fit, point, viewport) {\n      if (this._hasFlexibleDimensions) {\n        /** @type {?} */\n        var availableHeight = viewport.bottom - point.y;\n        /** @type {?} */\n\n        var availableWidth = viewport.right - point.x;\n        /** @type {?} */\n\n        var minHeight = this._overlayRef.getConfig().minHeight;\n        /** @type {?} */\n\n\n        var minWidth = this._overlayRef.getConfig().minWidth;\n        /** @type {?} */\n\n\n        var verticalFit = fit.fitsInViewportVertically || minHeight != null && minHeight <= availableHeight;\n        /** @type {?} */\n\n        var horizontalFit = fit.fitsInViewportHorizontally || minWidth != null && minWidth <= availableWidth;\n        return verticalFit && horizontalFit;\n      }\n    }\n    /**\n     * Gets the point at which the overlay can be \"pushed\" on-screen. If the overlay is larger than\n     * the viewport, the top-left corner will be pushed on-screen (with overflow occuring on the\n     * right and bottom).\n     *\n     * @param {?} start Starting point from which the overlay is pushed.\n     * @param {?} overlay Dimensions of the overlay.\n     * @param {?} scrollPosition Current viewport scroll position.\n     * @return {?} The point at which to position the overlay after pushing. This is effectively a new\n     *     originPoint.\n     */\n\n  }, {\n    key: \"_pushOverlayOnScreen\",\n    value: function _pushOverlayOnScreen(start, overlay, scrollPosition) {\n      // If the position is locked and we've pushed the overlay already, reuse the previous push\n      // amount, rather than pushing it again. If we were to continue pushing, the element would\n      // remain in the viewport, which goes against the expectations when position locking is enabled.\n      if (this._previousPushAmount && this._positionLocked) {\n        return {\n          x: start.x + this._previousPushAmount.x,\n          y: start.y + this._previousPushAmount.y\n        };\n      }\n      /** @type {?} */\n\n\n      var viewport = this._viewportRect;\n      /** @type {?} */\n\n      var overflowRight = Math.max(start.x + overlay.width - viewport.right, 0);\n      /** @type {?} */\n\n      var overflowBottom = Math.max(start.y + overlay.height - viewport.bottom, 0);\n      /** @type {?} */\n\n      var overflowTop = Math.max(viewport.top - scrollPosition.top - start.y, 0);\n      /** @type {?} */\n\n      var overflowLeft = Math.max(viewport.left - scrollPosition.left - start.x, 0);\n      /** @type {?} */\n\n      var pushX = 0;\n      /** @type {?} */\n\n      var pushY = 0; // If the overlay fits completely within the bounds of the viewport, push it from whichever\n      // direction is goes off-screen. Otherwise, push the top-left corner such that its in the\n      // viewport and allow for the trailing end of the overlay to go out of bounds.\n\n      if (overlay.width < viewport.width) {\n        pushX = overflowLeft || -overflowRight;\n      } else {\n        pushX = start.x < this._viewportMargin ? viewport.left - scrollPosition.left - start.x : 0;\n      }\n\n      if (overlay.height < viewport.height) {\n        pushY = overflowTop || -overflowBottom;\n      } else {\n        pushY = start.y < this._viewportMargin ? viewport.top - scrollPosition.top - start.y : 0;\n      }\n\n      this._previousPushAmount = {\n        x: pushX,\n        y: pushY\n      };\n      return {\n        x: start.x + pushX,\n        y: start.y + pushY\n      };\n    }\n    /**\n     * Applies a computed position to the overlay and emits a position change.\n     * @param {?} position The position preference\n     * @param {?} originPoint The point on the origin element where the overlay is connected.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_applyPosition\",\n    value: function _applyPosition(position, originPoint) {\n      this._setTransformOrigin(position);\n\n      this._setOverlayElementStyles(originPoint, position);\n\n      this._setBoundingBoxStyles(originPoint, position);\n\n      if (position.panelClass) {\n        this._addPanelClasses(position.panelClass);\n      } // Save the last connected position in case the position needs to be re-calculated.\n\n\n      this._lastPosition = position; // Notify that the position has been changed along with its change properties.\n      // We only emit if we've got any subscriptions, because the scroll visibility\n      // calculcations can be somewhat expensive.\n\n      if (this._positionChangeSubscriptions > 0) {\n        /** @type {?} */\n        var scrollableViewProperties = this._getScrollVisibility();\n        /** @type {?} */\n\n\n        var changeEvent = new ConnectedOverlayPositionChange(position, scrollableViewProperties);\n\n        this._positionChanges.next(changeEvent);\n      }\n\n      this._isInitialRender = false;\n    }\n    /**\n     * Sets the transform origin based on the configured selector and the passed-in position.\n     * @param {?} position\n     * @return {?}\n     */\n\n  }, {\n    key: \"_setTransformOrigin\",\n    value: function _setTransformOrigin(position) {\n      if (!this._transformOriginSelector) {\n        return;\n      }\n      /** @type {?} */\n\n\n      var elements =\n      /** @type {?} */\n      this._boundingBox.querySelectorAll(this._transformOriginSelector);\n      /** @type {?} */\n\n\n      var xOrigin;\n      /** @type {?} */\n\n      var yOrigin = position.overlayY;\n\n      if (position.overlayX === 'center') {\n        xOrigin = 'center';\n      } else if (this._isRtl()) {\n        xOrigin = position.overlayX === 'start' ? 'right' : 'left';\n      } else {\n        xOrigin = position.overlayX === 'start' ? 'left' : 'right';\n      }\n\n      for (var i = 0; i < elements.length; i++) {\n        elements[i].style.transformOrigin = \"\".concat(xOrigin, \" \").concat(yOrigin);\n      }\n    }\n    /**\n     * Gets the position and size of the overlay's sizing container.\n     *\n     * This method does no measuring and applies no styles so that we can cheaply compute the\n     * bounds for all positions and choose the best fit based on these results.\n     * @param {?} origin\n     * @param {?} position\n     * @return {?}\n     */\n\n  }, {\n    key: \"_calculateBoundingBoxRect\",\n    value: function _calculateBoundingBoxRect(origin, position) {\n      /** @type {?} */\n      var viewport = this._viewportRect;\n      /** @type {?} */\n\n      var isRtl = this._isRtl();\n      /** @type {?} */\n\n\n      var height;\n      /** @type {?} */\n\n      var top;\n      /** @type {?} */\n\n      var bottom;\n\n      if (position.overlayY === 'top') {\n        // Overlay is opening \"downward\" and thus is bound by the bottom viewport edge.\n        top = origin.y;\n        height = viewport.bottom - origin.y;\n      } else if (position.overlayY === 'bottom') {\n        // Overlay is opening \"upward\" and thus is bound by the top viewport edge. We need to add\n        // the viewport margin back in, because the viewport rect is narrowed down to remove the\n        // margin, whereas the `origin` position is calculated based on its `ClientRect`.\n        bottom = viewport.height - origin.y + this._viewportMargin * 2;\n        height = viewport.height - bottom + this._viewportMargin;\n      } else {\n        /** @type {?} */\n        var smallestDistanceToViewportEdge = Math.min(viewport.bottom - origin.y + viewport.top, origin.y);\n        /** @type {?} */\n\n        var previousHeight = this._lastBoundingBoxSize.height;\n        height = smallestDistanceToViewportEdge * 2;\n        top = origin.y - smallestDistanceToViewportEdge;\n\n        if (height > previousHeight && !this._isInitialRender && !this._growAfterOpen) {\n          top = origin.y - previousHeight / 2;\n        }\n      }\n      /** @type {?} */\n\n\n      var isBoundedByRightViewportEdge = position.overlayX === 'start' && !isRtl || position.overlayX === 'end' && isRtl;\n      /** @type {?} */\n\n      var isBoundedByLeftViewportEdge = position.overlayX === 'end' && !isRtl || position.overlayX === 'start' && isRtl;\n      /** @type {?} */\n\n      var width;\n      /** @type {?} */\n\n      var left;\n      /** @type {?} */\n\n      var right;\n\n      if (isBoundedByLeftViewportEdge) {\n        right = viewport.right - origin.x + this._viewportMargin;\n        width = origin.x - viewport.left;\n      } else if (isBoundedByRightViewportEdge) {\n        left = origin.x;\n        width = viewport.right - origin.x;\n      } else {\n        /** @type {?} */\n        var _smallestDistanceToViewportEdge = Math.min(viewport.right - origin.x + viewport.left, origin.x);\n        /** @type {?} */\n\n\n        var previousWidth = this._lastBoundingBoxSize.width;\n        width = _smallestDistanceToViewportEdge * 2;\n        left = origin.x - _smallestDistanceToViewportEdge;\n\n        if (width > previousWidth && !this._isInitialRender && !this._growAfterOpen) {\n          left = origin.x - previousWidth / 2;\n        }\n      }\n\n      return {\n        top:\n        /** @type {?} */\n        top,\n        left:\n        /** @type {?} */\n        left,\n        bottom:\n        /** @type {?} */\n        bottom,\n        right:\n        /** @type {?} */\n        right,\n        width: width,\n        height: height\n      };\n    }\n    /**\n     * Sets the position and size of the overlay's sizing wrapper. The wrapper is positioned on the\n     * origin's connection point and stetches to the bounds of the viewport.\n     *\n     * @param {?} origin The point on the origin element where the overlay is connected.\n     * @param {?} position The position preference\n     * @return {?}\n     */\n\n  }, {\n    key: \"_setBoundingBoxStyles\",\n    value: function _setBoundingBoxStyles(origin, position) {\n      /** @type {?} */\n      var boundingBoxRect = this._calculateBoundingBoxRect(origin, position); // It's weird if the overlay *grows* while scrolling, so we take the last size into account\n      // when applying a new size.\n\n\n      if (!this._isInitialRender && !this._growAfterOpen) {\n        boundingBoxRect.height = Math.min(boundingBoxRect.height, this._lastBoundingBoxSize.height);\n        boundingBoxRect.width = Math.min(boundingBoxRect.width, this._lastBoundingBoxSize.width);\n      }\n      /** @type {?} */\n\n\n      var styles =\n      /** @type {?} */\n      {};\n\n      if (this._hasExactPosition()) {\n        styles.top = styles.left = '0';\n        styles.bottom = styles.right = '';\n        styles.width = styles.height = '100%';\n      } else {\n        /** @type {?} */\n        var maxHeight = this._overlayRef.getConfig().maxHeight;\n        /** @type {?} */\n\n\n        var maxWidth = this._overlayRef.getConfig().maxWidth;\n\n        styles.height = coerceCssPixelValue(boundingBoxRect.height);\n        styles.top = coerceCssPixelValue(boundingBoxRect.top);\n        styles.bottom = coerceCssPixelValue(boundingBoxRect.bottom);\n        styles.width = coerceCssPixelValue(boundingBoxRect.width);\n        styles.left = coerceCssPixelValue(boundingBoxRect.left);\n        styles.right = coerceCssPixelValue(boundingBoxRect.right); // Push the pane content towards the proper direction.\n\n        if (position.overlayX === 'center') {\n          styles.alignItems = 'center';\n        } else {\n          styles.alignItems = position.overlayX === 'end' ? 'flex-end' : 'flex-start';\n        }\n\n        if (position.overlayY === 'center') {\n          styles.justifyContent = 'center';\n        } else {\n          styles.justifyContent = position.overlayY === 'bottom' ? 'flex-end' : 'flex-start';\n        }\n\n        if (maxHeight) {\n          styles.maxHeight = coerceCssPixelValue(maxHeight);\n        }\n\n        if (maxWidth) {\n          styles.maxWidth = coerceCssPixelValue(maxWidth);\n        }\n      }\n\n      this._lastBoundingBoxSize = boundingBoxRect;\n      extendStyles(\n      /** @type {?} */\n      this._boundingBox.style, styles);\n    }\n    /**\n     * Resets the styles for the bounding box so that a new positioning can be computed.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_resetBoundingBoxStyles\",\n    value: function _resetBoundingBoxStyles() {\n      extendStyles(\n      /** @type {?} */\n      this._boundingBox.style,\n      /** @type {?} */\n      {\n        top: '0',\n        left: '0',\n        right: '0',\n        bottom: '0',\n        height: '',\n        width: '',\n        alignItems: '',\n        justifyContent: ''\n      });\n    }\n    /**\n     * Resets the styles for the overlay pane so that a new positioning can be computed.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_resetOverlayElementStyles\",\n    value: function _resetOverlayElementStyles() {\n      extendStyles(this._pane.style,\n      /** @type {?} */\n      {\n        top: '',\n        left: '',\n        bottom: '',\n        right: '',\n        position: ''\n      });\n    }\n    /**\n     * Sets positioning styles to the overlay element.\n     * @param {?} originPoint\n     * @param {?} position\n     * @return {?}\n     */\n\n  }, {\n    key: \"_setOverlayElementStyles\",\n    value: function _setOverlayElementStyles(originPoint, position) {\n      /** @type {?} */\n      var styles =\n      /** @type {?} */\n      {};\n\n      if (this._hasExactPosition()) {\n        /** @type {?} */\n        var scrollPosition = this._viewportRuler.getViewportScrollPosition();\n\n        extendStyles(styles, this._getExactOverlayY(position, originPoint, scrollPosition));\n        extendStyles(styles, this._getExactOverlayX(position, originPoint, scrollPosition));\n      } else {\n        styles.position = 'static';\n      }\n      /** @type {?} */\n\n\n      var transformString = '';\n      /** @type {?} */\n\n      var offsetX = this._getOffset(position, 'x');\n      /** @type {?} */\n\n\n      var offsetY = this._getOffset(position, 'y');\n\n      if (offsetX) {\n        transformString += \"translateX(\".concat(offsetX, \"px) \");\n      }\n\n      if (offsetY) {\n        transformString += \"translateY(\".concat(offsetY, \"px)\");\n      }\n\n      styles.transform = transformString.trim(); // If a maxWidth or maxHeight is specified on the overlay, we remove them. We do this because\n      // we need these values to both be set to \"100%\" for the automatic flexible sizing to work.\n      // The maxHeight and maxWidth are set on the boundingBox in order to enforce the constraint.\n\n      if (this._hasFlexibleDimensions && this._overlayRef.getConfig().maxHeight) {\n        styles.maxHeight = '';\n      }\n\n      if (this._hasFlexibleDimensions && this._overlayRef.getConfig().maxWidth) {\n        styles.maxWidth = '';\n      }\n\n      extendStyles(this._pane.style, styles);\n    }\n    /**\n     * Gets the exact top/bottom for the overlay when not using flexible sizing or when pushing.\n     * @param {?} position\n     * @param {?} originPoint\n     * @param {?} scrollPosition\n     * @return {?}\n     */\n\n  }, {\n    key: \"_getExactOverlayY\",\n    value: function _getExactOverlayY(position, originPoint, scrollPosition) {\n      /** @type {?} */\n      var styles =\n      /** @type {?} */\n      {\n        top: null,\n        bottom: null\n      };\n      /** @type {?} */\n\n      var overlayPoint = this._getOverlayPoint(originPoint, this._overlayRect, position);\n\n      if (this._isPushed) {\n        overlayPoint = this._pushOverlayOnScreen(overlayPoint, this._overlayRect, scrollPosition);\n      }\n      /** @type {?} */\n\n\n      var virtualKeyboardOffset = this._overlayContainer ? this._overlayContainer.getContainerElement().getBoundingClientRect().top : 0; // Normally this would be zero, however when the overlay is attached to an input (e.g. in an\n      // autocomplete), mobile browsers will shift everything in order to put the input in the middle\n      // of the screen and to make space for the virtual keyboard. We need to account for this offset,\n      // otherwise our positioning will be thrown off.\n\n      overlayPoint.y -= virtualKeyboardOffset; // We want to set either `top` or `bottom` based on whether the overlay wants to appear\n      // above or below the origin and the direction in which the element will expand.\n\n      if (position.overlayY === 'bottom') {\n        /** @type {?} */\n        var documentHeight =\n        /** @type {?} */\n        this._document.documentElement.clientHeight;\n        styles.bottom = \"\".concat(documentHeight - (overlayPoint.y + this._overlayRect.height), \"px\");\n      } else {\n        styles.top = coerceCssPixelValue(overlayPoint.y);\n      }\n\n      return styles;\n    }\n    /**\n     * Gets the exact left/right for the overlay when not using flexible sizing or when pushing.\n     * @param {?} position\n     * @param {?} originPoint\n     * @param {?} scrollPosition\n     * @return {?}\n     */\n\n  }, {\n    key: \"_getExactOverlayX\",\n    value: function _getExactOverlayX(position, originPoint, scrollPosition) {\n      /** @type {?} */\n      var styles =\n      /** @type {?} */\n      {\n        left: null,\n        right: null\n      };\n      /** @type {?} */\n\n      var overlayPoint = this._getOverlayPoint(originPoint, this._overlayRect, position);\n\n      if (this._isPushed) {\n        overlayPoint = this._pushOverlayOnScreen(overlayPoint, this._overlayRect, scrollPosition);\n      }\n      /** @type {?} */\n\n\n      var horizontalStyleProperty;\n\n      if (this._isRtl()) {\n        horizontalStyleProperty = position.overlayX === 'end' ? 'left' : 'right';\n      } else {\n        horizontalStyleProperty = position.overlayX === 'end' ? 'right' : 'left';\n      } // When we're setting `right`, we adjust the x position such that it is the distance\n      // from the right edge of the viewport rather than the left edge.\n\n\n      if (horizontalStyleProperty === 'right') {\n        /** @type {?} */\n        var documentWidth =\n        /** @type {?} */\n        this._document.documentElement.clientWidth;\n        styles.right = \"\".concat(documentWidth - (overlayPoint.x + this._overlayRect.width), \"px\");\n      } else {\n        styles.left = coerceCssPixelValue(overlayPoint.x);\n      }\n\n      return styles;\n    }\n    /**\n     * Gets the view properties of the trigger and overlay, including whether they are clipped\n     * or completely outside the view of any of the strategy's scrollables.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_getScrollVisibility\",\n    value: function _getScrollVisibility() {\n      /** @type {?} */\n      var originBounds = this._origin.getBoundingClientRect();\n      /** @type {?} */\n\n\n      var overlayBounds = this._pane.getBoundingClientRect();\n      /** @type {?} */\n\n\n      var scrollContainerBounds = this.scrollables.map(function (scrollable) {\n        return scrollable.getElementRef().nativeElement.getBoundingClientRect();\n      });\n      return {\n        isOriginClipped: isElementClippedByScrolling(originBounds, scrollContainerBounds),\n        isOriginOutsideView: isElementScrolledOutsideView(originBounds, scrollContainerBounds),\n        isOverlayClipped: isElementClippedByScrolling(overlayBounds, scrollContainerBounds),\n        isOverlayOutsideView: isElementScrolledOutsideView(overlayBounds, scrollContainerBounds)\n      };\n    }\n    /**\n     * Subtracts the amount that an element is overflowing on an axis from it's length.\n     * @param {?} length\n     * @param {...?} overflows\n     * @return {?}\n     */\n\n  }, {\n    key: \"_subtractOverflows\",\n    value: function _subtractOverflows(length) {\n      for (var _len = arguments.length, overflows = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        overflows[_key - 1] = arguments[_key];\n      }\n\n      return overflows.reduce(function (currentValue, currentOverflow) {\n        return currentValue - Math.max(currentOverflow, 0);\n      }, length);\n    }\n    /**\n     * Narrows the given viewport rect by the current _viewportMargin.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_getNarrowedViewportRect\",\n    value: function _getNarrowedViewportRect() {\n      /** @type {?} */\n      var width =\n      /** @type {?} */\n      this._document.documentElement.clientWidth;\n      /** @type {?} */\n\n      var height =\n      /** @type {?} */\n      this._document.documentElement.clientHeight;\n      /** @type {?} */\n\n      var scrollPosition = this._viewportRuler.getViewportScrollPosition();\n\n      return {\n        top: scrollPosition.top + this._viewportMargin,\n        left: scrollPosition.left + this._viewportMargin,\n        right: scrollPosition.left + width - this._viewportMargin,\n        bottom: scrollPosition.top + height - this._viewportMargin,\n        width: width - 2 * this._viewportMargin,\n        height: height - 2 * this._viewportMargin\n      };\n    }\n    /**\n     * Whether the we're dealing with an RTL context\n     * @return {?}\n     */\n\n  }, {\n    key: \"_isRtl\",\n    value: function _isRtl() {\n      return this._overlayRef.getDirection() === 'rtl';\n    }\n    /**\n     * Determines whether the overlay uses exact or flexible positioning.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_hasExactPosition\",\n    value: function _hasExactPosition() {\n      return !this._hasFlexibleDimensions || this._isPushed;\n    }\n    /**\n     * Retrieves the offset of a position along the x or y axis.\n     * @param {?} position\n     * @param {?} axis\n     * @return {?}\n     */\n\n  }, {\n    key: \"_getOffset\",\n    value: function _getOffset(position, axis) {\n      if (axis === 'x') {\n        // We don't do something like `position['offset' + axis]` in\n        // order to avoid breking minifiers that rename properties.\n        return position.offsetX == null ? this._offsetX : position.offsetX;\n      }\n\n      return position.offsetY == null ? this._offsetY : position.offsetY;\n    }\n    /**\n     * Validates that the current position match the expected values.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_validatePositions\",\n    value: function _validatePositions() {\n      if (!this._preferredPositions.length) {\n        throw Error('FlexibleConnectedPositionStrategy: At least one position is required.');\n      } // TODO(crisbeto): remove these once Angular's template type\n      // checking is advanced enough to catch these cases.\n\n\n      this._preferredPositions.forEach(function (pair) {\n        validateHorizontalPosition('originX', pair.originX);\n        validateVerticalPosition('originY', pair.originY);\n        validateHorizontalPosition('overlayX', pair.overlayX);\n        validateVerticalPosition('overlayY', pair.overlayY);\n      });\n    }\n    /**\n     * Adds a single CSS class or an array of classes on the overlay panel.\n     * @param {?} cssClasses\n     * @return {?}\n     */\n\n  }, {\n    key: \"_addPanelClasses\",\n    value: function _addPanelClasses(cssClasses) {\n      var _this14 = this;\n\n      if (this._pane) {\n        coerceArray(cssClasses).forEach(function (cssClass) {\n          if (_this14._appliedPanelClasses.indexOf(cssClass) === -1) {\n            _this14._appliedPanelClasses.push(cssClass);\n\n            _this14._pane.classList.add(cssClass);\n          }\n        });\n      }\n    }\n    /**\n     * Clears the classes that the position strategy has applied from the overlay panel.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_clearPanelClasses\",\n    value: function _clearPanelClasses() {\n      var _this15 = this;\n\n      if (this._pane) {\n        this._appliedPanelClasses.forEach(function (cssClass) {\n          return _this15._pane.classList.remove(cssClass);\n        });\n\n        this._appliedPanelClasses = [];\n      }\n    }\n  }]);\n\n  return FlexibleConnectedPositionStrategy;\n}();\n/**\n * Shallow-extends a stylesheet object with another stylesheet object.\n * @param {?} dest\n * @param {?} source\n * @return {?}\n */\n\n\nfunction extendStyles(dest, source) {\n  for (var key in source) {\n    if (source.hasOwnProperty(key)) {\n      dest[key] = source[key];\n    }\n  }\n\n  return dest;\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * A strategy for positioning overlays. Using this strategy, an overlay is given an\n * implicit position relative to some origin element. The relative position is defined in terms of\n * a point on the origin element that is connected to a point on the overlay element. For example,\n * a basic dropdown is connecting the bottom-left corner of the origin to the top-left corner\n * of the overlay.\n * @deprecated Use `FlexibleConnectedPositionStrategy` instead.\n * \\@breaking-change 8.0.0\n */\n\n\nvar ConnectedPositionStrategy = /*#__PURE__*/function () {\n  /**\n   * @param {?} originPos\n   * @param {?} overlayPos\n   * @param {?} connectedTo\n   * @param {?} viewportRuler\n   * @param {?} document\n   * @param {?=} platform\n   */\n  function ConnectedPositionStrategy(originPos, overlayPos, connectedTo, viewportRuler, document, // @breaking-change 8.0.0 `platform` parameter to be made required.\n  platform) {\n    _classCallCheck(this, ConnectedPositionStrategy);\n\n    /**\n     * Ordered list of preferred positions, from most to least desirable.\n     */\n    this._preferredPositions = []; // Since the `ConnectedPositionStrategy` is deprecated and we don't want to maintain\n    // the extra logic, we create an instance of the positioning strategy that has some\n    // defaults that make it behave as the old position strategy and to which we'll\n    // proxy all of the API calls.\n\n    this._positionStrategy = new FlexibleConnectedPositionStrategy(connectedTo, viewportRuler, document, platform).withFlexibleDimensions(false).withPush(false).withViewportMargin(0);\n    this.withFallbackPosition(originPos, overlayPos);\n  }\n  /**\n   * Whether the we're dealing with an RTL context\n   * @return {?}\n   */\n\n\n  _createClass(ConnectedPositionStrategy, [{\n    key: \"_isRtl\",\n    get: function get() {\n      return this._overlayRef.getDirection() === 'rtl';\n    }\n    /**\n     * Emits an event when the connection point changes.\n     * @return {?}\n     */\n\n  }, {\n    key: \"onPositionChange\",\n    get: function get() {\n      return this._positionStrategy.positionChanges;\n    }\n    /**\n     * Ordered list of preferred positions, from most to least desirable.\n     * @return {?}\n     */\n\n  }, {\n    key: \"positions\",\n    get: function get() {\n      return this._preferredPositions;\n    }\n    /**\n     * Attach this position strategy to an overlay.\n     * @param {?} overlayRef\n     * @return {?}\n     */\n\n  }, {\n    key: \"attach\",\n    value: function attach(overlayRef) {\n      this._overlayRef = overlayRef;\n\n      this._positionStrategy.attach(overlayRef);\n\n      if (this._direction) {\n        overlayRef.setDirection(this._direction);\n        this._direction = null;\n      }\n    }\n    /**\n     * Disposes all resources used by the position strategy.\n     * @return {?}\n     */\n\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      this._positionStrategy.dispose();\n    }\n    /**\n     * \\@docs-private\n     * @return {?}\n     */\n\n  }, {\n    key: \"detach\",\n    value: function detach() {\n      this._positionStrategy.detach();\n    }\n    /**\n     * Updates the position of the overlay element, using whichever preferred position relative\n     * to the origin fits on-screen.\n     * \\@docs-private\n     * @return {?}\n     */\n\n  }, {\n    key: \"apply\",\n    value: function apply() {\n      this._positionStrategy.apply();\n    }\n    /**\n     * Re-positions the overlay element with the trigger in its last calculated position,\n     * even if a position higher in the \"preferred positions\" list would now fit. This\n     * allows one to re-align the panel without changing the orientation of the panel.\n     * @return {?}\n     */\n\n  }, {\n    key: \"recalculateLastPosition\",\n    value: function recalculateLastPosition() {\n      this._positionStrategy.reapplyLastPosition();\n    }\n    /**\n     * Sets the list of Scrollable containers that host the origin element so that\n     * on reposition we can evaluate if it or the overlay has been clipped or outside view. Every\n     * Scrollable must be an ancestor element of the strategy's origin element.\n     * @param {?} scrollables\n     * @return {?}\n     */\n\n  }, {\n    key: \"withScrollableContainers\",\n    value: function withScrollableContainers(scrollables) {\n      this._positionStrategy.withScrollableContainers(scrollables);\n    }\n    /**\n     * Adds a new preferred fallback position.\n     * @param {?} originPos\n     * @param {?} overlayPos\n     * @param {?=} offsetX\n     * @param {?=} offsetY\n     * @return {?}\n     */\n\n  }, {\n    key: \"withFallbackPosition\",\n    value: function withFallbackPosition(originPos, overlayPos, offsetX, offsetY) {\n      /** @type {?} */\n      var position = new ConnectionPositionPair(originPos, overlayPos, offsetX, offsetY);\n\n      this._preferredPositions.push(position);\n\n      this._positionStrategy.withPositions(this._preferredPositions);\n\n      return this;\n    }\n    /**\n     * Sets the layout direction so the overlay's position can be adjusted to match.\n     * @param {?} dir New layout direction.\n     * @return {?}\n     */\n\n  }, {\n    key: \"withDirection\",\n    value: function withDirection(dir) {\n      // Since the direction might be declared before the strategy is attached,\n      // we save the value in a temporary property and we'll transfer it to the\n      // overlay ref on attachment.\n      if (this._overlayRef) {\n        this._overlayRef.setDirection(dir);\n      } else {\n        this._direction = dir;\n      }\n\n      return this;\n    }\n    /**\n     * Sets an offset for the overlay's connection point on the x-axis\n     * @param {?} offset New offset in the X axis.\n     * @return {?}\n     */\n\n  }, {\n    key: \"withOffsetX\",\n    value: function withOffsetX(offset) {\n      this._positionStrategy.withDefaultOffsetX(offset);\n\n      return this;\n    }\n    /**\n     * Sets an offset for the overlay's connection point on the y-axis\n     * @param {?} offset New offset in the Y axis.\n     * @return {?}\n     */\n\n  }, {\n    key: \"withOffsetY\",\n    value: function withOffsetY(offset) {\n      this._positionStrategy.withDefaultOffsetY(offset);\n\n      return this;\n    }\n    /**\n     * Sets whether the overlay's position should be locked in after it is positioned\n     * initially. When an overlay is locked in, it won't attempt to reposition itself\n     * when the position is re-applied (e.g. when the user scrolls away).\n     * @param {?} isLocked Whether the overlay should locked in.\n     * @return {?}\n     */\n\n  }, {\n    key: \"withLockedPosition\",\n    value: function withLockedPosition(isLocked) {\n      this._positionStrategy.withLockedPosition(isLocked);\n\n      return this;\n    }\n    /**\n     * Overwrites the current set of positions with an array of new ones.\n     * @param {?} positions Position pairs to be set on the strategy.\n     * @return {?}\n     */\n\n  }, {\n    key: \"withPositions\",\n    value: function withPositions(positions) {\n      this._preferredPositions = positions.slice();\n\n      this._positionStrategy.withPositions(this._preferredPositions);\n\n      return this;\n    }\n    /**\n     * Sets the origin element, relative to which to position the overlay.\n     * @param {?} origin Reference to the new origin element.\n     * @return {?}\n     */\n\n  }, {\n    key: \"setOrigin\",\n    value: function setOrigin(origin) {\n      this._positionStrategy.setOrigin(origin);\n\n      return this;\n    }\n  }]);\n\n  return ConnectedPositionStrategy;\n}();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/** *\n * Class to be added to the overlay pane wrapper.\n  @type {?} */\n\n\nvar wrapperClass = 'cdk-global-overlay-wrapper';\n/**\n * A strategy for positioning overlays. Using this strategy, an overlay is given an\n * explicit position relative to the browser's viewport. We use flexbox, instead of\n * transforms, in order to avoid issues with subpixel rendering which can cause the\n * element to become blurry.\n */\n\nvar GlobalPositionStrategy = /*#__PURE__*/function () {\n  function GlobalPositionStrategy() {\n    _classCallCheck(this, GlobalPositionStrategy);\n\n    this._cssPosition = 'static';\n    this._topOffset = '';\n    this._bottomOffset = '';\n    this._leftOffset = '';\n    this._rightOffset = '';\n    this._alignItems = '';\n    this._justifyContent = '';\n    this._width = '';\n    this._height = '';\n  }\n  /**\n   * @param {?} overlayRef\n   * @return {?}\n   */\n\n\n  _createClass(GlobalPositionStrategy, [{\n    key: \"attach\",\n    value: function attach(overlayRef) {\n      /** @type {?} */\n      var config = overlayRef.getConfig();\n      this._overlayRef = overlayRef;\n\n      if (this._width && !config.width) {\n        overlayRef.updateSize({\n          width: this._width\n        });\n      }\n\n      if (this._height && !config.height) {\n        overlayRef.updateSize({\n          height: this._height\n        });\n      }\n\n      overlayRef.hostElement.classList.add(wrapperClass);\n      this._isDisposed = false;\n    }\n    /**\n     * Sets the top position of the overlay. Clears any previously set vertical position.\n     * @param {?=} value New top offset.\n     * @return {?}\n     */\n\n  }, {\n    key: \"top\",\n    value: function top() {\n      var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n      this._bottomOffset = '';\n      this._topOffset = value;\n      this._alignItems = 'flex-start';\n      return this;\n    }\n    /**\n     * Sets the left position of the overlay. Clears any previously set horizontal position.\n     * @param {?=} value New left offset.\n     * @return {?}\n     */\n\n  }, {\n    key: \"left\",\n    value: function left() {\n      var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n      this._rightOffset = '';\n      this._leftOffset = value;\n      this._justifyContent = 'flex-start';\n      return this;\n    }\n    /**\n     * Sets the bottom position of the overlay. Clears any previously set vertical position.\n     * @param {?=} value New bottom offset.\n     * @return {?}\n     */\n\n  }, {\n    key: \"bottom\",\n    value: function bottom() {\n      var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n      this._topOffset = '';\n      this._bottomOffset = value;\n      this._alignItems = 'flex-end';\n      return this;\n    }\n    /**\n     * Sets the right position of the overlay. Clears any previously set horizontal position.\n     * @param {?=} value New right offset.\n     * @return {?}\n     */\n\n  }, {\n    key: \"right\",\n    value: function right() {\n      var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n      this._leftOffset = '';\n      this._rightOffset = value;\n      this._justifyContent = 'flex-end';\n      return this;\n    }\n    /**\n     * Sets the overlay width and clears any previously set width.\n     * @deprecated Pass the `width` through the `OverlayConfig`.\n     * \\@breaking-change 8.0.0\n     * @param {?=} value New width for the overlay\n     * @return {?}\n     */\n\n  }, {\n    key: \"width\",\n    value: function width() {\n      var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n\n      if (this._overlayRef) {\n        this._overlayRef.updateSize({\n          width: value\n        });\n      } else {\n        this._width = value;\n      }\n\n      return this;\n    }\n    /**\n     * Sets the overlay height and clears any previously set height.\n     * @deprecated Pass the `height` through the `OverlayConfig`.\n     * \\@breaking-change 8.0.0\n     * @param {?=} value New height for the overlay\n     * @return {?}\n     */\n\n  }, {\n    key: \"height\",\n    value: function height() {\n      var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n\n      if (this._overlayRef) {\n        this._overlayRef.updateSize({\n          height: value\n        });\n      } else {\n        this._height = value;\n      }\n\n      return this;\n    }\n    /**\n     * Centers the overlay horizontally with an optional offset.\n     * Clears any previously set horizontal position.\n     *\n     * @param {?=} offset Overlay offset from the horizontal center.\n     * @return {?}\n     */\n\n  }, {\n    key: \"centerHorizontally\",\n    value: function centerHorizontally() {\n      var offset = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n      this.left(offset);\n      this._justifyContent = 'center';\n      return this;\n    }\n    /**\n     * Centers the overlay vertically with an optional offset.\n     * Clears any previously set vertical position.\n     *\n     * @param {?=} offset Overlay offset from the vertical center.\n     * @return {?}\n     */\n\n  }, {\n    key: \"centerVertically\",\n    value: function centerVertically() {\n      var offset = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n      this.top(offset);\n      this._alignItems = 'center';\n      return this;\n    }\n    /**\n     * Apply the position to the element.\n     * \\@docs-private\n     * @return {?}\n     */\n\n  }, {\n    key: \"apply\",\n    value: function apply() {\n      // Since the overlay ref applies the strategy asynchronously, it could\n      // have been disposed before it ends up being applied. If that is the\n      // case, we shouldn't do anything.\n      if (!this._overlayRef || !this._overlayRef.hasAttached()) {\n        return;\n      }\n      /** @type {?} */\n\n\n      var styles = this._overlayRef.overlayElement.style;\n      /** @type {?} */\n\n      var parentStyles = this._overlayRef.hostElement.style;\n      /** @type {?} */\n\n      var config = this._overlayRef.getConfig();\n\n      styles.position = this._cssPosition;\n      styles.marginLeft = config.width === '100%' ? '0' : this._leftOffset;\n      styles.marginTop = config.height === '100%' ? '0' : this._topOffset;\n      styles.marginBottom = this._bottomOffset;\n      styles.marginRight = this._rightOffset;\n\n      if (config.width === '100%') {\n        parentStyles.justifyContent = 'flex-start';\n      } else if (this._justifyContent === 'center') {\n        parentStyles.justifyContent = 'center';\n      } else if (this._overlayRef.getConfig().direction === 'rtl') {\n        // In RTL the browser will invert `flex-start` and `flex-end` automatically, but we\n        // don't want that because our positioning is explicitly `left` and `right`, hence\n        // why we do another inversion to ensure that the overlay stays in the same position.\n        // TODO: reconsider this if we add `start` and `end` methods.\n        if (this._justifyContent === 'flex-start') {\n          parentStyles.justifyContent = 'flex-end';\n        } else if (this._justifyContent === 'flex-end') {\n          parentStyles.justifyContent = 'flex-start';\n        }\n      } else {\n        parentStyles.justifyContent = this._justifyContent;\n      }\n\n      parentStyles.alignItems = config.height === '100%' ? 'flex-start' : this._alignItems;\n    }\n    /**\n     * Cleans up the DOM changes from the position strategy.\n     * \\@docs-private\n     * @return {?}\n     */\n\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      if (this._isDisposed || !this._overlayRef) {\n        return;\n      }\n      /** @type {?} */\n\n\n      var styles = this._overlayRef.overlayElement.style;\n      /** @type {?} */\n\n      var parent = this._overlayRef.hostElement;\n      /** @type {?} */\n\n      var parentStyles = parent.style;\n      parent.classList.remove(wrapperClass);\n      parentStyles.justifyContent = parentStyles.alignItems = styles.marginTop = styles.marginBottom = styles.marginLeft = styles.marginRight = styles.position = '';\n      this._overlayRef =\n      /** @type {?} */\n      null;\n      this._isDisposed = true;\n    }\n  }]);\n\n  return GlobalPositionStrategy;\n}();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * Builder for overlay position strategy.\n */\n\n\nvar OverlayPositionBuilder = /*#__PURE__*/function () {\n  /**\n   * @param {?} _viewportRuler\n   * @param {?} _document\n   * @param {?=} _platform\n   * @param {?=} _overlayContainer\n   */\n  function OverlayPositionBuilder(_viewportRuler, _document, // @breaking-change 8.0.0 `_platform` and `_overlayContainer` parameters to be made required.\n  _platform, _overlayContainer) {\n    _classCallCheck(this, OverlayPositionBuilder);\n\n    this._viewportRuler = _viewportRuler;\n    this._document = _document;\n    this._platform = _platform;\n    this._overlayContainer = _overlayContainer;\n  }\n  /**\n   * Creates a global position strategy.\n   * @return {?}\n   */\n\n\n  _createClass(OverlayPositionBuilder, [{\n    key: \"global\",\n    value: function global() {\n      return new GlobalPositionStrategy();\n    }\n    /**\n     * Creates a relative position strategy.\n     * @deprecated Use `flexibleConnectedTo` instead.\n     * \\@breaking-change 8.0.0\n     * @param {?} elementRef\n     * @param {?} originPos\n     * @param {?} overlayPos\n     * @return {?}\n     */\n\n  }, {\n    key: \"connectedTo\",\n    value: function connectedTo(elementRef, originPos, overlayPos) {\n      return new ConnectedPositionStrategy(originPos, overlayPos, elementRef, this._viewportRuler, this._document);\n    }\n    /**\n     * Creates a flexible position strategy.\n     * @param {?} elementRef\n     * @return {?}\n     */\n\n  }, {\n    key: \"flexibleConnectedTo\",\n    value: function flexibleConnectedTo(elementRef) {\n      return new FlexibleConnectedPositionStrategy(elementRef, this._viewportRuler, this._document, this._platform, this._overlayContainer);\n    }\n  }]);\n\n  return OverlayPositionBuilder;\n}();\n\nOverlayPositionBuilder.ɵfac = function OverlayPositionBuilder_Factory(t) {\n  return new (t || OverlayPositionBuilder)(ɵngcc0.ɵɵinject(ɵngcc1.ViewportRuler), ɵngcc0.ɵɵinject(DOCUMENT), ɵngcc0.ɵɵinject(ɵngcc2.Platform, 8), ɵngcc0.ɵɵinject(OverlayContainer, 8));\n};\n\nOverlayPositionBuilder.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n  token: OverlayPositionBuilder,\n  factory: OverlayPositionBuilder.ɵfac,\n  providedIn: 'root'\n});\n/** @nocollapse */\n\nOverlayPositionBuilder.ctorParameters = function () {\n  return [{\n    type: ViewportRuler\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Inject,\n      args: [DOCUMENT]\n    }]\n  }, {\n    type: Platform,\n    decorators: [{\n      type: Optional\n    }]\n  }, {\n    type: OverlayContainer,\n    decorators: [{\n      type: Optional\n    }]\n  }];\n};\n/** @nocollapse */\n\n\nOverlayPositionBuilder.ngInjectableDef = defineInjectable({\n  factory: function OverlayPositionBuilder_Factory() {\n    return new OverlayPositionBuilder(inject(ViewportRuler), inject(DOCUMENT), inject(Platform, 8), inject(OverlayContainer, 8));\n  },\n  token: OverlayPositionBuilder,\n  providedIn: \"root\"\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(OverlayPositionBuilder, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc1.ViewportRuler\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }, {\n      type: ɵngcc2.Platform,\n      decorators: [{\n        type: Optional\n      }]\n    }, {\n      type: OverlayContainer,\n      decorators: [{\n        type: Optional\n      }]\n    }];\n  }, null);\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/** *\n * Next overlay unique ID.\n  @type {?} */\n\n\nvar nextUniqueId = 0;\n/**\n * Service to create Overlays. Overlays are dynamically added pieces of floating UI, meant to be\n * used as a low-level building block for other components. Dialogs, tooltips, menus,\n * selects, etc. can all be built using overlays. The service should primarily be used by authors\n * of re-usable components rather than developers building end-user applications.\n *\n * An overlay *is* a PortalOutlet, so any kind of Portal can be loaded into one.\n */\n\nvar Overlay = /*#__PURE__*/function () {\n  /**\n   * @param {?} scrollStrategies\n   * @param {?} _overlayContainer\n   * @param {?} _componentFactoryResolver\n   * @param {?} _positionBuilder\n   * @param {?} _keyboardDispatcher\n   * @param {?} _injector\n   * @param {?} _ngZone\n   * @param {?} _document\n   * @param {?} _directionality\n   * @param {?=} _location\n   */\n  function Overlay(scrollStrategies, _overlayContainer, _componentFactoryResolver, _positionBuilder, _keyboardDispatcher, _injector, _ngZone, _document, _directionality, // @breaking-change 8.0.0 `_location` parameter to be made required.\n  _location) {\n    _classCallCheck(this, Overlay);\n\n    this.scrollStrategies = scrollStrategies;\n    this._overlayContainer = _overlayContainer;\n    this._componentFactoryResolver = _componentFactoryResolver;\n    this._positionBuilder = _positionBuilder;\n    this._keyboardDispatcher = _keyboardDispatcher;\n    this._injector = _injector;\n    this._ngZone = _ngZone;\n    this._document = _document;\n    this._directionality = _directionality;\n    this._location = _location;\n  }\n  /**\n   * Creates an overlay.\n   * @param {?=} config Configuration applied to the overlay.\n   * @return {?} Reference to the created overlay.\n   */\n\n\n  _createClass(Overlay, [{\n    key: \"create\",\n    value: function create(config) {\n      /** @type {?} */\n      var host = this._createHostElement();\n      /** @type {?} */\n\n\n      var pane = this._createPaneElement(host);\n      /** @type {?} */\n\n\n      var portalOutlet = this._createPortalOutlet(pane);\n      /** @type {?} */\n\n\n      var overlayConfig = new OverlayConfig(config);\n      overlayConfig.direction = overlayConfig.direction || this._directionality.value;\n      return new OverlayRef(portalOutlet, host, pane, overlayConfig, this._ngZone, this._keyboardDispatcher, this._document, this._location);\n    }\n    /**\n     * Gets a position builder that can be used, via fluent API,\n     * to construct and configure a position strategy.\n     * @return {?} An overlay position builder.\n     */\n\n  }, {\n    key: \"position\",\n    value: function position() {\n      return this._positionBuilder;\n    }\n    /**\n     * Creates the DOM element for an overlay and appends it to the overlay container.\n     * @param {?} host\n     * @return {?} Newly-created pane element\n     */\n\n  }, {\n    key: \"_createPaneElement\",\n    value: function _createPaneElement(host) {\n      /** @type {?} */\n      var pane = this._document.createElement('div');\n\n      pane.id = \"cdk-overlay-\".concat(nextUniqueId++);\n      pane.classList.add('cdk-overlay-pane');\n      host.appendChild(pane);\n      return pane;\n    }\n    /**\n     * Creates the host element that wraps around an overlay\n     * and can be used for advanced positioning.\n     * @return {?} Newly-create host element.\n     */\n\n  }, {\n    key: \"_createHostElement\",\n    value: function _createHostElement() {\n      /** @type {?} */\n      var host = this._document.createElement('div');\n\n      this._overlayContainer.getContainerElement().appendChild(host);\n\n      return host;\n    }\n    /**\n     * Create a DomPortalOutlet into which the overlay content can be loaded.\n     * @param {?} pane The DOM element to turn into a portal outlet.\n     * @return {?} A portal outlet for the given DOM element.\n     */\n\n  }, {\n    key: \"_createPortalOutlet\",\n    value: function _createPortalOutlet(pane) {\n      // We have to resolve the ApplicationRef later in order to allow people\n      // to use overlay-based providers during app initialization.\n      if (!this._appRef) {\n        this._appRef = this._injector.get(ApplicationRef);\n      }\n\n      return new DomPortalOutlet(pane, this._componentFactoryResolver, this._appRef, this._injector);\n    }\n  }]);\n\n  return Overlay;\n}();\n\nOverlay.ɵfac = function Overlay_Factory(t) {\n  return new (t || Overlay)(ɵngcc0.ɵɵinject(ScrollStrategyOptions), ɵngcc0.ɵɵinject(OverlayContainer), ɵngcc0.ɵɵinject(ɵngcc0.ComponentFactoryResolver), ɵngcc0.ɵɵinject(OverlayPositionBuilder), ɵngcc0.ɵɵinject(OverlayKeyboardDispatcher), ɵngcc0.ɵɵinject(ɵngcc0.Injector), ɵngcc0.ɵɵinject(ɵngcc0.NgZone), ɵngcc0.ɵɵinject(DOCUMENT), ɵngcc0.ɵɵinject(ɵngcc3.Directionality), ɵngcc0.ɵɵinject(ɵngcc4.Location, 8));\n};\n\nOverlay.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n  token: Overlay,\n  factory: Overlay.ɵfac\n});\n/** @nocollapse */\n\nOverlay.ctorParameters = function () {\n  return [{\n    type: ScrollStrategyOptions\n  }, {\n    type: OverlayContainer\n  }, {\n    type: ComponentFactoryResolver\n  }, {\n    type: OverlayPositionBuilder\n  }, {\n    type: OverlayKeyboardDispatcher\n  }, {\n    type: Injector\n  }, {\n    type: NgZone\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Inject,\n      args: [DOCUMENT]\n    }]\n  }, {\n    type: Directionality\n  }, {\n    type: Location,\n    decorators: [{\n      type: Optional\n    }]\n  }];\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(Overlay, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: ScrollStrategyOptions\n    }, {\n      type: OverlayContainer\n    }, {\n      type: ɵngcc0.ComponentFactoryResolver\n    }, {\n      type: OverlayPositionBuilder\n    }, {\n      type: OverlayKeyboardDispatcher\n    }, {\n      type: ɵngcc0.Injector\n    }, {\n      type: ɵngcc0.NgZone\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }, {\n      type: ɵngcc3.Directionality\n    }, {\n      type: ɵngcc4.Location,\n      decorators: [{\n        type: Optional\n      }]\n    }];\n  }, null);\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/** *\n * Default set of positions for the overlay. Follows the behavior of a dropdown.\n  @type {?} */\n\n\nvar defaultPositionList = [{\n  originX: 'start',\n  originY: 'bottom',\n  overlayX: 'start',\n  overlayY: 'top'\n}, {\n  originX: 'start',\n  originY: 'top',\n  overlayX: 'start',\n  overlayY: 'bottom'\n}, {\n  originX: 'end',\n  originY: 'top',\n  overlayX: 'end',\n  overlayY: 'bottom'\n}, {\n  originX: 'end',\n  originY: 'bottom',\n  overlayX: 'end',\n  overlayY: 'top'\n}];\n/** *\n * Injection token that determines the scroll handling while the connected overlay is open.\n  @type {?} */\n\nvar CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY = new InjectionToken('cdk-connected-overlay-scroll-strategy');\n/**\n * Directive applied to an element to make it usable as an origin for an Overlay using a\n * ConnectedPositionStrategy.\n */\n\nvar CdkOverlayOrigin =\n/**\n * @param {?} elementRef\n */\nfunction CdkOverlayOrigin(elementRef) {\n  _classCallCheck(this, CdkOverlayOrigin);\n\n  this.elementRef = elementRef;\n};\n\nCdkOverlayOrigin.ɵfac = function CdkOverlayOrigin_Factory(t) {\n  return new (t || CdkOverlayOrigin)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef));\n};\n\nCdkOverlayOrigin.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n  type: CdkOverlayOrigin,\n  selectors: [[\"\", \"cdk-overlay-origin\", \"\"], [\"\", \"overlay-origin\", \"\"], [\"\", \"cdkOverlayOrigin\", \"\"]],\n  exportAs: [\"cdkOverlayOrigin\"]\n});\n/** @nocollapse */\n\nCdkOverlayOrigin.ctorParameters = function () {\n  return [{\n    type: ElementRef\n  }];\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkOverlayOrigin, [{\n    type: Directive,\n    args: [{\n      selector: '[cdk-overlay-origin], [overlay-origin], [cdkOverlayOrigin]',\n      exportAs: 'cdkOverlayOrigin'\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ElementRef\n    }];\n  }, null);\n})();\n/**\n * Directive to facilitate declarative creation of an\n * Overlay using a FlexibleConnectedPositionStrategy.\n */\n\n\nvar CdkConnectedOverlay = /*#__PURE__*/function () {\n  /**\n   * @param {?} _overlay\n   * @param {?} templateRef\n   * @param {?} viewContainerRef\n   * @param {?} scrollStrategyFactory\n   * @param {?} _dir\n   */\n  function CdkConnectedOverlay(_overlay, templateRef, viewContainerRef, scrollStrategyFactory, _dir) {\n    _classCallCheck(this, CdkConnectedOverlay);\n\n    this._overlay = _overlay;\n    this._dir = _dir;\n    this._hasBackdrop = false;\n    this._lockPosition = false;\n    this._growAfterOpen = false;\n    this._flexibleDimensions = false;\n    this._push = false;\n    this._backdropSubscription = Subscription.EMPTY;\n    /**\n     * Margin between the overlay and the viewport edges.\n     */\n\n    this.viewportMargin = 0;\n    /**\n     * Whether the overlay is open.\n     */\n\n    this.open = false;\n    /**\n     * Event emitted when the backdrop is clicked.\n     */\n\n    this.backdropClick = new EventEmitter();\n    /**\n     * Event emitted when the position has changed.\n     */\n\n    this.positionChange = new EventEmitter();\n    /**\n     * Event emitted when the overlay has been attached.\n     */\n\n    this.attach = new EventEmitter();\n    /**\n     * Event emitted when the overlay has been detached.\n     */\n\n    this.detach = new EventEmitter();\n    /**\n     * Emits when there are keyboard events that are targeted at the overlay.\n     */\n\n    this.overlayKeydown = new EventEmitter();\n    this._templatePortal = new TemplatePortal(templateRef, viewContainerRef);\n    this._scrollStrategyFactory = scrollStrategyFactory;\n    this.scrollStrategy = this._scrollStrategyFactory();\n  }\n  /**\n   * The offset in pixels for the overlay connection point on the x-axis\n   * @return {?}\n   */\n\n\n  _createClass(CdkConnectedOverlay, [{\n    key: \"offsetX\",\n    get: function get() {\n      return this._offsetX;\n    }\n    /**\n     * @param {?} offsetX\n     * @return {?}\n     */\n    ,\n    set: function set(offsetX) {\n      this._offsetX = offsetX;\n\n      if (this._position) {\n        this._updatePositionStrategy(this._position);\n      }\n    }\n    /**\n     * The offset in pixels for the overlay connection point on the y-axis\n     * @return {?}\n     */\n\n  }, {\n    key: \"offsetY\",\n    get: function get() {\n      return this._offsetY;\n    }\n    /**\n     * @param {?} offsetY\n     * @return {?}\n     */\n    ,\n    set: function set(offsetY) {\n      this._offsetY = offsetY;\n\n      if (this._position) {\n        this._updatePositionStrategy(this._position);\n      }\n    }\n    /**\n     * Whether or not the overlay should attach a backdrop.\n     * @return {?}\n     */\n\n  }, {\n    key: \"hasBackdrop\",\n    get: function get() {\n      return this._hasBackdrop;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ,\n    set: function set(value) {\n      this._hasBackdrop = coerceBooleanProperty(value);\n    }\n    /**\n     * Whether or not the overlay should be locked when scrolling.\n     * @return {?}\n     */\n\n  }, {\n    key: \"lockPosition\",\n    get: function get() {\n      return this._lockPosition;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ,\n    set: function set(value) {\n      this._lockPosition = coerceBooleanProperty(value);\n    }\n    /**\n     * Whether the overlay's width and height can be constrained to fit within the viewport.\n     * @return {?}\n     */\n\n  }, {\n    key: \"flexibleDimensions\",\n    get: function get() {\n      return this._flexibleDimensions;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ,\n    set: function set(value) {\n      this._flexibleDimensions = coerceBooleanProperty(value);\n    }\n    /**\n     * Whether the overlay can grow after the initial open when flexible positioning is turned on.\n     * @return {?}\n     */\n\n  }, {\n    key: \"growAfterOpen\",\n    get: function get() {\n      return this._growAfterOpen;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ,\n    set: function set(value) {\n      this._growAfterOpen = coerceBooleanProperty(value);\n    }\n    /**\n     * Whether the overlay can be pushed on-screen if none of the provided positions fit.\n     * @return {?}\n     */\n\n  }, {\n    key: \"push\",\n    get: function get() {\n      return this._push;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ,\n    set: function set(value) {\n      this._push = coerceBooleanProperty(value);\n    }\n    /**\n     * The associated overlay reference.\n     * @return {?}\n     */\n\n  }, {\n    key: \"overlayRef\",\n    get: function get() {\n      return this._overlayRef;\n    }\n    /**\n     * The element's layout direction.\n     * @return {?}\n     */\n\n  }, {\n    key: \"dir\",\n    get: function get() {\n      return this._dir ? this._dir.value : 'ltr';\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      this._destroyOverlay();\n    }\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngOnChanges\",\n    value: function ngOnChanges(changes) {\n      if (this._position) {\n        this._updatePositionStrategy(this._position);\n\n        if (changes['origin'] && this.open) {\n          this._position.apply();\n        }\n      }\n\n      if (changes['open']) {\n        this.open ? this._attachOverlay() : this._detachOverlay();\n      }\n    }\n    /**\n     * Creates an overlay\n     * @return {?}\n     */\n\n  }, {\n    key: \"_createOverlay\",\n    value: function _createOverlay() {\n      var _this16 = this;\n\n      if (!this.positions || !this.positions.length) {\n        this.positions = defaultPositionList;\n      }\n\n      this._overlayRef = this._overlay.create(this._buildConfig());\n\n      this._overlayRef.keydownEvents().subscribe(function (event) {\n        _this16.overlayKeydown.next(event);\n\n        if (event.keyCode === ESCAPE) {\n          _this16._detachOverlay();\n        }\n      });\n    }\n    /**\n     * Builds the overlay config based on the directive's inputs\n     * @return {?}\n     */\n\n  }, {\n    key: \"_buildConfig\",\n    value: function _buildConfig() {\n      /** @type {?} */\n      var positionStrategy = this._position = this._createPositionStrategy();\n      /** @type {?} */\n\n\n      var overlayConfig = new OverlayConfig({\n        direction: this._dir,\n        positionStrategy: positionStrategy,\n        scrollStrategy: this.scrollStrategy,\n        hasBackdrop: this.hasBackdrop\n      });\n\n      if (this.width || this.width === 0) {\n        overlayConfig.width = this.width;\n      }\n\n      if (this.height || this.height === 0) {\n        overlayConfig.height = this.height;\n      }\n\n      if (this.minWidth || this.minWidth === 0) {\n        overlayConfig.minWidth = this.minWidth;\n      }\n\n      if (this.minHeight || this.minHeight === 0) {\n        overlayConfig.minHeight = this.minHeight;\n      }\n\n      if (this.backdropClass) {\n        overlayConfig.backdropClass = this.backdropClass;\n      }\n\n      if (this.panelClass) {\n        overlayConfig.panelClass = this.panelClass;\n      }\n\n      return overlayConfig;\n    }\n    /**\n     * Updates the state of a position strategy, based on the values of the directive inputs.\n     * @param {?} positionStrategy\n     * @return {?}\n     */\n\n  }, {\n    key: \"_updatePositionStrategy\",\n    value: function _updatePositionStrategy(positionStrategy) {\n      var _this17 = this;\n\n      /** @type {?} */\n      var positions = this.positions.map(function (currentPosition) {\n        return {\n          originX: currentPosition.originX,\n          originY: currentPosition.originY,\n          overlayX: currentPosition.overlayX,\n          overlayY: currentPosition.overlayY,\n          offsetX: currentPosition.offsetX || _this17.offsetX,\n          offsetY: currentPosition.offsetY || _this17.offsetY\n        };\n      });\n      return positionStrategy.setOrigin(this.origin.elementRef).withPositions(positions).withFlexibleDimensions(this.flexibleDimensions).withPush(this.push).withGrowAfterOpen(this.growAfterOpen).withViewportMargin(this.viewportMargin).withLockedPosition(this.lockPosition);\n    }\n    /**\n     * Returns the position strategy of the overlay to be set on the overlay config\n     * @return {?}\n     */\n\n  }, {\n    key: \"_createPositionStrategy\",\n    value: function _createPositionStrategy() {\n      var _this18 = this;\n\n      /** @type {?} */\n      var strategy = this._overlay.position().flexibleConnectedTo(this.origin.elementRef);\n\n      this._updatePositionStrategy(strategy);\n\n      strategy.positionChanges.subscribe(function (p) {\n        return _this18.positionChange.emit(p);\n      });\n      return strategy;\n    }\n    /**\n     * Attaches the overlay and subscribes to backdrop clicks if backdrop exists\n     * @return {?}\n     */\n\n  }, {\n    key: \"_attachOverlay\",\n    value: function _attachOverlay() {\n      var _this19 = this;\n\n      if (!this._overlayRef) {\n        this._createOverlay();\n      } else {\n        // Update the overlay size, in case the directive's inputs have changed\n        this._overlayRef.updateSize({\n          width: this.width,\n          minWidth: this.minWidth,\n          height: this.height,\n          minHeight: this.minHeight\n        });\n      }\n\n      if (!this._overlayRef.hasAttached()) {\n        this._overlayRef.attach(this._templatePortal);\n\n        this.attach.emit();\n      }\n\n      if (this.hasBackdrop) {\n        this._backdropSubscription = this._overlayRef.backdropClick().subscribe(function (event) {\n          _this19.backdropClick.emit(event);\n        });\n      }\n    }\n    /**\n     * Detaches the overlay and unsubscribes to backdrop clicks if backdrop exists\n     * @return {?}\n     */\n\n  }, {\n    key: \"_detachOverlay\",\n    value: function _detachOverlay() {\n      if (this._overlayRef) {\n        this._overlayRef.detach();\n\n        this.detach.emit();\n      }\n\n      this._backdropSubscription.unsubscribe();\n    }\n    /**\n     * Destroys the overlay created by this directive.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_destroyOverlay\",\n    value: function _destroyOverlay() {\n      if (this._overlayRef) {\n        this._overlayRef.dispose();\n      }\n\n      this._backdropSubscription.unsubscribe();\n    }\n  }]);\n\n  return CdkConnectedOverlay;\n}();\n\nCdkConnectedOverlay.ɵfac = function CdkConnectedOverlay_Factory(t) {\n  return new (t || CdkConnectedOverlay)(ɵngcc0.ɵɵdirectiveInject(Overlay), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.Directionality, 8));\n};\n\nCdkConnectedOverlay.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n  type: CdkConnectedOverlay,\n  selectors: [[\"\", \"cdk-connected-overlay\", \"\"], [\"\", \"connected-overlay\", \"\"], [\"\", \"cdkConnectedOverlay\", \"\"]],\n  inputs: {\n    viewportMargin: [\"cdkConnectedOverlayViewportMargin\", \"viewportMargin\"],\n    open: [\"cdkConnectedOverlayOpen\", \"open\"],\n    scrollStrategy: [\"cdkConnectedOverlayScrollStrategy\", \"scrollStrategy\"],\n    offsetX: [\"cdkConnectedOverlayOffsetX\", \"offsetX\"],\n    offsetY: [\"cdkConnectedOverlayOffsetY\", \"offsetY\"],\n    hasBackdrop: [\"cdkConnectedOverlayHasBackdrop\", \"hasBackdrop\"],\n    lockPosition: [\"cdkConnectedOverlayLockPosition\", \"lockPosition\"],\n    flexibleDimensions: [\"cdkConnectedOverlayFlexibleDimensions\", \"flexibleDimensions\"],\n    growAfterOpen: [\"cdkConnectedOverlayGrowAfterOpen\", \"growAfterOpen\"],\n    push: [\"cdkConnectedOverlayPush\", \"push\"],\n    positions: [\"cdkConnectedOverlayPositions\", \"positions\"],\n    origin: [\"cdkConnectedOverlayOrigin\", \"origin\"],\n    width: [\"cdkConnectedOverlayWidth\", \"width\"],\n    height: [\"cdkConnectedOverlayHeight\", \"height\"],\n    minWidth: [\"cdkConnectedOverlayMinWidth\", \"minWidth\"],\n    minHeight: [\"cdkConnectedOverlayMinHeight\", \"minHeight\"],\n    backdropClass: [\"cdkConnectedOverlayBackdropClass\", \"backdropClass\"],\n    panelClass: [\"cdkConnectedOverlayPanelClass\", \"panelClass\"]\n  },\n  outputs: {\n    backdropClick: \"backdropClick\",\n    positionChange: \"positionChange\",\n    attach: \"attach\",\n    detach: \"detach\",\n    overlayKeydown: \"overlayKeydown\"\n  },\n  exportAs: [\"cdkConnectedOverlay\"],\n  features: [ɵngcc0.ɵɵNgOnChangesFeature]\n});\n/** @nocollapse */\n\nCdkConnectedOverlay.ctorParameters = function () {\n  return [{\n    type: Overlay\n  }, {\n    type: TemplateRef\n  }, {\n    type: ViewContainerRef\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Inject,\n      args: [CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY]\n    }]\n  }, {\n    type: Directionality,\n    decorators: [{\n      type: Optional\n    }]\n  }];\n};\n\nCdkConnectedOverlay.propDecorators = {\n  origin: [{\n    type: Input,\n    args: ['cdkConnectedOverlayOrigin']\n  }],\n  positions: [{\n    type: Input,\n    args: ['cdkConnectedOverlayPositions']\n  }],\n  offsetX: [{\n    type: Input,\n    args: ['cdkConnectedOverlayOffsetX']\n  }],\n  offsetY: [{\n    type: Input,\n    args: ['cdkConnectedOverlayOffsetY']\n  }],\n  width: [{\n    type: Input,\n    args: ['cdkConnectedOverlayWidth']\n  }],\n  height: [{\n    type: Input,\n    args: ['cdkConnectedOverlayHeight']\n  }],\n  minWidth: [{\n    type: Input,\n    args: ['cdkConnectedOverlayMinWidth']\n  }],\n  minHeight: [{\n    type: Input,\n    args: ['cdkConnectedOverlayMinHeight']\n  }],\n  backdropClass: [{\n    type: Input,\n    args: ['cdkConnectedOverlayBackdropClass']\n  }],\n  panelClass: [{\n    type: Input,\n    args: ['cdkConnectedOverlayPanelClass']\n  }],\n  viewportMargin: [{\n    type: Input,\n    args: ['cdkConnectedOverlayViewportMargin']\n  }],\n  scrollStrategy: [{\n    type: Input,\n    args: ['cdkConnectedOverlayScrollStrategy']\n  }],\n  open: [{\n    type: Input,\n    args: ['cdkConnectedOverlayOpen']\n  }],\n  hasBackdrop: [{\n    type: Input,\n    args: ['cdkConnectedOverlayHasBackdrop']\n  }],\n  lockPosition: [{\n    type: Input,\n    args: ['cdkConnectedOverlayLockPosition']\n  }],\n  flexibleDimensions: [{\n    type: Input,\n    args: ['cdkConnectedOverlayFlexibleDimensions']\n  }],\n  growAfterOpen: [{\n    type: Input,\n    args: ['cdkConnectedOverlayGrowAfterOpen']\n  }],\n  push: [{\n    type: Input,\n    args: ['cdkConnectedOverlayPush']\n  }],\n  backdropClick: [{\n    type: Output\n  }],\n  positionChange: [{\n    type: Output\n  }],\n  attach: [{\n    type: Output\n  }],\n  detach: [{\n    type: Output\n  }],\n  overlayKeydown: [{\n    type: Output\n  }]\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkConnectedOverlay, [{\n    type: Directive,\n    args: [{\n      selector: '[cdk-connected-overlay], [connected-overlay], [cdkConnectedOverlay]',\n      exportAs: 'cdkConnectedOverlay'\n    }]\n  }], function () {\n    return [{\n      type: Overlay\n    }, {\n      type: ɵngcc0.TemplateRef\n    }, {\n      type: ɵngcc0.ViewContainerRef\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY]\n      }]\n    }, {\n      type: ɵngcc3.Directionality,\n      decorators: [{\n        type: Optional\n      }]\n    }];\n  }, {\n    viewportMargin: [{\n      type: Input,\n      args: ['cdkConnectedOverlayViewportMargin']\n    }],\n    open: [{\n      type: Input,\n      args: ['cdkConnectedOverlayOpen']\n    }],\n    backdropClick: [{\n      type: Output\n    }],\n    positionChange: [{\n      type: Output\n    }],\n    attach: [{\n      type: Output\n    }],\n    detach: [{\n      type: Output\n    }],\n    overlayKeydown: [{\n      type: Output\n    }],\n    scrollStrategy: [{\n      type: Input,\n      args: ['cdkConnectedOverlayScrollStrategy']\n    }],\n    offsetX: [{\n      type: Input,\n      args: ['cdkConnectedOverlayOffsetX']\n    }],\n    offsetY: [{\n      type: Input,\n      args: ['cdkConnectedOverlayOffsetY']\n    }],\n    hasBackdrop: [{\n      type: Input,\n      args: ['cdkConnectedOverlayHasBackdrop']\n    }],\n    lockPosition: [{\n      type: Input,\n      args: ['cdkConnectedOverlayLockPosition']\n    }],\n    flexibleDimensions: [{\n      type: Input,\n      args: ['cdkConnectedOverlayFlexibleDimensions']\n    }],\n    growAfterOpen: [{\n      type: Input,\n      args: ['cdkConnectedOverlayGrowAfterOpen']\n    }],\n    push: [{\n      type: Input,\n      args: ['cdkConnectedOverlayPush']\n    }],\n    positions: [{\n      type: Input,\n      args: ['cdkConnectedOverlayPositions']\n    }],\n    origin: [{\n      type: Input,\n      args: ['cdkConnectedOverlayOrigin']\n    }],\n    width: [{\n      type: Input,\n      args: ['cdkConnectedOverlayWidth']\n    }],\n    height: [{\n      type: Input,\n      args: ['cdkConnectedOverlayHeight']\n    }],\n    minWidth: [{\n      type: Input,\n      args: ['cdkConnectedOverlayMinWidth']\n    }],\n    minHeight: [{\n      type: Input,\n      args: ['cdkConnectedOverlayMinHeight']\n    }],\n    backdropClass: [{\n      type: Input,\n      args: ['cdkConnectedOverlayBackdropClass']\n    }],\n    panelClass: [{\n      type: Input,\n      args: ['cdkConnectedOverlayPanelClass']\n    }]\n  });\n})();\n/**\n * \\@docs-private\n * @param {?} overlay\n * @return {?}\n */\n\n\nfunction CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay) {\n  return function () {\n    return overlay.scrollStrategies.reposition();\n  };\n}\n/** *\n * \\@docs-private\n  @type {?} */\n\n\nvar CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER = {\n  provide: CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER_FACTORY\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\nvar OverlayModule = function OverlayModule() {\n  _classCallCheck(this, OverlayModule);\n};\n\nOverlayModule.ɵfac = function OverlayModule_Factory(t) {\n  return new (t || OverlayModule)();\n};\n\nOverlayModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n  type: OverlayModule\n});\nOverlayModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n  providers: [Overlay, CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER],\n  imports: [[BidiModule, PortalModule, ScrollingModule], ScrollingModule]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(OverlayModule, [{\n    type: NgModule,\n    args: [{\n      imports: [BidiModule, PortalModule, ScrollingModule],\n      exports: [CdkConnectedOverlay, CdkOverlayOrigin, ScrollingModule],\n      declarations: [CdkConnectedOverlay, CdkOverlayOrigin],\n      providers: [Overlay, CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER]\n    }]\n  }], null, null);\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(OverlayModule, {\n    declarations: function declarations() {\n      return [CdkConnectedOverlay, CdkOverlayOrigin];\n    },\n    imports: function imports() {\n      return [BidiModule, PortalModule, ScrollingModule];\n    },\n    exports: function exports() {\n      return [CdkConnectedOverlay, CdkOverlayOrigin, ScrollingModule];\n    }\n  });\n})();\n/** *\n * @deprecated Use `OverlayModule` instead.\n * \\@breaking-change 8.0.0\n * \\@docs-private\n  @type {?} */\n\n\nvar OVERLAY_PROVIDERS = [Overlay, OverlayPositionBuilder, OVERLAY_KEYBOARD_DISPATCHER_PROVIDER, VIEWPORT_RULER_PROVIDER, OVERLAY_CONTAINER_PROVIDER, CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER];\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * Alternative to OverlayContainer that supports correct displaying of overlay elements in\n * Fullscreen mode\n * https://developer.mozilla.org/en-US/docs/Web/API/Element/requestFullScreen\n *\n * Should be provided in the root component.\n */\n\nvar FullscreenOverlayContainer = /*#__PURE__*/function (_OverlayContainer) {\n  _inherits(FullscreenOverlayContainer, _OverlayContainer);\n\n  var _super = _createSuper(FullscreenOverlayContainer);\n\n  /**\n   * @param {?} _document\n   */\n  function FullscreenOverlayContainer(_document) {\n    _classCallCheck(this, FullscreenOverlayContainer);\n\n    return _super.call(this, _document);\n  }\n  /**\n   * @return {?}\n   */\n\n\n  _createClass(FullscreenOverlayContainer, [{\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      _get(_getPrototypeOf(FullscreenOverlayContainer.prototype), \"ngOnDestroy\", this).call(this);\n\n      if (this._fullScreenEventName && this._fullScreenListener) {\n        this._document.removeEventListener(this._fullScreenEventName, this._fullScreenListener);\n      }\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"_createContainer\",\n    value: function _createContainer() {\n      var _this20 = this;\n\n      _get(_getPrototypeOf(FullscreenOverlayContainer.prototype), \"_createContainer\", this).call(this);\n\n      this._adjustParentForFullscreenChange();\n\n      this._addFullscreenChangeListener(function () {\n        return _this20._adjustParentForFullscreenChange();\n      });\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"_adjustParentForFullscreenChange\",\n    value: function _adjustParentForFullscreenChange() {\n      if (!this._containerElement) {\n        return;\n      }\n      /** @type {?} */\n\n\n      var fullscreenElement = this.getFullscreenElement();\n      /** @type {?} */\n\n      var parent = fullscreenElement || this._document.body;\n      parent.appendChild(this._containerElement);\n    }\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n\n  }, {\n    key: \"_addFullscreenChangeListener\",\n    value: function _addFullscreenChangeListener(fn) {\n      /** @type {?} */\n      var eventName = this._getEventName();\n\n      if (eventName) {\n        if (this._fullScreenListener) {\n          this._document.removeEventListener(eventName, this._fullScreenListener);\n        }\n\n        this._document.addEventListener(eventName, fn);\n\n        this._fullScreenListener = fn;\n      }\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"_getEventName\",\n    value: function _getEventName() {\n      if (!this._fullScreenEventName) {\n        if (this._document.fullscreenEnabled) {\n          this._fullScreenEventName = 'fullscreenchange';\n        } else if (this._document.webkitFullscreenEnabled) {\n          this._fullScreenEventName = 'webkitfullscreenchange';\n        } else if (\n        /** @type {?} */\n        this._document.mozFullScreenEnabled) {\n          this._fullScreenEventName = 'mozfullscreenchange';\n        } else if (\n        /** @type {?} */\n        this._document.msFullscreenEnabled) {\n          this._fullScreenEventName = 'MSFullscreenChange';\n        }\n      }\n\n      return this._fullScreenEventName;\n    }\n    /**\n     * When the page is put into fullscreen mode, a specific element is specified.\n     * Only that element and its children are visible when in fullscreen mode.\n     * @return {?}\n     */\n\n  }, {\n    key: \"getFullscreenElement\",\n    value: function getFullscreenElement() {\n      return this._document.fullscreenElement || this._document.webkitFullscreenElement ||\n      /** @type {?} */\n      this._document.mozFullScreenElement ||\n      /** @type {?} */\n      this._document.msFullscreenElement || null;\n    }\n  }]);\n\n  return FullscreenOverlayContainer;\n}(OverlayContainer);\n\nFullscreenOverlayContainer.ɵfac = function FullscreenOverlayContainer_Factory(t) {\n  return new (t || FullscreenOverlayContainer)(ɵngcc0.ɵɵinject(DOCUMENT));\n};\n\nFullscreenOverlayContainer.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n  token: FullscreenOverlayContainer,\n  factory: FullscreenOverlayContainer.ɵfac\n});\n/** @nocollapse */\n\nFullscreenOverlayContainer.ctorParameters = function () {\n  return [{\n    type: undefined,\n    decorators: [{\n      type: Inject,\n      args: [DOCUMENT]\n    }]\n  }];\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(FullscreenOverlayContainer, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }];\n  }, null);\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n\nexport { Overlay, OverlayContainer, CdkOverlayOrigin, CdkConnectedOverlay, FullscreenOverlayContainer, OverlayRef, OverlayKeyboardDispatcher, OverlayPositionBuilder, GlobalPositionStrategy, ConnectedPositionStrategy, FlexibleConnectedPositionStrategy, OverlayConfig, validateVerticalPosition, validateHorizontalPosition, ConnectionPositionPair, ScrollingVisibility, ConnectedOverlayPositionChange, ScrollStrategyOptions, RepositionScrollStrategy, CloseScrollStrategy, NoopScrollStrategy, BlockScrollStrategy, OverlayModule, OVERLAY_PROVIDERS, OVERLAY_KEYBOARD_DISPATCHER_PROVIDER as ɵg, OVERLAY_KEYBOARD_DISPATCHER_PROVIDER_FACTORY as ɵf, OVERLAY_CONTAINER_PROVIDER as ɵb, OVERLAY_CONTAINER_PROVIDER_FACTORY as ɵa, CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY as ɵc, CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER as ɵe, CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER_FACTORY as ɵd }; //# sourceMappingURL=overlay.js.map","map":{"version":3,"sources":["/Users/adepertat/Dropbox/ECOLES/Openclassroom/P6_de_Pertat_Antoine/dwj-projet6/node_modules/@angular/cdk/__ivy_ngcc__/esm2015/overlay.js"],"names":["coerceCssPixelValue","coerceArray","coerceBooleanProperty","ScrollDispatcher","ViewportRuler","ScrollingModule","VIEWPORT_RULER_PROVIDER","ɵngcc0","ɵngcc1","ɵngcc2","ɵngcc3","ɵngcc4","CdkScrollable","DOCUMENT","Location","Inject","Injectable","NgZone","Optional","NgModule","SkipSelf","ApplicationRef","ComponentFactoryResolver","Injector","ElementRef","Directive","EventEmitter","InjectionToken","Input","Output","TemplateRef","ViewContainerRef","defineInjectable","inject","Observable","Subject","merge","Subscription","take","takeUntil","Platform","Directionality","BidiModule","DomPortalOutlet","TemplatePortal","PortalModule","ESCAPE","BlockScrollStrategy","_viewportRuler","document","_previousHTMLStyles","top","left","_isEnabled","_document","_canBeEnabled","root","documentElement","_previousScrollPosition","getViewportScrollPosition","style","classList","add","html","body","htmlStyle","bodyStyle","previousHtmlScrollBehavior","scrollBehavior","previousBodyScrollBehavior","remove","window","scroll","contains","viewport","getViewportSize","scrollHeight","height","scrollWidth","width","getMatScrollStrategyAlreadyAttachedError","Error","CloseScrollStrategy","_scrollDispatcher","_ngZone","_config","_scrollSubscription","_detach","disable","_overlayRef","hasAttached","run","detach","overlayRef","stream","scrolled","threshold","_initialScrollPosition","subscribe","scrollPosition","Math","abs","updatePosition","unsubscribe","NoopScrollStrategy","isElementScrolledOutsideView","element","scrollContainers","some","containerBounds","outsideAbove","bottom","outsideBelow","outsideLeft","right","outsideRight","isElementClippedByScrolling","scrollContainerRect","clippedAbove","clippedBelow","clippedLeft","clippedRight","RepositionScrollStrategy","throttle","scrollThrottle","autoClose","overlayRect","overlayElement","getBoundingClientRect","parentRects","ScrollStrategyOptions","noop","close","config","block","reposition","ɵfac","ScrollStrategyOptions_Factory","t","ɵɵinject","ɵprov","ɵɵdefineInjectable","token","factory","providedIn","ctorParameters","type","undefined","decorators","args","ngInjectableDef","ngDevMode","ɵsetClassMetadata","OverlayConfig","scrollStrategy","panelClass","hasBackdrop","backdropClass","disposeOnNavigation","Object","keys","forEach","k","key","ConnectionPositionPair","origin","overlay","offsetX","offsetY","originX","originY","overlayX","overlayY","ScrollingVisibility","ConnectedOverlayPositionChange","connectionPair","scrollableViewProperties","validateVerticalPosition","property","value","validateHorizontalPosition","OverlayKeyboardDispatcher","_attachedOverlays","_keydownListener","event","overlays","i","length","_keydownEventSubscriptions","_keydownEvents","next","_isAttached","addEventListener","push","index","indexOf","splice","removeEventListener","OverlayKeyboardDispatcher_Factory","OVERLAY_KEYBOARD_DISPATCHER_PROVIDER_FACTORY","dispatcher","OVERLAY_KEYBOARD_DISPATCHER_PROVIDER","provide","deps","useFactory","OverlayContainer","_containerElement","parentNode","removeChild","_createContainer","container","createElement","appendChild","OverlayContainer_Factory","OVERLAY_CONTAINER_PROVIDER_FACTORY","parentContainer","OVERLAY_CONTAINER_PROVIDER","OverlayRef","_portalOutlet","_host","_pane","_keyboardDispatcher","_location","_backdropElement","_backdropClick","_attachments","_detachments","_locationChanges","EMPTY","_keydownEventsObservable","create","observer","subscription","attach","_positionStrategy","positionStrategy","portal","attachResult","parentElement","_previousHostParent","_updateStackingOrder","_updateElementSize","_updateElementDirection","enable","onStable","asObservable","pipe","_togglePointerEvents","_attachBackdrop","_toggleClasses","dispose","detachBackdrop","detachmentResult","_detachContentWhenStable","isAttached","complete","apply","strategy","sizeConfig","assign","dir","direction","setAttribute","getDirection","minWidth","minHeight","maxWidth","maxHeight","enablePointer","pointerEvents","showingClass","insertBefore","requestAnimationFrame","runOutsideAngular","nextSibling","backdropToDetach","timeoutId","finishDetach","clearTimeout","setTimeout","cssClasses","isAdd","cssClass","children","boundingBoxClass","FlexibleConnectedPositionStrategy","connectedTo","_platform","_overlayContainer","_lastBoundingBoxSize","_isPushed","_canPush","_growAfterOpen","_hasFlexibleDimensions","_positionLocked","_viewportMargin","scrollables","_preferredPositions","_positionChanges","_resizeSubscription","_offsetX","_offsetY","_positionChangeSubscriptions","_appliedPanelClasses","positionChanges","setOrigin","_validatePositions","hostElement","_boundingBox","_isDisposed","_isInitialRender","_lastPosition","change","isBrowser","reapplyLastPosition","_clearPanelClasses","_resetOverlayElementStyles","_resetBoundingBoxStyles","_viewportRect","_getNarrowedViewportRect","_originRect","_origin","_overlayRect","originRect","viewportRect","flexibleFits","fallback","pos","originPoint","_getOriginPoint","overlayPoint","_getOverlayPoint","overlayFit","_getOverlayFit","isCompletelyWithinViewport","_applyPosition","_canFitWithFlexibleDimensions","position","boundingBoxRect","_calculateBoundingBoxRect","visibleArea","bestFit","bestScore","fit","score","weight","_previousPushAmount","extendStyles","alignItems","justifyContent","lastPosition","positions","margin","flexibleDimensions","growAfterOpen","canPush","isLocked","nativeElement","offset","selector","_transformOriginSelector","x","startX","_isRtl","endX","y","overlayStartX","overlayStartY","point","_getOffset","leftOverflow","rightOverflow","topOverflow","bottomOverflow","visibleWidth","_subtractOverflows","visibleHeight","fitsInViewportVertically","fitsInViewportHorizontally","availableHeight","availableWidth","getConfig","verticalFit","horizontalFit","start","overflowRight","max","overflowBottom","overflowTop","overflowLeft","pushX","pushY","_setTransformOrigin","_setOverlayElementStyles","_setBoundingBoxStyles","_addPanelClasses","_getScrollVisibility","changeEvent","elements","querySelectorAll","xOrigin","yOrigin","transformOrigin","isRtl","smallestDistanceToViewportEdge","min","previousHeight","isBoundedByRightViewportEdge","isBoundedByLeftViewportEdge","previousWidth","styles","_hasExactPosition","_getExactOverlayY","_getExactOverlayX","transformString","transform","trim","_pushOverlayOnScreen","virtualKeyboardOffset","getContainerElement","documentHeight","clientHeight","horizontalStyleProperty","documentWidth","clientWidth","originBounds","overlayBounds","scrollContainerBounds","map","scrollable","getElementRef","isOriginClipped","isOriginOutsideView","isOverlayClipped","isOverlayOutsideView","overflows","reduce","currentValue","currentOverflow","axis","pair","dest","source","hasOwnProperty","ConnectedPositionStrategy","originPos","overlayPos","viewportRuler","platform","withFlexibleDimensions","withPush","withViewportMargin","withFallbackPosition","_direction","setDirection","withScrollableContainers","withPositions","withDefaultOffsetX","withDefaultOffsetY","withLockedPosition","slice","wrapperClass","GlobalPositionStrategy","_cssPosition","_topOffset","_bottomOffset","_leftOffset","_rightOffset","_alignItems","_justifyContent","_width","_height","updateSize","parentStyles","marginLeft","marginTop","marginBottom","marginRight","parent","OverlayPositionBuilder","elementRef","OverlayPositionBuilder_Factory","nextUniqueId","Overlay","scrollStrategies","_componentFactoryResolver","_positionBuilder","_injector","_directionality","host","_createHostElement","pane","_createPaneElement","portalOutlet","_createPortalOutlet","overlayConfig","id","_appRef","get","Overlay_Factory","defaultPositionList","CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY","CdkOverlayOrigin","CdkOverlayOrigin_Factory","ɵɵdirectiveInject","ɵdir","ɵɵdefineDirective","selectors","exportAs","CdkConnectedOverlay","_overlay","templateRef","viewContainerRef","scrollStrategyFactory","_dir","_hasBackdrop","_lockPosition","_flexibleDimensions","_push","_backdropSubscription","viewportMargin","open","backdropClick","positionChange","overlayKeydown","_templatePortal","_scrollStrategyFactory","_position","_updatePositionStrategy","_destroyOverlay","changes","_attachOverlay","_detachOverlay","_buildConfig","keydownEvents","keyCode","_createPositionStrategy","currentPosition","withGrowAfterOpen","lockPosition","flexibleConnectedTo","p","emit","_createOverlay","CdkConnectedOverlay_Factory","inputs","outputs","features","ɵɵNgOnChangesFeature","propDecorators","CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER_FACTORY","CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER","OverlayModule","OverlayModule_Factory","ɵmod","ɵɵdefineNgModule","ɵinj","ɵɵdefineInjector","providers","imports","exports","declarations","ngJitMode","ɵɵsetNgModuleScope","OVERLAY_PROVIDERS","FullscreenOverlayContainer","_fullScreenEventName","_fullScreenListener","_adjustParentForFullscreenChange","_addFullscreenChangeListener","fullscreenElement","getFullscreenElement","fn","eventName","_getEventName","fullscreenEnabled","webkitFullscreenEnabled","mozFullScreenEnabled","msFullscreenEnabled","webkitFullscreenElement","mozFullScreenElement","msFullscreenElement","FullscreenOverlayContainer_Factory","ɵg","ɵf","ɵb","ɵa","ɵc","ɵe","ɵd"],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { coerceCssPixelValue, coerceArray, coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { ScrollDispatcher, ViewportRuler, ScrollingModule, VIEWPORT_RULER_PROVIDER } from '@angular/cdk/scrolling';\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/scrolling';\nimport * as ɵngcc2 from '@angular/cdk/platform';\nimport * as ɵngcc3 from '@angular/cdk/bidi';\nimport * as ɵngcc4 from '@angular/common';\nexport { ViewportRuler, VIEWPORT_RULER_PROVIDER, CdkScrollable, ScrollDispatcher } from '@angular/cdk/scrolling';\nimport { DOCUMENT, Location } from '@angular/common';\nimport { Inject, Injectable, NgZone, Optional, NgModule, SkipSelf, ApplicationRef, ComponentFactoryResolver, Injector, ElementRef, Directive, EventEmitter, InjectionToken, Input, Output, TemplateRef, ViewContainerRef, defineInjectable, inject } from '@angular/core';\nimport { Observable, Subject, merge, Subscription } from 'rxjs';\nimport { take, takeUntil } from 'rxjs/operators';\nimport { Platform } from '@angular/cdk/platform';\nimport { Directionality, BidiModule } from '@angular/cdk/bidi';\nimport { DomPortalOutlet, TemplatePortal, PortalModule } from '@angular/cdk/portal';\nimport { ESCAPE } from '@angular/cdk/keycodes';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * Strategy that will prevent the user from scrolling while the overlay is visible.\n */\nclass BlockScrollStrategy {\n    /**\n     * @param {?} _viewportRuler\n     * @param {?} document\n     */\n    constructor(_viewportRuler, document) {\n        this._viewportRuler = _viewportRuler;\n        this._previousHTMLStyles = { top: '', left: '' };\n        this._isEnabled = false;\n        this._document = document;\n    }\n    /**\n     * Attaches this scroll strategy to an overlay.\n     * @return {?}\n     */\n    attach() { }\n    /**\n     * Blocks page-level scroll while the attached overlay is open.\n     * @return {?}\n     */\n    enable() {\n        if (this._canBeEnabled()) {\n            /** @type {?} */\n            const root = /** @type {?} */ ((this._document.documentElement));\n            this._previousScrollPosition = this._viewportRuler.getViewportScrollPosition();\n            // Cache the previous inline styles in case the user had set them.\n            this._previousHTMLStyles.left = root.style.left || '';\n            this._previousHTMLStyles.top = root.style.top || '';\n            // Note: we're using the `html` node, instead of the `body`, because the `body` may\n            // have the user agent margin, whereas the `html` is guaranteed not to have one.\n            root.style.left = coerceCssPixelValue(-this._previousScrollPosition.left);\n            root.style.top = coerceCssPixelValue(-this._previousScrollPosition.top);\n            root.classList.add('cdk-global-scrollblock');\n            this._isEnabled = true;\n        }\n    }\n    /**\n     * Unblocks page-level scroll while the attached overlay is open.\n     * @return {?}\n     */\n    disable() {\n        if (this._isEnabled) {\n            /** @type {?} */\n            const html = /** @type {?} */ ((this._document.documentElement));\n            /** @type {?} */\n            const body = /** @type {?} */ ((this._document.body));\n            /** @type {?} */\n            const htmlStyle = /** @type {?} */ (html.style);\n            /** @type {?} */\n            const bodyStyle = /** @type {?} */ (body.style);\n            /** @type {?} */\n            const previousHtmlScrollBehavior = htmlStyle.scrollBehavior || '';\n            /** @type {?} */\n            const previousBodyScrollBehavior = bodyStyle.scrollBehavior || '';\n            this._isEnabled = false;\n            htmlStyle.left = this._previousHTMLStyles.left;\n            htmlStyle.top = this._previousHTMLStyles.top;\n            html.classList.remove('cdk-global-scrollblock');\n            // Disable user-defined smooth scrolling temporarily while we restore the scroll position.\n            // See https://developer.mozilla.org/en-US/docs/Web/CSS/scroll-behavior\n            htmlStyle.scrollBehavior = bodyStyle.scrollBehavior = 'auto';\n            window.scroll(this._previousScrollPosition.left, this._previousScrollPosition.top);\n            htmlStyle.scrollBehavior = previousHtmlScrollBehavior;\n            bodyStyle.scrollBehavior = previousBodyScrollBehavior;\n        }\n    }\n    /**\n     * @return {?}\n     */\n    _canBeEnabled() {\n        /** @type {?} */\n        const html = /** @type {?} */ ((this._document.documentElement));\n        if (html.classList.contains('cdk-global-scrollblock') || this._isEnabled) {\n            return false;\n        }\n        /** @type {?} */\n        const body = this._document.body;\n        /** @type {?} */\n        const viewport = this._viewportRuler.getViewportSize();\n        return body.scrollHeight > viewport.height || body.scrollWidth > viewport.width;\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * Returns an error to be thrown when attempting to attach an already-attached scroll strategy.\n * @return {?}\n */\nfunction getMatScrollStrategyAlreadyAttachedError() {\n    return Error(`Scroll strategy has already been attached.`);\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * Strategy that will close the overlay as soon as the user starts scrolling.\n */\nclass CloseScrollStrategy {\n    /**\n     * @param {?} _scrollDispatcher\n     * @param {?} _ngZone\n     * @param {?} _viewportRuler\n     * @param {?=} _config\n     */\n    constructor(_scrollDispatcher, _ngZone, _viewportRuler, _config) {\n        this._scrollDispatcher = _scrollDispatcher;\n        this._ngZone = _ngZone;\n        this._viewportRuler = _viewportRuler;\n        this._config = _config;\n        this._scrollSubscription = null;\n        /**\n         * Detaches the overlay ref and disables the scroll strategy.\n         */\n        this._detach = () => {\n            this.disable();\n            if (this._overlayRef.hasAttached()) {\n                this._ngZone.run(() => this._overlayRef.detach());\n            }\n        };\n    }\n    /**\n     * Attaches this scroll strategy to an overlay.\n     * @param {?} overlayRef\n     * @return {?}\n     */\n    attach(overlayRef) {\n        if (this._overlayRef) {\n            throw getMatScrollStrategyAlreadyAttachedError();\n        }\n        this._overlayRef = overlayRef;\n    }\n    /**\n     * Enables the closing of the attached overlay on scroll.\n     * @return {?}\n     */\n    enable() {\n        if (this._scrollSubscription) {\n            return;\n        }\n        /** @type {?} */\n        const stream = this._scrollDispatcher.scrolled(0);\n        if (this._config && this._config.threshold && this._config.threshold > 1) {\n            this._initialScrollPosition = this._viewportRuler.getViewportScrollPosition().top;\n            this._scrollSubscription = stream.subscribe(() => {\n                /** @type {?} */\n                const scrollPosition = this._viewportRuler.getViewportScrollPosition().top;\n                if (Math.abs(scrollPosition - this._initialScrollPosition) > /** @type {?} */ ((/** @type {?} */ ((this._config)).threshold))) {\n                    this._detach();\n                }\n                else {\n                    this._overlayRef.updatePosition();\n                }\n            });\n        }\n        else {\n            this._scrollSubscription = stream.subscribe(this._detach);\n        }\n    }\n    /**\n     * Disables the closing the attached overlay on scroll.\n     * @return {?}\n     */\n    disable() {\n        if (this._scrollSubscription) {\n            this._scrollSubscription.unsubscribe();\n            this._scrollSubscription = null;\n        }\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * Scroll strategy that doesn't do anything.\n */\nclass NoopScrollStrategy {\n    /**\n     * Does nothing, as this scroll strategy is a no-op.\n     * @return {?}\n     */\n    enable() { }\n    /**\n     * Does nothing, as this scroll strategy is a no-op.\n     * @return {?}\n     */\n    disable() { }\n    /**\n     * Does nothing, as this scroll strategy is a no-op.\n     * @return {?}\n     */\n    attach() { }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n// TODO(jelbourn): move this to live with the rest of the scrolling code\n// TODO(jelbourn): someday replace this with IntersectionObservers\n/**\n * Gets whether an element is scrolled outside of view by any of its parent scrolling containers.\n * \\@docs-private\n * @param {?} element Dimensions of the element (from getBoundingClientRect)\n * @param {?} scrollContainers Dimensions of element's scrolling containers (from getBoundingClientRect)\n * @return {?} Whether the element is scrolled out of view\n */\nfunction isElementScrolledOutsideView(element, scrollContainers) {\n    return scrollContainers.some(containerBounds => {\n        /** @type {?} */\n        const outsideAbove = element.bottom < containerBounds.top;\n        /** @type {?} */\n        const outsideBelow = element.top > containerBounds.bottom;\n        /** @type {?} */\n        const outsideLeft = element.right < containerBounds.left;\n        /** @type {?} */\n        const outsideRight = element.left > containerBounds.right;\n        return outsideAbove || outsideBelow || outsideLeft || outsideRight;\n    });\n}\n/**\n * Gets whether an element is clipped by any of its scrolling containers.\n * \\@docs-private\n * @param {?} element Dimensions of the element (from getBoundingClientRect)\n * @param {?} scrollContainers Dimensions of element's scrolling containers (from getBoundingClientRect)\n * @return {?} Whether the element is clipped\n */\nfunction isElementClippedByScrolling(element, scrollContainers) {\n    return scrollContainers.some(scrollContainerRect => {\n        /** @type {?} */\n        const clippedAbove = element.top < scrollContainerRect.top;\n        /** @type {?} */\n        const clippedBelow = element.bottom > scrollContainerRect.bottom;\n        /** @type {?} */\n        const clippedLeft = element.left < scrollContainerRect.left;\n        /** @type {?} */\n        const clippedRight = element.right > scrollContainerRect.right;\n        return clippedAbove || clippedBelow || clippedLeft || clippedRight;\n    });\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * Strategy that will update the element position as the user is scrolling.\n */\nclass RepositionScrollStrategy {\n    /**\n     * @param {?} _scrollDispatcher\n     * @param {?} _viewportRuler\n     * @param {?} _ngZone\n     * @param {?=} _config\n     */\n    constructor(_scrollDispatcher, _viewportRuler, _ngZone, _config) {\n        this._scrollDispatcher = _scrollDispatcher;\n        this._viewportRuler = _viewportRuler;\n        this._ngZone = _ngZone;\n        this._config = _config;\n        this._scrollSubscription = null;\n    }\n    /**\n     * Attaches this scroll strategy to an overlay.\n     * @param {?} overlayRef\n     * @return {?}\n     */\n    attach(overlayRef) {\n        if (this._overlayRef) {\n            throw getMatScrollStrategyAlreadyAttachedError();\n        }\n        this._overlayRef = overlayRef;\n    }\n    /**\n     * Enables repositioning of the attached overlay on scroll.\n     * @return {?}\n     */\n    enable() {\n        if (!this._scrollSubscription) {\n            /** @type {?} */\n            const throttle = this._config ? this._config.scrollThrottle : 0;\n            this._scrollSubscription = this._scrollDispatcher.scrolled(throttle).subscribe(() => {\n                this._overlayRef.updatePosition();\n                // TODO(crisbeto): make `close` on by default once all components can handle it.\n                if (this._config && this._config.autoClose) {\n                    /** @type {?} */\n                    const overlayRect = this._overlayRef.overlayElement.getBoundingClientRect();\n                    const { width, height } = this._viewportRuler.getViewportSize();\n                    /** @type {?} */\n                    const parentRects = [{ width, height, bottom: height, right: width, top: 0, left: 0 }];\n                    if (isElementScrolledOutsideView(overlayRect, parentRects)) {\n                        this.disable();\n                        this._ngZone.run(() => this._overlayRef.detach());\n                    }\n                }\n            });\n        }\n    }\n    /**\n     * Disables repositioning of the attached overlay on scroll.\n     * @return {?}\n     */\n    disable() {\n        if (this._scrollSubscription) {\n            this._scrollSubscription.unsubscribe();\n            this._scrollSubscription = null;\n        }\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * Options for how an overlay will handle scrolling.\n *\n * Users can provide a custom value for `ScrollStrategyOptions` to replace the default\n * behaviors. This class primarily acts as a factory for ScrollStrategy instances.\n */\nclass ScrollStrategyOptions {\n    /**\n     * @param {?} _scrollDispatcher\n     * @param {?} _viewportRuler\n     * @param {?} _ngZone\n     * @param {?} document\n     */\n    constructor(_scrollDispatcher, _viewportRuler, _ngZone, document) {\n        this._scrollDispatcher = _scrollDispatcher;\n        this._viewportRuler = _viewportRuler;\n        this._ngZone = _ngZone;\n        /**\n         * Do nothing on scroll.\n         */\n        this.noop = () => new NoopScrollStrategy();\n        /**\n         * Close the overlay as soon as the user scrolls.\n         * @param config Configuration to be used inside the scroll strategy.\n         */\n        this.close = (config) => new CloseScrollStrategy(this._scrollDispatcher, this._ngZone, this._viewportRuler, config);\n        /**\n         * Block scrolling.\n         */\n        this.block = () => new BlockScrollStrategy(this._viewportRuler, this._document);\n        /**\n         * Update the overlay's position on scroll.\n         * @param config Configuration to be used inside the scroll strategy.\n         * Allows debouncing the reposition calls.\n         */\n        this.reposition = (config) => new RepositionScrollStrategy(this._scrollDispatcher, this._viewportRuler, this._ngZone, config);\n        this._document = document;\n    }\n}\nScrollStrategyOptions.ɵfac = function ScrollStrategyOptions_Factory(t) { return new (t || ScrollStrategyOptions)(ɵngcc0.ɵɵinject(ɵngcc1.ScrollDispatcher), ɵngcc0.ɵɵinject(ɵngcc1.ViewportRuler), ɵngcc0.ɵɵinject(ɵngcc0.NgZone), ɵngcc0.ɵɵinject(DOCUMENT)); };\nScrollStrategyOptions.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: ScrollStrategyOptions, factory: ScrollStrategyOptions.ɵfac, providedIn: 'root' });\n/** @nocollapse */\nScrollStrategyOptions.ctorParameters = () => [\n    { type: ScrollDispatcher },\n    { type: ViewportRuler },\n    { type: NgZone },\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }\n];\n/** @nocollapse */ ScrollStrategyOptions.ngInjectableDef = defineInjectable({ factory: function ScrollStrategyOptions_Factory() { return new ScrollStrategyOptions(inject(ScrollDispatcher), inject(ViewportRuler), inject(NgZone), inject(DOCUMENT)); }, token: ScrollStrategyOptions, providedIn: \"root\" });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ScrollStrategyOptions, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return [{ type: ɵngcc1.ScrollDispatcher }, { type: ɵngcc1.ViewportRuler }, { type: ɵngcc0.NgZone }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }]; }, null); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * Initial configuration used when creating an overlay.\n */\nclass OverlayConfig {\n    /**\n     * @param {?=} config\n     */\n    constructor(config) {\n        /**\n         * Strategy to be used when handling scroll events while the overlay is open.\n         */\n        this.scrollStrategy = new NoopScrollStrategy();\n        /**\n         * Custom class to add to the overlay pane.\n         */\n        this.panelClass = '';\n        /**\n         * Whether the overlay has a backdrop.\n         */\n        this.hasBackdrop = false;\n        /**\n         * Custom class to add to the backdrop\n         */\n        this.backdropClass = 'cdk-overlay-dark-backdrop';\n        /**\n         * Whether the overlay should be disposed of when the user goes backwards/forwards in history.\n         * Note that this usually doesn't include clicking on links (unless the user is using\n         * the `HashLocationStrategy`).\n         */\n        this.disposeOnNavigation = false;\n        if (config) {\n            Object.keys(config).forEach(k => {\n                /** @type {?} */\n                const key = /** @type {?} */ (k);\n                if (typeof config[key] !== 'undefined') {\n                    this[key] = config[key];\n                }\n            });\n        }\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * The points of the origin element and the overlay element to connect.\n */\nclass ConnectionPositionPair {\n    /**\n     * @param {?} origin\n     * @param {?} overlay\n     * @param {?=} offsetX\n     * @param {?=} offsetY\n     * @param {?=} panelClass\n     */\n    constructor(origin, overlay, offsetX, offsetY, panelClass) {\n        this.offsetX = offsetX;\n        this.offsetY = offsetY;\n        this.panelClass = panelClass;\n        this.originX = origin.originX;\n        this.originY = origin.originY;\n        this.overlayX = overlay.overlayX;\n        this.overlayY = overlay.overlayY;\n    }\n}\n/**\n * Set of properties regarding the position of the origin and overlay relative to the viewport\n * with respect to the containing Scrollable elements.\n *\n * The overlay and origin are clipped if any part of their bounding client rectangle exceeds the\n * bounds of any one of the strategy's Scrollable's bounding client rectangle.\n *\n * The overlay and origin are outside view if there is no overlap between their bounding client\n * rectangle and any one of the strategy's Scrollable's bounding client rectangle.\n *\n *       -----------                    -----------\n *       | outside |                    | clipped |\n *       |  view   |              --------------------------\n *       |         |              |     |         |        |\n *       ----------               |     -----------        |\n *  --------------------------    |                        |\n *  |                        |    |      Scrollable        |\n *  |                        |    |                        |\n *  |                        |     --------------------------\n *  |      Scrollable        |\n *  |                        |\n *  --------------------------\n *\n * \\@docs-private\n */\nclass ScrollingVisibility {\n}\n/**\n * The change event emitted by the strategy when a fallback position is used.\n */\nclass ConnectedOverlayPositionChange {\n    /**\n     * @param {?} connectionPair\n     * @param {?} scrollableViewProperties\n     */\n    constructor(connectionPair, /** @docs-private */\n    scrollableViewProperties) {\n        this.connectionPair = connectionPair;\n        this.scrollableViewProperties = scrollableViewProperties;\n    }\n}\n/** @nocollapse */\nConnectedOverlayPositionChange.ctorParameters = () => [\n    { type: ConnectionPositionPair },\n    { type: ScrollingVisibility, decorators: [{ type: Optional }] }\n];\n/**\n * Validates whether a vertical position property matches the expected values.\n * \\@docs-private\n * @param {?} property Name of the property being validated.\n * @param {?} value Value of the property being validated.\n * @return {?}\n */\nfunction validateVerticalPosition(property, value) {\n    if (value !== 'top' && value !== 'bottom' && value !== 'center') {\n        throw Error(`ConnectedPosition: Invalid ${property} \"${value}\". ` +\n            `Expected \"top\", \"bottom\" or \"center\".`);\n    }\n}\n/**\n * Validates whether a horizontal position property matches the expected values.\n * \\@docs-private\n * @param {?} property Name of the property being validated.\n * @param {?} value Value of the property being validated.\n * @return {?}\n */\nfunction validateHorizontalPosition(property, value) {\n    if (value !== 'start' && value !== 'end' && value !== 'center') {\n        throw Error(`ConnectedPosition: Invalid ${property} \"${value}\". ` +\n            `Expected \"start\", \"end\" or \"center\".`);\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * Service for dispatching keyboard events that land on the body to appropriate overlay ref,\n * if any. It maintains a list of attached overlays to determine best suited overlay based\n * on event target and order of overlay opens.\n */\nclass OverlayKeyboardDispatcher {\n    /**\n     * @param {?} document\n     */\n    constructor(document) {\n        /**\n         * Currently attached overlays in the order they were attached.\n         */\n        this._attachedOverlays = [];\n        /**\n         * Keyboard event listener that will be attached to the body.\n         */\n        this._keydownListener = (event) => {\n            /** @type {?} */\n            const overlays = this._attachedOverlays;\n            for (let i = overlays.length - 1; i > -1; i--) {\n                // Dispatch the keydown event to the top overlay which has subscribers to its keydown events.\n                // We want to target the most recent overlay, rather than trying to match where the event came\n                // from, because some components might open an overlay, but keep focus on a trigger element\n                // (e.g. for select and autocomplete). We skip overlays without keydown event subscriptions,\n                // because we don't want overlays that don't handle keyboard events to block the ones below\n                // them that do.\n                if (overlays[i]._keydownEventSubscriptions > 0) {\n                    overlays[i]._keydownEvents.next(event);\n                    break;\n                }\n            }\n        };\n        this._document = document;\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this._detach();\n    }\n    /**\n     * Add a new overlay to the list of attached overlay refs.\n     * @param {?} overlayRef\n     * @return {?}\n     */\n    add(overlayRef) {\n        // Ensure that we don't get the same overlay multiple times.\n        this.remove(overlayRef);\n        // Lazily start dispatcher once first overlay is added\n        if (!this._isAttached) {\n            this._document.body.addEventListener('keydown', this._keydownListener, true);\n            this._isAttached = true;\n        }\n        this._attachedOverlays.push(overlayRef);\n    }\n    /**\n     * Remove an overlay from the list of attached overlay refs.\n     * @param {?} overlayRef\n     * @return {?}\n     */\n    remove(overlayRef) {\n        /** @type {?} */\n        const index = this._attachedOverlays.indexOf(overlayRef);\n        if (index > -1) {\n            this._attachedOverlays.splice(index, 1);\n        }\n        // Remove the global listener once there are no more overlays.\n        if (this._attachedOverlays.length === 0) {\n            this._detach();\n        }\n    }\n    /**\n     * Detaches the global keyboard event listener.\n     * @return {?}\n     */\n    _detach() {\n        if (this._isAttached) {\n            this._document.body.removeEventListener('keydown', this._keydownListener, true);\n            this._isAttached = false;\n        }\n    }\n}\nOverlayKeyboardDispatcher.ɵfac = function OverlayKeyboardDispatcher_Factory(t) { return new (t || OverlayKeyboardDispatcher)(ɵngcc0.ɵɵinject(DOCUMENT)); };\nOverlayKeyboardDispatcher.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: OverlayKeyboardDispatcher, factory: OverlayKeyboardDispatcher.ɵfac, providedIn: 'root' });\n/** @nocollapse */\nOverlayKeyboardDispatcher.ctorParameters = () => [\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }\n];\n/** @nocollapse */ OverlayKeyboardDispatcher.ngInjectableDef = defineInjectable({ factory: function OverlayKeyboardDispatcher_Factory() { return new OverlayKeyboardDispatcher(inject(DOCUMENT)); }, token: OverlayKeyboardDispatcher, providedIn: \"root\" });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(OverlayKeyboardDispatcher, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return [{ type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }]; }, null); })();\n/**\n * \\@docs-private \\@deprecated \\@breaking-change 8.0.0\n * @param {?} dispatcher\n * @param {?} _document\n * @return {?}\n */\nfunction OVERLAY_KEYBOARD_DISPATCHER_PROVIDER_FACTORY(dispatcher, _document) {\n    return dispatcher || new OverlayKeyboardDispatcher(_document);\n}\n/** *\n * \\@docs-private \\@deprecated \\@breaking-change 8.0.0\n  @type {?} */\nconst OVERLAY_KEYBOARD_DISPATCHER_PROVIDER = {\n    // If there is already an OverlayKeyboardDispatcher available, use that.\n    // Otherwise, provide a new one.\n    provide: OverlayKeyboardDispatcher,\n    deps: [\n        [new Optional(), new SkipSelf(), OverlayKeyboardDispatcher],\n        /** @type {?} */ ((\n        // Coerce to `InjectionToken` so that the `deps` match the \"shape\"\n        // of the type expected by Angular\n        DOCUMENT))\n    ],\n    useFactory: OVERLAY_KEYBOARD_DISPATCHER_PROVIDER_FACTORY\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * Container inside which all overlays will render.\n */\nclass OverlayContainer {\n    /**\n     * @param {?} _document\n     */\n    constructor(_document) {\n        this._document = _document;\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        if (this._containerElement && this._containerElement.parentNode) {\n            this._containerElement.parentNode.removeChild(this._containerElement);\n        }\n    }\n    /**\n     * This method returns the overlay container element. It will lazily\n     * create the element the first time  it is called to facilitate using\n     * the container in non-browser environments.\n     * @return {?} the container element\n     */\n    getContainerElement() {\n        if (!this._containerElement) {\n            this._createContainer();\n        }\n        return this._containerElement;\n    }\n    /**\n     * Create the overlay container element, which is simply a div\n     * with the 'cdk-overlay-container' class on the document body.\n     * @return {?}\n     */\n    _createContainer() {\n        /** @type {?} */\n        const container = this._document.createElement('div');\n        container.classList.add('cdk-overlay-container');\n        this._document.body.appendChild(container);\n        this._containerElement = container;\n    }\n}\nOverlayContainer.ɵfac = function OverlayContainer_Factory(t) { return new (t || OverlayContainer)(ɵngcc0.ɵɵinject(DOCUMENT)); };\nOverlayContainer.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: OverlayContainer, factory: OverlayContainer.ɵfac, providedIn: 'root' });\n/** @nocollapse */\nOverlayContainer.ctorParameters = () => [\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }\n];\n/** @nocollapse */ OverlayContainer.ngInjectableDef = defineInjectable({ factory: function OverlayContainer_Factory() { return new OverlayContainer(inject(DOCUMENT)); }, token: OverlayContainer, providedIn: \"root\" });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(OverlayContainer, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return [{ type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }]; }, null); })();\n/**\n * \\@docs-private \\@deprecated \\@breaking-change 8.0.0\n * @param {?} parentContainer\n * @param {?} _document\n * @return {?}\n */\nfunction OVERLAY_CONTAINER_PROVIDER_FACTORY(parentContainer, _document) {\n    return parentContainer || new OverlayContainer(_document);\n}\n/** *\n * \\@docs-private \\@deprecated \\@breaking-change 8.0.0\n  @type {?} */\nconst OVERLAY_CONTAINER_PROVIDER = {\n    // If there is already an OverlayContainer available, use that. Otherwise, provide a new one.\n    provide: OverlayContainer,\n    deps: [\n        [new Optional(), new SkipSelf(), OverlayContainer],\n        /** @type {?} */ (DOCUMENT // We need to use the InjectionToken somewhere to keep TS happy\n        ) // We need to use the InjectionToken somewhere to keep TS happy\n    ],\n    useFactory: OVERLAY_CONTAINER_PROVIDER_FACTORY\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * Reference to an overlay that has been created with the Overlay service.\n * Used to manipulate or dispose of said overlay.\n */\nclass OverlayRef {\n    /**\n     * @param {?} _portalOutlet\n     * @param {?} _host\n     * @param {?} _pane\n     * @param {?} _config\n     * @param {?} _ngZone\n     * @param {?} _keyboardDispatcher\n     * @param {?} _document\n     * @param {?=} _location\n     */\n    constructor(_portalOutlet, _host, _pane, _config, _ngZone, _keyboardDispatcher, _document, _location) {\n        this._portalOutlet = _portalOutlet;\n        this._host = _host;\n        this._pane = _pane;\n        this._config = _config;\n        this._ngZone = _ngZone;\n        this._keyboardDispatcher = _keyboardDispatcher;\n        this._document = _document;\n        this._location = _location;\n        this._backdropElement = null;\n        this._backdropClick = new Subject();\n        this._attachments = new Subject();\n        this._detachments = new Subject();\n        this._locationChanges = Subscription.EMPTY;\n        this._keydownEventsObservable = Observable.create((observer) => {\n            /** @type {?} */\n            const subscription = this._keydownEvents.subscribe(observer);\n            this._keydownEventSubscriptions++;\n            return () => {\n                subscription.unsubscribe();\n                this._keydownEventSubscriptions--;\n            };\n        });\n        /**\n         * Stream of keydown events dispatched to this overlay.\n         */\n        this._keydownEvents = new Subject();\n        /**\n         * Amount of subscriptions to the keydown events.\n         */\n        this._keydownEventSubscriptions = 0;\n        if (_config.scrollStrategy) {\n            _config.scrollStrategy.attach(this);\n        }\n        this._positionStrategy = _config.positionStrategy;\n    }\n    /**\n     * The overlay's HTML element\n     * @return {?}\n     */\n    get overlayElement() {\n        return this._pane;\n    }\n    /**\n     * The overlay's backdrop HTML element.\n     * @return {?}\n     */\n    get backdropElement() {\n        return this._backdropElement;\n    }\n    /**\n     * Wrapper around the panel element. Can be used for advanced\n     * positioning where a wrapper with specific styling is\n     * required around the overlay pane.\n     * @return {?}\n     */\n    get hostElement() {\n        return this._host;\n    }\n    /**\n     * Attaches content, given via a Portal, to the overlay.\n     * If the overlay is configured to have a backdrop, it will be created.\n     *\n     * @param {?} portal Portal instance to which to attach the overlay.\n     * @return {?} The portal attachment result.\n     */\n    attach(portal) {\n        /** @type {?} */\n        let attachResult = this._portalOutlet.attach(portal);\n        if (this._positionStrategy) {\n            this._positionStrategy.attach(this);\n        }\n        // Update the pane element with the given configuration.\n        if (!this._host.parentElement && this._previousHostParent) {\n            this._previousHostParent.appendChild(this._host);\n        }\n        this._updateStackingOrder();\n        this._updateElementSize();\n        this._updateElementDirection();\n        if (this._config.scrollStrategy) {\n            this._config.scrollStrategy.enable();\n        }\n        // Update the position once the zone is stable so that the overlay will be fully rendered\n        // before attempting to position it, as the position may depend on the size of the rendered\n        // content.\n        this._ngZone.onStable\n            .asObservable()\n            .pipe(take(1))\n            .subscribe(() => {\n            // The overlay could've been detached before the zone has stabilized.\n            if (this.hasAttached()) {\n                this.updatePosition();\n            }\n        });\n        // Enable pointer events for the overlay pane element.\n        this._togglePointerEvents(true);\n        if (this._config.hasBackdrop) {\n            this._attachBackdrop();\n        }\n        if (this._config.panelClass) {\n            this._toggleClasses(this._pane, this._config.panelClass, true);\n        }\n        // Only emit the `attachments` event once all other setup is done.\n        this._attachments.next();\n        // Track this overlay by the keyboard dispatcher\n        this._keyboardDispatcher.add(this);\n        // @breaking-change 8.0.0 remove the null check for `_location`\n        // once the constructor parameter is made required.\n        if (this._config.disposeOnNavigation && this._location) {\n            this._locationChanges = this._location.subscribe(() => this.dispose());\n        }\n        return attachResult;\n    }\n    /**\n     * Detaches an overlay from a portal.\n     * @return {?} The portal detachment result.\n     */\n    detach() {\n        if (!this.hasAttached()) {\n            return;\n        }\n        this.detachBackdrop();\n        // When the overlay is detached, the pane element should disable pointer events.\n        // This is necessary because otherwise the pane element will cover the page and disable\n        // pointer events therefore. Depends on the position strategy and the applied pane boundaries.\n        this._togglePointerEvents(false);\n        if (this._positionStrategy && this._positionStrategy.detach) {\n            this._positionStrategy.detach();\n        }\n        if (this._config.scrollStrategy) {\n            this._config.scrollStrategy.disable();\n        }\n        /** @type {?} */\n        const detachmentResult = this._portalOutlet.detach();\n        // Only emit after everything is detached.\n        this._detachments.next();\n        // Remove this overlay from keyboard dispatcher tracking.\n        this._keyboardDispatcher.remove(this);\n        // Keeping the host element in DOM the can cause scroll jank, because it still gets\n        // rendered, even though it's transparent and unclickable which is why we remove it.\n        this._detachContentWhenStable();\n        // Stop listening for location changes.\n        this._locationChanges.unsubscribe();\n        return detachmentResult;\n    }\n    /**\n     * Cleans up the overlay from the DOM.\n     * @return {?}\n     */\n    dispose() {\n        /** @type {?} */\n        const isAttached = this.hasAttached();\n        if (this._positionStrategy) {\n            this._positionStrategy.dispose();\n        }\n        if (this._config.scrollStrategy) {\n            this._config.scrollStrategy.disable();\n        }\n        this.detachBackdrop();\n        this._locationChanges.unsubscribe();\n        this._keyboardDispatcher.remove(this);\n        this._portalOutlet.dispose();\n        this._attachments.complete();\n        this._backdropClick.complete();\n        this._keydownEvents.complete();\n        if (this._host && this._host.parentNode) {\n            this._host.parentNode.removeChild(this._host);\n            this._host = /** @type {?} */ ((null));\n        }\n        this._previousHostParent = this._pane = /** @type {?} */ ((null));\n        if (isAttached) {\n            this._detachments.next();\n        }\n        this._detachments.complete();\n    }\n    /**\n     * Whether the overlay has attached content.\n     * @return {?}\n     */\n    hasAttached() {\n        return this._portalOutlet.hasAttached();\n    }\n    /**\n     * Gets an observable that emits when the backdrop has been clicked.\n     * @return {?}\n     */\n    backdropClick() {\n        return this._backdropClick.asObservable();\n    }\n    /**\n     * Gets an observable that emits when the overlay has been attached.\n     * @return {?}\n     */\n    attachments() {\n        return this._attachments.asObservable();\n    }\n    /**\n     * Gets an observable that emits when the overlay has been detached.\n     * @return {?}\n     */\n    detachments() {\n        return this._detachments.asObservable();\n    }\n    /**\n     * Gets an observable of keydown events targeted to this overlay.\n     * @return {?}\n     */\n    keydownEvents() {\n        return this._keydownEventsObservable;\n    }\n    /**\n     * Gets the the current overlay configuration, which is immutable.\n     * @return {?}\n     */\n    getConfig() {\n        return this._config;\n    }\n    /**\n     * Updates the position of the overlay based on the position strategy.\n     * @return {?}\n     */\n    updatePosition() {\n        if (this._positionStrategy) {\n            this._positionStrategy.apply();\n        }\n    }\n    /**\n     * Switches to a new position strategy and updates the overlay position.\n     * @param {?} strategy\n     * @return {?}\n     */\n    updatePositionStrategy(strategy) {\n        if (strategy === this._positionStrategy) {\n            return;\n        }\n        if (this._positionStrategy) {\n            this._positionStrategy.dispose();\n        }\n        this._positionStrategy = strategy;\n        if (this.hasAttached()) {\n            strategy.attach(this);\n            this.updatePosition();\n        }\n    }\n    /**\n     * Update the size properties of the overlay.\n     * @param {?} sizeConfig\n     * @return {?}\n     */\n    updateSize(sizeConfig) {\n        this._config = Object.assign({}, this._config, sizeConfig);\n        this._updateElementSize();\n    }\n    /**\n     * Sets the LTR/RTL direction for the overlay.\n     * @param {?} dir\n     * @return {?}\n     */\n    setDirection(dir) {\n        this._config = Object.assign({}, this._config, { direction: dir });\n        this._updateElementDirection();\n    }\n    /**\n     * Returns the layout direction of the overlay panel.\n     * @return {?}\n     */\n    getDirection() {\n        /** @type {?} */\n        const direction = this._config.direction;\n        if (!direction) {\n            return 'ltr';\n        }\n        return typeof direction === 'string' ? direction : direction.value;\n    }\n    /**\n     * Updates the text direction of the overlay panel.\n     * @return {?}\n     */\n    _updateElementDirection() {\n        this._host.setAttribute('dir', this.getDirection());\n    }\n    /**\n     * Updates the size of the overlay element based on the overlay config.\n     * @return {?}\n     */\n    _updateElementSize() {\n        /** @type {?} */\n        const style = this._pane.style;\n        style.width = coerceCssPixelValue(this._config.width);\n        style.height = coerceCssPixelValue(this._config.height);\n        style.minWidth = coerceCssPixelValue(this._config.minWidth);\n        style.minHeight = coerceCssPixelValue(this._config.minHeight);\n        style.maxWidth = coerceCssPixelValue(this._config.maxWidth);\n        style.maxHeight = coerceCssPixelValue(this._config.maxHeight);\n    }\n    /**\n     * Toggles the pointer events for the overlay pane element.\n     * @param {?} enablePointer\n     * @return {?}\n     */\n    _togglePointerEvents(enablePointer) {\n        this._pane.style.pointerEvents = enablePointer ? 'auto' : 'none';\n    }\n    /**\n     * Attaches a backdrop for this overlay.\n     * @return {?}\n     */\n    _attachBackdrop() {\n        /** @type {?} */\n        const showingClass = 'cdk-overlay-backdrop-showing';\n        this._backdropElement = this._document.createElement('div');\n        this._backdropElement.classList.add('cdk-overlay-backdrop');\n        if (this._config.backdropClass) {\n            this._toggleClasses(this._backdropElement, this._config.backdropClass, true);\n        } /** @type {?} */\n        ((\n        // Insert the backdrop before the pane in the DOM order,\n        // in order to handle stacked overlays properly.\n        this._host.parentElement)).insertBefore(this._backdropElement, this._host);\n        // Forward backdrop clicks such that the consumer of the overlay can perform whatever\n        // action desired when such a click occurs (usually closing the overlay).\n        this._backdropElement.addEventListener('click', (event) => this._backdropClick.next(event));\n        // Add class to fade-in the backdrop after one frame.\n        if (typeof requestAnimationFrame !== 'undefined') {\n            this._ngZone.runOutsideAngular(() => {\n                requestAnimationFrame(() => {\n                    if (this._backdropElement) {\n                        this._backdropElement.classList.add(showingClass);\n                    }\n                });\n            });\n        }\n        else {\n            this._backdropElement.classList.add(showingClass);\n        }\n    }\n    /**\n     * Updates the stacking order of the element, moving it to the top if necessary.\n     * This is required in cases where one overlay was detached, while another one,\n     * that should be behind it, was destroyed. The next time both of them are opened,\n     * the stacking will be wrong, because the detached element's pane will still be\n     * in its original DOM position.\n     * @return {?}\n     */\n    _updateStackingOrder() {\n        if (this._host.nextSibling) {\n            /** @type {?} */ ((this._host.parentNode)).appendChild(this._host);\n        }\n    }\n    /**\n     * Detaches the backdrop (if any) associated with the overlay.\n     * @return {?}\n     */\n    detachBackdrop() {\n        /** @type {?} */\n        let backdropToDetach = this._backdropElement;\n        if (backdropToDetach) {\n            /** @type {?} */\n            let timeoutId;\n            /** @type {?} */\n            let finishDetach = () => {\n                // It may not be attached to anything in certain cases (e.g. unit tests).\n                if (backdropToDetach && backdropToDetach.parentNode) {\n                    backdropToDetach.parentNode.removeChild(backdropToDetach);\n                }\n                // It is possible that a new portal has been attached to this overlay since we started\n                // removing the backdrop. If that is the case, only clear the backdrop reference if it\n                // is still the same instance that we started to remove.\n                if (this._backdropElement == backdropToDetach) {\n                    this._backdropElement = null;\n                }\n                clearTimeout(timeoutId);\n            };\n            backdropToDetach.classList.remove('cdk-overlay-backdrop-showing');\n            if (this._config.backdropClass) {\n                this._toggleClasses(backdropToDetach, this._config.backdropClass, false);\n            }\n            this._ngZone.runOutsideAngular(() => {\n                /** @type {?} */ ((backdropToDetach)).addEventListener('transitionend', finishDetach);\n            });\n            // If the backdrop doesn't have a transition, the `transitionend` event won't fire.\n            // In this case we make it unclickable and we try to remove it after a delay.\n            backdropToDetach.style.pointerEvents = 'none';\n            // Run this outside the Angular zone because there's nothing that Angular cares about.\n            // If it were to run inside the Angular zone, every test that used Overlay would have to be\n            // either async or fakeAsync.\n            timeoutId = this._ngZone.runOutsideAngular(() => setTimeout(finishDetach, 500));\n        }\n    }\n    /**\n     * Toggles a single CSS class or an array of classes on an element.\n     * @param {?} element\n     * @param {?} cssClasses\n     * @param {?} isAdd\n     * @return {?}\n     */\n    _toggleClasses(element, cssClasses, isAdd) {\n        /** @type {?} */\n        const classList = element.classList;\n        coerceArray(cssClasses).forEach(cssClass => {\n            // We can't do a spread here, because IE doesn't support setting multiple classes.\n            isAdd ? classList.add(cssClass) : classList.remove(cssClass);\n        });\n    }\n    /**\n     * Detaches the overlay content next time the zone stabilizes.\n     * @return {?}\n     */\n    _detachContentWhenStable() {\n        // Normally we wouldn't have to explicitly run this outside the `NgZone`, however\n        // if the consumer is using `zone-patch-rxjs`, the `Subscription.unsubscribe` call will\n        // be patched to run inside the zone, which will throw us into an infinite loop.\n        this._ngZone.runOutsideAngular(() => {\n            /** @type {?} */\n            const subscription = this._ngZone.onStable\n                .asObservable()\n                .pipe(takeUntil(merge(this._attachments, this._detachments)))\n                .subscribe(() => {\n                // Needs a couple of checks for the pane and host, because\n                // they may have been removed by the time the zone stabilizes.\n                if (!this._pane || !this._host || this._pane.children.length === 0) {\n                    if (this._pane && this._config.panelClass) {\n                        this._toggleClasses(this._pane, this._config.panelClass, false);\n                    }\n                    if (this._host && this._host.parentElement) {\n                        this._previousHostParent = this._host.parentElement;\n                        this._previousHostParent.removeChild(this._host);\n                    }\n                    subscription.unsubscribe();\n                }\n            });\n        });\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/** *\n * Class to be added to the overlay bounding box.\n  @type {?} */\nconst boundingBoxClass = 'cdk-overlay-connected-position-bounding-box';\n/**\n * A strategy for positioning overlays. Using this strategy, an overlay is given an\n * implicit position relative some origin element. The relative position is defined in terms of\n * a point on the origin element that is connected to a point on the overlay element. For example,\n * a basic dropdown is connecting the bottom-left corner of the origin to the top-left corner\n * of the overlay.\n */\nclass FlexibleConnectedPositionStrategy {\n    /**\n     * @param {?} connectedTo\n     * @param {?} _viewportRuler\n     * @param {?} _document\n     * @param {?=} _platform\n     * @param {?=} _overlayContainer\n     */\n    constructor(connectedTo, _viewportRuler, _document, _platform, _overlayContainer) {\n        this._viewportRuler = _viewportRuler;\n        this._document = _document;\n        this._platform = _platform;\n        this._overlayContainer = _overlayContainer;\n        /**\n         * Last size used for the bounding box. Used to avoid resizing the overlay after open.\n         */\n        this._lastBoundingBoxSize = { width: 0, height: 0 };\n        /**\n         * Whether the overlay was pushed in a previous positioning.\n         */\n        this._isPushed = false;\n        /**\n         * Whether the overlay can be pushed on-screen on the initial open.\n         */\n        this._canPush = true;\n        /**\n         * Whether the overlay can grow via flexible width/height after the initial open.\n         */\n        this._growAfterOpen = false;\n        /**\n         * Whether the overlay's width and height can be constrained to fit within the viewport.\n         */\n        this._hasFlexibleDimensions = true;\n        /**\n         * Whether the overlay position is locked.\n         */\n        this._positionLocked = false;\n        /**\n         * Amount of space that must be maintained between the overlay and the edge of the viewport.\n         */\n        this._viewportMargin = 0;\n        /**\n         * The Scrollable containers used to check scrollable view properties on position change.\n         */\n        this.scrollables = [];\n        /**\n         * Ordered list of preferred positions, from most to least desirable.\n         */\n        this._preferredPositions = [];\n        /**\n         * Subject that emits whenever the position changes.\n         */\n        this._positionChanges = new Subject();\n        /**\n         * Subscription to viewport size changes.\n         */\n        this._resizeSubscription = Subscription.EMPTY;\n        /**\n         * Default offset for the overlay along the x axis.\n         */\n        this._offsetX = 0;\n        /**\n         * Default offset for the overlay along the y axis.\n         */\n        this._offsetY = 0;\n        /**\n         * Amount of subscribers to the `positionChanges` stream.\n         */\n        this._positionChangeSubscriptions = 0;\n        /**\n         * Keeps track of the CSS classes that the position strategy has applied on the overlay panel.\n         */\n        this._appliedPanelClasses = [];\n        /**\n         * Observable sequence of position changes.\n         */\n        this.positionChanges = Observable.create((observer) => {\n            /** @type {?} */\n            const subscription = this._positionChanges.subscribe(observer);\n            this._positionChangeSubscriptions++;\n            return () => {\n                subscription.unsubscribe();\n                this._positionChangeSubscriptions--;\n            };\n        });\n        this.setOrigin(connectedTo);\n    }\n    /**\n     * Ordered list of preferred positions, from most to least desirable.\n     * @return {?}\n     */\n    get positions() {\n        return this._preferredPositions;\n    }\n    /**\n     * Attaches this position strategy to an overlay.\n     * @param {?} overlayRef\n     * @return {?}\n     */\n    attach(overlayRef) {\n        if (this._overlayRef && overlayRef !== this._overlayRef) {\n            throw Error('This position strategy is already attached to an overlay');\n        }\n        this._validatePositions();\n        overlayRef.hostElement.classList.add(boundingBoxClass);\n        this._overlayRef = overlayRef;\n        this._boundingBox = overlayRef.hostElement;\n        this._pane = overlayRef.overlayElement;\n        this._isDisposed = false;\n        this._isInitialRender = true;\n        this._lastPosition = null;\n        this._resizeSubscription.unsubscribe();\n        this._resizeSubscription = this._viewportRuler.change().subscribe(() => {\n            // When the window is resized, we want to trigger the next reposition as if it\n            // was an initial render, in order for the strategy to pick a new optimal position,\n            // otherwise position locking will cause it to stay at the old one.\n            this._isInitialRender = true;\n            this.apply();\n        });\n    }\n    /**\n     * Updates the position of the overlay element, using whichever preferred position relative\n     * to the origin best fits on-screen.\n     *\n     * The selection of a position goes as follows:\n     *  - If any positions fit completely within the viewport as-is,\n     *      choose the first position that does so.\n     *  - If flexible dimensions are enabled and at least one satifies the given minimum width/height,\n     *      choose the position with the greatest available size modified by the positions' weight.\n     *  - If pushing is enabled, take the position that went off-screen the least and push it\n     *      on-screen.\n     *  - If none of the previous criteria were met, use the position that goes off-screen the least.\n     * \\@docs-private\n     * @return {?}\n     */\n    apply() {\n        // We shouldn't do anything if the strategy was disposed or we're on the server.\n        // @breaking-change 8.0.0 Remove `_platform` null check once it's guaranteed to be defined.\n        if (this._isDisposed || (this._platform && !this._platform.isBrowser)) {\n            return;\n        }\n        // If the position has been applied already (e.g. when the overlay was opened) and the\n        // consumer opted into locking in the position, re-use the old position, in order to\n        // prevent the overlay from jumping around.\n        if (!this._isInitialRender && this._positionLocked && this._lastPosition) {\n            this.reapplyLastPosition();\n            return;\n        }\n        this._clearPanelClasses();\n        this._resetOverlayElementStyles();\n        this._resetBoundingBoxStyles();\n        // We need the bounding rects for the origin and the overlay to determine how to position\n        // the overlay relative to the origin.\n        // We use the viewport rect to determine whether a position would go off-screen.\n        this._viewportRect = this._getNarrowedViewportRect();\n        this._originRect = this._origin.getBoundingClientRect();\n        this._overlayRect = this._pane.getBoundingClientRect();\n        /** @type {?} */\n        const originRect = this._originRect;\n        /** @type {?} */\n        const overlayRect = this._overlayRect;\n        /** @type {?} */\n        const viewportRect = this._viewportRect;\n        /** @type {?} */\n        const flexibleFits = [];\n        /** @type {?} */\n        let fallback;\n        // Go through each of the preferred positions looking for a good fit.\n        // If a good fit is found, it will be applied immediately.\n        for (let pos of this._preferredPositions) {\n            /** @type {?} */\n            let originPoint = this._getOriginPoint(originRect, pos);\n            /** @type {?} */\n            let overlayPoint = this._getOverlayPoint(originPoint, overlayRect, pos);\n            /** @type {?} */\n            let overlayFit = this._getOverlayFit(overlayPoint, overlayRect, viewportRect, pos);\n            // If the overlay, without any further work, fits into the viewport, use this position.\n            if (overlayFit.isCompletelyWithinViewport) {\n                this._isPushed = false;\n                this._applyPosition(pos, originPoint);\n                return;\n            }\n            // If the overlay has flexible dimensions, we can use this position\n            // so long as there's enough space for the minimum dimensions.\n            if (this._canFitWithFlexibleDimensions(overlayFit, overlayPoint, viewportRect)) {\n                // Save positions where the overlay will fit with flexible dimensions. We will use these\n                // if none of the positions fit *without* flexible dimensions.\n                flexibleFits.push({\n                    position: pos,\n                    origin: originPoint,\n                    overlayRect,\n                    boundingBoxRect: this._calculateBoundingBoxRect(originPoint, pos)\n                });\n                continue;\n            }\n            // If the current preferred position does not fit on the screen, remember the position\n            // if it has more visible area on-screen than we've seen and move onto the next preferred\n            // position.\n            if (!fallback || fallback.overlayFit.visibleArea < overlayFit.visibleArea) {\n                fallback = { overlayFit, overlayPoint, originPoint, position: pos, overlayRect };\n            }\n        }\n        // If there are any positions where the overlay would fit with flexible dimensions, choose the\n        // one that has the greatest area available modified by the position's weight\n        if (flexibleFits.length) {\n            /** @type {?} */\n            let bestFit = null;\n            /** @type {?} */\n            let bestScore = -1;\n            for (const fit of flexibleFits) {\n                /** @type {?} */\n                const score = fit.boundingBoxRect.width * fit.boundingBoxRect.height * (fit.position.weight || 1);\n                if (score > bestScore) {\n                    bestScore = score;\n                    bestFit = fit;\n                }\n            }\n            this._isPushed = false;\n            this._applyPosition(/** @type {?} */ ((bestFit)).position, /** @type {?} */ ((bestFit)).origin);\n            return;\n        }\n        // When none of the preferred positions fit within the viewport, take the position\n        // that went off-screen the least and attempt to push it on-screen.\n        if (this._canPush) {\n            // TODO(jelbourn): after pushing, the opening \"direction\" of the overlay might not make sense.\n            this._isPushed = true;\n            this._applyPosition(/** @type {?} */ ((fallback)).position, /** @type {?} */ ((fallback)).originPoint);\n            return;\n        }\n        // All options for getting the overlay within the viewport have been exhausted, so go with the\n        // position that went off-screen the least.\n        this._applyPosition(/** @type {?} */ ((fallback)).position, /** @type {?} */ ((fallback)).originPoint);\n    }\n    /**\n     * @return {?}\n     */\n    detach() {\n        this._clearPanelClasses();\n        this._lastPosition = null;\n        this._previousPushAmount = null;\n        this._resizeSubscription.unsubscribe();\n    }\n    /**\n     * Cleanup after the element gets destroyed.\n     * @return {?}\n     */\n    dispose() {\n        if (this._isDisposed) {\n            return;\n        }\n        // We can't use `_resetBoundingBoxStyles` here, because it resets\n        // some properties to zero, rather than removing them.\n        if (this._boundingBox) {\n            extendStyles(this._boundingBox.style, /** @type {?} */ ({\n                top: '',\n                left: '',\n                right: '',\n                bottom: '',\n                height: '',\n                width: '',\n                alignItems: '',\n                justifyContent: '',\n            }));\n        }\n        if (this._pane) {\n            this._resetOverlayElementStyles();\n        }\n        if (this._overlayRef) {\n            this._overlayRef.hostElement.classList.remove(boundingBoxClass);\n        }\n        this.detach();\n        this._positionChanges.complete();\n        this._overlayRef = this._boundingBox = /** @type {?} */ ((null));\n        this._isDisposed = true;\n    }\n    /**\n     * This re-aligns the overlay element with the trigger in its last calculated position,\n     * even if a position higher in the \"preferred positions\" list would now fit. This\n     * allows one to re-align the panel without changing the orientation of the panel.\n     * @return {?}\n     */\n    reapplyLastPosition() {\n        if (!this._isDisposed && (!this._platform || this._platform.isBrowser)) {\n            this._originRect = this._origin.getBoundingClientRect();\n            this._overlayRect = this._pane.getBoundingClientRect();\n            this._viewportRect = this._getNarrowedViewportRect();\n            /** @type {?} */\n            const lastPosition = this._lastPosition || this._preferredPositions[0];\n            /** @type {?} */\n            const originPoint = this._getOriginPoint(this._originRect, lastPosition);\n            this._applyPosition(lastPosition, originPoint);\n        }\n    }\n    /**\n     * Sets the list of Scrollable containers that host the origin element so that\n     * on reposition we can evaluate if it or the overlay has been clipped or outside view. Every\n     * Scrollable must be an ancestor element of the strategy's origin element.\n     * @param {?} scrollables\n     * @return {?}\n     */\n    withScrollableContainers(scrollables) {\n        this.scrollables = scrollables;\n    }\n    /**\n     * Adds new preferred positions.\n     * @param {?} positions List of positions options for this overlay.\n     * @return {?}\n     */\n    withPositions(positions) {\n        this._preferredPositions = positions;\n        // If the last calculated position object isn't part of the positions anymore, clear\n        // it in order to avoid it being picked up if the consumer tries to re-apply.\n        if (positions.indexOf(/** @type {?} */ ((this._lastPosition))) === -1) {\n            this._lastPosition = null;\n        }\n        this._validatePositions();\n        return this;\n    }\n    /**\n     * Sets a minimum distance the overlay may be positioned to the edge of the viewport.\n     * @param {?} margin Required margin between the overlay and the viewport edge in pixels.\n     * @return {?}\n     */\n    withViewportMargin(margin) {\n        this._viewportMargin = margin;\n        return this;\n    }\n    /**\n     * Sets whether the overlay's width and height can be constrained to fit within the viewport.\n     * @param {?=} flexibleDimensions\n     * @return {?}\n     */\n    withFlexibleDimensions(flexibleDimensions = true) {\n        this._hasFlexibleDimensions = flexibleDimensions;\n        return this;\n    }\n    /**\n     * Sets whether the overlay can grow after the initial open via flexible width/height.\n     * @param {?=} growAfterOpen\n     * @return {?}\n     */\n    withGrowAfterOpen(growAfterOpen = true) {\n        this._growAfterOpen = growAfterOpen;\n        return this;\n    }\n    /**\n     * Sets whether the overlay can be pushed on-screen if none of the provided positions fit.\n     * @param {?=} canPush\n     * @return {?}\n     */\n    withPush(canPush = true) {\n        this._canPush = canPush;\n        return this;\n    }\n    /**\n     * Sets whether the overlay's position should be locked in after it is positioned\n     * initially. When an overlay is locked in, it won't attempt to reposition itself\n     * when the position is re-applied (e.g. when the user scrolls away).\n     * @param {?=} isLocked Whether the overlay should locked in.\n     * @return {?}\n     */\n    withLockedPosition(isLocked = true) {\n        this._positionLocked = isLocked;\n        return this;\n    }\n    /**\n     * Sets the origin element, relative to which to position the overlay.\n     * @param {?} origin Reference to the new origin element.\n     * @return {?}\n     */\n    setOrigin(origin) {\n        this._origin = origin instanceof ElementRef ? origin.nativeElement : origin;\n        return this;\n    }\n    /**\n     * Sets the default offset for the overlay's connection point on the x-axis.\n     * @param {?} offset New offset in the X axis.\n     * @return {?}\n     */\n    withDefaultOffsetX(offset) {\n        this._offsetX = offset;\n        return this;\n    }\n    /**\n     * Sets the default offset for the overlay's connection point on the y-axis.\n     * @param {?} offset New offset in the Y axis.\n     * @return {?}\n     */\n    withDefaultOffsetY(offset) {\n        this._offsetY = offset;\n        return this;\n    }\n    /**\n     * Configures that the position strategy should set a `transform-origin` on some elements\n     * inside the overlay, depending on the current position that is being applied. This is\n     * useful for the cases where the origin of an animation can change depending on the\n     * alignment of the overlay.\n     * @param {?} selector CSS selector that will be used to find the target\n     *    elements onto which to set the transform origin.\n     * @return {?}\n     */\n    withTransformOriginOn(selector) {\n        this._transformOriginSelector = selector;\n        return this;\n    }\n    /**\n     * Gets the (x, y) coordinate of a connection point on the origin based on a relative position.\n     * @param {?} originRect\n     * @param {?} pos\n     * @return {?}\n     */\n    _getOriginPoint(originRect, pos) {\n        /** @type {?} */\n        let x;\n        if (pos.originX == 'center') {\n            // Note: when centering we should always use the `left`\n            // offset, otherwise the position will be wrong in RTL.\n            x = originRect.left + (originRect.width / 2);\n        }\n        else {\n            /** @type {?} */\n            const startX = this._isRtl() ? originRect.right : originRect.left;\n            /** @type {?} */\n            const endX = this._isRtl() ? originRect.left : originRect.right;\n            x = pos.originX == 'start' ? startX : endX;\n        }\n        /** @type {?} */\n        let y;\n        if (pos.originY == 'center') {\n            y = originRect.top + (originRect.height / 2);\n        }\n        else {\n            y = pos.originY == 'top' ? originRect.top : originRect.bottom;\n        }\n        return { x, y };\n    }\n    /**\n     * Gets the (x, y) coordinate of the top-left corner of the overlay given a given position and\n     * origin point to which the overlay should be connected.\n     * @param {?} originPoint\n     * @param {?} overlayRect\n     * @param {?} pos\n     * @return {?}\n     */\n    _getOverlayPoint(originPoint, overlayRect, pos) {\n        /** @type {?} */\n        let overlayStartX;\n        if (pos.overlayX == 'center') {\n            overlayStartX = -overlayRect.width / 2;\n        }\n        else if (pos.overlayX === 'start') {\n            overlayStartX = this._isRtl() ? -overlayRect.width : 0;\n        }\n        else {\n            overlayStartX = this._isRtl() ? 0 : -overlayRect.width;\n        }\n        /** @type {?} */\n        let overlayStartY;\n        if (pos.overlayY == 'center') {\n            overlayStartY = -overlayRect.height / 2;\n        }\n        else {\n            overlayStartY = pos.overlayY == 'top' ? 0 : -overlayRect.height;\n        }\n        // The (x, y) coordinates of the overlay.\n        return {\n            x: originPoint.x + overlayStartX,\n            y: originPoint.y + overlayStartY,\n        };\n    }\n    /**\n     * Gets how well an overlay at the given point will fit within the viewport.\n     * @param {?} point\n     * @param {?} overlay\n     * @param {?} viewport\n     * @param {?} position\n     * @return {?}\n     */\n    _getOverlayFit(point, overlay, viewport, position) {\n        let { x, y } = point;\n        /** @type {?} */\n        let offsetX = this._getOffset(position, 'x');\n        /** @type {?} */\n        let offsetY = this._getOffset(position, 'y');\n        // Account for the offsets since they could push the overlay out of the viewport.\n        if (offsetX) {\n            x += offsetX;\n        }\n        if (offsetY) {\n            y += offsetY;\n        }\n        /** @type {?} */\n        let leftOverflow = 0 - x;\n        /** @type {?} */\n        let rightOverflow = (x + overlay.width) - viewport.width;\n        /** @type {?} */\n        let topOverflow = 0 - y;\n        /** @type {?} */\n        let bottomOverflow = (y + overlay.height) - viewport.height;\n        /** @type {?} */\n        let visibleWidth = this._subtractOverflows(overlay.width, leftOverflow, rightOverflow);\n        /** @type {?} */\n        let visibleHeight = this._subtractOverflows(overlay.height, topOverflow, bottomOverflow);\n        /** @type {?} */\n        let visibleArea = visibleWidth * visibleHeight;\n        return {\n            visibleArea,\n            isCompletelyWithinViewport: (overlay.width * overlay.height) === visibleArea,\n            fitsInViewportVertically: visibleHeight === overlay.height,\n            fitsInViewportHorizontally: visibleWidth == overlay.width,\n        };\n    }\n    /**\n     * Whether the overlay can fit within the viewport when it may resize either its width or height.\n     * @param {?} fit How well the overlay fits in the viewport at some position.\n     * @param {?} point The (x, y) coordinates of the overlat at some position.\n     * @param {?} viewport The geometry of the viewport.\n     * @return {?}\n     */\n    _canFitWithFlexibleDimensions(fit, point, viewport) {\n        if (this._hasFlexibleDimensions) {\n            /** @type {?} */\n            const availableHeight = viewport.bottom - point.y;\n            /** @type {?} */\n            const availableWidth = viewport.right - point.x;\n            /** @type {?} */\n            const minHeight = this._overlayRef.getConfig().minHeight;\n            /** @type {?} */\n            const minWidth = this._overlayRef.getConfig().minWidth;\n            /** @type {?} */\n            const verticalFit = fit.fitsInViewportVertically ||\n                (minHeight != null && minHeight <= availableHeight);\n            /** @type {?} */\n            const horizontalFit = fit.fitsInViewportHorizontally ||\n                (minWidth != null && minWidth <= availableWidth);\n            return verticalFit && horizontalFit;\n        }\n    }\n    /**\n     * Gets the point at which the overlay can be \"pushed\" on-screen. If the overlay is larger than\n     * the viewport, the top-left corner will be pushed on-screen (with overflow occuring on the\n     * right and bottom).\n     *\n     * @param {?} start Starting point from which the overlay is pushed.\n     * @param {?} overlay Dimensions of the overlay.\n     * @param {?} scrollPosition Current viewport scroll position.\n     * @return {?} The point at which to position the overlay after pushing. This is effectively a new\n     *     originPoint.\n     */\n    _pushOverlayOnScreen(start, overlay, scrollPosition) {\n        // If the position is locked and we've pushed the overlay already, reuse the previous push\n        // amount, rather than pushing it again. If we were to continue pushing, the element would\n        // remain in the viewport, which goes against the expectations when position locking is enabled.\n        if (this._previousPushAmount && this._positionLocked) {\n            return {\n                x: start.x + this._previousPushAmount.x,\n                y: start.y + this._previousPushAmount.y\n            };\n        }\n        /** @type {?} */\n        const viewport = this._viewportRect;\n        /** @type {?} */\n        const overflowRight = Math.max(start.x + overlay.width - viewport.right, 0);\n        /** @type {?} */\n        const overflowBottom = Math.max(start.y + overlay.height - viewport.bottom, 0);\n        /** @type {?} */\n        const overflowTop = Math.max(viewport.top - scrollPosition.top - start.y, 0);\n        /** @type {?} */\n        const overflowLeft = Math.max(viewport.left - scrollPosition.left - start.x, 0);\n        /** @type {?} */\n        let pushX = 0;\n        /** @type {?} */\n        let pushY = 0;\n        // If the overlay fits completely within the bounds of the viewport, push it from whichever\n        // direction is goes off-screen. Otherwise, push the top-left corner such that its in the\n        // viewport and allow for the trailing end of the overlay to go out of bounds.\n        if (overlay.width < viewport.width) {\n            pushX = overflowLeft || -overflowRight;\n        }\n        else {\n            pushX = start.x < this._viewportMargin ? (viewport.left - scrollPosition.left) - start.x : 0;\n        }\n        if (overlay.height < viewport.height) {\n            pushY = overflowTop || -overflowBottom;\n        }\n        else {\n            pushY = start.y < this._viewportMargin ? (viewport.top - scrollPosition.top) - start.y : 0;\n        }\n        this._previousPushAmount = { x: pushX, y: pushY };\n        return {\n            x: start.x + pushX,\n            y: start.y + pushY,\n        };\n    }\n    /**\n     * Applies a computed position to the overlay and emits a position change.\n     * @param {?} position The position preference\n     * @param {?} originPoint The point on the origin element where the overlay is connected.\n     * @return {?}\n     */\n    _applyPosition(position, originPoint) {\n        this._setTransformOrigin(position);\n        this._setOverlayElementStyles(originPoint, position);\n        this._setBoundingBoxStyles(originPoint, position);\n        if (position.panelClass) {\n            this._addPanelClasses(position.panelClass);\n        }\n        // Save the last connected position in case the position needs to be re-calculated.\n        this._lastPosition = position;\n        // Notify that the position has been changed along with its change properties.\n        // We only emit if we've got any subscriptions, because the scroll visibility\n        // calculcations can be somewhat expensive.\n        if (this._positionChangeSubscriptions > 0) {\n            /** @type {?} */\n            const scrollableViewProperties = this._getScrollVisibility();\n            /** @type {?} */\n            const changeEvent = new ConnectedOverlayPositionChange(position, scrollableViewProperties);\n            this._positionChanges.next(changeEvent);\n        }\n        this._isInitialRender = false;\n    }\n    /**\n     * Sets the transform origin based on the configured selector and the passed-in position.\n     * @param {?} position\n     * @return {?}\n     */\n    _setTransformOrigin(position) {\n        if (!this._transformOriginSelector) {\n            return;\n        }\n        /** @type {?} */\n        const elements = /** @type {?} */ ((this._boundingBox)).querySelectorAll(this._transformOriginSelector);\n        /** @type {?} */\n        let xOrigin;\n        /** @type {?} */\n        let yOrigin = position.overlayY;\n        if (position.overlayX === 'center') {\n            xOrigin = 'center';\n        }\n        else if (this._isRtl()) {\n            xOrigin = position.overlayX === 'start' ? 'right' : 'left';\n        }\n        else {\n            xOrigin = position.overlayX === 'start' ? 'left' : 'right';\n        }\n        for (let i = 0; i < elements.length; i++) {\n            elements[i].style.transformOrigin = `${xOrigin} ${yOrigin}`;\n        }\n    }\n    /**\n     * Gets the position and size of the overlay's sizing container.\n     *\n     * This method does no measuring and applies no styles so that we can cheaply compute the\n     * bounds for all positions and choose the best fit based on these results.\n     * @param {?} origin\n     * @param {?} position\n     * @return {?}\n     */\n    _calculateBoundingBoxRect(origin, position) {\n        /** @type {?} */\n        const viewport = this._viewportRect;\n        /** @type {?} */\n        const isRtl = this._isRtl();\n        /** @type {?} */\n        let height;\n        /** @type {?} */\n        let top;\n        /** @type {?} */\n        let bottom;\n        if (position.overlayY === 'top') {\n            // Overlay is opening \"downward\" and thus is bound by the bottom viewport edge.\n            top = origin.y;\n            height = viewport.bottom - origin.y;\n        }\n        else if (position.overlayY === 'bottom') {\n            // Overlay is opening \"upward\" and thus is bound by the top viewport edge. We need to add\n            // the viewport margin back in, because the viewport rect is narrowed down to remove the\n            // margin, whereas the `origin` position is calculated based on its `ClientRect`.\n            bottom = viewport.height - origin.y + this._viewportMargin * 2;\n            height = viewport.height - bottom + this._viewportMargin;\n        }\n        else {\n            /** @type {?} */\n            const smallestDistanceToViewportEdge = Math.min(viewport.bottom - origin.y + viewport.top, origin.y);\n            /** @type {?} */\n            const previousHeight = this._lastBoundingBoxSize.height;\n            height = smallestDistanceToViewportEdge * 2;\n            top = origin.y - smallestDistanceToViewportEdge;\n            if (height > previousHeight && !this._isInitialRender && !this._growAfterOpen) {\n                top = origin.y - (previousHeight / 2);\n            }\n        }\n        /** @type {?} */\n        const isBoundedByRightViewportEdge = (position.overlayX === 'start' && !isRtl) ||\n            (position.overlayX === 'end' && isRtl);\n        /** @type {?} */\n        const isBoundedByLeftViewportEdge = (position.overlayX === 'end' && !isRtl) ||\n            (position.overlayX === 'start' && isRtl);\n        /** @type {?} */\n        let width;\n        /** @type {?} */\n        let left;\n        /** @type {?} */\n        let right;\n        if (isBoundedByLeftViewportEdge) {\n            right = viewport.right - origin.x + this._viewportMargin;\n            width = origin.x - viewport.left;\n        }\n        else if (isBoundedByRightViewportEdge) {\n            left = origin.x;\n            width = viewport.right - origin.x;\n        }\n        else {\n            /** @type {?} */\n            const smallestDistanceToViewportEdge = Math.min(viewport.right - origin.x + viewport.left, origin.x);\n            /** @type {?} */\n            const previousWidth = this._lastBoundingBoxSize.width;\n            width = smallestDistanceToViewportEdge * 2;\n            left = origin.x - smallestDistanceToViewportEdge;\n            if (width > previousWidth && !this._isInitialRender && !this._growAfterOpen) {\n                left = origin.x - (previousWidth / 2);\n            }\n        }\n        return { top: /** @type {?} */ ((top)), left: /** @type {?} */ ((left)), bottom: /** @type {?} */ ((bottom)), right: /** @type {?} */ ((right)), width, height };\n    }\n    /**\n     * Sets the position and size of the overlay's sizing wrapper. The wrapper is positioned on the\n     * origin's connection point and stetches to the bounds of the viewport.\n     *\n     * @param {?} origin The point on the origin element where the overlay is connected.\n     * @param {?} position The position preference\n     * @return {?}\n     */\n    _setBoundingBoxStyles(origin, position) {\n        /** @type {?} */\n        const boundingBoxRect = this._calculateBoundingBoxRect(origin, position);\n        // It's weird if the overlay *grows* while scrolling, so we take the last size into account\n        // when applying a new size.\n        if (!this._isInitialRender && !this._growAfterOpen) {\n            boundingBoxRect.height = Math.min(boundingBoxRect.height, this._lastBoundingBoxSize.height);\n            boundingBoxRect.width = Math.min(boundingBoxRect.width, this._lastBoundingBoxSize.width);\n        }\n        /** @type {?} */\n        const styles = /** @type {?} */ ({});\n        if (this._hasExactPosition()) {\n            styles.top = styles.left = '0';\n            styles.bottom = styles.right = '';\n            styles.width = styles.height = '100%';\n        }\n        else {\n            /** @type {?} */\n            const maxHeight = this._overlayRef.getConfig().maxHeight;\n            /** @type {?} */\n            const maxWidth = this._overlayRef.getConfig().maxWidth;\n            styles.height = coerceCssPixelValue(boundingBoxRect.height);\n            styles.top = coerceCssPixelValue(boundingBoxRect.top);\n            styles.bottom = coerceCssPixelValue(boundingBoxRect.bottom);\n            styles.width = coerceCssPixelValue(boundingBoxRect.width);\n            styles.left = coerceCssPixelValue(boundingBoxRect.left);\n            styles.right = coerceCssPixelValue(boundingBoxRect.right);\n            // Push the pane content towards the proper direction.\n            if (position.overlayX === 'center') {\n                styles.alignItems = 'center';\n            }\n            else {\n                styles.alignItems = position.overlayX === 'end' ? 'flex-end' : 'flex-start';\n            }\n            if (position.overlayY === 'center') {\n                styles.justifyContent = 'center';\n            }\n            else {\n                styles.justifyContent = position.overlayY === 'bottom' ? 'flex-end' : 'flex-start';\n            }\n            if (maxHeight) {\n                styles.maxHeight = coerceCssPixelValue(maxHeight);\n            }\n            if (maxWidth) {\n                styles.maxWidth = coerceCssPixelValue(maxWidth);\n            }\n        }\n        this._lastBoundingBoxSize = boundingBoxRect;\n        extendStyles(/** @type {?} */ ((this._boundingBox)).style, styles);\n    }\n    /**\n     * Resets the styles for the bounding box so that a new positioning can be computed.\n     * @return {?}\n     */\n    _resetBoundingBoxStyles() {\n        extendStyles(/** @type {?} */ ((this._boundingBox)).style, /** @type {?} */ ({\n            top: '0',\n            left: '0',\n            right: '0',\n            bottom: '0',\n            height: '',\n            width: '',\n            alignItems: '',\n            justifyContent: '',\n        }));\n    }\n    /**\n     * Resets the styles for the overlay pane so that a new positioning can be computed.\n     * @return {?}\n     */\n    _resetOverlayElementStyles() {\n        extendStyles(this._pane.style, /** @type {?} */ ({\n            top: '',\n            left: '',\n            bottom: '',\n            right: '',\n            position: '',\n        }));\n    }\n    /**\n     * Sets positioning styles to the overlay element.\n     * @param {?} originPoint\n     * @param {?} position\n     * @return {?}\n     */\n    _setOverlayElementStyles(originPoint, position) {\n        /** @type {?} */\n        const styles = /** @type {?} */ ({});\n        if (this._hasExactPosition()) {\n            /** @type {?} */\n            const scrollPosition = this._viewportRuler.getViewportScrollPosition();\n            extendStyles(styles, this._getExactOverlayY(position, originPoint, scrollPosition));\n            extendStyles(styles, this._getExactOverlayX(position, originPoint, scrollPosition));\n        }\n        else {\n            styles.position = 'static';\n        }\n        /** @type {?} */\n        let transformString = '';\n        /** @type {?} */\n        let offsetX = this._getOffset(position, 'x');\n        /** @type {?} */\n        let offsetY = this._getOffset(position, 'y');\n        if (offsetX) {\n            transformString += `translateX(${offsetX}px) `;\n        }\n        if (offsetY) {\n            transformString += `translateY(${offsetY}px)`;\n        }\n        styles.transform = transformString.trim();\n        // If a maxWidth or maxHeight is specified on the overlay, we remove them. We do this because\n        // we need these values to both be set to \"100%\" for the automatic flexible sizing to work.\n        // The maxHeight and maxWidth are set on the boundingBox in order to enforce the constraint.\n        if (this._hasFlexibleDimensions && this._overlayRef.getConfig().maxHeight) {\n            styles.maxHeight = '';\n        }\n        if (this._hasFlexibleDimensions && this._overlayRef.getConfig().maxWidth) {\n            styles.maxWidth = '';\n        }\n        extendStyles(this._pane.style, styles);\n    }\n    /**\n     * Gets the exact top/bottom for the overlay when not using flexible sizing or when pushing.\n     * @param {?} position\n     * @param {?} originPoint\n     * @param {?} scrollPosition\n     * @return {?}\n     */\n    _getExactOverlayY(position, originPoint, scrollPosition) {\n        /** @type {?} */\n        let styles = /** @type {?} */ ({ top: null, bottom: null });\n        /** @type {?} */\n        let overlayPoint = this._getOverlayPoint(originPoint, this._overlayRect, position);\n        if (this._isPushed) {\n            overlayPoint = this._pushOverlayOnScreen(overlayPoint, this._overlayRect, scrollPosition);\n        }\n        /** @type {?} */\n        let virtualKeyboardOffset = this._overlayContainer ?\n            this._overlayContainer.getContainerElement().getBoundingClientRect().top : 0;\n        // Normally this would be zero, however when the overlay is attached to an input (e.g. in an\n        // autocomplete), mobile browsers will shift everything in order to put the input in the middle\n        // of the screen and to make space for the virtual keyboard. We need to account for this offset,\n        // otherwise our positioning will be thrown off.\n        overlayPoint.y -= virtualKeyboardOffset;\n        // We want to set either `top` or `bottom` based on whether the overlay wants to appear\n        // above or below the origin and the direction in which the element will expand.\n        if (position.overlayY === 'bottom') {\n            /** @type {?} */\n            const documentHeight = /** @type {?} */ ((this._document.documentElement)).clientHeight;\n            styles.bottom = `${documentHeight - (overlayPoint.y + this._overlayRect.height)}px`;\n        }\n        else {\n            styles.top = coerceCssPixelValue(overlayPoint.y);\n        }\n        return styles;\n    }\n    /**\n     * Gets the exact left/right for the overlay when not using flexible sizing or when pushing.\n     * @param {?} position\n     * @param {?} originPoint\n     * @param {?} scrollPosition\n     * @return {?}\n     */\n    _getExactOverlayX(position, originPoint, scrollPosition) {\n        /** @type {?} */\n        let styles = /** @type {?} */ ({ left: null, right: null });\n        /** @type {?} */\n        let overlayPoint = this._getOverlayPoint(originPoint, this._overlayRect, position);\n        if (this._isPushed) {\n            overlayPoint = this._pushOverlayOnScreen(overlayPoint, this._overlayRect, scrollPosition);\n        }\n        /** @type {?} */\n        let horizontalStyleProperty;\n        if (this._isRtl()) {\n            horizontalStyleProperty = position.overlayX === 'end' ? 'left' : 'right';\n        }\n        else {\n            horizontalStyleProperty = position.overlayX === 'end' ? 'right' : 'left';\n        }\n        // When we're setting `right`, we adjust the x position such that it is the distance\n        // from the right edge of the viewport rather than the left edge.\n        if (horizontalStyleProperty === 'right') {\n            /** @type {?} */\n            const documentWidth = /** @type {?} */ ((this._document.documentElement)).clientWidth;\n            styles.right = `${documentWidth - (overlayPoint.x + this._overlayRect.width)}px`;\n        }\n        else {\n            styles.left = coerceCssPixelValue(overlayPoint.x);\n        }\n        return styles;\n    }\n    /**\n     * Gets the view properties of the trigger and overlay, including whether they are clipped\n     * or completely outside the view of any of the strategy's scrollables.\n     * @return {?}\n     */\n    _getScrollVisibility() {\n        /** @type {?} */\n        const originBounds = this._origin.getBoundingClientRect();\n        /** @type {?} */\n        const overlayBounds = this._pane.getBoundingClientRect();\n        /** @type {?} */\n        const scrollContainerBounds = this.scrollables.map(scrollable => {\n            return scrollable.getElementRef().nativeElement.getBoundingClientRect();\n        });\n        return {\n            isOriginClipped: isElementClippedByScrolling(originBounds, scrollContainerBounds),\n            isOriginOutsideView: isElementScrolledOutsideView(originBounds, scrollContainerBounds),\n            isOverlayClipped: isElementClippedByScrolling(overlayBounds, scrollContainerBounds),\n            isOverlayOutsideView: isElementScrolledOutsideView(overlayBounds, scrollContainerBounds),\n        };\n    }\n    /**\n     * Subtracts the amount that an element is overflowing on an axis from it's length.\n     * @param {?} length\n     * @param {...?} overflows\n     * @return {?}\n     */\n    _subtractOverflows(length, ...overflows) {\n        return overflows.reduce((currentValue, currentOverflow) => {\n            return currentValue - Math.max(currentOverflow, 0);\n        }, length);\n    }\n    /**\n     * Narrows the given viewport rect by the current _viewportMargin.\n     * @return {?}\n     */\n    _getNarrowedViewportRect() {\n        /** @type {?} */\n        const width = /** @type {?} */ ((this._document.documentElement)).clientWidth;\n        /** @type {?} */\n        const height = /** @type {?} */ ((this._document.documentElement)).clientHeight;\n        /** @type {?} */\n        const scrollPosition = this._viewportRuler.getViewportScrollPosition();\n        return {\n            top: scrollPosition.top + this._viewportMargin,\n            left: scrollPosition.left + this._viewportMargin,\n            right: scrollPosition.left + width - this._viewportMargin,\n            bottom: scrollPosition.top + height - this._viewportMargin,\n            width: width - (2 * this._viewportMargin),\n            height: height - (2 * this._viewportMargin),\n        };\n    }\n    /**\n     * Whether the we're dealing with an RTL context\n     * @return {?}\n     */\n    _isRtl() {\n        return this._overlayRef.getDirection() === 'rtl';\n    }\n    /**\n     * Determines whether the overlay uses exact or flexible positioning.\n     * @return {?}\n     */\n    _hasExactPosition() {\n        return !this._hasFlexibleDimensions || this._isPushed;\n    }\n    /**\n     * Retrieves the offset of a position along the x or y axis.\n     * @param {?} position\n     * @param {?} axis\n     * @return {?}\n     */\n    _getOffset(position, axis) {\n        if (axis === 'x') {\n            // We don't do something like `position['offset' + axis]` in\n            // order to avoid breking minifiers that rename properties.\n            return position.offsetX == null ? this._offsetX : position.offsetX;\n        }\n        return position.offsetY == null ? this._offsetY : position.offsetY;\n    }\n    /**\n     * Validates that the current position match the expected values.\n     * @return {?}\n     */\n    _validatePositions() {\n        if (!this._preferredPositions.length) {\n            throw Error('FlexibleConnectedPositionStrategy: At least one position is required.');\n        }\n        // TODO(crisbeto): remove these once Angular's template type\n        // checking is advanced enough to catch these cases.\n        this._preferredPositions.forEach(pair => {\n            validateHorizontalPosition('originX', pair.originX);\n            validateVerticalPosition('originY', pair.originY);\n            validateHorizontalPosition('overlayX', pair.overlayX);\n            validateVerticalPosition('overlayY', pair.overlayY);\n        });\n    }\n    /**\n     * Adds a single CSS class or an array of classes on the overlay panel.\n     * @param {?} cssClasses\n     * @return {?}\n     */\n    _addPanelClasses(cssClasses) {\n        if (this._pane) {\n            coerceArray(cssClasses).forEach(cssClass => {\n                if (this._appliedPanelClasses.indexOf(cssClass) === -1) {\n                    this._appliedPanelClasses.push(cssClass);\n                    this._pane.classList.add(cssClass);\n                }\n            });\n        }\n    }\n    /**\n     * Clears the classes that the position strategy has applied from the overlay panel.\n     * @return {?}\n     */\n    _clearPanelClasses() {\n        if (this._pane) {\n            this._appliedPanelClasses.forEach(cssClass => this._pane.classList.remove(cssClass));\n            this._appliedPanelClasses = [];\n        }\n    }\n}\n/**\n * Shallow-extends a stylesheet object with another stylesheet object.\n * @param {?} dest\n * @param {?} source\n * @return {?}\n */\nfunction extendStyles(dest, source) {\n    for (let key in source) {\n        if (source.hasOwnProperty(key)) {\n            dest[key] = source[key];\n        }\n    }\n    return dest;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * A strategy for positioning overlays. Using this strategy, an overlay is given an\n * implicit position relative to some origin element. The relative position is defined in terms of\n * a point on the origin element that is connected to a point on the overlay element. For example,\n * a basic dropdown is connecting the bottom-left corner of the origin to the top-left corner\n * of the overlay.\n * @deprecated Use `FlexibleConnectedPositionStrategy` instead.\n * \\@breaking-change 8.0.0\n */\nclass ConnectedPositionStrategy {\n    /**\n     * @param {?} originPos\n     * @param {?} overlayPos\n     * @param {?} connectedTo\n     * @param {?} viewportRuler\n     * @param {?} document\n     * @param {?=} platform\n     */\n    constructor(originPos, overlayPos, connectedTo, viewportRuler, document, \n    // @breaking-change 8.0.0 `platform` parameter to be made required.\n    platform) {\n        /**\n         * Ordered list of preferred positions, from most to least desirable.\n         */\n        this._preferredPositions = [];\n        // Since the `ConnectedPositionStrategy` is deprecated and we don't want to maintain\n        // the extra logic, we create an instance of the positioning strategy that has some\n        // defaults that make it behave as the old position strategy and to which we'll\n        // proxy all of the API calls.\n        this._positionStrategy =\n            new FlexibleConnectedPositionStrategy(connectedTo, viewportRuler, document, platform)\n                .withFlexibleDimensions(false)\n                .withPush(false)\n                .withViewportMargin(0);\n        this.withFallbackPosition(originPos, overlayPos);\n    }\n    /**\n     * Whether the we're dealing with an RTL context\n     * @return {?}\n     */\n    get _isRtl() {\n        return this._overlayRef.getDirection() === 'rtl';\n    }\n    /**\n     * Emits an event when the connection point changes.\n     * @return {?}\n     */\n    get onPositionChange() {\n        return this._positionStrategy.positionChanges;\n    }\n    /**\n     * Ordered list of preferred positions, from most to least desirable.\n     * @return {?}\n     */\n    get positions() {\n        return this._preferredPositions;\n    }\n    /**\n     * Attach this position strategy to an overlay.\n     * @param {?} overlayRef\n     * @return {?}\n     */\n    attach(overlayRef) {\n        this._overlayRef = overlayRef;\n        this._positionStrategy.attach(overlayRef);\n        if (this._direction) {\n            overlayRef.setDirection(this._direction);\n            this._direction = null;\n        }\n    }\n    /**\n     * Disposes all resources used by the position strategy.\n     * @return {?}\n     */\n    dispose() {\n        this._positionStrategy.dispose();\n    }\n    /**\n     * \\@docs-private\n     * @return {?}\n     */\n    detach() {\n        this._positionStrategy.detach();\n    }\n    /**\n     * Updates the position of the overlay element, using whichever preferred position relative\n     * to the origin fits on-screen.\n     * \\@docs-private\n     * @return {?}\n     */\n    apply() {\n        this._positionStrategy.apply();\n    }\n    /**\n     * Re-positions the overlay element with the trigger in its last calculated position,\n     * even if a position higher in the \"preferred positions\" list would now fit. This\n     * allows one to re-align the panel without changing the orientation of the panel.\n     * @return {?}\n     */\n    recalculateLastPosition() {\n        this._positionStrategy.reapplyLastPosition();\n    }\n    /**\n     * Sets the list of Scrollable containers that host the origin element so that\n     * on reposition we can evaluate if it or the overlay has been clipped or outside view. Every\n     * Scrollable must be an ancestor element of the strategy's origin element.\n     * @param {?} scrollables\n     * @return {?}\n     */\n    withScrollableContainers(scrollables) {\n        this._positionStrategy.withScrollableContainers(scrollables);\n    }\n    /**\n     * Adds a new preferred fallback position.\n     * @param {?} originPos\n     * @param {?} overlayPos\n     * @param {?=} offsetX\n     * @param {?=} offsetY\n     * @return {?}\n     */\n    withFallbackPosition(originPos, overlayPos, offsetX, offsetY) {\n        /** @type {?} */\n        const position = new ConnectionPositionPair(originPos, overlayPos, offsetX, offsetY);\n        this._preferredPositions.push(position);\n        this._positionStrategy.withPositions(this._preferredPositions);\n        return this;\n    }\n    /**\n     * Sets the layout direction so the overlay's position can be adjusted to match.\n     * @param {?} dir New layout direction.\n     * @return {?}\n     */\n    withDirection(dir) {\n        // Since the direction might be declared before the strategy is attached,\n        // we save the value in a temporary property and we'll transfer it to the\n        // overlay ref on attachment.\n        if (this._overlayRef) {\n            this._overlayRef.setDirection(dir);\n        }\n        else {\n            this._direction = dir;\n        }\n        return this;\n    }\n    /**\n     * Sets an offset for the overlay's connection point on the x-axis\n     * @param {?} offset New offset in the X axis.\n     * @return {?}\n     */\n    withOffsetX(offset) {\n        this._positionStrategy.withDefaultOffsetX(offset);\n        return this;\n    }\n    /**\n     * Sets an offset for the overlay's connection point on the y-axis\n     * @param {?} offset New offset in the Y axis.\n     * @return {?}\n     */\n    withOffsetY(offset) {\n        this._positionStrategy.withDefaultOffsetY(offset);\n        return this;\n    }\n    /**\n     * Sets whether the overlay's position should be locked in after it is positioned\n     * initially. When an overlay is locked in, it won't attempt to reposition itself\n     * when the position is re-applied (e.g. when the user scrolls away).\n     * @param {?} isLocked Whether the overlay should locked in.\n     * @return {?}\n     */\n    withLockedPosition(isLocked) {\n        this._positionStrategy.withLockedPosition(isLocked);\n        return this;\n    }\n    /**\n     * Overwrites the current set of positions with an array of new ones.\n     * @param {?} positions Position pairs to be set on the strategy.\n     * @return {?}\n     */\n    withPositions(positions) {\n        this._preferredPositions = positions.slice();\n        this._positionStrategy.withPositions(this._preferredPositions);\n        return this;\n    }\n    /**\n     * Sets the origin element, relative to which to position the overlay.\n     * @param {?} origin Reference to the new origin element.\n     * @return {?}\n     */\n    setOrigin(origin) {\n        this._positionStrategy.setOrigin(origin);\n        return this;\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/** *\n * Class to be added to the overlay pane wrapper.\n  @type {?} */\nconst wrapperClass = 'cdk-global-overlay-wrapper';\n/**\n * A strategy for positioning overlays. Using this strategy, an overlay is given an\n * explicit position relative to the browser's viewport. We use flexbox, instead of\n * transforms, in order to avoid issues with subpixel rendering which can cause the\n * element to become blurry.\n */\nclass GlobalPositionStrategy {\n    constructor() {\n        this._cssPosition = 'static';\n        this._topOffset = '';\n        this._bottomOffset = '';\n        this._leftOffset = '';\n        this._rightOffset = '';\n        this._alignItems = '';\n        this._justifyContent = '';\n        this._width = '';\n        this._height = '';\n    }\n    /**\n     * @param {?} overlayRef\n     * @return {?}\n     */\n    attach(overlayRef) {\n        /** @type {?} */\n        const config = overlayRef.getConfig();\n        this._overlayRef = overlayRef;\n        if (this._width && !config.width) {\n            overlayRef.updateSize({ width: this._width });\n        }\n        if (this._height && !config.height) {\n            overlayRef.updateSize({ height: this._height });\n        }\n        overlayRef.hostElement.classList.add(wrapperClass);\n        this._isDisposed = false;\n    }\n    /**\n     * Sets the top position of the overlay. Clears any previously set vertical position.\n     * @param {?=} value New top offset.\n     * @return {?}\n     */\n    top(value = '') {\n        this._bottomOffset = '';\n        this._topOffset = value;\n        this._alignItems = 'flex-start';\n        return this;\n    }\n    /**\n     * Sets the left position of the overlay. Clears any previously set horizontal position.\n     * @param {?=} value New left offset.\n     * @return {?}\n     */\n    left(value = '') {\n        this._rightOffset = '';\n        this._leftOffset = value;\n        this._justifyContent = 'flex-start';\n        return this;\n    }\n    /**\n     * Sets the bottom position of the overlay. Clears any previously set vertical position.\n     * @param {?=} value New bottom offset.\n     * @return {?}\n     */\n    bottom(value = '') {\n        this._topOffset = '';\n        this._bottomOffset = value;\n        this._alignItems = 'flex-end';\n        return this;\n    }\n    /**\n     * Sets the right position of the overlay. Clears any previously set horizontal position.\n     * @param {?=} value New right offset.\n     * @return {?}\n     */\n    right(value = '') {\n        this._leftOffset = '';\n        this._rightOffset = value;\n        this._justifyContent = 'flex-end';\n        return this;\n    }\n    /**\n     * Sets the overlay width and clears any previously set width.\n     * @deprecated Pass the `width` through the `OverlayConfig`.\n     * \\@breaking-change 8.0.0\n     * @param {?=} value New width for the overlay\n     * @return {?}\n     */\n    width(value = '') {\n        if (this._overlayRef) {\n            this._overlayRef.updateSize({ width: value });\n        }\n        else {\n            this._width = value;\n        }\n        return this;\n    }\n    /**\n     * Sets the overlay height and clears any previously set height.\n     * @deprecated Pass the `height` through the `OverlayConfig`.\n     * \\@breaking-change 8.0.0\n     * @param {?=} value New height for the overlay\n     * @return {?}\n     */\n    height(value = '') {\n        if (this._overlayRef) {\n            this._overlayRef.updateSize({ height: value });\n        }\n        else {\n            this._height = value;\n        }\n        return this;\n    }\n    /**\n     * Centers the overlay horizontally with an optional offset.\n     * Clears any previously set horizontal position.\n     *\n     * @param {?=} offset Overlay offset from the horizontal center.\n     * @return {?}\n     */\n    centerHorizontally(offset = '') {\n        this.left(offset);\n        this._justifyContent = 'center';\n        return this;\n    }\n    /**\n     * Centers the overlay vertically with an optional offset.\n     * Clears any previously set vertical position.\n     *\n     * @param {?=} offset Overlay offset from the vertical center.\n     * @return {?}\n     */\n    centerVertically(offset = '') {\n        this.top(offset);\n        this._alignItems = 'center';\n        return this;\n    }\n    /**\n     * Apply the position to the element.\n     * \\@docs-private\n     * @return {?}\n     */\n    apply() {\n        // Since the overlay ref applies the strategy asynchronously, it could\n        // have been disposed before it ends up being applied. If that is the\n        // case, we shouldn't do anything.\n        if (!this._overlayRef || !this._overlayRef.hasAttached()) {\n            return;\n        }\n        /** @type {?} */\n        const styles = this._overlayRef.overlayElement.style;\n        /** @type {?} */\n        const parentStyles = this._overlayRef.hostElement.style;\n        /** @type {?} */\n        const config = this._overlayRef.getConfig();\n        styles.position = this._cssPosition;\n        styles.marginLeft = config.width === '100%' ? '0' : this._leftOffset;\n        styles.marginTop = config.height === '100%' ? '0' : this._topOffset;\n        styles.marginBottom = this._bottomOffset;\n        styles.marginRight = this._rightOffset;\n        if (config.width === '100%') {\n            parentStyles.justifyContent = 'flex-start';\n        }\n        else if (this._justifyContent === 'center') {\n            parentStyles.justifyContent = 'center';\n        }\n        else if (this._overlayRef.getConfig().direction === 'rtl') {\n            // In RTL the browser will invert `flex-start` and `flex-end` automatically, but we\n            // don't want that because our positioning is explicitly `left` and `right`, hence\n            // why we do another inversion to ensure that the overlay stays in the same position.\n            // TODO: reconsider this if we add `start` and `end` methods.\n            if (this._justifyContent === 'flex-start') {\n                parentStyles.justifyContent = 'flex-end';\n            }\n            else if (this._justifyContent === 'flex-end') {\n                parentStyles.justifyContent = 'flex-start';\n            }\n        }\n        else {\n            parentStyles.justifyContent = this._justifyContent;\n        }\n        parentStyles.alignItems = config.height === '100%' ? 'flex-start' : this._alignItems;\n    }\n    /**\n     * Cleans up the DOM changes from the position strategy.\n     * \\@docs-private\n     * @return {?}\n     */\n    dispose() {\n        if (this._isDisposed || !this._overlayRef) {\n            return;\n        }\n        /** @type {?} */\n        const styles = this._overlayRef.overlayElement.style;\n        /** @type {?} */\n        const parent = this._overlayRef.hostElement;\n        /** @type {?} */\n        const parentStyles = parent.style;\n        parent.classList.remove(wrapperClass);\n        parentStyles.justifyContent = parentStyles.alignItems = styles.marginTop =\n            styles.marginBottom = styles.marginLeft = styles.marginRight = styles.position = '';\n        this._overlayRef = /** @type {?} */ ((null));\n        this._isDisposed = true;\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * Builder for overlay position strategy.\n */\nclass OverlayPositionBuilder {\n    /**\n     * @param {?} _viewportRuler\n     * @param {?} _document\n     * @param {?=} _platform\n     * @param {?=} _overlayContainer\n     */\n    constructor(_viewportRuler, _document, \n    // @breaking-change 8.0.0 `_platform` and `_overlayContainer` parameters to be made required.\n    _platform, _overlayContainer) {\n        this._viewportRuler = _viewportRuler;\n        this._document = _document;\n        this._platform = _platform;\n        this._overlayContainer = _overlayContainer;\n    }\n    /**\n     * Creates a global position strategy.\n     * @return {?}\n     */\n    global() {\n        return new GlobalPositionStrategy();\n    }\n    /**\n     * Creates a relative position strategy.\n     * @deprecated Use `flexibleConnectedTo` instead.\n     * \\@breaking-change 8.0.0\n     * @param {?} elementRef\n     * @param {?} originPos\n     * @param {?} overlayPos\n     * @return {?}\n     */\n    connectedTo(elementRef, originPos, overlayPos) {\n        return new ConnectedPositionStrategy(originPos, overlayPos, elementRef, this._viewportRuler, this._document);\n    }\n    /**\n     * Creates a flexible position strategy.\n     * @param {?} elementRef\n     * @return {?}\n     */\n    flexibleConnectedTo(elementRef) {\n        return new FlexibleConnectedPositionStrategy(elementRef, this._viewportRuler, this._document, this._platform, this._overlayContainer);\n    }\n}\nOverlayPositionBuilder.ɵfac = function OverlayPositionBuilder_Factory(t) { return new (t || OverlayPositionBuilder)(ɵngcc0.ɵɵinject(ɵngcc1.ViewportRuler), ɵngcc0.ɵɵinject(DOCUMENT), ɵngcc0.ɵɵinject(ɵngcc2.Platform, 8), ɵngcc0.ɵɵinject(OverlayContainer, 8)); };\nOverlayPositionBuilder.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: OverlayPositionBuilder, factory: OverlayPositionBuilder.ɵfac, providedIn: 'root' });\n/** @nocollapse */\nOverlayPositionBuilder.ctorParameters = () => [\n    { type: ViewportRuler },\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },\n    { type: Platform, decorators: [{ type: Optional }] },\n    { type: OverlayContainer, decorators: [{ type: Optional }] }\n];\n/** @nocollapse */ OverlayPositionBuilder.ngInjectableDef = defineInjectable({ factory: function OverlayPositionBuilder_Factory() { return new OverlayPositionBuilder(inject(ViewportRuler), inject(DOCUMENT), inject(Platform, 8), inject(OverlayContainer, 8)); }, token: OverlayPositionBuilder, providedIn: \"root\" });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(OverlayPositionBuilder, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return [{ type: ɵngcc1.ViewportRuler }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }, { type: ɵngcc2.Platform, decorators: [{\n                type: Optional\n            }] }, { type: OverlayContainer, decorators: [{\n                type: Optional\n            }] }]; }, null); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/** *\n * Next overlay unique ID.\n  @type {?} */\nlet nextUniqueId = 0;\n/**\n * Service to create Overlays. Overlays are dynamically added pieces of floating UI, meant to be\n * used as a low-level building block for other components. Dialogs, tooltips, menus,\n * selects, etc. can all be built using overlays. The service should primarily be used by authors\n * of re-usable components rather than developers building end-user applications.\n *\n * An overlay *is* a PortalOutlet, so any kind of Portal can be loaded into one.\n */\nclass Overlay {\n    /**\n     * @param {?} scrollStrategies\n     * @param {?} _overlayContainer\n     * @param {?} _componentFactoryResolver\n     * @param {?} _positionBuilder\n     * @param {?} _keyboardDispatcher\n     * @param {?} _injector\n     * @param {?} _ngZone\n     * @param {?} _document\n     * @param {?} _directionality\n     * @param {?=} _location\n     */\n    constructor(scrollStrategies, _overlayContainer, _componentFactoryResolver, _positionBuilder, _keyboardDispatcher, _injector, _ngZone, _document, _directionality, \n    // @breaking-change 8.0.0 `_location` parameter to be made required.\n    _location) {\n        this.scrollStrategies = scrollStrategies;\n        this._overlayContainer = _overlayContainer;\n        this._componentFactoryResolver = _componentFactoryResolver;\n        this._positionBuilder = _positionBuilder;\n        this._keyboardDispatcher = _keyboardDispatcher;\n        this._injector = _injector;\n        this._ngZone = _ngZone;\n        this._document = _document;\n        this._directionality = _directionality;\n        this._location = _location;\n    }\n    /**\n     * Creates an overlay.\n     * @param {?=} config Configuration applied to the overlay.\n     * @return {?} Reference to the created overlay.\n     */\n    create(config) {\n        /** @type {?} */\n        const host = this._createHostElement();\n        /** @type {?} */\n        const pane = this._createPaneElement(host);\n        /** @type {?} */\n        const portalOutlet = this._createPortalOutlet(pane);\n        /** @type {?} */\n        const overlayConfig = new OverlayConfig(config);\n        overlayConfig.direction = overlayConfig.direction || this._directionality.value;\n        return new OverlayRef(portalOutlet, host, pane, overlayConfig, this._ngZone, this._keyboardDispatcher, this._document, this._location);\n    }\n    /**\n     * Gets a position builder that can be used, via fluent API,\n     * to construct and configure a position strategy.\n     * @return {?} An overlay position builder.\n     */\n    position() {\n        return this._positionBuilder;\n    }\n    /**\n     * Creates the DOM element for an overlay and appends it to the overlay container.\n     * @param {?} host\n     * @return {?} Newly-created pane element\n     */\n    _createPaneElement(host) {\n        /** @type {?} */\n        const pane = this._document.createElement('div');\n        pane.id = `cdk-overlay-${nextUniqueId++}`;\n        pane.classList.add('cdk-overlay-pane');\n        host.appendChild(pane);\n        return pane;\n    }\n    /**\n     * Creates the host element that wraps around an overlay\n     * and can be used for advanced positioning.\n     * @return {?} Newly-create host element.\n     */\n    _createHostElement() {\n        /** @type {?} */\n        const host = this._document.createElement('div');\n        this._overlayContainer.getContainerElement().appendChild(host);\n        return host;\n    }\n    /**\n     * Create a DomPortalOutlet into which the overlay content can be loaded.\n     * @param {?} pane The DOM element to turn into a portal outlet.\n     * @return {?} A portal outlet for the given DOM element.\n     */\n    _createPortalOutlet(pane) {\n        // We have to resolve the ApplicationRef later in order to allow people\n        // to use overlay-based providers during app initialization.\n        if (!this._appRef) {\n            this._appRef = this._injector.get(ApplicationRef);\n        }\n        return new DomPortalOutlet(pane, this._componentFactoryResolver, this._appRef, this._injector);\n    }\n}\nOverlay.ɵfac = function Overlay_Factory(t) { return new (t || Overlay)(ɵngcc0.ɵɵinject(ScrollStrategyOptions), ɵngcc0.ɵɵinject(OverlayContainer), ɵngcc0.ɵɵinject(ɵngcc0.ComponentFactoryResolver), ɵngcc0.ɵɵinject(OverlayPositionBuilder), ɵngcc0.ɵɵinject(OverlayKeyboardDispatcher), ɵngcc0.ɵɵinject(ɵngcc0.Injector), ɵngcc0.ɵɵinject(ɵngcc0.NgZone), ɵngcc0.ɵɵinject(DOCUMENT), ɵngcc0.ɵɵinject(ɵngcc3.Directionality), ɵngcc0.ɵɵinject(ɵngcc4.Location, 8)); };\nOverlay.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: Overlay, factory: Overlay.ɵfac });\n/** @nocollapse */\nOverlay.ctorParameters = () => [\n    { type: ScrollStrategyOptions },\n    { type: OverlayContainer },\n    { type: ComponentFactoryResolver },\n    { type: OverlayPositionBuilder },\n    { type: OverlayKeyboardDispatcher },\n    { type: Injector },\n    { type: NgZone },\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },\n    { type: Directionality },\n    { type: Location, decorators: [{ type: Optional }] }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(Overlay, [{\n        type: Injectable\n    }], function () { return [{ type: ScrollStrategyOptions }, { type: OverlayContainer }, { type: ɵngcc0.ComponentFactoryResolver }, { type: OverlayPositionBuilder }, { type: OverlayKeyboardDispatcher }, { type: ɵngcc0.Injector }, { type: ɵngcc0.NgZone }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }, { type: ɵngcc3.Directionality }, { type: ɵngcc4.Location, decorators: [{\n                type: Optional\n            }] }]; }, null); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/** *\n * Default set of positions for the overlay. Follows the behavior of a dropdown.\n  @type {?} */\nconst defaultPositionList = [\n    {\n        originX: 'start',\n        originY: 'bottom',\n        overlayX: 'start',\n        overlayY: 'top'\n    },\n    {\n        originX: 'start',\n        originY: 'top',\n        overlayX: 'start',\n        overlayY: 'bottom'\n    },\n    {\n        originX: 'end',\n        originY: 'top',\n        overlayX: 'end',\n        overlayY: 'bottom'\n    },\n    {\n        originX: 'end',\n        originY: 'bottom',\n        overlayX: 'end',\n        overlayY: 'top'\n    }\n];\n/** *\n * Injection token that determines the scroll handling while the connected overlay is open.\n  @type {?} */\nconst CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY = new InjectionToken('cdk-connected-overlay-scroll-strategy');\n/**\n * Directive applied to an element to make it usable as an origin for an Overlay using a\n * ConnectedPositionStrategy.\n */\nclass CdkOverlayOrigin {\n    /**\n     * @param {?} elementRef\n     */\n    constructor(elementRef) {\n        this.elementRef = elementRef;\n    }\n}\nCdkOverlayOrigin.ɵfac = function CdkOverlayOrigin_Factory(t) { return new (t || CdkOverlayOrigin)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };\nCdkOverlayOrigin.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: CdkOverlayOrigin, selectors: [[\"\", \"cdk-overlay-origin\", \"\"], [\"\", \"overlay-origin\", \"\"], [\"\", \"cdkOverlayOrigin\", \"\"]], exportAs: [\"cdkOverlayOrigin\"] });\n/** @nocollapse */\nCdkOverlayOrigin.ctorParameters = () => [\n    { type: ElementRef }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkOverlayOrigin, [{\n        type: Directive,\n        args: [{\n                selector: '[cdk-overlay-origin], [overlay-origin], [cdkOverlayOrigin]',\n                exportAs: 'cdkOverlayOrigin'\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }]; }, null); })();\n/**\n * Directive to facilitate declarative creation of an\n * Overlay using a FlexibleConnectedPositionStrategy.\n */\nclass CdkConnectedOverlay {\n    /**\n     * @param {?} _overlay\n     * @param {?} templateRef\n     * @param {?} viewContainerRef\n     * @param {?} scrollStrategyFactory\n     * @param {?} _dir\n     */\n    constructor(_overlay, templateRef, viewContainerRef, scrollStrategyFactory, _dir) {\n        this._overlay = _overlay;\n        this._dir = _dir;\n        this._hasBackdrop = false;\n        this._lockPosition = false;\n        this._growAfterOpen = false;\n        this._flexibleDimensions = false;\n        this._push = false;\n        this._backdropSubscription = Subscription.EMPTY;\n        /**\n         * Margin between the overlay and the viewport edges.\n         */\n        this.viewportMargin = 0;\n        /**\n         * Whether the overlay is open.\n         */\n        this.open = false;\n        /**\n         * Event emitted when the backdrop is clicked.\n         */\n        this.backdropClick = new EventEmitter();\n        /**\n         * Event emitted when the position has changed.\n         */\n        this.positionChange = new EventEmitter();\n        /**\n         * Event emitted when the overlay has been attached.\n         */\n        this.attach = new EventEmitter();\n        /**\n         * Event emitted when the overlay has been detached.\n         */\n        this.detach = new EventEmitter();\n        /**\n         * Emits when there are keyboard events that are targeted at the overlay.\n         */\n        this.overlayKeydown = new EventEmitter();\n        this._templatePortal = new TemplatePortal(templateRef, viewContainerRef);\n        this._scrollStrategyFactory = scrollStrategyFactory;\n        this.scrollStrategy = this._scrollStrategyFactory();\n    }\n    /**\n     * The offset in pixels for the overlay connection point on the x-axis\n     * @return {?}\n     */\n    get offsetX() { return this._offsetX; }\n    /**\n     * @param {?} offsetX\n     * @return {?}\n     */\n    set offsetX(offsetX) {\n        this._offsetX = offsetX;\n        if (this._position) {\n            this._updatePositionStrategy(this._position);\n        }\n    }\n    /**\n     * The offset in pixels for the overlay connection point on the y-axis\n     * @return {?}\n     */\n    get offsetY() { return this._offsetY; }\n    /**\n     * @param {?} offsetY\n     * @return {?}\n     */\n    set offsetY(offsetY) {\n        this._offsetY = offsetY;\n        if (this._position) {\n            this._updatePositionStrategy(this._position);\n        }\n    }\n    /**\n     * Whether or not the overlay should attach a backdrop.\n     * @return {?}\n     */\n    get hasBackdrop() { return this._hasBackdrop; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set hasBackdrop(value) { this._hasBackdrop = coerceBooleanProperty(value); }\n    /**\n     * Whether or not the overlay should be locked when scrolling.\n     * @return {?}\n     */\n    get lockPosition() { return this._lockPosition; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set lockPosition(value) { this._lockPosition = coerceBooleanProperty(value); }\n    /**\n     * Whether the overlay's width and height can be constrained to fit within the viewport.\n     * @return {?}\n     */\n    get flexibleDimensions() { return this._flexibleDimensions; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set flexibleDimensions(value) {\n        this._flexibleDimensions = coerceBooleanProperty(value);\n    }\n    /**\n     * Whether the overlay can grow after the initial open when flexible positioning is turned on.\n     * @return {?}\n     */\n    get growAfterOpen() { return this._growAfterOpen; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set growAfterOpen(value) { this._growAfterOpen = coerceBooleanProperty(value); }\n    /**\n     * Whether the overlay can be pushed on-screen if none of the provided positions fit.\n     * @return {?}\n     */\n    get push() { return this._push; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set push(value) { this._push = coerceBooleanProperty(value); }\n    /**\n     * The associated overlay reference.\n     * @return {?}\n     */\n    get overlayRef() {\n        return this._overlayRef;\n    }\n    /**\n     * The element's layout direction.\n     * @return {?}\n     */\n    get dir() {\n        return this._dir ? this._dir.value : 'ltr';\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this._destroyOverlay();\n    }\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    ngOnChanges(changes) {\n        if (this._position) {\n            this._updatePositionStrategy(this._position);\n            if (changes['origin'] && this.open) {\n                this._position.apply();\n            }\n        }\n        if (changes['open']) {\n            this.open ? this._attachOverlay() : this._detachOverlay();\n        }\n    }\n    /**\n     * Creates an overlay\n     * @return {?}\n     */\n    _createOverlay() {\n        if (!this.positions || !this.positions.length) {\n            this.positions = defaultPositionList;\n        }\n        this._overlayRef = this._overlay.create(this._buildConfig());\n        this._overlayRef.keydownEvents().subscribe((event) => {\n            this.overlayKeydown.next(event);\n            if (event.keyCode === ESCAPE) {\n                this._detachOverlay();\n            }\n        });\n    }\n    /**\n     * Builds the overlay config based on the directive's inputs\n     * @return {?}\n     */\n    _buildConfig() {\n        /** @type {?} */\n        const positionStrategy = this._position = this._createPositionStrategy();\n        /** @type {?} */\n        const overlayConfig = new OverlayConfig({\n            direction: this._dir,\n            positionStrategy,\n            scrollStrategy: this.scrollStrategy,\n            hasBackdrop: this.hasBackdrop\n        });\n        if (this.width || this.width === 0) {\n            overlayConfig.width = this.width;\n        }\n        if (this.height || this.height === 0) {\n            overlayConfig.height = this.height;\n        }\n        if (this.minWidth || this.minWidth === 0) {\n            overlayConfig.minWidth = this.minWidth;\n        }\n        if (this.minHeight || this.minHeight === 0) {\n            overlayConfig.minHeight = this.minHeight;\n        }\n        if (this.backdropClass) {\n            overlayConfig.backdropClass = this.backdropClass;\n        }\n        if (this.panelClass) {\n            overlayConfig.panelClass = this.panelClass;\n        }\n        return overlayConfig;\n    }\n    /**\n     * Updates the state of a position strategy, based on the values of the directive inputs.\n     * @param {?} positionStrategy\n     * @return {?}\n     */\n    _updatePositionStrategy(positionStrategy) {\n        /** @type {?} */\n        const positions = this.positions.map(currentPosition => ({\n            originX: currentPosition.originX,\n            originY: currentPosition.originY,\n            overlayX: currentPosition.overlayX,\n            overlayY: currentPosition.overlayY,\n            offsetX: currentPosition.offsetX || this.offsetX,\n            offsetY: currentPosition.offsetY || this.offsetY\n        }));\n        return positionStrategy\n            .setOrigin(this.origin.elementRef)\n            .withPositions(positions)\n            .withFlexibleDimensions(this.flexibleDimensions)\n            .withPush(this.push)\n            .withGrowAfterOpen(this.growAfterOpen)\n            .withViewportMargin(this.viewportMargin)\n            .withLockedPosition(this.lockPosition);\n    }\n    /**\n     * Returns the position strategy of the overlay to be set on the overlay config\n     * @return {?}\n     */\n    _createPositionStrategy() {\n        /** @type {?} */\n        const strategy = this._overlay.position().flexibleConnectedTo(this.origin.elementRef);\n        this._updatePositionStrategy(strategy);\n        strategy.positionChanges.subscribe(p => this.positionChange.emit(p));\n        return strategy;\n    }\n    /**\n     * Attaches the overlay and subscribes to backdrop clicks if backdrop exists\n     * @return {?}\n     */\n    _attachOverlay() {\n        if (!this._overlayRef) {\n            this._createOverlay();\n        }\n        else {\n            // Update the overlay size, in case the directive's inputs have changed\n            this._overlayRef.updateSize({\n                width: this.width,\n                minWidth: this.minWidth,\n                height: this.height,\n                minHeight: this.minHeight,\n            });\n        }\n        if (!this._overlayRef.hasAttached()) {\n            this._overlayRef.attach(this._templatePortal);\n            this.attach.emit();\n        }\n        if (this.hasBackdrop) {\n            this._backdropSubscription = this._overlayRef.backdropClick().subscribe(event => {\n                this.backdropClick.emit(event);\n            });\n        }\n    }\n    /**\n     * Detaches the overlay and unsubscribes to backdrop clicks if backdrop exists\n     * @return {?}\n     */\n    _detachOverlay() {\n        if (this._overlayRef) {\n            this._overlayRef.detach();\n            this.detach.emit();\n        }\n        this._backdropSubscription.unsubscribe();\n    }\n    /**\n     * Destroys the overlay created by this directive.\n     * @return {?}\n     */\n    _destroyOverlay() {\n        if (this._overlayRef) {\n            this._overlayRef.dispose();\n        }\n        this._backdropSubscription.unsubscribe();\n    }\n}\nCdkConnectedOverlay.ɵfac = function CdkConnectedOverlay_Factory(t) { return new (t || CdkConnectedOverlay)(ɵngcc0.ɵɵdirectiveInject(Overlay), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.Directionality, 8)); };\nCdkConnectedOverlay.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: CdkConnectedOverlay, selectors: [[\"\", \"cdk-connected-overlay\", \"\"], [\"\", \"connected-overlay\", \"\"], [\"\", \"cdkConnectedOverlay\", \"\"]], inputs: { viewportMargin: [\"cdkConnectedOverlayViewportMargin\", \"viewportMargin\"], open: [\"cdkConnectedOverlayOpen\", \"open\"], scrollStrategy: [\"cdkConnectedOverlayScrollStrategy\", \"scrollStrategy\"], offsetX: [\"cdkConnectedOverlayOffsetX\", \"offsetX\"], offsetY: [\"cdkConnectedOverlayOffsetY\", \"offsetY\"], hasBackdrop: [\"cdkConnectedOverlayHasBackdrop\", \"hasBackdrop\"], lockPosition: [\"cdkConnectedOverlayLockPosition\", \"lockPosition\"], flexibleDimensions: [\"cdkConnectedOverlayFlexibleDimensions\", \"flexibleDimensions\"], growAfterOpen: [\"cdkConnectedOverlayGrowAfterOpen\", \"growAfterOpen\"], push: [\"cdkConnectedOverlayPush\", \"push\"], positions: [\"cdkConnectedOverlayPositions\", \"positions\"], origin: [\"cdkConnectedOverlayOrigin\", \"origin\"], width: [\"cdkConnectedOverlayWidth\", \"width\"], height: [\"cdkConnectedOverlayHeight\", \"height\"], minWidth: [\"cdkConnectedOverlayMinWidth\", \"minWidth\"], minHeight: [\"cdkConnectedOverlayMinHeight\", \"minHeight\"], backdropClass: [\"cdkConnectedOverlayBackdropClass\", \"backdropClass\"], panelClass: [\"cdkConnectedOverlayPanelClass\", \"panelClass\"] }, outputs: { backdropClick: \"backdropClick\", positionChange: \"positionChange\", attach: \"attach\", detach: \"detach\", overlayKeydown: \"overlayKeydown\" }, exportAs: [\"cdkConnectedOverlay\"], features: [ɵngcc0.ɵɵNgOnChangesFeature] });\n/** @nocollapse */\nCdkConnectedOverlay.ctorParameters = () => [\n    { type: Overlay },\n    { type: TemplateRef },\n    { type: ViewContainerRef },\n    { type: undefined, decorators: [{ type: Inject, args: [CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY,] }] },\n    { type: Directionality, decorators: [{ type: Optional }] }\n];\nCdkConnectedOverlay.propDecorators = {\n    origin: [{ type: Input, args: ['cdkConnectedOverlayOrigin',] }],\n    positions: [{ type: Input, args: ['cdkConnectedOverlayPositions',] }],\n    offsetX: [{ type: Input, args: ['cdkConnectedOverlayOffsetX',] }],\n    offsetY: [{ type: Input, args: ['cdkConnectedOverlayOffsetY',] }],\n    width: [{ type: Input, args: ['cdkConnectedOverlayWidth',] }],\n    height: [{ type: Input, args: ['cdkConnectedOverlayHeight',] }],\n    minWidth: [{ type: Input, args: ['cdkConnectedOverlayMinWidth',] }],\n    minHeight: [{ type: Input, args: ['cdkConnectedOverlayMinHeight',] }],\n    backdropClass: [{ type: Input, args: ['cdkConnectedOverlayBackdropClass',] }],\n    panelClass: [{ type: Input, args: ['cdkConnectedOverlayPanelClass',] }],\n    viewportMargin: [{ type: Input, args: ['cdkConnectedOverlayViewportMargin',] }],\n    scrollStrategy: [{ type: Input, args: ['cdkConnectedOverlayScrollStrategy',] }],\n    open: [{ type: Input, args: ['cdkConnectedOverlayOpen',] }],\n    hasBackdrop: [{ type: Input, args: ['cdkConnectedOverlayHasBackdrop',] }],\n    lockPosition: [{ type: Input, args: ['cdkConnectedOverlayLockPosition',] }],\n    flexibleDimensions: [{ type: Input, args: ['cdkConnectedOverlayFlexibleDimensions',] }],\n    growAfterOpen: [{ type: Input, args: ['cdkConnectedOverlayGrowAfterOpen',] }],\n    push: [{ type: Input, args: ['cdkConnectedOverlayPush',] }],\n    backdropClick: [{ type: Output }],\n    positionChange: [{ type: Output }],\n    attach: [{ type: Output }],\n    detach: [{ type: Output }],\n    overlayKeydown: [{ type: Output }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkConnectedOverlay, [{\n        type: Directive,\n        args: [{\n                selector: '[cdk-connected-overlay], [connected-overlay], [cdkConnectedOverlay]',\n                exportAs: 'cdkConnectedOverlay'\n            }]\n    }], function () { return [{ type: Overlay }, { type: ɵngcc0.TemplateRef }, { type: ɵngcc0.ViewContainerRef }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY]\n            }] }, { type: ɵngcc3.Directionality, decorators: [{\n                type: Optional\n            }] }]; }, { viewportMargin: [{\n            type: Input,\n            args: ['cdkConnectedOverlayViewportMargin']\n        }], open: [{\n            type: Input,\n            args: ['cdkConnectedOverlayOpen']\n        }], backdropClick: [{\n            type: Output\n        }], positionChange: [{\n            type: Output\n        }], attach: [{\n            type: Output\n        }], detach: [{\n            type: Output\n        }], overlayKeydown: [{\n            type: Output\n        }], scrollStrategy: [{\n            type: Input,\n            args: ['cdkConnectedOverlayScrollStrategy']\n        }], offsetX: [{\n            type: Input,\n            args: ['cdkConnectedOverlayOffsetX']\n        }], offsetY: [{\n            type: Input,\n            args: ['cdkConnectedOverlayOffsetY']\n        }], hasBackdrop: [{\n            type: Input,\n            args: ['cdkConnectedOverlayHasBackdrop']\n        }], lockPosition: [{\n            type: Input,\n            args: ['cdkConnectedOverlayLockPosition']\n        }], flexibleDimensions: [{\n            type: Input,\n            args: ['cdkConnectedOverlayFlexibleDimensions']\n        }], growAfterOpen: [{\n            type: Input,\n            args: ['cdkConnectedOverlayGrowAfterOpen']\n        }], push: [{\n            type: Input,\n            args: ['cdkConnectedOverlayPush']\n        }], positions: [{\n            type: Input,\n            args: ['cdkConnectedOverlayPositions']\n        }], origin: [{\n            type: Input,\n            args: ['cdkConnectedOverlayOrigin']\n        }], width: [{\n            type: Input,\n            args: ['cdkConnectedOverlayWidth']\n        }], height: [{\n            type: Input,\n            args: ['cdkConnectedOverlayHeight']\n        }], minWidth: [{\n            type: Input,\n            args: ['cdkConnectedOverlayMinWidth']\n        }], minHeight: [{\n            type: Input,\n            args: ['cdkConnectedOverlayMinHeight']\n        }], backdropClass: [{\n            type: Input,\n            args: ['cdkConnectedOverlayBackdropClass']\n        }], panelClass: [{\n            type: Input,\n            args: ['cdkConnectedOverlayPanelClass']\n        }] }); })();\n/**\n * \\@docs-private\n * @param {?} overlay\n * @return {?}\n */\nfunction CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay) {\n    return () => overlay.scrollStrategies.reposition();\n}\n/** *\n * \\@docs-private\n  @type {?} */\nconst CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER = {\n    provide: CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY,\n    deps: [Overlay],\n    useFactory: CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\nclass OverlayModule {\n}\nOverlayModule.ɵfac = function OverlayModule_Factory(t) { return new (t || OverlayModule)(); };\nOverlayModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: OverlayModule });\nOverlayModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ providers: [\n        Overlay,\n        CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER,\n    ], imports: [[BidiModule, PortalModule, ScrollingModule], ScrollingModule] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(OverlayModule, [{\n        type: NgModule,\n        args: [{\n                imports: [BidiModule, PortalModule, ScrollingModule],\n                exports: [CdkConnectedOverlay, CdkOverlayOrigin, ScrollingModule],\n                declarations: [CdkConnectedOverlay, CdkOverlayOrigin],\n                providers: [\n                    Overlay,\n                    CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER,\n                ]\n            }]\n    }], null, null); })();\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(OverlayModule, { declarations: function () { return [CdkConnectedOverlay, CdkOverlayOrigin]; }, imports: function () { return [BidiModule, PortalModule, ScrollingModule]; }, exports: function () { return [CdkConnectedOverlay, CdkOverlayOrigin, ScrollingModule]; } }); })();\n/** *\n * @deprecated Use `OverlayModule` instead.\n * \\@breaking-change 8.0.0\n * \\@docs-private\n  @type {?} */\nconst OVERLAY_PROVIDERS = [\n    Overlay,\n    OverlayPositionBuilder,\n    OVERLAY_KEYBOARD_DISPATCHER_PROVIDER,\n    VIEWPORT_RULER_PROVIDER,\n    OVERLAY_CONTAINER_PROVIDER,\n    CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER,\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * Alternative to OverlayContainer that supports correct displaying of overlay elements in\n * Fullscreen mode\n * https://developer.mozilla.org/en-US/docs/Web/API/Element/requestFullScreen\n *\n * Should be provided in the root component.\n */\nclass FullscreenOverlayContainer extends OverlayContainer {\n    /**\n     * @param {?} _document\n     */\n    constructor(_document) {\n        super(_document);\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        super.ngOnDestroy();\n        if (this._fullScreenEventName && this._fullScreenListener) {\n            this._document.removeEventListener(this._fullScreenEventName, this._fullScreenListener);\n        }\n    }\n    /**\n     * @return {?}\n     */\n    _createContainer() {\n        super._createContainer();\n        this._adjustParentForFullscreenChange();\n        this._addFullscreenChangeListener(() => this._adjustParentForFullscreenChange());\n    }\n    /**\n     * @return {?}\n     */\n    _adjustParentForFullscreenChange() {\n        if (!this._containerElement) {\n            return;\n        }\n        /** @type {?} */\n        const fullscreenElement = this.getFullscreenElement();\n        /** @type {?} */\n        const parent = fullscreenElement || this._document.body;\n        parent.appendChild(this._containerElement);\n    }\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    _addFullscreenChangeListener(fn) {\n        /** @type {?} */\n        const eventName = this._getEventName();\n        if (eventName) {\n            if (this._fullScreenListener) {\n                this._document.removeEventListener(eventName, this._fullScreenListener);\n            }\n            this._document.addEventListener(eventName, fn);\n            this._fullScreenListener = fn;\n        }\n    }\n    /**\n     * @return {?}\n     */\n    _getEventName() {\n        if (!this._fullScreenEventName) {\n            if (this._document.fullscreenEnabled) {\n                this._fullScreenEventName = 'fullscreenchange';\n            }\n            else if (this._document.webkitFullscreenEnabled) {\n                this._fullScreenEventName = 'webkitfullscreenchange';\n            }\n            else if ((/** @type {?} */ (this._document)).mozFullScreenEnabled) {\n                this._fullScreenEventName = 'mozfullscreenchange';\n            }\n            else if ((/** @type {?} */ (this._document)).msFullscreenEnabled) {\n                this._fullScreenEventName = 'MSFullscreenChange';\n            }\n        }\n        return this._fullScreenEventName;\n    }\n    /**\n     * When the page is put into fullscreen mode, a specific element is specified.\n     * Only that element and its children are visible when in fullscreen mode.\n     * @return {?}\n     */\n    getFullscreenElement() {\n        return this._document.fullscreenElement ||\n            this._document.webkitFullscreenElement ||\n            (/** @type {?} */ (this._document)).mozFullScreenElement ||\n            (/** @type {?} */ (this._document)).msFullscreenElement ||\n            null;\n    }\n}\nFullscreenOverlayContainer.ɵfac = function FullscreenOverlayContainer_Factory(t) { return new (t || FullscreenOverlayContainer)(ɵngcc0.ɵɵinject(DOCUMENT)); };\nFullscreenOverlayContainer.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: FullscreenOverlayContainer, factory: FullscreenOverlayContainer.ɵfac });\n/** @nocollapse */\nFullscreenOverlayContainer.ctorParameters = () => [\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(FullscreenOverlayContainer, [{\n        type: Injectable\n    }], function () { return [{ type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }]; }, null); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\nexport { Overlay, OverlayContainer, CdkOverlayOrigin, CdkConnectedOverlay, FullscreenOverlayContainer, OverlayRef, OverlayKeyboardDispatcher, OverlayPositionBuilder, GlobalPositionStrategy, ConnectedPositionStrategy, FlexibleConnectedPositionStrategy, OverlayConfig, validateVerticalPosition, validateHorizontalPosition, ConnectionPositionPair, ScrollingVisibility, ConnectedOverlayPositionChange, ScrollStrategyOptions, RepositionScrollStrategy, CloseScrollStrategy, NoopScrollStrategy, BlockScrollStrategy, OverlayModule, OVERLAY_PROVIDERS, OVERLAY_KEYBOARD_DISPATCHER_PROVIDER as ɵg, OVERLAY_KEYBOARD_DISPATCHER_PROVIDER_FACTORY as ɵf, OVERLAY_CONTAINER_PROVIDER as ɵb, OVERLAY_CONTAINER_PROVIDER_FACTORY as ɵa, CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY as ɵc, CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER as ɵe, CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER_FACTORY as ɵd };\n\n//# sourceMappingURL=overlay.js.map"]},"metadata":{},"sourceType":"module"}