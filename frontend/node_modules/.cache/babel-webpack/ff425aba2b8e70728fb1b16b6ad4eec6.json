{"ast":null,"code":"import _createClass from \"/Users/adepertat/Dropbox/ECOLES/Openclassroom/P6_de_Pertat_Antoine/AntoinedePertat_6_240521/frontend/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _get from \"/Users/adepertat/Dropbox/ECOLES/Openclassroom/P6_de_Pertat_Antoine/AntoinedePertat_6_240521/frontend/node_modules/@babel/runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"/Users/adepertat/Dropbox/ECOLES/Openclassroom/P6_de_Pertat_Antoine/AntoinedePertat_6_240521/frontend/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/adepertat/Dropbox/ECOLES/Openclassroom/P6_de_Pertat_Antoine/AntoinedePertat_6_240521/frontend/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/adepertat/Dropbox/ECOLES/Openclassroom/P6_de_Pertat_Antoine/AntoinedePertat_6_240521/frontend/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _classCallCheck from \"/Users/adepertat/Dropbox/ECOLES/Openclassroom/P6_de_Pertat_Antoine/AntoinedePertat_6_240521/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Directive, ViewContainerRef, Attribute, ContentChildren, ElementRef, Input, IterableDiffers, ChangeDetectionStrategy, Component, ViewChild, ViewEncapsulation, NgModule } from '@angular/core';\nimport { CdkNestedTreeNode, CdkTree, CdkTreeNode, CdkTreeNodeDef, CdkTreeNodePadding, CdkTreeNodeToggle, CdkTreeModule } from '@angular/cdk/tree';\nimport { mixinDisabled, mixinTabIndex, MatCommonModule } from '@angular/material/core';\nimport { CommonModule } from '@angular/common';\nimport { DataSource } from '@angular/cdk/collections';\nimport { BehaviorSubject, merge } from 'rxjs';\nimport { map, take } from 'rxjs/operators';\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * Outlet for nested CdkNode. Put `[matTreeNodeOutlet]` on a tag to place children dataNodes\n * inside the outlet.\n */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/tree';\n\nvar MatTreeNodeOutlet = /*@__PURE__*/function () {\n  var MatTreeNodeOutlet =\n  /**\n   * @param {?} viewContainer\n   */\n  function MatTreeNodeOutlet(viewContainer) {\n    _classCallCheck(this, MatTreeNodeOutlet);\n\n    this.viewContainer = viewContainer;\n  };\n\n  MatTreeNodeOutlet.ɵfac = function MatTreeNodeOutlet_Factory(t) {\n    return new (t || MatTreeNodeOutlet)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef));\n  };\n\n  MatTreeNodeOutlet.ɵdir =\n  /*@__PURE__*/\n\n  /*@__PURE__*/\n  ɵngcc0.ɵɵdefineDirective({\n    type: MatTreeNodeOutlet,\n    selectors: [[\"\", \"matTreeNodeOutlet\", \"\"]]\n  });\n  return MatTreeNodeOutlet;\n}();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/** @type {?} */\n\n\nvar _CdkTreeNodeDef = CdkTreeNodeDef;\n/** @type {?} */\n\nvar _MatTreeNodeMixinBase = /*@__PURE__*/mixinTabIndex( /*@__PURE__*/mixinDisabled(CdkTreeNode));\n/** @type {?} */\n\n\nvar _MatNestedTreeNodeMixinBase = /*@__PURE__*/mixinTabIndex( /*@__PURE__*/mixinDisabled(CdkNestedTreeNode));\n\nvar MatTreeNode = /*@__PURE__*/function () {\n  var MatTreeNode = /*#__PURE__*/function (_MatTreeNodeMixinBase2) {\n    _inherits(MatTreeNode, _MatTreeNodeMixinBase2);\n\n    var _super = _createSuper(MatTreeNode);\n\n    /**\n     * @param {?} _elementRef\n     * @param {?} _tree\n     * @param {?} tabIndex\n     */\n    function MatTreeNode(_elementRef, _tree, tabIndex) {\n      var _this;\n\n      _classCallCheck(this, MatTreeNode);\n\n      _this = _super.call(this, _elementRef, _tree);\n      _this._elementRef = _elementRef;\n      _this._tree = _tree;\n      _this.role = 'treeitem';\n      _this.tabIndex = Number(tabIndex) || 0;\n      return _this;\n    }\n\n    return MatTreeNode;\n  }(_MatTreeNodeMixinBase);\n\n  MatTreeNode.ɵfac = function MatTreeNode_Factory(t) {\n    return new (t || MatTreeNode)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.CdkTree), ɵngcc0.ɵɵinjectAttribute('tabindex'));\n  };\n\n  MatTreeNode.ɵdir =\n  /*@__PURE__*/\n\n  /*@__PURE__*/\n  ɵngcc0.ɵɵdefineDirective({\n    type: MatTreeNode,\n    selectors: [[\"mat-tree-node\"]],\n    hostAttrs: [1, \"mat-tree-node\"],\n    hostVars: 3,\n    hostBindings: function MatTreeNode_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"aria-expanded\", ctx.isExpanded)(\"aria-level\", ctx.role === \"treeitem\" ? ctx.level : null)(\"role\", ctx.role);\n      }\n    },\n    inputs: {\n      disabled: \"disabled\",\n      tabIndex: \"tabIndex\",\n      role: \"role\"\n    },\n    exportAs: [\"matTreeNode\"],\n    features: [/*@__PURE__*/ɵngcc0.ɵɵProvidersFeature([{\n      provide: CdkTreeNode,\n      useExisting: MatTreeNode\n    }]), ɵngcc0.ɵɵInheritDefinitionFeature]\n  });\n  return MatTreeNode;\n}();\n\nvar MatTreeNodeDef = /*@__PURE__*/function () {\n  var MatTreeNodeDef = /*#__PURE__*/function (_CdkTreeNodeDef2) {\n    _inherits(MatTreeNodeDef, _CdkTreeNodeDef2);\n\n    var _super2 = _createSuper(MatTreeNodeDef);\n\n    function MatTreeNodeDef() {\n      _classCallCheck(this, MatTreeNodeDef);\n\n      return _super2.apply(this, arguments);\n    }\n\n    return MatTreeNodeDef;\n  }(_CdkTreeNodeDef);\n\n  MatTreeNodeDef.ɵfac =\n  /*@__PURE__*/\n\n  /*@__PURE__*/\n  function () {\n    var ɵMatTreeNodeDef_BaseFactory;\n    return function MatTreeNodeDef_Factory(t) {\n      return (ɵMatTreeNodeDef_BaseFactory || (ɵMatTreeNodeDef_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(MatTreeNodeDef)))(t || MatTreeNodeDef);\n    };\n  }();\n\n  MatTreeNodeDef.ɵdir =\n  /*@__PURE__*/\n\n  /*@__PURE__*/\n  ɵngcc0.ɵɵdefineDirective({\n    type: MatTreeNodeDef,\n    selectors: [[\"\", \"matTreeNodeDef\", \"\"]],\n    inputs: {\n      when: [\"matTreeNodeDefWhen\", \"when\"],\n      data: [\"matTreeNode\", \"data\"]\n    },\n    features: [/*@__PURE__*/ɵngcc0.ɵɵProvidersFeature([{\n      provide: CdkTreeNodeDef,\n      useExisting: MatTreeNodeDef\n    }]), ɵngcc0.ɵɵInheritDefinitionFeature]\n  });\n  return MatTreeNodeDef;\n}();\n\nvar MatNestedTreeNode = /*@__PURE__*/function () {\n  var MatNestedTreeNode = /*#__PURE__*/function (_MatNestedTreeNodeMix) {\n    _inherits(MatNestedTreeNode, _MatNestedTreeNodeMix);\n\n    var _super3 = _createSuper(MatNestedTreeNode);\n\n    /**\n     * @param {?} _elementRef\n     * @param {?} _tree\n     * @param {?} _differs\n     * @param {?} tabIndex\n     */\n    function MatNestedTreeNode(_elementRef, _tree, _differs, tabIndex) {\n      var _this2;\n\n      _classCallCheck(this, MatNestedTreeNode);\n\n      _this2 = _super3.call(this, _elementRef, _tree, _differs);\n      _this2._elementRef = _elementRef;\n      _this2._tree = _tree;\n      _this2._differs = _differs;\n      _this2.tabIndex = Number(tabIndex) || 0;\n      return _this2;\n    }\n    /**\n     * @return {?}\n     */\n\n\n    _createClass(MatNestedTreeNode, [{\n      key: \"ngAfterContentInit\",\n      value: function ngAfterContentInit() {\n        _get(_getPrototypeOf(MatNestedTreeNode.prototype), \"ngAfterContentInit\", this).call(this);\n      }\n      /**\n       * @return {?}\n       */\n\n    }, {\n      key: \"ngOnDestroy\",\n      value: function ngOnDestroy() {\n        _get(_getPrototypeOf(MatNestedTreeNode.prototype), \"ngOnDestroy\", this).call(this);\n      }\n    }]);\n\n    return MatNestedTreeNode;\n  }(_MatNestedTreeNodeMixinBase);\n\n  MatNestedTreeNode.ɵfac = function MatNestedTreeNode_Factory(t) {\n    return new (t || MatNestedTreeNode)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.CdkTree), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.IterableDiffers), ɵngcc0.ɵɵinjectAttribute('tabindex'));\n  };\n\n  MatNestedTreeNode.ɵdir =\n  /*@__PURE__*/\n\n  /*@__PURE__*/\n  ɵngcc0.ɵɵdefineDirective({\n    type: MatNestedTreeNode,\n    selectors: [[\"mat-nested-tree-node\"]],\n    contentQueries: function MatNestedTreeNode_ContentQueries(rf, ctx, dirIndex) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MatTreeNodeOutlet, 4);\n      }\n\n      if (rf & 2) {\n        var _t;\n\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.nodeOutlet = _t);\n      }\n    },\n    hostAttrs: [1, \"mat-nested-tree-node\"],\n    hostVars: 2,\n    hostBindings: function MatNestedTreeNode_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"aria-expanded\", ctx.isExpanded)(\"role\", ctx.role);\n      }\n    },\n    inputs: {\n      disabled: \"disabled\",\n      tabIndex: \"tabIndex\",\n      node: [\"matNestedTreeNode\", \"node\"]\n    },\n    exportAs: [\"matNestedTreeNode\"],\n    features: [/*@__PURE__*/ɵngcc0.ɵɵProvidersFeature([{\n      provide: CdkNestedTreeNode,\n      useExisting: MatNestedTreeNode\n    }, {\n      provide: CdkTreeNode,\n      useExisting: MatNestedTreeNode\n    }]), ɵngcc0.ɵɵInheritDefinitionFeature]\n  });\n  return MatNestedTreeNode;\n}();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/** @type {?} */\n\n\nvar _CdkTreeNodePadding = CdkTreeNodePadding;\n\nvar MatTreeNodePadding = /*@__PURE__*/function () {\n  var MatTreeNodePadding = /*#__PURE__*/function (_CdkTreeNodePadding2) {\n    _inherits(MatTreeNodePadding, _CdkTreeNodePadding2);\n\n    var _super4 = _createSuper(MatTreeNodePadding);\n\n    function MatTreeNodePadding() {\n      _classCallCheck(this, MatTreeNodePadding);\n\n      return _super4.apply(this, arguments);\n    }\n\n    return MatTreeNodePadding;\n  }(_CdkTreeNodePadding);\n\n  MatTreeNodePadding.ɵfac =\n  /*@__PURE__*/\n\n  /*@__PURE__*/\n  function () {\n    var ɵMatTreeNodePadding_BaseFactory;\n    return function MatTreeNodePadding_Factory(t) {\n      return (ɵMatTreeNodePadding_BaseFactory || (ɵMatTreeNodePadding_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(MatTreeNodePadding)))(t || MatTreeNodePadding);\n    };\n  }();\n\n  MatTreeNodePadding.ɵdir =\n  /*@__PURE__*/\n\n  /*@__PURE__*/\n  ɵngcc0.ɵɵdefineDirective({\n    type: MatTreeNodePadding,\n    selectors: [[\"\", \"matTreeNodePadding\", \"\"]],\n    inputs: {\n      level: [\"matTreeNodePadding\", \"level\"],\n      indent: [\"matTreeNodePaddingIndent\", \"indent\"]\n    },\n    features: [/*@__PURE__*/ɵngcc0.ɵɵProvidersFeature([{\n      provide: CdkTreeNodePadding,\n      useExisting: MatTreeNodePadding\n    }]), ɵngcc0.ɵɵInheritDefinitionFeature]\n  });\n  return MatTreeNodePadding;\n}();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/** @type {?} */\n\n\nvar _CdkTree = CdkTree;\n\nvar MatTree = /*@__PURE__*/function () {\n  var MatTree = /*#__PURE__*/function (_CdkTree2) {\n    _inherits(MatTree, _CdkTree2);\n\n    var _super5 = _createSuper(MatTree);\n\n    function MatTree() {\n      _classCallCheck(this, MatTree);\n\n      return _super5.apply(this, arguments);\n    }\n\n    return MatTree;\n  }(_CdkTree);\n\n  MatTree.ɵfac =\n  /*@__PURE__*/\n\n  /*@__PURE__*/\n  function () {\n    var ɵMatTree_BaseFactory;\n    return function MatTree_Factory(t) {\n      return (ɵMatTree_BaseFactory || (ɵMatTree_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(MatTree)))(t || MatTree);\n    };\n  }();\n\n  MatTree.ɵcmp =\n  /*@__PURE__*/\n\n  /*@__PURE__*/\n  ɵngcc0.ɵɵdefineComponent({\n    type: MatTree,\n    selectors: [[\"mat-tree\"]],\n    viewQuery: function MatTree_Query(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(MatTreeNodeOutlet, 5);\n      }\n\n      if (rf & 2) {\n        var _t;\n\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._nodeOutlet = _t.first);\n      }\n    },\n    hostAttrs: [\"role\", \"tree\", 1, \"mat-tree\"],\n    exportAs: [\"matTree\"],\n    features: [/*@__PURE__*/ɵngcc0.ɵɵProvidersFeature([{\n      provide: CdkTree,\n      useExisting: MatTree\n    }]), ɵngcc0.ɵɵInheritDefinitionFeature],\n    decls: 1,\n    vars: 0,\n    consts: [[\"matTreeNodeOutlet\", \"\"]],\n    template: function MatTree_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵelementContainer(0, 0);\n      }\n    },\n    directives: [MatTreeNodeOutlet],\n    styles: [\".mat-tree{display:block}.mat-tree-node{display:flex;align-items:center;min-height:48px;flex:1;overflow:hidden;word-wrap:break-word}.mat-nested-tree-ndoe{border-bottom-width:0}\"],\n    encapsulation: 2,\n    changeDetection: 0\n  });\n  return MatTree;\n}();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/** @type {?} */\n\n\nvar _CdkTreeNodeToggle = CdkTreeNodeToggle;\n\nvar MatTreeNodeToggle = /*@__PURE__*/function () {\n  var MatTreeNodeToggle = /*#__PURE__*/function (_CdkTreeNodeToggle2) {\n    _inherits(MatTreeNodeToggle, _CdkTreeNodeToggle2);\n\n    var _super6 = _createSuper(MatTreeNodeToggle);\n\n    function MatTreeNodeToggle() {\n      var _this3;\n\n      _classCallCheck(this, MatTreeNodeToggle);\n\n      _this3 = _super6.apply(this, arguments);\n      _this3.recursive = false;\n      return _this3;\n    }\n\n    return MatTreeNodeToggle;\n  }(_CdkTreeNodeToggle);\n\n  MatTreeNodeToggle.ɵfac =\n  /*@__PURE__*/\n\n  /*@__PURE__*/\n  function () {\n    var ɵMatTreeNodeToggle_BaseFactory;\n    return function MatTreeNodeToggle_Factory(t) {\n      return (ɵMatTreeNodeToggle_BaseFactory || (ɵMatTreeNodeToggle_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(MatTreeNodeToggle)))(t || MatTreeNodeToggle);\n    };\n  }();\n\n  MatTreeNodeToggle.ɵdir =\n  /*@__PURE__*/\n\n  /*@__PURE__*/\n  ɵngcc0.ɵɵdefineDirective({\n    type: MatTreeNodeToggle,\n    selectors: [[\"\", \"matTreeNodeToggle\", \"\"]],\n    hostBindings: function MatTreeNodeToggle_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"click\", function MatTreeNodeToggle_click_HostBindingHandler($event) {\n          return ctx._toggle($event);\n        });\n      }\n    },\n    inputs: {\n      recursive: [\"matTreeNodeToggleRecursive\", \"recursive\"]\n    },\n    features: [/*@__PURE__*/ɵngcc0.ɵɵProvidersFeature([{\n      provide: CdkTreeNodeToggle,\n      useExisting: MatTreeNodeToggle\n    }]), ɵngcc0.ɵɵInheritDefinitionFeature]\n  });\n  return MatTreeNodeToggle;\n}();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/** @type {?} */\n\n\nvar MAT_TREE_DIRECTIVES = [MatNestedTreeNode, MatTreeNodeDef, MatTreeNodePadding, MatTreeNodeToggle, MatTree, MatTreeNode, MatTreeNodeOutlet];\n\nvar MatTreeModule = /*@__PURE__*/function () {\n  var MatTreeModule = function MatTreeModule() {\n    _classCallCheck(this, MatTreeModule);\n  };\n\n  MatTreeModule.ɵfac = function MatTreeModule_Factory(t) {\n    return new (t || MatTreeModule)();\n  };\n\n  MatTreeModule.ɵmod =\n  /*@__PURE__*/\n\n  /*@__PURE__*/\n  ɵngcc0.ɵɵdefineNgModule({\n    type: MatTreeModule\n  });\n  MatTreeModule.ɵinj =\n  /*@__PURE__*/\n\n  /*@__PURE__*/\n  ɵngcc0.ɵɵdefineInjector({\n    imports: [[CdkTreeModule, CommonModule, MatCommonModule]]\n  });\n  return MatTreeModule;\n}();\n/*@__PURE__*/\n\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatTreeModule, {\n    declarations: function declarations() {\n      return [MatNestedTreeNode, MatTreeNodeDef, MatTreeNodePadding, MatTreeNodeToggle, MatTree, MatTreeNode, MatTreeNodeOutlet];\n    },\n    imports: function imports() {\n      return [CdkTreeModule, CommonModule, MatCommonModule];\n    },\n    exports: function exports() {\n      return [MatNestedTreeNode, MatTreeNodeDef, MatTreeNodePadding, MatTreeNodeToggle, MatTree, MatTreeNode, MatTreeNodeOutlet];\n    }\n  });\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * Tree flattener to convert a normal type of node to node with children & level information.\n * Transform nested nodes of type `T` to flattened nodes of type `F`.\n *\n * For example, the input data of type `T` is nested, and contains its children data:\n *   SomeNode: {\n *     key: 'Fruits',\n *     children: [\n *       NodeOne: {\n *         key: 'Apple',\n *       },\n *       NodeTwo: {\n *        key: 'Pear',\n *      }\n *    ]\n *  }\n *  After flattener flatten the tree, the structure will become\n *  SomeNode: {\n *    key: 'Fruits',\n *    expandable: true,\n *    level: 1\n *  },\n *  NodeOne: {\n *    key: 'Apple',\n *    expandable: false,\n *    level: 2\n *  },\n *  NodeTwo: {\n *   key: 'Pear',\n *   expandable: false,\n *   level: 2\n * }\n * and the output flattened type is `F` with additional information.\n * @template T, F\n */\n\n\nvar MatTreeFlattener = /*#__PURE__*/function () {\n  /**\n   * @param {?} transformFunction\n   * @param {?} getLevel\n   * @param {?} isExpandable\n   * @param {?} getChildren\n   */\n  function MatTreeFlattener(transformFunction, getLevel, isExpandable, getChildren) {\n    _classCallCheck(this, MatTreeFlattener);\n\n    this.transformFunction = transformFunction;\n    this.getLevel = getLevel;\n    this.isExpandable = isExpandable;\n    this.getChildren = getChildren;\n  }\n  /**\n   * @param {?} node\n   * @param {?} level\n   * @param {?} resultNodes\n   * @param {?} parentMap\n   * @return {?}\n   */\n\n\n  _createClass(MatTreeFlattener, [{\n    key: \"_flattenNode\",\n    value: function _flattenNode(node, level, resultNodes, parentMap) {\n      var _this4 = this;\n\n      /** @type {?} */\n      var flatNode = this.transformFunction(node, level);\n      resultNodes.push(flatNode);\n\n      if (this.isExpandable(flatNode)) {\n        /** @type {?} */\n        var childrenNodes = this.getChildren(node);\n\n        if (Array.isArray(childrenNodes)) {\n          this._flattenChildren(childrenNodes, level, resultNodes, parentMap);\n        } else {\n          childrenNodes.pipe(take(1)).subscribe(function (children) {\n            _this4._flattenChildren(children, level, resultNodes, parentMap);\n          });\n        }\n      }\n\n      return resultNodes;\n    }\n    /**\n     * @param {?} children\n     * @param {?} level\n     * @param {?} resultNodes\n     * @param {?} parentMap\n     * @return {?}\n     */\n\n  }, {\n    key: \"_flattenChildren\",\n    value: function _flattenChildren(children, level, resultNodes, parentMap) {\n      var _this5 = this;\n\n      children.forEach(function (child, index) {\n        /** @type {?} */\n        var childParentMap = parentMap.slice();\n        childParentMap.push(index != children.length - 1);\n\n        _this5._flattenNode(child, level + 1, resultNodes, childParentMap);\n      });\n    }\n    /**\n     * Flatten a list of node type T to flattened version of node F.\n     * Please note that type T may be nested, and the length of `structuredData` may be different\n     * from that of returned list `F[]`.\n     * @param {?} structuredData\n     * @return {?}\n     */\n\n  }, {\n    key: \"flattenNodes\",\n    value: function flattenNodes(structuredData) {\n      var _this6 = this;\n\n      /** @type {?} */\n      var resultNodes = [];\n      structuredData.forEach(function (node) {\n        return _this6._flattenNode(node, 0, resultNodes, []);\n      });\n      return resultNodes;\n    }\n    /**\n     * Expand flattened node with current expansion status.\n     * The returned list may have different length.\n     * @param {?} nodes\n     * @param {?} treeControl\n     * @return {?}\n     */\n\n  }, {\n    key: \"expandFlattenedNodes\",\n    value: function expandFlattenedNodes(nodes, treeControl) {\n      var _this7 = this;\n\n      /** @type {?} */\n      var results = [];\n      /** @type {?} */\n\n      var currentExpand = [];\n      currentExpand[0] = true;\n      nodes.forEach(function (node) {\n        /** @type {?} */\n        var expand = true;\n\n        for (var i = 0; i <= _this7.getLevel(node); i++) {\n          expand = expand && currentExpand[i];\n        }\n\n        if (expand) {\n          results.push(node);\n        }\n\n        if (_this7.isExpandable(node)) {\n          currentExpand[_this7.getLevel(node) + 1] = treeControl.isExpanded(node);\n        }\n      });\n      return results;\n    }\n  }]);\n\n  return MatTreeFlattener;\n}();\n/**\n * Data source for flat tree.\n * The data source need to handle expansion/collapsion of the tree node and change the data feed\n * to `MatTree`.\n * The nested tree nodes of type `T` are flattened through `MatTreeFlattener`, and converted\n * to type `F` for `MatTree` to consume.\n * @template T, F\n */\n\n\nvar MatTreeFlatDataSource = /*#__PURE__*/function (_DataSource) {\n  _inherits(MatTreeFlatDataSource, _DataSource);\n\n  var _super7 = _createSuper(MatTreeFlatDataSource);\n\n  /**\n   * @param {?} treeControl\n   * @param {?} treeFlattener\n   * @param {?=} initialData\n   */\n  function MatTreeFlatDataSource(treeControl, treeFlattener) {\n    var _this8;\n\n    var initialData = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n\n    _classCallCheck(this, MatTreeFlatDataSource);\n\n    _this8 = _super7.call(this);\n    _this8.treeControl = treeControl;\n    _this8.treeFlattener = treeFlattener;\n    _this8._flattenedData = new BehaviorSubject([]);\n    _this8._expandedData = new BehaviorSubject([]);\n    _this8._data = new BehaviorSubject(initialData);\n    return _this8;\n  }\n  /**\n   * @return {?}\n   */\n\n\n  _createClass(MatTreeFlatDataSource, [{\n    key: \"data\",\n    get: function get() {\n      return this._data.value;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ,\n    set: function set(value) {\n      this._data.next(value);\n\n      this._flattenedData.next(this.treeFlattener.flattenNodes(this.data));\n\n      this.treeControl.dataNodes = this._flattenedData.value;\n    }\n    /**\n     * @param {?} collectionViewer\n     * @return {?}\n     */\n\n  }, {\n    key: \"connect\",\n    value: function connect(collectionViewer) {\n      var _this9 = this;\n\n      /** @type {?} */\n      var changes = [collectionViewer.viewChange, this.treeControl.expansionModel.onChange, this._flattenedData];\n      return merge.apply(void 0, changes).pipe(map(function () {\n        _this9._expandedData.next(_this9.treeFlattener.expandFlattenedNodes(_this9._flattenedData.value, _this9.treeControl));\n\n        return _this9._expandedData.value;\n      }));\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"disconnect\",\n    value: function disconnect() {// no op\n    }\n  }]);\n\n  return MatTreeFlatDataSource;\n}(DataSource);\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * Data source for nested tree.\n *\n * The data source for nested tree doesn't have to consider node flattener, or the way to expand\n * or collapse. The expansion/collapsion will be handled by TreeControl and each non-leaf node.\n * @template T\n */\n\n\nvar MatTreeNestedDataSource = /*#__PURE__*/function (_DataSource2) {\n  _inherits(MatTreeNestedDataSource, _DataSource2);\n\n  var _super8 = _createSuper(MatTreeNestedDataSource);\n\n  function MatTreeNestedDataSource() {\n    var _this10;\n\n    _classCallCheck(this, MatTreeNestedDataSource);\n\n    _this10 = _super8.apply(this, arguments);\n    _this10._data = new BehaviorSubject([]);\n    return _this10;\n  }\n  /**\n   * Data for the nested tree\n   * @return {?}\n   */\n\n\n  _createClass(MatTreeNestedDataSource, [{\n    key: \"data\",\n    get: function get() {\n      return this._data.value;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ,\n    set: function set(value) {\n      this._data.next(value);\n    }\n    /**\n     * @param {?} collectionViewer\n     * @return {?}\n     */\n\n  }, {\n    key: \"connect\",\n    value: function connect(collectionViewer) {\n      var _this11 = this;\n\n      return merge.apply(void 0, [collectionViewer.viewChange, this._data]).pipe(map(function () {\n        return _this11.data;\n      }));\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"disconnect\",\n    value: function disconnect() {// no op\n    }\n  }]);\n\n  return MatTreeNestedDataSource;\n}(DataSource);\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n\nexport { _CdkTreeNodeDef, _MatTreeNodeMixinBase, _MatNestedTreeNodeMixinBase, MatTreeNode, MatTreeNodeDef, MatNestedTreeNode, _CdkTreeNodePadding, MatTreeNodePadding, _CdkTree, MatTree, MatTreeModule, _CdkTreeNodeToggle, MatTreeNodeToggle, MatTreeNodeOutlet, MatTreeFlattener, MatTreeFlatDataSource, MatTreeNestedDataSource }; //# sourceMappingURL=tree.js.map","map":null,"metadata":{},"sourceType":"module"}