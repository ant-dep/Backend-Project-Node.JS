{"ast":null,"code":"import _createClass from \"/Users/adepertat/Dropbox/ECOLES/Openclassroom/P6_de_Pertat_Antoine/AntoinedePertat_6_240521/frontend/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/Users/adepertat/Dropbox/ECOLES/Openclassroom/P6_de_Pertat_Antoine/AntoinedePertat_6_240521/frontend/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/adepertat/Dropbox/ECOLES/Openclassroom/P6_de_Pertat_Antoine/AntoinedePertat_6_240521/frontend/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _classCallCheck from \"/Users/adepertat/Dropbox/ECOLES/Openclassroom/P6_de_Pertat_Antoine/AntoinedePertat_6_240521/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { FocusMonitor } from '@angular/cdk/a11y';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { UniqueSelectionDispatcher } from '@angular/cdk/collections';\nimport { ChangeDetectionStrategy, ChangeDetectorRef, Component, ContentChildren, Directive, ElementRef, EventEmitter, forwardRef, Inject, Input, Optional, Output, ViewChild, ViewEncapsulation, NgModule } from '@angular/core';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { mixinColor, mixinDisabled, mixinDisableRipple, mixinTabIndex, MatCommonModule, MatRippleModule } from '@angular/material/core';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\nimport { CommonModule } from '@angular/common';\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/** @type {?} */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/a11y';\nimport * as ɵngcc2 from '@angular/cdk/collections';\nimport * as ɵngcc3 from '@angular/material/core';\nvar _c0 = [\"input\"];\n\nvar _c1 = function _c1() {\n  return {\n    enterDuration: 150\n  };\n};\n\nvar _c2 = [\"*\"];\nvar nextUniqueId = 0;\n/** *\n * Provider Expression that allows mat-radio-group to register as a ControlValueAccessor. This\n * allows it to support [(ngModel)] and ngControl.\n * \\@docs-private\n  @type {?} */\n\nvar MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: /*@__PURE__*/forwardRef(function () {\n    return MatRadioGroup;\n  }),\n  multi: true\n};\n/**\n * Change event object emitted by MatRadio and MatRadioGroup.\n */\n\nvar MatRadioChange =\n/**\n * @param {?} source\n * @param {?} value\n */\nfunction MatRadioChange(source, value) {\n  _classCallCheck(this, MatRadioChange);\n\n  this.source = source;\n  this.value = value;\n};\n/**\n * \\@docs-private\n */\n\n\nvar MatRadioGroupBase = function MatRadioGroupBase() {\n  _classCallCheck(this, MatRadioGroupBase);\n};\n/** @type {?} */\n\n\nvar _MatRadioGroupMixinBase = /*@__PURE__*/mixinDisabled(MatRadioGroupBase);\n\nvar MatRadioGroup = /*@__PURE__*/function () {\n  var MatRadioGroup = /*#__PURE__*/function (_MatRadioGroupMixinBa) {\n    _inherits(MatRadioGroup, _MatRadioGroupMixinBa);\n\n    var _super = _createSuper(MatRadioGroup);\n\n    /**\n     * @param {?} _changeDetector\n     */\n    function MatRadioGroup(_changeDetector) {\n      var _this;\n\n      _classCallCheck(this, MatRadioGroup);\n\n      _this = _super.call(this);\n      _this._changeDetector = _changeDetector;\n      /**\n       * Selected value for the radio group.\n       */\n\n      _this._value = null;\n      /**\n       * The HTML name attribute applied to radio buttons in this group.\n       */\n\n      _this._name = \"mat-radio-group-\".concat(nextUniqueId++);\n      /**\n       * The currently selected radio button. Should match value.\n       */\n\n      _this._selected = null;\n      /**\n       * Whether the `value` has been set to its initial value.\n       */\n\n      _this._isInitialized = false;\n      /**\n       * Whether the labels should appear after or before the radio-buttons. Defaults to 'after'\n       */\n\n      _this._labelPosition = 'after';\n      /**\n       * Whether the radio group is disabled.\n       */\n\n      _this._disabled = false;\n      /**\n       * Whether the radio group is required.\n       */\n\n      _this._required = false;\n      /**\n       * The method to be called in order to update ngModel\n       */\n\n      _this._controlValueAccessorChangeFn = function () {};\n      /**\n       * onTouch function registered via registerOnTouch (ControlValueAccessor).\n       * \\@docs-private\n       */\n\n\n      _this.onTouched = function () {};\n      /**\n       * Event emitted when the group value changes.\n       * Change events are only emitted when the value changes due to user interaction with\n       * a radio button (the same behavior as `<input type-\"radio\">`).\n       */\n\n\n      _this.change = new EventEmitter();\n      return _this;\n    }\n    /**\n     * Name of the radio button group. All radio buttons inside this group will use this name.\n     * @return {?}\n     */\n\n\n    _createClass(MatRadioGroup, [{\n      key: \"name\",\n      get: function get() {\n        return this._name;\n      }\n      /**\n       * @param {?} value\n       * @return {?}\n       */\n      ,\n      set: function set(value) {\n        this._name = value;\n\n        this._updateRadioButtonNames();\n      }\n      /**\n       * Whether the labels should appear after or before the radio-buttons. Defaults to 'after'\n       * @return {?}\n       */\n\n    }, {\n      key: \"labelPosition\",\n      get: function get() {\n        return this._labelPosition;\n      }\n      /**\n       * @param {?} v\n       * @return {?}\n       */\n      ,\n      set: function set(v) {\n        this._labelPosition = v === 'before' ? 'before' : 'after';\n\n        this._markRadiosForCheck();\n      }\n      /**\n       * Value for the radio-group. Should equal the value of the selected radio button if there is\n       * a corresponding radio button with a matching value. If there is not such a corresponding\n       * radio button, this value persists to be applied in case a new radio button is added with a\n       * matching value.\n       * @return {?}\n       */\n\n    }, {\n      key: \"value\",\n      get: function get() {\n        return this._value;\n      }\n      /**\n       * @param {?} newValue\n       * @return {?}\n       */\n      ,\n      set: function set(newValue) {\n        if (this._value !== newValue) {\n          // Set this before proceeding to ensure no circular loop occurs with selection.\n          this._value = newValue;\n\n          this._updateSelectedRadioFromValue();\n\n          this._checkSelectedRadioButton();\n        }\n      }\n      /**\n       * @return {?}\n       */\n\n    }, {\n      key: \"_checkSelectedRadioButton\",\n      value: function _checkSelectedRadioButton() {\n        if (this._selected && !this._selected.checked) {\n          this._selected.checked = true;\n        }\n      }\n      /**\n       * The currently selected radio button. If set to a new radio button, the radio group value\n       * will be updated to match the new selected button.\n       * @return {?}\n       */\n\n    }, {\n      key: \"selected\",\n      get: function get() {\n        return this._selected;\n      }\n      /**\n       * @param {?} selected\n       * @return {?}\n       */\n      ,\n      set: function set(selected) {\n        this._selected = selected;\n        this.value = selected ? selected.value : null;\n\n        this._checkSelectedRadioButton();\n      }\n      /**\n       * Whether the radio group is disabled\n       * @return {?}\n       */\n\n    }, {\n      key: \"disabled\",\n      get: function get() {\n        return this._disabled;\n      }\n      /**\n       * @param {?} value\n       * @return {?}\n       */\n      ,\n      set: function set(value) {\n        this._disabled = coerceBooleanProperty(value);\n\n        this._markRadiosForCheck();\n      }\n      /**\n       * Whether the radio group is required\n       * @return {?}\n       */\n\n    }, {\n      key: \"required\",\n      get: function get() {\n        return this._required;\n      }\n      /**\n       * @param {?} value\n       * @return {?}\n       */\n      ,\n      set: function set(value) {\n        this._required = coerceBooleanProperty(value);\n\n        this._markRadiosForCheck();\n      }\n      /**\n       * Initialize properties once content children are available.\n       * This allows us to propagate relevant attributes to associated buttons.\n       * @return {?}\n       */\n\n    }, {\n      key: \"ngAfterContentInit\",\n      value: function ngAfterContentInit() {\n        // Mark this component as initialized in AfterContentInit because the initial value can\n        // possibly be set by NgModel on MatRadioGroup, and it is possible that the OnInit of the\n        // NgModel occurs *after* the OnInit of the MatRadioGroup.\n        this._isInitialized = true;\n      }\n      /**\n       * Mark this group as being \"touched\" (for ngModel). Meant to be called by the contained\n       * radio buttons upon their blur.\n       * @return {?}\n       */\n\n    }, {\n      key: \"_touch\",\n      value: function _touch() {\n        if (this.onTouched) {\n          this.onTouched();\n        }\n      }\n      /**\n       * @return {?}\n       */\n\n    }, {\n      key: \"_updateRadioButtonNames\",\n      value: function _updateRadioButtonNames() {\n        var _this2 = this;\n\n        if (this._radios) {\n          this._radios.forEach(function (radio) {\n            radio.name = _this2.name;\n          });\n        }\n      }\n      /**\n       * Updates the `selected` radio button from the internal _value state.\n       * @return {?}\n       */\n\n    }, {\n      key: \"_updateSelectedRadioFromValue\",\n      value: function _updateSelectedRadioFromValue() {\n        var _this3 = this;\n\n        /** @type {?} */\n        var isAlreadySelected = this._selected !== null && this._selected.value === this._value;\n\n        if (this._radios && !isAlreadySelected) {\n          this._selected = null;\n\n          this._radios.forEach(function (radio) {\n            radio.checked = _this3.value === radio.value;\n\n            if (radio.checked) {\n              _this3._selected = radio;\n            }\n          });\n        }\n      }\n      /**\n       * Dispatch change event with current selection and group value.\n       * @return {?}\n       */\n\n    }, {\n      key: \"_emitChangeEvent\",\n      value: function _emitChangeEvent() {\n        if (this._isInitialized) {\n          this.change.emit(new MatRadioChange(\n          /** @type {?} */\n          this._selected, this._value));\n        }\n      }\n      /**\n       * @return {?}\n       */\n\n    }, {\n      key: \"_markRadiosForCheck\",\n      value: function _markRadiosForCheck() {\n        if (this._radios) {\n          this._radios.forEach(function (radio) {\n            return radio._markForCheck();\n          });\n        }\n      }\n      /**\n       * Sets the model value. Implemented as part of ControlValueAccessor.\n       * @param {?} value\n       * @return {?}\n       */\n\n    }, {\n      key: \"writeValue\",\n      value: function writeValue(value) {\n        this.value = value;\n\n        this._changeDetector.markForCheck();\n      }\n      /**\n       * Registers a callback to be triggered when the model value changes.\n       * Implemented as part of ControlValueAccessor.\n       * @param {?} fn Callback to be registered.\n       * @return {?}\n       */\n\n    }, {\n      key: \"registerOnChange\",\n      value: function registerOnChange(fn) {\n        this._controlValueAccessorChangeFn = fn;\n      }\n      /**\n       * Registers a callback to be triggered when the control is touched.\n       * Implemented as part of ControlValueAccessor.\n       * @param {?} fn Callback to be registered.\n       * @return {?}\n       */\n\n    }, {\n      key: \"registerOnTouched\",\n      value: function registerOnTouched(fn) {\n        this.onTouched = fn;\n      }\n      /**\n       * Sets the disabled state of the control. Implemented as a part of ControlValueAccessor.\n       * @param {?} isDisabled Whether the control should be disabled.\n       * @return {?}\n       */\n\n    }, {\n      key: \"setDisabledState\",\n      value: function setDisabledState(isDisabled) {\n        this.disabled = isDisabled;\n\n        this._changeDetector.markForCheck();\n      }\n    }]);\n\n    return MatRadioGroup;\n  }(_MatRadioGroupMixinBase);\n\n  MatRadioGroup.ɵfac = function MatRadioGroup_Factory(t) {\n    return new (t || MatRadioGroup)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef));\n  };\n\n  MatRadioGroup.ɵdir =\n  /*@__PURE__*/\n\n  /*@__PURE__*/\n  ɵngcc0.ɵɵdefineDirective({\n    type: MatRadioGroup,\n    selectors: [[\"mat-radio-group\"]],\n    contentQueries: function MatRadioGroup_ContentQueries(rf, ctx, dirIndex) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MatRadioButton, 5);\n      }\n\n      if (rf & 2) {\n        var _t;\n\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._radios = _t);\n      }\n    },\n    hostAttrs: [\"role\", \"radiogroup\", 1, \"mat-radio-group\"],\n    inputs: {\n      disabled: \"disabled\",\n      name: \"name\",\n      labelPosition: \"labelPosition\",\n      value: \"value\",\n      selected: \"selected\",\n      required: \"required\"\n    },\n    outputs: {\n      change: \"change\"\n    },\n    exportAs: [\"matRadioGroup\"],\n    features: [/*@__PURE__*/ɵngcc0.ɵɵProvidersFeature([MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR]), ɵngcc0.ɵɵInheritDefinitionFeature]\n  });\n  return MatRadioGroup;\n}();\n/**\n * \\@docs-private\n */\n\n\nvar MatRadioButtonBase =\n/**\n * @param {?} _elementRef\n */\nfunction MatRadioButtonBase(_elementRef) {\n  _classCallCheck(this, MatRadioButtonBase);\n\n  this._elementRef = _elementRef;\n};\n/** @type {?} */\n\n\nvar _MatRadioButtonMixinBase = /*@__PURE__*/mixinColor( /*@__PURE__*/mixinDisableRipple( /*@__PURE__*/mixinTabIndex(MatRadioButtonBase)), 'accent');\n\nvar MatRadioButton = /*@__PURE__*/function () {\n  var MatRadioButton = /*#__PURE__*/function (_MatRadioButtonMixinB) {\n    _inherits(MatRadioButton, _MatRadioButtonMixinB);\n\n    var _super2 = _createSuper(MatRadioButton);\n\n    /**\n     * @param {?} radioGroup\n     * @param {?} elementRef\n     * @param {?} _changeDetector\n     * @param {?} _focusMonitor\n     * @param {?} _radioDispatcher\n     * @param {?=} _animationMode\n     */\n    function MatRadioButton(radioGroup, elementRef, _changeDetector, _focusMonitor, _radioDispatcher, _animationMode) {\n      var _this4;\n\n      _classCallCheck(this, MatRadioButton);\n\n      _this4 = _super2.call(this, elementRef);\n      _this4._changeDetector = _changeDetector;\n      _this4._focusMonitor = _focusMonitor;\n      _this4._radioDispatcher = _radioDispatcher;\n      _this4._animationMode = _animationMode;\n      _this4._uniqueId = \"mat-radio-\".concat(++nextUniqueId);\n      /**\n       * The unique ID for the radio button.\n       */\n\n      _this4.id = _this4._uniqueId;\n      /**\n       * Event emitted when the checked state of this radio button changes.\n       * Change events are only emitted when the value changes due to user interaction with\n       * the radio button (the same behavior as `<input type-\"radio\">`).\n       */\n\n      _this4.change = new EventEmitter();\n      /**\n       * Whether this radio is checked.\n       */\n\n      _this4._checked = false;\n      /**\n       * Value assigned to this radio.\n       */\n\n      _this4._value = null;\n      /**\n       * Unregister function for _radioDispatcher\n       */\n\n      _this4._removeUniqueSelectionListener = function () {}; // Assertions. Ideally these should be stripped out by the compiler.\n      // TODO(jelbourn): Assert that there's no name binding AND a parent radio group.\n\n\n      _this4.radioGroup = radioGroup;\n      _this4._removeUniqueSelectionListener = _radioDispatcher.listen(function (id, name) {\n        if (id !== _this4.id && name === _this4.name) {\n          _this4.checked = false;\n        }\n      });\n      return _this4;\n    }\n    /**\n     * Whether this radio button is checked.\n     * @return {?}\n     */\n\n\n    _createClass(MatRadioButton, [{\n      key: \"checked\",\n      get: function get() {\n        return this._checked;\n      }\n      /**\n       * @param {?} value\n       * @return {?}\n       */\n      ,\n      set: function set(value) {\n        /** @type {?} */\n        var newCheckedState = coerceBooleanProperty(value);\n\n        if (this._checked !== newCheckedState) {\n          this._checked = newCheckedState;\n\n          if (newCheckedState && this.radioGroup && this.radioGroup.value !== this.value) {\n            this.radioGroup.selected = this;\n          } else if (!newCheckedState && this.radioGroup && this.radioGroup.value === this.value) {\n            // When unchecking the selected radio button, update the selected radio\n            // property on the group.\n            this.radioGroup.selected = null;\n          }\n\n          if (newCheckedState) {\n            // Notify all radio buttons with the same name to un-check.\n            this._radioDispatcher.notify(this.id, this.name);\n          }\n\n          this._changeDetector.markForCheck();\n        }\n      }\n      /**\n       * The value of this radio button.\n       * @return {?}\n       */\n\n    }, {\n      key: \"value\",\n      get: function get() {\n        return this._value;\n      }\n      /**\n       * @param {?} value\n       * @return {?}\n       */\n      ,\n      set: function set(value) {\n        if (this._value !== value) {\n          this._value = value;\n\n          if (this.radioGroup !== null) {\n            if (!this.checked) {\n              // Update checked when the value changed to match the radio group's value\n              this.checked = this.radioGroup.value === value;\n            }\n\n            if (this.checked) {\n              this.radioGroup.selected = this;\n            }\n          }\n        }\n      }\n      /**\n       * Whether the label should appear after or before the radio button. Defaults to 'after'\n       * @return {?}\n       */\n\n    }, {\n      key: \"labelPosition\",\n      get: function get() {\n        return this._labelPosition || this.radioGroup && this.radioGroup.labelPosition || 'after';\n      }\n      /**\n       * @param {?} value\n       * @return {?}\n       */\n      ,\n      set: function set(value) {\n        this._labelPosition = value;\n      }\n      /**\n       * Whether the radio button is disabled.\n       * @return {?}\n       */\n\n    }, {\n      key: \"disabled\",\n      get: function get() {\n        return this._disabled || this.radioGroup !== null && this.radioGroup.disabled;\n      }\n      /**\n       * @param {?} value\n       * @return {?}\n       */\n      ,\n      set: function set(value) {\n        /** @type {?} */\n        var newDisabledState = coerceBooleanProperty(value);\n\n        if (this._disabled !== newDisabledState) {\n          this._disabled = newDisabledState;\n\n          this._changeDetector.markForCheck();\n        }\n      }\n      /**\n       * Whether the radio button is required.\n       * @return {?}\n       */\n\n    }, {\n      key: \"required\",\n      get: function get() {\n        return this._required || this.radioGroup && this.radioGroup.required;\n      }\n      /**\n       * @param {?} value\n       * @return {?}\n       */\n      ,\n      set: function set(value) {\n        this._required = coerceBooleanProperty(value);\n      }\n      /**\n       * ID of the native input element inside `<mat-radio-button>`\n       * @return {?}\n       */\n\n    }, {\n      key: \"inputId\",\n      get: function get() {\n        return \"\".concat(this.id || this._uniqueId, \"-input\");\n      }\n      /**\n       * Focuses the radio button.\n       * @return {?}\n       */\n\n    }, {\n      key: \"focus\",\n      value: function focus() {\n        this._focusMonitor.focusVia(this._inputElement, 'keyboard');\n      }\n      /**\n       * Marks the radio button as needing checking for change detection.\n       * This method is exposed because the parent radio group will directly\n       * update bound properties of the radio button.\n       * @return {?}\n       */\n\n    }, {\n      key: \"_markForCheck\",\n      value: function _markForCheck() {\n        // When group value changes, the button will not be notified. Use `markForCheck` to explicit\n        // update radio button's status\n        this._changeDetector.markForCheck();\n      }\n      /**\n       * @return {?}\n       */\n\n    }, {\n      key: \"ngOnInit\",\n      value: function ngOnInit() {\n        if (this.radioGroup) {\n          // If the radio is inside a radio group, determine if it should be checked\n          this.checked = this.radioGroup.value === this._value; // Copy name from parent radio group\n\n          this.name = this.radioGroup.name;\n        }\n      }\n      /**\n       * @return {?}\n       */\n\n    }, {\n      key: \"ngAfterViewInit\",\n      value: function ngAfterViewInit() {\n        var _this5 = this;\n\n        this._focusMonitor.monitor(this._elementRef, true).subscribe(function (focusOrigin) {\n          if (!focusOrigin && _this5.radioGroup) {\n            _this5.radioGroup._touch();\n          }\n        });\n      }\n      /**\n       * @return {?}\n       */\n\n    }, {\n      key: \"ngOnDestroy\",\n      value: function ngOnDestroy() {\n        this._focusMonitor.stopMonitoring(this._elementRef);\n\n        this._removeUniqueSelectionListener();\n      }\n      /**\n       * Dispatch change event with current value.\n       * @return {?}\n       */\n\n    }, {\n      key: \"_emitChangeEvent\",\n      value: function _emitChangeEvent() {\n        this.change.emit(new MatRadioChange(this, this._value));\n      }\n      /**\n       * @return {?}\n       */\n\n    }, {\n      key: \"_isRippleDisabled\",\n      value: function _isRippleDisabled() {\n        return this.disableRipple || this.disabled;\n      }\n      /**\n       * @param {?} event\n       * @return {?}\n       */\n\n    }, {\n      key: \"_onInputClick\",\n      value: function _onInputClick(event) {\n        // We have to stop propagation for click events on the visual hidden input element.\n        // By default, when a user clicks on a label element, a generated click event will be\n        // dispatched on the associated input element. Since we are using a label element as our\n        // root container, the click event on the `radio-button` will be executed twice.\n        // The real click event will bubble up, and the generated click event also tries to bubble up.\n        // This will lead to multiple click events.\n        // Preventing bubbling for the second event will solve that issue.\n        event.stopPropagation();\n      }\n      /**\n       * Triggered when the radio button received a click or the input recognized any change.\n       * Clicking on a label element, will trigger a change event on the associated input.\n       * @param {?} event\n       * @return {?}\n       */\n\n    }, {\n      key: \"_onInputChange\",\n      value: function _onInputChange(event) {\n        // We always have to stop propagation on the change event.\n        // Otherwise the change event, from the input element, will bubble up and\n        // emit its event object to the `change` output.\n        event.stopPropagation();\n        /** @type {?} */\n\n        var groupValueChanged = this.radioGroup && this.value !== this.radioGroup.value;\n        this.checked = true;\n\n        this._emitChangeEvent();\n\n        if (this.radioGroup) {\n          this.radioGroup._controlValueAccessorChangeFn(this.value);\n\n          this.radioGroup._touch();\n\n          if (groupValueChanged) {\n            this.radioGroup._emitChangeEvent();\n          }\n        }\n      }\n    }]);\n\n    return MatRadioButton;\n  }(_MatRadioButtonMixinBase);\n\n  MatRadioButton.ɵfac = function MatRadioButton_Factory(t) {\n    return new (t || MatRadioButton)(ɵngcc0.ɵɵdirectiveInject(MatRadioGroup, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.FocusMonitor), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.UniqueSelectionDispatcher), ɵngcc0.ɵɵdirectiveInject(ANIMATION_MODULE_TYPE, 8));\n  };\n\n  MatRadioButton.ɵcmp =\n  /*@__PURE__*/\n\n  /*@__PURE__*/\n  ɵngcc0.ɵɵdefineComponent({\n    type: MatRadioButton,\n    selectors: [[\"mat-radio-button\"]],\n    viewQuery: function MatRadioButton_Query(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(_c0, 5);\n      }\n\n      if (rf & 2) {\n        var _t;\n\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._inputElement = _t.first);\n      }\n    },\n    hostAttrs: [1, \"mat-radio-button\"],\n    hostVars: 8,\n    hostBindings: function MatRadioButton_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"focus\", function MatRadioButton_focus_HostBindingHandler() {\n          return ctx._inputElement.nativeElement.focus();\n        });\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"tabindex\", null)(\"id\", ctx.id);\n        ɵngcc0.ɵɵclassProp(\"mat-radio-checked\", ctx.checked)(\"mat-radio-disabled\", ctx.disabled)(\"_mat-animation-noopable\", ctx._animationMode === \"NoopAnimations\");\n      }\n    },\n    inputs: {\n      color: \"color\",\n      disableRipple: \"disableRipple\",\n      tabIndex: \"tabIndex\",\n      id: \"id\",\n      checked: \"checked\",\n      value: \"value\",\n      labelPosition: \"labelPosition\",\n      disabled: \"disabled\",\n      required: \"required\",\n      name: \"name\",\n      ariaLabel: [\"aria-label\", \"ariaLabel\"],\n      ariaLabelledby: [\"aria-labelledby\", \"ariaLabelledby\"],\n      ariaDescribedby: [\"aria-describedby\", \"ariaDescribedby\"]\n    },\n    outputs: {\n      change: \"change\"\n    },\n    exportAs: [\"matRadioButton\"],\n    features: [ɵngcc0.ɵɵInheritDefinitionFeature],\n    ngContentSelectors: _c2,\n    decls: 13,\n    vars: 18,\n    consts: [[1, \"mat-radio-label\"], [\"label\", \"\"], [1, \"mat-radio-container\"], [1, \"mat-radio-outer-circle\"], [1, \"mat-radio-inner-circle\"], [\"mat-ripple\", \"\", 1, \"mat-radio-ripple\", 3, \"matRippleTrigger\", \"matRippleDisabled\", \"matRippleCentered\", \"matRippleRadius\", \"matRippleAnimation\"], [1, \"mat-ripple-element\", \"mat-radio-persistent-ripple\"], [\"type\", \"radio\", 1, \"mat-radio-input\", \"cdk-visually-hidden\", 3, \"id\", \"checked\", \"disabled\", \"tabIndex\", \"required\", \"change\", \"click\"], [\"input\", \"\"], [1, \"mat-radio-label-content\"], [2, \"display\", \"none\"]],\n    template: function MatRadioButton_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵelementStart(0, \"label\", 0, 1);\n        ɵngcc0.ɵɵelementStart(2, \"div\", 2);\n        ɵngcc0.ɵɵelement(3, \"div\", 3);\n        ɵngcc0.ɵɵelement(4, \"div\", 4);\n        ɵngcc0.ɵɵelementStart(5, \"div\", 5);\n        ɵngcc0.ɵɵelement(6, \"div\", 6);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementStart(7, \"input\", 7, 8);\n        ɵngcc0.ɵɵlistener(\"change\", function MatRadioButton_Template_input_change_7_listener($event) {\n          return ctx._onInputChange($event);\n        })(\"click\", function MatRadioButton_Template_input_click_7_listener($event) {\n          return ctx._onInputClick($event);\n        });\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementStart(9, \"div\", 9);\n        ɵngcc0.ɵɵelementStart(10, \"span\", 10);\n        ɵngcc0.ɵɵtext(11, \"\\xA0\");\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵprojection(12);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        var _r0 = ɵngcc0.ɵɵreference(1);\n\n        ɵngcc0.ɵɵattribute(\"for\", ctx.inputId);\n        ɵngcc0.ɵɵadvance(5);\n        ɵngcc0.ɵɵproperty(\"matRippleTrigger\", _r0)(\"matRippleDisabled\", ctx._isRippleDisabled())(\"matRippleCentered\", true)(\"matRippleRadius\", 20)(\"matRippleAnimation\", ɵngcc0.ɵɵpureFunction0(17, _c1));\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵproperty(\"id\", ctx.inputId)(\"checked\", ctx.checked)(\"disabled\", ctx.disabled)(\"tabIndex\", ctx.tabIndex)(\"required\", ctx.required);\n        ɵngcc0.ɵɵattribute(\"name\", ctx.name)(\"aria-label\", ctx.ariaLabel)(\"aria-labelledby\", ctx.ariaLabelledby)(\"aria-describedby\", ctx.ariaDescribedby);\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵclassProp(\"mat-radio-label-before\", ctx.labelPosition == \"before\");\n      }\n    },\n    directives: [ɵngcc3.MatRipple],\n    styles: [\".mat-radio-button{display:inline-block;-webkit-tap-highlight-color:transparent}.mat-radio-label{cursor:pointer;display:inline-flex;align-items:center;white-space:nowrap;vertical-align:middle}.mat-radio-container{box-sizing:border-box;display:inline-block;position:relative;width:20px;height:20px;flex-shrink:0}.mat-radio-outer-circle{box-sizing:border-box;height:20px;left:0;position:absolute;top:0;transition:border-color ease 280ms;width:20px;border-width:2px;border-style:solid;border-radius:50%}._mat-animation-noopable .mat-radio-outer-circle{transition:none}.mat-radio-inner-circle{border-radius:50%;box-sizing:border-box;height:20px;left:0;position:absolute;top:0;transition:transform ease 280ms,background-color ease 280ms;width:20px;transform:scale(.001)}._mat-animation-noopable .mat-radio-inner-circle{transition:none}.mat-radio-checked .mat-radio-inner-circle{transform:scale(.5)}@media screen and (-ms-high-contrast:active){.mat-radio-checked .mat-radio-inner-circle{border:solid 10px}}.mat-radio-label-content{display:inline-block;order:0;line-height:inherit;padding-left:8px;padding-right:0}[dir=rtl] .mat-radio-label-content{padding-right:8px;padding-left:0}.mat-radio-label-content.mat-radio-label-before{order:-1;padding-left:0;padding-right:8px}[dir=rtl] .mat-radio-label-content.mat-radio-label-before{padding-right:0;padding-left:8px}.mat-radio-disabled,.mat-radio-disabled .mat-radio-label{cursor:default}.mat-radio-button .mat-radio-ripple{position:absolute;left:calc(50% - 20px);top:calc(50% - 20px);height:40px;width:40px;z-index:1;pointer-events:none}.mat-radio-button .mat-radio-ripple .mat-ripple-element:not(.mat-radio-persistent-ripple){opacity:.16}.mat-radio-persistent-ripple{width:100%;height:100%;transform:none}.mat-radio-container:hover .mat-radio-persistent-ripple{opacity:.04}.mat-radio-button.cdk-focused .mat-radio-persistent-ripple{opacity:.12}.mat-radio-disabled .mat-radio-container:hover .mat-radio-persistent-ripple,.mat-radio-persistent-ripple{opacity:0}.mat-radio-input{bottom:0;left:50%}\"],\n    encapsulation: 2,\n    changeDetection: 0\n  });\n  return MatRadioButton;\n}();\n\nvar MatRadioModule = /*@__PURE__*/function () {\n  var MatRadioModule = function MatRadioModule() {\n    _classCallCheck(this, MatRadioModule);\n  };\n\n  MatRadioModule.ɵfac = function MatRadioModule_Factory(t) {\n    return new (t || MatRadioModule)();\n  };\n\n  MatRadioModule.ɵmod =\n  /*@__PURE__*/\n\n  /*@__PURE__*/\n  ɵngcc0.ɵɵdefineNgModule({\n    type: MatRadioModule\n  });\n  MatRadioModule.ɵinj =\n  /*@__PURE__*/\n\n  /*@__PURE__*/\n  ɵngcc0.ɵɵdefineInjector({\n    imports: [[CommonModule, MatRippleModule, MatCommonModule], MatCommonModule]\n  });\n  return MatRadioModule;\n}();\n/*@__PURE__*/\n\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatRadioModule, {\n    declarations: function declarations() {\n      return [MatRadioGroup, MatRadioButton];\n    },\n    imports: function imports() {\n      return [CommonModule, MatRippleModule, MatCommonModule];\n    },\n    exports: function exports() {\n      return [MatRadioGroup, MatRadioButton, MatCommonModule];\n    }\n  });\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n\nexport { MatRadioModule, MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR, MatRadioChange, MatRadioGroupBase, _MatRadioGroupMixinBase, MatRadioGroup, MatRadioButtonBase, _MatRadioButtonMixinBase, MatRadioButton }; //# sourceMappingURL=radio.js.map","map":null,"metadata":{},"sourceType":"module"}