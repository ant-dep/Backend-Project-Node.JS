{"ast":null,"code":"import _inherits from \"/Users/adepertat/Dropbox/ECOLES/Openclassroom/P6_de_Pertat_Antoine/dwj-projet6/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/adepertat/Dropbox/ECOLES/Openclassroom/P6_de_Pertat_Antoine/dwj-projet6/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _toConsumableArray from \"/Users/adepertat/Dropbox/ECOLES/Openclassroom/P6_de_Pertat_Antoine/dwj-projet6/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _createClass from \"/Users/adepertat/Dropbox/ECOLES/Openclassroom/P6_de_Pertat_Antoine/dwj-projet6/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _classCallCheck from \"/Users/adepertat/Dropbox/ECOLES/Openclassroom/P6_de_Pertat_Antoine/dwj-projet6/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { FocusMonitor } from '@angular/cdk/a11y';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { SelectionModel } from '@angular/cdk/collections';\nimport { Attribute, ChangeDetectionStrategy, ChangeDetectorRef, Component, ContentChildren, Directive, ElementRef, EventEmitter, forwardRef, Input, Optional, Output, ViewChild, ViewEncapsulation, InjectionToken, Inject, NgModule } from '@angular/core';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { mixinDisableRipple, MatCommonModule, MatRippleModule } from '@angular/material/core';\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/** *\n * Injection token that can be used to configure the\n * default options for all button toggles within an app.\n  @type {?} */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/a11y';\nimport * as ɵngcc2 from '@angular/material/core';\nvar _c0 = [\"button\"];\nvar _c1 = [\"*\"];\nvar MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS = new InjectionToken('MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS');\n/** *\n * Provider Expression that allows mat-button-toggle-group to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * \\@docs-private\n  @type {?} */\n\nvar MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(function () {\n    return MatButtonToggleGroup;\n  }),\n  multi: true\n};\n/**\n * @deprecated Use `MatButtonToggleGroup` instead.\n * \\@breaking-change 8.0.0\n */\n\nvar MatButtonToggleGroupMultiple = function MatButtonToggleGroupMultiple() {\n  _classCallCheck(this, MatButtonToggleGroupMultiple);\n};\n/** @type {?} */\n\n\nvar _uniqueIdCounter = 0;\n/**\n * Change event object emitted by MatButtonToggle.\n */\n\nvar MatButtonToggleChange =\n/**\n * @param {?} source\n * @param {?} value\n */\nfunction MatButtonToggleChange(source, value) {\n  _classCallCheck(this, MatButtonToggleChange);\n\n  this.source = source;\n  this.value = value;\n};\n/**\n * Exclusive selection button toggle group that behaves like a radio-button group.\n */\n\n\nvar MatButtonToggleGroup = /*#__PURE__*/function () {\n  /**\n   * @param {?} _changeDetector\n   * @param {?=} defaultOptions\n   */\n  function MatButtonToggleGroup(_changeDetector, defaultOptions) {\n    _classCallCheck(this, MatButtonToggleGroup);\n\n    this._changeDetector = _changeDetector;\n    this._vertical = false;\n    this._multiple = false;\n    this._disabled = false;\n    /**\n     * The method to be called in order to update ngModel.\n     * Now `ngModel` binding is not supported in multiple selection mode.\n     */\n\n    this._controlValueAccessorChangeFn = function () {};\n    /**\n     * onTouch function registered via registerOnTouch (ControlValueAccessor).\n     */\n\n\n    this._onTouched = function () {};\n\n    this._name = \"mat-button-toggle-group-\".concat(_uniqueIdCounter++);\n    /**\n     * Event that emits whenever the value of the group changes.\n     * Used to facilitate two-way data binding.\n     * \\@docs-private\n     */\n\n    this.valueChange = new EventEmitter();\n    /**\n     * Event emitted when the group's value changes.\n     */\n\n    this.change = new EventEmitter();\n    this.appearance = defaultOptions && defaultOptions.appearance ? defaultOptions.appearance : 'standard';\n  }\n  /**\n   * `name` attribute for the underlying `input` element.\n   * @return {?}\n   */\n\n\n  _createClass(MatButtonToggleGroup, [{\n    key: \"name\",\n    get: function get() {\n      return this._name;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ,\n    set: function set(value) {\n      var _this = this;\n\n      this._name = value;\n\n      if (this._buttonToggles) {\n        this._buttonToggles.forEach(function (toggle) {\n          return toggle.name = _this._name;\n        });\n      }\n    }\n    /**\n     * Whether the toggle group is vertical.\n     * @return {?}\n     */\n\n  }, {\n    key: \"vertical\",\n    get: function get() {\n      return this._vertical;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ,\n    set: function set(value) {\n      this._vertical = coerceBooleanProperty(value);\n    }\n    /**\n     * Value of the toggle group.\n     * @return {?}\n     */\n\n  }, {\n    key: \"value\",\n    get: function get() {\n      /** @type {?} */\n      var selected = this._selectionModel ? this._selectionModel.selected : [];\n\n      if (this.multiple) {\n        return selected.map(function (toggle) {\n          return toggle.value;\n        });\n      }\n\n      return selected[0] ? selected[0].value : undefined;\n    }\n    /**\n     * @param {?} newValue\n     * @return {?}\n     */\n    ,\n    set: function set(newValue) {\n      this._setSelectionByValue(newValue);\n\n      this.valueChange.emit(this.value);\n    }\n    /**\n     * Selected button toggles in the group.\n     * @return {?}\n     */\n\n  }, {\n    key: \"selected\",\n    get: function get() {\n      /** @type {?} */\n      var selected = this._selectionModel.selected;\n      return this.multiple ? selected : selected[0] || null;\n    }\n    /**\n     * Whether multiple button toggles can be selected.\n     * @return {?}\n     */\n\n  }, {\n    key: \"multiple\",\n    get: function get() {\n      return this._multiple;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ,\n    set: function set(value) {\n      this._multiple = coerceBooleanProperty(value);\n    }\n    /**\n     * Whether multiple button toggle group is disabled.\n     * @return {?}\n     */\n\n  }, {\n    key: \"disabled\",\n    get: function get() {\n      return this._disabled;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ,\n    set: function set(value) {\n      this._disabled = coerceBooleanProperty(value);\n\n      if (this._buttonToggles) {\n        this._buttonToggles.forEach(function (toggle) {\n          return toggle._markForCheck();\n        });\n      }\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngOnInit\",\n    value: function ngOnInit() {\n      this._selectionModel = new SelectionModel(this.multiple, undefined, false);\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngAfterContentInit\",\n    value: function ngAfterContentInit() {\n      var _this$_selectionModel;\n\n      (_this$_selectionModel = this._selectionModel).select.apply(_this$_selectionModel, _toConsumableArray(this._buttonToggles.filter(function (toggle) {\n        return toggle.checked;\n      })));\n    }\n    /**\n     * Sets the model value. Implemented as part of ControlValueAccessor.\n     * @param {?} value Value to be set to the model.\n     * @return {?}\n     */\n\n  }, {\n    key: \"writeValue\",\n    value: function writeValue(value) {\n      this.value = value;\n\n      this._changeDetector.markForCheck();\n    }\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n\n  }, {\n    key: \"registerOnChange\",\n    value: function registerOnChange(fn) {\n      this._controlValueAccessorChangeFn = fn;\n    }\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n\n  }, {\n    key: \"registerOnTouched\",\n    value: function registerOnTouched(fn) {\n      this._onTouched = fn;\n    }\n    /**\n     * @param {?} isDisabled\n     * @return {?}\n     */\n\n  }, {\n    key: \"setDisabledState\",\n    value: function setDisabledState(isDisabled) {\n      this.disabled = isDisabled;\n    }\n    /**\n     * Dispatch change event with current selection and group value.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_emitChangeEvent\",\n    value: function _emitChangeEvent() {\n      /** @type {?} */\n      var selected = this.selected;\n      /** @type {?} */\n\n      var source = Array.isArray(selected) ? selected[selected.length - 1] : selected;\n      /** @type {?} */\n\n      var event = new MatButtonToggleChange(\n      /** @type {?} */\n      source, this.value);\n\n      this._controlValueAccessorChangeFn(event.value);\n\n      this.change.emit(event);\n    }\n    /**\n     * Syncs a button toggle's selected state with the model value.\n     * @param {?} toggle Toggle to be synced.\n     * @param {?} select Whether the toggle should be selected.\n     * @param {?=} isUserInput Whether the change was a result of a user interaction.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_syncButtonToggle\",\n    value: function _syncButtonToggle(toggle, select) {\n      var isUserInput = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\n      // Deselect the currently-selected toggle, if we're in single-selection\n      // mode and the button being toggled isn't selected at the moment.\n      if (!this.multiple && this.selected && !toggle.checked) {\n        /** @type {?} */\n        this.selected.checked = false;\n      }\n\n      if (select) {\n        this._selectionModel.select(toggle);\n      } else {\n        this._selectionModel.deselect(toggle);\n      } // Only emit the change event for user input.\n\n\n      if (isUserInput) {\n        this._emitChangeEvent();\n      } // Note: we emit this one no matter whether it was a user interaction, because\n      // it is used by Angular to sync up the two-way data binding.\n\n\n      this.valueChange.emit(this.value);\n    }\n    /**\n     * Checks whether a button toggle is selected.\n     * @param {?} toggle\n     * @return {?}\n     */\n\n  }, {\n    key: \"_isSelected\",\n    value: function _isSelected(toggle) {\n      return this._selectionModel.isSelected(toggle);\n    }\n    /**\n     * Determines whether a button toggle should be checked on init.\n     * @param {?} toggle\n     * @return {?}\n     */\n\n  }, {\n    key: \"_isPrechecked\",\n    value: function _isPrechecked(toggle) {\n      if (typeof this._rawValue === 'undefined') {\n        return false;\n      }\n\n      if (this.multiple && Array.isArray(this._rawValue)) {\n        return this._rawValue.some(function (value) {\n          return toggle.value != null && value === toggle.value;\n        });\n      }\n\n      return toggle.value === this._rawValue;\n    }\n    /**\n     * Updates the selection state of the toggles in the group based on a value.\n     * @param {?} value\n     * @return {?}\n     */\n\n  }, {\n    key: \"_setSelectionByValue\",\n    value: function _setSelectionByValue(value) {\n      var _this2 = this;\n\n      this._rawValue = value;\n\n      if (!this._buttonToggles) {\n        return;\n      }\n\n      if (this.multiple && value) {\n        if (!Array.isArray(value)) {\n          throw Error('Value must be an array in multiple-selection mode.');\n        }\n\n        this._clearSelection();\n\n        value.forEach(function (currentValue) {\n          return _this2._selectValue(currentValue);\n        });\n      } else {\n        this._clearSelection();\n\n        this._selectValue(value);\n      }\n    }\n    /**\n     * Clears the selected toggles.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_clearSelection\",\n    value: function _clearSelection() {\n      this._selectionModel.clear();\n\n      this._buttonToggles.forEach(function (toggle) {\n        return toggle.checked = false;\n      });\n    }\n    /**\n     * Selects a value if there's a toggle that corresponds to it.\n     * @param {?} value\n     * @return {?}\n     */\n\n  }, {\n    key: \"_selectValue\",\n    value: function _selectValue(value) {\n      /** @type {?} */\n      var correspondingOption = this._buttonToggles.find(function (toggle) {\n        return toggle.value != null && toggle.value === value;\n      });\n\n      if (correspondingOption) {\n        correspondingOption.checked = true;\n\n        this._selectionModel.select(correspondingOption);\n      }\n    }\n  }]);\n\n  return MatButtonToggleGroup;\n}();\n\nMatButtonToggleGroup.ɵfac = function MatButtonToggleGroup_Factory(t) {\n  return new (t || MatButtonToggleGroup)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS, 8));\n};\n\nMatButtonToggleGroup.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n  type: MatButtonToggleGroup,\n  selectors: [[\"mat-button-toggle-group\"]],\n  contentQueries: function MatButtonToggleGroup_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵcontentQuery(dirIndex, MatButtonToggle, 4);\n    }\n\n    if (rf & 2) {\n      var _t;\n\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._buttonToggles = _t);\n    }\n  },\n  hostAttrs: [\"role\", \"group\", 1, \"mat-button-toggle-group\"],\n  hostVars: 5,\n  hostBindings: function MatButtonToggleGroup_HostBindings(rf, ctx) {\n    if (rf & 2) {\n      ɵngcc0.ɵɵattribute(\"aria-disabled\", ctx.disabled);\n      ɵngcc0.ɵɵclassProp(\"mat-button-toggle-vertical\", ctx.vertical)(\"mat-button-toggle-group-appearance-standard\", ctx.appearance === \"standard\");\n    }\n  },\n  inputs: {\n    appearance: \"appearance\",\n    name: \"name\",\n    vertical: \"vertical\",\n    value: \"value\",\n    multiple: \"multiple\",\n    disabled: \"disabled\"\n  },\n  outputs: {\n    valueChange: \"valueChange\",\n    change: \"change\"\n  },\n  exportAs: [\"matButtonToggleGroup\"],\n  features: [ɵngcc0.ɵɵProvidersFeature([MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR, {\n    provide: MatButtonToggleGroupMultiple,\n    useExisting: MatButtonToggleGroup\n  }])]\n});\n/** @nocollapse */\n\nMatButtonToggleGroup.ctorParameters = function () {\n  return [{\n    type: ChangeDetectorRef\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Optional\n    }, {\n      type: Inject,\n      args: [MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS]\n    }]\n  }];\n};\n\nMatButtonToggleGroup.propDecorators = {\n  _buttonToggles: [{\n    type: ContentChildren,\n    args: [forwardRef(function () {\n      return MatButtonToggle;\n    })]\n  }],\n  appearance: [{\n    type: Input\n  }],\n  name: [{\n    type: Input\n  }],\n  vertical: [{\n    type: Input\n  }],\n  value: [{\n    type: Input\n  }],\n  valueChange: [{\n    type: Output\n  }],\n  multiple: [{\n    type: Input\n  }],\n  disabled: [{\n    type: Input\n  }],\n  change: [{\n    type: Output\n  }]\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatButtonToggleGroup, [{\n    type: Directive,\n    args: [{\n      selector: 'mat-button-toggle-group',\n      providers: [MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR, {\n        provide: MatButtonToggleGroupMultiple,\n        useExisting: MatButtonToggleGroup\n      }],\n      host: {\n        'role': 'group',\n        'class': 'mat-button-toggle-group',\n        '[attr.aria-disabled]': 'disabled',\n        '[class.mat-button-toggle-vertical]': 'vertical',\n        '[class.mat-button-toggle-group-appearance-standard]': 'appearance === \"standard\"'\n      },\n      exportAs: 'matButtonToggleGroup'\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ChangeDetectorRef\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS]\n      }]\n    }];\n  }, {\n    valueChange: [{\n      type: Output\n    }],\n    change: [{\n      type: Output\n    }],\n    appearance: [{\n      type: Input\n    }],\n    name: [{\n      type: Input\n    }],\n    vertical: [{\n      type: Input\n    }],\n    value: [{\n      type: Input\n    }],\n    multiple: [{\n      type: Input\n    }],\n    disabled: [{\n      type: Input\n    }],\n    _buttonToggles: [{\n      type: ContentChildren,\n      args: [forwardRef(function () {\n        return MatButtonToggle;\n      })]\n    }]\n  });\n})();\n/**\n * \\@docs-private\n */\n\n\nvar MatButtonToggleBase = function MatButtonToggleBase() {\n  _classCallCheck(this, MatButtonToggleBase);\n};\n/** @type {?} */\n\n\nvar _MatButtonToggleMixinBase = mixinDisableRipple(MatButtonToggleBase);\n/**\n * Single button inside of a toggle group.\n */\n\n\nvar MatButtonToggle = /*#__PURE__*/function (_MatButtonToggleMixin) {\n  _inherits(MatButtonToggle, _MatButtonToggleMixin);\n\n  var _super = _createSuper(MatButtonToggle);\n\n  /**\n   * @param {?} toggleGroup\n   * @param {?} _changeDetectorRef\n   * @param {?} _elementRef\n   * @param {?} _focusMonitor\n   * @param {?} defaultTabIndex\n   * @param {?=} defaultOptions\n   */\n  function MatButtonToggle(toggleGroup, _changeDetectorRef, _elementRef, _focusMonitor, // @breaking-change 8.0.0 `defaultTabIndex` to be made a required parameter.\n  defaultTabIndex, defaultOptions) {\n    var _this3;\n\n    _classCallCheck(this, MatButtonToggle);\n\n    _this3 = _super.call(this);\n    _this3._changeDetectorRef = _changeDetectorRef;\n    _this3._elementRef = _elementRef;\n    _this3._focusMonitor = _focusMonitor;\n    _this3._isSingleSelector = false;\n    _this3._checked = false;\n    /**\n     * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n     */\n\n    _this3.ariaLabelledby = null;\n    _this3._disabled = false;\n    /**\n     * Event emitted when the group value changes.\n     */\n\n    _this3.change = new EventEmitter();\n    /** @type {?} */\n\n    var parsedTabIndex = Number(defaultTabIndex);\n    _this3.tabIndex = parsedTabIndex || parsedTabIndex === 0 ? parsedTabIndex : null;\n    _this3.buttonToggleGroup = toggleGroup;\n    _this3.appearance = defaultOptions && defaultOptions.appearance ? defaultOptions.appearance : 'standard';\n    return _this3;\n  }\n  /**\n   * Unique ID for the underlying `button` element.\n   * @return {?}\n   */\n\n\n  _createClass(MatButtonToggle, [{\n    key: \"buttonId\",\n    get: function get() {\n      return \"\".concat(this.id, \"-button\");\n    }\n    /**\n     * The appearance style of the button.\n     * @return {?}\n     */\n\n  }, {\n    key: \"appearance\",\n    get: function get() {\n      return this.buttonToggleGroup ? this.buttonToggleGroup.appearance : this._appearance;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ,\n    set: function set(value) {\n      this._appearance = value;\n    }\n    /**\n     * Whether the button is checked.\n     * @return {?}\n     */\n\n  }, {\n    key: \"checked\",\n    get: function get() {\n      return this.buttonToggleGroup ? this.buttonToggleGroup._isSelected(this) : this._checked;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ,\n    set: function set(value) {\n      /** @type {?} */\n      var newValue = coerceBooleanProperty(value);\n\n      if (newValue !== this._checked) {\n        this._checked = newValue;\n\n        if (this.buttonToggleGroup) {\n          this.buttonToggleGroup._syncButtonToggle(this, this._checked);\n        }\n\n        this._changeDetectorRef.markForCheck();\n      }\n    }\n    /**\n     * Whether the button is disabled.\n     * @return {?}\n     */\n\n  }, {\n    key: \"disabled\",\n    get: function get() {\n      return this._disabled || this.buttonToggleGroup && this.buttonToggleGroup.disabled;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ,\n    set: function set(value) {\n      this._disabled = coerceBooleanProperty(value);\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngOnInit\",\n    value: function ngOnInit() {\n      this._isSingleSelector = this.buttonToggleGroup && !this.buttonToggleGroup.multiple;\n      this._type = this._isSingleSelector ? 'radio' : 'checkbox';\n      this.id = this.id || \"mat-button-toggle-\".concat(_uniqueIdCounter++);\n\n      if (this._isSingleSelector) {\n        this.name = this.buttonToggleGroup.name;\n      }\n\n      if (this.buttonToggleGroup && this.buttonToggleGroup._isPrechecked(this)) {\n        this.checked = true;\n      }\n\n      this._focusMonitor.monitor(this._elementRef, true);\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      this._focusMonitor.stopMonitoring(this._elementRef);\n    }\n    /**\n     * Focuses the button.\n     * @return {?}\n     */\n\n  }, {\n    key: \"focus\",\n    value: function focus() {\n      this._buttonElement.nativeElement.focus();\n    }\n    /**\n     * Checks the button toggle due to an interaction with the underlying native button.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_onButtonClick\",\n    value: function _onButtonClick() {\n      /** @type {?} */\n      var newChecked = this._isSingleSelector ? true : !this._checked;\n\n      if (newChecked !== this._checked) {\n        this._checked = newChecked;\n\n        if (this.buttonToggleGroup) {\n          this.buttonToggleGroup._syncButtonToggle(this, this._checked, true);\n\n          this.buttonToggleGroup._onTouched();\n        }\n      } // Emit a change event when it's the single selector\n\n\n      this.change.emit(new MatButtonToggleChange(this, this.value));\n    }\n    /**\n     * Marks the button toggle as needing checking for change detection.\n     * This method is exposed because the parent button toggle group will directly\n     * update bound properties of the radio button.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_markForCheck\",\n    value: function _markForCheck() {\n      // When the group value changes, the button will not be notified.\n      // Use `markForCheck` to explicit update button toggle's status.\n      this._changeDetectorRef.markForCheck();\n    }\n  }]);\n\n  return MatButtonToggle;\n}(_MatButtonToggleMixinBase);\n\nMatButtonToggle.ɵfac = function MatButtonToggle_Factory(t) {\n  return new (t || MatButtonToggle)(ɵngcc0.ɵɵdirectiveInject(MatButtonToggleGroup, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.FocusMonitor), ɵngcc0.ɵɵinjectAttribute('tabindex'), ɵngcc0.ɵɵdirectiveInject(MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS, 8));\n};\n\nMatButtonToggle.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n  type: MatButtonToggle,\n  selectors: [[\"mat-button-toggle\"]],\n  viewQuery: function MatButtonToggle_Query(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵviewQuery(_c0, 5);\n    }\n\n    if (rf & 2) {\n      var _t;\n\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._buttonElement = _t.first);\n    }\n  },\n  hostAttrs: [1, \"mat-button-toggle\"],\n  hostVars: 10,\n  hostBindings: function MatButtonToggle_HostBindings(rf, ctx) {\n    if (rf & 2) {\n      ɵngcc0.ɵɵattribute(\"tabindex\", null)(\"id\", ctx.id);\n      ɵngcc0.ɵɵclassProp(\"mat-button-toggle-standalone\", !ctx.buttonToggleGroup)(\"mat-button-toggle-checked\", ctx.checked)(\"mat-button-toggle-disabled\", ctx.disabled)(\"mat-button-toggle-appearance-standard\", ctx.appearance === \"standard\");\n    }\n  },\n  inputs: {\n    disableRipple: \"disableRipple\",\n    ariaLabelledby: [\"aria-labelledby\", \"ariaLabelledby\"],\n    tabIndex: \"tabIndex\",\n    appearance: \"appearance\",\n    checked: \"checked\",\n    disabled: \"disabled\",\n    id: \"id\",\n    name: \"name\",\n    ariaLabel: [\"aria-label\", \"ariaLabel\"],\n    value: \"value\"\n  },\n  outputs: {\n    change: \"change\"\n  },\n  exportAs: [\"matButtonToggle\"],\n  features: [ɵngcc0.ɵɵInheritDefinitionFeature],\n  ngContentSelectors: _c1,\n  decls: 6,\n  vars: 9,\n  consts: [[\"type\", \"button\", 1, \"mat-button-toggle-button\", 3, \"id\", \"disabled\", \"click\"], [\"button\", \"\"], [1, \"mat-button-toggle-label-content\"], [1, \"mat-button-toggle-focus-overlay\"], [\"matRipple\", \"\", 1, \"mat-button-toggle-ripple\", 3, \"matRippleTrigger\", \"matRippleDisabled\"]],\n  template: function MatButtonToggle_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵprojectionDef();\n      ɵngcc0.ɵɵelementStart(0, \"button\", 0, 1);\n      ɵngcc0.ɵɵlistener(\"click\", function MatButtonToggle_Template_button_click_0_listener() {\n        return ctx._onButtonClick();\n      });\n      ɵngcc0.ɵɵelementStart(2, \"div\", 2);\n      ɵngcc0.ɵɵprojection(3);\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵelement(4, \"div\", 3);\n      ɵngcc0.ɵɵelement(5, \"div\", 4);\n    }\n\n    if (rf & 2) {\n      var _r0 = ɵngcc0.ɵɵreference(1);\n\n      ɵngcc0.ɵɵproperty(\"id\", ctx.buttonId)(\"disabled\", ctx.disabled || null);\n      ɵngcc0.ɵɵattribute(\"tabindex\", ctx.disabled ? -1 : ctx.tabIndex)(\"aria-pressed\", ctx.checked)(\"name\", ctx.name || null)(\"aria-label\", ctx.ariaLabel)(\"aria-labelledby\", ctx.ariaLabelledby);\n      ɵngcc0.ɵɵadvance(5);\n      ɵngcc0.ɵɵproperty(\"matRippleTrigger\", _r0)(\"matRippleDisabled\", ctx.disableRipple || ctx.disabled);\n    }\n  },\n  directives: [ɵngcc2.MatRipple],\n  styles: [\".mat-button-toggle-group,.mat-button-toggle-standalone{position:relative;display:inline-flex;flex-direction:row;cursor:pointer;white-space:nowrap;overflow:hidden;border-radius:2px}@media screen and (-ms-high-contrast:active){.mat-button-toggle-group,.mat-button-toggle-standalone{outline:solid 1px}}.mat-button-toggle-group-appearance-standard,.mat-button-toggle-standalone.mat-button-toggle-appearance-standard{border-radius:4px}@media screen and (-ms-high-contrast:active){.mat-button-toggle-group-appearance-standard,.mat-button-toggle-standalone.mat-button-toggle-appearance-standard{outline:0}}.mat-button-toggle-vertical{flex-direction:column}.mat-button-toggle-vertical .mat-button-toggle-label-content{display:block}.mat-button-toggle{white-space:nowrap;position:relative;-webkit-tap-highlight-color:transparent}.mat-button-toggle.cdk-keyboard-focused .mat-button-toggle-focus-overlay{opacity:1}@media screen and (-ms-high-contrast:active){.mat-button-toggle.cdk-keyboard-focused .mat-button-toggle-focus-overlay{opacity:.5}}.mat-button-toggle-appearance-standard:not(.mat-button-toggle-disabled):hover .mat-button-toggle-focus-overlay{opacity:.04}.mat-button-toggle-appearance-standard.cdk-keyboard-focused:not(.mat-button-toggle-disabled) .mat-button-toggle-focus-overlay{opacity:.12}@media screen and (-ms-high-contrast:active){.mat-button-toggle-appearance-standard.cdk-keyboard-focused:not(.mat-button-toggle-disabled) .mat-button-toggle-focus-overlay{opacity:.5}}.mat-button-toggle-label-content{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;display:inline-block;line-height:36px;padding:0 16px;position:relative}.mat-button-toggle-appearance-standard .mat-button-toggle-label-content{line-height:48px;padding:0 12px}.mat-button-toggle-label-content>*{vertical-align:middle}.mat-button-toggle-focus-overlay{border-radius:inherit;pointer-events:none;opacity:0;top:0;left:0;right:0;bottom:0;position:absolute}.mat-button-toggle-checked .mat-button-toggle-focus-overlay{border-bottom:solid 36px}@media screen and (-ms-high-contrast:active){.mat-button-toggle-checked .mat-button-toggle-focus-overlay{opacity:.5;height:0}}@media screen and (-ms-high-contrast:active){.mat-button-toggle-checked.mat-button-toggle-appearance-standard .mat-button-toggle-focus-overlay{border-bottom:solid 48px}}.mat-button-toggle .mat-button-toggle-ripple{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none}.mat-button-toggle-button{border:0;background:0 0;color:inherit;padding:0;margin:0;font:inherit;outline:0;width:100%;cursor:pointer}.mat-button-toggle-disabled .mat-button-toggle-button{cursor:default}.mat-button-toggle-button::-moz-focus-inner{border:0}\"],\n  encapsulation: 2,\n  changeDetection: 0\n});\n/** @nocollapse */\n\nMatButtonToggle.ctorParameters = function () {\n  return [{\n    type: MatButtonToggleGroup,\n    decorators: [{\n      type: Optional\n    }]\n  }, {\n    type: ChangeDetectorRef\n  }, {\n    type: ElementRef\n  }, {\n    type: FocusMonitor\n  }, {\n    type: String,\n    decorators: [{\n      type: Attribute,\n      args: ['tabindex']\n    }]\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Optional\n    }, {\n      type: Inject,\n      args: [MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS]\n    }]\n  }];\n};\n\nMatButtonToggle.propDecorators = {\n  ariaLabel: [{\n    type: Input,\n    args: ['aria-label']\n  }],\n  ariaLabelledby: [{\n    type: Input,\n    args: ['aria-labelledby']\n  }],\n  _buttonElement: [{\n    type: ViewChild,\n    args: ['button']\n  }],\n  id: [{\n    type: Input\n  }],\n  name: [{\n    type: Input\n  }],\n  value: [{\n    type: Input\n  }],\n  tabIndex: [{\n    type: Input\n  }],\n  appearance: [{\n    type: Input\n  }],\n  checked: [{\n    type: Input\n  }],\n  disabled: [{\n    type: Input\n  }],\n  change: [{\n    type: Output\n  }]\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatButtonToggle, [{\n    type: Component,\n    args: [{\n      selector: 'mat-button-toggle',\n      template: \"<button #button class=\\\"mat-button-toggle-button\\\" type=\\\"button\\\" [id]=\\\"buttonId\\\" [attr.tabindex]=\\\"disabled ? -1 : tabIndex\\\" [attr.aria-pressed]=\\\"checked\\\" [disabled]=\\\"disabled || null\\\" [attr.name]=\\\"name || null\\\" [attr.aria-label]=\\\"ariaLabel\\\" [attr.aria-labelledby]=\\\"ariaLabelledby\\\" (click)=\\\"_onButtonClick()\\\"><div class=\\\"mat-button-toggle-label-content\\\"><ng-content></ng-content></div></button><div class=\\\"mat-button-toggle-focus-overlay\\\"></div><div class=\\\"mat-button-toggle-ripple\\\" matRipple [matRippleTrigger]=\\\"button\\\" [matRippleDisabled]=\\\"this.disableRipple || this.disabled\\\"></div>\",\n      styles: [\".mat-button-toggle-group,.mat-button-toggle-standalone{position:relative;display:inline-flex;flex-direction:row;cursor:pointer;white-space:nowrap;overflow:hidden;border-radius:2px}@media screen and (-ms-high-contrast:active){.mat-button-toggle-group,.mat-button-toggle-standalone{outline:solid 1px}}.mat-button-toggle-group-appearance-standard,.mat-button-toggle-standalone.mat-button-toggle-appearance-standard{border-radius:4px}@media screen and (-ms-high-contrast:active){.mat-button-toggle-group-appearance-standard,.mat-button-toggle-standalone.mat-button-toggle-appearance-standard{outline:0}}.mat-button-toggle-vertical{flex-direction:column}.mat-button-toggle-vertical .mat-button-toggle-label-content{display:block}.mat-button-toggle{white-space:nowrap;position:relative;-webkit-tap-highlight-color:transparent}.mat-button-toggle.cdk-keyboard-focused .mat-button-toggle-focus-overlay{opacity:1}@media screen and (-ms-high-contrast:active){.mat-button-toggle.cdk-keyboard-focused .mat-button-toggle-focus-overlay{opacity:.5}}.mat-button-toggle-appearance-standard:not(.mat-button-toggle-disabled):hover .mat-button-toggle-focus-overlay{opacity:.04}.mat-button-toggle-appearance-standard.cdk-keyboard-focused:not(.mat-button-toggle-disabled) .mat-button-toggle-focus-overlay{opacity:.12}@media screen and (-ms-high-contrast:active){.mat-button-toggle-appearance-standard.cdk-keyboard-focused:not(.mat-button-toggle-disabled) .mat-button-toggle-focus-overlay{opacity:.5}}.mat-button-toggle-label-content{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;display:inline-block;line-height:36px;padding:0 16px;position:relative}.mat-button-toggle-appearance-standard .mat-button-toggle-label-content{line-height:48px;padding:0 12px}.mat-button-toggle-label-content>*{vertical-align:middle}.mat-button-toggle-focus-overlay{border-radius:inherit;pointer-events:none;opacity:0;top:0;left:0;right:0;bottom:0;position:absolute}.mat-button-toggle-checked .mat-button-toggle-focus-overlay{border-bottom:solid 36px}@media screen and (-ms-high-contrast:active){.mat-button-toggle-checked .mat-button-toggle-focus-overlay{opacity:.5;height:0}}@media screen and (-ms-high-contrast:active){.mat-button-toggle-checked.mat-button-toggle-appearance-standard .mat-button-toggle-focus-overlay{border-bottom:solid 48px}}.mat-button-toggle .mat-button-toggle-ripple{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none}.mat-button-toggle-button{border:0;background:0 0;color:inherit;padding:0;margin:0;font:inherit;outline:0;width:100%;cursor:pointer}.mat-button-toggle-disabled .mat-button-toggle-button{cursor:default}.mat-button-toggle-button::-moz-focus-inner{border:0}\"],\n      encapsulation: ViewEncapsulation.None,\n      exportAs: 'matButtonToggle',\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      inputs: ['disableRipple'],\n      host: {\n        '[class.mat-button-toggle-standalone]': '!buttonToggleGroup',\n        '[class.mat-button-toggle-checked]': 'checked',\n        '[class.mat-button-toggle-disabled]': 'disabled',\n        '[class.mat-button-toggle-appearance-standard]': 'appearance === \"standard\"',\n        'class': 'mat-button-toggle',\n        // Clear out the native tabindex here since we forward it to the underlying button\n        '[attr.tabindex]': 'null',\n        '[attr.id]': 'id'\n      }\n    }]\n  }], function () {\n    return [{\n      type: MatButtonToggleGroup,\n      decorators: [{\n        type: Optional\n      }]\n    }, {\n      type: ɵngcc0.ChangeDetectorRef\n    }, {\n      type: ɵngcc0.ElementRef\n    }, {\n      type: ɵngcc1.FocusMonitor\n    }, {\n      type: String,\n      decorators: [{\n        type: Attribute,\n        args: ['tabindex']\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS]\n      }]\n    }];\n  }, {\n    ariaLabelledby: [{\n      type: Input,\n      args: ['aria-labelledby']\n    }],\n    change: [{\n      type: Output\n    }],\n    tabIndex: [{\n      type: Input\n    }],\n    appearance: [{\n      type: Input\n    }],\n    checked: [{\n      type: Input\n    }],\n    disabled: [{\n      type: Input\n    }],\n    id: [{\n      type: Input\n    }],\n    name: [{\n      type: Input\n    }],\n    ariaLabel: [{\n      type: Input,\n      args: ['aria-label']\n    }],\n    _buttonElement: [{\n      type: ViewChild,\n      args: ['button']\n    }],\n    value: [{\n      type: Input\n    }]\n  });\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n\nvar MatButtonToggleModule = function MatButtonToggleModule() {\n  _classCallCheck(this, MatButtonToggleModule);\n};\n\nMatButtonToggleModule.ɵfac = function MatButtonToggleModule_Factory(t) {\n  return new (t || MatButtonToggleModule)();\n};\n\nMatButtonToggleModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n  type: MatButtonToggleModule\n});\nMatButtonToggleModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n  imports: [[MatCommonModule, MatRippleModule], MatCommonModule]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatButtonToggleModule, [{\n    type: NgModule,\n    args: [{\n      imports: [MatCommonModule, MatRippleModule],\n      exports: [MatCommonModule, MatButtonToggleGroup, MatButtonToggle],\n      declarations: [MatButtonToggleGroup, MatButtonToggle]\n    }]\n  }], null, null);\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatButtonToggleModule, {\n    declarations: function declarations() {\n      return [MatButtonToggleGroup, MatButtonToggle];\n    },\n    imports: function imports() {\n      return [MatCommonModule, MatRippleModule];\n    },\n    exports: function exports() {\n      return [MatCommonModule, MatButtonToggleGroup, MatButtonToggle];\n    }\n  });\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n\nexport { MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS, MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR, MatButtonToggleGroupMultiple, MatButtonToggleChange, MatButtonToggleGroup, MatButtonToggleBase, _MatButtonToggleMixinBase, MatButtonToggle, MatButtonToggleModule }; //# sourceMappingURL=button-toggle.js.map","map":{"version":3,"sources":["/Users/adepertat/Dropbox/ECOLES/Openclassroom/P6_de_Pertat_Antoine/dwj-projet6/node_modules/@angular/material/__ivy_ngcc__/esm2015/button-toggle.js"],"names":["FocusMonitor","coerceBooleanProperty","SelectionModel","Attribute","ChangeDetectionStrategy","ChangeDetectorRef","Component","ContentChildren","Directive","ElementRef","EventEmitter","forwardRef","Input","Optional","Output","ViewChild","ViewEncapsulation","InjectionToken","Inject","NgModule","NG_VALUE_ACCESSOR","mixinDisableRipple","MatCommonModule","MatRippleModule","ɵngcc0","ɵngcc1","ɵngcc2","_c0","_c1","MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS","MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR","provide","useExisting","MatButtonToggleGroup","multi","MatButtonToggleGroupMultiple","_uniqueIdCounter","MatButtonToggleChange","source","value","_changeDetector","defaultOptions","_vertical","_multiple","_disabled","_controlValueAccessorChangeFn","_onTouched","_name","valueChange","change","appearance","_buttonToggles","forEach","toggle","name","selected","_selectionModel","multiple","map","undefined","newValue","_setSelectionByValue","emit","_markForCheck","select","filter","checked","markForCheck","fn","isDisabled","disabled","Array","isArray","length","event","isUserInput","deselect","_emitChangeEvent","isSelected","_rawValue","some","Error","_clearSelection","currentValue","_selectValue","clear","correspondingOption","find","ɵfac","MatButtonToggleGroup_Factory","t","ɵɵdirectiveInject","ɵdir","ɵɵdefineDirective","type","selectors","contentQueries","MatButtonToggleGroup_ContentQueries","rf","ctx","dirIndex","ɵɵcontentQuery","MatButtonToggle","_t","ɵɵqueryRefresh","ɵɵloadQuery","hostAttrs","hostVars","hostBindings","MatButtonToggleGroup_HostBindings","ɵɵattribute","ɵɵclassProp","vertical","inputs","outputs","exportAs","features","ɵɵProvidersFeature","ctorParameters","decorators","args","propDecorators","ngDevMode","ɵsetClassMetadata","selector","providers","host","MatButtonToggleBase","_MatButtonToggleMixinBase","toggleGroup","_changeDetectorRef","_elementRef","_focusMonitor","defaultTabIndex","_isSingleSelector","_checked","ariaLabelledby","parsedTabIndex","Number","tabIndex","buttonToggleGroup","id","_appearance","_isSelected","_syncButtonToggle","_type","_isPrechecked","monitor","stopMonitoring","_buttonElement","nativeElement","focus","newChecked","MatButtonToggle_Factory","ɵɵinjectAttribute","ɵcmp","ɵɵdefineComponent","viewQuery","MatButtonToggle_Query","ɵɵviewQuery","first","MatButtonToggle_HostBindings","disableRipple","ariaLabel","ɵɵInheritDefinitionFeature","ngContentSelectors","decls","vars","consts","template","MatButtonToggle_Template","ɵɵprojectionDef","ɵɵelementStart","ɵɵlistener","MatButtonToggle_Template_button_click_0_listener","_onButtonClick","ɵɵprojection","ɵɵelementEnd","ɵɵelement","_r0","ɵɵreference","ɵɵproperty","buttonId","ɵɵadvance","directives","MatRipple","styles","encapsulation","changeDetection","String","None","OnPush","MatButtonToggleModule","MatButtonToggleModule_Factory","ɵmod","ɵɵdefineNgModule","ɵinj","ɵɵdefineInjector","imports","exports","declarations","ngJitMode","ɵɵsetNgModuleScope"],"mappings":";;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,YAAT,QAA6B,mBAA7B;AACA,SAASC,qBAAT,QAAsC,uBAAtC;AACA,SAASC,cAAT,QAA+B,0BAA/B;AACA,SAASC,SAAT,EAAoBC,uBAApB,EAA6CC,iBAA7C,EAAgEC,SAAhE,EAA2EC,eAA3E,EAA4FC,SAA5F,EAAuGC,UAAvG,EAAmHC,YAAnH,EAAiIC,UAAjI,EAA6IC,KAA7I,EAAoJC,QAApJ,EAA8JC,MAA9J,EAAsKC,SAAtK,EAAiLC,iBAAjL,EAAoMC,cAApM,EAAoNC,MAApN,EAA4NC,QAA5N,QAA4O,eAA5O;AACA,SAASC,iBAAT,QAAkC,gBAAlC;AACA,SAASC,kBAAT,EAA6BC,eAA7B,EAA8CC,eAA9C,QAAqE,wBAArE;AAEA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;;AACA,OAAO,KAAKC,MAAZ,MAAwB,eAAxB;AACA,OAAO,KAAKC,MAAZ,MAAwB,mBAAxB;AACA,OAAO,KAAKC,MAAZ,MAAwB,wBAAxB;AAEA,IAAMC,GAAG,GAAG,CAAC,QAAD,CAAZ;AACA,IAAMC,GAAG,GAAG,CAAC,GAAD,CAAZ;AACA,IAAMC,iCAAiC,GAAG,IAAIZ,cAAJ,CAAmB,mCAAnB,CAA1C;AACA;AACA;AACA;AACA;AACA;;AACA,IAAMa,sCAAsC,GAAG;AAC3CC,EAAAA,OAAO,EAAEX,iBADkC;AAE3CY,EAAAA,WAAW,EAAErB,UAAU,CAAC;AAAA,WAAMsB,oBAAN;AAAA,GAAD,CAFoB;AAG3CC,EAAAA,KAAK,EAAE;AAHoC,CAA/C;AAKA;AACA;AACA;AACA;;IACMC,4B;;;AAEN;;;AACA,IAAIC,gBAAgB,GAAG,CAAvB;AACA;AACA;AACA;;IACMC,qB;AACF;AACJ;AACA;AACA;AACI,+BAAYC,MAAZ,EAAoBC,KAApB,EAA2B;AAAA;;AACvB,OAAKD,MAAL,GAAcA,MAAd;AACA,OAAKC,KAAL,GAAaA,KAAb;AACH,C;AAEL;AACA;AACA;;;IACMN,oB;AACF;AACJ;AACA;AACA;AACI,gCAAYO,eAAZ,EAA6BC,cAA7B,EAA6C;AAAA;;AACzC,SAAKD,eAAL,GAAuBA,eAAvB;AACA,SAAKE,SAAL,GAAiB,KAAjB;AACA,SAAKC,SAAL,GAAiB,KAAjB;AACA,SAAKC,SAAL,GAAiB,KAAjB;AACA;AACR;AACA;AACA;;AACQ,SAAKC,6BAAL,GAAqC,YAAM,CAAG,CAA9C;AACA;AACR;AACA;;;AACQ,SAAKC,UAAL,GAAkB,YAAM,CAAG,CAA3B;;AACA,SAAKC,KAAL,qCAAwCX,gBAAgB,EAAxD;AACA;AACR;AACA;AACA;AACA;;AACQ,SAAKY,WAAL,GAAmB,IAAItC,YAAJ,EAAnB;AACA;AACR;AACA;;AACQ,SAAKuC,MAAL,GAAc,IAAIvC,YAAJ,EAAd;AACA,SAAKwC,UAAL,GACIT,cAAc,IAAIA,cAAc,CAACS,UAAjC,GAA8CT,cAAc,CAACS,UAA7D,GAA0E,UAD9E;AAEH;AACD;AACJ;AACA;AACA;;;;;SACI,eAAW;AAAE,aAAO,KAAKH,KAAZ;AAAoB;AACjC;AACJ;AACA;AACA;;SACI,aAASR,KAAT,EAAgB;AAAA;;AACZ,WAAKQ,KAAL,GAAaR,KAAb;;AACA,UAAI,KAAKY,cAAT,EAAyB;AACrB,aAAKA,cAAL,CAAoBC,OAApB,CAA4B,UAAAC,MAAM;AAAA,iBAAIA,MAAM,CAACC,IAAP,GAAc,KAAI,CAACP,KAAvB;AAAA,SAAlC;AACH;AACJ;AACD;AACJ;AACA;AACA;;;;SACI,eAAe;AAAE,aAAO,KAAKL,SAAZ;AAAwB;AACzC;AACJ;AACA;AACA;;SACI,aAAaH,KAAb,EAAoB;AAChB,WAAKG,SAAL,GAAiBzC,qBAAqB,CAACsC,KAAD,CAAtC;AACH;AACD;AACJ;AACA;AACA;;;;SACI,eAAY;AACR;AACA,UAAMgB,QAAQ,GAAG,KAAKC,eAAL,GAAuB,KAAKA,eAAL,CAAqBD,QAA5C,GAAuD,EAAxE;;AACA,UAAI,KAAKE,QAAT,EAAmB;AACf,eAAOF,QAAQ,CAACG,GAAT,CAAa,UAAAL,MAAM;AAAA,iBAAIA,MAAM,CAACd,KAAX;AAAA,SAAnB,CAAP;AACH;;AACD,aAAOgB,QAAQ,CAAC,CAAD,CAAR,GAAcA,QAAQ,CAAC,CAAD,CAAR,CAAYhB,KAA1B,GAAkCoB,SAAzC;AACH;AACD;AACJ;AACA;AACA;;SACI,aAAUC,QAAV,EAAoB;AAChB,WAAKC,oBAAL,CAA0BD,QAA1B;;AACA,WAAKZ,WAAL,CAAiBc,IAAjB,CAAsB,KAAKvB,KAA3B;AACH;AACD;AACJ;AACA;AACA;;;;SACI,eAAe;AACX;AACA,UAAMgB,QAAQ,GAAG,KAAKC,eAAL,CAAqBD,QAAtC;AACA,aAAO,KAAKE,QAAL,GAAgBF,QAAhB,GAA4BA,QAAQ,CAAC,CAAD,CAAR,IAAe,IAAlD;AACH;AACD;AACJ;AACA;AACA;;;;SACI,eAAe;AAAE,aAAO,KAAKZ,SAAZ;AAAwB;AACzC;AACJ;AACA;AACA;;SACI,aAAaJ,KAAb,EAAoB;AAChB,WAAKI,SAAL,GAAiB1C,qBAAqB,CAACsC,KAAD,CAAtC;AACH;AACD;AACJ;AACA;AACA;;;;SACI,eAAe;AAAE,aAAO,KAAKK,SAAZ;AAAwB;AACzC;AACJ;AACA;AACA;;SACI,aAAaL,KAAb,EAAoB;AAChB,WAAKK,SAAL,GAAiB3C,qBAAqB,CAACsC,KAAD,CAAtC;;AACA,UAAI,KAAKY,cAAT,EAAyB;AACrB,aAAKA,cAAL,CAAoBC,OAApB,CAA4B,UAAAC,MAAM;AAAA,iBAAIA,MAAM,CAACU,aAAP,EAAJ;AAAA,SAAlC;AACH;AACJ;AACD;AACJ;AACA;;;;WACI,oBAAW;AACP,WAAKP,eAAL,GAAuB,IAAItD,cAAJ,CAAmB,KAAKuD,QAAxB,EAAkCE,SAAlC,EAA6C,KAA7C,CAAvB;AACH;AACD;AACJ;AACA;;;;WACI,8BAAqB;AAAA;;AACjB,oCAAKH,eAAL,EAAqBQ,MAArB,iDAA+B,KAAKb,cAAL,CAAoBc,MAApB,CAA2B,UAAAZ,MAAM;AAAA,eAAIA,MAAM,CAACa,OAAX;AAAA,OAAjC,CAA/B;AACH;AACD;AACJ;AACA;AACA;AACA;;;;WACI,oBAAW3B,KAAX,EAAkB;AACd,WAAKA,KAAL,GAAaA,KAAb;;AACA,WAAKC,eAAL,CAAqB2B,YAArB;AACH;AACD;AACJ;AACA;AACA;;;;WACI,0BAAiBC,EAAjB,EAAqB;AACjB,WAAKvB,6BAAL,GAAqCuB,EAArC;AACH;AACD;AACJ;AACA;AACA;;;;WACI,2BAAkBA,EAAlB,EAAsB;AAClB,WAAKtB,UAAL,GAAkBsB,EAAlB;AACH;AACD;AACJ;AACA;AACA;;;;WACI,0BAAiBC,UAAjB,EAA6B;AACzB,WAAKC,QAAL,GAAgBD,UAAhB;AACH;AACD;AACJ;AACA;AACA;;;;WACI,4BAAmB;AACf;AACA,UAAMd,QAAQ,GAAG,KAAKA,QAAtB;AACA;;AACA,UAAMjB,MAAM,GAAGiC,KAAK,CAACC,OAAN,CAAcjB,QAAd,IAA0BA,QAAQ,CAACA,QAAQ,CAACkB,MAAT,GAAkB,CAAnB,CAAlC,GAA0DlB,QAAzE;AACA;;AACA,UAAMmB,KAAK,GAAG,IAAIrC,qBAAJ;AAA0B;AAAmBC,MAAAA,MAA7C,EAAuD,KAAKC,KAA5D,CAAd;;AACA,WAAKM,6BAAL,CAAmC6B,KAAK,CAACnC,KAAzC;;AACA,WAAKU,MAAL,CAAYa,IAAZ,CAAiBY,KAAjB;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;;;;WACI,2BAAkBrB,MAAlB,EAA0BW,MAA1B,EAAuD;AAAA,UAArBW,WAAqB,uEAAP,KAAO;;AACnD;AACA;AACA,UAAI,CAAC,KAAKlB,QAAN,IAAkB,KAAKF,QAAvB,IAAmC,CAACF,MAAM,CAACa,OAA/C,EAAwD;AACnD;AAAkB,aAAKX,QAAxB,CAAmCW,OAAnC,GAA6C,KAA7C;AACH;;AACD,UAAIF,MAAJ,EAAY;AACR,aAAKR,eAAL,CAAqBQ,MAArB,CAA4BX,MAA5B;AACH,OAFD,MAGK;AACD,aAAKG,eAAL,CAAqBoB,QAArB,CAA8BvB,MAA9B;AACH,OAXkD,CAYnD;;;AACA,UAAIsB,WAAJ,EAAiB;AACb,aAAKE,gBAAL;AACH,OAfkD,CAgBnD;AACA;;;AACA,WAAK7B,WAAL,CAAiBc,IAAjB,CAAsB,KAAKvB,KAA3B;AACH;AACD;AACJ;AACA;AACA;AACA;;;;WACI,qBAAYc,MAAZ,EAAoB;AAChB,aAAO,KAAKG,eAAL,CAAqBsB,UAArB,CAAgCzB,MAAhC,CAAP;AACH;AACD;AACJ;AACA;AACA;AACA;;;;WACI,uBAAcA,MAAd,EAAsB;AAClB,UAAI,OAAO,KAAK0B,SAAZ,KAA0B,WAA9B,EAA2C;AACvC,eAAO,KAAP;AACH;;AACD,UAAI,KAAKtB,QAAL,IAAiBc,KAAK,CAACC,OAAN,CAAc,KAAKO,SAAnB,CAArB,EAAoD;AAChD,eAAO,KAAKA,SAAL,CAAeC,IAAf,CAAoB,UAAAzC,KAAK;AAAA,iBAAIc,MAAM,CAACd,KAAP,IAAgB,IAAhB,IAAwBA,KAAK,KAAKc,MAAM,CAACd,KAA7C;AAAA,SAAzB,CAAP;AACH;;AACD,aAAOc,MAAM,CAACd,KAAP,KAAiB,KAAKwC,SAA7B;AACH;AACD;AACJ;AACA;AACA;AACA;;;;WACI,8BAAqBxC,KAArB,EAA4B;AAAA;;AACxB,WAAKwC,SAAL,GAAiBxC,KAAjB;;AACA,UAAI,CAAC,KAAKY,cAAV,EAA0B;AACtB;AACH;;AACD,UAAI,KAAKM,QAAL,IAAiBlB,KAArB,EAA4B;AACxB,YAAI,CAACgC,KAAK,CAACC,OAAN,CAAcjC,KAAd,CAAL,EAA2B;AACvB,gBAAM0C,KAAK,CAAC,oDAAD,CAAX;AACH;;AACD,aAAKC,eAAL;;AACA3C,QAAAA,KAAK,CAACa,OAAN,CAAc,UAAC+B,YAAD;AAAA,iBAAkB,MAAI,CAACC,YAAL,CAAkBD,YAAlB,CAAlB;AAAA,SAAd;AACH,OAND,MAOK;AACD,aAAKD,eAAL;;AACA,aAAKE,YAAL,CAAkB7C,KAAlB;AACH;AACJ;AACD;AACJ;AACA;AACA;;;;WACI,2BAAkB;AACd,WAAKiB,eAAL,CAAqB6B,KAArB;;AACA,WAAKlC,cAAL,CAAoBC,OAApB,CAA4B,UAAAC,MAAM;AAAA,eAAIA,MAAM,CAACa,OAAP,GAAiB,KAArB;AAAA,OAAlC;AACH;AACD;AACJ;AACA;AACA;AACA;;;;WACI,sBAAa3B,KAAb,EAAoB;AAChB;AACA,UAAM+C,mBAAmB,GAAG,KAAKnC,cAAL,CAAoBoC,IAApB,CAAyB,UAAAlC,MAAM,EAAI;AAC3D,eAAOA,MAAM,CAACd,KAAP,IAAgB,IAAhB,IAAwBc,MAAM,CAACd,KAAP,KAAiBA,KAAhD;AACH,OAF2B,CAA5B;;AAGA,UAAI+C,mBAAJ,EAAyB;AACrBA,QAAAA,mBAAmB,CAACpB,OAApB,GAA8B,IAA9B;;AACA,aAAKV,eAAL,CAAqBQ,MAArB,CAA4BsB,mBAA5B;AACH;AACJ;;;;;;AAELrD,oBAAoB,CAACuD,IAArB,GAA4B,SAASC,4BAAT,CAAsCC,CAAtC,EAAyC;AAAE,SAAO,KAAKA,CAAC,IAAIzD,oBAAV,EAAgCT,MAAM,CAACmE,iBAAP,CAAyBnE,MAAM,CAACnB,iBAAhC,CAAhC,EAAoFmB,MAAM,CAACmE,iBAAP,CAAyB9D,iCAAzB,EAA4D,CAA5D,CAApF,CAAP;AAA6J,CAApO;;AACAI,oBAAoB,CAAC2D,IAArB,GAA4B,aAAcpE,MAAM,CAACqE,iBAAP,CAAyB;AAAEC,EAAAA,IAAI,EAAE7D,oBAAR;AAA8B8D,EAAAA,SAAS,EAAE,CAAC,CAAC,yBAAD,CAAD,CAAzC;AAAwEC,EAAAA,cAAc,EAAE,SAASC,mCAAT,CAA6CC,EAA7C,EAAiDC,GAAjD,EAAsDC,QAAtD,EAAgE;AAAE,QAAIF,EAAE,GAAG,CAAT,EAAY;AACjO1E,MAAAA,MAAM,CAAC6E,cAAP,CAAsBD,QAAtB,EAAgCE,eAAhC,EAAiD,CAAjD;AACH;;AAAC,QAAIJ,EAAE,GAAG,CAAT,EAAY;AACV,UAAIK,EAAJ;;AACA/E,MAAAA,MAAM,CAACgF,cAAP,CAAsBD,EAAE,GAAG/E,MAAM,CAACiF,WAAP,EAA3B,MAAqDN,GAAG,CAAChD,cAAJ,GAAqBoD,EAA1E;AACH;AAAE,GAL4D;AAK1DG,EAAAA,SAAS,EAAE,CAAC,MAAD,EAAS,OAAT,EAAkB,CAAlB,EAAqB,yBAArB,CAL+C;AAKEC,EAAAA,QAAQ,EAAE,CALZ;AAKeC,EAAAA,YAAY,EAAE,SAASC,iCAAT,CAA2CX,EAA3C,EAA+CC,GAA/C,EAAoD;AAAE,QAAID,EAAE,GAAG,CAAT,EAAY;AAC1J1E,MAAAA,MAAM,CAACsF,WAAP,CAAmB,eAAnB,EAAoCX,GAAG,CAAC7B,QAAxC;AACA9C,MAAAA,MAAM,CAACuF,WAAP,CAAmB,4BAAnB,EAAiDZ,GAAG,CAACa,QAArD,EAA+D,6CAA/D,EAA8Gb,GAAG,CAACjD,UAAJ,KAAmB,UAAjI;AACH;AAAE,GAR4D;AAQ1D+D,EAAAA,MAAM,EAAE;AAAE/D,IAAAA,UAAU,EAAE,YAAd;AAA4BI,IAAAA,IAAI,EAAE,MAAlC;AAA0C0D,IAAAA,QAAQ,EAAE,UAApD;AAAgEzE,IAAAA,KAAK,EAAE,OAAvE;AAAgFkB,IAAAA,QAAQ,EAAE,UAA1F;AAAsGa,IAAAA,QAAQ,EAAE;AAAhH,GARkD;AAQ4E4C,EAAAA,OAAO,EAAE;AAAElE,IAAAA,WAAW,EAAE,aAAf;AAA8BC,IAAAA,MAAM,EAAE;AAAtC,GARrF;AAQuIkE,EAAAA,QAAQ,EAAE,CAAC,sBAAD,CARjJ;AAQ2KC,EAAAA,QAAQ,EAAE,CAAC5F,MAAM,CAAC6F,kBAAP,CAA0B,CACvQvF,sCADuQ,EAEvQ;AAAEC,IAAAA,OAAO,EAAEI,4BAAX;AAAyCH,IAAAA,WAAW,EAAEC;AAAtD,GAFuQ,CAA1B,CAAD;AARrL,CAAzB,CAA1C;AAYA;;AACAA,oBAAoB,CAACqF,cAArB,GAAsC;AAAA,SAAM,CACxC;AAAExB,IAAAA,IAAI,EAAEzF;AAAR,GADwC,EAExC;AAAEyF,IAAAA,IAAI,EAAEnC,SAAR;AAAmB4D,IAAAA,UAAU,EAAE,CAAC;AAAEzB,MAAAA,IAAI,EAAEjF;AAAR,KAAD,EAAqB;AAAEiF,MAAAA,IAAI,EAAE5E,MAAR;AAAgBsG,MAAAA,IAAI,EAAE,CAAC3F,iCAAD;AAAtB,KAArB;AAA/B,GAFwC,CAAN;AAAA,CAAtC;;AAIAI,oBAAoB,CAACwF,cAArB,GAAsC;AAClCtE,EAAAA,cAAc,EAAE,CAAC;AAAE2C,IAAAA,IAAI,EAAEvF,eAAR;AAAyBiH,IAAAA,IAAI,EAAE,CAAC7G,UAAU,CAAC;AAAA,aAAM2F,eAAN;AAAA,KAAD,CAAX;AAA/B,GAAD,CADkB;AAElCpD,EAAAA,UAAU,EAAE,CAAC;AAAE4C,IAAAA,IAAI,EAAElF;AAAR,GAAD,CAFsB;AAGlC0C,EAAAA,IAAI,EAAE,CAAC;AAAEwC,IAAAA,IAAI,EAAElF;AAAR,GAAD,CAH4B;AAIlCoG,EAAAA,QAAQ,EAAE,CAAC;AAAElB,IAAAA,IAAI,EAAElF;AAAR,GAAD,CAJwB;AAKlC2B,EAAAA,KAAK,EAAE,CAAC;AAAEuD,IAAAA,IAAI,EAAElF;AAAR,GAAD,CAL2B;AAMlCoC,EAAAA,WAAW,EAAE,CAAC;AAAE8C,IAAAA,IAAI,EAAEhF;AAAR,GAAD,CANqB;AAOlC2C,EAAAA,QAAQ,EAAE,CAAC;AAAEqC,IAAAA,IAAI,EAAElF;AAAR,GAAD,CAPwB;AAQlC0D,EAAAA,QAAQ,EAAE,CAAC;AAAEwB,IAAAA,IAAI,EAAElF;AAAR,GAAD,CARwB;AASlCqC,EAAAA,MAAM,EAAE,CAAC;AAAE6C,IAAAA,IAAI,EAAEhF;AAAR,GAAD;AAT0B,CAAtC;;AAWA,CAAC,YAAY;AAAE,GAAC,OAAO4G,SAAP,KAAqB,WAArB,IAAoCA,SAArC,KAAmDlG,MAAM,CAACmG,iBAAP,CAAyB1F,oBAAzB,EAA+C,CAAC;AAC1G6D,IAAAA,IAAI,EAAEtF,SADoG;AAE1GgH,IAAAA,IAAI,EAAE,CAAC;AACCI,MAAAA,QAAQ,EAAE,yBADX;AAECC,MAAAA,SAAS,EAAE,CACP/F,sCADO,EAEP;AAAEC,QAAAA,OAAO,EAAEI,4BAAX;AAAyCH,QAAAA,WAAW,EAAEC;AAAtD,OAFO,CAFZ;AAMC6F,MAAAA,IAAI,EAAE;AACF,gBAAQ,OADN;AAEF,iBAAS,yBAFP;AAGF,gCAAwB,UAHtB;AAIF,8CAAsC,UAJpC;AAKF,+DAAuD;AALrD,OANP;AAaCX,MAAAA,QAAQ,EAAE;AAbX,KAAD;AAFoG,GAAD,CAA/C,EAiB1D,YAAY;AAAE,WAAO,CAAC;AAAErB,MAAAA,IAAI,EAAEtE,MAAM,CAACnB;AAAf,KAAD,EAAqC;AAAEyF,MAAAA,IAAI,EAAEnC,SAAR;AAAmB4D,MAAAA,UAAU,EAAE,CAAC;AAClFzB,QAAAA,IAAI,EAAEjF;AAD4E,OAAD,EAElF;AACCiF,QAAAA,IAAI,EAAE5E,MADP;AAECsG,QAAAA,IAAI,EAAE,CAAC3F,iCAAD;AAFP,OAFkF;AAA/B,KAArC,CAAP;AAKF,GAtB8C,EAsB5C;AAAEmB,IAAAA,WAAW,EAAE,CAAC;AAC1B8C,MAAAA,IAAI,EAAEhF;AADoB,KAAD,CAAf;AAEVmC,IAAAA,MAAM,EAAE,CAAC;AACT6C,MAAAA,IAAI,EAAEhF;AADG,KAAD,CAFE;AAIVoC,IAAAA,UAAU,EAAE,CAAC;AACb4C,MAAAA,IAAI,EAAElF;AADO,KAAD,CAJF;AAMV0C,IAAAA,IAAI,EAAE,CAAC;AACPwC,MAAAA,IAAI,EAAElF;AADC,KAAD,CANI;AAQVoG,IAAAA,QAAQ,EAAE,CAAC;AACXlB,MAAAA,IAAI,EAAElF;AADK,KAAD,CARA;AAUV2B,IAAAA,KAAK,EAAE,CAAC;AACRuD,MAAAA,IAAI,EAAElF;AADE,KAAD,CAVG;AAYV6C,IAAAA,QAAQ,EAAE,CAAC;AACXqC,MAAAA,IAAI,EAAElF;AADK,KAAD,CAZA;AAcV0D,IAAAA,QAAQ,EAAE,CAAC;AACXwB,MAAAA,IAAI,EAAElF;AADK,KAAD,CAdA;AAgBVuC,IAAAA,cAAc,EAAE,CAAC;AACjB2C,MAAAA,IAAI,EAAEvF,eADW;AAEjBiH,MAAAA,IAAI,EAAE,CAAC7G,UAAU,CAAC;AAAA,eAAM2F,eAAN;AAAA,OAAD,CAAX;AAFW,KAAD;AAhBN,GAtB4C,CAAnD;AAyCC,CAzChB;AA0CA;AACA;AACA;;;IACMyB,mB;;;AAEN;;;AACA,IAAMC,yBAAyB,GAAG3G,kBAAkB,CAAC0G,mBAAD,CAApD;AACA;AACA;AACA;;;IACMzB,e;;;;;AACF;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACI,2BAAY2B,WAAZ,EAAyBC,kBAAzB,EAA6CC,WAA7C,EAA0DC,aAA1D,EACA;AACAC,EAAAA,eAFA,EAEiB5F,cAFjB,EAEiC;AAAA;;AAAA;;AAC7B;AACA,WAAKyF,kBAAL,GAA0BA,kBAA1B;AACA,WAAKC,WAAL,GAAmBA,WAAnB;AACA,WAAKC,aAAL,GAAqBA,aAArB;AACA,WAAKE,iBAAL,GAAyB,KAAzB;AACA,WAAKC,QAAL,GAAgB,KAAhB;AACA;AACR;AACA;;AACQ,WAAKC,cAAL,GAAsB,IAAtB;AACA,WAAK5F,SAAL,GAAiB,KAAjB;AACA;AACR;AACA;;AACQ,WAAKK,MAAL,GAAc,IAAIvC,YAAJ,EAAd;AACA;;AACA,QAAM+H,cAAc,GAAGC,MAAM,CAACL,eAAD,CAA7B;AACA,WAAKM,QAAL,GAAiBF,cAAc,IAAIA,cAAc,KAAK,CAAtC,GAA2CA,cAA3C,GAA4D,IAA5E;AACA,WAAKG,iBAAL,GAAyBX,WAAzB;AACA,WAAK/E,UAAL,GACIT,cAAc,IAAIA,cAAc,CAACS,UAAjC,GAA8CT,cAAc,CAACS,UAA7D,GAA0E,UAD9E;AApB6B;AAsBhC;AACD;AACJ;AACA;AACA;;;;;SACI,eAAe;AAAE,uBAAU,KAAK2F,EAAf;AAA6B;AAC9C;AACJ;AACA;AACA;;;;SACI,eAAiB;AACb,aAAO,KAAKD,iBAAL,GAAyB,KAAKA,iBAAL,CAAuB1F,UAAhD,GAA6D,KAAK4F,WAAzE;AACH;AACD;AACJ;AACA;AACA;;SACI,aAAevG,KAAf,EAAsB;AAClB,WAAKuG,WAAL,GAAmBvG,KAAnB;AACH;AACD;AACJ;AACA;AACA;;;;SACI,eAAc;AACV,aAAO,KAAKqG,iBAAL,GAAyB,KAAKA,iBAAL,CAAuBG,WAAvB,CAAmC,IAAnC,CAAzB,GAAoE,KAAKR,QAAhF;AACH;AACD;AACJ;AACA;AACA;;SACI,aAAYhG,KAAZ,EAAmB;AACf;AACA,UAAMqB,QAAQ,GAAG3D,qBAAqB,CAACsC,KAAD,CAAtC;;AACA,UAAIqB,QAAQ,KAAK,KAAK2E,QAAtB,EAAgC;AAC5B,aAAKA,QAAL,GAAgB3E,QAAhB;;AACA,YAAI,KAAKgF,iBAAT,EAA4B;AACxB,eAAKA,iBAAL,CAAuBI,iBAAvB,CAAyC,IAAzC,EAA+C,KAAKT,QAApD;AACH;;AACD,aAAKL,kBAAL,CAAwB/D,YAAxB;AACH;AACJ;AACD;AACJ;AACA;AACA;;;;SACI,eAAe;AACX,aAAO,KAAKvB,SAAL,IAAmB,KAAKgG,iBAAL,IAA0B,KAAKA,iBAAL,CAAuBtE,QAA3E;AACH;AACD;AACJ;AACA;AACA;;SACI,aAAa/B,KAAb,EAAoB;AAAE,WAAKK,SAAL,GAAiB3C,qBAAqB,CAACsC,KAAD,CAAtC;AAAgD;AACtE;AACJ;AACA;;;;WACI,oBAAW;AACP,WAAK+F,iBAAL,GAAyB,KAAKM,iBAAL,IAA0B,CAAC,KAAKA,iBAAL,CAAuBnF,QAA3E;AACA,WAAKwF,KAAL,GAAa,KAAKX,iBAAL,GAAyB,OAAzB,GAAmC,UAAhD;AACA,WAAKO,EAAL,GAAU,KAAKA,EAAL,gCAAgCzG,gBAAgB,EAAhD,CAAV;;AACA,UAAI,KAAKkG,iBAAT,EAA4B;AACxB,aAAKhF,IAAL,GAAY,KAAKsF,iBAAL,CAAuBtF,IAAnC;AACH;;AACD,UAAI,KAAKsF,iBAAL,IAA0B,KAAKA,iBAAL,CAAuBM,aAAvB,CAAqC,IAArC,CAA9B,EAA0E;AACtE,aAAKhF,OAAL,GAAe,IAAf;AACH;;AACD,WAAKkE,aAAL,CAAmBe,OAAnB,CAA2B,KAAKhB,WAAhC,EAA6C,IAA7C;AACH;AACD;AACJ;AACA;;;;WACI,uBAAc;AACV,WAAKC,aAAL,CAAmBgB,cAAnB,CAAkC,KAAKjB,WAAvC;AACH;AACD;AACJ;AACA;AACA;;;;WACI,iBAAQ;AACJ,WAAKkB,cAAL,CAAoBC,aAApB,CAAkCC,KAAlC;AACH;AACD;AACJ;AACA;AACA;;;;WACI,0BAAiB;AACb;AACA,UAAMC,UAAU,GAAG,KAAKlB,iBAAL,GAAyB,IAAzB,GAAgC,CAAC,KAAKC,QAAzD;;AACA,UAAIiB,UAAU,KAAK,KAAKjB,QAAxB,EAAkC;AAC9B,aAAKA,QAAL,GAAgBiB,UAAhB;;AACA,YAAI,KAAKZ,iBAAT,EAA4B;AACxB,eAAKA,iBAAL,CAAuBI,iBAAvB,CAAyC,IAAzC,EAA+C,KAAKT,QAApD,EAA8D,IAA9D;;AACA,eAAKK,iBAAL,CAAuB9F,UAAvB;AACH;AACJ,OATY,CAUb;;;AACA,WAAKG,MAAL,CAAYa,IAAZ,CAAiB,IAAIzB,qBAAJ,CAA0B,IAA1B,EAAgC,KAAKE,KAArC,CAAjB;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;;;;WACI,yBAAgB;AACZ;AACA;AACA,WAAK2F,kBAAL,CAAwB/D,YAAxB;AACH;;;;EA9IyB6D,yB;;AAgJ9B1B,eAAe,CAACd,IAAhB,GAAuB,SAASiE,uBAAT,CAAiC/D,CAAjC,EAAoC;AAAE,SAAO,KAAKA,CAAC,IAAIY,eAAV,EAA2B9E,MAAM,CAACmE,iBAAP,CAAyB1D,oBAAzB,EAA+C,CAA/C,CAA3B,EAA8ET,MAAM,CAACmE,iBAAP,CAAyBnE,MAAM,CAACnB,iBAAhC,CAA9E,EAAkImB,MAAM,CAACmE,iBAAP,CAAyBnE,MAAM,CAACf,UAAhC,CAAlI,EAA+Ke,MAAM,CAACmE,iBAAP,CAAyBlE,MAAM,CAACzB,YAAhC,CAA/K,EAA8NwB,MAAM,CAACkI,iBAAP,CAAyB,UAAzB,CAA9N,EAAoQlI,MAAM,CAACmE,iBAAP,CAAyB9D,iCAAzB,EAA4D,CAA5D,CAApQ,CAAP;AAA6U,CAA1Y;;AACAyE,eAAe,CAACqD,IAAhB,GAAuB,aAAcnI,MAAM,CAACoI,iBAAP,CAAyB;AAAE9D,EAAAA,IAAI,EAAEQ,eAAR;AAAyBP,EAAAA,SAAS,EAAE,CAAC,CAAC,mBAAD,CAAD,CAApC;AAA6D8D,EAAAA,SAAS,EAAE,SAASC,qBAAT,CAA+B5D,EAA/B,EAAmCC,GAAnC,EAAwC;AAAE,QAAID,EAAE,GAAG,CAAT,EAAY;AACpL1E,MAAAA,MAAM,CAACuI,WAAP,CAAmBpI,GAAnB,EAAwB,CAAxB;AACH;;AAAC,QAAIuE,EAAE,GAAG,CAAT,EAAY;AACV,UAAIK,EAAJ;;AACA/E,MAAAA,MAAM,CAACgF,cAAP,CAAsBD,EAAE,GAAG/E,MAAM,CAACiF,WAAP,EAA3B,MAAqDN,GAAG,CAACkD,cAAJ,GAAqB9C,EAAE,CAACyD,KAA7E;AACH;AAAE,GALuD;AAKrDtD,EAAAA,SAAS,EAAE,CAAC,CAAD,EAAI,mBAAJ,CAL0C;AAKhBC,EAAAA,QAAQ,EAAE,EALM;AAKFC,EAAAA,YAAY,EAAE,SAASqD,4BAAT,CAAsC/D,EAAtC,EAA0CC,GAA1C,EAA+C;AAAE,QAAID,EAAE,GAAG,CAAT,EAAY;AAC/H1E,MAAAA,MAAM,CAACsF,WAAP,CAAmB,UAAnB,EAA+B,IAA/B,EAAqC,IAArC,EAA2CX,GAAG,CAAC0C,EAA/C;AACArH,MAAAA,MAAM,CAACuF,WAAP,CAAmB,8BAAnB,EAAmD,CAACZ,GAAG,CAACyC,iBAAxD,EAA2E,2BAA3E,EAAwGzC,GAAG,CAACjC,OAA5G,EAAqH,4BAArH,EAAmJiC,GAAG,CAAC7B,QAAvJ,EAAiK,uCAAjK,EAA0M6B,GAAG,CAACjD,UAAJ,KAAmB,UAA7N;AACH;AAAE,GARuD;AAQrD+D,EAAAA,MAAM,EAAE;AAAEiD,IAAAA,aAAa,EAAE,eAAjB;AAAkC1B,IAAAA,cAAc,EAAE,CAAC,iBAAD,EAAoB,gBAApB,CAAlD;AAAyFG,IAAAA,QAAQ,EAAE,UAAnG;AAA+GzF,IAAAA,UAAU,EAAE,YAA3H;AAAyIgB,IAAAA,OAAO,EAAE,SAAlJ;AAA6JI,IAAAA,QAAQ,EAAE,UAAvK;AAAmLuE,IAAAA,EAAE,EAAE,IAAvL;AAA6LvF,IAAAA,IAAI,EAAE,MAAnM;AAA2M6G,IAAAA,SAAS,EAAE,CAAC,YAAD,EAAe,WAAf,CAAtN;AAAmP5H,IAAAA,KAAK,EAAE;AAA1P,GAR6C;AAQwN2E,EAAAA,OAAO,EAAE;AAAEjE,IAAAA,MAAM,EAAE;AAAV,GARjO;AAQuPkE,EAAAA,QAAQ,EAAE,CAAC,iBAAD,CARjQ;AAQsRC,EAAAA,QAAQ,EAAE,CAAC5F,MAAM,CAAC4I,0BAAR,CARhS;AAQqUC,EAAAA,kBAAkB,EAAEzI,GARzV;AAQ8V0I,EAAAA,KAAK,EAAE,CARrW;AAQwWC,EAAAA,IAAI,EAAE,CAR9W;AAQiXC,EAAAA,MAAM,EAAE,CAAC,CAAC,MAAD,EAAS,QAAT,EAAmB,CAAnB,EAAsB,0BAAtB,EAAkD,CAAlD,EAAqD,IAArD,EAA2D,UAA3D,EAAuE,OAAvE,CAAD,EAAkF,CAAC,QAAD,EAAW,EAAX,CAAlF,EAAkG,CAAC,CAAD,EAAI,iCAAJ,CAAlG,EAA0I,CAAC,CAAD,EAAI,iCAAJ,CAA1I,EAAkL,CAAC,WAAD,EAAc,EAAd,EAAkB,CAAlB,EAAqB,0BAArB,EAAiD,CAAjD,EAAoD,kBAApD,EAAwE,mBAAxE,CAAlL,CARzX;AAQ0oBC,EAAAA,QAAQ,EAAE,SAASC,wBAAT,CAAkCxE,EAAlC,EAAsCC,GAAtC,EAA2C;AAAE,QAAID,EAAE,GAAG,CAAT,EAAY;AACnwB1E,MAAAA,MAAM,CAACmJ,eAAP;AACAnJ,MAAAA,MAAM,CAACoJ,cAAP,CAAsB,CAAtB,EAAyB,QAAzB,EAAmC,CAAnC,EAAsC,CAAtC;AACApJ,MAAAA,MAAM,CAACqJ,UAAP,CAAkB,OAAlB,EAA2B,SAASC,gDAAT,GAA4D;AAAE,eAAO3E,GAAG,CAAC4E,cAAJ,EAAP;AAA8B,OAAvH;AACAvJ,MAAAA,MAAM,CAACoJ,cAAP,CAAsB,CAAtB,EAAyB,KAAzB,EAAgC,CAAhC;AACApJ,MAAAA,MAAM,CAACwJ,YAAP,CAAoB,CAApB;AACAxJ,MAAAA,MAAM,CAACyJ,YAAP;AACAzJ,MAAAA,MAAM,CAACyJ,YAAP;AACAzJ,MAAAA,MAAM,CAAC0J,SAAP,CAAiB,CAAjB,EAAoB,KAApB,EAA2B,CAA3B;AACA1J,MAAAA,MAAM,CAAC0J,SAAP,CAAiB,CAAjB,EAAoB,KAApB,EAA2B,CAA3B;AACH;;AAAC,QAAIhF,EAAE,GAAG,CAAT,EAAY;AACV,UAAMiF,GAAG,GAAG3J,MAAM,CAAC4J,WAAP,CAAmB,CAAnB,CAAZ;;AACA5J,MAAAA,MAAM,CAAC6J,UAAP,CAAkB,IAAlB,EAAwBlF,GAAG,CAACmF,QAA5B,EAAsC,UAAtC,EAAkDnF,GAAG,CAAC7B,QAAJ,IAAgB,IAAlE;AACA9C,MAAAA,MAAM,CAACsF,WAAP,CAAmB,UAAnB,EAA+BX,GAAG,CAAC7B,QAAJ,GAAe,CAAC,CAAhB,GAAoB6B,GAAG,CAACwC,QAAvD,EAAiE,cAAjE,EAAiFxC,GAAG,CAACjC,OAArF,EAA8F,MAA9F,EAAsGiC,GAAG,CAAC7C,IAAJ,IAAY,IAAlH,EAAwH,YAAxH,EAAsI6C,GAAG,CAACgE,SAA1I,EAAqJ,iBAArJ,EAAwKhE,GAAG,CAACqC,cAA5K;AACAhH,MAAAA,MAAM,CAAC+J,SAAP,CAAiB,CAAjB;AACA/J,MAAAA,MAAM,CAAC6J,UAAP,CAAkB,kBAAlB,EAAsCF,GAAtC,EAA2C,mBAA3C,EAAgEhF,GAAG,CAAC+D,aAAJ,IAAqB/D,GAAG,CAAC7B,QAAzF;AACH;AAAE,GAxBuD;AAwBrDkH,EAAAA,UAAU,EAAE,CAAC9J,MAAM,CAAC+J,SAAR,CAxByC;AAwBrBC,EAAAA,MAAM,EAAE,CAAC,qpFAAD,CAxBa;AAwB4oFC,EAAAA,aAAa,EAAE,CAxB3pF;AAwB8pFC,EAAAA,eAAe,EAAE;AAxB/qF,CAAzB,CAArC;AAyBA;;AACAtF,eAAe,CAACgB,cAAhB,GAAiC;AAAA,SAAM,CACnC;AAAExB,IAAAA,IAAI,EAAE7D,oBAAR;AAA8BsF,IAAAA,UAAU,EAAE,CAAC;AAAEzB,MAAAA,IAAI,EAAEjF;AAAR,KAAD;AAA1C,GADmC,EAEnC;AAAEiF,IAAAA,IAAI,EAAEzF;AAAR,GAFmC,EAGnC;AAAEyF,IAAAA,IAAI,EAAErF;AAAR,GAHmC,EAInC;AAAEqF,IAAAA,IAAI,EAAE9F;AAAR,GAJmC,EAKnC;AAAE8F,IAAAA,IAAI,EAAE+F,MAAR;AAAgBtE,IAAAA,UAAU,EAAE,CAAC;AAAEzB,MAAAA,IAAI,EAAE3F,SAAR;AAAmBqH,MAAAA,IAAI,EAAE,CAAC,UAAD;AAAzB,KAAD;AAA5B,GALmC,EAMnC;AAAE1B,IAAAA,IAAI,EAAEnC,SAAR;AAAmB4D,IAAAA,UAAU,EAAE,CAAC;AAAEzB,MAAAA,IAAI,EAAEjF;AAAR,KAAD,EAAqB;AAAEiF,MAAAA,IAAI,EAAE5E,MAAR;AAAgBsG,MAAAA,IAAI,EAAE,CAAC3F,iCAAD;AAAtB,KAArB;AAA/B,GANmC,CAAN;AAAA,CAAjC;;AAQAyE,eAAe,CAACmB,cAAhB,GAAiC;AAC7B0C,EAAAA,SAAS,EAAE,CAAC;AAAErE,IAAAA,IAAI,EAAElF,KAAR;AAAe4G,IAAAA,IAAI,EAAE,CAAC,YAAD;AAArB,GAAD,CADkB;AAE7BgB,EAAAA,cAAc,EAAE,CAAC;AAAE1C,IAAAA,IAAI,EAAElF,KAAR;AAAe4G,IAAAA,IAAI,EAAE,CAAC,iBAAD;AAArB,GAAD,CAFa;AAG7B6B,EAAAA,cAAc,EAAE,CAAC;AAAEvD,IAAAA,IAAI,EAAE/E,SAAR;AAAmByG,IAAAA,IAAI,EAAE,CAAC,QAAD;AAAzB,GAAD,CAHa;AAI7BqB,EAAAA,EAAE,EAAE,CAAC;AAAE/C,IAAAA,IAAI,EAAElF;AAAR,GAAD,CAJyB;AAK7B0C,EAAAA,IAAI,EAAE,CAAC;AAAEwC,IAAAA,IAAI,EAAElF;AAAR,GAAD,CALuB;AAM7B2B,EAAAA,KAAK,EAAE,CAAC;AAAEuD,IAAAA,IAAI,EAAElF;AAAR,GAAD,CANsB;AAO7B+H,EAAAA,QAAQ,EAAE,CAAC;AAAE7C,IAAAA,IAAI,EAAElF;AAAR,GAAD,CAPmB;AAQ7BsC,EAAAA,UAAU,EAAE,CAAC;AAAE4C,IAAAA,IAAI,EAAElF;AAAR,GAAD,CARiB;AAS7BsD,EAAAA,OAAO,EAAE,CAAC;AAAE4B,IAAAA,IAAI,EAAElF;AAAR,GAAD,CAToB;AAU7B0D,EAAAA,QAAQ,EAAE,CAAC;AAAEwB,IAAAA,IAAI,EAAElF;AAAR,GAAD,CAVmB;AAW7BqC,EAAAA,MAAM,EAAE,CAAC;AAAE6C,IAAAA,IAAI,EAAEhF;AAAR,GAAD;AAXqB,CAAjC;;AAaA,CAAC,YAAY;AAAE,GAAC,OAAO4G,SAAP,KAAqB,WAArB,IAAoCA,SAArC,KAAmDlG,MAAM,CAACmG,iBAAP,CAAyBrB,eAAzB,EAA0C,CAAC;AACrGR,IAAAA,IAAI,EAAExF,SAD+F;AAErGkH,IAAAA,IAAI,EAAE,CAAC;AAAEI,MAAAA,QAAQ,EAAE,mBAAZ;AACC6C,MAAAA,QAAQ,EAAE,smBADX;AAECiB,MAAAA,MAAM,EAAE,CAAC,qpFAAD,CAFT;AAGCC,MAAAA,aAAa,EAAE3K,iBAAiB,CAAC8K,IAHlC;AAIC3E,MAAAA,QAAQ,EAAE,iBAJX;AAKCyE,MAAAA,eAAe,EAAExL,uBAAuB,CAAC2L,MAL1C;AAMC9E,MAAAA,MAAM,EAAE,CAAC,eAAD,CANT;AAOCa,MAAAA,IAAI,EAAE;AACF,gDAAwC,oBADtC;AAEF,6CAAqC,SAFnC;AAGF,8CAAsC,UAHpC;AAIF,yDAAiD,2BAJ/C;AAKF,iBAAS,mBALP;AAMF;AACA,2BAAmB,MAPjB;AAQF,qBAAa;AARX;AAPP,KAAD;AAF+F,GAAD,CAA1C,EAmB1D,YAAY;AAAE,WAAO,CAAC;AAAEhC,MAAAA,IAAI,EAAE7D,oBAAR;AAA8BsF,MAAAA,UAAU,EAAE,CAAC;AACzDzB,QAAAA,IAAI,EAAEjF;AADmD,OAAD;AAA1C,KAAD,EAEX;AAAEiF,MAAAA,IAAI,EAAEtE,MAAM,CAACnB;AAAf,KAFW,EAEyB;AAAEyF,MAAAA,IAAI,EAAEtE,MAAM,CAACf;AAAf,KAFzB,EAEsD;AAAEqF,MAAAA,IAAI,EAAErE,MAAM,CAACzB;AAAf,KAFtD,EAEqF;AAAE8F,MAAAA,IAAI,EAAE+F,MAAR;AAAgBtE,MAAAA,UAAU,EAAE,CAAC;AAC/HzB,QAAAA,IAAI,EAAE3F,SADyH;AAE/HqH,QAAAA,IAAI,EAAE,CAAC,UAAD;AAFyH,OAAD;AAA5B,KAFrF,EAKX;AAAE1B,MAAAA,IAAI,EAAEnC,SAAR;AAAmB4D,MAAAA,UAAU,EAAE,CAAC;AAClCzB,QAAAA,IAAI,EAAEjF;AAD4B,OAAD,EAElC;AACCiF,QAAAA,IAAI,EAAE5E,MADP;AAECsG,QAAAA,IAAI,EAAE,CAAC3F,iCAAD;AAFP,OAFkC;AAA/B,KALW,CAAP;AAUF,GA7B8C,EA6B5C;AAAE2G,IAAAA,cAAc,EAAE,CAAC;AAC7B1C,MAAAA,IAAI,EAAElF,KADuB;AAE7B4G,MAAAA,IAAI,EAAE,CAAC,iBAAD;AAFuB,KAAD,CAAlB;AAGVvE,IAAAA,MAAM,EAAE,CAAC;AACT6C,MAAAA,IAAI,EAAEhF;AADG,KAAD,CAHE;AAKV6H,IAAAA,QAAQ,EAAE,CAAC;AACX7C,MAAAA,IAAI,EAAElF;AADK,KAAD,CALA;AAOVsC,IAAAA,UAAU,EAAE,CAAC;AACb4C,MAAAA,IAAI,EAAElF;AADO,KAAD,CAPF;AASVsD,IAAAA,OAAO,EAAE,CAAC;AACV4B,MAAAA,IAAI,EAAElF;AADI,KAAD,CATC;AAWV0D,IAAAA,QAAQ,EAAE,CAAC;AACXwB,MAAAA,IAAI,EAAElF;AADK,KAAD,CAXA;AAaViI,IAAAA,EAAE,EAAE,CAAC;AACL/C,MAAAA,IAAI,EAAElF;AADD,KAAD,CAbM;AAeV0C,IAAAA,IAAI,EAAE,CAAC;AACPwC,MAAAA,IAAI,EAAElF;AADC,KAAD,CAfI;AAiBVuJ,IAAAA,SAAS,EAAE,CAAC;AACZrE,MAAAA,IAAI,EAAElF,KADM;AAEZ4G,MAAAA,IAAI,EAAE,CAAC,YAAD;AAFM,KAAD,CAjBD;AAoBV6B,IAAAA,cAAc,EAAE,CAAC;AACjBvD,MAAAA,IAAI,EAAE/E,SADW;AAEjByG,MAAAA,IAAI,EAAE,CAAC,QAAD;AAFW,KAAD,CApBN;AAuBVjF,IAAAA,KAAK,EAAE,CAAC;AACRuD,MAAAA,IAAI,EAAElF;AADE,KAAD;AAvBG,GA7B4C,CAAnD;AAsDC,CAtDhB;AAwDA;AACA;AACA;AACA;;;IACMoL,qB;;;;AAENA,qBAAqB,CAACxG,IAAtB,GAA6B,SAASyG,6BAAT,CAAuCvG,CAAvC,EAA0C;AAAE,SAAO,KAAKA,CAAC,IAAIsG,qBAAV,GAAP;AAA4C,CAArH;;AACAA,qBAAqB,CAACE,IAAtB,GAA6B,aAAc1K,MAAM,CAAC2K,gBAAP,CAAwB;AAAErG,EAAAA,IAAI,EAAEkG;AAAR,CAAxB,CAA3C;AACAA,qBAAqB,CAACI,IAAtB,GAA6B,aAAc5K,MAAM,CAAC6K,gBAAP,CAAwB;AAAEC,EAAAA,OAAO,EAAE,CAAC,CAAChL,eAAD,EAAkBC,eAAlB,CAAD,EAAqCD,eAArC;AAAX,CAAxB,CAA3C;;AACA,CAAC,YAAY;AAAE,GAAC,OAAOoG,SAAP,KAAqB,WAArB,IAAoCA,SAArC,KAAmDlG,MAAM,CAACmG,iBAAP,CAAyBqE,qBAAzB,EAAgD,CAAC;AAC3GlG,IAAAA,IAAI,EAAE3E,QADqG;AAE3GqG,IAAAA,IAAI,EAAE,CAAC;AACC8E,MAAAA,OAAO,EAAE,CAAChL,eAAD,EAAkBC,eAAlB,CADV;AAECgL,MAAAA,OAAO,EAAE,CAACjL,eAAD,EAAkBW,oBAAlB,EAAwCqE,eAAxC,CAFV;AAGCkG,MAAAA,YAAY,EAAE,CAACvK,oBAAD,EAAuBqE,eAAvB;AAHf,KAAD;AAFqG,GAAD,CAAhD,EAO1D,IAP0D,EAOpD,IAPoD,CAAnD;AAOO,CAPtB;;AAQA,CAAC,YAAY;AAAE,GAAC,OAAOmG,SAAP,KAAqB,WAArB,IAAoCA,SAArC,KAAmDjL,MAAM,CAACkL,kBAAP,CAA0BV,qBAA1B,EAAiD;AAAEQ,IAAAA,YAAY,EAAE,wBAAY;AAAE,aAAO,CAACvK,oBAAD,EAAuBqE,eAAvB,CAAP;AAAiD,KAA/E;AAAiFgG,IAAAA,OAAO,EAAE,mBAAY;AAAE,aAAO,CAAChL,eAAD,EAAkBC,eAAlB,CAAP;AAA4C,KAApJ;AAAsJgL,IAAAA,OAAO,EAAE,mBAAY;AAAE,aAAO,CAACjL,eAAD,EAAkBW,oBAAlB,EAAwCqE,eAAxC,CAAP;AAAkE;AAA/O,GAAjD,CAAnD;AAAyV,CAAxW;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;;AAEA,SAASzE,iCAAT,EAA4CC,sCAA5C,EAAoFK,4BAApF,EAAkHE,qBAAlH,EAAyIJ,oBAAzI,EAA+J8F,mBAA/J,EAAoLC,yBAApL,EAA+M1B,eAA/M,EAAgO0F,qBAAhO,G,CAEA","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { FocusMonitor } from '@angular/cdk/a11y';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { SelectionModel } from '@angular/cdk/collections';\nimport { Attribute, ChangeDetectionStrategy, ChangeDetectorRef, Component, ContentChildren, Directive, ElementRef, EventEmitter, forwardRef, Input, Optional, Output, ViewChild, ViewEncapsulation, InjectionToken, Inject, NgModule } from '@angular/core';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { mixinDisableRipple, MatCommonModule, MatRippleModule } from '@angular/material/core';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/** *\n * Injection token that can be used to configure the\n * default options for all button toggles within an app.\n  @type {?} */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/a11y';\nimport * as ɵngcc2 from '@angular/material/core';\n\nconst _c0 = [\"button\"];\nconst _c1 = [\"*\"];\nconst MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS = new InjectionToken('MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS');\n/** *\n * Provider Expression that allows mat-button-toggle-group to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * \\@docs-private\n  @type {?} */\nconst MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => MatButtonToggleGroup),\n    multi: true\n};\n/**\n * @deprecated Use `MatButtonToggleGroup` instead.\n * \\@breaking-change 8.0.0\n */\nclass MatButtonToggleGroupMultiple {\n}\n/** @type {?} */\nlet _uniqueIdCounter = 0;\n/**\n * Change event object emitted by MatButtonToggle.\n */\nclass MatButtonToggleChange {\n    /**\n     * @param {?} source\n     * @param {?} value\n     */\n    constructor(source, value) {\n        this.source = source;\n        this.value = value;\n    }\n}\n/**\n * Exclusive selection button toggle group that behaves like a radio-button group.\n */\nclass MatButtonToggleGroup {\n    /**\n     * @param {?} _changeDetector\n     * @param {?=} defaultOptions\n     */\n    constructor(_changeDetector, defaultOptions) {\n        this._changeDetector = _changeDetector;\n        this._vertical = false;\n        this._multiple = false;\n        this._disabled = false;\n        /**\n         * The method to be called in order to update ngModel.\n         * Now `ngModel` binding is not supported in multiple selection mode.\n         */\n        this._controlValueAccessorChangeFn = () => { };\n        /**\n         * onTouch function registered via registerOnTouch (ControlValueAccessor).\n         */\n        this._onTouched = () => { };\n        this._name = `mat-button-toggle-group-${_uniqueIdCounter++}`;\n        /**\n         * Event that emits whenever the value of the group changes.\n         * Used to facilitate two-way data binding.\n         * \\@docs-private\n         */\n        this.valueChange = new EventEmitter();\n        /**\n         * Event emitted when the group's value changes.\n         */\n        this.change = new EventEmitter();\n        this.appearance =\n            defaultOptions && defaultOptions.appearance ? defaultOptions.appearance : 'standard';\n    }\n    /**\n     * `name` attribute for the underlying `input` element.\n     * @return {?}\n     */\n    get name() { return this._name; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set name(value) {\n        this._name = value;\n        if (this._buttonToggles) {\n            this._buttonToggles.forEach(toggle => toggle.name = this._name);\n        }\n    }\n    /**\n     * Whether the toggle group is vertical.\n     * @return {?}\n     */\n    get vertical() { return this._vertical; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set vertical(value) {\n        this._vertical = coerceBooleanProperty(value);\n    }\n    /**\n     * Value of the toggle group.\n     * @return {?}\n     */\n    get value() {\n        /** @type {?} */\n        const selected = this._selectionModel ? this._selectionModel.selected : [];\n        if (this.multiple) {\n            return selected.map(toggle => toggle.value);\n        }\n        return selected[0] ? selected[0].value : undefined;\n    }\n    /**\n     * @param {?} newValue\n     * @return {?}\n     */\n    set value(newValue) {\n        this._setSelectionByValue(newValue);\n        this.valueChange.emit(this.value);\n    }\n    /**\n     * Selected button toggles in the group.\n     * @return {?}\n     */\n    get selected() {\n        /** @type {?} */\n        const selected = this._selectionModel.selected;\n        return this.multiple ? selected : (selected[0] || null);\n    }\n    /**\n     * Whether multiple button toggles can be selected.\n     * @return {?}\n     */\n    get multiple() { return this._multiple; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set multiple(value) {\n        this._multiple = coerceBooleanProperty(value);\n    }\n    /**\n     * Whether multiple button toggle group is disabled.\n     * @return {?}\n     */\n    get disabled() { return this._disabled; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set disabled(value) {\n        this._disabled = coerceBooleanProperty(value);\n        if (this._buttonToggles) {\n            this._buttonToggles.forEach(toggle => toggle._markForCheck());\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngOnInit() {\n        this._selectionModel = new SelectionModel(this.multiple, undefined, false);\n    }\n    /**\n     * @return {?}\n     */\n    ngAfterContentInit() {\n        this._selectionModel.select(...this._buttonToggles.filter(toggle => toggle.checked));\n    }\n    /**\n     * Sets the model value. Implemented as part of ControlValueAccessor.\n     * @param {?} value Value to be set to the model.\n     * @return {?}\n     */\n    writeValue(value) {\n        this.value = value;\n        this._changeDetector.markForCheck();\n    }\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    registerOnChange(fn) {\n        this._controlValueAccessorChangeFn = fn;\n    }\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    registerOnTouched(fn) {\n        this._onTouched = fn;\n    }\n    /**\n     * @param {?} isDisabled\n     * @return {?}\n     */\n    setDisabledState(isDisabled) {\n        this.disabled = isDisabled;\n    }\n    /**\n     * Dispatch change event with current selection and group value.\n     * @return {?}\n     */\n    _emitChangeEvent() {\n        /** @type {?} */\n        const selected = this.selected;\n        /** @type {?} */\n        const source = Array.isArray(selected) ? selected[selected.length - 1] : selected;\n        /** @type {?} */\n        const event = new MatButtonToggleChange(/** @type {?} */ ((source)), this.value);\n        this._controlValueAccessorChangeFn(event.value);\n        this.change.emit(event);\n    }\n    /**\n     * Syncs a button toggle's selected state with the model value.\n     * @param {?} toggle Toggle to be synced.\n     * @param {?} select Whether the toggle should be selected.\n     * @param {?=} isUserInput Whether the change was a result of a user interaction.\n     * @return {?}\n     */\n    _syncButtonToggle(toggle, select, isUserInput = false) {\n        // Deselect the currently-selected toggle, if we're in single-selection\n        // mode and the button being toggled isn't selected at the moment.\n        if (!this.multiple && this.selected && !toggle.checked) {\n            (/** @type {?} */ (this.selected)).checked = false;\n        }\n        if (select) {\n            this._selectionModel.select(toggle);\n        }\n        else {\n            this._selectionModel.deselect(toggle);\n        }\n        // Only emit the change event for user input.\n        if (isUserInput) {\n            this._emitChangeEvent();\n        }\n        // Note: we emit this one no matter whether it was a user interaction, because\n        // it is used by Angular to sync up the two-way data binding.\n        this.valueChange.emit(this.value);\n    }\n    /**\n     * Checks whether a button toggle is selected.\n     * @param {?} toggle\n     * @return {?}\n     */\n    _isSelected(toggle) {\n        return this._selectionModel.isSelected(toggle);\n    }\n    /**\n     * Determines whether a button toggle should be checked on init.\n     * @param {?} toggle\n     * @return {?}\n     */\n    _isPrechecked(toggle) {\n        if (typeof this._rawValue === 'undefined') {\n            return false;\n        }\n        if (this.multiple && Array.isArray(this._rawValue)) {\n            return this._rawValue.some(value => toggle.value != null && value === toggle.value);\n        }\n        return toggle.value === this._rawValue;\n    }\n    /**\n     * Updates the selection state of the toggles in the group based on a value.\n     * @param {?} value\n     * @return {?}\n     */\n    _setSelectionByValue(value) {\n        this._rawValue = value;\n        if (!this._buttonToggles) {\n            return;\n        }\n        if (this.multiple && value) {\n            if (!Array.isArray(value)) {\n                throw Error('Value must be an array in multiple-selection mode.');\n            }\n            this._clearSelection();\n            value.forEach((currentValue) => this._selectValue(currentValue));\n        }\n        else {\n            this._clearSelection();\n            this._selectValue(value);\n        }\n    }\n    /**\n     * Clears the selected toggles.\n     * @return {?}\n     */\n    _clearSelection() {\n        this._selectionModel.clear();\n        this._buttonToggles.forEach(toggle => toggle.checked = false);\n    }\n    /**\n     * Selects a value if there's a toggle that corresponds to it.\n     * @param {?} value\n     * @return {?}\n     */\n    _selectValue(value) {\n        /** @type {?} */\n        const correspondingOption = this._buttonToggles.find(toggle => {\n            return toggle.value != null && toggle.value === value;\n        });\n        if (correspondingOption) {\n            correspondingOption.checked = true;\n            this._selectionModel.select(correspondingOption);\n        }\n    }\n}\nMatButtonToggleGroup.ɵfac = function MatButtonToggleGroup_Factory(t) { return new (t || MatButtonToggleGroup)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS, 8)); };\nMatButtonToggleGroup.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: MatButtonToggleGroup, selectors: [[\"mat-button-toggle-group\"]], contentQueries: function MatButtonToggleGroup_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MatButtonToggle, 4);\n    } if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._buttonToggles = _t);\n    } }, hostAttrs: [\"role\", \"group\", 1, \"mat-button-toggle-group\"], hostVars: 5, hostBindings: function MatButtonToggleGroup_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"aria-disabled\", ctx.disabled);\n        ɵngcc0.ɵɵclassProp(\"mat-button-toggle-vertical\", ctx.vertical)(\"mat-button-toggle-group-appearance-standard\", ctx.appearance === \"standard\");\n    } }, inputs: { appearance: \"appearance\", name: \"name\", vertical: \"vertical\", value: \"value\", multiple: \"multiple\", disabled: \"disabled\" }, outputs: { valueChange: \"valueChange\", change: \"change\" }, exportAs: [\"matButtonToggleGroup\"], features: [ɵngcc0.ɵɵProvidersFeature([\n            MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR,\n            { provide: MatButtonToggleGroupMultiple, useExisting: MatButtonToggleGroup },\n        ])] });\n/** @nocollapse */\nMatButtonToggleGroup.ctorParameters = () => [\n    { type: ChangeDetectorRef },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS,] }] }\n];\nMatButtonToggleGroup.propDecorators = {\n    _buttonToggles: [{ type: ContentChildren, args: [forwardRef(() => MatButtonToggle),] }],\n    appearance: [{ type: Input }],\n    name: [{ type: Input }],\n    vertical: [{ type: Input }],\n    value: [{ type: Input }],\n    valueChange: [{ type: Output }],\n    multiple: [{ type: Input }],\n    disabled: [{ type: Input }],\n    change: [{ type: Output }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatButtonToggleGroup, [{\n        type: Directive,\n        args: [{\n                selector: 'mat-button-toggle-group',\n                providers: [\n                    MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR,\n                    { provide: MatButtonToggleGroupMultiple, useExisting: MatButtonToggleGroup },\n                ],\n                host: {\n                    'role': 'group',\n                    'class': 'mat-button-toggle-group',\n                    '[attr.aria-disabled]': 'disabled',\n                    '[class.mat-button-toggle-vertical]': 'vertical',\n                    '[class.mat-button-toggle-group-appearance-standard]': 'appearance === \"standard\"'\n                },\n                exportAs: 'matButtonToggleGroup'\n            }]\n    }], function () { return [{ type: ɵngcc0.ChangeDetectorRef }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS]\n            }] }]; }, { valueChange: [{\n            type: Output\n        }], change: [{\n            type: Output\n        }], appearance: [{\n            type: Input\n        }], name: [{\n            type: Input\n        }], vertical: [{\n            type: Input\n        }], value: [{\n            type: Input\n        }], multiple: [{\n            type: Input\n        }], disabled: [{\n            type: Input\n        }], _buttonToggles: [{\n            type: ContentChildren,\n            args: [forwardRef(() => MatButtonToggle)]\n        }] }); })();\n/**\n * \\@docs-private\n */\nclass MatButtonToggleBase {\n}\n/** @type {?} */\nconst _MatButtonToggleMixinBase = mixinDisableRipple(MatButtonToggleBase);\n/**\n * Single button inside of a toggle group.\n */\nclass MatButtonToggle extends _MatButtonToggleMixinBase {\n    /**\n     * @param {?} toggleGroup\n     * @param {?} _changeDetectorRef\n     * @param {?} _elementRef\n     * @param {?} _focusMonitor\n     * @param {?} defaultTabIndex\n     * @param {?=} defaultOptions\n     */\n    constructor(toggleGroup, _changeDetectorRef, _elementRef, _focusMonitor, \n    // @breaking-change 8.0.0 `defaultTabIndex` to be made a required parameter.\n    defaultTabIndex, defaultOptions) {\n        super();\n        this._changeDetectorRef = _changeDetectorRef;\n        this._elementRef = _elementRef;\n        this._focusMonitor = _focusMonitor;\n        this._isSingleSelector = false;\n        this._checked = false;\n        /**\n         * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n         */\n        this.ariaLabelledby = null;\n        this._disabled = false;\n        /**\n         * Event emitted when the group value changes.\n         */\n        this.change = new EventEmitter();\n        /** @type {?} */\n        const parsedTabIndex = Number(defaultTabIndex);\n        this.tabIndex = (parsedTabIndex || parsedTabIndex === 0) ? parsedTabIndex : null;\n        this.buttonToggleGroup = toggleGroup;\n        this.appearance =\n            defaultOptions && defaultOptions.appearance ? defaultOptions.appearance : 'standard';\n    }\n    /**\n     * Unique ID for the underlying `button` element.\n     * @return {?}\n     */\n    get buttonId() { return `${this.id}-button`; }\n    /**\n     * The appearance style of the button.\n     * @return {?}\n     */\n    get appearance() {\n        return this.buttonToggleGroup ? this.buttonToggleGroup.appearance : this._appearance;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set appearance(value) {\n        this._appearance = value;\n    }\n    /**\n     * Whether the button is checked.\n     * @return {?}\n     */\n    get checked() {\n        return this.buttonToggleGroup ? this.buttonToggleGroup._isSelected(this) : this._checked;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set checked(value) {\n        /** @type {?} */\n        const newValue = coerceBooleanProperty(value);\n        if (newValue !== this._checked) {\n            this._checked = newValue;\n            if (this.buttonToggleGroup) {\n                this.buttonToggleGroup._syncButtonToggle(this, this._checked);\n            }\n            this._changeDetectorRef.markForCheck();\n        }\n    }\n    /**\n     * Whether the button is disabled.\n     * @return {?}\n     */\n    get disabled() {\n        return this._disabled || (this.buttonToggleGroup && this.buttonToggleGroup.disabled);\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set disabled(value) { this._disabled = coerceBooleanProperty(value); }\n    /**\n     * @return {?}\n     */\n    ngOnInit() {\n        this._isSingleSelector = this.buttonToggleGroup && !this.buttonToggleGroup.multiple;\n        this._type = this._isSingleSelector ? 'radio' : 'checkbox';\n        this.id = this.id || `mat-button-toggle-${_uniqueIdCounter++}`;\n        if (this._isSingleSelector) {\n            this.name = this.buttonToggleGroup.name;\n        }\n        if (this.buttonToggleGroup && this.buttonToggleGroup._isPrechecked(this)) {\n            this.checked = true;\n        }\n        this._focusMonitor.monitor(this._elementRef, true);\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this._focusMonitor.stopMonitoring(this._elementRef);\n    }\n    /**\n     * Focuses the button.\n     * @return {?}\n     */\n    focus() {\n        this._buttonElement.nativeElement.focus();\n    }\n    /**\n     * Checks the button toggle due to an interaction with the underlying native button.\n     * @return {?}\n     */\n    _onButtonClick() {\n        /** @type {?} */\n        const newChecked = this._isSingleSelector ? true : !this._checked;\n        if (newChecked !== this._checked) {\n            this._checked = newChecked;\n            if (this.buttonToggleGroup) {\n                this.buttonToggleGroup._syncButtonToggle(this, this._checked, true);\n                this.buttonToggleGroup._onTouched();\n            }\n        }\n        // Emit a change event when it's the single selector\n        this.change.emit(new MatButtonToggleChange(this, this.value));\n    }\n    /**\n     * Marks the button toggle as needing checking for change detection.\n     * This method is exposed because the parent button toggle group will directly\n     * update bound properties of the radio button.\n     * @return {?}\n     */\n    _markForCheck() {\n        // When the group value changes, the button will not be notified.\n        // Use `markForCheck` to explicit update button toggle's status.\n        this._changeDetectorRef.markForCheck();\n    }\n}\nMatButtonToggle.ɵfac = function MatButtonToggle_Factory(t) { return new (t || MatButtonToggle)(ɵngcc0.ɵɵdirectiveInject(MatButtonToggleGroup, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.FocusMonitor), ɵngcc0.ɵɵinjectAttribute('tabindex'), ɵngcc0.ɵɵdirectiveInject(MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS, 8)); };\nMatButtonToggle.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: MatButtonToggle, selectors: [[\"mat-button-toggle\"]], viewQuery: function MatButtonToggle_Query(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(_c0, 5);\n    } if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._buttonElement = _t.first);\n    } }, hostAttrs: [1, \"mat-button-toggle\"], hostVars: 10, hostBindings: function MatButtonToggle_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"tabindex\", null)(\"id\", ctx.id);\n        ɵngcc0.ɵɵclassProp(\"mat-button-toggle-standalone\", !ctx.buttonToggleGroup)(\"mat-button-toggle-checked\", ctx.checked)(\"mat-button-toggle-disabled\", ctx.disabled)(\"mat-button-toggle-appearance-standard\", ctx.appearance === \"standard\");\n    } }, inputs: { disableRipple: \"disableRipple\", ariaLabelledby: [\"aria-labelledby\", \"ariaLabelledby\"], tabIndex: \"tabIndex\", appearance: \"appearance\", checked: \"checked\", disabled: \"disabled\", id: \"id\", name: \"name\", ariaLabel: [\"aria-label\", \"ariaLabel\"], value: \"value\" }, outputs: { change: \"change\" }, exportAs: [\"matButtonToggle\"], features: [ɵngcc0.ɵɵInheritDefinitionFeature], ngContentSelectors: _c1, decls: 6, vars: 9, consts: [[\"type\", \"button\", 1, \"mat-button-toggle-button\", 3, \"id\", \"disabled\", \"click\"], [\"button\", \"\"], [1, \"mat-button-toggle-label-content\"], [1, \"mat-button-toggle-focus-overlay\"], [\"matRipple\", \"\", 1, \"mat-button-toggle-ripple\", 3, \"matRippleTrigger\", \"matRippleDisabled\"]], template: function MatButtonToggle_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵelementStart(0, \"button\", 0, 1);\n        ɵngcc0.ɵɵlistener(\"click\", function MatButtonToggle_Template_button_click_0_listener() { return ctx._onButtonClick(); });\n        ɵngcc0.ɵɵelementStart(2, \"div\", 2);\n        ɵngcc0.ɵɵprojection(3);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelement(4, \"div\", 3);\n        ɵngcc0.ɵɵelement(5, \"div\", 4);\n    } if (rf & 2) {\n        const _r0 = ɵngcc0.ɵɵreference(1);\n        ɵngcc0.ɵɵproperty(\"id\", ctx.buttonId)(\"disabled\", ctx.disabled || null);\n        ɵngcc0.ɵɵattribute(\"tabindex\", ctx.disabled ? -1 : ctx.tabIndex)(\"aria-pressed\", ctx.checked)(\"name\", ctx.name || null)(\"aria-label\", ctx.ariaLabel)(\"aria-labelledby\", ctx.ariaLabelledby);\n        ɵngcc0.ɵɵadvance(5);\n        ɵngcc0.ɵɵproperty(\"matRippleTrigger\", _r0)(\"matRippleDisabled\", ctx.disableRipple || ctx.disabled);\n    } }, directives: [ɵngcc2.MatRipple], styles: [\".mat-button-toggle-group,.mat-button-toggle-standalone{position:relative;display:inline-flex;flex-direction:row;cursor:pointer;white-space:nowrap;overflow:hidden;border-radius:2px}@media screen and (-ms-high-contrast:active){.mat-button-toggle-group,.mat-button-toggle-standalone{outline:solid 1px}}.mat-button-toggle-group-appearance-standard,.mat-button-toggle-standalone.mat-button-toggle-appearance-standard{border-radius:4px}@media screen and (-ms-high-contrast:active){.mat-button-toggle-group-appearance-standard,.mat-button-toggle-standalone.mat-button-toggle-appearance-standard{outline:0}}.mat-button-toggle-vertical{flex-direction:column}.mat-button-toggle-vertical .mat-button-toggle-label-content{display:block}.mat-button-toggle{white-space:nowrap;position:relative;-webkit-tap-highlight-color:transparent}.mat-button-toggle.cdk-keyboard-focused .mat-button-toggle-focus-overlay{opacity:1}@media screen and (-ms-high-contrast:active){.mat-button-toggle.cdk-keyboard-focused .mat-button-toggle-focus-overlay{opacity:.5}}.mat-button-toggle-appearance-standard:not(.mat-button-toggle-disabled):hover .mat-button-toggle-focus-overlay{opacity:.04}.mat-button-toggle-appearance-standard.cdk-keyboard-focused:not(.mat-button-toggle-disabled) .mat-button-toggle-focus-overlay{opacity:.12}@media screen and (-ms-high-contrast:active){.mat-button-toggle-appearance-standard.cdk-keyboard-focused:not(.mat-button-toggle-disabled) .mat-button-toggle-focus-overlay{opacity:.5}}.mat-button-toggle-label-content{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;display:inline-block;line-height:36px;padding:0 16px;position:relative}.mat-button-toggle-appearance-standard .mat-button-toggle-label-content{line-height:48px;padding:0 12px}.mat-button-toggle-label-content>*{vertical-align:middle}.mat-button-toggle-focus-overlay{border-radius:inherit;pointer-events:none;opacity:0;top:0;left:0;right:0;bottom:0;position:absolute}.mat-button-toggle-checked .mat-button-toggle-focus-overlay{border-bottom:solid 36px}@media screen and (-ms-high-contrast:active){.mat-button-toggle-checked .mat-button-toggle-focus-overlay{opacity:.5;height:0}}@media screen and (-ms-high-contrast:active){.mat-button-toggle-checked.mat-button-toggle-appearance-standard .mat-button-toggle-focus-overlay{border-bottom:solid 48px}}.mat-button-toggle .mat-button-toggle-ripple{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none}.mat-button-toggle-button{border:0;background:0 0;color:inherit;padding:0;margin:0;font:inherit;outline:0;width:100%;cursor:pointer}.mat-button-toggle-disabled .mat-button-toggle-button{cursor:default}.mat-button-toggle-button::-moz-focus-inner{border:0}\"], encapsulation: 2, changeDetection: 0 });\n/** @nocollapse */\nMatButtonToggle.ctorParameters = () => [\n    { type: MatButtonToggleGroup, decorators: [{ type: Optional }] },\n    { type: ChangeDetectorRef },\n    { type: ElementRef },\n    { type: FocusMonitor },\n    { type: String, decorators: [{ type: Attribute, args: ['tabindex',] }] },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS,] }] }\n];\nMatButtonToggle.propDecorators = {\n    ariaLabel: [{ type: Input, args: ['aria-label',] }],\n    ariaLabelledby: [{ type: Input, args: ['aria-labelledby',] }],\n    _buttonElement: [{ type: ViewChild, args: ['button',] }],\n    id: [{ type: Input }],\n    name: [{ type: Input }],\n    value: [{ type: Input }],\n    tabIndex: [{ type: Input }],\n    appearance: [{ type: Input }],\n    checked: [{ type: Input }],\n    disabled: [{ type: Input }],\n    change: [{ type: Output }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatButtonToggle, [{\n        type: Component,\n        args: [{ selector: 'mat-button-toggle',\n                template: \"<button #button class=\\\"mat-button-toggle-button\\\" type=\\\"button\\\" [id]=\\\"buttonId\\\" [attr.tabindex]=\\\"disabled ? -1 : tabIndex\\\" [attr.aria-pressed]=\\\"checked\\\" [disabled]=\\\"disabled || null\\\" [attr.name]=\\\"name || null\\\" [attr.aria-label]=\\\"ariaLabel\\\" [attr.aria-labelledby]=\\\"ariaLabelledby\\\" (click)=\\\"_onButtonClick()\\\"><div class=\\\"mat-button-toggle-label-content\\\"><ng-content></ng-content></div></button><div class=\\\"mat-button-toggle-focus-overlay\\\"></div><div class=\\\"mat-button-toggle-ripple\\\" matRipple [matRippleTrigger]=\\\"button\\\" [matRippleDisabled]=\\\"this.disableRipple || this.disabled\\\"></div>\",\n                styles: [\".mat-button-toggle-group,.mat-button-toggle-standalone{position:relative;display:inline-flex;flex-direction:row;cursor:pointer;white-space:nowrap;overflow:hidden;border-radius:2px}@media screen and (-ms-high-contrast:active){.mat-button-toggle-group,.mat-button-toggle-standalone{outline:solid 1px}}.mat-button-toggle-group-appearance-standard,.mat-button-toggle-standalone.mat-button-toggle-appearance-standard{border-radius:4px}@media screen and (-ms-high-contrast:active){.mat-button-toggle-group-appearance-standard,.mat-button-toggle-standalone.mat-button-toggle-appearance-standard{outline:0}}.mat-button-toggle-vertical{flex-direction:column}.mat-button-toggle-vertical .mat-button-toggle-label-content{display:block}.mat-button-toggle{white-space:nowrap;position:relative;-webkit-tap-highlight-color:transparent}.mat-button-toggle.cdk-keyboard-focused .mat-button-toggle-focus-overlay{opacity:1}@media screen and (-ms-high-contrast:active){.mat-button-toggle.cdk-keyboard-focused .mat-button-toggle-focus-overlay{opacity:.5}}.mat-button-toggle-appearance-standard:not(.mat-button-toggle-disabled):hover .mat-button-toggle-focus-overlay{opacity:.04}.mat-button-toggle-appearance-standard.cdk-keyboard-focused:not(.mat-button-toggle-disabled) .mat-button-toggle-focus-overlay{opacity:.12}@media screen and (-ms-high-contrast:active){.mat-button-toggle-appearance-standard.cdk-keyboard-focused:not(.mat-button-toggle-disabled) .mat-button-toggle-focus-overlay{opacity:.5}}.mat-button-toggle-label-content{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;display:inline-block;line-height:36px;padding:0 16px;position:relative}.mat-button-toggle-appearance-standard .mat-button-toggle-label-content{line-height:48px;padding:0 12px}.mat-button-toggle-label-content>*{vertical-align:middle}.mat-button-toggle-focus-overlay{border-radius:inherit;pointer-events:none;opacity:0;top:0;left:0;right:0;bottom:0;position:absolute}.mat-button-toggle-checked .mat-button-toggle-focus-overlay{border-bottom:solid 36px}@media screen and (-ms-high-contrast:active){.mat-button-toggle-checked .mat-button-toggle-focus-overlay{opacity:.5;height:0}}@media screen and (-ms-high-contrast:active){.mat-button-toggle-checked.mat-button-toggle-appearance-standard .mat-button-toggle-focus-overlay{border-bottom:solid 48px}}.mat-button-toggle .mat-button-toggle-ripple{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none}.mat-button-toggle-button{border:0;background:0 0;color:inherit;padding:0;margin:0;font:inherit;outline:0;width:100%;cursor:pointer}.mat-button-toggle-disabled .mat-button-toggle-button{cursor:default}.mat-button-toggle-button::-moz-focus-inner{border:0}\"],\n                encapsulation: ViewEncapsulation.None,\n                exportAs: 'matButtonToggle',\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                inputs: ['disableRipple'],\n                host: {\n                    '[class.mat-button-toggle-standalone]': '!buttonToggleGroup',\n                    '[class.mat-button-toggle-checked]': 'checked',\n                    '[class.mat-button-toggle-disabled]': 'disabled',\n                    '[class.mat-button-toggle-appearance-standard]': 'appearance === \"standard\"',\n                    'class': 'mat-button-toggle',\n                    // Clear out the native tabindex here since we forward it to the underlying button\n                    '[attr.tabindex]': 'null',\n                    '[attr.id]': 'id'\n                } }]\n    }], function () { return [{ type: MatButtonToggleGroup, decorators: [{\n                type: Optional\n            }] }, { type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc0.ElementRef }, { type: ɵngcc1.FocusMonitor }, { type: String, decorators: [{\n                type: Attribute,\n                args: ['tabindex']\n            }] }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS]\n            }] }]; }, { ariaLabelledby: [{\n            type: Input,\n            args: ['aria-labelledby']\n        }], change: [{\n            type: Output\n        }], tabIndex: [{\n            type: Input\n        }], appearance: [{\n            type: Input\n        }], checked: [{\n            type: Input\n        }], disabled: [{\n            type: Input\n        }], id: [{\n            type: Input\n        }], name: [{\n            type: Input\n        }], ariaLabel: [{\n            type: Input,\n            args: ['aria-label']\n        }], _buttonElement: [{\n            type: ViewChild,\n            args: ['button']\n        }], value: [{\n            type: Input\n        }] }); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\nclass MatButtonToggleModule {\n}\nMatButtonToggleModule.ɵfac = function MatButtonToggleModule_Factory(t) { return new (t || MatButtonToggleModule)(); };\nMatButtonToggleModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: MatButtonToggleModule });\nMatButtonToggleModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ imports: [[MatCommonModule, MatRippleModule], MatCommonModule] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatButtonToggleModule, [{\n        type: NgModule,\n        args: [{\n                imports: [MatCommonModule, MatRippleModule],\n                exports: [MatCommonModule, MatButtonToggleGroup, MatButtonToggle],\n                declarations: [MatButtonToggleGroup, MatButtonToggle]\n            }]\n    }], null, null); })();\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatButtonToggleModule, { declarations: function () { return [MatButtonToggleGroup, MatButtonToggle]; }, imports: function () { return [MatCommonModule, MatRippleModule]; }, exports: function () { return [MatCommonModule, MatButtonToggleGroup, MatButtonToggle]; } }); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\nexport { MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS, MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR, MatButtonToggleGroupMultiple, MatButtonToggleChange, MatButtonToggleGroup, MatButtonToggleBase, _MatButtonToggleMixinBase, MatButtonToggle, MatButtonToggleModule };\n\n//# sourceMappingURL=button-toggle.js.map"]},"metadata":{},"sourceType":"module"}