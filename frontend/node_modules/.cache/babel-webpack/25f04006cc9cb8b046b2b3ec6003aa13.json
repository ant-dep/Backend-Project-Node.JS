{"ast":null,"code":"import _toConsumableArray from \"/Users/adepertat/Dropbox/ECOLES/Openclassroom/P6_de_Pertat_Antoine/dwj-projet6/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _createForOfIteratorHelper from \"/Users/adepertat/Dropbox/ECOLES/Openclassroom/P6_de_Pertat_Antoine/dwj-projet6/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper\";\nimport _get from \"/Users/adepertat/Dropbox/ECOLES/Openclassroom/P6_de_Pertat_Antoine/dwj-projet6/node_modules/@babel/runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"/Users/adepertat/Dropbox/ECOLES/Openclassroom/P6_de_Pertat_Antoine/dwj-projet6/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _classCallCheck from \"/Users/adepertat/Dropbox/ECOLES/Openclassroom/P6_de_Pertat_Antoine/dwj-projet6/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/adepertat/Dropbox/ECOLES/Openclassroom/P6_de_Pertat_Antoine/dwj-projet6/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/Users/adepertat/Dropbox/ECOLES/Openclassroom/P6_de_Pertat_Antoine/dwj-projet6/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/adepertat/Dropbox/ECOLES/Openclassroom/P6_de_Pertat_Antoine/dwj-projet6/node_modules/@babel/runtime/helpers/esm/createSuper\";\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { ContentChild, Directive, ElementRef, Input, TemplateRef, ChangeDetectionStrategy, Component, IterableDiffers, ViewContainerRef, ViewEncapsulation, Attribute, ChangeDetectorRef, ContentChildren, isDevMode, Optional, ViewChild, Inject, NgModule } from '@angular/core';\nimport { DataSource } from '@angular/cdk/collections';\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/bidi';\nimport * as ɵngcc2 from '@angular/cdk/platform';\nexport { DataSource } from '@angular/cdk/collections';\nimport { DOCUMENT, CommonModule } from '@angular/common';\nimport { BehaviorSubject, Observable, of, Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { Platform } from '@angular/cdk/platform';\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * Mixin to provide a directive with a function that checks if the sticky input has been\n * changed since the last time the function was called. Essentially adds a dirty-check to the\n * sticky value.\n * \\@docs-private\n * @template T\n * @param {?} base\n * @return {?}\n */\n\nfunction mixinHasStickyInput(base) {\n  return /*#__PURE__*/function (_base) {\n    _inherits(_class, _base);\n\n    var _super = _createSuper(_class);\n\n    /**\n     * @param {...?} args\n     */\n    function _class() {\n      var _this;\n\n      _classCallCheck(this, _class);\n\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      _this = _super.call.apply(_super, [this].concat(args));\n      _this._sticky = false;\n      /**\n       * Whether the sticky input has changed since it was last checked.\n       */\n\n      _this._hasStickyChanged = false;\n      return _this;\n    }\n    /**\n     * Whether sticky positioning should be applied.\n     * @return {?}\n     */\n\n\n    _createClass(_class, [{\n      key: \"sticky\",\n      get: function get() {\n        return this._sticky;\n      }\n      /**\n       * @param {?} v\n       * @return {?}\n       */\n      ,\n      set: function set(v) {\n        /** @type {?} */\n        var prevValue = this._sticky;\n        this._sticky = coerceBooleanProperty(v);\n        this._hasStickyChanged = prevValue !== this._sticky;\n      }\n      /**\n       * Whether the sticky value has changed since this was last called.\n       * @return {?}\n       */\n\n    }, {\n      key: \"hasStickyChanged\",\n      value: function hasStickyChanged() {\n        /** @type {?} */\n        var hasStickyChanged = this._hasStickyChanged;\n        this._hasStickyChanged = false;\n        return hasStickyChanged;\n      }\n      /**\n       * Resets the dirty check for cases where the sticky state has been used without checking.\n       * @return {?}\n       */\n\n    }, {\n      key: \"resetStickyChanged\",\n      value: function resetStickyChanged() {\n        this._hasStickyChanged = false;\n      }\n    }]);\n\n    return _class;\n  }(base);\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * Cell definition for a CDK table.\n * Captures the template of a column's data row cell as well as cell-specific properties.\n */\n\n\nvar CdkCellDef =\n/**\n * @param {?} template\n */\nfunction CdkCellDef(template) {\n  _classCallCheck(this, CdkCellDef);\n\n  this.template = template;\n};\n\nCdkCellDef.ɵfac = function CdkCellDef_Factory(t) {\n  return new (t || CdkCellDef)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef));\n};\n\nCdkCellDef.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n  type: CdkCellDef,\n  selectors: [[\"\", \"cdkCellDef\", \"\"]]\n});\n/** @nocollapse */\n\nCdkCellDef.ctorParameters = function () {\n  return [{\n    type: TemplateRef\n  }];\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkCellDef, [{\n    type: Directive,\n    args: [{\n      selector: '[cdkCellDef]'\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.TemplateRef\n    }];\n  }, null);\n})();\n/**\n * Header cell definition for a CDK table.\n * Captures the template of a column's header cell and as well as cell-specific properties.\n */\n\n\nvar CdkHeaderCellDef =\n/**\n * @param {?} template\n */\nfunction CdkHeaderCellDef(template) {\n  _classCallCheck(this, CdkHeaderCellDef);\n\n  this.template = template;\n};\n\nCdkHeaderCellDef.ɵfac = function CdkHeaderCellDef_Factory(t) {\n  return new (t || CdkHeaderCellDef)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef));\n};\n\nCdkHeaderCellDef.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n  type: CdkHeaderCellDef,\n  selectors: [[\"\", \"cdkHeaderCellDef\", \"\"]]\n});\n/** @nocollapse */\n\nCdkHeaderCellDef.ctorParameters = function () {\n  return [{\n    type: TemplateRef\n  }];\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkHeaderCellDef, [{\n    type: Directive,\n    args: [{\n      selector: '[cdkHeaderCellDef]'\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.TemplateRef\n    }];\n  }, null);\n})();\n/**\n * Footer cell definition for a CDK table.\n * Captures the template of a column's footer cell and as well as cell-specific properties.\n */\n\n\nvar CdkFooterCellDef =\n/**\n * @param {?} template\n */\nfunction CdkFooterCellDef(template) {\n  _classCallCheck(this, CdkFooterCellDef);\n\n  this.template = template;\n};\n\nCdkFooterCellDef.ɵfac = function CdkFooterCellDef_Factory(t) {\n  return new (t || CdkFooterCellDef)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef));\n};\n\nCdkFooterCellDef.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n  type: CdkFooterCellDef,\n  selectors: [[\"\", \"cdkFooterCellDef\", \"\"]]\n});\n/** @nocollapse */\n\nCdkFooterCellDef.ctorParameters = function () {\n  return [{\n    type: TemplateRef\n  }];\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkFooterCellDef, [{\n    type: Directive,\n    args: [{\n      selector: '[cdkFooterCellDef]'\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.TemplateRef\n    }];\n  }, null);\n})();\n/**\n * \\@docs-private\n */\n\n\nvar CdkColumnDefBase = function CdkColumnDefBase() {\n  _classCallCheck(this, CdkColumnDefBase);\n};\n/** @type {?} */\n\n\nvar _CdkColumnDefBase = mixinHasStickyInput(CdkColumnDefBase);\n/**\n * Column definition for the CDK table.\n * Defines a set of cells available for a table column.\n */\n\n\nvar CdkColumnDef = /*#__PURE__*/function (_CdkColumnDefBase2) {\n  _inherits(CdkColumnDef, _CdkColumnDefBase2);\n\n  var _super2 = _createSuper(CdkColumnDef);\n\n  function CdkColumnDef() {\n    var _this2;\n\n    _classCallCheck(this, CdkColumnDef);\n\n    _this2 = _super2.apply(this, arguments);\n    _this2._stickyEnd = false;\n    return _this2;\n  }\n  /**\n   * Unique name for this column.\n   * @return {?}\n   */\n\n\n  _createClass(CdkColumnDef, [{\n    key: \"name\",\n    get: function get() {\n      return this._name;\n    }\n    /**\n     * @param {?} name\n     * @return {?}\n     */\n    ,\n    set: function set(name) {\n      // If the directive is set without a name (updated programatically), then this setter will\n      // trigger with an empty string and should not overwrite the programatically set value.\n      if (!name) {\n        return;\n      }\n\n      this._name = name;\n      this.cssClassFriendlyName = name.replace(/[^a-z0-9_-]/ig, '-');\n    }\n    /**\n     * Whether this column should be sticky positioned on the end of the row. Should make sure\n     * that it mimics the `CanStick` mixin such that `_hasStickyChanged` is set to true if the value\n     * has been changed.\n     * @return {?}\n     */\n\n  }, {\n    key: \"stickyEnd\",\n    get: function get() {\n      return this._stickyEnd;\n    }\n    /**\n     * @param {?} v\n     * @return {?}\n     */\n    ,\n    set: function set(v) {\n      /** @type {?} */\n      var prevValue = this._stickyEnd;\n      this._stickyEnd = coerceBooleanProperty(v);\n      this._hasStickyChanged = prevValue !== this._stickyEnd;\n    }\n  }]);\n\n  return CdkColumnDef;\n}(_CdkColumnDefBase);\n\nCdkColumnDef.ɵfac = /*@__PURE__*/function () {\n  var ɵCdkColumnDef_BaseFactory;\n  return function CdkColumnDef_Factory(t) {\n    return (ɵCdkColumnDef_BaseFactory || (ɵCdkColumnDef_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(CdkColumnDef)))(t || CdkColumnDef);\n  };\n}();\n\nCdkColumnDef.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n  type: CdkColumnDef,\n  selectors: [[\"\", \"cdkColumnDef\", \"\"]],\n  contentQueries: function CdkColumnDef_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵcontentQuery(dirIndex, CdkCellDef, 5);\n      ɵngcc0.ɵɵcontentQuery(dirIndex, CdkHeaderCellDef, 5);\n      ɵngcc0.ɵɵcontentQuery(dirIndex, CdkFooterCellDef, 5);\n    }\n\n    if (rf & 2) {\n      var _t;\n\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.cell = _t.first);\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.headerCell = _t.first);\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.footerCell = _t.first);\n    }\n  },\n  inputs: {\n    sticky: \"sticky\",\n    name: [\"cdkColumnDef\", \"name\"],\n    stickyEnd: \"stickyEnd\"\n  },\n  features: [ɵngcc0.ɵɵProvidersFeature([{\n    provide: 'MAT_SORT_HEADER_COLUMN_DEF',\n    useExisting: CdkColumnDef\n  }]), ɵngcc0.ɵɵInheritDefinitionFeature]\n});\nCdkColumnDef.propDecorators = {\n  name: [{\n    type: Input,\n    args: ['cdkColumnDef']\n  }],\n  stickyEnd: [{\n    type: Input,\n    args: ['stickyEnd']\n  }],\n  cell: [{\n    type: ContentChild,\n    args: [CdkCellDef]\n  }],\n  headerCell: [{\n    type: ContentChild,\n    args: [CdkHeaderCellDef]\n  }],\n  footerCell: [{\n    type: ContentChild,\n    args: [CdkFooterCellDef]\n  }]\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkColumnDef, [{\n    type: Directive,\n    args: [{\n      selector: '[cdkColumnDef]',\n      inputs: ['sticky'],\n      providers: [{\n        provide: 'MAT_SORT_HEADER_COLUMN_DEF',\n        useExisting: CdkColumnDef\n      }]\n    }]\n  }], null, {\n    name: [{\n      type: Input,\n      args: ['cdkColumnDef']\n    }],\n    stickyEnd: [{\n      type: Input,\n      args: ['stickyEnd']\n    }],\n    cell: [{\n      type: ContentChild,\n      args: [CdkCellDef]\n    }],\n    headerCell: [{\n      type: ContentChild,\n      args: [CdkHeaderCellDef]\n    }],\n    footerCell: [{\n      type: ContentChild,\n      args: [CdkFooterCellDef]\n    }]\n  });\n})();\n/**\n * Base class for the cells. Adds a CSS classname that identifies the column it renders in.\n */\n\n\nvar BaseCdkCell =\n/**\n * @param {?} columnDef\n * @param {?} elementRef\n */\nfunction BaseCdkCell(columnDef, elementRef) {\n  _classCallCheck(this, BaseCdkCell);\n\n  /** @type {?} */\n  var columnClassName = \"cdk-column-\".concat(columnDef.cssClassFriendlyName);\n  elementRef.nativeElement.classList.add(columnClassName);\n};\n/**\n * Header cell template container that adds the right classes and role.\n */\n\n\nvar CdkHeaderCell = /*#__PURE__*/function (_BaseCdkCell) {\n  _inherits(CdkHeaderCell, _BaseCdkCell);\n\n  var _super3 = _createSuper(CdkHeaderCell);\n\n  /**\n   * @param {?} columnDef\n   * @param {?} elementRef\n   */\n  function CdkHeaderCell(columnDef, elementRef) {\n    _classCallCheck(this, CdkHeaderCell);\n\n    return _super3.call(this, columnDef, elementRef);\n  }\n\n  return CdkHeaderCell;\n}(BaseCdkCell);\n\nCdkHeaderCell.ɵfac = function CdkHeaderCell_Factory(t) {\n  return new (t || CdkHeaderCell)(ɵngcc0.ɵɵdirectiveInject(CdkColumnDef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef));\n};\n\nCdkHeaderCell.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n  type: CdkHeaderCell,\n  selectors: [[\"cdk-header-cell\"], [\"th\", \"cdk-header-cell\", \"\"]],\n  hostAttrs: [\"role\", \"columnheader\", 1, \"cdk-header-cell\"],\n  features: [ɵngcc0.ɵɵInheritDefinitionFeature]\n});\n/** @nocollapse */\n\nCdkHeaderCell.ctorParameters = function () {\n  return [{\n    type: CdkColumnDef\n  }, {\n    type: ElementRef\n  }];\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkHeaderCell, [{\n    type: Directive,\n    args: [{\n      selector: 'cdk-header-cell, th[cdk-header-cell]',\n      host: {\n        'class': 'cdk-header-cell',\n        'role': 'columnheader'\n      }\n    }]\n  }], function () {\n    return [{\n      type: CdkColumnDef\n    }, {\n      type: ɵngcc0.ElementRef\n    }];\n  }, null);\n})();\n/**\n * Footer cell template container that adds the right classes and role.\n */\n\n\nvar CdkFooterCell = /*#__PURE__*/function (_BaseCdkCell2) {\n  _inherits(CdkFooterCell, _BaseCdkCell2);\n\n  var _super4 = _createSuper(CdkFooterCell);\n\n  /**\n   * @param {?} columnDef\n   * @param {?} elementRef\n   */\n  function CdkFooterCell(columnDef, elementRef) {\n    _classCallCheck(this, CdkFooterCell);\n\n    return _super4.call(this, columnDef, elementRef);\n  }\n\n  return CdkFooterCell;\n}(BaseCdkCell);\n\nCdkFooterCell.ɵfac = function CdkFooterCell_Factory(t) {\n  return new (t || CdkFooterCell)(ɵngcc0.ɵɵdirectiveInject(CdkColumnDef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef));\n};\n\nCdkFooterCell.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n  type: CdkFooterCell,\n  selectors: [[\"cdk-footer-cell\"], [\"td\", \"cdk-footer-cell\", \"\"]],\n  hostAttrs: [\"role\", \"gridcell\", 1, \"cdk-footer-cell\"],\n  features: [ɵngcc0.ɵɵInheritDefinitionFeature]\n});\n/** @nocollapse */\n\nCdkFooterCell.ctorParameters = function () {\n  return [{\n    type: CdkColumnDef\n  }, {\n    type: ElementRef\n  }];\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkFooterCell, [{\n    type: Directive,\n    args: [{\n      selector: 'cdk-footer-cell, td[cdk-footer-cell]',\n      host: {\n        'class': 'cdk-footer-cell',\n        'role': 'gridcell'\n      }\n    }]\n  }], function () {\n    return [{\n      type: CdkColumnDef\n    }, {\n      type: ɵngcc0.ElementRef\n    }];\n  }, null);\n})();\n/**\n * Cell template container that adds the right classes and role.\n */\n\n\nvar CdkCell = /*#__PURE__*/function (_BaseCdkCell3) {\n  _inherits(CdkCell, _BaseCdkCell3);\n\n  var _super5 = _createSuper(CdkCell);\n\n  /**\n   * @param {?} columnDef\n   * @param {?} elementRef\n   */\n  function CdkCell(columnDef, elementRef) {\n    _classCallCheck(this, CdkCell);\n\n    return _super5.call(this, columnDef, elementRef);\n  }\n\n  return CdkCell;\n}(BaseCdkCell);\n\nCdkCell.ɵfac = function CdkCell_Factory(t) {\n  return new (t || CdkCell)(ɵngcc0.ɵɵdirectiveInject(CdkColumnDef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef));\n};\n\nCdkCell.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n  type: CdkCell,\n  selectors: [[\"cdk-cell\"], [\"td\", \"cdk-cell\", \"\"]],\n  hostAttrs: [\"role\", \"gridcell\", 1, \"cdk-cell\"],\n  features: [ɵngcc0.ɵɵInheritDefinitionFeature]\n});\n/** @nocollapse */\n\nCdkCell.ctorParameters = function () {\n  return [{\n    type: CdkColumnDef\n  }, {\n    type: ElementRef\n  }];\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkCell, [{\n    type: Directive,\n    args: [{\n      selector: 'cdk-cell, td[cdk-cell]',\n      host: {\n        'class': 'cdk-cell',\n        'role': 'gridcell'\n      }\n    }]\n  }], function () {\n    return [{\n      type: CdkColumnDef\n    }, {\n      type: ɵngcc0.ElementRef\n    }];\n  }, null);\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/** *\n * The row template that can be used by the mat-table. Should not be used outside of the\n * material library.\n  @type {?} */\n\n\nvar CDK_ROW_TEMPLATE = \"<ng-container cdkCellOutlet></ng-container>\";\n/**\n * Base class for the CdkHeaderRowDef and CdkRowDef that handles checking their columns inputs\n * for changes and notifying the table.\n * @abstract\n */\n\nvar BaseRowDef = /*#__PURE__*/function () {\n  /**\n   * @param {?} template\n   * @param {?} _differs\n   */\n  function BaseRowDef(template, _differs) {\n    _classCallCheck(this, BaseRowDef);\n\n    this.template = template;\n    this._differs = _differs;\n  }\n  /**\n   * @param {?} changes\n   * @return {?}\n   */\n\n\n  _createClass(BaseRowDef, [{\n    key: \"ngOnChanges\",\n    value: function ngOnChanges(changes) {\n      // Create a new columns differ if one does not yet exist. Initialize it based on initial value\n      // of the columns property or an empty array if none is provided.\n      if (!this._columnsDiffer) {\n        /** @type {?} */\n        var columns = changes['columns'] && changes['columns'].currentValue || [];\n        this._columnsDiffer = this._differs.find(columns).create();\n\n        this._columnsDiffer.diff(columns);\n      }\n    }\n    /**\n     * Returns the difference between the current columns and the columns from the last diff, or null\n     * if there is no difference.\n     * @return {?}\n     */\n\n  }, {\n    key: \"getColumnsDiff\",\n    value: function getColumnsDiff() {\n      return this._columnsDiffer.diff(this.columns);\n    }\n    /**\n     * Gets this row def's relevant cell template from the provided column def.\n     * @param {?} column\n     * @return {?}\n     */\n\n  }, {\n    key: \"extractCellTemplate\",\n    value: function extractCellTemplate(column) {\n      if (this instanceof CdkHeaderRowDef) {\n        return column.headerCell.template;\n      }\n\n      if (this instanceof CdkFooterRowDef) {\n        return column.footerCell.template;\n      } else {\n        return column.cell.template;\n      }\n    }\n  }]);\n\n  return BaseRowDef;\n}();\n\nBaseRowDef.ɵfac = function BaseRowDef_Factory(t) {\n  ɵngcc0.ɵɵinvalidFactory();\n};\n\nBaseRowDef.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n  type: BaseRowDef,\n  features: [ɵngcc0.ɵɵNgOnChangesFeature]\n});\n/**\n * \\@docs-private\n */\n\nvar CdkHeaderRowDefBase = /*#__PURE__*/function (_BaseRowDef) {\n  _inherits(CdkHeaderRowDefBase, _BaseRowDef);\n\n  var _super6 = _createSuper(CdkHeaderRowDefBase);\n\n  function CdkHeaderRowDefBase() {\n    _classCallCheck(this, CdkHeaderRowDefBase);\n\n    return _super6.apply(this, arguments);\n  }\n\n  return CdkHeaderRowDefBase;\n}(BaseRowDef);\n/** @type {?} */\n\n\nvar _CdkHeaderRowDefBase = mixinHasStickyInput(CdkHeaderRowDefBase);\n/**\n * Header row definition for the CDK table.\n * Captures the header row's template and other header properties such as the columns to display.\n */\n\n\nvar CdkHeaderRowDef = /*#__PURE__*/function (_CdkHeaderRowDefBase2) {\n  _inherits(CdkHeaderRowDef, _CdkHeaderRowDefBase2);\n\n  var _super7 = _createSuper(CdkHeaderRowDef);\n\n  /**\n   * @param {?} template\n   * @param {?} _differs\n   */\n  function CdkHeaderRowDef(template, _differs) {\n    _classCallCheck(this, CdkHeaderRowDef);\n\n    return _super7.call(this, template, _differs);\n  }\n  /**\n   * @param {?} changes\n   * @return {?}\n   */\n\n\n  _createClass(CdkHeaderRowDef, [{\n    key: \"ngOnChanges\",\n    value: function ngOnChanges(changes) {\n      _get(_getPrototypeOf(CdkHeaderRowDef.prototype), \"ngOnChanges\", this).call(this, changes);\n    }\n  }]);\n\n  return CdkHeaderRowDef;\n}(_CdkHeaderRowDefBase);\n\nCdkHeaderRowDef.ɵfac = function CdkHeaderRowDef_Factory(t) {\n  return new (t || CdkHeaderRowDef)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.IterableDiffers));\n};\n\nCdkHeaderRowDef.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n  type: CdkHeaderRowDef,\n  selectors: [[\"\", \"cdkHeaderRowDef\", \"\"]],\n  inputs: {\n    columns: [\"cdkHeaderRowDef\", \"columns\"],\n    sticky: [\"cdkHeaderRowDefSticky\", \"sticky\"]\n  },\n  features: [ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature]\n});\n/** @nocollapse */\n\nCdkHeaderRowDef.ctorParameters = function () {\n  return [{\n    type: TemplateRef\n  }, {\n    type: IterableDiffers\n  }];\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkHeaderRowDef, [{\n    type: Directive,\n    args: [{\n      selector: '[cdkHeaderRowDef]',\n      inputs: ['columns: cdkHeaderRowDef', 'sticky: cdkHeaderRowDefSticky']\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.TemplateRef\n    }, {\n      type: ɵngcc0.IterableDiffers\n    }];\n  }, null);\n})();\n/**\n * \\@docs-private\n */\n\n\nvar CdkFooterRowDefBase = /*#__PURE__*/function (_BaseRowDef2) {\n  _inherits(CdkFooterRowDefBase, _BaseRowDef2);\n\n  var _super8 = _createSuper(CdkFooterRowDefBase);\n\n  function CdkFooterRowDefBase() {\n    _classCallCheck(this, CdkFooterRowDefBase);\n\n    return _super8.apply(this, arguments);\n  }\n\n  return CdkFooterRowDefBase;\n}(BaseRowDef);\n/** @type {?} */\n\n\nvar _CdkFooterRowDefBase = mixinHasStickyInput(CdkFooterRowDefBase);\n/**\n * Footer row definition for the CDK table.\n * Captures the footer row's template and other footer properties such as the columns to display.\n */\n\n\nvar CdkFooterRowDef = /*#__PURE__*/function (_CdkFooterRowDefBase2) {\n  _inherits(CdkFooterRowDef, _CdkFooterRowDefBase2);\n\n  var _super9 = _createSuper(CdkFooterRowDef);\n\n  /**\n   * @param {?} template\n   * @param {?} _differs\n   */\n  function CdkFooterRowDef(template, _differs) {\n    _classCallCheck(this, CdkFooterRowDef);\n\n    return _super9.call(this, template, _differs);\n  }\n  /**\n   * @param {?} changes\n   * @return {?}\n   */\n\n\n  _createClass(CdkFooterRowDef, [{\n    key: \"ngOnChanges\",\n    value: function ngOnChanges(changes) {\n      _get(_getPrototypeOf(CdkFooterRowDef.prototype), \"ngOnChanges\", this).call(this, changes);\n    }\n  }]);\n\n  return CdkFooterRowDef;\n}(_CdkFooterRowDefBase);\n\nCdkFooterRowDef.ɵfac = function CdkFooterRowDef_Factory(t) {\n  return new (t || CdkFooterRowDef)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.IterableDiffers));\n};\n\nCdkFooterRowDef.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n  type: CdkFooterRowDef,\n  selectors: [[\"\", \"cdkFooterRowDef\", \"\"]],\n  inputs: {\n    columns: [\"cdkFooterRowDef\", \"columns\"],\n    sticky: [\"cdkFooterRowDefSticky\", \"sticky\"]\n  },\n  features: [ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature]\n});\n/** @nocollapse */\n\nCdkFooterRowDef.ctorParameters = function () {\n  return [{\n    type: TemplateRef\n  }, {\n    type: IterableDiffers\n  }];\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkFooterRowDef, [{\n    type: Directive,\n    args: [{\n      selector: '[cdkFooterRowDef]',\n      inputs: ['columns: cdkFooterRowDef', 'sticky: cdkFooterRowDefSticky']\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.TemplateRef\n    }, {\n      type: ɵngcc0.IterableDiffers\n    }];\n  }, null);\n})();\n/**\n * Data row definition for the CDK table.\n * Captures the header row's template and other row properties such as the columns to display and\n * a when predicate that describes when this row should be used.\n * @template T\n */\n\n\nvar CdkRowDef = /*#__PURE__*/function (_BaseRowDef3) {\n  _inherits(CdkRowDef, _BaseRowDef3);\n\n  var _super10 = _createSuper(CdkRowDef);\n\n  /**\n   * @param {?} template\n   * @param {?} _differs\n   */\n  function CdkRowDef(template, _differs) {\n    _classCallCheck(this, CdkRowDef);\n\n    return _super10.call(this, template, _differs);\n  }\n\n  return CdkRowDef;\n}(BaseRowDef);\n\nCdkRowDef.ɵfac = function CdkRowDef_Factory(t) {\n  return new (t || CdkRowDef)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.IterableDiffers));\n};\n\nCdkRowDef.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n  type: CdkRowDef,\n  selectors: [[\"\", \"cdkRowDef\", \"\"]],\n  inputs: {\n    columns: [\"cdkRowDefColumns\", \"columns\"],\n    when: [\"cdkRowDefWhen\", \"when\"]\n  },\n  features: [ɵngcc0.ɵɵInheritDefinitionFeature]\n});\n/** @nocollapse */\n\nCdkRowDef.ctorParameters = function () {\n  return [{\n    type: TemplateRef\n  }, {\n    type: IterableDiffers\n  }];\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkRowDef, [{\n    type: Directive,\n    args: [{\n      selector: '[cdkRowDef]',\n      inputs: ['columns: cdkRowDefColumns', 'when: cdkRowDefWhen']\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.TemplateRef\n    }, {\n      type: ɵngcc0.IterableDiffers\n    }];\n  }, null);\n})();\n/**\n * Outlet for rendering cells inside of a row or header row.\n * \\@docs-private\n */\n\n\nvar CdkCellOutlet = /*#__PURE__*/function () {\n  /**\n   * @param {?} _viewContainer\n   */\n  function CdkCellOutlet(_viewContainer) {\n    _classCallCheck(this, CdkCellOutlet);\n\n    this._viewContainer = _viewContainer;\n    CdkCellOutlet.mostRecentCellOutlet = this;\n  }\n  /**\n   * @return {?}\n   */\n\n\n  _createClass(CdkCellOutlet, [{\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      // If this was the last outlet being rendered in the view, remove the reference\n      // from the static property after it has been destroyed to avoid leaking memory.\n      if (CdkCellOutlet.mostRecentCellOutlet === this) {\n        CdkCellOutlet.mostRecentCellOutlet = null;\n      }\n    }\n  }]);\n\n  return CdkCellOutlet;\n}();\n\nCdkCellOutlet.ɵfac = function CdkCellOutlet_Factory(t) {\n  return new (t || CdkCellOutlet)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef));\n};\n\nCdkCellOutlet.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n  type: CdkCellOutlet,\n  selectors: [[\"\", \"cdkCellOutlet\", \"\"]]\n});\n/**\n * Static property containing the latest constructed instance of this class.\n * Used by the CDK table when each CdkHeaderRow and CdkRow component is created using\n * createEmbeddedView. After one of these components are created, this property will provide\n * a handle to provide that component's cells and context. After init, the CdkCellOutlet will\n * construct the cells with the provided context.\n */\n\nCdkCellOutlet.mostRecentCellOutlet = null;\n/** @nocollapse */\n\nCdkCellOutlet.ctorParameters = function () {\n  return [{\n    type: ViewContainerRef\n  }];\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkCellOutlet, [{\n    type: Directive,\n    args: [{\n      selector: '[cdkCellOutlet]'\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ViewContainerRef\n    }];\n  }, null);\n})();\n/**\n * Header template container that contains the cell outlet. Adds the right class and role.\n */\n\n\nvar CdkHeaderRow = function CdkHeaderRow() {\n  _classCallCheck(this, CdkHeaderRow);\n};\n\nCdkHeaderRow.ɵfac = function CdkHeaderRow_Factory(t) {\n  return new (t || CdkHeaderRow)();\n};\n\nCdkHeaderRow.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n  type: CdkHeaderRow,\n  selectors: [[\"cdk-header-row\"], [\"tr\", \"cdk-header-row\", \"\"]],\n  hostAttrs: [\"role\", \"row\", 1, \"cdk-header-row\"],\n  decls: 1,\n  vars: 0,\n  consts: [[\"cdkCellOutlet\", \"\"]],\n  template: function CdkHeaderRow_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵelementContainer(0, 0);\n    }\n  },\n  directives: [CdkCellOutlet],\n  encapsulation: 2,\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkHeaderRow, [{\n    type: Component,\n    args: [{\n      selector: 'cdk-header-row, tr[cdk-header-row]',\n      template: CDK_ROW_TEMPLATE,\n      host: {\n        'class': 'cdk-header-row',\n        'role': 'row'\n      },\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      encapsulation: ViewEncapsulation.None\n    }]\n  }], null, null);\n})();\n/**\n * Footer template container that contains the cell outlet. Adds the right class and role.\n */\n\n\nvar CdkFooterRow = function CdkFooterRow() {\n  _classCallCheck(this, CdkFooterRow);\n};\n\nCdkFooterRow.ɵfac = function CdkFooterRow_Factory(t) {\n  return new (t || CdkFooterRow)();\n};\n\nCdkFooterRow.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n  type: CdkFooterRow,\n  selectors: [[\"cdk-footer-row\"], [\"tr\", \"cdk-footer-row\", \"\"]],\n  hostAttrs: [\"role\", \"row\", 1, \"cdk-footer-row\"],\n  decls: 1,\n  vars: 0,\n  consts: [[\"cdkCellOutlet\", \"\"]],\n  template: function CdkFooterRow_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵelementContainer(0, 0);\n    }\n  },\n  directives: [CdkCellOutlet],\n  encapsulation: 2,\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkFooterRow, [{\n    type: Component,\n    args: [{\n      selector: 'cdk-footer-row, tr[cdk-footer-row]',\n      template: CDK_ROW_TEMPLATE,\n      host: {\n        'class': 'cdk-footer-row',\n        'role': 'row'\n      },\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      encapsulation: ViewEncapsulation.None\n    }]\n  }], null, null);\n})();\n/**\n * Data row template container that contains the cell outlet. Adds the right class and role.\n */\n\n\nvar CdkRow = function CdkRow() {\n  _classCallCheck(this, CdkRow);\n};\n\nCdkRow.ɵfac = function CdkRow_Factory(t) {\n  return new (t || CdkRow)();\n};\n\nCdkRow.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n  type: CdkRow,\n  selectors: [[\"cdk-row\"], [\"tr\", \"cdk-row\", \"\"]],\n  hostAttrs: [\"role\", \"row\", 1, \"cdk-row\"],\n  decls: 1,\n  vars: 0,\n  consts: [[\"cdkCellOutlet\", \"\"]],\n  template: function CdkRow_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵelementContainer(0, 0);\n    }\n  },\n  directives: [CdkCellOutlet],\n  encapsulation: 2,\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkRow, [{\n    type: Component,\n    args: [{\n      selector: 'cdk-row, tr[cdk-row]',\n      template: CDK_ROW_TEMPLATE,\n      host: {\n        'class': 'cdk-row',\n        'role': 'row'\n      },\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      encapsulation: ViewEncapsulation.None\n    }]\n  }], null, null);\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * Returns an error to be thrown when attempting to find an unexisting column.\n * \\@docs-private\n * @param {?} id Id whose lookup failed.\n * @return {?}\n */\n\n\nfunction getTableUnknownColumnError(id) {\n  return Error(\"Could not find column with id \\\"\".concat(id, \"\\\".\"));\n}\n/**\n * Returns an error to be thrown when two column definitions have the same name.\n * \\@docs-private\n * @param {?} name\n * @return {?}\n */\n\n\nfunction getTableDuplicateColumnNameError(name) {\n  return Error(\"Duplicate column definition name provided: \\\"\".concat(name, \"\\\".\"));\n}\n/**\n * Returns an error to be thrown when there are multiple rows that are missing a when function.\n * \\@docs-private\n * @return {?}\n */\n\n\nfunction getTableMultipleDefaultRowDefsError() {\n  return Error(\"There can only be one default row without a when predicate function.\");\n}\n/**\n * Returns an error to be thrown when there are no matching row defs for a particular set of data.\n * \\@docs-private\n * @param {?} data\n * @return {?}\n */\n\n\nfunction getTableMissingMatchingRowDefError(data) {\n  return Error(\"Could not find a matching row definition for the\" + \"provided row data: \".concat(JSON.stringify(data)));\n}\n/**\n * Returns an error to be thrown when there is no row definitions present in the content.\n * \\@docs-private\n * @return {?}\n */\n\n\nfunction getTableMissingRowDefsError() {\n  return Error('Missing definitions for header, footer, and row; ' + 'cannot determine which columns should be rendered.');\n}\n/**\n * Returns an error to be thrown when the data source does not match the compatible types.\n * \\@docs-private\n * @return {?}\n */\n\n\nfunction getTableUnknownDataSourceError() {\n  return Error(\"Provided data source did not match an array, Observable, or DataSource\");\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/** *\n * List of all possible directions that can be used for sticky positioning.\n * \\@docs-private\n  @type {?} */\n\n\nvar STICKY_DIRECTIONS = ['top', 'bottom', 'left', 'right'];\n/**\n * Applies and removes sticky positioning styles to the `CdkTable` rows and columns cells.\n * \\@docs-private\n */\n\nvar StickyStyler = /*#__PURE__*/function () {\n  /**\n   * @param {?} isNativeHtmlTable Whether the sticky logic should be based on a table\n   *     that uses the native `<table>` element.\n   * @param {?} stickCellCss The CSS class that will be applied to every row/cell that has\n   *     sticky positioning applied.\n   * @param {?} direction The directionality context of the table (ltr/rtl); affects column positioning\n   *     by reversing left/right positions.\n   * @param {?=} _isBrowser Whether the table is currently being rendered on the server or the client.\n   */\n  function StickyStyler(isNativeHtmlTable, stickCellCss, direction) {\n    var _isBrowser = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;\n\n    _classCallCheck(this, StickyStyler);\n\n    this.isNativeHtmlTable = isNativeHtmlTable;\n    this.stickCellCss = stickCellCss;\n    this.direction = direction;\n    this._isBrowser = _isBrowser;\n  }\n  /**\n   * Clears the sticky positioning styles from the row and its cells by resetting the `position`\n   * style, setting the zIndex to 0, and unsetting each provided sticky direction.\n   * @param {?} rows The list of rows that should be cleared from sticking in the provided directions\n   * @param {?} stickyDirections The directions that should no longer be set as sticky on the rows.\n   * @return {?}\n   */\n\n\n  _createClass(StickyStyler, [{\n    key: \"clearStickyPositioning\",\n    value: function clearStickyPositioning(rows, stickyDirections) {\n      var _iterator = _createForOfIteratorHelper(rows),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var row = _step.value;\n\n          // If the row isn't an element (e.g. if it's an `ng-container`),\n          // it won't have inline styles or `children` so we skip it.\n          if (row.nodeType !== row.ELEMENT_NODE) {\n            continue;\n          }\n\n          this._removeStickyStyle(row, stickyDirections);\n\n          for (var i = 0; i < row.children.length; i++) {\n            /** @type {?} */\n            var cell =\n            /** @type {?} */\n            row.children[i];\n\n            this._removeStickyStyle(cell, stickyDirections);\n          }\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n    }\n    /**\n     * Applies sticky left and right positions to the cells of each row according to the sticky\n     * states of the rendered column definitions.\n     * @param {?} rows The rows that should have its set of cells stuck according to the sticky states.\n     * @param {?} stickyStartStates A list of boolean states where each state represents whether the cell\n     *     in this index position should be stuck to the start of the row.\n     * @param {?} stickyEndStates A list of boolean states where each state represents whether the cell\n     *     in this index position should be stuck to the end of the row.\n     * @return {?}\n     */\n\n  }, {\n    key: \"updateStickyColumns\",\n    value: function updateStickyColumns(rows, stickyStartStates, stickyEndStates) {\n      /** @type {?} */\n      var hasStickyColumns = stickyStartStates.some(function (state) {\n        return state;\n      }) || stickyEndStates.some(function (state) {\n        return state;\n      });\n\n      if (!rows.length || !hasStickyColumns || !this._isBrowser) {\n        return;\n      }\n      /** @type {?} */\n\n\n      var firstRow = rows[0];\n      /** @type {?} */\n\n      var numCells = firstRow.children.length;\n      /** @type {?} */\n\n      var cellWidths = this._getCellWidths(firstRow);\n      /** @type {?} */\n\n\n      var startPositions = this._getStickyStartColumnPositions(cellWidths, stickyStartStates);\n      /** @type {?} */\n\n\n      var endPositions = this._getStickyEndColumnPositions(cellWidths, stickyEndStates);\n      /** @type {?} */\n\n\n      var isRtl = this.direction === 'rtl';\n\n      var _iterator2 = _createForOfIteratorHelper(rows),\n          _step2;\n\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var row = _step2.value;\n\n          for (var i = 0; i < numCells; i++) {\n            /** @type {?} */\n            var cell =\n            /** @type {?} */\n            row.children[i];\n\n            if (stickyStartStates[i]) {\n              this._addStickyStyle(cell, isRtl ? 'right' : 'left', startPositions[i]);\n            }\n\n            if (stickyEndStates[i]) {\n              this._addStickyStyle(cell, isRtl ? 'left' : 'right', endPositions[i]);\n            }\n          }\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n    }\n    /**\n     * Applies sticky positioning to the row's cells if using the native table layout, and to the\n     * row itself otherwise.\n     * @param {?} rowsToStick The list of rows that should be stuck according to their corresponding\n     *     sticky state and to the provided top or bottom position.\n     * @param {?} stickyStates A list of boolean states where each state represents whether the row\n     *     should be stuck in the particular top or bottom position.\n     * @param {?} position The position direction in which the row should be stuck if that row should be\n     *     sticky.\n     *\n     * @return {?}\n     */\n\n  }, {\n    key: \"stickRows\",\n    value: function stickRows(rowsToStick, stickyStates, position) {\n      // Since we can't measure the rows on the server, we can't stick the rows properly.\n      if (!this._isBrowser) {\n        return;\n      }\n      /** @type {?} */\n\n\n      var rows = position === 'bottom' ? rowsToStick.reverse() : rowsToStick;\n      /** @type {?} */\n\n      var stickyHeight = 0;\n\n      for (var rowIndex = 0; rowIndex < rows.length; rowIndex++) {\n        if (!stickyStates[rowIndex]) {\n          continue;\n        }\n        /** @type {?} */\n\n\n        var row = rows[rowIndex];\n\n        if (this.isNativeHtmlTable) {\n          for (var j = 0; j < row.children.length; j++) {\n            /** @type {?} */\n            var cell =\n            /** @type {?} */\n            row.children[j];\n\n            this._addStickyStyle(cell, position, stickyHeight);\n          }\n        } else {\n          // Flex does not respect the stick positioning on the cells, needs to be applied to the row.\n          // If this is applied on a native table, Safari causes the header to fly in wrong direction.\n          this._addStickyStyle(row, position, stickyHeight);\n        }\n\n        if (rowIndex === rows.length - 1) {\n          // prevent unnecessary reflow from getBoundingClientRect()\n          return;\n        }\n\n        stickyHeight += row.getBoundingClientRect().height;\n      }\n    }\n    /**\n     * When using the native table in Safari, sticky footer cells do not stick. The only way to stick\n     * footer rows is to apply sticky styling to the tfoot container. This should only be done if\n     * all footer rows are sticky. If not all footer rows are sticky, remove sticky positioning from\n     * the tfoot element.\n     * @param {?} tableElement\n     * @param {?} stickyStates\n     * @return {?}\n     */\n\n  }, {\n    key: \"updateStickyFooterContainer\",\n    value: function updateStickyFooterContainer(tableElement, stickyStates) {\n      if (!this.isNativeHtmlTable) {\n        return;\n      }\n      /** @type {?} */\n\n\n      var tfoot =\n      /** @type {?} */\n      tableElement.querySelector('tfoot');\n\n      if (stickyStates.some(function (state) {\n        return !state;\n      })) {\n        this._removeStickyStyle(tfoot, ['bottom']);\n      } else {\n        this._addStickyStyle(tfoot, 'bottom', 0);\n      }\n    }\n    /**\n     * Removes the sticky style on the element by removing the sticky cell CSS class, re-evaluating\n     * the zIndex, removing each of the provided sticky directions, and removing the\n     * sticky position if there are no more directions.\n     * @param {?} element\n     * @param {?} stickyDirections\n     * @return {?}\n     */\n\n  }, {\n    key: \"_removeStickyStyle\",\n    value: function _removeStickyStyle(element, stickyDirections) {\n      var _iterator3 = _createForOfIteratorHelper(stickyDirections),\n          _step3;\n\n      try {\n        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n          var dir = _step3.value;\n          element.style[dir] = '';\n        }\n      } catch (err) {\n        _iterator3.e(err);\n      } finally {\n        _iterator3.f();\n      }\n\n      element.style.zIndex = this._getCalculatedZIndex(element);\n      /** @type {?} */\n\n      var hasDirection = STICKY_DIRECTIONS.some(function (dir) {\n        return !!element.style[dir];\n      });\n\n      if (!hasDirection) {\n        element.style.position = '';\n        element.classList.remove(this.stickCellCss);\n      }\n    }\n    /**\n     * Adds the sticky styling to the element by adding the sticky style class, changing position\n     * to be sticky (and -webkit-sticky), setting the appropriate zIndex, and adding a sticky\n     * direction and value.\n     * @param {?} element\n     * @param {?} dir\n     * @param {?} dirValue\n     * @return {?}\n     */\n\n  }, {\n    key: \"_addStickyStyle\",\n    value: function _addStickyStyle(element, dir, dirValue) {\n      element.classList.add(this.stickCellCss);\n      element.style[dir] = \"\".concat(dirValue, \"px\");\n      element.style.cssText += 'position: -webkit-sticky; position: sticky; ';\n      element.style.zIndex = this._getCalculatedZIndex(element);\n    }\n    /**\n     * Calculate what the z-index should be for the element, depending on what directions (top,\n     * bottom, left, right) have been set. It should be true that elements with a top direction\n     * should have the highest index since these are elements like a table header. If any of those\n     * elements are also sticky in another direction, then they should appear above other elements\n     * that are only sticky top (e.g. a sticky column on a sticky header). Bottom-sticky elements\n     * (e.g. footer rows) should then be next in the ordering such that they are below the header\n     * but above any non-sticky elements. Finally, left/right sticky elements (e.g. sticky columns)\n     * should minimally increment so that they are above non-sticky elements but below top and bottom\n     * elements.\n     * @param {?} element\n     * @return {?}\n     */\n\n  }, {\n    key: \"_getCalculatedZIndex\",\n    value: function _getCalculatedZIndex(element) {\n      /** @type {?} */\n      var zIndexIncrements = {\n        top: 100,\n        bottom: 10,\n        left: 1,\n        right: 1\n      };\n      /** @type {?} */\n\n      var zIndex = 0;\n\n      var _iterator4 = _createForOfIteratorHelper(STICKY_DIRECTIONS),\n          _step4;\n\n      try {\n        for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n          var dir = _step4.value;\n\n          if (element.style[dir]) {\n            zIndex += zIndexIncrements[dir];\n          }\n        }\n      } catch (err) {\n        _iterator4.e(err);\n      } finally {\n        _iterator4.f();\n      }\n\n      return zIndex ? \"\".concat(zIndex) : '';\n    }\n    /**\n     * Gets the widths for each cell in the provided row.\n     * @param {?} row\n     * @return {?}\n     */\n\n  }, {\n    key: \"_getCellWidths\",\n    value: function _getCellWidths(row) {\n      /** @type {?} */\n      var cellWidths = [];\n      /** @type {?} */\n\n      var firstRowCells = row.children;\n\n      for (var i = 0; i < firstRowCells.length; i++) {\n        /** @type {?} */\n        var cell =\n        /** @type {?} */\n        firstRowCells[i];\n        cellWidths.push(cell.getBoundingClientRect().width);\n      }\n\n      return cellWidths;\n    }\n    /**\n     * Determines the left and right positions of each sticky column cell, which will be the\n     * accumulation of all sticky column cell widths to the left and right, respectively.\n     * Non-sticky cells do not need to have a value set since their positions will not be applied.\n     * @param {?} widths\n     * @param {?} stickyStates\n     * @return {?}\n     */\n\n  }, {\n    key: \"_getStickyStartColumnPositions\",\n    value: function _getStickyStartColumnPositions(widths, stickyStates) {\n      /** @type {?} */\n      var positions = [];\n      /** @type {?} */\n\n      var nextPosition = 0;\n\n      for (var i = 0; i < widths.length; i++) {\n        if (stickyStates[i]) {\n          positions[i] = nextPosition;\n          nextPosition += widths[i];\n        }\n      }\n\n      return positions;\n    }\n    /**\n     * Determines the left and right positions of each sticky column cell, which will be the\n     * accumulation of all sticky column cell widths to the left and right, respectively.\n     * Non-sticky cells do not need to have a value set since their positions will not be applied.\n     * @param {?} widths\n     * @param {?} stickyStates\n     * @return {?}\n     */\n\n  }, {\n    key: \"_getStickyEndColumnPositions\",\n    value: function _getStickyEndColumnPositions(widths, stickyStates) {\n      /** @type {?} */\n      var positions = [];\n      /** @type {?} */\n\n      var nextPosition = 0;\n\n      for (var i = widths.length; i > 0; i--) {\n        if (stickyStates[i]) {\n          positions[i] = nextPosition;\n          nextPosition += widths[i];\n        }\n      }\n\n      return positions;\n    }\n  }]);\n\n  return StickyStyler;\n}();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * Provides a handle for the table to grab the view container's ng-container to insert data rows.\n * \\@docs-private\n */\n\n\nvar DataRowOutlet =\n/**\n * @param {?} viewContainer\n * @param {?} elementRef\n */\nfunction DataRowOutlet(viewContainer, elementRef) {\n  _classCallCheck(this, DataRowOutlet);\n\n  this.viewContainer = viewContainer;\n  this.elementRef = elementRef;\n};\n\nDataRowOutlet.ɵfac = function DataRowOutlet_Factory(t) {\n  return new (t || DataRowOutlet)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef));\n};\n\nDataRowOutlet.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n  type: DataRowOutlet,\n  selectors: [[\"\", \"rowOutlet\", \"\"]]\n});\n/** @nocollapse */\n\nDataRowOutlet.ctorParameters = function () {\n  return [{\n    type: ViewContainerRef\n  }, {\n    type: ElementRef\n  }];\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DataRowOutlet, [{\n    type: Directive,\n    args: [{\n      selector: '[rowOutlet]'\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ViewContainerRef\n    }, {\n      type: ɵngcc0.ElementRef\n    }];\n  }, null);\n})();\n/**\n * Provides a handle for the table to grab the view container's ng-container to insert the header.\n * \\@docs-private\n */\n\n\nvar HeaderRowOutlet =\n/**\n * @param {?} viewContainer\n * @param {?} elementRef\n */\nfunction HeaderRowOutlet(viewContainer, elementRef) {\n  _classCallCheck(this, HeaderRowOutlet);\n\n  this.viewContainer = viewContainer;\n  this.elementRef = elementRef;\n};\n\nHeaderRowOutlet.ɵfac = function HeaderRowOutlet_Factory(t) {\n  return new (t || HeaderRowOutlet)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef));\n};\n\nHeaderRowOutlet.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n  type: HeaderRowOutlet,\n  selectors: [[\"\", \"headerRowOutlet\", \"\"]]\n});\n/** @nocollapse */\n\nHeaderRowOutlet.ctorParameters = function () {\n  return [{\n    type: ViewContainerRef\n  }, {\n    type: ElementRef\n  }];\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(HeaderRowOutlet, [{\n    type: Directive,\n    args: [{\n      selector: '[headerRowOutlet]'\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ViewContainerRef\n    }, {\n      type: ɵngcc0.ElementRef\n    }];\n  }, null);\n})();\n/**\n * Provides a handle for the table to grab the view container's ng-container to insert the footer.\n * \\@docs-private\n */\n\n\nvar FooterRowOutlet =\n/**\n * @param {?} viewContainer\n * @param {?} elementRef\n */\nfunction FooterRowOutlet(viewContainer, elementRef) {\n  _classCallCheck(this, FooterRowOutlet);\n\n  this.viewContainer = viewContainer;\n  this.elementRef = elementRef;\n};\n\nFooterRowOutlet.ɵfac = function FooterRowOutlet_Factory(t) {\n  return new (t || FooterRowOutlet)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef));\n};\n\nFooterRowOutlet.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n  type: FooterRowOutlet,\n  selectors: [[\"\", \"footerRowOutlet\", \"\"]]\n});\n/** @nocollapse */\n\nFooterRowOutlet.ctorParameters = function () {\n  return [{\n    type: ViewContainerRef\n  }, {\n    type: ElementRef\n  }];\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(FooterRowOutlet, [{\n    type: Directive,\n    args: [{\n      selector: '[footerRowOutlet]'\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ViewContainerRef\n    }, {\n      type: ɵngcc0.ElementRef\n    }];\n  }, null);\n})();\n/** *\n * The table template that can be used by the mat-table. Should not be used outside of the\n * material library.\n * \\@docs-private\n  @type {?} */\n\n\nvar CDK_TABLE_TEMPLATE = \"\\n  <ng-container headerRowOutlet></ng-container>\\n  <ng-container rowOutlet></ng-container>\\n  <ng-container footerRowOutlet></ng-container>\";\n/**\n * A data table that can render a header row, data rows, and a footer row.\n * Uses the dataSource input to determine the data to be rendered. The data can be provided either\n * as a data array, an Observable stream that emits the data array to render, or a DataSource with a\n * connect function that will return an Observable stream that emits the data array to render.\n * @template T\n */\n\nvar CdkTable = /*#__PURE__*/function () {\n  /**\n   * @param {?} _differs\n   * @param {?} _changeDetectorRef\n   * @param {?} _elementRef\n   * @param {?} role\n   * @param {?} _dir\n   * @param {?=} _document\n   * @param {?=} _platform\n   */\n  function CdkTable(_differs, _changeDetectorRef, _elementRef, role, _dir,\n  /**\n  * @deprecated\n  * @breaking-change 8.0.0 `_document` and `_platform` to\n  *    be made into a required parameters.\n  */\n  _document, _platform) {\n    _classCallCheck(this, CdkTable);\n\n    this._differs = _differs;\n    this._changeDetectorRef = _changeDetectorRef;\n    this._elementRef = _elementRef;\n    this._dir = _dir;\n    this._platform = _platform;\n    /**\n     * Subject that emits when the component has been destroyed.\n     */\n\n    this._onDestroy = new Subject();\n    /**\n     * Map of all the user's defined columns (header, data, and footer cell template) identified by\n     * name. Collection populated by the column definitions gathered by `ContentChildren` as well as\n     * any custom column definitions added to `_customColumnDefs`.\n     */\n\n    this._columnDefsByName = new Map();\n    /**\n     * Column definitions that were defined outside of the direct content children of the table.\n     * These will be defined when, e.g., creating a wrapper around the cdkTable that has\n     * column definitions as *it's* content child.\n     */\n\n    this._customColumnDefs = new Set();\n    /**\n     * Data row definitions that were defined outside of the direct content children of the table.\n     * These will be defined when, e.g., creating a wrapper around the cdkTable that has\n     * built-in data rows as *it's* content child.\n     */\n\n    this._customRowDefs = new Set();\n    /**\n     * Header row definitions that were defined outside of the direct content children of the table.\n     * These will be defined when, e.g., creating a wrapper around the cdkTable that has\n     * built-in header rows as *it's* content child.\n     */\n\n    this._customHeaderRowDefs = new Set();\n    /**\n     * Footer row definitions that were defined outside of the direct content children of the table.\n     * These will be defined when, e.g., creating a wrapper around the cdkTable that has a\n     * built-in footer row as *it's* content child.\n     */\n\n    this._customFooterRowDefs = new Set();\n    /**\n     * Whether the header row definition has been changed. Triggers an update to the header row after\n     * content is checked. Initialized as true so that the table renders the initial set of rows.\n     */\n\n    this._headerRowDefChanged = true;\n    /**\n     * Whether the footer row definition has been changed. Triggers an update to the footer row after\n     * content is checked. Initialized as true so that the table renders the initial set of rows.\n     */\n\n    this._footerRowDefChanged = true;\n    /**\n     * Cache of the latest rendered `RenderRow` objects as a map for easy retrieval when constructing\n     * a new list of `RenderRow` objects for rendering rows. Since the new list is constructed with\n     * the cached `RenderRow` objects when possible, the row identity is preserved when the data\n     * and row template matches, which allows the `IterableDiffer` to check rows by reference\n     * and understand which rows are added/moved/removed.\n     *\n     * Implemented as a map of maps where the first key is the `data: T` object and the second is the\n     * `CdkRowDef<T>` object. With the two keys, the cache points to a `RenderRow<T>` object that\n     * contains an array of created pairs. The array is necessary to handle cases where the data\n     * array contains multiple duplicate data objects and each instantiated `RenderRow` must be\n     * stored.\n     */\n\n    this._cachedRenderRowsMap = new Map();\n    /**\n     * CSS class added to any row or cell that has sticky positioning applied. May be overriden by\n     * table subclasses.\n     */\n\n    this.stickyCssClass = 'cdk-table-sticky';\n    this._multiTemplateDataRows = false;\n    /**\n     * Stream containing the latest information on what rows are being displayed on screen.\n     * Can be used by the data source to as a heuristic of what data should be provided.\n     */\n\n    this.viewChange = new BehaviorSubject({\n      start: 0,\n      end: Number.MAX_VALUE\n    });\n\n    if (!role) {\n      this._elementRef.nativeElement.setAttribute('role', 'grid');\n    }\n\n    this._document = _document;\n    this._isNativeHtmlTable = this._elementRef.nativeElement.nodeName === 'TABLE';\n  }\n  /**\n   * Tracking function that will be used to check the differences in data changes. Used similarly\n   * to `ngFor` `trackBy` function. Optimize row operations by identifying a row based on its data\n   * relative to the function to know if a row should be added/removed/moved.\n   * Accepts a function that takes two parameters, `index` and `item`.\n   * @return {?}\n   */\n\n\n  _createClass(CdkTable, [{\n    key: \"trackBy\",\n    get: function get() {\n      return this._trackByFn;\n    }\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    ,\n    set: function set(fn) {\n      if (isDevMode() && fn != null && typeof fn !== 'function' &&\n      /** @type {?} */\n      console &&\n      /** @type {?} */\n      console.warn) {\n        console.warn(\"trackBy must be a function, but received \".concat(JSON.stringify(fn), \".\"));\n      }\n\n      this._trackByFn = fn;\n    }\n    /**\n     * The table's source of data, which can be provided in three ways (in order of complexity):\n     *   - Simple data array (each object represents one table row)\n     *   - Stream that emits a data array each time the array changes\n     *   - `DataSource` object that implements the connect/disconnect interface.\n     *\n     * If a data array is provided, the table must be notified when the array's objects are\n     * added, removed, or moved. This can be done by calling the `renderRows()` function which will\n     * render the diff since the last table render. If the data array reference is changed, the table\n     * will automatically trigger an update to the rows.\n     *\n     * When providing an Observable stream, the table will trigger an update automatically when the\n     * stream emits a new array of data.\n     *\n     * Finally, when providing a `DataSource` object, the table will use the Observable stream\n     * provided by the connect function and trigger updates when that stream emits new data array\n     * values. During the table's ngOnDestroy or when the data source is removed from the table, the\n     * table will call the DataSource's `disconnect` function (may be useful for cleaning up any\n     * subscriptions registered during the connect process).\n     * @return {?}\n     */\n\n  }, {\n    key: \"dataSource\",\n    get: function get() {\n      return this._dataSource;\n    }\n    /**\n     * @param {?} dataSource\n     * @return {?}\n     */\n    ,\n    set: function set(dataSource) {\n      if (this._dataSource !== dataSource) {\n        this._switchDataSource(dataSource);\n      }\n    }\n    /**\n     * Whether to allow multiple rows per data object by evaluating which rows evaluate their 'when'\n     * predicate to true. If `multiTemplateDataRows` is false, which is the default value, then each\n     * dataobject will render the first row that evaluates its when predicate to true, in the order\n     * defined in the table, or otherwise the default row which does not have a when predicate.\n     * @return {?}\n     */\n\n  }, {\n    key: \"multiTemplateDataRows\",\n    get: function get() {\n      return this._multiTemplateDataRows;\n    }\n    /**\n     * @param {?} v\n     * @return {?}\n     */\n    ,\n    set: function set(v) {\n      this._multiTemplateDataRows = coerceBooleanProperty(v);\n\n      if (this._rowOutlet.viewContainer.length) {\n        this._forceRenderDataRows();\n      }\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngOnInit\",\n    value: function ngOnInit() {\n      var _this3 = this;\n\n      this._setupStickyStyler();\n\n      if (this._isNativeHtmlTable) {\n        this._applyNativeTableSections();\n      } // Set up the trackBy function so that it uses the `RenderRow` as its identity by default. If\n      // the user has provided a custom trackBy, return the result of that function as evaluated\n      // with the values of the `RenderRow`'s data and index.\n\n\n      this._dataDiffer = this._differs.find([]).create(function (_i, dataRow) {\n        return _this3.trackBy ? _this3.trackBy(dataRow.dataIndex, dataRow.data) : dataRow;\n      });\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngAfterContentChecked\",\n    value: function ngAfterContentChecked() {\n      // Cache the row and column definitions gathered by ContentChildren and programmatic injection.\n      this._cacheRowDefs();\n\n      this._cacheColumnDefs(); // Make sure that the user has at least added header, footer, or data row def.\n\n\n      if (!this._headerRowDefs.length && !this._footerRowDefs.length && !this._rowDefs.length) {\n        throw getTableMissingRowDefsError();\n      } // Render updates if the list of columns have been changed for the header, row, or footer defs.\n\n\n      this._renderUpdatedColumns(); // If the header row definition has been changed, trigger a render to the header row.\n\n\n      if (this._headerRowDefChanged) {\n        this._forceRenderHeaderRows();\n\n        this._headerRowDefChanged = false;\n      } // If the footer row definition has been changed, trigger a render to the footer row.\n\n\n      if (this._footerRowDefChanged) {\n        this._forceRenderFooterRows();\n\n        this._footerRowDefChanged = false;\n      } // If there is a data source and row definitions, connect to the data source unless a\n      // connection has already been made.\n\n\n      if (this.dataSource && this._rowDefs.length > 0 && !this._renderChangeSubscription) {\n        this._observeRenderChanges();\n      }\n\n      this._checkStickyStates();\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      this._rowOutlet.viewContainer.clear();\n\n      this._headerRowOutlet.viewContainer.clear();\n\n      this._footerRowOutlet.viewContainer.clear();\n\n      this._cachedRenderRowsMap.clear();\n\n      this._onDestroy.next();\n\n      this._onDestroy.complete();\n\n      if (this.dataSource instanceof DataSource) {\n        this.dataSource.disconnect(this);\n      }\n    }\n    /**\n     * Renders rows based on the table's latest set of data, which was either provided directly as an\n     * input or retrieved through an Observable stream (directly or from a DataSource).\n     * Checks for differences in the data since the last diff to perform only the necessary\n     * changes (add/remove/move rows).\n     *\n     * If the table's data source is a DataSource or Observable, this will be invoked automatically\n     * each time the provided Observable stream emits a new data array. Otherwise if your data is\n     * an array, this function will need to be called to render any changes.\n     * @return {?}\n     */\n\n  }, {\n    key: \"renderRows\",\n    value: function renderRows() {\n      var _this4 = this;\n\n      this._renderRows = this._getAllRenderRows();\n      /** @type {?} */\n\n      var changes = this._dataDiffer.diff(this._renderRows);\n\n      if (!changes) {\n        return;\n      }\n      /** @type {?} */\n\n\n      var viewContainer = this._rowOutlet.viewContainer;\n      changes.forEachOperation(function (record, prevIndex, currentIndex) {\n        if (record.previousIndex == null) {\n          _this4._insertRow(record.item,\n          /** @type {?} */\n          currentIndex);\n        } else if (currentIndex == null) {\n          viewContainer.remove(\n          /** @type {?} */\n          prevIndex);\n        } else {\n          /** @type {?} */\n          var view =\n          /** @type {?} */\n          viewContainer.get(\n          /** @type {?} */\n          prevIndex);\n          viewContainer.move(\n          /** @type {?} */\n          view, currentIndex);\n        }\n      }); // Update the meta context of a row's context data (index, count, first, last, ...)\n\n      this._updateRowIndexContext(); // Update rows that did not get added/removed/moved but may have had their identity changed,\n      // e.g. if trackBy matched data on some property but the actual data reference changed.\n\n\n      changes.forEachIdentityChange(function (record) {\n        /** @type {?} */\n        var rowView =\n        /** @type {?} */\n        viewContainer.get(\n        /** @type {?} */\n        record.currentIndex);\n        rowView.context.$implicit = record.item.data;\n      });\n      this.updateStickyColumnStyles();\n    }\n    /**\n     * Sets the header row definition to be used. Overrides the header row definition gathered by\n     * using `ContentChild`, if one exists. Sets a flag that will re-render the header row after the\n     * table's content is checked.\n     * \\@docs-private\n     * @deprecated Use `addHeaderRowDef` and `removeHeaderRowDef` instead\n     * \\@breaking-change 8.0.0\n     * @param {?} headerRowDef\n     * @return {?}\n     */\n\n  }, {\n    key: \"setHeaderRowDef\",\n    value: function setHeaderRowDef(headerRowDef) {\n      this._customHeaderRowDefs = new Set([headerRowDef]);\n      this._headerRowDefChanged = true;\n    }\n    /**\n     * Sets the footer row definition to be used. Overrides the footer row definition gathered by\n     * using `ContentChild`, if one exists. Sets a flag that will re-render the footer row after the\n     * table's content is checked.\n     * \\@docs-private\n     * @deprecated Use `addFooterRowDef` and `removeFooterRowDef` instead\n     * \\@breaking-change 8.0.0\n     * @param {?} footerRowDef\n     * @return {?}\n     */\n\n  }, {\n    key: \"setFooterRowDef\",\n    value: function setFooterRowDef(footerRowDef) {\n      this._customFooterRowDefs = new Set([footerRowDef]);\n      this._footerRowDefChanged = true;\n    }\n    /**\n     * Adds a column definition that was not included as part of the content children.\n     * @param {?} columnDef\n     * @return {?}\n     */\n\n  }, {\n    key: \"addColumnDef\",\n    value: function addColumnDef(columnDef) {\n      this._customColumnDefs.add(columnDef);\n    }\n    /**\n     * Removes a column definition that was not included as part of the content children.\n     * @param {?} columnDef\n     * @return {?}\n     */\n\n  }, {\n    key: \"removeColumnDef\",\n    value: function removeColumnDef(columnDef) {\n      this._customColumnDefs.delete(columnDef);\n    }\n    /**\n     * Adds a row definition that was not included as part of the content children.\n     * @param {?} rowDef\n     * @return {?}\n     */\n\n  }, {\n    key: \"addRowDef\",\n    value: function addRowDef(rowDef) {\n      this._customRowDefs.add(rowDef);\n    }\n    /**\n     * Removes a row definition that was not included as part of the content children.\n     * @param {?} rowDef\n     * @return {?}\n     */\n\n  }, {\n    key: \"removeRowDef\",\n    value: function removeRowDef(rowDef) {\n      this._customRowDefs.delete(rowDef);\n    }\n    /**\n     * Adds a header row definition that was not included as part of the content children.\n     * @param {?} headerRowDef\n     * @return {?}\n     */\n\n  }, {\n    key: \"addHeaderRowDef\",\n    value: function addHeaderRowDef(headerRowDef) {\n      this._customHeaderRowDefs.add(headerRowDef);\n\n      this._headerRowDefChanged = true;\n    }\n    /**\n     * Removes a header row definition that was not included as part of the content children.\n     * @param {?} headerRowDef\n     * @return {?}\n     */\n\n  }, {\n    key: \"removeHeaderRowDef\",\n    value: function removeHeaderRowDef(headerRowDef) {\n      this._customHeaderRowDefs.delete(headerRowDef);\n\n      this._headerRowDefChanged = true;\n    }\n    /**\n     * Adds a footer row definition that was not included as part of the content children.\n     * @param {?} footerRowDef\n     * @return {?}\n     */\n\n  }, {\n    key: \"addFooterRowDef\",\n    value: function addFooterRowDef(footerRowDef) {\n      this._customFooterRowDefs.add(footerRowDef);\n\n      this._footerRowDefChanged = true;\n    }\n    /**\n     * Removes a footer row definition that was not included as part of the content children.\n     * @param {?} footerRowDef\n     * @return {?}\n     */\n\n  }, {\n    key: \"removeFooterRowDef\",\n    value: function removeFooterRowDef(footerRowDef) {\n      this._customFooterRowDefs.delete(footerRowDef);\n\n      this._footerRowDefChanged = true;\n    }\n    /**\n     * Updates the header sticky styles. First resets all applied styles with respect to the cells\n     * sticking to the top. Then, evaluating which cells need to be stuck to the top. This is\n     * automatically called when the header row changes its displayed set of columns, or if its\n     * sticky input changes. May be called manually for cases where the cell content changes outside\n     * of these events.\n     * @return {?}\n     */\n\n  }, {\n    key: \"updateStickyHeaderRowStyles\",\n    value: function updateStickyHeaderRowStyles() {\n      /** @type {?} */\n      var headerRows = this._getRenderedRows(this._headerRowOutlet);\n\n      this._stickyStyler.clearStickyPositioning(headerRows, ['top']);\n      /** @type {?} */\n\n\n      var stickyStates = this._headerRowDefs.map(function (def) {\n        return def.sticky;\n      });\n\n      this._stickyStyler.stickRows(headerRows, stickyStates, 'top'); // Reset the dirty state of the sticky input change since it has been used.\n\n\n      this._headerRowDefs.forEach(function (def) {\n        return def.resetStickyChanged();\n      });\n    }\n    /**\n     * Updates the footer sticky styles. First resets all applied styles with respect to the cells\n     * sticking to the bottom. Then, evaluating which cells need to be stuck to the bottom. This is\n     * automatically called when the footer row changes its displayed set of columns, or if its\n     * sticky input changes. May be called manually for cases where the cell content changes outside\n     * of these events.\n     * @return {?}\n     */\n\n  }, {\n    key: \"updateStickyFooterRowStyles\",\n    value: function updateStickyFooterRowStyles() {\n      /** @type {?} */\n      var footerRows = this._getRenderedRows(this._footerRowOutlet);\n\n      this._stickyStyler.clearStickyPositioning(footerRows, ['bottom']);\n      /** @type {?} */\n\n\n      var stickyStates = this._footerRowDefs.map(function (def) {\n        return def.sticky;\n      });\n\n      this._stickyStyler.stickRows(footerRows, stickyStates, 'bottom');\n\n      this._stickyStyler.updateStickyFooterContainer(this._elementRef.nativeElement, stickyStates); // Reset the dirty state of the sticky input change since it has been used.\n\n\n      this._footerRowDefs.forEach(function (def) {\n        return def.resetStickyChanged();\n      });\n    }\n    /**\n     * Updates the column sticky styles. First resets all applied styles with respect to the cells\n     * sticking to the left and right. Then sticky styles are added for the left and right according\n     * to the column definitions for each cell in each row. This is automatically called when\n     * the data source provides a new set of data or when a column definition changes its sticky\n     * input. May be called manually for cases where the cell content changes outside of these events.\n     * @return {?}\n     */\n\n  }, {\n    key: \"updateStickyColumnStyles\",\n    value: function updateStickyColumnStyles() {\n      var _this5 = this;\n\n      /** @type {?} */\n      var headerRows = this._getRenderedRows(this._headerRowOutlet);\n      /** @type {?} */\n\n\n      var dataRows = this._getRenderedRows(this._rowOutlet);\n      /** @type {?} */\n\n\n      var footerRows = this._getRenderedRows(this._footerRowOutlet); // Clear the left and right positioning from all columns in the table across all rows since\n      // sticky columns span across all table sections (header, data, footer)\n\n\n      this._stickyStyler.clearStickyPositioning([].concat(_toConsumableArray(headerRows), _toConsumableArray(dataRows), _toConsumableArray(footerRows)), ['left', 'right']); // Update the sticky styles for each header row depending on the def's sticky state\n\n\n      headerRows.forEach(function (headerRow, i) {\n        _this5._addStickyColumnStyles([headerRow], _this5._headerRowDefs[i]);\n      }); // Update the sticky styles for each data row depending on its def's sticky state\n\n      this._rowDefs.forEach(function (rowDef) {\n        /** @type {?} */\n        var rows = [];\n\n        for (var i = 0; i < dataRows.length; i++) {\n          if (_this5._renderRows[i].rowDef === rowDef) {\n            rows.push(dataRows[i]);\n          }\n        }\n\n        _this5._addStickyColumnStyles(rows, rowDef);\n      }); // Update the sticky styles for each footer row depending on the def's sticky state\n\n\n      footerRows.forEach(function (footerRow, i) {\n        _this5._addStickyColumnStyles([footerRow], _this5._footerRowDefs[i]);\n      }); // Reset the dirty state of the sticky input change since it has been used.\n\n      Array.from(this._columnDefsByName.values()).forEach(function (def) {\n        return def.resetStickyChanged();\n      });\n    }\n    /**\n     * Get the list of RenderRow objects to render according to the current list of data and defined\n     * row definitions. If the previous list already contained a particular pair, it should be reused\n     * so that the differ equates their references.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_getAllRenderRows\",\n    value: function _getAllRenderRows() {\n      /** @type {?} */\n      var renderRows = [];\n      /** @type {?} */\n\n      var prevCachedRenderRows = this._cachedRenderRowsMap;\n      this._cachedRenderRowsMap = new Map(); // For each data object, get the list of rows that should be rendered, represented by the\n      // respective `RenderRow` object which is the pair of `data` and `CdkRowDef`.\n\n      for (var i = 0; i < this._data.length; i++) {\n        /** @type {?} */\n        var data = this._data[i];\n        /** @type {?} */\n\n        var renderRowsForData = this._getRenderRowsForData(data, i, prevCachedRenderRows.get(data));\n\n        if (!this._cachedRenderRowsMap.has(data)) {\n          this._cachedRenderRowsMap.set(data, new WeakMap());\n        }\n\n        for (var j = 0; j < renderRowsForData.length; j++) {\n          /** @type {?} */\n          var renderRow = renderRowsForData[j];\n          /** @type {?} */\n\n          var cache =\n          /** @type {?} */\n          this._cachedRenderRowsMap.get(renderRow.data);\n\n          if (cache.has(renderRow.rowDef)) {\n            /** @type {?} */\n            cache.get(renderRow.rowDef).push(renderRow);\n          } else {\n            cache.set(renderRow.rowDef, [renderRow]);\n          }\n\n          renderRows.push(renderRow);\n        }\n      }\n\n      return renderRows;\n    }\n    /**\n     * Gets a list of `RenderRow<T>` for the provided data object and any `CdkRowDef` objects that\n     * should be rendered for this data. Reuses the cached RenderRow objects if they match the same\n     * `(T, CdkRowDef)` pair.\n     * @param {?} data\n     * @param {?} dataIndex\n     * @param {?=} cache\n     * @return {?}\n     */\n\n  }, {\n    key: \"_getRenderRowsForData\",\n    value: function _getRenderRowsForData(data, dataIndex, cache) {\n      /** @type {?} */\n      var rowDefs = this._getRowDefs(data, dataIndex);\n\n      return rowDefs.map(function (rowDef) {\n        /** @type {?} */\n        var cachedRenderRows = cache && cache.has(rowDef) ?\n        /** @type {?} */\n        cache.get(rowDef) : [];\n\n        if (cachedRenderRows.length) {\n          /** @type {?} */\n          var dataRow =\n          /** @type {?} */\n          cachedRenderRows.shift();\n          dataRow.dataIndex = dataIndex;\n          return dataRow;\n        } else {\n          return {\n            data: data,\n            rowDef: rowDef,\n            dataIndex: dataIndex\n          };\n        }\n      });\n    }\n    /**\n     * Update the map containing the content's column definitions.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_cacheColumnDefs\",\n    value: function _cacheColumnDefs() {\n      var _this6 = this;\n\n      this._columnDefsByName.clear();\n      /** @type {?} */\n\n\n      var columnDefs = mergeQueryListAndSet(this._contentColumnDefs, this._customColumnDefs);\n      columnDefs.forEach(function (columnDef) {\n        if (_this6._columnDefsByName.has(columnDef.name)) {\n          throw getTableDuplicateColumnNameError(columnDef.name);\n        }\n\n        _this6._columnDefsByName.set(columnDef.name, columnDef);\n      });\n    }\n    /**\n     * Update the list of all available row definitions that can be used.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_cacheRowDefs\",\n    value: function _cacheRowDefs() {\n      this._headerRowDefs = mergeQueryListAndSet(this._contentHeaderRowDefs, this._customHeaderRowDefs);\n      this._footerRowDefs = mergeQueryListAndSet(this._contentFooterRowDefs, this._customFooterRowDefs);\n      this._rowDefs = mergeQueryListAndSet(this._contentRowDefs, this._customRowDefs);\n      /** @type {?} */\n\n      var defaultRowDefs = this._rowDefs.filter(function (def) {\n        return !def.when;\n      });\n\n      if (!this.multiTemplateDataRows && defaultRowDefs.length > 1) {\n        throw getTableMultipleDefaultRowDefsError();\n      }\n\n      this._defaultRowDef = defaultRowDefs[0];\n    }\n    /**\n     * Check if the header, data, or footer rows have changed what columns they want to display or\n     * whether the sticky states have changed for the header or footer. If there is a diff, then\n     * re-render that section.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_renderUpdatedColumns\",\n    value: function _renderUpdatedColumns() {\n      /** @type {?} */\n      var columnsDiffReducer = function columnsDiffReducer(acc, def) {\n        return acc || !!def.getColumnsDiff();\n      }; // Force re-render data rows if the list of column definitions have changed.\n\n\n      if (this._rowDefs.reduce(columnsDiffReducer, false)) {\n        this._forceRenderDataRows();\n      } // Force re-render header/footer rows if the list of column definitions have changed..\n\n\n      if (this._headerRowDefs.reduce(columnsDiffReducer, false)) {\n        this._forceRenderHeaderRows();\n      }\n\n      if (this._footerRowDefs.reduce(columnsDiffReducer, false)) {\n        this._forceRenderFooterRows();\n      }\n    }\n    /**\n     * Switch to the provided data source by resetting the data and unsubscribing from the current\n     * render change subscription if one exists. If the data source is null, interpret this by\n     * clearing the row outlet. Otherwise start listening for new data.\n     * @param {?} dataSource\n     * @return {?}\n     */\n\n  }, {\n    key: \"_switchDataSource\",\n    value: function _switchDataSource(dataSource) {\n      this._data = [];\n\n      if (this.dataSource instanceof DataSource) {\n        this.dataSource.disconnect(this);\n      } // Stop listening for data from the previous data source.\n\n\n      if (this._renderChangeSubscription) {\n        this._renderChangeSubscription.unsubscribe();\n\n        this._renderChangeSubscription = null;\n      }\n\n      if (!dataSource) {\n        if (this._dataDiffer) {\n          this._dataDiffer.diff([]);\n        }\n\n        this._rowOutlet.viewContainer.clear();\n      }\n\n      this._dataSource = dataSource;\n    }\n    /**\n     * Set up a subscription for the data provided by the data source.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_observeRenderChanges\",\n    value: function _observeRenderChanges() {\n      var _this7 = this;\n\n      // If no data source has been set, there is nothing to observe for changes.\n      if (!this.dataSource) {\n        return;\n      }\n      /** @type {?} */\n\n\n      var dataStream; // Check if the datasource is a DataSource object by observing if it has a connect function.\n      // Cannot check this.dataSource['connect'] due to potential property renaming, nor can it\n      // checked as an instanceof DataSource<T> since the table should allow for data sources\n      // that did not explicitly extend DataSource<T>.\n\n      if (\n      /** @type {?} */\n      this.dataSource.connect instanceof Function) {\n        dataStream =\n        /** @type {?} */\n        this.dataSource.connect(this);\n      } else if (this.dataSource instanceof Observable) {\n        dataStream = this.dataSource;\n      } else if (Array.isArray(this.dataSource)) {\n        dataStream = of(this.dataSource);\n      }\n\n      if (dataStream === undefined) {\n        throw getTableUnknownDataSourceError();\n      }\n\n      this._renderChangeSubscription = dataStream.pipe(takeUntil(this._onDestroy)).subscribe(function (data) {\n        _this7._data = data || [];\n\n        _this7.renderRows();\n      });\n    }\n    /**\n     * Clears any existing content in the header row outlet and creates a new embedded view\n     * in the outlet using the header row definition.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_forceRenderHeaderRows\",\n    value: function _forceRenderHeaderRows() {\n      var _this8 = this;\n\n      // Clear the header row outlet if any content exists.\n      if (this._headerRowOutlet.viewContainer.length > 0) {\n        this._headerRowOutlet.viewContainer.clear();\n      }\n\n      this._headerRowDefs.forEach(function (def, i) {\n        return _this8._renderRow(_this8._headerRowOutlet, def, i);\n      });\n\n      this.updateStickyHeaderRowStyles();\n      this.updateStickyColumnStyles();\n    }\n    /**\n     * Clears any existing content in the footer row outlet and creates a new embedded view\n     * in the outlet using the footer row definition.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_forceRenderFooterRows\",\n    value: function _forceRenderFooterRows() {\n      var _this9 = this;\n\n      // Clear the footer row outlet if any content exists.\n      if (this._footerRowOutlet.viewContainer.length > 0) {\n        this._footerRowOutlet.viewContainer.clear();\n      }\n\n      this._footerRowDefs.forEach(function (def, i) {\n        return _this9._renderRow(_this9._footerRowOutlet, def, i);\n      });\n\n      this.updateStickyFooterRowStyles();\n      this.updateStickyColumnStyles();\n    }\n    /**\n     * Adds the sticky column styles for the rows according to the columns' stick states.\n     * @param {?} rows\n     * @param {?} rowDef\n     * @return {?}\n     */\n\n  }, {\n    key: \"_addStickyColumnStyles\",\n    value: function _addStickyColumnStyles(rows, rowDef) {\n      var _this10 = this;\n\n      /** @type {?} */\n      var columnDefs = Array.from(rowDef.columns || []).map(function (c) {\n        return (\n          /** @type {?} */\n          _this10._columnDefsByName.get(c)\n        );\n      });\n      /** @type {?} */\n\n      var stickyStartStates = columnDefs.map(function (columnDef) {\n        return columnDef.sticky;\n      });\n      /** @type {?} */\n\n      var stickyEndStates = columnDefs.map(function (columnDef) {\n        return columnDef.stickyEnd;\n      });\n\n      this._stickyStyler.updateStickyColumns(rows, stickyStartStates, stickyEndStates);\n    }\n    /**\n     * Gets the list of rows that have been rendered in the row outlet.\n     * @param {?} rowOutlet\n     * @return {?}\n     */\n\n  }, {\n    key: \"_getRenderedRows\",\n    value: function _getRenderedRows(rowOutlet) {\n      /** @type {?} */\n      var renderedRows = [];\n\n      for (var i = 0; i < rowOutlet.viewContainer.length; i++) {\n        /** @type {?} */\n        var viewRef =\n        /** @type {?} */\n        rowOutlet.viewContainer.get(i);\n        renderedRows.push(viewRef.rootNodes[0]);\n      }\n\n      return renderedRows;\n    }\n    /**\n     * Get the matching row definitions that should be used for this row data. If there is only\n     * one row definition, it is returned. Otherwise, find the row definitions that has a when\n     * predicate that returns true with the data. If none return true, return the default row\n     * definition.\n     * @param {?} data\n     * @param {?} dataIndex\n     * @return {?}\n     */\n\n  }, {\n    key: \"_getRowDefs\",\n    value: function _getRowDefs(data, dataIndex) {\n      if (this._rowDefs.length == 1) {\n        return [this._rowDefs[0]];\n      }\n      /** @type {?} */\n\n\n      var rowDefs = [];\n\n      if (this.multiTemplateDataRows) {\n        rowDefs = this._rowDefs.filter(function (def) {\n          return !def.when || def.when(dataIndex, data);\n        });\n      } else {\n        /** @type {?} */\n        var rowDef = this._rowDefs.find(function (def) {\n          return def.when && def.when(dataIndex, data);\n        }) || this._defaultRowDef;\n\n        if (rowDef) {\n          rowDefs.push(rowDef);\n        }\n      }\n\n      if (!rowDefs.length) {\n        throw getTableMissingMatchingRowDefError(data);\n      }\n\n      return rowDefs;\n    }\n    /**\n     * Create the embedded view for the data row template and place it in the correct index location\n     * within the data row view container.\n     * @param {?} renderRow\n     * @param {?} renderIndex\n     * @return {?}\n     */\n\n  }, {\n    key: \"_insertRow\",\n    value: function _insertRow(renderRow, renderIndex) {\n      /** @type {?} */\n      var rowDef = renderRow.rowDef;\n      /** @type {?} */\n\n      var context = {\n        $implicit: renderRow.data\n      };\n\n      this._renderRow(this._rowOutlet, rowDef, renderIndex, context);\n    }\n    /**\n     * Creates a new row template in the outlet and fills it with the set of cell templates.\n     * Optionally takes a context to provide to the row and cells, as well as an optional index\n     * of where to place the new row template in the outlet.\n     * @param {?} outlet\n     * @param {?} rowDef\n     * @param {?} index\n     * @param {?=} context\n     * @return {?}\n     */\n\n  }, {\n    key: \"_renderRow\",\n    value: function _renderRow(outlet, rowDef, index) {\n      var context = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n      // TODO(andrewseguin): enforce that one outlet was instantiated from createEmbeddedView\n      outlet.viewContainer.createEmbeddedView(rowDef.template, context, index);\n\n      var _iterator5 = _createForOfIteratorHelper(this._getCellTemplates(rowDef)),\n          _step5;\n\n      try {\n        for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n          var cellTemplate = _step5.value;\n\n          if (CdkCellOutlet.mostRecentCellOutlet) {\n            CdkCellOutlet.mostRecentCellOutlet._viewContainer.createEmbeddedView(cellTemplate, context);\n          }\n        }\n      } catch (err) {\n        _iterator5.e(err);\n      } finally {\n        _iterator5.f();\n      }\n\n      this._changeDetectorRef.markForCheck();\n    }\n    /**\n     * Updates the index-related context for each row to reflect any changes in the index of the rows,\n     * e.g. first/last/even/odd.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_updateRowIndexContext\",\n    value: function _updateRowIndexContext() {\n      /** @type {?} */\n      var viewContainer = this._rowOutlet.viewContainer;\n\n      for (var renderIndex = 0, count = viewContainer.length; renderIndex < count; renderIndex++) {\n        /** @type {?} */\n        var viewRef =\n        /** @type {?} */\n        viewContainer.get(renderIndex);\n        /** @type {?} */\n\n        var context =\n        /** @type {?} */\n        viewRef.context;\n        context.count = count;\n        context.first = renderIndex === 0;\n        context.last = renderIndex === count - 1;\n        context.even = renderIndex % 2 === 0;\n        context.odd = !context.even;\n\n        if (this.multiTemplateDataRows) {\n          context.dataIndex = this._renderRows[renderIndex].dataIndex;\n          context.renderIndex = renderIndex;\n        } else {\n          context.index = this._renderRows[renderIndex].dataIndex;\n        }\n      }\n    }\n    /**\n     * Gets the column definitions for the provided row def.\n     * @param {?} rowDef\n     * @return {?}\n     */\n\n  }, {\n    key: \"_getCellTemplates\",\n    value: function _getCellTemplates(rowDef) {\n      var _this11 = this;\n\n      if (!rowDef || !rowDef.columns) {\n        return [];\n      }\n\n      return Array.from(rowDef.columns, function (columnId) {\n        /** @type {?} */\n        var column = _this11._columnDefsByName.get(columnId);\n\n        if (!column) {\n          throw getTableUnknownColumnError(columnId);\n        }\n\n        return rowDef.extractCellTemplate(column);\n      });\n    }\n    /**\n     * Adds native table sections (e.g. tbody) and moves the row outlets into them.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_applyNativeTableSections\",\n    value: function _applyNativeTableSections() {\n      /** @type {?} */\n      var sections = [{\n        tag: 'thead',\n        outlet: this._headerRowOutlet\n      }, {\n        tag: 'tbody',\n        outlet: this._rowOutlet\n      }, {\n        tag: 'tfoot',\n        outlet: this._footerRowOutlet\n      }];\n\n      for (var _i2 = 0, _sections = sections; _i2 < _sections.length; _i2++) {\n        var section = _sections[_i2];\n\n        /** @type {?} */\n        var documentRef = this._document || document;\n        /** @type {?} */\n\n        var element = documentRef.createElement(section.tag);\n        element.appendChild(section.outlet.elementRef.nativeElement);\n\n        this._elementRef.nativeElement.appendChild(element);\n      }\n    }\n    /**\n     * Forces a re-render of the data rows. Should be called in cases where there has been an input\n     * change that affects the evaluation of which rows should be rendered, e.g. toggling\n     * `multiTemplateDataRows` or adding/removing row definitions.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_forceRenderDataRows\",\n    value: function _forceRenderDataRows() {\n      this._dataDiffer.diff([]);\n\n      this._rowOutlet.viewContainer.clear();\n\n      this.renderRows();\n      this.updateStickyColumnStyles();\n    }\n    /**\n     * Checks if there has been a change in sticky states since last check and applies the correct\n     * sticky styles. Since checking resets the \"dirty\" state, this should only be performed once\n     * during a change detection and after the inputs are settled (after content check).\n     * @return {?}\n     */\n\n  }, {\n    key: \"_checkStickyStates\",\n    value: function _checkStickyStates() {\n      /** @type {?} */\n      var stickyCheckReducer = function stickyCheckReducer(acc, d) {\n        return acc || d.hasStickyChanged();\n      }; // Note that the check needs to occur for every definition since it notifies the definition\n      // that it can reset its dirty state. Using another operator like `some` may short-circuit\n      // remaining definitions and leave them in an unchecked state.\n\n\n      if (this._headerRowDefs.reduce(stickyCheckReducer, false)) {\n        this.updateStickyHeaderRowStyles();\n      }\n\n      if (this._footerRowDefs.reduce(stickyCheckReducer, false)) {\n        this.updateStickyFooterRowStyles();\n      }\n\n      if (Array.from(this._columnDefsByName.values()).reduce(stickyCheckReducer, false)) {\n        this.updateStickyColumnStyles();\n      }\n    }\n    /**\n     * Creates the sticky styler that will be used for sticky rows and columns. Listens\n     * for directionality changes and provides the latest direction to the styler. Re-applies column\n     * stickiness when directionality changes.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_setupStickyStyler\",\n    value: function _setupStickyStyler() {\n      var _this12 = this;\n\n      /** @type {?} */\n      var direction = this._dir ? this._dir.value : 'ltr';\n      this._stickyStyler = new StickyStyler(this._isNativeHtmlTable, // @breaking-change 8.0.0 remove the null check for `this._platform`.\n      this.stickyCssClass, direction, this._platform ? this._platform.isBrowser : true);\n      (this._dir ? this._dir.change : of()).pipe(takeUntil(this._onDestroy)).subscribe(function (value) {\n        _this12._stickyStyler.direction = value;\n\n        _this12.updateStickyColumnStyles();\n      });\n    }\n  }]);\n\n  return CdkTable;\n}();\n\nCdkTable.ɵfac = function CdkTable_Factory(t) {\n  return new (t || CdkTable)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.IterableDiffers), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵinjectAttribute('role'), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.Directionality, 8), ɵngcc0.ɵɵdirectiveInject(DOCUMENT), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.Platform));\n};\n\nCdkTable.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n  type: CdkTable,\n  selectors: [[\"cdk-table\"], [\"table\", \"cdk-table\", \"\"]],\n  contentQueries: function CdkTable_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵcontentQuery(dirIndex, CdkColumnDef, 4);\n      ɵngcc0.ɵɵcontentQuery(dirIndex, CdkRowDef, 4);\n      ɵngcc0.ɵɵcontentQuery(dirIndex, CdkHeaderRowDef, 4);\n      ɵngcc0.ɵɵcontentQuery(dirIndex, CdkFooterRowDef, 4);\n    }\n\n    if (rf & 2) {\n      var _t;\n\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._contentColumnDefs = _t);\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._contentRowDefs = _t);\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._contentHeaderRowDefs = _t);\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._contentFooterRowDefs = _t);\n    }\n  },\n  viewQuery: function CdkTable_Query(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵviewQuery(DataRowOutlet, 5);\n      ɵngcc0.ɵɵviewQuery(HeaderRowOutlet, 5);\n      ɵngcc0.ɵɵviewQuery(FooterRowOutlet, 5);\n    }\n\n    if (rf & 2) {\n      var _t;\n\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._rowOutlet = _t.first);\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._headerRowOutlet = _t.first);\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._footerRowOutlet = _t.first);\n    }\n  },\n  hostAttrs: [1, \"cdk-table\"],\n  inputs: {\n    trackBy: \"trackBy\",\n    dataSource: \"dataSource\",\n    multiTemplateDataRows: \"multiTemplateDataRows\"\n  },\n  exportAs: [\"cdkTable\"],\n  decls: 3,\n  vars: 0,\n  consts: [[\"headerRowOutlet\", \"\"], [\"rowOutlet\", \"\"], [\"footerRowOutlet\", \"\"]],\n  template: function CdkTable_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵelementContainer(0, 0);\n      ɵngcc0.ɵɵelementContainer(1, 1);\n      ɵngcc0.ɵɵelementContainer(2, 2);\n    }\n  },\n  directives: [HeaderRowOutlet, DataRowOutlet, FooterRowOutlet],\n  encapsulation: 2,\n  changeDetection: 0\n});\n/** @nocollapse */\n\nCdkTable.ctorParameters = function () {\n  return [{\n    type: IterableDiffers\n  }, {\n    type: ChangeDetectorRef\n  }, {\n    type: ElementRef\n  }, {\n    type: String,\n    decorators: [{\n      type: Attribute,\n      args: ['role']\n    }]\n  }, {\n    type: Directionality,\n    decorators: [{\n      type: Optional\n    }]\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Inject,\n      args: [DOCUMENT]\n    }]\n  }, {\n    type: Platform\n  }];\n};\n\nCdkTable.propDecorators = {\n  trackBy: [{\n    type: Input\n  }],\n  dataSource: [{\n    type: Input\n  }],\n  multiTemplateDataRows: [{\n    type: Input\n  }],\n  _rowOutlet: [{\n    type: ViewChild,\n    args: [DataRowOutlet]\n  }],\n  _headerRowOutlet: [{\n    type: ViewChild,\n    args: [HeaderRowOutlet]\n  }],\n  _footerRowOutlet: [{\n    type: ViewChild,\n    args: [FooterRowOutlet]\n  }],\n  _contentColumnDefs: [{\n    type: ContentChildren,\n    args: [CdkColumnDef]\n  }],\n  _contentRowDefs: [{\n    type: ContentChildren,\n    args: [CdkRowDef]\n  }],\n  _contentHeaderRowDefs: [{\n    type: ContentChildren,\n    args: [CdkHeaderRowDef]\n  }],\n  _contentFooterRowDefs: [{\n    type: ContentChildren,\n    args: [CdkFooterRowDef]\n  }]\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkTable, [{\n    type: Component,\n    args: [{\n      selector: 'cdk-table, table[cdk-table]',\n      exportAs: 'cdkTable',\n      template: CDK_TABLE_TEMPLATE,\n      host: {\n        'class': 'cdk-table'\n      },\n      encapsulation: ViewEncapsulation.None,\n      changeDetection: ChangeDetectionStrategy.OnPush\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.IterableDiffers\n    }, {\n      type: ɵngcc0.ChangeDetectorRef\n    }, {\n      type: ɵngcc0.ElementRef\n    }, {\n      type: String,\n      decorators: [{\n        type: Attribute,\n        args: ['role']\n      }]\n    }, {\n      type: ɵngcc1.Directionality,\n      decorators: [{\n        type: Optional\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }, {\n      type: ɵngcc2.Platform\n    }];\n  }, {\n    trackBy: [{\n      type: Input\n    }],\n    dataSource: [{\n      type: Input\n    }],\n    multiTemplateDataRows: [{\n      type: Input\n    }],\n    _rowOutlet: [{\n      type: ViewChild,\n      args: [DataRowOutlet]\n    }],\n    _headerRowOutlet: [{\n      type: ViewChild,\n      args: [HeaderRowOutlet]\n    }],\n    _footerRowOutlet: [{\n      type: ViewChild,\n      args: [FooterRowOutlet]\n    }],\n    _contentColumnDefs: [{\n      type: ContentChildren,\n      args: [CdkColumnDef]\n    }],\n    _contentRowDefs: [{\n      type: ContentChildren,\n      args: [CdkRowDef]\n    }],\n    _contentHeaderRowDefs: [{\n      type: ContentChildren,\n      args: [CdkHeaderRowDef]\n    }],\n    _contentFooterRowDefs: [{\n      type: ContentChildren,\n      args: [CdkFooterRowDef]\n    }]\n  });\n})();\n/**\n * Utility function that gets a merged list of the entries in a QueryList and values of a Set.\n * @template T\n * @param {?} queryList\n * @param {?} set\n * @return {?}\n */\n\n\nfunction mergeQueryListAndSet(queryList, set) {\n  return queryList.toArray().concat(Array.from(set));\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/** @type {?} */\n\n\nvar EXPORTED_DECLARATIONS = [CdkTable, CdkRowDef, CdkCellDef, CdkCellOutlet, CdkHeaderCellDef, CdkFooterCellDef, CdkColumnDef, CdkCell, CdkRow, CdkHeaderCell, CdkFooterCell, CdkHeaderRow, CdkHeaderRowDef, CdkFooterRow, CdkFooterRowDef, DataRowOutlet, HeaderRowOutlet, FooterRowOutlet];\n\nvar CdkTableModule = function CdkTableModule() {\n  _classCallCheck(this, CdkTableModule);\n};\n\nCdkTableModule.ɵfac = function CdkTableModule_Factory(t) {\n  return new (t || CdkTableModule)();\n};\n\nCdkTableModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n  type: CdkTableModule\n});\nCdkTableModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n  imports: [[CommonModule]]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkTableModule, [{\n    type: NgModule,\n    args: [{\n      imports: [CommonModule],\n      exports: EXPORTED_DECLARATIONS,\n      declarations: EXPORTED_DECLARATIONS\n    }]\n  }], null, null);\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(CdkTableModule, {\n    declarations: function declarations() {\n      return [CdkTable, CdkRowDef, CdkCellDef, CdkCellOutlet, CdkHeaderCellDef, CdkFooterCellDef, CdkColumnDef, CdkCell, CdkRow, CdkHeaderCell, CdkFooterCell, CdkHeaderRow, CdkHeaderRowDef, CdkFooterRow, CdkFooterRowDef, DataRowOutlet, HeaderRowOutlet, FooterRowOutlet];\n    },\n    imports: function imports() {\n      return [CommonModule];\n    },\n    exports: function exports() {\n      return [CdkTable, CdkRowDef, CdkCellDef, CdkCellOutlet, CdkHeaderCellDef, CdkFooterCellDef, CdkColumnDef, CdkCell, CdkRow, CdkHeaderCell, CdkFooterCell, CdkHeaderRow, CdkHeaderRowDef, CdkFooterRow, CdkFooterRowDef, DataRowOutlet, HeaderRowOutlet, FooterRowOutlet];\n    }\n  });\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n\nexport { DataRowOutlet, HeaderRowOutlet, FooterRowOutlet, CDK_TABLE_TEMPLATE, CdkTable, CdkCellDef, CdkHeaderCellDef, CdkFooterCellDef, CdkColumnDefBase, _CdkColumnDefBase, CdkColumnDef, BaseCdkCell, CdkHeaderCell, CdkFooterCell, CdkCell, CDK_ROW_TEMPLATE, BaseRowDef, CdkHeaderRowDefBase, _CdkHeaderRowDefBase, CdkHeaderRowDef, CdkFooterRowDefBase, _CdkFooterRowDefBase, CdkFooterRowDef, CdkRowDef, CdkCellOutlet, CdkHeaderRow, CdkFooterRow, CdkRow, CdkTableModule, STICKY_DIRECTIONS, StickyStyler, mixinHasStickyInput }; //# sourceMappingURL=table.js.map","map":{"version":3,"sources":["/Users/adepertat/Dropbox/ECOLES/Openclassroom/P6_de_Pertat_Antoine/dwj-projet6/node_modules/@angular/cdk/__ivy_ngcc__/esm2015/table.js"],"names":["coerceBooleanProperty","ContentChild","Directive","ElementRef","Input","TemplateRef","ChangeDetectionStrategy","Component","IterableDiffers","ViewContainerRef","ViewEncapsulation","Attribute","ChangeDetectorRef","ContentChildren","isDevMode","Optional","ViewChild","Inject","NgModule","DataSource","ɵngcc0","ɵngcc1","ɵngcc2","DOCUMENT","CommonModule","BehaviorSubject","Observable","of","Subject","takeUntil","Directionality","Platform","mixinHasStickyInput","base","args","_sticky","_hasStickyChanged","v","prevValue","hasStickyChanged","CdkCellDef","template","ɵfac","CdkCellDef_Factory","t","ɵɵdirectiveInject","ɵdir","ɵɵdefineDirective","type","selectors","ctorParameters","ngDevMode","ɵsetClassMetadata","selector","CdkHeaderCellDef","CdkHeaderCellDef_Factory","CdkFooterCellDef","CdkFooterCellDef_Factory","CdkColumnDefBase","_CdkColumnDefBase","CdkColumnDef","arguments","_stickyEnd","_name","name","cssClassFriendlyName","replace","ɵCdkColumnDef_BaseFactory","CdkColumnDef_Factory","ɵɵgetInheritedFactory","contentQueries","CdkColumnDef_ContentQueries","rf","ctx","dirIndex","ɵɵcontentQuery","_t","ɵɵqueryRefresh","ɵɵloadQuery","cell","first","headerCell","footerCell","inputs","sticky","stickyEnd","features","ɵɵProvidersFeature","provide","useExisting","ɵɵInheritDefinitionFeature","propDecorators","providers","BaseCdkCell","columnDef","elementRef","columnClassName","nativeElement","classList","add","CdkHeaderCell","CdkHeaderCell_Factory","hostAttrs","host","CdkFooterCell","CdkFooterCell_Factory","CdkCell","CdkCell_Factory","CDK_ROW_TEMPLATE","BaseRowDef","_differs","changes","_columnsDiffer","columns","currentValue","find","create","diff","column","CdkHeaderRowDef","CdkFooterRowDef","BaseRowDef_Factory","ɵɵinvalidFactory","ɵɵNgOnChangesFeature","CdkHeaderRowDefBase","_CdkHeaderRowDefBase","CdkHeaderRowDef_Factory","CdkFooterRowDefBase","_CdkFooterRowDefBase","CdkFooterRowDef_Factory","CdkRowDef","CdkRowDef_Factory","when","CdkCellOutlet","_viewContainer","mostRecentCellOutlet","CdkCellOutlet_Factory","CdkHeaderRow","CdkHeaderRow_Factory","ɵcmp","ɵɵdefineComponent","decls","vars","consts","CdkHeaderRow_Template","ɵɵelementContainer","directives","encapsulation","changeDetection","OnPush","None","CdkFooterRow","CdkFooterRow_Factory","CdkFooterRow_Template","CdkRow","CdkRow_Factory","CdkRow_Template","getTableUnknownColumnError","id","Error","getTableDuplicateColumnNameError","getTableMultipleDefaultRowDefsError","getTableMissingMatchingRowDefError","data","JSON","stringify","getTableMissingRowDefsError","getTableUnknownDataSourceError","STICKY_DIRECTIONS","StickyStyler","isNativeHtmlTable","stickCellCss","direction","_isBrowser","rows","stickyDirections","row","nodeType","ELEMENT_NODE","_removeStickyStyle","i","children","length","stickyStartStates","stickyEndStates","hasStickyColumns","some","state","firstRow","numCells","cellWidths","_getCellWidths","startPositions","_getStickyStartColumnPositions","endPositions","_getStickyEndColumnPositions","isRtl","_addStickyStyle","rowsToStick","stickyStates","position","reverse","stickyHeight","rowIndex","j","getBoundingClientRect","height","tableElement","tfoot","querySelector","element","dir","style","zIndex","_getCalculatedZIndex","hasDirection","remove","dirValue","cssText","zIndexIncrements","top","bottom","left","right","firstRowCells","push","width","widths","positions","nextPosition","DataRowOutlet","viewContainer","DataRowOutlet_Factory","HeaderRowOutlet","HeaderRowOutlet_Factory","FooterRowOutlet","FooterRowOutlet_Factory","CDK_TABLE_TEMPLATE","CdkTable","_changeDetectorRef","_elementRef","role","_dir","_document","_platform","_onDestroy","_columnDefsByName","Map","_customColumnDefs","Set","_customRowDefs","_customHeaderRowDefs","_customFooterRowDefs","_headerRowDefChanged","_footerRowDefChanged","_cachedRenderRowsMap","stickyCssClass","_multiTemplateDataRows","viewChange","start","end","Number","MAX_VALUE","setAttribute","_isNativeHtmlTable","nodeName","_trackByFn","fn","console","warn","_dataSource","dataSource","_switchDataSource","_rowOutlet","_forceRenderDataRows","_setupStickyStyler","_applyNativeTableSections","_dataDiffer","_i","dataRow","trackBy","dataIndex","_cacheRowDefs","_cacheColumnDefs","_headerRowDefs","_footerRowDefs","_rowDefs","_renderUpdatedColumns","_forceRenderHeaderRows","_forceRenderFooterRows","_renderChangeSubscription","_observeRenderChanges","_checkStickyStates","clear","_headerRowOutlet","_footerRowOutlet","next","complete","disconnect","_renderRows","_getAllRenderRows","forEachOperation","record","prevIndex","currentIndex","previousIndex","_insertRow","item","view","get","move","_updateRowIndexContext","forEachIdentityChange","rowView","context","$implicit","updateStickyColumnStyles","headerRowDef","footerRowDef","delete","rowDef","headerRows","_getRenderedRows","_stickyStyler","clearStickyPositioning","map","def","stickRows","forEach","resetStickyChanged","footerRows","updateStickyFooterContainer","dataRows","headerRow","_addStickyColumnStyles","footerRow","Array","from","values","renderRows","prevCachedRenderRows","_data","renderRowsForData","_getRenderRowsForData","has","set","WeakMap","renderRow","cache","rowDefs","_getRowDefs","cachedRenderRows","shift","columnDefs","mergeQueryListAndSet","_contentColumnDefs","_contentHeaderRowDefs","_contentFooterRowDefs","_contentRowDefs","defaultRowDefs","filter","multiTemplateDataRows","_defaultRowDef","columnsDiffReducer","acc","getColumnsDiff","reduce","unsubscribe","dataStream","connect","Function","isArray","undefined","pipe","subscribe","_renderRow","updateStickyHeaderRowStyles","updateStickyFooterRowStyles","c","updateStickyColumns","rowOutlet","renderedRows","viewRef","rootNodes","renderIndex","outlet","index","createEmbeddedView","_getCellTemplates","cellTemplate","markForCheck","count","last","even","odd","columnId","extractCellTemplate","sections","tag","section","documentRef","document","createElement","appendChild","stickyCheckReducer","d","value","isBrowser","change","CdkTable_Factory","ɵɵinjectAttribute","CdkTable_ContentQueries","viewQuery","CdkTable_Query","ɵɵviewQuery","exportAs","CdkTable_Template","String","decorators","queryList","toArray","concat","EXPORTED_DECLARATIONS","CdkTableModule","CdkTableModule_Factory","ɵmod","ɵɵdefineNgModule","ɵinj","ɵɵdefineInjector","imports","exports","declarations","ngJitMode","ɵɵsetNgModuleScope"],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { ContentChild, Directive, ElementRef, Input, TemplateRef, ChangeDetectionStrategy, Component, IterableDiffers, ViewContainerRef, ViewEncapsulation, Attribute, ChangeDetectorRef, ContentChildren, isDevMode, Optional, ViewChild, Inject, NgModule } from '@angular/core';\nimport { DataSource } from '@angular/cdk/collections';\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/bidi';\nimport * as ɵngcc2 from '@angular/cdk/platform';\nexport { DataSource } from '@angular/cdk/collections';\nimport { DOCUMENT, CommonModule } from '@angular/common';\nimport { BehaviorSubject, Observable, of, Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { Platform } from '@angular/cdk/platform';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * Mixin to provide a directive with a function that checks if the sticky input has been\n * changed since the last time the function was called. Essentially adds a dirty-check to the\n * sticky value.\n * \\@docs-private\n * @template T\n * @param {?} base\n * @return {?}\n */\nfunction mixinHasStickyInput(base) {\n    return class extends base {\n        /**\n         * @param {...?} args\n         */\n        constructor(...args) {\n            super(...args);\n            this._sticky = false;\n            /**\n             * Whether the sticky input has changed since it was last checked.\n             */\n            this._hasStickyChanged = false;\n        }\n        /**\n         * Whether sticky positioning should be applied.\n         * @return {?}\n         */\n        get sticky() { return this._sticky; }\n        /**\n         * @param {?} v\n         * @return {?}\n         */\n        set sticky(v) {\n            /** @type {?} */\n            const prevValue = this._sticky;\n            this._sticky = coerceBooleanProperty(v);\n            this._hasStickyChanged = prevValue !== this._sticky;\n        }\n        /**\n         * Whether the sticky value has changed since this was last called.\n         * @return {?}\n         */\n        hasStickyChanged() {\n            /** @type {?} */\n            const hasStickyChanged = this._hasStickyChanged;\n            this._hasStickyChanged = false;\n            return hasStickyChanged;\n        }\n        /**\n         * Resets the dirty check for cases where the sticky state has been used without checking.\n         * @return {?}\n         */\n        resetStickyChanged() {\n            this._hasStickyChanged = false;\n        }\n    };\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * Cell definition for a CDK table.\n * Captures the template of a column's data row cell as well as cell-specific properties.\n */\nclass CdkCellDef {\n    /**\n     * @param {?} template\n     */\n    constructor(template) {\n        this.template = template;\n    }\n}\nCdkCellDef.ɵfac = function CdkCellDef_Factory(t) { return new (t || CdkCellDef)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef)); };\nCdkCellDef.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: CdkCellDef, selectors: [[\"\", \"cdkCellDef\", \"\"]] });\n/** @nocollapse */\nCdkCellDef.ctorParameters = () => [\n    { type: TemplateRef }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkCellDef, [{\n        type: Directive,\n        args: [{ selector: '[cdkCellDef]' }]\n    }], function () { return [{ type: ɵngcc0.TemplateRef }]; }, null); })();\n/**\n * Header cell definition for a CDK table.\n * Captures the template of a column's header cell and as well as cell-specific properties.\n */\nclass CdkHeaderCellDef {\n    /**\n     * @param {?} template\n     */\n    constructor(template) {\n        this.template = template;\n    }\n}\nCdkHeaderCellDef.ɵfac = function CdkHeaderCellDef_Factory(t) { return new (t || CdkHeaderCellDef)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef)); };\nCdkHeaderCellDef.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: CdkHeaderCellDef, selectors: [[\"\", \"cdkHeaderCellDef\", \"\"]] });\n/** @nocollapse */\nCdkHeaderCellDef.ctorParameters = () => [\n    { type: TemplateRef }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkHeaderCellDef, [{\n        type: Directive,\n        args: [{ selector: '[cdkHeaderCellDef]' }]\n    }], function () { return [{ type: ɵngcc0.TemplateRef }]; }, null); })();\n/**\n * Footer cell definition for a CDK table.\n * Captures the template of a column's footer cell and as well as cell-specific properties.\n */\nclass CdkFooterCellDef {\n    /**\n     * @param {?} template\n     */\n    constructor(template) {\n        this.template = template;\n    }\n}\nCdkFooterCellDef.ɵfac = function CdkFooterCellDef_Factory(t) { return new (t || CdkFooterCellDef)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef)); };\nCdkFooterCellDef.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: CdkFooterCellDef, selectors: [[\"\", \"cdkFooterCellDef\", \"\"]] });\n/** @nocollapse */\nCdkFooterCellDef.ctorParameters = () => [\n    { type: TemplateRef }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkFooterCellDef, [{\n        type: Directive,\n        args: [{ selector: '[cdkFooterCellDef]' }]\n    }], function () { return [{ type: ɵngcc0.TemplateRef }]; }, null); })();\n/**\n * \\@docs-private\n */\nclass CdkColumnDefBase {\n}\n/** @type {?} */\nconst _CdkColumnDefBase = mixinHasStickyInput(CdkColumnDefBase);\n/**\n * Column definition for the CDK table.\n * Defines a set of cells available for a table column.\n */\nclass CdkColumnDef extends _CdkColumnDefBase {\n    constructor() {\n        super(...arguments);\n        this._stickyEnd = false;\n    }\n    /**\n     * Unique name for this column.\n     * @return {?}\n     */\n    get name() { return this._name; }\n    /**\n     * @param {?} name\n     * @return {?}\n     */\n    set name(name) {\n        // If the directive is set without a name (updated programatically), then this setter will\n        // trigger with an empty string and should not overwrite the programatically set value.\n        if (!name) {\n            return;\n        }\n        this._name = name;\n        this.cssClassFriendlyName = name.replace(/[^a-z0-9_-]/ig, '-');\n    }\n    /**\n     * Whether this column should be sticky positioned on the end of the row. Should make sure\n     * that it mimics the `CanStick` mixin such that `_hasStickyChanged` is set to true if the value\n     * has been changed.\n     * @return {?}\n     */\n    get stickyEnd() { return this._stickyEnd; }\n    /**\n     * @param {?} v\n     * @return {?}\n     */\n    set stickyEnd(v) {\n        /** @type {?} */\n        const prevValue = this._stickyEnd;\n        this._stickyEnd = coerceBooleanProperty(v);\n        this._hasStickyChanged = prevValue !== this._stickyEnd;\n    }\n}\nCdkColumnDef.ɵfac = /*@__PURE__*/ function () { let ɵCdkColumnDef_BaseFactory; return function CdkColumnDef_Factory(t) { return (ɵCdkColumnDef_BaseFactory || (ɵCdkColumnDef_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(CdkColumnDef)))(t || CdkColumnDef); }; }();\nCdkColumnDef.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: CdkColumnDef, selectors: [[\"\", \"cdkColumnDef\", \"\"]], contentQueries: function CdkColumnDef_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, CdkCellDef, 5);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, CdkHeaderCellDef, 5);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, CdkFooterCellDef, 5);\n    } if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.cell = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.headerCell = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.footerCell = _t.first);\n    } }, inputs: { sticky: \"sticky\", name: [\"cdkColumnDef\", \"name\"], stickyEnd: \"stickyEnd\" }, features: [ɵngcc0.ɵɵProvidersFeature([{\n                provide: 'MAT_SORT_HEADER_COLUMN_DEF',\n                useExisting: CdkColumnDef\n            }]), ɵngcc0.ɵɵInheritDefinitionFeature] });\nCdkColumnDef.propDecorators = {\n    name: [{ type: Input, args: ['cdkColumnDef',] }],\n    stickyEnd: [{ type: Input, args: ['stickyEnd',] }],\n    cell: [{ type: ContentChild, args: [CdkCellDef,] }],\n    headerCell: [{ type: ContentChild, args: [CdkHeaderCellDef,] }],\n    footerCell: [{ type: ContentChild, args: [CdkFooterCellDef,] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkColumnDef, [{\n        type: Directive,\n        args: [{\n                selector: '[cdkColumnDef]',\n                inputs: ['sticky'],\n                providers: [{\n                        provide: 'MAT_SORT_HEADER_COLUMN_DEF',\n                        useExisting: CdkColumnDef\n                    }]\n            }]\n    }], null, { name: [{\n            type: Input,\n            args: ['cdkColumnDef']\n        }], stickyEnd: [{\n            type: Input,\n            args: ['stickyEnd']\n        }], cell: [{\n            type: ContentChild,\n            args: [CdkCellDef]\n        }], headerCell: [{\n            type: ContentChild,\n            args: [CdkHeaderCellDef]\n        }], footerCell: [{\n            type: ContentChild,\n            args: [CdkFooterCellDef]\n        }] }); })();\n/**\n * Base class for the cells. Adds a CSS classname that identifies the column it renders in.\n */\nclass BaseCdkCell {\n    /**\n     * @param {?} columnDef\n     * @param {?} elementRef\n     */\n    constructor(columnDef, elementRef) {\n        /** @type {?} */\n        const columnClassName = `cdk-column-${columnDef.cssClassFriendlyName}`;\n        elementRef.nativeElement.classList.add(columnClassName);\n    }\n}\n/**\n * Header cell template container that adds the right classes and role.\n */\nclass CdkHeaderCell extends BaseCdkCell {\n    /**\n     * @param {?} columnDef\n     * @param {?} elementRef\n     */\n    constructor(columnDef, elementRef) {\n        super(columnDef, elementRef);\n    }\n}\nCdkHeaderCell.ɵfac = function CdkHeaderCell_Factory(t) { return new (t || CdkHeaderCell)(ɵngcc0.ɵɵdirectiveInject(CdkColumnDef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };\nCdkHeaderCell.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: CdkHeaderCell, selectors: [[\"cdk-header-cell\"], [\"th\", \"cdk-header-cell\", \"\"]], hostAttrs: [\"role\", \"columnheader\", 1, \"cdk-header-cell\"], features: [ɵngcc0.ɵɵInheritDefinitionFeature] });\n/** @nocollapse */\nCdkHeaderCell.ctorParameters = () => [\n    { type: CdkColumnDef },\n    { type: ElementRef }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkHeaderCell, [{\n        type: Directive,\n        args: [{\n                selector: 'cdk-header-cell, th[cdk-header-cell]',\n                host: {\n                    'class': 'cdk-header-cell',\n                    'role': 'columnheader'\n                }\n            }]\n    }], function () { return [{ type: CdkColumnDef }, { type: ɵngcc0.ElementRef }]; }, null); })();\n/**\n * Footer cell template container that adds the right classes and role.\n */\nclass CdkFooterCell extends BaseCdkCell {\n    /**\n     * @param {?} columnDef\n     * @param {?} elementRef\n     */\n    constructor(columnDef, elementRef) {\n        super(columnDef, elementRef);\n    }\n}\nCdkFooterCell.ɵfac = function CdkFooterCell_Factory(t) { return new (t || CdkFooterCell)(ɵngcc0.ɵɵdirectiveInject(CdkColumnDef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };\nCdkFooterCell.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: CdkFooterCell, selectors: [[\"cdk-footer-cell\"], [\"td\", \"cdk-footer-cell\", \"\"]], hostAttrs: [\"role\", \"gridcell\", 1, \"cdk-footer-cell\"], features: [ɵngcc0.ɵɵInheritDefinitionFeature] });\n/** @nocollapse */\nCdkFooterCell.ctorParameters = () => [\n    { type: CdkColumnDef },\n    { type: ElementRef }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkFooterCell, [{\n        type: Directive,\n        args: [{\n                selector: 'cdk-footer-cell, td[cdk-footer-cell]',\n                host: {\n                    'class': 'cdk-footer-cell',\n                    'role': 'gridcell'\n                }\n            }]\n    }], function () { return [{ type: CdkColumnDef }, { type: ɵngcc0.ElementRef }]; }, null); })();\n/**\n * Cell template container that adds the right classes and role.\n */\nclass CdkCell extends BaseCdkCell {\n    /**\n     * @param {?} columnDef\n     * @param {?} elementRef\n     */\n    constructor(columnDef, elementRef) {\n        super(columnDef, elementRef);\n    }\n}\nCdkCell.ɵfac = function CdkCell_Factory(t) { return new (t || CdkCell)(ɵngcc0.ɵɵdirectiveInject(CdkColumnDef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };\nCdkCell.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: CdkCell, selectors: [[\"cdk-cell\"], [\"td\", \"cdk-cell\", \"\"]], hostAttrs: [\"role\", \"gridcell\", 1, \"cdk-cell\"], features: [ɵngcc0.ɵɵInheritDefinitionFeature] });\n/** @nocollapse */\nCdkCell.ctorParameters = () => [\n    { type: CdkColumnDef },\n    { type: ElementRef }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkCell, [{\n        type: Directive,\n        args: [{\n                selector: 'cdk-cell, td[cdk-cell]',\n                host: {\n                    'class': 'cdk-cell',\n                    'role': 'gridcell'\n                }\n            }]\n    }], function () { return [{ type: CdkColumnDef }, { type: ɵngcc0.ElementRef }]; }, null); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/** *\n * The row template that can be used by the mat-table. Should not be used outside of the\n * material library.\n  @type {?} */\nconst CDK_ROW_TEMPLATE = `<ng-container cdkCellOutlet></ng-container>`;\n/**\n * Base class for the CdkHeaderRowDef and CdkRowDef that handles checking their columns inputs\n * for changes and notifying the table.\n * @abstract\n */\nclass BaseRowDef {\n    /**\n     * @param {?} template\n     * @param {?} _differs\n     */\n    constructor(template, _differs) {\n        this.template = template;\n        this._differs = _differs;\n    }\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    ngOnChanges(changes) {\n        // Create a new columns differ if one does not yet exist. Initialize it based on initial value\n        // of the columns property or an empty array if none is provided.\n        if (!this._columnsDiffer) {\n            /** @type {?} */\n            const columns = (changes['columns'] && changes['columns'].currentValue) || [];\n            this._columnsDiffer = this._differs.find(columns).create();\n            this._columnsDiffer.diff(columns);\n        }\n    }\n    /**\n     * Returns the difference between the current columns and the columns from the last diff, or null\n     * if there is no difference.\n     * @return {?}\n     */\n    getColumnsDiff() {\n        return this._columnsDiffer.diff(this.columns);\n    }\n    /**\n     * Gets this row def's relevant cell template from the provided column def.\n     * @param {?} column\n     * @return {?}\n     */\n    extractCellTemplate(column) {\n        if (this instanceof CdkHeaderRowDef) {\n            return column.headerCell.template;\n        }\n        if (this instanceof CdkFooterRowDef) {\n            return column.footerCell.template;\n        }\n        else {\n            return column.cell.template;\n        }\n    }\n}\nBaseRowDef.ɵfac = function BaseRowDef_Factory(t) { ɵngcc0.ɵɵinvalidFactory(); };\nBaseRowDef.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: BaseRowDef, features: [ɵngcc0.ɵɵNgOnChangesFeature] });\n\n/**\n * \\@docs-private\n */\nclass CdkHeaderRowDefBase extends BaseRowDef {\n}\n/** @type {?} */\nconst _CdkHeaderRowDefBase = mixinHasStickyInput(CdkHeaderRowDefBase);\n/**\n * Header row definition for the CDK table.\n * Captures the header row's template and other header properties such as the columns to display.\n */\nclass CdkHeaderRowDef extends _CdkHeaderRowDefBase {\n    /**\n     * @param {?} template\n     * @param {?} _differs\n     */\n    constructor(template, _differs) {\n        super(template, _differs);\n    }\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    ngOnChanges(changes) {\n        super.ngOnChanges(changes);\n    }\n}\nCdkHeaderRowDef.ɵfac = function CdkHeaderRowDef_Factory(t) { return new (t || CdkHeaderRowDef)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.IterableDiffers)); };\nCdkHeaderRowDef.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: CdkHeaderRowDef, selectors: [[\"\", \"cdkHeaderRowDef\", \"\"]], inputs: { columns: [\"cdkHeaderRowDef\", \"columns\"], sticky: [\"cdkHeaderRowDefSticky\", \"sticky\"] }, features: [ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature] });\n/** @nocollapse */\nCdkHeaderRowDef.ctorParameters = () => [\n    { type: TemplateRef },\n    { type: IterableDiffers }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkHeaderRowDef, [{\n        type: Directive,\n        args: [{\n                selector: '[cdkHeaderRowDef]',\n                inputs: ['columns: cdkHeaderRowDef', 'sticky: cdkHeaderRowDefSticky']\n            }]\n    }], function () { return [{ type: ɵngcc0.TemplateRef }, { type: ɵngcc0.IterableDiffers }]; }, null); })();\n/**\n * \\@docs-private\n */\nclass CdkFooterRowDefBase extends BaseRowDef {\n}\n/** @type {?} */\nconst _CdkFooterRowDefBase = mixinHasStickyInput(CdkFooterRowDefBase);\n/**\n * Footer row definition for the CDK table.\n * Captures the footer row's template and other footer properties such as the columns to display.\n */\nclass CdkFooterRowDef extends _CdkFooterRowDefBase {\n    /**\n     * @param {?} template\n     * @param {?} _differs\n     */\n    constructor(template, _differs) {\n        super(template, _differs);\n    }\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    ngOnChanges(changes) {\n        super.ngOnChanges(changes);\n    }\n}\nCdkFooterRowDef.ɵfac = function CdkFooterRowDef_Factory(t) { return new (t || CdkFooterRowDef)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.IterableDiffers)); };\nCdkFooterRowDef.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: CdkFooterRowDef, selectors: [[\"\", \"cdkFooterRowDef\", \"\"]], inputs: { columns: [\"cdkFooterRowDef\", \"columns\"], sticky: [\"cdkFooterRowDefSticky\", \"sticky\"] }, features: [ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature] });\n/** @nocollapse */\nCdkFooterRowDef.ctorParameters = () => [\n    { type: TemplateRef },\n    { type: IterableDiffers }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkFooterRowDef, [{\n        type: Directive,\n        args: [{\n                selector: '[cdkFooterRowDef]',\n                inputs: ['columns: cdkFooterRowDef', 'sticky: cdkFooterRowDefSticky']\n            }]\n    }], function () { return [{ type: ɵngcc0.TemplateRef }, { type: ɵngcc0.IterableDiffers }]; }, null); })();\n/**\n * Data row definition for the CDK table.\n * Captures the header row's template and other row properties such as the columns to display and\n * a when predicate that describes when this row should be used.\n * @template T\n */\nclass CdkRowDef extends BaseRowDef {\n    /**\n     * @param {?} template\n     * @param {?} _differs\n     */\n    constructor(template, _differs) {\n        super(template, _differs);\n    }\n}\nCdkRowDef.ɵfac = function CdkRowDef_Factory(t) { return new (t || CdkRowDef)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.IterableDiffers)); };\nCdkRowDef.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: CdkRowDef, selectors: [[\"\", \"cdkRowDef\", \"\"]], inputs: { columns: [\"cdkRowDefColumns\", \"columns\"], when: [\"cdkRowDefWhen\", \"when\"] }, features: [ɵngcc0.ɵɵInheritDefinitionFeature] });\n/** @nocollapse */\nCdkRowDef.ctorParameters = () => [\n    { type: TemplateRef },\n    { type: IterableDiffers }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkRowDef, [{\n        type: Directive,\n        args: [{\n                selector: '[cdkRowDef]',\n                inputs: ['columns: cdkRowDefColumns', 'when: cdkRowDefWhen']\n            }]\n    }], function () { return [{ type: ɵngcc0.TemplateRef }, { type: ɵngcc0.IterableDiffers }]; }, null); })();\n/**\n * Outlet for rendering cells inside of a row or header row.\n * \\@docs-private\n */\nclass CdkCellOutlet {\n    /**\n     * @param {?} _viewContainer\n     */\n    constructor(_viewContainer) {\n        this._viewContainer = _viewContainer;\n        CdkCellOutlet.mostRecentCellOutlet = this;\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        // If this was the last outlet being rendered in the view, remove the reference\n        // from the static property after it has been destroyed to avoid leaking memory.\n        if (CdkCellOutlet.mostRecentCellOutlet === this) {\n            CdkCellOutlet.mostRecentCellOutlet = null;\n        }\n    }\n}\nCdkCellOutlet.ɵfac = function CdkCellOutlet_Factory(t) { return new (t || CdkCellOutlet)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef)); };\nCdkCellOutlet.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: CdkCellOutlet, selectors: [[\"\", \"cdkCellOutlet\", \"\"]] });\n/**\n * Static property containing the latest constructed instance of this class.\n * Used by the CDK table when each CdkHeaderRow and CdkRow component is created using\n * createEmbeddedView. After one of these components are created, this property will provide\n * a handle to provide that component's cells and context. After init, the CdkCellOutlet will\n * construct the cells with the provided context.\n */\nCdkCellOutlet.mostRecentCellOutlet = null;\n/** @nocollapse */\nCdkCellOutlet.ctorParameters = () => [\n    { type: ViewContainerRef }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkCellOutlet, [{\n        type: Directive,\n        args: [{ selector: '[cdkCellOutlet]' }]\n    }], function () { return [{ type: ɵngcc0.ViewContainerRef }]; }, null); })();\n/**\n * Header template container that contains the cell outlet. Adds the right class and role.\n */\nclass CdkHeaderRow {\n}\nCdkHeaderRow.ɵfac = function CdkHeaderRow_Factory(t) { return new (t || CdkHeaderRow)(); };\nCdkHeaderRow.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: CdkHeaderRow, selectors: [[\"cdk-header-row\"], [\"tr\", \"cdk-header-row\", \"\"]], hostAttrs: [\"role\", \"row\", 1, \"cdk-header-row\"], decls: 1, vars: 0, consts: [[\"cdkCellOutlet\", \"\"]], template: function CdkHeaderRow_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵelementContainer(0, 0);\n    } }, directives: [CdkCellOutlet], encapsulation: 2, changeDetection: 0 });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkHeaderRow, [{\n        type: Component,\n        args: [{ selector: 'cdk-header-row, tr[cdk-header-row]',\n                template: CDK_ROW_TEMPLATE,\n                host: {\n                    'class': 'cdk-header-row',\n                    'role': 'row'\n                },\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                encapsulation: ViewEncapsulation.None }]\n    }], null, null); })();\n/**\n * Footer template container that contains the cell outlet. Adds the right class and role.\n */\nclass CdkFooterRow {\n}\nCdkFooterRow.ɵfac = function CdkFooterRow_Factory(t) { return new (t || CdkFooterRow)(); };\nCdkFooterRow.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: CdkFooterRow, selectors: [[\"cdk-footer-row\"], [\"tr\", \"cdk-footer-row\", \"\"]], hostAttrs: [\"role\", \"row\", 1, \"cdk-footer-row\"], decls: 1, vars: 0, consts: [[\"cdkCellOutlet\", \"\"]], template: function CdkFooterRow_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵelementContainer(0, 0);\n    } }, directives: [CdkCellOutlet], encapsulation: 2, changeDetection: 0 });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkFooterRow, [{\n        type: Component,\n        args: [{ selector: 'cdk-footer-row, tr[cdk-footer-row]',\n                template: CDK_ROW_TEMPLATE,\n                host: {\n                    'class': 'cdk-footer-row',\n                    'role': 'row'\n                },\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                encapsulation: ViewEncapsulation.None }]\n    }], null, null); })();\n/**\n * Data row template container that contains the cell outlet. Adds the right class and role.\n */\nclass CdkRow {\n}\nCdkRow.ɵfac = function CdkRow_Factory(t) { return new (t || CdkRow)(); };\nCdkRow.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: CdkRow, selectors: [[\"cdk-row\"], [\"tr\", \"cdk-row\", \"\"]], hostAttrs: [\"role\", \"row\", 1, \"cdk-row\"], decls: 1, vars: 0, consts: [[\"cdkCellOutlet\", \"\"]], template: function CdkRow_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵelementContainer(0, 0);\n    } }, directives: [CdkCellOutlet], encapsulation: 2, changeDetection: 0 });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkRow, [{\n        type: Component,\n        args: [{ selector: 'cdk-row, tr[cdk-row]',\n                template: CDK_ROW_TEMPLATE,\n                host: {\n                    'class': 'cdk-row',\n                    'role': 'row'\n                },\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                encapsulation: ViewEncapsulation.None }]\n    }], null, null); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * Returns an error to be thrown when attempting to find an unexisting column.\n * \\@docs-private\n * @param {?} id Id whose lookup failed.\n * @return {?}\n */\nfunction getTableUnknownColumnError(id) {\n    return Error(`Could not find column with id \"${id}\".`);\n}\n/**\n * Returns an error to be thrown when two column definitions have the same name.\n * \\@docs-private\n * @param {?} name\n * @return {?}\n */\nfunction getTableDuplicateColumnNameError(name) {\n    return Error(`Duplicate column definition name provided: \"${name}\".`);\n}\n/**\n * Returns an error to be thrown when there are multiple rows that are missing a when function.\n * \\@docs-private\n * @return {?}\n */\nfunction getTableMultipleDefaultRowDefsError() {\n    return Error(`There can only be one default row without a when predicate function.`);\n}\n/**\n * Returns an error to be thrown when there are no matching row defs for a particular set of data.\n * \\@docs-private\n * @param {?} data\n * @return {?}\n */\nfunction getTableMissingMatchingRowDefError(data) {\n    return Error(`Could not find a matching row definition for the` +\n        `provided row data: ${JSON.stringify(data)}`);\n}\n/**\n * Returns an error to be thrown when there is no row definitions present in the content.\n * \\@docs-private\n * @return {?}\n */\nfunction getTableMissingRowDefsError() {\n    return Error('Missing definitions for header, footer, and row; ' +\n        'cannot determine which columns should be rendered.');\n}\n/**\n * Returns an error to be thrown when the data source does not match the compatible types.\n * \\@docs-private\n * @return {?}\n */\nfunction getTableUnknownDataSourceError() {\n    return Error(`Provided data source did not match an array, Observable, or DataSource`);\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/** *\n * List of all possible directions that can be used for sticky positioning.\n * \\@docs-private\n  @type {?} */\nconst STICKY_DIRECTIONS = ['top', 'bottom', 'left', 'right'];\n/**\n * Applies and removes sticky positioning styles to the `CdkTable` rows and columns cells.\n * \\@docs-private\n */\nclass StickyStyler {\n    /**\n     * @param {?} isNativeHtmlTable Whether the sticky logic should be based on a table\n     *     that uses the native `<table>` element.\n     * @param {?} stickCellCss The CSS class that will be applied to every row/cell that has\n     *     sticky positioning applied.\n     * @param {?} direction The directionality context of the table (ltr/rtl); affects column positioning\n     *     by reversing left/right positions.\n     * @param {?=} _isBrowser Whether the table is currently being rendered on the server or the client.\n     */\n    constructor(isNativeHtmlTable, stickCellCss, direction, _isBrowser = true) {\n        this.isNativeHtmlTable = isNativeHtmlTable;\n        this.stickCellCss = stickCellCss;\n        this.direction = direction;\n        this._isBrowser = _isBrowser;\n    }\n    /**\n     * Clears the sticky positioning styles from the row and its cells by resetting the `position`\n     * style, setting the zIndex to 0, and unsetting each provided sticky direction.\n     * @param {?} rows The list of rows that should be cleared from sticking in the provided directions\n     * @param {?} stickyDirections The directions that should no longer be set as sticky on the rows.\n     * @return {?}\n     */\n    clearStickyPositioning(rows, stickyDirections) {\n        for (const row of rows) {\n            // If the row isn't an element (e.g. if it's an `ng-container`),\n            // it won't have inline styles or `children` so we skip it.\n            if (row.nodeType !== row.ELEMENT_NODE) {\n                continue;\n            }\n            this._removeStickyStyle(row, stickyDirections);\n            for (let i = 0; i < row.children.length; i++) {\n                /** @type {?} */\n                const cell = /** @type {?} */ (row.children[i]);\n                this._removeStickyStyle(cell, stickyDirections);\n            }\n        }\n    }\n    /**\n     * Applies sticky left and right positions to the cells of each row according to the sticky\n     * states of the rendered column definitions.\n     * @param {?} rows The rows that should have its set of cells stuck according to the sticky states.\n     * @param {?} stickyStartStates A list of boolean states where each state represents whether the cell\n     *     in this index position should be stuck to the start of the row.\n     * @param {?} stickyEndStates A list of boolean states where each state represents whether the cell\n     *     in this index position should be stuck to the end of the row.\n     * @return {?}\n     */\n    updateStickyColumns(rows, stickyStartStates, stickyEndStates) {\n        /** @type {?} */\n        const hasStickyColumns = stickyStartStates.some(state => state) || stickyEndStates.some(state => state);\n        if (!rows.length || !hasStickyColumns || !this._isBrowser) {\n            return;\n        }\n        /** @type {?} */\n        const firstRow = rows[0];\n        /** @type {?} */\n        const numCells = firstRow.children.length;\n        /** @type {?} */\n        const cellWidths = this._getCellWidths(firstRow);\n        /** @type {?} */\n        const startPositions = this._getStickyStartColumnPositions(cellWidths, stickyStartStates);\n        /** @type {?} */\n        const endPositions = this._getStickyEndColumnPositions(cellWidths, stickyEndStates);\n        /** @type {?} */\n        const isRtl = this.direction === 'rtl';\n        for (const row of rows) {\n            for (let i = 0; i < numCells; i++) {\n                /** @type {?} */\n                const cell = /** @type {?} */ (row.children[i]);\n                if (stickyStartStates[i]) {\n                    this._addStickyStyle(cell, isRtl ? 'right' : 'left', startPositions[i]);\n                }\n                if (stickyEndStates[i]) {\n                    this._addStickyStyle(cell, isRtl ? 'left' : 'right', endPositions[i]);\n                }\n            }\n        }\n    }\n    /**\n     * Applies sticky positioning to the row's cells if using the native table layout, and to the\n     * row itself otherwise.\n     * @param {?} rowsToStick The list of rows that should be stuck according to their corresponding\n     *     sticky state and to the provided top or bottom position.\n     * @param {?} stickyStates A list of boolean states where each state represents whether the row\n     *     should be stuck in the particular top or bottom position.\n     * @param {?} position The position direction in which the row should be stuck if that row should be\n     *     sticky.\n     *\n     * @return {?}\n     */\n    stickRows(rowsToStick, stickyStates, position) {\n        // Since we can't measure the rows on the server, we can't stick the rows properly.\n        if (!this._isBrowser) {\n            return;\n        }\n        /** @type {?} */\n        const rows = position === 'bottom' ? rowsToStick.reverse() : rowsToStick;\n        /** @type {?} */\n        let stickyHeight = 0;\n        for (let rowIndex = 0; rowIndex < rows.length; rowIndex++) {\n            if (!stickyStates[rowIndex]) {\n                continue;\n            }\n            /** @type {?} */\n            const row = rows[rowIndex];\n            if (this.isNativeHtmlTable) {\n                for (let j = 0; j < row.children.length; j++) {\n                    /** @type {?} */\n                    const cell = /** @type {?} */ (row.children[j]);\n                    this._addStickyStyle(cell, position, stickyHeight);\n                }\n            }\n            else {\n                // Flex does not respect the stick positioning on the cells, needs to be applied to the row.\n                // If this is applied on a native table, Safari causes the header to fly in wrong direction.\n                this._addStickyStyle(row, position, stickyHeight);\n            }\n            if (rowIndex === rows.length - 1) {\n                // prevent unnecessary reflow from getBoundingClientRect()\n                return;\n            }\n            stickyHeight += row.getBoundingClientRect().height;\n        }\n    }\n    /**\n     * When using the native table in Safari, sticky footer cells do not stick. The only way to stick\n     * footer rows is to apply sticky styling to the tfoot container. This should only be done if\n     * all footer rows are sticky. If not all footer rows are sticky, remove sticky positioning from\n     * the tfoot element.\n     * @param {?} tableElement\n     * @param {?} stickyStates\n     * @return {?}\n     */\n    updateStickyFooterContainer(tableElement, stickyStates) {\n        if (!this.isNativeHtmlTable) {\n            return;\n        }\n        /** @type {?} */\n        const tfoot = /** @type {?} */ ((tableElement.querySelector('tfoot')));\n        if (stickyStates.some(state => !state)) {\n            this._removeStickyStyle(tfoot, ['bottom']);\n        }\n        else {\n            this._addStickyStyle(tfoot, 'bottom', 0);\n        }\n    }\n    /**\n     * Removes the sticky style on the element by removing the sticky cell CSS class, re-evaluating\n     * the zIndex, removing each of the provided sticky directions, and removing the\n     * sticky position if there are no more directions.\n     * @param {?} element\n     * @param {?} stickyDirections\n     * @return {?}\n     */\n    _removeStickyStyle(element, stickyDirections) {\n        for (const dir of stickyDirections) {\n            element.style[dir] = '';\n        }\n        element.style.zIndex = this._getCalculatedZIndex(element);\n        /** @type {?} */\n        const hasDirection = STICKY_DIRECTIONS.some(dir => !!element.style[dir]);\n        if (!hasDirection) {\n            element.style.position = '';\n            element.classList.remove(this.stickCellCss);\n        }\n    }\n    /**\n     * Adds the sticky styling to the element by adding the sticky style class, changing position\n     * to be sticky (and -webkit-sticky), setting the appropriate zIndex, and adding a sticky\n     * direction and value.\n     * @param {?} element\n     * @param {?} dir\n     * @param {?} dirValue\n     * @return {?}\n     */\n    _addStickyStyle(element, dir, dirValue) {\n        element.classList.add(this.stickCellCss);\n        element.style[dir] = `${dirValue}px`;\n        element.style.cssText += 'position: -webkit-sticky; position: sticky; ';\n        element.style.zIndex = this._getCalculatedZIndex(element);\n    }\n    /**\n     * Calculate what the z-index should be for the element, depending on what directions (top,\n     * bottom, left, right) have been set. It should be true that elements with a top direction\n     * should have the highest index since these are elements like a table header. If any of those\n     * elements are also sticky in another direction, then they should appear above other elements\n     * that are only sticky top (e.g. a sticky column on a sticky header). Bottom-sticky elements\n     * (e.g. footer rows) should then be next in the ordering such that they are below the header\n     * but above any non-sticky elements. Finally, left/right sticky elements (e.g. sticky columns)\n     * should minimally increment so that they are above non-sticky elements but below top and bottom\n     * elements.\n     * @param {?} element\n     * @return {?}\n     */\n    _getCalculatedZIndex(element) {\n        /** @type {?} */\n        const zIndexIncrements = {\n            top: 100,\n            bottom: 10,\n            left: 1,\n            right: 1,\n        };\n        /** @type {?} */\n        let zIndex = 0;\n        for (const dir of STICKY_DIRECTIONS) {\n            if (element.style[dir]) {\n                zIndex += zIndexIncrements[dir];\n            }\n        }\n        return zIndex ? `${zIndex}` : '';\n    }\n    /**\n     * Gets the widths for each cell in the provided row.\n     * @param {?} row\n     * @return {?}\n     */\n    _getCellWidths(row) {\n        /** @type {?} */\n        const cellWidths = [];\n        /** @type {?} */\n        const firstRowCells = row.children;\n        for (let i = 0; i < firstRowCells.length; i++) {\n            /** @type {?} */\n            let cell = /** @type {?} */ (firstRowCells[i]);\n            cellWidths.push(cell.getBoundingClientRect().width);\n        }\n        return cellWidths;\n    }\n    /**\n     * Determines the left and right positions of each sticky column cell, which will be the\n     * accumulation of all sticky column cell widths to the left and right, respectively.\n     * Non-sticky cells do not need to have a value set since their positions will not be applied.\n     * @param {?} widths\n     * @param {?} stickyStates\n     * @return {?}\n     */\n    _getStickyStartColumnPositions(widths, stickyStates) {\n        /** @type {?} */\n        const positions = [];\n        /** @type {?} */\n        let nextPosition = 0;\n        for (let i = 0; i < widths.length; i++) {\n            if (stickyStates[i]) {\n                positions[i] = nextPosition;\n                nextPosition += widths[i];\n            }\n        }\n        return positions;\n    }\n    /**\n     * Determines the left and right positions of each sticky column cell, which will be the\n     * accumulation of all sticky column cell widths to the left and right, respectively.\n     * Non-sticky cells do not need to have a value set since their positions will not be applied.\n     * @param {?} widths\n     * @param {?} stickyStates\n     * @return {?}\n     */\n    _getStickyEndColumnPositions(widths, stickyStates) {\n        /** @type {?} */\n        const positions = [];\n        /** @type {?} */\n        let nextPosition = 0;\n        for (let i = widths.length; i > 0; i--) {\n            if (stickyStates[i]) {\n                positions[i] = nextPosition;\n                nextPosition += widths[i];\n            }\n        }\n        return positions;\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * Provides a handle for the table to grab the view container's ng-container to insert data rows.\n * \\@docs-private\n */\nclass DataRowOutlet {\n    /**\n     * @param {?} viewContainer\n     * @param {?} elementRef\n     */\n    constructor(viewContainer, elementRef) {\n        this.viewContainer = viewContainer;\n        this.elementRef = elementRef;\n    }\n}\nDataRowOutlet.ɵfac = function DataRowOutlet_Factory(t) { return new (t || DataRowOutlet)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };\nDataRowOutlet.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: DataRowOutlet, selectors: [[\"\", \"rowOutlet\", \"\"]] });\n/** @nocollapse */\nDataRowOutlet.ctorParameters = () => [\n    { type: ViewContainerRef },\n    { type: ElementRef }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DataRowOutlet, [{\n        type: Directive,\n        args: [{ selector: '[rowOutlet]' }]\n    }], function () { return [{ type: ɵngcc0.ViewContainerRef }, { type: ɵngcc0.ElementRef }]; }, null); })();\n/**\n * Provides a handle for the table to grab the view container's ng-container to insert the header.\n * \\@docs-private\n */\nclass HeaderRowOutlet {\n    /**\n     * @param {?} viewContainer\n     * @param {?} elementRef\n     */\n    constructor(viewContainer, elementRef) {\n        this.viewContainer = viewContainer;\n        this.elementRef = elementRef;\n    }\n}\nHeaderRowOutlet.ɵfac = function HeaderRowOutlet_Factory(t) { return new (t || HeaderRowOutlet)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };\nHeaderRowOutlet.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: HeaderRowOutlet, selectors: [[\"\", \"headerRowOutlet\", \"\"]] });\n/** @nocollapse */\nHeaderRowOutlet.ctorParameters = () => [\n    { type: ViewContainerRef },\n    { type: ElementRef }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(HeaderRowOutlet, [{\n        type: Directive,\n        args: [{ selector: '[headerRowOutlet]' }]\n    }], function () { return [{ type: ɵngcc0.ViewContainerRef }, { type: ɵngcc0.ElementRef }]; }, null); })();\n/**\n * Provides a handle for the table to grab the view container's ng-container to insert the footer.\n * \\@docs-private\n */\nclass FooterRowOutlet {\n    /**\n     * @param {?} viewContainer\n     * @param {?} elementRef\n     */\n    constructor(viewContainer, elementRef) {\n        this.viewContainer = viewContainer;\n        this.elementRef = elementRef;\n    }\n}\nFooterRowOutlet.ɵfac = function FooterRowOutlet_Factory(t) { return new (t || FooterRowOutlet)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };\nFooterRowOutlet.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: FooterRowOutlet, selectors: [[\"\", \"footerRowOutlet\", \"\"]] });\n/** @nocollapse */\nFooterRowOutlet.ctorParameters = () => [\n    { type: ViewContainerRef },\n    { type: ElementRef }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(FooterRowOutlet, [{\n        type: Directive,\n        args: [{ selector: '[footerRowOutlet]' }]\n    }], function () { return [{ type: ɵngcc0.ViewContainerRef }, { type: ɵngcc0.ElementRef }]; }, null); })();\n/** *\n * The table template that can be used by the mat-table. Should not be used outside of the\n * material library.\n * \\@docs-private\n  @type {?} */\nconst CDK_TABLE_TEMPLATE = `\n  <ng-container headerRowOutlet></ng-container>\n  <ng-container rowOutlet></ng-container>\n  <ng-container footerRowOutlet></ng-container>`;\n/**\n * A data table that can render a header row, data rows, and a footer row.\n * Uses the dataSource input to determine the data to be rendered. The data can be provided either\n * as a data array, an Observable stream that emits the data array to render, or a DataSource with a\n * connect function that will return an Observable stream that emits the data array to render.\n * @template T\n */\nclass CdkTable {\n    /**\n     * @param {?} _differs\n     * @param {?} _changeDetectorRef\n     * @param {?} _elementRef\n     * @param {?} role\n     * @param {?} _dir\n     * @param {?=} _document\n     * @param {?=} _platform\n     */\n    constructor(_differs, _changeDetectorRef, _elementRef, role, _dir, /**\n                   * @deprecated\n                   * @breaking-change 8.0.0 `_document` and `_platform` to\n                   *    be made into a required parameters.\n                   */\n    _document, _platform) {\n        this._differs = _differs;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._elementRef = _elementRef;\n        this._dir = _dir;\n        this._platform = _platform;\n        /**\n         * Subject that emits when the component has been destroyed.\n         */\n        this._onDestroy = new Subject();\n        /**\n         * Map of all the user's defined columns (header, data, and footer cell template) identified by\n         * name. Collection populated by the column definitions gathered by `ContentChildren` as well as\n         * any custom column definitions added to `_customColumnDefs`.\n         */\n        this._columnDefsByName = new Map();\n        /**\n         * Column definitions that were defined outside of the direct content children of the table.\n         * These will be defined when, e.g., creating a wrapper around the cdkTable that has\n         * column definitions as *it's* content child.\n         */\n        this._customColumnDefs = new Set();\n        /**\n         * Data row definitions that were defined outside of the direct content children of the table.\n         * These will be defined when, e.g., creating a wrapper around the cdkTable that has\n         * built-in data rows as *it's* content child.\n         */\n        this._customRowDefs = new Set();\n        /**\n         * Header row definitions that were defined outside of the direct content children of the table.\n         * These will be defined when, e.g., creating a wrapper around the cdkTable that has\n         * built-in header rows as *it's* content child.\n         */\n        this._customHeaderRowDefs = new Set();\n        /**\n         * Footer row definitions that were defined outside of the direct content children of the table.\n         * These will be defined when, e.g., creating a wrapper around the cdkTable that has a\n         * built-in footer row as *it's* content child.\n         */\n        this._customFooterRowDefs = new Set();\n        /**\n         * Whether the header row definition has been changed. Triggers an update to the header row after\n         * content is checked. Initialized as true so that the table renders the initial set of rows.\n         */\n        this._headerRowDefChanged = true;\n        /**\n         * Whether the footer row definition has been changed. Triggers an update to the footer row after\n         * content is checked. Initialized as true so that the table renders the initial set of rows.\n         */\n        this._footerRowDefChanged = true;\n        /**\n         * Cache of the latest rendered `RenderRow` objects as a map for easy retrieval when constructing\n         * a new list of `RenderRow` objects for rendering rows. Since the new list is constructed with\n         * the cached `RenderRow` objects when possible, the row identity is preserved when the data\n         * and row template matches, which allows the `IterableDiffer` to check rows by reference\n         * and understand which rows are added/moved/removed.\n         *\n         * Implemented as a map of maps where the first key is the `data: T` object and the second is the\n         * `CdkRowDef<T>` object. With the two keys, the cache points to a `RenderRow<T>` object that\n         * contains an array of created pairs. The array is necessary to handle cases where the data\n         * array contains multiple duplicate data objects and each instantiated `RenderRow` must be\n         * stored.\n         */\n        this._cachedRenderRowsMap = new Map();\n        /**\n         * CSS class added to any row or cell that has sticky positioning applied. May be overriden by\n         * table subclasses.\n         */\n        this.stickyCssClass = 'cdk-table-sticky';\n        this._multiTemplateDataRows = false;\n        /**\n         * Stream containing the latest information on what rows are being displayed on screen.\n         * Can be used by the data source to as a heuristic of what data should be provided.\n         */\n        this.viewChange = new BehaviorSubject({ start: 0, end: Number.MAX_VALUE });\n        if (!role) {\n            this._elementRef.nativeElement.setAttribute('role', 'grid');\n        }\n        this._document = _document;\n        this._isNativeHtmlTable = this._elementRef.nativeElement.nodeName === 'TABLE';\n    }\n    /**\n     * Tracking function that will be used to check the differences in data changes. Used similarly\n     * to `ngFor` `trackBy` function. Optimize row operations by identifying a row based on its data\n     * relative to the function to know if a row should be added/removed/moved.\n     * Accepts a function that takes two parameters, `index` and `item`.\n     * @return {?}\n     */\n    get trackBy() { return this._trackByFn; }\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    set trackBy(fn) {\n        if (isDevMode() &&\n            fn != null && typeof fn !== 'function' && /** @type {?} */ (console) && /** @type {?} */ (console.warn)) {\n            console.warn(`trackBy must be a function, but received ${JSON.stringify(fn)}.`);\n        }\n        this._trackByFn = fn;\n    }\n    /**\n     * The table's source of data, which can be provided in three ways (in order of complexity):\n     *   - Simple data array (each object represents one table row)\n     *   - Stream that emits a data array each time the array changes\n     *   - `DataSource` object that implements the connect/disconnect interface.\n     *\n     * If a data array is provided, the table must be notified when the array's objects are\n     * added, removed, or moved. This can be done by calling the `renderRows()` function which will\n     * render the diff since the last table render. If the data array reference is changed, the table\n     * will automatically trigger an update to the rows.\n     *\n     * When providing an Observable stream, the table will trigger an update automatically when the\n     * stream emits a new array of data.\n     *\n     * Finally, when providing a `DataSource` object, the table will use the Observable stream\n     * provided by the connect function and trigger updates when that stream emits new data array\n     * values. During the table's ngOnDestroy or when the data source is removed from the table, the\n     * table will call the DataSource's `disconnect` function (may be useful for cleaning up any\n     * subscriptions registered during the connect process).\n     * @return {?}\n     */\n    get dataSource() { return this._dataSource; }\n    /**\n     * @param {?} dataSource\n     * @return {?}\n     */\n    set dataSource(dataSource) {\n        if (this._dataSource !== dataSource) {\n            this._switchDataSource(dataSource);\n        }\n    }\n    /**\n     * Whether to allow multiple rows per data object by evaluating which rows evaluate their 'when'\n     * predicate to true. If `multiTemplateDataRows` is false, which is the default value, then each\n     * dataobject will render the first row that evaluates its when predicate to true, in the order\n     * defined in the table, or otherwise the default row which does not have a when predicate.\n     * @return {?}\n     */\n    get multiTemplateDataRows() { return this._multiTemplateDataRows; }\n    /**\n     * @param {?} v\n     * @return {?}\n     */\n    set multiTemplateDataRows(v) {\n        this._multiTemplateDataRows = coerceBooleanProperty(v);\n        if (this._rowOutlet.viewContainer.length) {\n            this._forceRenderDataRows();\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngOnInit() {\n        this._setupStickyStyler();\n        if (this._isNativeHtmlTable) {\n            this._applyNativeTableSections();\n        }\n        // Set up the trackBy function so that it uses the `RenderRow` as its identity by default. If\n        // the user has provided a custom trackBy, return the result of that function as evaluated\n        // with the values of the `RenderRow`'s data and index.\n        this._dataDiffer = this._differs.find([]).create((_i, dataRow) => {\n            return this.trackBy ? this.trackBy(dataRow.dataIndex, dataRow.data) : dataRow;\n        });\n    }\n    /**\n     * @return {?}\n     */\n    ngAfterContentChecked() {\n        // Cache the row and column definitions gathered by ContentChildren and programmatic injection.\n        this._cacheRowDefs();\n        this._cacheColumnDefs();\n        // Make sure that the user has at least added header, footer, or data row def.\n        if (!this._headerRowDefs.length && !this._footerRowDefs.length && !this._rowDefs.length) {\n            throw getTableMissingRowDefsError();\n        }\n        // Render updates if the list of columns have been changed for the header, row, or footer defs.\n        this._renderUpdatedColumns();\n        // If the header row definition has been changed, trigger a render to the header row.\n        if (this._headerRowDefChanged) {\n            this._forceRenderHeaderRows();\n            this._headerRowDefChanged = false;\n        }\n        // If the footer row definition has been changed, trigger a render to the footer row.\n        if (this._footerRowDefChanged) {\n            this._forceRenderFooterRows();\n            this._footerRowDefChanged = false;\n        }\n        // If there is a data source and row definitions, connect to the data source unless a\n        // connection has already been made.\n        if (this.dataSource && this._rowDefs.length > 0 && !this._renderChangeSubscription) {\n            this._observeRenderChanges();\n        }\n        this._checkStickyStates();\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this._rowOutlet.viewContainer.clear();\n        this._headerRowOutlet.viewContainer.clear();\n        this._footerRowOutlet.viewContainer.clear();\n        this._cachedRenderRowsMap.clear();\n        this._onDestroy.next();\n        this._onDestroy.complete();\n        if (this.dataSource instanceof DataSource) {\n            this.dataSource.disconnect(this);\n        }\n    }\n    /**\n     * Renders rows based on the table's latest set of data, which was either provided directly as an\n     * input or retrieved through an Observable stream (directly or from a DataSource).\n     * Checks for differences in the data since the last diff to perform only the necessary\n     * changes (add/remove/move rows).\n     *\n     * If the table's data source is a DataSource or Observable, this will be invoked automatically\n     * each time the provided Observable stream emits a new data array. Otherwise if your data is\n     * an array, this function will need to be called to render any changes.\n     * @return {?}\n     */\n    renderRows() {\n        this._renderRows = this._getAllRenderRows();\n        /** @type {?} */\n        const changes = this._dataDiffer.diff(this._renderRows);\n        if (!changes) {\n            return;\n        }\n        /** @type {?} */\n        const viewContainer = this._rowOutlet.viewContainer;\n        changes.forEachOperation((record, prevIndex, currentIndex) => {\n            if (record.previousIndex == null) {\n                this._insertRow(record.item, /** @type {?} */ ((currentIndex)));\n            }\n            else if (currentIndex == null) {\n                viewContainer.remove(/** @type {?} */ ((prevIndex)));\n            }\n            else {\n                /** @type {?} */\n                const view = /** @type {?} */ (viewContainer.get(/** @type {?} */ ((prevIndex))));\n                viewContainer.move(/** @type {?} */ ((view)), currentIndex);\n            }\n        });\n        // Update the meta context of a row's context data (index, count, first, last, ...)\n        this._updateRowIndexContext();\n        // Update rows that did not get added/removed/moved but may have had their identity changed,\n        // e.g. if trackBy matched data on some property but the actual data reference changed.\n        changes.forEachIdentityChange((record) => {\n            /** @type {?} */\n            const rowView = /** @type {?} */ (viewContainer.get(/** @type {?} */ ((record.currentIndex))));\n            rowView.context.$implicit = record.item.data;\n        });\n        this.updateStickyColumnStyles();\n    }\n    /**\n     * Sets the header row definition to be used. Overrides the header row definition gathered by\n     * using `ContentChild`, if one exists. Sets a flag that will re-render the header row after the\n     * table's content is checked.\n     * \\@docs-private\n     * @deprecated Use `addHeaderRowDef` and `removeHeaderRowDef` instead\n     * \\@breaking-change 8.0.0\n     * @param {?} headerRowDef\n     * @return {?}\n     */\n    setHeaderRowDef(headerRowDef) {\n        this._customHeaderRowDefs = new Set([headerRowDef]);\n        this._headerRowDefChanged = true;\n    }\n    /**\n     * Sets the footer row definition to be used. Overrides the footer row definition gathered by\n     * using `ContentChild`, if one exists. Sets a flag that will re-render the footer row after the\n     * table's content is checked.\n     * \\@docs-private\n     * @deprecated Use `addFooterRowDef` and `removeFooterRowDef` instead\n     * \\@breaking-change 8.0.0\n     * @param {?} footerRowDef\n     * @return {?}\n     */\n    setFooterRowDef(footerRowDef) {\n        this._customFooterRowDefs = new Set([footerRowDef]);\n        this._footerRowDefChanged = true;\n    }\n    /**\n     * Adds a column definition that was not included as part of the content children.\n     * @param {?} columnDef\n     * @return {?}\n     */\n    addColumnDef(columnDef) {\n        this._customColumnDefs.add(columnDef);\n    }\n    /**\n     * Removes a column definition that was not included as part of the content children.\n     * @param {?} columnDef\n     * @return {?}\n     */\n    removeColumnDef(columnDef) {\n        this._customColumnDefs.delete(columnDef);\n    }\n    /**\n     * Adds a row definition that was not included as part of the content children.\n     * @param {?} rowDef\n     * @return {?}\n     */\n    addRowDef(rowDef) {\n        this._customRowDefs.add(rowDef);\n    }\n    /**\n     * Removes a row definition that was not included as part of the content children.\n     * @param {?} rowDef\n     * @return {?}\n     */\n    removeRowDef(rowDef) {\n        this._customRowDefs.delete(rowDef);\n    }\n    /**\n     * Adds a header row definition that was not included as part of the content children.\n     * @param {?} headerRowDef\n     * @return {?}\n     */\n    addHeaderRowDef(headerRowDef) {\n        this._customHeaderRowDefs.add(headerRowDef);\n        this._headerRowDefChanged = true;\n    }\n    /**\n     * Removes a header row definition that was not included as part of the content children.\n     * @param {?} headerRowDef\n     * @return {?}\n     */\n    removeHeaderRowDef(headerRowDef) {\n        this._customHeaderRowDefs.delete(headerRowDef);\n        this._headerRowDefChanged = true;\n    }\n    /**\n     * Adds a footer row definition that was not included as part of the content children.\n     * @param {?} footerRowDef\n     * @return {?}\n     */\n    addFooterRowDef(footerRowDef) {\n        this._customFooterRowDefs.add(footerRowDef);\n        this._footerRowDefChanged = true;\n    }\n    /**\n     * Removes a footer row definition that was not included as part of the content children.\n     * @param {?} footerRowDef\n     * @return {?}\n     */\n    removeFooterRowDef(footerRowDef) {\n        this._customFooterRowDefs.delete(footerRowDef);\n        this._footerRowDefChanged = true;\n    }\n    /**\n     * Updates the header sticky styles. First resets all applied styles with respect to the cells\n     * sticking to the top. Then, evaluating which cells need to be stuck to the top. This is\n     * automatically called when the header row changes its displayed set of columns, or if its\n     * sticky input changes. May be called manually for cases where the cell content changes outside\n     * of these events.\n     * @return {?}\n     */\n    updateStickyHeaderRowStyles() {\n        /** @type {?} */\n        const headerRows = this._getRenderedRows(this._headerRowOutlet);\n        this._stickyStyler.clearStickyPositioning(headerRows, ['top']);\n        /** @type {?} */\n        const stickyStates = this._headerRowDefs.map(def => def.sticky);\n        this._stickyStyler.stickRows(headerRows, stickyStates, 'top');\n        // Reset the dirty state of the sticky input change since it has been used.\n        this._headerRowDefs.forEach(def => def.resetStickyChanged());\n    }\n    /**\n     * Updates the footer sticky styles. First resets all applied styles with respect to the cells\n     * sticking to the bottom. Then, evaluating which cells need to be stuck to the bottom. This is\n     * automatically called when the footer row changes its displayed set of columns, or if its\n     * sticky input changes. May be called manually for cases where the cell content changes outside\n     * of these events.\n     * @return {?}\n     */\n    updateStickyFooterRowStyles() {\n        /** @type {?} */\n        const footerRows = this._getRenderedRows(this._footerRowOutlet);\n        this._stickyStyler.clearStickyPositioning(footerRows, ['bottom']);\n        /** @type {?} */\n        const stickyStates = this._footerRowDefs.map(def => def.sticky);\n        this._stickyStyler.stickRows(footerRows, stickyStates, 'bottom');\n        this._stickyStyler.updateStickyFooterContainer(this._elementRef.nativeElement, stickyStates);\n        // Reset the dirty state of the sticky input change since it has been used.\n        this._footerRowDefs.forEach(def => def.resetStickyChanged());\n    }\n    /**\n     * Updates the column sticky styles. First resets all applied styles with respect to the cells\n     * sticking to the left and right. Then sticky styles are added for the left and right according\n     * to the column definitions for each cell in each row. This is automatically called when\n     * the data source provides a new set of data or when a column definition changes its sticky\n     * input. May be called manually for cases where the cell content changes outside of these events.\n     * @return {?}\n     */\n    updateStickyColumnStyles() {\n        /** @type {?} */\n        const headerRows = this._getRenderedRows(this._headerRowOutlet);\n        /** @type {?} */\n        const dataRows = this._getRenderedRows(this._rowOutlet);\n        /** @type {?} */\n        const footerRows = this._getRenderedRows(this._footerRowOutlet);\n        // Clear the left and right positioning from all columns in the table across all rows since\n        // sticky columns span across all table sections (header, data, footer)\n        this._stickyStyler.clearStickyPositioning([...headerRows, ...dataRows, ...footerRows], ['left', 'right']);\n        // Update the sticky styles for each header row depending on the def's sticky state\n        headerRows.forEach((headerRow, i) => {\n            this._addStickyColumnStyles([headerRow], this._headerRowDefs[i]);\n        });\n        // Update the sticky styles for each data row depending on its def's sticky state\n        this._rowDefs.forEach(rowDef => {\n            /** @type {?} */\n            const rows = [];\n            for (let i = 0; i < dataRows.length; i++) {\n                if (this._renderRows[i].rowDef === rowDef) {\n                    rows.push(dataRows[i]);\n                }\n            }\n            this._addStickyColumnStyles(rows, rowDef);\n        });\n        // Update the sticky styles for each footer row depending on the def's sticky state\n        footerRows.forEach((footerRow, i) => {\n            this._addStickyColumnStyles([footerRow], this._footerRowDefs[i]);\n        });\n        // Reset the dirty state of the sticky input change since it has been used.\n        Array.from(this._columnDefsByName.values()).forEach(def => def.resetStickyChanged());\n    }\n    /**\n     * Get the list of RenderRow objects to render according to the current list of data and defined\n     * row definitions. If the previous list already contained a particular pair, it should be reused\n     * so that the differ equates their references.\n     * @return {?}\n     */\n    _getAllRenderRows() {\n        /** @type {?} */\n        const renderRows = [];\n        /** @type {?} */\n        const prevCachedRenderRows = this._cachedRenderRowsMap;\n        this._cachedRenderRowsMap = new Map();\n        // For each data object, get the list of rows that should be rendered, represented by the\n        // respective `RenderRow` object which is the pair of `data` and `CdkRowDef`.\n        for (let i = 0; i < this._data.length; i++) {\n            /** @type {?} */\n            let data = this._data[i];\n            /** @type {?} */\n            const renderRowsForData = this._getRenderRowsForData(data, i, prevCachedRenderRows.get(data));\n            if (!this._cachedRenderRowsMap.has(data)) {\n                this._cachedRenderRowsMap.set(data, new WeakMap());\n            }\n            for (let j = 0; j < renderRowsForData.length; j++) {\n                /** @type {?} */\n                let renderRow = renderRowsForData[j];\n                /** @type {?} */\n                const cache = /** @type {?} */ ((this._cachedRenderRowsMap.get(renderRow.data)));\n                if (cache.has(renderRow.rowDef)) {\n                    /** @type {?} */ ((cache.get(renderRow.rowDef))).push(renderRow);\n                }\n                else {\n                    cache.set(renderRow.rowDef, [renderRow]);\n                }\n                renderRows.push(renderRow);\n            }\n        }\n        return renderRows;\n    }\n    /**\n     * Gets a list of `RenderRow<T>` for the provided data object and any `CdkRowDef` objects that\n     * should be rendered for this data. Reuses the cached RenderRow objects if they match the same\n     * `(T, CdkRowDef)` pair.\n     * @param {?} data\n     * @param {?} dataIndex\n     * @param {?=} cache\n     * @return {?}\n     */\n    _getRenderRowsForData(data, dataIndex, cache) {\n        /** @type {?} */\n        const rowDefs = this._getRowDefs(data, dataIndex);\n        return rowDefs.map(rowDef => {\n            /** @type {?} */\n            const cachedRenderRows = (cache && cache.has(rowDef)) ? /** @type {?} */ ((cache.get(rowDef))) : [];\n            if (cachedRenderRows.length) {\n                /** @type {?} */\n                const dataRow = /** @type {?} */ ((cachedRenderRows.shift()));\n                dataRow.dataIndex = dataIndex;\n                return dataRow;\n            }\n            else {\n                return { data, rowDef, dataIndex };\n            }\n        });\n    }\n    /**\n     * Update the map containing the content's column definitions.\n     * @return {?}\n     */\n    _cacheColumnDefs() {\n        this._columnDefsByName.clear();\n        /** @type {?} */\n        const columnDefs = mergeQueryListAndSet(this._contentColumnDefs, this._customColumnDefs);\n        columnDefs.forEach(columnDef => {\n            if (this._columnDefsByName.has(columnDef.name)) {\n                throw getTableDuplicateColumnNameError(columnDef.name);\n            }\n            this._columnDefsByName.set(columnDef.name, columnDef);\n        });\n    }\n    /**\n     * Update the list of all available row definitions that can be used.\n     * @return {?}\n     */\n    _cacheRowDefs() {\n        this._headerRowDefs =\n            mergeQueryListAndSet(this._contentHeaderRowDefs, this._customHeaderRowDefs);\n        this._footerRowDefs =\n            mergeQueryListAndSet(this._contentFooterRowDefs, this._customFooterRowDefs);\n        this._rowDefs =\n            mergeQueryListAndSet(this._contentRowDefs, this._customRowDefs);\n        /** @type {?} */\n        const defaultRowDefs = this._rowDefs.filter(def => !def.when);\n        if (!this.multiTemplateDataRows && defaultRowDefs.length > 1) {\n            throw getTableMultipleDefaultRowDefsError();\n        }\n        this._defaultRowDef = defaultRowDefs[0];\n    }\n    /**\n     * Check if the header, data, or footer rows have changed what columns they want to display or\n     * whether the sticky states have changed for the header or footer. If there is a diff, then\n     * re-render that section.\n     * @return {?}\n     */\n    _renderUpdatedColumns() {\n        /** @type {?} */\n        const columnsDiffReducer = (acc, def) => acc || !!def.getColumnsDiff();\n        // Force re-render data rows if the list of column definitions have changed.\n        if (this._rowDefs.reduce(columnsDiffReducer, false)) {\n            this._forceRenderDataRows();\n        }\n        // Force re-render header/footer rows if the list of column definitions have changed..\n        if (this._headerRowDefs.reduce(columnsDiffReducer, false)) {\n            this._forceRenderHeaderRows();\n        }\n        if (this._footerRowDefs.reduce(columnsDiffReducer, false)) {\n            this._forceRenderFooterRows();\n        }\n    }\n    /**\n     * Switch to the provided data source by resetting the data and unsubscribing from the current\n     * render change subscription if one exists. If the data source is null, interpret this by\n     * clearing the row outlet. Otherwise start listening for new data.\n     * @param {?} dataSource\n     * @return {?}\n     */\n    _switchDataSource(dataSource) {\n        this._data = [];\n        if (this.dataSource instanceof DataSource) {\n            this.dataSource.disconnect(this);\n        }\n        // Stop listening for data from the previous data source.\n        if (this._renderChangeSubscription) {\n            this._renderChangeSubscription.unsubscribe();\n            this._renderChangeSubscription = null;\n        }\n        if (!dataSource) {\n            if (this._dataDiffer) {\n                this._dataDiffer.diff([]);\n            }\n            this._rowOutlet.viewContainer.clear();\n        }\n        this._dataSource = dataSource;\n    }\n    /**\n     * Set up a subscription for the data provided by the data source.\n     * @return {?}\n     */\n    _observeRenderChanges() {\n        // If no data source has been set, there is nothing to observe for changes.\n        if (!this.dataSource) {\n            return;\n        }\n        /** @type {?} */\n        let dataStream;\n        // Check if the datasource is a DataSource object by observing if it has a connect function.\n        // Cannot check this.dataSource['connect'] due to potential property renaming, nor can it\n        // checked as an instanceof DataSource<T> since the table should allow for data sources\n        // that did not explicitly extend DataSource<T>.\n        if ((/** @type {?} */ (this.dataSource)).connect instanceof Function) {\n            dataStream = (/** @type {?} */ (this.dataSource)).connect(this);\n        }\n        else if (this.dataSource instanceof Observable) {\n            dataStream = this.dataSource;\n        }\n        else if (Array.isArray(this.dataSource)) {\n            dataStream = of(this.dataSource);\n        }\n        if (dataStream === undefined) {\n            throw getTableUnknownDataSourceError();\n        }\n        this._renderChangeSubscription = dataStream\n            .pipe(takeUntil(this._onDestroy))\n            .subscribe(data => {\n            this._data = data || [];\n            this.renderRows();\n        });\n    }\n    /**\n     * Clears any existing content in the header row outlet and creates a new embedded view\n     * in the outlet using the header row definition.\n     * @return {?}\n     */\n    _forceRenderHeaderRows() {\n        // Clear the header row outlet if any content exists.\n        if (this._headerRowOutlet.viewContainer.length > 0) {\n            this._headerRowOutlet.viewContainer.clear();\n        }\n        this._headerRowDefs.forEach((def, i) => this._renderRow(this._headerRowOutlet, def, i));\n        this.updateStickyHeaderRowStyles();\n        this.updateStickyColumnStyles();\n    }\n    /**\n     * Clears any existing content in the footer row outlet and creates a new embedded view\n     * in the outlet using the footer row definition.\n     * @return {?}\n     */\n    _forceRenderFooterRows() {\n        // Clear the footer row outlet if any content exists.\n        if (this._footerRowOutlet.viewContainer.length > 0) {\n            this._footerRowOutlet.viewContainer.clear();\n        }\n        this._footerRowDefs.forEach((def, i) => this._renderRow(this._footerRowOutlet, def, i));\n        this.updateStickyFooterRowStyles();\n        this.updateStickyColumnStyles();\n    }\n    /**\n     * Adds the sticky column styles for the rows according to the columns' stick states.\n     * @param {?} rows\n     * @param {?} rowDef\n     * @return {?}\n     */\n    _addStickyColumnStyles(rows, rowDef) {\n        /** @type {?} */\n        const columnDefs = Array.from(rowDef.columns || []).map(c => /** @type {?} */ ((this._columnDefsByName.get(c))));\n        /** @type {?} */\n        const stickyStartStates = columnDefs.map(columnDef => columnDef.sticky);\n        /** @type {?} */\n        const stickyEndStates = columnDefs.map(columnDef => columnDef.stickyEnd);\n        this._stickyStyler.updateStickyColumns(rows, stickyStartStates, stickyEndStates);\n    }\n    /**\n     * Gets the list of rows that have been rendered in the row outlet.\n     * @param {?} rowOutlet\n     * @return {?}\n     */\n    _getRenderedRows(rowOutlet) {\n        /** @type {?} */\n        const renderedRows = [];\n        for (let i = 0; i < rowOutlet.viewContainer.length; i++) {\n            /** @type {?} */\n            const viewRef = (/** @type {?} */ (((rowOutlet.viewContainer.get(i)))));\n            renderedRows.push(viewRef.rootNodes[0]);\n        }\n        return renderedRows;\n    }\n    /**\n     * Get the matching row definitions that should be used for this row data. If there is only\n     * one row definition, it is returned. Otherwise, find the row definitions that has a when\n     * predicate that returns true with the data. If none return true, return the default row\n     * definition.\n     * @param {?} data\n     * @param {?} dataIndex\n     * @return {?}\n     */\n    _getRowDefs(data, dataIndex) {\n        if (this._rowDefs.length == 1) {\n            return [this._rowDefs[0]];\n        }\n        /** @type {?} */\n        let rowDefs = [];\n        if (this.multiTemplateDataRows) {\n            rowDefs = this._rowDefs.filter(def => !def.when || def.when(dataIndex, data));\n        }\n        else {\n            /** @type {?} */\n            let rowDef = this._rowDefs.find(def => def.when && def.when(dataIndex, data)) || this._defaultRowDef;\n            if (rowDef) {\n                rowDefs.push(rowDef);\n            }\n        }\n        if (!rowDefs.length) {\n            throw getTableMissingMatchingRowDefError(data);\n        }\n        return rowDefs;\n    }\n    /**\n     * Create the embedded view for the data row template and place it in the correct index location\n     * within the data row view container.\n     * @param {?} renderRow\n     * @param {?} renderIndex\n     * @return {?}\n     */\n    _insertRow(renderRow, renderIndex) {\n        /** @type {?} */\n        const rowDef = renderRow.rowDef;\n        /** @type {?} */\n        const context = { $implicit: renderRow.data };\n        this._renderRow(this._rowOutlet, rowDef, renderIndex, context);\n    }\n    /**\n     * Creates a new row template in the outlet and fills it with the set of cell templates.\n     * Optionally takes a context to provide to the row and cells, as well as an optional index\n     * of where to place the new row template in the outlet.\n     * @param {?} outlet\n     * @param {?} rowDef\n     * @param {?} index\n     * @param {?=} context\n     * @return {?}\n     */\n    _renderRow(outlet, rowDef, index, context = {}) {\n        // TODO(andrewseguin): enforce that one outlet was instantiated from createEmbeddedView\n        outlet.viewContainer.createEmbeddedView(rowDef.template, context, index);\n        for (let cellTemplate of this._getCellTemplates(rowDef)) {\n            if (CdkCellOutlet.mostRecentCellOutlet) {\n                CdkCellOutlet.mostRecentCellOutlet._viewContainer.createEmbeddedView(cellTemplate, context);\n            }\n        }\n        this._changeDetectorRef.markForCheck();\n    }\n    /**\n     * Updates the index-related context for each row to reflect any changes in the index of the rows,\n     * e.g. first/last/even/odd.\n     * @return {?}\n     */\n    _updateRowIndexContext() {\n        /** @type {?} */\n        const viewContainer = this._rowOutlet.viewContainer;\n        for (let renderIndex = 0, count = viewContainer.length; renderIndex < count; renderIndex++) {\n            /** @type {?} */\n            const viewRef = /** @type {?} */ (viewContainer.get(renderIndex));\n            /** @type {?} */\n            const context = /** @type {?} */ (viewRef.context);\n            context.count = count;\n            context.first = renderIndex === 0;\n            context.last = renderIndex === count - 1;\n            context.even = renderIndex % 2 === 0;\n            context.odd = !context.even;\n            if (this.multiTemplateDataRows) {\n                context.dataIndex = this._renderRows[renderIndex].dataIndex;\n                context.renderIndex = renderIndex;\n            }\n            else {\n                context.index = this._renderRows[renderIndex].dataIndex;\n            }\n        }\n    }\n    /**\n     * Gets the column definitions for the provided row def.\n     * @param {?} rowDef\n     * @return {?}\n     */\n    _getCellTemplates(rowDef) {\n        if (!rowDef || !rowDef.columns) {\n            return [];\n        }\n        return Array.from(rowDef.columns, columnId => {\n            /** @type {?} */\n            const column = this._columnDefsByName.get(columnId);\n            if (!column) {\n                throw getTableUnknownColumnError(columnId);\n            }\n            return rowDef.extractCellTemplate(column);\n        });\n    }\n    /**\n     * Adds native table sections (e.g. tbody) and moves the row outlets into them.\n     * @return {?}\n     */\n    _applyNativeTableSections() {\n        /** @type {?} */\n        const sections = [\n            { tag: 'thead', outlet: this._headerRowOutlet },\n            { tag: 'tbody', outlet: this._rowOutlet },\n            { tag: 'tfoot', outlet: this._footerRowOutlet },\n        ];\n        for (const section of sections) {\n            /** @type {?} */\n            const documentRef = this._document || document;\n            /** @type {?} */\n            const element = documentRef.createElement(section.tag);\n            element.appendChild(section.outlet.elementRef.nativeElement);\n            this._elementRef.nativeElement.appendChild(element);\n        }\n    }\n    /**\n     * Forces a re-render of the data rows. Should be called in cases where there has been an input\n     * change that affects the evaluation of which rows should be rendered, e.g. toggling\n     * `multiTemplateDataRows` or adding/removing row definitions.\n     * @return {?}\n     */\n    _forceRenderDataRows() {\n        this._dataDiffer.diff([]);\n        this._rowOutlet.viewContainer.clear();\n        this.renderRows();\n        this.updateStickyColumnStyles();\n    }\n    /**\n     * Checks if there has been a change in sticky states since last check and applies the correct\n     * sticky styles. Since checking resets the \"dirty\" state, this should only be performed once\n     * during a change detection and after the inputs are settled (after content check).\n     * @return {?}\n     */\n    _checkStickyStates() {\n        /** @type {?} */\n        const stickyCheckReducer = (acc, d) => {\n            return acc || d.hasStickyChanged();\n        };\n        // Note that the check needs to occur for every definition since it notifies the definition\n        // that it can reset its dirty state. Using another operator like `some` may short-circuit\n        // remaining definitions and leave them in an unchecked state.\n        if (this._headerRowDefs.reduce(stickyCheckReducer, false)) {\n            this.updateStickyHeaderRowStyles();\n        }\n        if (this._footerRowDefs.reduce(stickyCheckReducer, false)) {\n            this.updateStickyFooterRowStyles();\n        }\n        if (Array.from(this._columnDefsByName.values()).reduce(stickyCheckReducer, false)) {\n            this.updateStickyColumnStyles();\n        }\n    }\n    /**\n     * Creates the sticky styler that will be used for sticky rows and columns. Listens\n     * for directionality changes and provides the latest direction to the styler. Re-applies column\n     * stickiness when directionality changes.\n     * @return {?}\n     */\n    _setupStickyStyler() {\n        /** @type {?} */\n        const direction = this._dir ? this._dir.value : 'ltr';\n        this._stickyStyler = new StickyStyler(this._isNativeHtmlTable, \n        // @breaking-change 8.0.0 remove the null check for `this._platform`.\n        this.stickyCssClass, direction, this._platform ? this._platform.isBrowser : true);\n        (this._dir ? this._dir.change : of())\n            .pipe(takeUntil(this._onDestroy))\n            .subscribe(value => {\n            this._stickyStyler.direction = value;\n            this.updateStickyColumnStyles();\n        });\n    }\n}\nCdkTable.ɵfac = function CdkTable_Factory(t) { return new (t || CdkTable)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.IterableDiffers), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵinjectAttribute('role'), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.Directionality, 8), ɵngcc0.ɵɵdirectiveInject(DOCUMENT), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.Platform)); };\nCdkTable.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: CdkTable, selectors: [[\"cdk-table\"], [\"table\", \"cdk-table\", \"\"]], contentQueries: function CdkTable_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, CdkColumnDef, 4);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, CdkRowDef, 4);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, CdkHeaderRowDef, 4);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, CdkFooterRowDef, 4);\n    } if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._contentColumnDefs = _t);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._contentRowDefs = _t);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._contentHeaderRowDefs = _t);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._contentFooterRowDefs = _t);\n    } }, viewQuery: function CdkTable_Query(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(DataRowOutlet, 5);\n        ɵngcc0.ɵɵviewQuery(HeaderRowOutlet, 5);\n        ɵngcc0.ɵɵviewQuery(FooterRowOutlet, 5);\n    } if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._rowOutlet = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._headerRowOutlet = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._footerRowOutlet = _t.first);\n    } }, hostAttrs: [1, \"cdk-table\"], inputs: { trackBy: \"trackBy\", dataSource: \"dataSource\", multiTemplateDataRows: \"multiTemplateDataRows\" }, exportAs: [\"cdkTable\"], decls: 3, vars: 0, consts: [[\"headerRowOutlet\", \"\"], [\"rowOutlet\", \"\"], [\"footerRowOutlet\", \"\"]], template: function CdkTable_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵelementContainer(0, 0);\n        ɵngcc0.ɵɵelementContainer(1, 1);\n        ɵngcc0.ɵɵelementContainer(2, 2);\n    } }, directives: [HeaderRowOutlet, DataRowOutlet, FooterRowOutlet], encapsulation: 2, changeDetection: 0 });\n/** @nocollapse */\nCdkTable.ctorParameters = () => [\n    { type: IterableDiffers },\n    { type: ChangeDetectorRef },\n    { type: ElementRef },\n    { type: String, decorators: [{ type: Attribute, args: ['role',] }] },\n    { type: Directionality, decorators: [{ type: Optional }] },\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },\n    { type: Platform }\n];\nCdkTable.propDecorators = {\n    trackBy: [{ type: Input }],\n    dataSource: [{ type: Input }],\n    multiTemplateDataRows: [{ type: Input }],\n    _rowOutlet: [{ type: ViewChild, args: [DataRowOutlet,] }],\n    _headerRowOutlet: [{ type: ViewChild, args: [HeaderRowOutlet,] }],\n    _footerRowOutlet: [{ type: ViewChild, args: [FooterRowOutlet,] }],\n    _contentColumnDefs: [{ type: ContentChildren, args: [CdkColumnDef,] }],\n    _contentRowDefs: [{ type: ContentChildren, args: [CdkRowDef,] }],\n    _contentHeaderRowDefs: [{ type: ContentChildren, args: [CdkHeaderRowDef,] }],\n    _contentFooterRowDefs: [{ type: ContentChildren, args: [CdkFooterRowDef,] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkTable, [{\n        type: Component,\n        args: [{ selector: 'cdk-table, table[cdk-table]',\n                exportAs: 'cdkTable',\n                template: CDK_TABLE_TEMPLATE,\n                host: {\n                    'class': 'cdk-table'\n                },\n                encapsulation: ViewEncapsulation.None,\n                changeDetection: ChangeDetectionStrategy.OnPush }]\n    }], function () { return [{ type: ɵngcc0.IterableDiffers }, { type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc0.ElementRef }, { type: String, decorators: [{\n                type: Attribute,\n                args: ['role']\n            }] }, { type: ɵngcc1.Directionality, decorators: [{\n                type: Optional\n            }] }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }, { type: ɵngcc2.Platform }]; }, { trackBy: [{\n            type: Input\n        }], dataSource: [{\n            type: Input\n        }], multiTemplateDataRows: [{\n            type: Input\n        }], _rowOutlet: [{\n            type: ViewChild,\n            args: [DataRowOutlet]\n        }], _headerRowOutlet: [{\n            type: ViewChild,\n            args: [HeaderRowOutlet]\n        }], _footerRowOutlet: [{\n            type: ViewChild,\n            args: [FooterRowOutlet]\n        }], _contentColumnDefs: [{\n            type: ContentChildren,\n            args: [CdkColumnDef]\n        }], _contentRowDefs: [{\n            type: ContentChildren,\n            args: [CdkRowDef]\n        }], _contentHeaderRowDefs: [{\n            type: ContentChildren,\n            args: [CdkHeaderRowDef]\n        }], _contentFooterRowDefs: [{\n            type: ContentChildren,\n            args: [CdkFooterRowDef]\n        }] }); })();\n/**\n * Utility function that gets a merged list of the entries in a QueryList and values of a Set.\n * @template T\n * @param {?} queryList\n * @param {?} set\n * @return {?}\n */\nfunction mergeQueryListAndSet(queryList, set) {\n    return queryList.toArray().concat(Array.from(set));\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst EXPORTED_DECLARATIONS = [\n    CdkTable,\n    CdkRowDef,\n    CdkCellDef,\n    CdkCellOutlet,\n    CdkHeaderCellDef,\n    CdkFooterCellDef,\n    CdkColumnDef,\n    CdkCell,\n    CdkRow,\n    CdkHeaderCell,\n    CdkFooterCell,\n    CdkHeaderRow,\n    CdkHeaderRowDef,\n    CdkFooterRow,\n    CdkFooterRowDef,\n    DataRowOutlet,\n    HeaderRowOutlet,\n    FooterRowOutlet,\n];\nclass CdkTableModule {\n}\nCdkTableModule.ɵfac = function CdkTableModule_Factory(t) { return new (t || CdkTableModule)(); };\nCdkTableModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: CdkTableModule });\nCdkTableModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ imports: [[CommonModule]] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkTableModule, [{\n        type: NgModule,\n        args: [{\n                imports: [CommonModule],\n                exports: EXPORTED_DECLARATIONS,\n                declarations: EXPORTED_DECLARATIONS\n            }]\n    }], null, null); })();\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(CdkTableModule, { declarations: function () { return [CdkTable, CdkRowDef, CdkCellDef, CdkCellOutlet, CdkHeaderCellDef, CdkFooterCellDef, CdkColumnDef, CdkCell, CdkRow, CdkHeaderCell, CdkFooterCell, CdkHeaderRow, CdkHeaderRowDef, CdkFooterRow, CdkFooterRowDef, DataRowOutlet, HeaderRowOutlet, FooterRowOutlet]; }, imports: function () { return [CommonModule]; }, exports: function () { return [CdkTable, CdkRowDef, CdkCellDef, CdkCellOutlet, CdkHeaderCellDef, CdkFooterCellDef, CdkColumnDef, CdkCell, CdkRow, CdkHeaderCell, CdkFooterCell, CdkHeaderRow, CdkHeaderRowDef, CdkFooterRow, CdkFooterRowDef, DataRowOutlet, HeaderRowOutlet, FooterRowOutlet]; } }); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\nexport { DataRowOutlet, HeaderRowOutlet, FooterRowOutlet, CDK_TABLE_TEMPLATE, CdkTable, CdkCellDef, CdkHeaderCellDef, CdkFooterCellDef, CdkColumnDefBase, _CdkColumnDefBase, CdkColumnDef, BaseCdkCell, CdkHeaderCell, CdkFooterCell, CdkCell, CDK_ROW_TEMPLATE, BaseRowDef, CdkHeaderRowDefBase, _CdkHeaderRowDefBase, CdkHeaderRowDef, CdkFooterRowDefBase, _CdkFooterRowDefBase, CdkFooterRowDef, CdkRowDef, CdkCellOutlet, CdkHeaderRow, CdkFooterRow, CdkRow, CdkTableModule, STICKY_DIRECTIONS, StickyStyler, mixinHasStickyInput };\n\n//# sourceMappingURL=table.js.map"]},"metadata":{},"sourceType":"module"}