{"ast":null,"code":"import _slicedToArray from \"/Users/adepertat/Dropbox/ECOLES/Openclassroom/P6_de_Pertat_Antoine/dwj-projet6/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _createForOfIteratorHelper from \"/Users/adepertat/Dropbox/ECOLES/Openclassroom/P6_de_Pertat_Antoine/dwj-projet6/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper\";\nimport _get from \"/Users/adepertat/Dropbox/ECOLES/Openclassroom/P6_de_Pertat_Antoine/dwj-projet6/node_modules/@babel/runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"/Users/adepertat/Dropbox/ECOLES/Openclassroom/P6_de_Pertat_Antoine/dwj-projet6/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/adepertat/Dropbox/ECOLES/Openclassroom/P6_de_Pertat_Antoine/dwj-projet6/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/adepertat/Dropbox/ECOLES/Openclassroom/P6_de_Pertat_Antoine/dwj-projet6/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _classCallCheck from \"/Users/adepertat/Dropbox/ECOLES/Openclassroom/P6_de_Pertat_Antoine/dwj-projet6/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/adepertat/Dropbox/ECOLES/Openclassroom/P6_de_Pertat_Antoine/dwj-projet6/node_modules/@babel/runtime/helpers/esm/createClass\";\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { InjectionToken, Directive, forwardRef, Input, Injectable, NgZone, Optional, SkipSelf, ElementRef, NgModule, IterableDiffers, TemplateRef, ViewContainerRef, ChangeDetectionStrategy, ChangeDetectorRef, Component, Inject, Output, ViewChild, ViewEncapsulation, defineInjectable, inject } from '@angular/core';\nimport { coerceNumberProperty } from '@angular/cdk/coercion';\nimport { Subject, fromEvent, of, Observable, animationFrameScheduler, merge } from 'rxjs';\nimport { distinctUntilChanged, auditTime, filter, takeUntil, startWith, pairwise, shareReplay, switchMap } from 'rxjs/operators';\nimport { Platform, getRtlScrollAxisType, RtlScrollAxisType, supportsScrollBehavior, PlatformModule } from '@angular/cdk/platform';\nimport { Directionality, BidiModule } from '@angular/cdk/bidi';\nimport { ArrayDataSource, DataSource } from '@angular/cdk/collections';\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/** *\n * The injection token used to specify the virtual scrolling strategy.\n  @type {?} */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/platform';\nimport * as ɵngcc2 from '@angular/cdk/bidi';\nvar _c0 = [\"contentWrapper\"];\nvar _c1 = [\"*\"];\nvar VIRTUAL_SCROLL_STRATEGY = new InjectionToken('VIRTUAL_SCROLL_STRATEGY');\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * Virtual scrolling strategy for lists with items of known fixed size.\n */\n\nvar FixedSizeVirtualScrollStrategy = /*#__PURE__*/function () {\n  /**\n   * @param {?} itemSize The size of the items in the virtually scrolling list.\n   * @param {?} minBufferPx The minimum amount of buffer (in pixels) before needing to render more\n   * @param {?} maxBufferPx The amount of buffer (in pixels) to render when rendering more.\n   */\n  function FixedSizeVirtualScrollStrategy(itemSize, minBufferPx, maxBufferPx) {\n    _classCallCheck(this, FixedSizeVirtualScrollStrategy);\n\n    this._scrolledIndexChange = new Subject();\n    /**\n     * \\@docs-private Implemented as part of VirtualScrollStrategy.\n     */\n\n    this.scrolledIndexChange = this._scrolledIndexChange.pipe(distinctUntilChanged());\n    /**\n     * The attached viewport.\n     */\n\n    this._viewport = null;\n    this._itemSize = itemSize;\n    this._minBufferPx = minBufferPx;\n    this._maxBufferPx = maxBufferPx;\n  }\n  /**\n   * Attaches this scroll strategy to a viewport.\n   * @param {?} viewport The viewport to attach this strategy to.\n   * @return {?}\n   */\n\n\n  _createClass(FixedSizeVirtualScrollStrategy, [{\n    key: \"attach\",\n    value: function attach(viewport) {\n      this._viewport = viewport;\n\n      this._updateTotalContentSize();\n\n      this._updateRenderedRange();\n    }\n    /**\n     * Detaches this scroll strategy from the currently attached viewport.\n     * @return {?}\n     */\n\n  }, {\n    key: \"detach\",\n    value: function detach() {\n      this._scrolledIndexChange.complete();\n\n      this._viewport = null;\n    }\n    /**\n     * Update the item size and buffer size.\n     * @param {?} itemSize The size of the items in the virtually scrolling list.\n     * @param {?} minBufferPx The minimum amount of buffer (in pixels) before needing to render more\n     * @param {?} maxBufferPx The amount of buffer (in pixels) to render when rendering more.\n     * @return {?}\n     */\n\n  }, {\n    key: \"updateItemAndBufferSize\",\n    value: function updateItemAndBufferSize(itemSize, minBufferPx, maxBufferPx) {\n      if (maxBufferPx < minBufferPx) {\n        throw Error('CDK virtual scroll: maxBufferPx must be greater than or equal to minBufferPx');\n      }\n\n      this._itemSize = itemSize;\n      this._minBufferPx = minBufferPx;\n      this._maxBufferPx = maxBufferPx;\n\n      this._updateTotalContentSize();\n\n      this._updateRenderedRange();\n    }\n    /**\n     * \\@docs-private Implemented as part of VirtualScrollStrategy.\n     * @return {?}\n     */\n\n  }, {\n    key: \"onContentScrolled\",\n    value: function onContentScrolled() {\n      this._updateRenderedRange();\n    }\n    /**\n     * \\@docs-private Implemented as part of VirtualScrollStrategy.\n     * @return {?}\n     */\n\n  }, {\n    key: \"onDataLengthChanged\",\n    value: function onDataLengthChanged() {\n      this._updateTotalContentSize();\n\n      this._updateRenderedRange();\n    }\n    /**\n     * \\@docs-private Implemented as part of VirtualScrollStrategy.\n     * @return {?}\n     */\n\n  }, {\n    key: \"onContentRendered\",\n    value: function onContentRendered() {\n      /* no-op */\n    }\n    /**\n     * \\@docs-private Implemented as part of VirtualScrollStrategy.\n     * @return {?}\n     */\n\n  }, {\n    key: \"onRenderedOffsetChanged\",\n    value: function onRenderedOffsetChanged() {\n      /* no-op */\n    }\n    /**\n     * Scroll to the offset for the given index.\n     * @param {?} index The index of the element to scroll to.\n     * @param {?} behavior The ScrollBehavior to use when scrolling.\n     * @return {?}\n     */\n\n  }, {\n    key: \"scrollToIndex\",\n    value: function scrollToIndex(index, behavior) {\n      if (this._viewport) {\n        this._viewport.scrollToOffset(index * this._itemSize, behavior);\n      }\n    }\n    /**\n     * Update the viewport's total content size.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_updateTotalContentSize\",\n    value: function _updateTotalContentSize() {\n      if (!this._viewport) {\n        return;\n      }\n\n      this._viewport.setTotalContentSize(this._viewport.getDataLength() * this._itemSize);\n    }\n    /**\n     * Update the viewport's rendered range.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_updateRenderedRange\",\n    value: function _updateRenderedRange() {\n      if (!this._viewport) {\n        return;\n      }\n      /** @type {?} */\n\n\n      var scrollOffset = this._viewport.measureScrollOffset();\n      /** @type {?} */\n\n\n      var firstVisibleIndex = scrollOffset / this._itemSize;\n      /** @type {?} */\n\n      var renderedRange = this._viewport.getRenderedRange();\n      /** @type {?} */\n\n\n      var newRange = {\n        start: renderedRange.start,\n        end: renderedRange.end\n      };\n      /** @type {?} */\n\n      var viewportSize = this._viewport.getViewportSize();\n      /** @type {?} */\n\n\n      var dataLength = this._viewport.getDataLength();\n      /** @type {?} */\n\n\n      var startBuffer = scrollOffset - newRange.start * this._itemSize;\n\n      if (startBuffer < this._minBufferPx && newRange.start != 0) {\n        /** @type {?} */\n        var expandStart = Math.ceil((this._maxBufferPx - startBuffer) / this._itemSize);\n        newRange.start = Math.max(0, newRange.start - expandStart);\n        newRange.end = Math.min(dataLength, Math.ceil(firstVisibleIndex + (viewportSize + this._minBufferPx) / this._itemSize));\n      } else {\n        /** @type {?} */\n        var endBuffer = newRange.end * this._itemSize - (scrollOffset + viewportSize);\n\n        if (endBuffer < this._minBufferPx && newRange.end != dataLength) {\n          /** @type {?} */\n          var expandEnd = Math.ceil((this._maxBufferPx - endBuffer) / this._itemSize);\n\n          if (expandEnd > 0) {\n            newRange.end = Math.min(dataLength, newRange.end + expandEnd);\n            newRange.start = Math.max(0, Math.floor(firstVisibleIndex - this._minBufferPx / this._itemSize));\n          }\n        }\n      }\n\n      this._viewport.setRenderedRange(newRange);\n\n      this._viewport.setRenderedContentOffset(this._itemSize * newRange.start);\n\n      this._scrolledIndexChange.next(Math.floor(firstVisibleIndex));\n    }\n  }]);\n\n  return FixedSizeVirtualScrollStrategy;\n}();\n/**\n * Provider factory for `FixedSizeVirtualScrollStrategy` that simply extracts the already created\n * `FixedSizeVirtualScrollStrategy` from the given directive.\n * @param {?} fixedSizeDir The instance of `CdkFixedSizeVirtualScroll` to extract the\n *     `FixedSizeVirtualScrollStrategy` from.\n * @return {?}\n */\n\n\nfunction _fixedSizeVirtualScrollStrategyFactory(fixedSizeDir) {\n  return fixedSizeDir._scrollStrategy;\n}\n/**\n * A virtual scroll strategy that supports fixed-size items.\n */\n\n\nvar CdkFixedSizeVirtualScroll = /*#__PURE__*/function () {\n  function CdkFixedSizeVirtualScroll() {\n    _classCallCheck(this, CdkFixedSizeVirtualScroll);\n\n    this._itemSize = 20;\n    this._minBufferPx = 100;\n    this._maxBufferPx = 200;\n    /**\n     * The scroll strategy used by this directive.\n     */\n\n    this._scrollStrategy = new FixedSizeVirtualScrollStrategy(this.itemSize, this.minBufferPx, this.maxBufferPx);\n  }\n  /**\n   * The size of the items in the list (in pixels).\n   * @return {?}\n   */\n\n\n  _createClass(CdkFixedSizeVirtualScroll, [{\n    key: \"itemSize\",\n    get: function get() {\n      return this._itemSize;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ,\n    set: function set(value) {\n      this._itemSize = coerceNumberProperty(value);\n    }\n    /**\n     * The minimum amount of buffer rendered beyond the viewport (in pixels).\n     * If the amount of buffer dips below this number, more items will be rendered. Defaults to 100px.\n     * @return {?}\n     */\n\n  }, {\n    key: \"minBufferPx\",\n    get: function get() {\n      return this._minBufferPx;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ,\n    set: function set(value) {\n      this._minBufferPx = coerceNumberProperty(value);\n    }\n    /**\n     * The number of pixels worth of buffer to render for when rendering new items. Defaults to 200px.\n     * @return {?}\n     */\n\n  }, {\n    key: \"maxBufferPx\",\n    get: function get() {\n      return this._maxBufferPx;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ,\n    set: function set(value) {\n      this._maxBufferPx = coerceNumberProperty(value);\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngOnChanges\",\n    value: function ngOnChanges() {\n      this._scrollStrategy.updateItemAndBufferSize(this.itemSize, this.minBufferPx, this.maxBufferPx);\n    }\n  }]);\n\n  return CdkFixedSizeVirtualScroll;\n}();\n\nCdkFixedSizeVirtualScroll.ɵfac = function CdkFixedSizeVirtualScroll_Factory(t) {\n  return new (t || CdkFixedSizeVirtualScroll)();\n};\n\nCdkFixedSizeVirtualScroll.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n  type: CdkFixedSizeVirtualScroll,\n  selectors: [[\"cdk-virtual-scroll-viewport\", \"itemSize\", \"\"]],\n  inputs: {\n    itemSize: \"itemSize\",\n    minBufferPx: \"minBufferPx\",\n    maxBufferPx: \"maxBufferPx\"\n  },\n  features: [ɵngcc0.ɵɵProvidersFeature([{\n    provide: VIRTUAL_SCROLL_STRATEGY,\n    useFactory: _fixedSizeVirtualScrollStrategyFactory,\n    deps: [forwardRef(function () {\n      return CdkFixedSizeVirtualScroll;\n    })]\n  }]), ɵngcc0.ɵɵNgOnChangesFeature]\n});\nCdkFixedSizeVirtualScroll.propDecorators = {\n  itemSize: [{\n    type: Input\n  }],\n  minBufferPx: [{\n    type: Input\n  }],\n  maxBufferPx: [{\n    type: Input\n  }]\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkFixedSizeVirtualScroll, [{\n    type: Directive,\n    args: [{\n      selector: 'cdk-virtual-scroll-viewport[itemSize]',\n      providers: [{\n        provide: VIRTUAL_SCROLL_STRATEGY,\n        useFactory: _fixedSizeVirtualScrollStrategyFactory,\n        deps: [forwardRef(function () {\n          return CdkFixedSizeVirtualScroll;\n        })]\n      }]\n    }]\n  }], function () {\n    return [];\n  }, {\n    itemSize: [{\n      type: Input\n    }],\n    minBufferPx: [{\n      type: Input\n    }],\n    maxBufferPx: [{\n      type: Input\n    }]\n  });\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/** *\n * Time in ms to throttle the scrolling events by default.\n  @type {?} */\n\n\nvar DEFAULT_SCROLL_TIME = 20;\n/**\n * Service contained all registered Scrollable references and emits an event when any one of the\n * Scrollable references emit a scrolled event.\n */\n\nvar ScrollDispatcher = /*#__PURE__*/function () {\n  /**\n   * @param {?} _ngZone\n   * @param {?} _platform\n   */\n  function ScrollDispatcher(_ngZone, _platform) {\n    _classCallCheck(this, ScrollDispatcher);\n\n    this._ngZone = _ngZone;\n    this._platform = _platform;\n    /**\n     * Subject for notifying that a registered scrollable reference element has been scrolled.\n     */\n\n    this._scrolled = new Subject();\n    /**\n     * Keeps track of the global `scroll` and `resize` subscriptions.\n     */\n\n    this._globalSubscription = null;\n    /**\n     * Keeps track of the amount of subscriptions to `scrolled`. Used for cleaning up afterwards.\n     */\n\n    this._scrolledCount = 0;\n    /**\n     * Map of all the scrollable references that are registered with the service and their\n     * scroll event subscriptions.\n     */\n\n    this.scrollContainers = new Map();\n  }\n  /**\n   * Registers a scrollable instance with the service and listens for its scrolled events. When the\n   * scrollable is scrolled, the service emits the event to its scrolled observable.\n   * @param {?} scrollable Scrollable instance to be registered.\n   * @return {?}\n   */\n\n\n  _createClass(ScrollDispatcher, [{\n    key: \"register\",\n    value: function register(scrollable) {\n      var _this = this;\n\n      /** @type {?} */\n      var scrollSubscription = scrollable.elementScrolled().subscribe(function () {\n        return _this._scrolled.next(scrollable);\n      });\n      this.scrollContainers.set(scrollable, scrollSubscription);\n    }\n    /**\n     * Deregisters a Scrollable reference and unsubscribes from its scroll event observable.\n     * @param {?} scrollable Scrollable instance to be deregistered.\n     * @return {?}\n     */\n\n  }, {\n    key: \"deregister\",\n    value: function deregister(scrollable) {\n      /** @type {?} */\n      var scrollableReference = this.scrollContainers.get(scrollable);\n\n      if (scrollableReference) {\n        scrollableReference.unsubscribe();\n        this.scrollContainers.delete(scrollable);\n      }\n    }\n    /**\n     * Returns an observable that emits an event whenever any of the registered Scrollable\n     * references (or window, document, or body) fire a scrolled event. Can provide a time in ms\n     * to override the default \"throttle\" time.\n     *\n     * **Note:** in order to avoid hitting change detection for every scroll event,\n     * all of the events emitted from this stream will be run outside the Angular zone.\n     * If you need to update any data bindings as a result of a scroll event, you have\n     * to run the callback using `NgZone.run`.\n     * @param {?=} auditTimeInMs\n     * @return {?}\n     */\n\n  }, {\n    key: \"scrolled\",\n    value: function scrolled() {\n      var _this2 = this;\n\n      var auditTimeInMs = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : DEFAULT_SCROLL_TIME;\n\n      if (!this._platform.isBrowser) {\n        return of();\n      }\n\n      return Observable.create(function (observer) {\n        if (!_this2._globalSubscription) {\n          _this2._addGlobalListener();\n        }\n        /** @type {?} */\n\n\n        var subscription = auditTimeInMs > 0 ? _this2._scrolled.pipe(auditTime(auditTimeInMs)).subscribe(observer) : _this2._scrolled.subscribe(observer);\n        _this2._scrolledCount++;\n        return function () {\n          subscription.unsubscribe();\n          _this2._scrolledCount--;\n\n          if (!_this2._scrolledCount) {\n            _this2._removeGlobalListener();\n          }\n        };\n      });\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      var _this3 = this;\n\n      this._removeGlobalListener();\n\n      this.scrollContainers.forEach(function (_, container) {\n        return _this3.deregister(container);\n      });\n\n      this._scrolled.complete();\n    }\n    /**\n     * Returns an observable that emits whenever any of the\n     * scrollable ancestors of an element are scrolled.\n     * @param {?} elementRef Element whose ancestors to listen for.\n     * @param {?=} auditTimeInMs Time to throttle the scroll events.\n     * @return {?}\n     */\n\n  }, {\n    key: \"ancestorScrolled\",\n    value: function ancestorScrolled(elementRef, auditTimeInMs) {\n      /** @type {?} */\n      var ancestors = this.getAncestorScrollContainers(elementRef);\n      return this.scrolled(auditTimeInMs).pipe(filter(function (target) {\n        return !target || ancestors.indexOf(target) > -1;\n      }));\n    }\n    /**\n     * Returns all registered Scrollables that contain the provided element.\n     * @param {?} elementRef\n     * @return {?}\n     */\n\n  }, {\n    key: \"getAncestorScrollContainers\",\n    value: function getAncestorScrollContainers(elementRef) {\n      var _this4 = this;\n\n      /** @type {?} */\n      var scrollingContainers = [];\n      this.scrollContainers.forEach(function (_subscription, scrollable) {\n        if (_this4._scrollableContainsElement(scrollable, elementRef)) {\n          scrollingContainers.push(scrollable);\n        }\n      });\n      return scrollingContainers;\n    }\n    /**\n     * Returns true if the element is contained within the provided Scrollable.\n     * @param {?} scrollable\n     * @param {?} elementRef\n     * @return {?}\n     */\n\n  }, {\n    key: \"_scrollableContainsElement\",\n    value: function _scrollableContainsElement(scrollable, elementRef) {\n      /** @type {?} */\n      var element = elementRef.nativeElement;\n      /** @type {?} */\n\n      var scrollableElement = scrollable.getElementRef().nativeElement; // Traverse through the element parents until we reach null, checking if any of the elements\n      // are the scrollable's element.\n\n      do {\n        if (element == scrollableElement) {\n          return true;\n        }\n      } while (element =\n      /** @type {?} */\n      element.parentElement);\n\n      return false;\n    }\n    /**\n     * Sets up the global scroll listeners.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_addGlobalListener\",\n    value: function _addGlobalListener() {\n      var _this5 = this;\n\n      this._globalSubscription = this._ngZone.runOutsideAngular(function () {\n        return fromEvent(window.document, 'scroll').subscribe(function () {\n          return _this5._scrolled.next();\n        });\n      });\n    }\n    /**\n     * Cleans up the global scroll listener.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_removeGlobalListener\",\n    value: function _removeGlobalListener() {\n      if (this._globalSubscription) {\n        this._globalSubscription.unsubscribe();\n\n        this._globalSubscription = null;\n      }\n    }\n  }]);\n\n  return ScrollDispatcher;\n}();\n\nScrollDispatcher.ɵfac = function ScrollDispatcher_Factory(t) {\n  return new (t || ScrollDispatcher)(ɵngcc0.ɵɵinject(ɵngcc0.NgZone), ɵngcc0.ɵɵinject(ɵngcc1.Platform));\n};\n\nScrollDispatcher.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n  token: ScrollDispatcher,\n  factory: ScrollDispatcher.ɵfac,\n  providedIn: 'root'\n});\n/** @nocollapse */\n\nScrollDispatcher.ctorParameters = function () {\n  return [{\n    type: NgZone\n  }, {\n    type: Platform\n  }];\n};\n/** @nocollapse */\n\n\nScrollDispatcher.ngInjectableDef = defineInjectable({\n  factory: function ScrollDispatcher_Factory() {\n    return new ScrollDispatcher(inject(NgZone), inject(Platform));\n  },\n  token: ScrollDispatcher,\n  providedIn: \"root\"\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ScrollDispatcher, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.NgZone\n    }, {\n      type: ɵngcc1.Platform\n    }];\n  }, null);\n})();\n/**\n * \\@docs-private \\@deprecated \\@breaking-change 8.0.0\n * @param {?} parentDispatcher\n * @param {?} ngZone\n * @param {?} platform\n * @return {?}\n */\n\n\nfunction SCROLL_DISPATCHER_PROVIDER_FACTORY(parentDispatcher, ngZone, platform) {\n  return parentDispatcher || new ScrollDispatcher(ngZone, platform);\n}\n/** *\n * \\@docs-private \\@deprecated \\@breaking-change 8.0.0\n  @type {?} */\n\n\nvar SCROLL_DISPATCHER_PROVIDER = {\n  // If there is already a ScrollDispatcher available, use that. Otherwise, provide a new one.\n  provide: ScrollDispatcher,\n  deps: [[new Optional(), new SkipSelf(), ScrollDispatcher], NgZone, Platform],\n  useFactory: SCROLL_DISPATCHER_PROVIDER_FACTORY\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * Sends an event when the directive's element is scrolled. Registers itself with the\n * ScrollDispatcher service to include itself as part of its collection of scrolling events that it\n * can be listened to through the service.\n */\n\nvar CdkScrollable = /*#__PURE__*/function () {\n  /**\n   * @param {?} elementRef\n   * @param {?} scrollDispatcher\n   * @param {?} ngZone\n   * @param {?=} dir\n   */\n  function CdkScrollable(elementRef, scrollDispatcher, ngZone, dir) {\n    var _this6 = this;\n\n    _classCallCheck(this, CdkScrollable);\n\n    this.elementRef = elementRef;\n    this.scrollDispatcher = scrollDispatcher;\n    this.ngZone = ngZone;\n    this.dir = dir;\n    this._destroyed = new Subject();\n    this._elementScrolled = Observable.create(function (observer) {\n      return _this6.ngZone.runOutsideAngular(function () {\n        return fromEvent(_this6.elementRef.nativeElement, 'scroll').pipe(takeUntil(_this6._destroyed)).subscribe(observer);\n      });\n    });\n  }\n  /**\n   * @return {?}\n   */\n\n\n  _createClass(CdkScrollable, [{\n    key: \"ngOnInit\",\n    value: function ngOnInit() {\n      this.scrollDispatcher.register(this);\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      this.scrollDispatcher.deregister(this);\n\n      this._destroyed.next();\n\n      this._destroyed.complete();\n    }\n    /**\n     * Returns observable that emits when a scroll event is fired on the host element.\n     * @return {?}\n     */\n\n  }, {\n    key: \"elementScrolled\",\n    value: function elementScrolled() {\n      return this._elementScrolled;\n    }\n    /**\n     * Gets the ElementRef for the viewport.\n     * @return {?}\n     */\n\n  }, {\n    key: \"getElementRef\",\n    value: function getElementRef() {\n      return this.elementRef;\n    }\n    /**\n     * Scrolls to the specified offsets. This is a normalized version of the browser's native scrollTo\n     * method, since browsers are not consistent about what scrollLeft means in RTL. For this method\n     * left and right always refer to the left and right side of the scrolling container irrespective\n     * of the layout direction. start and end refer to left and right in an LTR context and vice-versa\n     * in an RTL context.\n     * @param {?} options specified the offsets to scroll to.\n     * @return {?}\n     */\n\n  }, {\n    key: \"scrollTo\",\n    value: function scrollTo(options) {\n      /** @type {?} */\n      var el = this.elementRef.nativeElement;\n      /** @type {?} */\n\n      var isRtl = this.dir && this.dir.value == 'rtl'; // Rewrite start & end offsets as right or left offsets.\n\n      options.left = options.left == null ? isRtl ? options.end : options.start : options.left;\n      options.right = options.right == null ? isRtl ? options.start : options.end : options.right; // Rewrite the bottom offset as a top offset.\n\n      if (options.bottom != null) {\n        options.top = el.scrollHeight - el.clientHeight - options.bottom;\n      } // Rewrite the right offset as a left offset.\n\n\n      if (isRtl && getRtlScrollAxisType() != RtlScrollAxisType.NORMAL) {\n        if (options.left != null) {\n          options.right = el.scrollWidth - el.clientWidth - options.left;\n        }\n\n        if (getRtlScrollAxisType() == RtlScrollAxisType.INVERTED) {\n          options.left = options.right;\n        } else if (getRtlScrollAxisType() == RtlScrollAxisType.NEGATED) {\n          options.left = options.right ? -options.right : options.right;\n        }\n      } else {\n        if (options.right != null) {\n          options.left = el.scrollWidth - el.clientWidth - options.right;\n        }\n      }\n\n      this._applyScrollToOptions(options);\n    }\n    /**\n     * @param {?} options\n     * @return {?}\n     */\n\n  }, {\n    key: \"_applyScrollToOptions\",\n    value: function _applyScrollToOptions(options) {\n      /** @type {?} */\n      var el = this.elementRef.nativeElement;\n\n      if (supportsScrollBehavior()) {\n        el.scrollTo(options);\n      } else {\n        if (options.top != null) {\n          el.scrollTop = options.top;\n        }\n\n        if (options.left != null) {\n          el.scrollLeft = options.left;\n        }\n      }\n    }\n    /**\n     * Measures the scroll offset relative to the specified edge of the viewport. This method can be\n     * used instead of directly checking scrollLeft or scrollTop, since browsers are not consistent\n     * about what scrollLeft means in RTL. The values returned by this method are normalized such that\n     * left and right always refer to the left and right side of the scrolling container irrespective\n     * of the layout direction. start and end refer to left and right in an LTR context and vice-versa\n     * in an RTL context.\n     * @param {?} from The edge to measure from.\n     * @return {?}\n     */\n\n  }, {\n    key: \"measureScrollOffset\",\n    value: function measureScrollOffset(from) {\n      /** @type {?} */\n      var LEFT = 'left';\n      /** @type {?} */\n\n      var RIGHT = 'right';\n      /** @type {?} */\n\n      var el = this.elementRef.nativeElement;\n\n      if (from == 'top') {\n        return el.scrollTop;\n      }\n\n      if (from == 'bottom') {\n        return el.scrollHeight - el.clientHeight - el.scrollTop;\n      }\n      /** @type {?} */\n\n\n      var isRtl = this.dir && this.dir.value == 'rtl';\n\n      if (from == 'start') {\n        from = isRtl ? RIGHT : LEFT;\n      } else if (from == 'end') {\n        from = isRtl ? LEFT : RIGHT;\n      }\n\n      if (isRtl && getRtlScrollAxisType() == RtlScrollAxisType.INVERTED) {\n        // For INVERTED, scrollLeft is (scrollWidth - clientWidth) when scrolled all the way left and\n        // 0 when scrolled all the way right.\n        if (from == LEFT) {\n          return el.scrollWidth - el.clientWidth - el.scrollLeft;\n        } else {\n          return el.scrollLeft;\n        }\n      } else if (isRtl && getRtlScrollAxisType() == RtlScrollAxisType.NEGATED) {\n        // For NEGATED, scrollLeft is -(scrollWidth - clientWidth) when scrolled all the way left and\n        // 0 when scrolled all the way right.\n        if (from == LEFT) {\n          return el.scrollLeft + el.scrollWidth - el.clientWidth;\n        } else {\n          return -el.scrollLeft;\n        }\n      } else {\n        // For NORMAL, as well as non-RTL contexts, scrollLeft is 0 when scrolled all the way left and\n        // (scrollWidth - clientWidth) when scrolled all the way right.\n        if (from == LEFT) {\n          return el.scrollLeft;\n        } else {\n          return el.scrollWidth - el.clientWidth - el.scrollLeft;\n        }\n      }\n    }\n  }]);\n\n  return CdkScrollable;\n}();\n\nCdkScrollable.ɵfac = function CdkScrollable_Factory(t) {\n  return new (t || CdkScrollable)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ScrollDispatcher), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.Directionality, 8));\n};\n\nCdkScrollable.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n  type: CdkScrollable,\n  selectors: [[\"\", \"cdk-scrollable\", \"\"], [\"\", \"cdkScrollable\", \"\"]]\n});\n/** @nocollapse */\n\nCdkScrollable.ctorParameters = function () {\n  return [{\n    type: ElementRef\n  }, {\n    type: ScrollDispatcher\n  }, {\n    type: NgZone\n  }, {\n    type: Directionality,\n    decorators: [{\n      type: Optional\n    }]\n  }];\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkScrollable, [{\n    type: Directive,\n    args: [{\n      selector: '[cdk-scrollable], [cdkScrollable]'\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ElementRef\n    }, {\n      type: ScrollDispatcher\n    }, {\n      type: ɵngcc0.NgZone\n    }, {\n      type: ɵngcc2.Directionality,\n      decorators: [{\n        type: Optional\n      }]\n    }];\n  }, null);\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * Checks if the given ranges are equal.\n * @param {?} r1\n * @param {?} r2\n * @return {?}\n */\n\n\nfunction rangesEqual(r1, r2) {\n  return r1.start == r2.start && r1.end == r2.end;\n}\n/**\n * A viewport that virtualizes it's scrolling with the help of `CdkVirtualForOf`.\n */\n\n\nvar CdkVirtualScrollViewport = /*#__PURE__*/function (_CdkScrollable) {\n  _inherits(CdkVirtualScrollViewport, _CdkScrollable);\n\n  var _super = _createSuper(CdkVirtualScrollViewport);\n\n  /**\n   * @param {?} elementRef\n   * @param {?} _changeDetectorRef\n   * @param {?} ngZone\n   * @param {?} _scrollStrategy\n   * @param {?} dir\n   * @param {?} scrollDispatcher\n   */\n  function CdkVirtualScrollViewport(elementRef, _changeDetectorRef, ngZone, _scrollStrategy, dir, scrollDispatcher) {\n    var _this7;\n\n    _classCallCheck(this, CdkVirtualScrollViewport);\n\n    _this7 = _super.call(this, elementRef, scrollDispatcher, ngZone, dir);\n    _this7.elementRef = elementRef;\n    _this7._changeDetectorRef = _changeDetectorRef;\n    _this7._scrollStrategy = _scrollStrategy;\n    /**\n     * Emits when the viewport is detached from a CdkVirtualForOf.\n     */\n\n    _this7._detachedSubject = new Subject();\n    /**\n     * Emits when the rendered range changes.\n     */\n\n    _this7._renderedRangeSubject = new Subject();\n    /**\n     * The direction the viewport scrolls.\n     */\n\n    _this7.orientation = 'vertical';\n    /**\n     * Emits when the index of the first element visible in the viewport changes.\n     */\n\n    _this7.scrolledIndexChange = Observable.create(function (observer) {\n      return _this7._scrollStrategy.scrolledIndexChange.subscribe(function (index) {\n        return Promise.resolve().then(function () {\n          return _this7.ngZone.run(function () {\n            return observer.next(index);\n          });\n        });\n      });\n    });\n    /**\n     * A stream that emits whenever the rendered range changes.\n     */\n\n    _this7.renderedRangeStream = _this7._renderedRangeSubject.asObservable();\n    /**\n     * The transform used to scale the spacer to the same size as all content, including content that\n     * is not currently rendered.\n     */\n\n    _this7._totalContentSizeTransform = '';\n    /**\n     * The total size of all content (in pixels), including content that is not currently rendered.\n     */\n\n    _this7._totalContentSize = 0;\n    /**\n     * The currently rendered range of indices.\n     */\n\n    _this7._renderedRange = {\n      start: 0,\n      end: 0\n    };\n    /**\n     * The length of the data bound to this viewport (in number of items).\n     */\n\n    _this7._dataLength = 0;\n    /**\n     * The size of the viewport (in pixels).\n     */\n\n    _this7._viewportSize = 0;\n    /**\n     * The last rendered content offset that was set.\n     */\n\n    _this7._renderedContentOffset = 0;\n    /**\n     * Whether the last rendered content offset was to the end of the content (and therefore needs to\n     * be rewritten as an offset to the start of the content).\n     */\n\n    _this7._renderedContentOffsetNeedsRewrite = false;\n    /**\n     * Whether there is a pending change detection cycle.\n     */\n\n    _this7._isChangeDetectionPending = false;\n    /**\n     * A list of functions to run after the next change detection cycle.\n     */\n\n    _this7._runAfterChangeDetection = [];\n\n    if (!_scrollStrategy) {\n      throw Error('Error: cdk-virtual-scroll-viewport requires the \"itemSize\" property to be set.');\n    }\n\n    return _this7;\n  }\n  /**\n   * @return {?}\n   */\n\n\n  _createClass(CdkVirtualScrollViewport, [{\n    key: \"ngOnInit\",\n    value: function ngOnInit() {\n      var _this8 = this;\n\n      _get(_getPrototypeOf(CdkVirtualScrollViewport.prototype), \"ngOnInit\", this).call(this); // It's still too early to measure the viewport at this point. Deferring with a promise allows\n      // the Viewport to be rendered with the correct size before we measure. We run this outside the\n      // zone to avoid causing more change detection cycles. We handle the change detection loop\n      // ourselves instead.\n\n\n      this.ngZone.runOutsideAngular(function () {\n        return Promise.resolve().then(function () {\n          _this8._measureViewportSize();\n\n          _this8._scrollStrategy.attach(_this8);\n\n          _this8.elementScrolled().pipe( // Start off with a fake scroll event so we properly detect our initial position.\n          startWith(\n          /** @type {?} */\n          null), // Collect multiple events into one until the next animation frame. This way if\n          // there are multiple scroll events in the same frame we only need to recheck\n          // our layout once.\n          auditTime(0, animationFrameScheduler)).subscribe(function () {\n            return _this8._scrollStrategy.onContentScrolled();\n          });\n\n          _this8._markChangeDetectionNeeded();\n        });\n      });\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      this.detach();\n\n      this._scrollStrategy.detach(); // Complete all subjects\n\n\n      this._renderedRangeSubject.complete();\n\n      this._detachedSubject.complete();\n\n      _get(_getPrototypeOf(CdkVirtualScrollViewport.prototype), \"ngOnDestroy\", this).call(this);\n    }\n    /**\n     * Attaches a `CdkVirtualForOf` to this viewport.\n     * @param {?} forOf\n     * @return {?}\n     */\n\n  }, {\n    key: \"attach\",\n    value: function attach(forOf) {\n      var _this9 = this;\n\n      if (this._forOf) {\n        throw Error('CdkVirtualScrollViewport is already attached.');\n      } // Subscribe to the data stream of the CdkVirtualForOf to keep track of when the data length\n      // changes. Run outside the zone to avoid triggering change detection, since we're managing the\n      // change detection loop ourselves.\n\n\n      this.ngZone.runOutsideAngular(function () {\n        _this9._forOf = forOf;\n\n        _this9._forOf.dataStream.pipe(takeUntil(_this9._detachedSubject)).subscribe(function (data) {\n          /** @type {?} */\n          var newLength = data.length;\n\n          if (newLength !== _this9._dataLength) {\n            _this9._dataLength = newLength;\n\n            _this9._scrollStrategy.onDataLengthChanged();\n          }\n\n          _this9._doChangeDetection();\n        });\n      });\n    }\n    /**\n     * Detaches the current `CdkVirtualForOf`.\n     * @return {?}\n     */\n\n  }, {\n    key: \"detach\",\n    value: function detach() {\n      this._forOf = null;\n\n      this._detachedSubject.next();\n    }\n    /**\n     * Gets the length of the data bound to this viewport (in number of items).\n     * @return {?}\n     */\n\n  }, {\n    key: \"getDataLength\",\n    value: function getDataLength() {\n      return this._dataLength;\n    }\n    /**\n     * Gets the size of the viewport (in pixels).\n     * @return {?}\n     */\n\n  }, {\n    key: \"getViewportSize\",\n    value: function getViewportSize() {\n      return this._viewportSize;\n    }\n    /**\n     * Get the current rendered range of items.\n     * @return {?}\n     */\n\n  }, {\n    key: \"getRenderedRange\",\n    value: function getRenderedRange() {\n      return this._renderedRange;\n    }\n    /**\n     * Sets the total size of all content (in pixels), including content that is not currently\n     * rendered.\n     * @param {?} size\n     * @return {?}\n     */\n\n  }, {\n    key: \"setTotalContentSize\",\n    value: function setTotalContentSize(size) {\n      if (this._totalContentSize !== size) {\n        this._totalContentSize = size;\n        /** @type {?} */\n\n        var axis = this.orientation == 'horizontal' ? 'X' : 'Y';\n        this._totalContentSizeTransform = \"scale\".concat(axis, \"(\").concat(this._totalContentSize, \")\");\n\n        this._markChangeDetectionNeeded();\n      }\n    }\n    /**\n     * Sets the currently rendered range of indices.\n     * @param {?} range\n     * @return {?}\n     */\n\n  }, {\n    key: \"setRenderedRange\",\n    value: function setRenderedRange(range) {\n      var _this10 = this;\n\n      if (!rangesEqual(this._renderedRange, range)) {\n        this._renderedRangeSubject.next(this._renderedRange = range);\n\n        this._markChangeDetectionNeeded(function () {\n          return _this10._scrollStrategy.onContentRendered();\n        });\n      }\n    }\n    /**\n     * Gets the offset from the start of the viewport to the start of the rendered data (in pixels).\n     * @return {?}\n     */\n\n  }, {\n    key: \"getOffsetToRenderedContentStart\",\n    value: function getOffsetToRenderedContentStart() {\n      return this._renderedContentOffsetNeedsRewrite ? null : this._renderedContentOffset;\n    }\n    /**\n     * Sets the offset from the start of the viewport to either the start or end of the rendered data\n     * (in pixels).\n     * @param {?} offset\n     * @param {?=} to\n     * @return {?}\n     */\n\n  }, {\n    key: \"setRenderedContentOffset\",\n    value: function setRenderedContentOffset(offset) {\n      var _this11 = this;\n\n      var to = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'to-start';\n\n      /** @type {?} */\n      var isRtl = this.dir && this.dir.value == 'rtl';\n      /** @type {?} */\n\n      var isHorizontal = this.orientation == 'horizontal';\n      /** @type {?} */\n\n      var axis = isHorizontal ? 'X' : 'Y';\n      /** @type {?} */\n\n      var axisDirection = isHorizontal && isRtl ? -1 : 1;\n      /** @type {?} */\n\n      var transform = \"translate\".concat(axis, \"(\").concat(Number(axisDirection * offset), \"px)\");\n      this._renderedContentOffset = offset;\n\n      if (to === 'to-end') {\n        transform += \" translate\".concat(axis, \"(-100%)\"); // The viewport should rewrite this as a `to-start` offset on the next render cycle. Otherwise\n        // elements will appear to expand in the wrong direction (e.g. `mat-expansion-panel` would\n        // expand upward).\n\n        this._renderedContentOffsetNeedsRewrite = true;\n      }\n\n      if (this._renderedContentTransform != transform) {\n        // We know this value is safe because we parse `offset` with `Number()` before passing it\n        // into the string.\n        this._renderedContentTransform = transform;\n\n        this._markChangeDetectionNeeded(function () {\n          if (_this11._renderedContentOffsetNeedsRewrite) {\n            _this11._renderedContentOffset -= _this11.measureRenderedContentSize();\n            _this11._renderedContentOffsetNeedsRewrite = false;\n\n            _this11.setRenderedContentOffset(_this11._renderedContentOffset);\n          } else {\n            _this11._scrollStrategy.onRenderedOffsetChanged();\n          }\n        });\n      }\n    }\n    /**\n     * Scrolls to the given offset from the start of the viewport. Please note that this is not always\n     * the same as setting `scrollTop` or `scrollLeft`. In a horizontal viewport with right-to-left\n     * direction, this would be the equivalent of setting a fictional `scrollRight` property.\n     * @param {?} offset The offset to scroll to.\n     * @param {?=} behavior The ScrollBehavior to use when scrolling. Default is behavior is `auto`.\n     * @return {?}\n     */\n\n  }, {\n    key: \"scrollToOffset\",\n    value: function scrollToOffset(offset) {\n      var behavior = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'auto';\n\n      /** @type {?} */\n      var options = {\n        behavior: behavior\n      };\n\n      if (this.orientation === 'horizontal') {\n        options.start = offset;\n      } else {\n        options.top = offset;\n      }\n\n      this.scrollTo(options);\n    }\n    /**\n     * Scrolls to the offset for the given index.\n     * @param {?} index The index of the element to scroll to.\n     * @param {?=} behavior The ScrollBehavior to use when scrolling. Default is behavior is `auto`.\n     * @return {?}\n     */\n\n  }, {\n    key: \"scrollToIndex\",\n    value: function scrollToIndex(index) {\n      var behavior = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'auto';\n\n      this._scrollStrategy.scrollToIndex(index, behavior);\n    }\n    /**\n     * Gets the current scroll offset from the start of the viewport (in pixels).\n     * @param {?=} from The edge to measure the offset from. Defaults to 'top' in vertical mode and 'start'\n     *     in horizontal mode.\n     * @return {?}\n     */\n\n  }, {\n    key: \"measureScrollOffset\",\n    value: function measureScrollOffset(from) {\n      return _get(_getPrototypeOf(CdkVirtualScrollViewport.prototype), \"measureScrollOffset\", this).call(this, from ? from : this.orientation === 'horizontal' ? 'start' : 'top');\n    }\n    /**\n     * Measure the combined size of all of the rendered items.\n     * @return {?}\n     */\n\n  }, {\n    key: \"measureRenderedContentSize\",\n    value: function measureRenderedContentSize() {\n      /** @type {?} */\n      var contentEl = this._contentWrapper.nativeElement;\n      return this.orientation === 'horizontal' ? contentEl.offsetWidth : contentEl.offsetHeight;\n    }\n    /**\n     * Measure the total combined size of the given range. Throws if the range includes items that are\n     * not rendered.\n     * @param {?} range\n     * @return {?}\n     */\n\n  }, {\n    key: \"measureRangeSize\",\n    value: function measureRangeSize(range) {\n      if (!this._forOf) {\n        return 0;\n      }\n\n      return this._forOf.measureRangeSize(range, this.orientation);\n    }\n    /**\n     * Update the viewport dimensions and re-render.\n     * @return {?}\n     */\n\n  }, {\n    key: \"checkViewportSize\",\n    value: function checkViewportSize() {\n      // TODO: Cleanup later when add logic for handling content resize\n      this._measureViewportSize();\n\n      this._scrollStrategy.onDataLengthChanged();\n    }\n    /**\n     * Measure the viewport size.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_measureViewportSize\",\n    value: function _measureViewportSize() {\n      /** @type {?} */\n      var viewportEl = this.elementRef.nativeElement;\n      this._viewportSize = this.orientation === 'horizontal' ? viewportEl.clientWidth : viewportEl.clientHeight;\n    }\n    /**\n     * Queue up change detection to run.\n     * @param {?=} runAfter\n     * @return {?}\n     */\n\n  }, {\n    key: \"_markChangeDetectionNeeded\",\n    value: function _markChangeDetectionNeeded(runAfter) {\n      var _this12 = this;\n\n      if (runAfter) {\n        this._runAfterChangeDetection.push(runAfter);\n      } // Use a Promise to batch together calls to `_doChangeDetection`. This way if we set a bunch of\n      // properties sequentially we only have to run `_doChangeDetection` once at the end.\n\n\n      if (!this._isChangeDetectionPending) {\n        this._isChangeDetectionPending = true;\n        this.ngZone.runOutsideAngular(function () {\n          return Promise.resolve().then(function () {\n            _this12._doChangeDetection();\n          });\n        });\n      }\n    }\n    /**\n     * Run change detection.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_doChangeDetection\",\n    value: function _doChangeDetection() {\n      var _this13 = this;\n\n      this._isChangeDetectionPending = false; // Apply changes to Angular bindings. Note: We must call `markForCheck` to run change detection\n      // from the root, since the repeated items are content projected in. Calling `detectChanges`\n      // instead does not properly check the projected content.\n\n      this.ngZone.run(function () {\n        return _this13._changeDetectorRef.markForCheck();\n      }); // Apply the content transform. The transform can't be set via an Angular binding because\n      // bypassSecurityTrustStyle is banned in Google. However the value is safe, it's composed of\n      // string literals, a variable that can only be 'X' or 'Y', and user input that is run through\n      // the `Number` function first to coerce it to a numeric value.\n\n      this._contentWrapper.nativeElement.style.transform = this._renderedContentTransform;\n      /** @type {?} */\n\n      var runAfterChangeDetection = this._runAfterChangeDetection;\n      this._runAfterChangeDetection = [];\n\n      var _iterator = _createForOfIteratorHelper(runAfterChangeDetection),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var fn = _step.value;\n          fn();\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n    }\n  }]);\n\n  return CdkVirtualScrollViewport;\n}(CdkScrollable);\n\nCdkVirtualScrollViewport.ɵfac = function CdkVirtualScrollViewport_Factory(t) {\n  return new (t || CdkVirtualScrollViewport)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(VIRTUAL_SCROLL_STRATEGY, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.Directionality, 8), ɵngcc0.ɵɵdirectiveInject(ScrollDispatcher));\n};\n\nCdkVirtualScrollViewport.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n  type: CdkVirtualScrollViewport,\n  selectors: [[\"cdk-virtual-scroll-viewport\"]],\n  viewQuery: function CdkVirtualScrollViewport_Query(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵviewQuery(_c0, 5);\n    }\n\n    if (rf & 2) {\n      var _t;\n\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._contentWrapper = _t.first);\n    }\n  },\n  hostAttrs: [1, \"cdk-virtual-scroll-viewport\"],\n  hostVars: 4,\n  hostBindings: function CdkVirtualScrollViewport_HostBindings(rf, ctx) {\n    if (rf & 2) {\n      ɵngcc0.ɵɵclassProp(\"cdk-virtual-scroll-orientation-horizontal\", ctx.orientation === \"horizontal\")(\"cdk-virtual-scroll-orientation-vertical\", ctx.orientation === \"vertical\");\n    }\n  },\n  inputs: {\n    orientation: \"orientation\"\n  },\n  outputs: {\n    scrolledIndexChange: \"scrolledIndexChange\"\n  },\n  features: [ɵngcc0.ɵɵInheritDefinitionFeature],\n  ngContentSelectors: _c1,\n  decls: 4,\n  vars: 2,\n  consts: [[1, \"cdk-virtual-scroll-content-wrapper\"], [\"contentWrapper\", \"\"], [1, \"cdk-virtual-scroll-spacer\"]],\n  template: function CdkVirtualScrollViewport_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵprojectionDef();\n      ɵngcc0.ɵɵelementStart(0, \"div\", 0, 1);\n      ɵngcc0.ɵɵprojection(2);\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵelement(3, \"div\", 2);\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵadvance(3);\n      ɵngcc0.ɵɵstyleProp(\"transform\", ctx._totalContentSizeTransform);\n    }\n  },\n  styles: [\"cdk-virtual-scroll-viewport{display:block;position:relative;overflow:auto;contain:strict;transform:translateZ(0);will-change:scroll-position;-webkit-overflow-scrolling:touch}.cdk-virtual-scroll-content-wrapper{position:absolute;top:0;left:0;contain:content}[dir=rtl] .cdk-virtual-scroll-content-wrapper{right:0;left:auto}.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper{min-height:100%}.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>dl:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>ol:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>table:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>ul:not([cdkVirtualFor]){padding-left:0;padding-right:0;margin-left:0;margin-right:0;border-left-width:0;border-right-width:0;outline:0}.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper{min-width:100%}.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>dl:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>ol:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>table:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>ul:not([cdkVirtualFor]){padding-top:0;padding-bottom:0;margin-top:0;margin-bottom:0;border-top-width:0;border-bottom-width:0;outline:0}.cdk-virtual-scroll-spacer{position:absolute;top:0;left:0;height:1px;width:1px;transform-origin:0 0}[dir=rtl] .cdk-virtual-scroll-spacer{right:0;left:auto;transform-origin:100% 0}\"],\n  encapsulation: 2,\n  changeDetection: 0\n});\n/** @nocollapse */\n\nCdkVirtualScrollViewport.ctorParameters = function () {\n  return [{\n    type: ElementRef\n  }, {\n    type: ChangeDetectorRef\n  }, {\n    type: NgZone\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Optional\n    }, {\n      type: Inject,\n      args: [VIRTUAL_SCROLL_STRATEGY]\n    }]\n  }, {\n    type: Directionality,\n    decorators: [{\n      type: Optional\n    }]\n  }, {\n    type: ScrollDispatcher\n  }];\n};\n\nCdkVirtualScrollViewport.propDecorators = {\n  orientation: [{\n    type: Input\n  }],\n  scrolledIndexChange: [{\n    type: Output\n  }],\n  _contentWrapper: [{\n    type: ViewChild,\n    args: ['contentWrapper']\n  }]\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkVirtualScrollViewport, [{\n    type: Component,\n    args: [{\n      selector: 'cdk-virtual-scroll-viewport',\n      template: \"<div #contentWrapper class=\\\"cdk-virtual-scroll-content-wrapper\\\"><ng-content></ng-content></div><div class=\\\"cdk-virtual-scroll-spacer\\\" [style.transform]=\\\"_totalContentSizeTransform\\\"></div>\",\n      styles: [\"cdk-virtual-scroll-viewport{display:block;position:relative;overflow:auto;contain:strict;transform:translateZ(0);will-change:scroll-position;-webkit-overflow-scrolling:touch}.cdk-virtual-scroll-content-wrapper{position:absolute;top:0;left:0;contain:content}[dir=rtl] .cdk-virtual-scroll-content-wrapper{right:0;left:auto}.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper{min-height:100%}.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>dl:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>ol:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>table:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>ul:not([cdkVirtualFor]){padding-left:0;padding-right:0;margin-left:0;margin-right:0;border-left-width:0;border-right-width:0;outline:0}.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper{min-width:100%}.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>dl:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>ol:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>table:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>ul:not([cdkVirtualFor]){padding-top:0;padding-bottom:0;margin-top:0;margin-bottom:0;border-top-width:0;border-bottom-width:0;outline:0}.cdk-virtual-scroll-spacer{position:absolute;top:0;left:0;height:1px;width:1px;transform-origin:0 0}[dir=rtl] .cdk-virtual-scroll-spacer{right:0;left:auto;transform-origin:100% 0}\"],\n      host: {\n        'class': 'cdk-virtual-scroll-viewport',\n        '[class.cdk-virtual-scroll-orientation-horizontal]': 'orientation === \"horizontal\"',\n        '[class.cdk-virtual-scroll-orientation-vertical]': 'orientation === \"vertical\"'\n      },\n      encapsulation: ViewEncapsulation.None,\n      changeDetection: ChangeDetectionStrategy.OnPush\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ElementRef\n    }, {\n      type: ɵngcc0.ChangeDetectorRef\n    }, {\n      type: ɵngcc0.NgZone\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [VIRTUAL_SCROLL_STRATEGY]\n      }]\n    }, {\n      type: ɵngcc2.Directionality,\n      decorators: [{\n        type: Optional\n      }]\n    }, {\n      type: ScrollDispatcher\n    }];\n  }, {\n    orientation: [{\n      type: Input\n    }],\n    scrolledIndexChange: [{\n      type: Output\n    }],\n    _contentWrapper: [{\n      type: ViewChild,\n      args: ['contentWrapper']\n    }]\n  });\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * Helper to extract size from a DOM Node.\n * @param {?} orientation\n * @param {?} node\n * @return {?}\n */\n\n\nfunction getSize(orientation, node) {\n  /** @type {?} */\n  var el =\n  /** @type {?} */\n  node;\n\n  if (!el.getBoundingClientRect) {\n    return 0;\n  }\n  /** @type {?} */\n\n\n  var rect = el.getBoundingClientRect();\n  return orientation == 'horizontal' ? rect.width : rect.height;\n}\n/**\n * A directive similar to `ngForOf` to be used for rendering data inside a virtual scrolling\n * container.\n * @template T\n */\n\n\nvar CdkVirtualForOf = /*#__PURE__*/function () {\n  /**\n   * @param {?} _viewContainerRef\n   * @param {?} _template\n   * @param {?} _differs\n   * @param {?} _viewport\n   * @param {?} ngZone\n   */\n  function CdkVirtualForOf(_viewContainerRef, _template, _differs,\n  /** The virtual scrolling viewport that these items are being rendered in. */\n  _viewport, ngZone) {\n    var _this14 = this;\n\n    _classCallCheck(this, CdkVirtualForOf);\n\n    this._viewContainerRef = _viewContainerRef;\n    this._template = _template;\n    this._differs = _differs;\n    this._viewport = _viewport;\n    /**\n     * Emits when the rendered view of the data changes.\n     */\n\n    this.viewChange = new Subject();\n    /**\n     * Subject that emits when a new DataSource instance is given.\n     */\n\n    this._dataSourceChanges = new Subject();\n    /**\n     * The size of the cache used to store templates that are not being used for re-use later.\n     * Setting the cache size to `0` will disable caching. Defaults to 20 templates.\n     */\n\n    this.cdkVirtualForTemplateCacheSize = 20;\n    /**\n     * Emits whenever the data in the current DataSource changes.\n     */\n\n    this.dataStream = this._dataSourceChanges.pipe( // Start off with null `DataSource`.\n    startWith(\n    /** @type {?} */\n    null), // Bundle up the previous and current data sources so we can work with both.\n    pairwise(), // Use `_changeDataSource` to disconnect from the previous data source and connect to the\n    // new one, passing back a stream of data changes which we run through `switchMap` to give\n    // us a data stream that emits the latest data from whatever the current `DataSource` is.\n    switchMap(function (_ref) {\n      var _ref2 = _slicedToArray(_ref, 2),\n          prev = _ref2[0],\n          cur = _ref2[1];\n\n      return _this14._changeDataSource(prev, cur);\n    }), // Replay the last emitted data when someone subscribes.\n    shareReplay(1));\n    /**\n     * The differ used to calculate changes to the data.\n     */\n\n    this._differ = null;\n    /**\n     * The template cache used to hold on ot template instancess that have been stamped out, but don't\n     * currently need to be rendered. These instances will be reused in the future rather than\n     * stamping out brand new ones.\n     */\n\n    this._templateCache = [];\n    /**\n     * Whether the rendered data should be updated during the next ngDoCheck cycle.\n     */\n\n    this._needsUpdate = false;\n    this._destroyed = new Subject();\n    this.dataStream.subscribe(function (data) {\n      _this14._data = data;\n\n      _this14._onRenderedDataChange();\n    });\n\n    this._viewport.renderedRangeStream.pipe(takeUntil(this._destroyed)).subscribe(function (range) {\n      _this14._renderedRange = range;\n      ngZone.run(function () {\n        return _this14.viewChange.next(_this14._renderedRange);\n      });\n\n      _this14._onRenderedDataChange();\n    });\n\n    this._viewport.attach(this);\n  }\n  /**\n   * The DataSource to display.\n   * @return {?}\n   */\n\n\n  _createClass(CdkVirtualForOf, [{\n    key: \"cdkVirtualForOf\",\n    get: function get() {\n      return this._cdkVirtualForOf;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ,\n    set: function set(value) {\n      this._cdkVirtualForOf = value;\n      /** @type {?} */\n\n      var ds = value instanceof DataSource ? value : // Slice the value if its an NgIterable to ensure we're working with an array.\n      new ArrayDataSource(value instanceof Observable ? value : Array.prototype.slice.call(value || []));\n\n      this._dataSourceChanges.next(ds);\n    }\n    /**\n     * The `TrackByFunction` to use for tracking changes. The `TrackByFunction` takes the index and\n     * the item and produces a value to be used as the item's identity when tracking changes.\n     * @return {?}\n     */\n\n  }, {\n    key: \"cdkVirtualForTrackBy\",\n    get: function get() {\n      return this._cdkVirtualForTrackBy;\n    }\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    ,\n    set: function set(fn) {\n      var _this15 = this;\n\n      this._needsUpdate = true;\n      this._cdkVirtualForTrackBy = fn ? function (index, item) {\n        return fn(index + (_this15._renderedRange ? _this15._renderedRange.start : 0), item);\n      } : undefined;\n    }\n    /**\n     * The template used to stamp out new elements.\n     * @param {?} value\n     * @return {?}\n     */\n\n  }, {\n    key: \"cdkVirtualForTemplate\",\n    set: function set(value) {\n      if (value) {\n        this._needsUpdate = true;\n        this._template = value;\n      }\n    }\n    /**\n     * Measures the combined size (width for horizontal orientation, height for vertical) of all items\n     * in the specified range. Throws an error if the range includes items that are not currently\n     * rendered.\n     * @param {?} range\n     * @param {?} orientation\n     * @return {?}\n     */\n\n  }, {\n    key: \"measureRangeSize\",\n    value: function measureRangeSize(range, orientation) {\n      if (range.start >= range.end) {\n        return 0;\n      }\n\n      if (range.start < this._renderedRange.start || range.end > this._renderedRange.end) {\n        throw Error(\"Error: attempted to measure an item that isn't rendered.\");\n      }\n      /** @type {?} */\n\n\n      var renderedStartIndex = range.start - this._renderedRange.start;\n      /** @type {?} */\n\n      var rangeLen = range.end - range.start;\n      /** @type {?} */\n\n      var totalSize = 0;\n      /** @type {?} */\n\n      var i = rangeLen;\n\n      while (i--) {\n        /** @type {?} */\n        var view =\n        /** @type {?} */\n        this._viewContainerRef.get(i + renderedStartIndex);\n        /** @type {?} */\n\n\n        var j = view ? view.rootNodes.length : 0;\n\n        while (j--) {\n          totalSize += getSize(orientation,\n          /** @type {?} */\n          view.rootNodes[j]);\n        }\n      }\n\n      return totalSize;\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngDoCheck\",\n    value: function ngDoCheck() {\n      if (this._differ && this._needsUpdate) {\n        /** @type {?} */\n        var changes = this._differ.diff(this._renderedItems);\n\n        if (!changes) {\n          this._updateContext();\n        } else {\n          this._applyChanges(changes);\n        }\n\n        this._needsUpdate = false;\n      }\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      this._viewport.detach();\n\n      this._dataSourceChanges.complete();\n\n      this.viewChange.complete();\n\n      this._destroyed.next();\n\n      this._destroyed.complete();\n\n      var _iterator2 = _createForOfIteratorHelper(this._templateCache),\n          _step2;\n\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var view = _step2.value;\n          view.destroy();\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n    }\n    /**\n     * React to scroll state changes in the viewport.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_onRenderedDataChange\",\n    value: function _onRenderedDataChange() {\n      if (!this._renderedRange) {\n        return;\n      }\n\n      this._renderedItems = this._data.slice(this._renderedRange.start, this._renderedRange.end);\n\n      if (!this._differ) {\n        this._differ = this._differs.find(this._renderedItems).create(this.cdkVirtualForTrackBy);\n      }\n\n      this._needsUpdate = true;\n    }\n    /**\n     * Swap out one `DataSource` for another.\n     * @param {?} oldDs\n     * @param {?} newDs\n     * @return {?}\n     */\n\n  }, {\n    key: \"_changeDataSource\",\n    value: function _changeDataSource(oldDs, newDs) {\n      if (oldDs) {\n        oldDs.disconnect(this);\n      }\n\n      this._needsUpdate = true;\n      return newDs.connect(this);\n    }\n    /**\n     * Update the `CdkVirtualForOfContext` for all views.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_updateContext\",\n    value: function _updateContext() {\n      /** @type {?} */\n      var count = this._data.length;\n      /** @type {?} */\n\n      var i = this._viewContainerRef.length;\n\n      while (i--) {\n        /** @type {?} */\n        var view =\n        /** @type {?} */\n        this._viewContainerRef.get(i);\n\n        view.context.index = this._renderedRange.start + i;\n        view.context.count = count;\n\n        this._updateComputedContextProperties(view.context);\n\n        view.detectChanges();\n      }\n    }\n    /**\n     * Apply changes to the DOM.\n     * @param {?} changes\n     * @return {?}\n     */\n\n  }, {\n    key: \"_applyChanges\",\n    value: function _applyChanges(changes) {\n      var _this16 = this;\n\n      // Rearrange the views to put them in the right location.\n      changes.forEachOperation(function (record, adjustedPreviousIndex, currentIndex) {\n        if (record.previousIndex == null) {\n          // Item added.\n\n          /** @type {?} */\n          var view = _this16._getViewForNewItem();\n\n          _this16._viewContainerRef.insert(view,\n          /** @type {?} */\n          currentIndex);\n\n          view.context.$implicit = record.item;\n        } else if (currentIndex == null) {\n          // Item removed.\n          // Item removed.\n          _this16._cacheView(\n          /** @type {?} */\n          _this16._viewContainerRef.detach(\n          /** @type {?} */\n          adjustedPreviousIndex));\n        } else {\n          // Item moved.\n\n          /** @type {?} */\n          var _view =\n          /** @type {?} */\n          _this16._viewContainerRef.get(\n          /** @type {?} */\n          adjustedPreviousIndex);\n\n          _this16._viewContainerRef.move(_view, currentIndex);\n\n          _view.context.$implicit = record.item;\n        }\n      }); // Update $implicit for any items that had an identity change.\n\n      changes.forEachIdentityChange(function (record) {\n        /** @type {?} */\n        var view =\n        /** @type {?} */\n        _this16._viewContainerRef.get(\n        /** @type {?} */\n        record.currentIndex);\n\n        view.context.$implicit = record.item;\n      });\n      /** @type {?} */\n\n      var count = this._data.length;\n      /** @type {?} */\n\n      var i = this._viewContainerRef.length;\n\n      while (i--) {\n        /** @type {?} */\n        var view =\n        /** @type {?} */\n        this._viewContainerRef.get(i);\n\n        view.context.index = this._renderedRange.start + i;\n        view.context.count = count;\n\n        this._updateComputedContextProperties(view.context);\n      }\n    }\n    /**\n     * Cache the given detached view.\n     * @param {?} view\n     * @return {?}\n     */\n\n  }, {\n    key: \"_cacheView\",\n    value: function _cacheView(view) {\n      if (this._templateCache.length < this.cdkVirtualForTemplateCacheSize) {\n        this._templateCache.push(view);\n      } else {\n        view.destroy();\n      }\n    }\n    /**\n     * Get a view for a new item, either from the cache or by creating a new one.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_getViewForNewItem\",\n    value: function _getViewForNewItem() {\n      return this._templateCache.pop() || this._viewContainerRef.createEmbeddedView(this._template, {\n        $implicit:\n        /** @type {?} */\n        null,\n        cdkVirtualForOf: this._cdkVirtualForOf,\n        index: -1,\n        count: -1,\n        first: false,\n        last: false,\n        odd: false,\n        even: false\n      });\n    }\n    /**\n     * Update the computed properties on the `CdkVirtualForOfContext`.\n     * @param {?} context\n     * @return {?}\n     */\n\n  }, {\n    key: \"_updateComputedContextProperties\",\n    value: function _updateComputedContextProperties(context) {\n      context.first = context.index === 0;\n      context.last = context.index === context.count - 1;\n      context.even = context.index % 2 === 0;\n      context.odd = !context.even;\n    }\n  }]);\n\n  return CdkVirtualForOf;\n}();\n\nCdkVirtualForOf.ɵfac = function CdkVirtualForOf_Factory(t) {\n  return new (t || CdkVirtualForOf)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.IterableDiffers), ɵngcc0.ɵɵdirectiveInject(CdkVirtualScrollViewport, 4), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone));\n};\n\nCdkVirtualForOf.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n  type: CdkVirtualForOf,\n  selectors: [[\"\", \"cdkVirtualFor\", \"\", \"cdkVirtualForOf\", \"\"]],\n  inputs: {\n    cdkVirtualForTemplateCacheSize: \"cdkVirtualForTemplateCacheSize\",\n    cdkVirtualForOf: \"cdkVirtualForOf\",\n    cdkVirtualForTrackBy: \"cdkVirtualForTrackBy\",\n    cdkVirtualForTemplate: \"cdkVirtualForTemplate\"\n  }\n});\n/** @nocollapse */\n\nCdkVirtualForOf.ctorParameters = function () {\n  return [{\n    type: ViewContainerRef\n  }, {\n    type: TemplateRef\n  }, {\n    type: IterableDiffers\n  }, {\n    type: CdkVirtualScrollViewport,\n    decorators: [{\n      type: SkipSelf\n    }]\n  }, {\n    type: NgZone\n  }];\n};\n\nCdkVirtualForOf.propDecorators = {\n  cdkVirtualForOf: [{\n    type: Input\n  }],\n  cdkVirtualForTrackBy: [{\n    type: Input\n  }],\n  cdkVirtualForTemplate: [{\n    type: Input\n  }],\n  cdkVirtualForTemplateCacheSize: [{\n    type: Input\n  }]\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkVirtualForOf, [{\n    type: Directive,\n    args: [{\n      selector: '[cdkVirtualFor][cdkVirtualForOf]'\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ViewContainerRef\n    }, {\n      type: ɵngcc0.TemplateRef\n    }, {\n      type: ɵngcc0.IterableDiffers\n    }, {\n      type: CdkVirtualScrollViewport,\n      decorators: [{\n        type: SkipSelf\n      }]\n    }, {\n      type: ɵngcc0.NgZone\n    }];\n  }, {\n    cdkVirtualForTemplateCacheSize: [{\n      type: Input\n    }],\n    cdkVirtualForOf: [{\n      type: Input\n    }],\n    cdkVirtualForTrackBy: [{\n      type: Input\n    }],\n    cdkVirtualForTemplate: [{\n      type: Input\n    }]\n  });\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n\nvar ScrollingModule = function ScrollingModule() {\n  _classCallCheck(this, ScrollingModule);\n};\n\nScrollingModule.ɵfac = function ScrollingModule_Factory(t) {\n  return new (t || ScrollingModule)();\n};\n\nScrollingModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n  type: ScrollingModule\n});\nScrollingModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n  imports: [[BidiModule, PlatformModule], BidiModule]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ScrollingModule, [{\n    type: NgModule,\n    args: [{\n      imports: [BidiModule, PlatformModule],\n      exports: [BidiModule, CdkFixedSizeVirtualScroll, CdkScrollable, CdkVirtualForOf, CdkVirtualScrollViewport],\n      declarations: [CdkFixedSizeVirtualScroll, CdkScrollable, CdkVirtualForOf, CdkVirtualScrollViewport]\n    }]\n  }], null, null);\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(ScrollingModule, {\n    declarations: function declarations() {\n      return [CdkFixedSizeVirtualScroll, CdkScrollable, CdkVirtualForOf, CdkVirtualScrollViewport];\n    },\n    imports: function imports() {\n      return [BidiModule, PlatformModule];\n    },\n    exports: function exports() {\n      return [BidiModule, CdkFixedSizeVirtualScroll, CdkScrollable, CdkVirtualForOf, CdkVirtualScrollViewport];\n    }\n  });\n})();\n/**\n * @deprecated ScrollDispatchModule has been renamed to ScrollingModule.\n * \\@breaking-change 8.0.0 delete this alias\n */\n\n\nvar ScrollDispatchModule = function ScrollDispatchModule() {\n  _classCallCheck(this, ScrollDispatchModule);\n};\n\nScrollDispatchModule.ɵfac = function ScrollDispatchModule_Factory(t) {\n  return new (t || ScrollDispatchModule)();\n};\n\nScrollDispatchModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n  type: ScrollDispatchModule\n});\nScrollDispatchModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n  imports: [[ScrollingModule], ScrollingModule]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ScrollDispatchModule, [{\n    type: NgModule,\n    args: [{\n      imports: [ScrollingModule],\n      exports: [ScrollingModule]\n    }]\n  }], null, null);\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(ScrollDispatchModule, {\n    imports: [ScrollingModule],\n    exports: [ScrollingModule]\n  });\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/** *\n * Time in ms to throttle the resize events by default.\n  @type {?} */\n\n\nvar DEFAULT_RESIZE_TIME = 20;\n/**\n * Simple utility for getting the bounds of the browser viewport.\n * \\@docs-private\n */\n\nvar ViewportRuler = /*#__PURE__*/function () {\n  /**\n   * @param {?} _platform\n   * @param {?} ngZone\n   */\n  function ViewportRuler(_platform, ngZone) {\n    var _this17 = this;\n\n    _classCallCheck(this, ViewportRuler);\n\n    this._platform = _platform;\n    ngZone.runOutsideAngular(function () {\n      _this17._change = _platform.isBrowser ? merge(fromEvent(window, 'resize'), fromEvent(window, 'orientationchange')) : of(); // Note that we need to do the subscription inside `runOutsideAngular`\n      // since subscribing is what causes the event listener to be added.\n\n      _this17._invalidateCache = _this17.change().subscribe(function () {\n        return _this17._updateViewportSize();\n      });\n    });\n  }\n  /**\n   * @return {?}\n   */\n\n\n  _createClass(ViewportRuler, [{\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      this._invalidateCache.unsubscribe();\n    }\n    /**\n     * Returns the viewport's width and height.\n     * @return {?}\n     */\n\n  }, {\n    key: \"getViewportSize\",\n    value: function getViewportSize() {\n      if (!this._viewportSize) {\n        this._updateViewportSize();\n      }\n      /** @type {?} */\n\n\n      var output = {\n        width: this._viewportSize.width,\n        height: this._viewportSize.height\n      }; // If we're not on a browser, don't cache the size since it'll be mocked out anyway.\n\n      if (!this._platform.isBrowser) {\n        this._viewportSize =\n        /** @type {?} */\n        null;\n      }\n\n      return output;\n    }\n    /**\n     * Gets a ClientRect for the viewport's bounds.\n     * @return {?}\n     */\n\n  }, {\n    key: \"getViewportRect\",\n    value: function getViewportRect() {\n      /** @type {?} */\n      var scrollPosition = this.getViewportScrollPosition();\n\n      var _this$getViewportSize = this.getViewportSize(),\n          width = _this$getViewportSize.width,\n          height = _this$getViewportSize.height;\n\n      return {\n        top: scrollPosition.top,\n        left: scrollPosition.left,\n        bottom: scrollPosition.top + height,\n        right: scrollPosition.left + width,\n        height: height,\n        width: width\n      };\n    }\n    /**\n     * Gets the (top, left) scroll position of the viewport.\n     * @return {?}\n     */\n\n  }, {\n    key: \"getViewportScrollPosition\",\n    value: function getViewportScrollPosition() {\n      // While we can get a reference to the fake document\n      // during SSR, it doesn't have getBoundingClientRect.\n      if (!this._platform.isBrowser) {\n        return {\n          top: 0,\n          left: 0\n        };\n      }\n      /** @type {?} */\n\n\n      var documentElement =\n      /** @type {?} */\n      document.documentElement;\n      /** @type {?} */\n\n      var documentRect = documentElement.getBoundingClientRect();\n      /** @type {?} */\n\n      var top = -documentRect.top || document.body.scrollTop || window.scrollY || documentElement.scrollTop || 0;\n      /** @type {?} */\n\n      var left = -documentRect.left || document.body.scrollLeft || window.scrollX || documentElement.scrollLeft || 0;\n      return {\n        top: top,\n        left: left\n      };\n    }\n    /**\n     * Returns a stream that emits whenever the size of the viewport changes.\n     * @param {?=} throttleTime Time in milliseconds to throttle the stream.\n     * @return {?}\n     */\n\n  }, {\n    key: \"change\",\n    value: function change() {\n      var throttleTime = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : DEFAULT_RESIZE_TIME;\n      return throttleTime > 0 ? this._change.pipe(auditTime(throttleTime)) : this._change;\n    }\n    /**\n     * Updates the cached viewport size.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_updateViewportSize\",\n    value: function _updateViewportSize() {\n      this._viewportSize = this._platform.isBrowser ? {\n        width: window.innerWidth,\n        height: window.innerHeight\n      } : {\n        width: 0,\n        height: 0\n      };\n    }\n  }]);\n\n  return ViewportRuler;\n}();\n\nViewportRuler.ɵfac = function ViewportRuler_Factory(t) {\n  return new (t || ViewportRuler)(ɵngcc0.ɵɵinject(ɵngcc1.Platform), ɵngcc0.ɵɵinject(ɵngcc0.NgZone));\n};\n\nViewportRuler.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n  token: ViewportRuler,\n  factory: ViewportRuler.ɵfac,\n  providedIn: 'root'\n});\n/** @nocollapse */\n\nViewportRuler.ctorParameters = function () {\n  return [{\n    type: Platform\n  }, {\n    type: NgZone\n  }];\n};\n/** @nocollapse */\n\n\nViewportRuler.ngInjectableDef = defineInjectable({\n  factory: function ViewportRuler_Factory() {\n    return new ViewportRuler(inject(Platform), inject(NgZone));\n  },\n  token: ViewportRuler,\n  providedIn: \"root\"\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ViewportRuler, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc1.Platform\n    }, {\n      type: ɵngcc0.NgZone\n    }];\n  }, null);\n})();\n/**\n * \\@docs-private \\@deprecated \\@breaking-change 8.0.0\n * @param {?} parentRuler\n * @param {?} platform\n * @param {?} ngZone\n * @return {?}\n */\n\n\nfunction VIEWPORT_RULER_PROVIDER_FACTORY(parentRuler, platform, ngZone) {\n  return parentRuler || new ViewportRuler(platform, ngZone);\n}\n/** *\n * \\@docs-private \\@deprecated \\@breaking-change 8.0.0\n  @type {?} */\n\n\nvar VIEWPORT_RULER_PROVIDER = {\n  // If there is already a ViewportRuler available, use that. Otherwise, provide a new one.\n  provide: ViewportRuler,\n  deps: [[new Optional(), new SkipSelf(), ViewportRuler], Platform, NgZone],\n  useFactory: VIEWPORT_RULER_PROVIDER_FACTORY\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\nexport { _fixedSizeVirtualScrollStrategyFactory, FixedSizeVirtualScrollStrategy, CdkFixedSizeVirtualScroll, SCROLL_DISPATCHER_PROVIDER_FACTORY, DEFAULT_SCROLL_TIME, ScrollDispatcher, SCROLL_DISPATCHER_PROVIDER, CdkScrollable, ScrollingModule, ScrollDispatchModule, VIEWPORT_RULER_PROVIDER_FACTORY, DEFAULT_RESIZE_TIME, ViewportRuler, VIEWPORT_RULER_PROVIDER, CdkVirtualForOf, VIRTUAL_SCROLL_STRATEGY, CdkVirtualScrollViewport }; //# sourceMappingURL=scrolling.js.map","map":{"version":3,"sources":["/Users/adepertat/Dropbox/ECOLES/Openclassroom/P6_de_Pertat_Antoine/dwj-projet6/node_modules/@angular/cdk/__ivy_ngcc__/esm2015/scrolling.js"],"names":["InjectionToken","Directive","forwardRef","Input","Injectable","NgZone","Optional","SkipSelf","ElementRef","NgModule","IterableDiffers","TemplateRef","ViewContainerRef","ChangeDetectionStrategy","ChangeDetectorRef","Component","Inject","Output","ViewChild","ViewEncapsulation","defineInjectable","inject","coerceNumberProperty","Subject","fromEvent","of","Observable","animationFrameScheduler","merge","distinctUntilChanged","auditTime","filter","takeUntil","startWith","pairwise","shareReplay","switchMap","Platform","getRtlScrollAxisType","RtlScrollAxisType","supportsScrollBehavior","PlatformModule","Directionality","BidiModule","ArrayDataSource","DataSource","ɵngcc0","ɵngcc1","ɵngcc2","_c0","_c1","VIRTUAL_SCROLL_STRATEGY","FixedSizeVirtualScrollStrategy","itemSize","minBufferPx","maxBufferPx","_scrolledIndexChange","scrolledIndexChange","pipe","_viewport","_itemSize","_minBufferPx","_maxBufferPx","viewport","_updateTotalContentSize","_updateRenderedRange","complete","Error","index","behavior","scrollToOffset","setTotalContentSize","getDataLength","scrollOffset","measureScrollOffset","firstVisibleIndex","renderedRange","getRenderedRange","newRange","start","end","viewportSize","getViewportSize","dataLength","startBuffer","expandStart","Math","ceil","max","min","endBuffer","expandEnd","floor","setRenderedRange","setRenderedContentOffset","next","_fixedSizeVirtualScrollStrategyFactory","fixedSizeDir","_scrollStrategy","CdkFixedSizeVirtualScroll","value","updateItemAndBufferSize","ɵfac","CdkFixedSizeVirtualScroll_Factory","t","ɵdir","ɵɵdefineDirective","type","selectors","inputs","features","ɵɵProvidersFeature","provide","useFactory","deps","ɵɵNgOnChangesFeature","propDecorators","ngDevMode","ɵsetClassMetadata","args","selector","providers","DEFAULT_SCROLL_TIME","ScrollDispatcher","_ngZone","_platform","_scrolled","_globalSubscription","_scrolledCount","scrollContainers","Map","scrollable","scrollSubscription","elementScrolled","subscribe","set","scrollableReference","get","unsubscribe","delete","auditTimeInMs","isBrowser","create","observer","_addGlobalListener","subscription","_removeGlobalListener","forEach","_","container","deregister","elementRef","ancestors","getAncestorScrollContainers","scrolled","target","indexOf","scrollingContainers","_subscription","_scrollableContainsElement","push","element","nativeElement","scrollableElement","getElementRef","parentElement","runOutsideAngular","window","document","ScrollDispatcher_Factory","ɵɵinject","ɵprov","ɵɵdefineInjectable","token","factory","providedIn","ctorParameters","ngInjectableDef","SCROLL_DISPATCHER_PROVIDER_FACTORY","parentDispatcher","ngZone","platform","SCROLL_DISPATCHER_PROVIDER","CdkScrollable","scrollDispatcher","dir","_destroyed","_elementScrolled","register","options","el","isRtl","left","right","bottom","top","scrollHeight","clientHeight","NORMAL","scrollWidth","clientWidth","INVERTED","NEGATED","_applyScrollToOptions","scrollTo","scrollTop","scrollLeft","from","LEFT","RIGHT","CdkScrollable_Factory","ɵɵdirectiveInject","decorators","rangesEqual","r1","r2","CdkVirtualScrollViewport","_changeDetectorRef","_detachedSubject","_renderedRangeSubject","orientation","Promise","resolve","then","run","renderedRangeStream","asObservable","_totalContentSizeTransform","_totalContentSize","_renderedRange","_dataLength","_viewportSize","_renderedContentOffset","_renderedContentOffsetNeedsRewrite","_isChangeDetectionPending","_runAfterChangeDetection","_measureViewportSize","attach","onContentScrolled","_markChangeDetectionNeeded","detach","forOf","_forOf","dataStream","data","newLength","length","onDataLengthChanged","_doChangeDetection","size","axis","range","onContentRendered","offset","to","isHorizontal","axisDirection","transform","Number","_renderedContentTransform","measureRenderedContentSize","onRenderedOffsetChanged","scrollToIndex","contentEl","_contentWrapper","offsetWidth","offsetHeight","measureRangeSize","viewportEl","runAfter","markForCheck","style","runAfterChangeDetection","fn","CdkVirtualScrollViewport_Factory","ɵcmp","ɵɵdefineComponent","viewQuery","CdkVirtualScrollViewport_Query","rf","ctx","ɵɵviewQuery","_t","ɵɵqueryRefresh","ɵɵloadQuery","first","hostAttrs","hostVars","hostBindings","CdkVirtualScrollViewport_HostBindings","ɵɵclassProp","outputs","ɵɵInheritDefinitionFeature","ngContentSelectors","decls","vars","consts","template","CdkVirtualScrollViewport_Template","ɵɵprojectionDef","ɵɵelementStart","ɵɵprojection","ɵɵelementEnd","ɵɵelement","ɵɵadvance","ɵɵstyleProp","styles","encapsulation","changeDetection","undefined","host","None","OnPush","getSize","node","getBoundingClientRect","rect","width","height","CdkVirtualForOf","_viewContainerRef","_template","_differs","viewChange","_dataSourceChanges","cdkVirtualForTemplateCacheSize","prev","cur","_changeDataSource","_differ","_templateCache","_needsUpdate","_data","_onRenderedDataChange","_cdkVirtualForOf","ds","Array","prototype","slice","call","_cdkVirtualForTrackBy","item","renderedStartIndex","rangeLen","totalSize","i","view","j","rootNodes","changes","diff","_renderedItems","_updateContext","_applyChanges","destroy","find","cdkVirtualForTrackBy","oldDs","newDs","disconnect","connect","count","context","_updateComputedContextProperties","detectChanges","forEachOperation","record","adjustedPreviousIndex","currentIndex","previousIndex","_getViewForNewItem","insert","$implicit","_cacheView","move","forEachIdentityChange","pop","createEmbeddedView","cdkVirtualForOf","last","odd","even","CdkVirtualForOf_Factory","cdkVirtualForTemplate","ScrollingModule","ScrollingModule_Factory","ɵmod","ɵɵdefineNgModule","ɵinj","ɵɵdefineInjector","imports","exports","declarations","ngJitMode","ɵɵsetNgModuleScope","ScrollDispatchModule","ScrollDispatchModule_Factory","DEFAULT_RESIZE_TIME","ViewportRuler","_change","_invalidateCache","change","_updateViewportSize","output","scrollPosition","getViewportScrollPosition","documentElement","documentRect","body","scrollY","scrollX","throttleTime","innerWidth","innerHeight","ViewportRuler_Factory","VIEWPORT_RULER_PROVIDER_FACTORY","parentRuler","VIEWPORT_RULER_PROVIDER"],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { InjectionToken, Directive, forwardRef, Input, Injectable, NgZone, Optional, SkipSelf, ElementRef, NgModule, IterableDiffers, TemplateRef, ViewContainerRef, ChangeDetectionStrategy, ChangeDetectorRef, Component, Inject, Output, ViewChild, ViewEncapsulation, defineInjectable, inject } from '@angular/core';\nimport { coerceNumberProperty } from '@angular/cdk/coercion';\nimport { Subject, fromEvent, of, Observable, animationFrameScheduler, merge } from 'rxjs';\nimport { distinctUntilChanged, auditTime, filter, takeUntil, startWith, pairwise, shareReplay, switchMap } from 'rxjs/operators';\nimport { Platform, getRtlScrollAxisType, RtlScrollAxisType, supportsScrollBehavior, PlatformModule } from '@angular/cdk/platform';\nimport { Directionality, BidiModule } from '@angular/cdk/bidi';\nimport { ArrayDataSource, DataSource } from '@angular/cdk/collections';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/** *\n * The injection token used to specify the virtual scrolling strategy.\n  @type {?} */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/platform';\nimport * as ɵngcc2 from '@angular/cdk/bidi';\n\nconst _c0 = [\"contentWrapper\"];\nconst _c1 = [\"*\"];\nconst VIRTUAL_SCROLL_STRATEGY = new InjectionToken('VIRTUAL_SCROLL_STRATEGY');\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * Virtual scrolling strategy for lists with items of known fixed size.\n */\nclass FixedSizeVirtualScrollStrategy {\n    /**\n     * @param {?} itemSize The size of the items in the virtually scrolling list.\n     * @param {?} minBufferPx The minimum amount of buffer (in pixels) before needing to render more\n     * @param {?} maxBufferPx The amount of buffer (in pixels) to render when rendering more.\n     */\n    constructor(itemSize, minBufferPx, maxBufferPx) {\n        this._scrolledIndexChange = new Subject();\n        /**\n         * \\@docs-private Implemented as part of VirtualScrollStrategy.\n         */\n        this.scrolledIndexChange = this._scrolledIndexChange.pipe(distinctUntilChanged());\n        /**\n         * The attached viewport.\n         */\n        this._viewport = null;\n        this._itemSize = itemSize;\n        this._minBufferPx = minBufferPx;\n        this._maxBufferPx = maxBufferPx;\n    }\n    /**\n     * Attaches this scroll strategy to a viewport.\n     * @param {?} viewport The viewport to attach this strategy to.\n     * @return {?}\n     */\n    attach(viewport) {\n        this._viewport = viewport;\n        this._updateTotalContentSize();\n        this._updateRenderedRange();\n    }\n    /**\n     * Detaches this scroll strategy from the currently attached viewport.\n     * @return {?}\n     */\n    detach() {\n        this._scrolledIndexChange.complete();\n        this._viewport = null;\n    }\n    /**\n     * Update the item size and buffer size.\n     * @param {?} itemSize The size of the items in the virtually scrolling list.\n     * @param {?} minBufferPx The minimum amount of buffer (in pixels) before needing to render more\n     * @param {?} maxBufferPx The amount of buffer (in pixels) to render when rendering more.\n     * @return {?}\n     */\n    updateItemAndBufferSize(itemSize, minBufferPx, maxBufferPx) {\n        if (maxBufferPx < minBufferPx) {\n            throw Error('CDK virtual scroll: maxBufferPx must be greater than or equal to minBufferPx');\n        }\n        this._itemSize = itemSize;\n        this._minBufferPx = minBufferPx;\n        this._maxBufferPx = maxBufferPx;\n        this._updateTotalContentSize();\n        this._updateRenderedRange();\n    }\n    /**\n     * \\@docs-private Implemented as part of VirtualScrollStrategy.\n     * @return {?}\n     */\n    onContentScrolled() {\n        this._updateRenderedRange();\n    }\n    /**\n     * \\@docs-private Implemented as part of VirtualScrollStrategy.\n     * @return {?}\n     */\n    onDataLengthChanged() {\n        this._updateTotalContentSize();\n        this._updateRenderedRange();\n    }\n    /**\n     * \\@docs-private Implemented as part of VirtualScrollStrategy.\n     * @return {?}\n     */\n    onContentRendered() {\n        /* no-op */ \n    }\n    /**\n     * \\@docs-private Implemented as part of VirtualScrollStrategy.\n     * @return {?}\n     */\n    onRenderedOffsetChanged() {\n        /* no-op */ \n    }\n    /**\n     * Scroll to the offset for the given index.\n     * @param {?} index The index of the element to scroll to.\n     * @param {?} behavior The ScrollBehavior to use when scrolling.\n     * @return {?}\n     */\n    scrollToIndex(index, behavior) {\n        if (this._viewport) {\n            this._viewport.scrollToOffset(index * this._itemSize, behavior);\n        }\n    }\n    /**\n     * Update the viewport's total content size.\n     * @return {?}\n     */\n    _updateTotalContentSize() {\n        if (!this._viewport) {\n            return;\n        }\n        this._viewport.setTotalContentSize(this._viewport.getDataLength() * this._itemSize);\n    }\n    /**\n     * Update the viewport's rendered range.\n     * @return {?}\n     */\n    _updateRenderedRange() {\n        if (!this._viewport) {\n            return;\n        }\n        /** @type {?} */\n        const scrollOffset = this._viewport.measureScrollOffset();\n        /** @type {?} */\n        const firstVisibleIndex = scrollOffset / this._itemSize;\n        /** @type {?} */\n        const renderedRange = this._viewport.getRenderedRange();\n        /** @type {?} */\n        const newRange = { start: renderedRange.start, end: renderedRange.end };\n        /** @type {?} */\n        const viewportSize = this._viewport.getViewportSize();\n        /** @type {?} */\n        const dataLength = this._viewport.getDataLength();\n        /** @type {?} */\n        const startBuffer = scrollOffset - newRange.start * this._itemSize;\n        if (startBuffer < this._minBufferPx && newRange.start != 0) {\n            /** @type {?} */\n            const expandStart = Math.ceil((this._maxBufferPx - startBuffer) / this._itemSize);\n            newRange.start = Math.max(0, newRange.start - expandStart);\n            newRange.end = Math.min(dataLength, Math.ceil(firstVisibleIndex + (viewportSize + this._minBufferPx) / this._itemSize));\n        }\n        else {\n            /** @type {?} */\n            const endBuffer = newRange.end * this._itemSize - (scrollOffset + viewportSize);\n            if (endBuffer < this._minBufferPx && newRange.end != dataLength) {\n                /** @type {?} */\n                const expandEnd = Math.ceil((this._maxBufferPx - endBuffer) / this._itemSize);\n                if (expandEnd > 0) {\n                    newRange.end = Math.min(dataLength, newRange.end + expandEnd);\n                    newRange.start = Math.max(0, Math.floor(firstVisibleIndex - this._minBufferPx / this._itemSize));\n                }\n            }\n        }\n        this._viewport.setRenderedRange(newRange);\n        this._viewport.setRenderedContentOffset(this._itemSize * newRange.start);\n        this._scrolledIndexChange.next(Math.floor(firstVisibleIndex));\n    }\n}\n/**\n * Provider factory for `FixedSizeVirtualScrollStrategy` that simply extracts the already created\n * `FixedSizeVirtualScrollStrategy` from the given directive.\n * @param {?} fixedSizeDir The instance of `CdkFixedSizeVirtualScroll` to extract the\n *     `FixedSizeVirtualScrollStrategy` from.\n * @return {?}\n */\nfunction _fixedSizeVirtualScrollStrategyFactory(fixedSizeDir) {\n    return fixedSizeDir._scrollStrategy;\n}\n/**\n * A virtual scroll strategy that supports fixed-size items.\n */\nclass CdkFixedSizeVirtualScroll {\n    constructor() {\n        this._itemSize = 20;\n        this._minBufferPx = 100;\n        this._maxBufferPx = 200;\n        /**\n         * The scroll strategy used by this directive.\n         */\n        this._scrollStrategy = new FixedSizeVirtualScrollStrategy(this.itemSize, this.minBufferPx, this.maxBufferPx);\n    }\n    /**\n     * The size of the items in the list (in pixels).\n     * @return {?}\n     */\n    get itemSize() { return this._itemSize; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set itemSize(value) { this._itemSize = coerceNumberProperty(value); }\n    /**\n     * The minimum amount of buffer rendered beyond the viewport (in pixels).\n     * If the amount of buffer dips below this number, more items will be rendered. Defaults to 100px.\n     * @return {?}\n     */\n    get minBufferPx() { return this._minBufferPx; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set minBufferPx(value) { this._minBufferPx = coerceNumberProperty(value); }\n    /**\n     * The number of pixels worth of buffer to render for when rendering new items. Defaults to 200px.\n     * @return {?}\n     */\n    get maxBufferPx() { return this._maxBufferPx; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set maxBufferPx(value) { this._maxBufferPx = coerceNumberProperty(value); }\n    /**\n     * @return {?}\n     */\n    ngOnChanges() {\n        this._scrollStrategy.updateItemAndBufferSize(this.itemSize, this.minBufferPx, this.maxBufferPx);\n    }\n}\nCdkFixedSizeVirtualScroll.ɵfac = function CdkFixedSizeVirtualScroll_Factory(t) { return new (t || CdkFixedSizeVirtualScroll)(); };\nCdkFixedSizeVirtualScroll.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: CdkFixedSizeVirtualScroll, selectors: [[\"cdk-virtual-scroll-viewport\", \"itemSize\", \"\"]], inputs: { itemSize: \"itemSize\", minBufferPx: \"minBufferPx\", maxBufferPx: \"maxBufferPx\" }, features: [ɵngcc0.ɵɵProvidersFeature([{\n                provide: VIRTUAL_SCROLL_STRATEGY,\n                useFactory: _fixedSizeVirtualScrollStrategyFactory,\n                deps: [forwardRef(() => CdkFixedSizeVirtualScroll)]\n            }]), ɵngcc0.ɵɵNgOnChangesFeature] });\nCdkFixedSizeVirtualScroll.propDecorators = {\n    itemSize: [{ type: Input }],\n    minBufferPx: [{ type: Input }],\n    maxBufferPx: [{ type: Input }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkFixedSizeVirtualScroll, [{\n        type: Directive,\n        args: [{\n                selector: 'cdk-virtual-scroll-viewport[itemSize]',\n                providers: [{\n                        provide: VIRTUAL_SCROLL_STRATEGY,\n                        useFactory: _fixedSizeVirtualScrollStrategyFactory,\n                        deps: [forwardRef(() => CdkFixedSizeVirtualScroll)]\n                    }]\n            }]\n    }], function () { return []; }, { itemSize: [{\n            type: Input\n        }], minBufferPx: [{\n            type: Input\n        }], maxBufferPx: [{\n            type: Input\n        }] }); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/** *\n * Time in ms to throttle the scrolling events by default.\n  @type {?} */\nconst DEFAULT_SCROLL_TIME = 20;\n/**\n * Service contained all registered Scrollable references and emits an event when any one of the\n * Scrollable references emit a scrolled event.\n */\nclass ScrollDispatcher {\n    /**\n     * @param {?} _ngZone\n     * @param {?} _platform\n     */\n    constructor(_ngZone, _platform) {\n        this._ngZone = _ngZone;\n        this._platform = _platform;\n        /**\n         * Subject for notifying that a registered scrollable reference element has been scrolled.\n         */\n        this._scrolled = new Subject();\n        /**\n         * Keeps track of the global `scroll` and `resize` subscriptions.\n         */\n        this._globalSubscription = null;\n        /**\n         * Keeps track of the amount of subscriptions to `scrolled`. Used for cleaning up afterwards.\n         */\n        this._scrolledCount = 0;\n        /**\n         * Map of all the scrollable references that are registered with the service and their\n         * scroll event subscriptions.\n         */\n        this.scrollContainers = new Map();\n    }\n    /**\n     * Registers a scrollable instance with the service and listens for its scrolled events. When the\n     * scrollable is scrolled, the service emits the event to its scrolled observable.\n     * @param {?} scrollable Scrollable instance to be registered.\n     * @return {?}\n     */\n    register(scrollable) {\n        /** @type {?} */\n        const scrollSubscription = scrollable.elementScrolled()\n            .subscribe(() => this._scrolled.next(scrollable));\n        this.scrollContainers.set(scrollable, scrollSubscription);\n    }\n    /**\n     * Deregisters a Scrollable reference and unsubscribes from its scroll event observable.\n     * @param {?} scrollable Scrollable instance to be deregistered.\n     * @return {?}\n     */\n    deregister(scrollable) {\n        /** @type {?} */\n        const scrollableReference = this.scrollContainers.get(scrollable);\n        if (scrollableReference) {\n            scrollableReference.unsubscribe();\n            this.scrollContainers.delete(scrollable);\n        }\n    }\n    /**\n     * Returns an observable that emits an event whenever any of the registered Scrollable\n     * references (or window, document, or body) fire a scrolled event. Can provide a time in ms\n     * to override the default \"throttle\" time.\n     *\n     * **Note:** in order to avoid hitting change detection for every scroll event,\n     * all of the events emitted from this stream will be run outside the Angular zone.\n     * If you need to update any data bindings as a result of a scroll event, you have\n     * to run the callback using `NgZone.run`.\n     * @param {?=} auditTimeInMs\n     * @return {?}\n     */\n    scrolled(auditTimeInMs = DEFAULT_SCROLL_TIME) {\n        if (!this._platform.isBrowser) {\n            return of();\n        }\n        return Observable.create((observer) => {\n            if (!this._globalSubscription) {\n                this._addGlobalListener();\n            }\n            /** @type {?} */\n            const subscription = auditTimeInMs > 0 ?\n                this._scrolled.pipe(auditTime(auditTimeInMs)).subscribe(observer) :\n                this._scrolled.subscribe(observer);\n            this._scrolledCount++;\n            return () => {\n                subscription.unsubscribe();\n                this._scrolledCount--;\n                if (!this._scrolledCount) {\n                    this._removeGlobalListener();\n                }\n            };\n        });\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this._removeGlobalListener();\n        this.scrollContainers.forEach((_, container) => this.deregister(container));\n        this._scrolled.complete();\n    }\n    /**\n     * Returns an observable that emits whenever any of the\n     * scrollable ancestors of an element are scrolled.\n     * @param {?} elementRef Element whose ancestors to listen for.\n     * @param {?=} auditTimeInMs Time to throttle the scroll events.\n     * @return {?}\n     */\n    ancestorScrolled(elementRef, auditTimeInMs) {\n        /** @type {?} */\n        const ancestors = this.getAncestorScrollContainers(elementRef);\n        return this.scrolled(auditTimeInMs).pipe(filter(target => {\n            return !target || ancestors.indexOf(target) > -1;\n        }));\n    }\n    /**\n     * Returns all registered Scrollables that contain the provided element.\n     * @param {?} elementRef\n     * @return {?}\n     */\n    getAncestorScrollContainers(elementRef) {\n        /** @type {?} */\n        const scrollingContainers = [];\n        this.scrollContainers.forEach((_subscription, scrollable) => {\n            if (this._scrollableContainsElement(scrollable, elementRef)) {\n                scrollingContainers.push(scrollable);\n            }\n        });\n        return scrollingContainers;\n    }\n    /**\n     * Returns true if the element is contained within the provided Scrollable.\n     * @param {?} scrollable\n     * @param {?} elementRef\n     * @return {?}\n     */\n    _scrollableContainsElement(scrollable, elementRef) {\n        /** @type {?} */\n        let element = elementRef.nativeElement;\n        /** @type {?} */\n        let scrollableElement = scrollable.getElementRef().nativeElement;\n        // Traverse through the element parents until we reach null, checking if any of the elements\n        // are the scrollable's element.\n        do {\n            if (element == scrollableElement) {\n                return true;\n            }\n        } while (element = /** @type {?} */ ((element)).parentElement);\n        return false;\n    }\n    /**\n     * Sets up the global scroll listeners.\n     * @return {?}\n     */\n    _addGlobalListener() {\n        this._globalSubscription = this._ngZone.runOutsideAngular(() => {\n            return fromEvent(window.document, 'scroll').subscribe(() => this._scrolled.next());\n        });\n    }\n    /**\n     * Cleans up the global scroll listener.\n     * @return {?}\n     */\n    _removeGlobalListener() {\n        if (this._globalSubscription) {\n            this._globalSubscription.unsubscribe();\n            this._globalSubscription = null;\n        }\n    }\n}\nScrollDispatcher.ɵfac = function ScrollDispatcher_Factory(t) { return new (t || ScrollDispatcher)(ɵngcc0.ɵɵinject(ɵngcc0.NgZone), ɵngcc0.ɵɵinject(ɵngcc1.Platform)); };\nScrollDispatcher.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: ScrollDispatcher, factory: ScrollDispatcher.ɵfac, providedIn: 'root' });\n/** @nocollapse */\nScrollDispatcher.ctorParameters = () => [\n    { type: NgZone },\n    { type: Platform }\n];\n/** @nocollapse */ ScrollDispatcher.ngInjectableDef = defineInjectable({ factory: function ScrollDispatcher_Factory() { return new ScrollDispatcher(inject(NgZone), inject(Platform)); }, token: ScrollDispatcher, providedIn: \"root\" });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ScrollDispatcher, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return [{ type: ɵngcc0.NgZone }, { type: ɵngcc1.Platform }]; }, null); })();\n/**\n * \\@docs-private \\@deprecated \\@breaking-change 8.0.0\n * @param {?} parentDispatcher\n * @param {?} ngZone\n * @param {?} platform\n * @return {?}\n */\nfunction SCROLL_DISPATCHER_PROVIDER_FACTORY(parentDispatcher, ngZone, platform) {\n    return parentDispatcher || new ScrollDispatcher(ngZone, platform);\n}\n/** *\n * \\@docs-private \\@deprecated \\@breaking-change 8.0.0\n  @type {?} */\nconst SCROLL_DISPATCHER_PROVIDER = {\n    // If there is already a ScrollDispatcher available, use that. Otherwise, provide a new one.\n    provide: ScrollDispatcher,\n    deps: [[new Optional(), new SkipSelf(), ScrollDispatcher], NgZone, Platform],\n    useFactory: SCROLL_DISPATCHER_PROVIDER_FACTORY\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * Sends an event when the directive's element is scrolled. Registers itself with the\n * ScrollDispatcher service to include itself as part of its collection of scrolling events that it\n * can be listened to through the service.\n */\nclass CdkScrollable {\n    /**\n     * @param {?} elementRef\n     * @param {?} scrollDispatcher\n     * @param {?} ngZone\n     * @param {?=} dir\n     */\n    constructor(elementRef, scrollDispatcher, ngZone, dir) {\n        this.elementRef = elementRef;\n        this.scrollDispatcher = scrollDispatcher;\n        this.ngZone = ngZone;\n        this.dir = dir;\n        this._destroyed = new Subject();\n        this._elementScrolled = Observable.create((observer) => this.ngZone.runOutsideAngular(() => fromEvent(this.elementRef.nativeElement, 'scroll').pipe(takeUntil(this._destroyed))\n            .subscribe(observer)));\n    }\n    /**\n     * @return {?}\n     */\n    ngOnInit() {\n        this.scrollDispatcher.register(this);\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this.scrollDispatcher.deregister(this);\n        this._destroyed.next();\n        this._destroyed.complete();\n    }\n    /**\n     * Returns observable that emits when a scroll event is fired on the host element.\n     * @return {?}\n     */\n    elementScrolled() {\n        return this._elementScrolled;\n    }\n    /**\n     * Gets the ElementRef for the viewport.\n     * @return {?}\n     */\n    getElementRef() {\n        return this.elementRef;\n    }\n    /**\n     * Scrolls to the specified offsets. This is a normalized version of the browser's native scrollTo\n     * method, since browsers are not consistent about what scrollLeft means in RTL. For this method\n     * left and right always refer to the left and right side of the scrolling container irrespective\n     * of the layout direction. start and end refer to left and right in an LTR context and vice-versa\n     * in an RTL context.\n     * @param {?} options specified the offsets to scroll to.\n     * @return {?}\n     */\n    scrollTo(options) {\n        /** @type {?} */\n        const el = this.elementRef.nativeElement;\n        /** @type {?} */\n        const isRtl = this.dir && this.dir.value == 'rtl';\n        // Rewrite start & end offsets as right or left offsets.\n        options.left = options.left == null ? (isRtl ? options.end : options.start) : options.left;\n        options.right = options.right == null ? (isRtl ? options.start : options.end) : options.right;\n        // Rewrite the bottom offset as a top offset.\n        if (options.bottom != null) {\n            options.top = el.scrollHeight - el.clientHeight - options.bottom;\n        }\n        // Rewrite the right offset as a left offset.\n        if (isRtl && getRtlScrollAxisType() != RtlScrollAxisType.NORMAL) {\n            if (options.left != null) {\n                options.right = el.scrollWidth - el.clientWidth - options.left;\n            }\n            if (getRtlScrollAxisType() == RtlScrollAxisType.INVERTED) {\n                options.left = options.right;\n            }\n            else if (getRtlScrollAxisType() == RtlScrollAxisType.NEGATED) {\n                options.left = options.right ? -options.right : options.right;\n            }\n        }\n        else {\n            if (options.right != null) {\n                options.left = el.scrollWidth - el.clientWidth - options.right;\n            }\n        }\n        this._applyScrollToOptions(options);\n    }\n    /**\n     * @param {?} options\n     * @return {?}\n     */\n    _applyScrollToOptions(options) {\n        /** @type {?} */\n        const el = this.elementRef.nativeElement;\n        if (supportsScrollBehavior()) {\n            el.scrollTo(options);\n        }\n        else {\n            if (options.top != null) {\n                el.scrollTop = options.top;\n            }\n            if (options.left != null) {\n                el.scrollLeft = options.left;\n            }\n        }\n    }\n    /**\n     * Measures the scroll offset relative to the specified edge of the viewport. This method can be\n     * used instead of directly checking scrollLeft or scrollTop, since browsers are not consistent\n     * about what scrollLeft means in RTL. The values returned by this method are normalized such that\n     * left and right always refer to the left and right side of the scrolling container irrespective\n     * of the layout direction. start and end refer to left and right in an LTR context and vice-versa\n     * in an RTL context.\n     * @param {?} from The edge to measure from.\n     * @return {?}\n     */\n    measureScrollOffset(from) {\n        /** @type {?} */\n        const LEFT = 'left';\n        /** @type {?} */\n        const RIGHT = 'right';\n        /** @type {?} */\n        const el = this.elementRef.nativeElement;\n        if (from == 'top') {\n            return el.scrollTop;\n        }\n        if (from == 'bottom') {\n            return el.scrollHeight - el.clientHeight - el.scrollTop;\n        }\n        /** @type {?} */\n        const isRtl = this.dir && this.dir.value == 'rtl';\n        if (from == 'start') {\n            from = isRtl ? RIGHT : LEFT;\n        }\n        else if (from == 'end') {\n            from = isRtl ? LEFT : RIGHT;\n        }\n        if (isRtl && getRtlScrollAxisType() == RtlScrollAxisType.INVERTED) {\n            // For INVERTED, scrollLeft is (scrollWidth - clientWidth) when scrolled all the way left and\n            // 0 when scrolled all the way right.\n            if (from == LEFT) {\n                return el.scrollWidth - el.clientWidth - el.scrollLeft;\n            }\n            else {\n                return el.scrollLeft;\n            }\n        }\n        else if (isRtl && getRtlScrollAxisType() == RtlScrollAxisType.NEGATED) {\n            // For NEGATED, scrollLeft is -(scrollWidth - clientWidth) when scrolled all the way left and\n            // 0 when scrolled all the way right.\n            if (from == LEFT) {\n                return el.scrollLeft + el.scrollWidth - el.clientWidth;\n            }\n            else {\n                return -el.scrollLeft;\n            }\n        }\n        else {\n            // For NORMAL, as well as non-RTL contexts, scrollLeft is 0 when scrolled all the way left and\n            // (scrollWidth - clientWidth) when scrolled all the way right.\n            if (from == LEFT) {\n                return el.scrollLeft;\n            }\n            else {\n                return el.scrollWidth - el.clientWidth - el.scrollLeft;\n            }\n        }\n    }\n}\nCdkScrollable.ɵfac = function CdkScrollable_Factory(t) { return new (t || CdkScrollable)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ScrollDispatcher), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.Directionality, 8)); };\nCdkScrollable.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: CdkScrollable, selectors: [[\"\", \"cdk-scrollable\", \"\"], [\"\", \"cdkScrollable\", \"\"]] });\n/** @nocollapse */\nCdkScrollable.ctorParameters = () => [\n    { type: ElementRef },\n    { type: ScrollDispatcher },\n    { type: NgZone },\n    { type: Directionality, decorators: [{ type: Optional }] }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkScrollable, [{\n        type: Directive,\n        args: [{\n                selector: '[cdk-scrollable], [cdkScrollable]'\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ScrollDispatcher }, { type: ɵngcc0.NgZone }, { type: ɵngcc2.Directionality, decorators: [{\n                type: Optional\n            }] }]; }, null); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * Checks if the given ranges are equal.\n * @param {?} r1\n * @param {?} r2\n * @return {?}\n */\nfunction rangesEqual(r1, r2) {\n    return r1.start == r2.start && r1.end == r2.end;\n}\n/**\n * A viewport that virtualizes it's scrolling with the help of `CdkVirtualForOf`.\n */\nclass CdkVirtualScrollViewport extends CdkScrollable {\n    /**\n     * @param {?} elementRef\n     * @param {?} _changeDetectorRef\n     * @param {?} ngZone\n     * @param {?} _scrollStrategy\n     * @param {?} dir\n     * @param {?} scrollDispatcher\n     */\n    constructor(elementRef, _changeDetectorRef, ngZone, _scrollStrategy, dir, scrollDispatcher) {\n        super(elementRef, scrollDispatcher, ngZone, dir);\n        this.elementRef = elementRef;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._scrollStrategy = _scrollStrategy;\n        /**\n         * Emits when the viewport is detached from a CdkVirtualForOf.\n         */\n        this._detachedSubject = new Subject();\n        /**\n         * Emits when the rendered range changes.\n         */\n        this._renderedRangeSubject = new Subject();\n        /**\n         * The direction the viewport scrolls.\n         */\n        this.orientation = 'vertical';\n        /**\n         * Emits when the index of the first element visible in the viewport changes.\n         */\n        this.scrolledIndexChange = Observable.create((observer) => this._scrollStrategy.scrolledIndexChange.subscribe(index => Promise.resolve().then(() => this.ngZone.run(() => observer.next(index)))));\n        /**\n         * A stream that emits whenever the rendered range changes.\n         */\n        this.renderedRangeStream = this._renderedRangeSubject.asObservable();\n        /**\n         * The transform used to scale the spacer to the same size as all content, including content that\n         * is not currently rendered.\n         */\n        this._totalContentSizeTransform = '';\n        /**\n         * The total size of all content (in pixels), including content that is not currently rendered.\n         */\n        this._totalContentSize = 0;\n        /**\n         * The currently rendered range of indices.\n         */\n        this._renderedRange = { start: 0, end: 0 };\n        /**\n         * The length of the data bound to this viewport (in number of items).\n         */\n        this._dataLength = 0;\n        /**\n         * The size of the viewport (in pixels).\n         */\n        this._viewportSize = 0;\n        /**\n         * The last rendered content offset that was set.\n         */\n        this._renderedContentOffset = 0;\n        /**\n         * Whether the last rendered content offset was to the end of the content (and therefore needs to\n         * be rewritten as an offset to the start of the content).\n         */\n        this._renderedContentOffsetNeedsRewrite = false;\n        /**\n         * Whether there is a pending change detection cycle.\n         */\n        this._isChangeDetectionPending = false;\n        /**\n         * A list of functions to run after the next change detection cycle.\n         */\n        this._runAfterChangeDetection = [];\n        if (!_scrollStrategy) {\n            throw Error('Error: cdk-virtual-scroll-viewport requires the \"itemSize\" property to be set.');\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngOnInit() {\n        super.ngOnInit();\n        // It's still too early to measure the viewport at this point. Deferring with a promise allows\n        // the Viewport to be rendered with the correct size before we measure. We run this outside the\n        // zone to avoid causing more change detection cycles. We handle the change detection loop\n        // ourselves instead.\n        this.ngZone.runOutsideAngular(() => Promise.resolve().then(() => {\n            this._measureViewportSize();\n            this._scrollStrategy.attach(this);\n            this.elementScrolled()\n                .pipe(\n            // Start off with a fake scroll event so we properly detect our initial position.\n            startWith(/** @type {?} */ ((null))), \n            // Collect multiple events into one until the next animation frame. This way if\n            // there are multiple scroll events in the same frame we only need to recheck\n            // our layout once.\n            auditTime(0, animationFrameScheduler))\n                .subscribe(() => this._scrollStrategy.onContentScrolled());\n            this._markChangeDetectionNeeded();\n        }));\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this.detach();\n        this._scrollStrategy.detach();\n        // Complete all subjects\n        this._renderedRangeSubject.complete();\n        this._detachedSubject.complete();\n        super.ngOnDestroy();\n    }\n    /**\n     * Attaches a `CdkVirtualForOf` to this viewport.\n     * @param {?} forOf\n     * @return {?}\n     */\n    attach(forOf) {\n        if (this._forOf) {\n            throw Error('CdkVirtualScrollViewport is already attached.');\n        }\n        // Subscribe to the data stream of the CdkVirtualForOf to keep track of when the data length\n        // changes. Run outside the zone to avoid triggering change detection, since we're managing the\n        // change detection loop ourselves.\n        this.ngZone.runOutsideAngular(() => {\n            this._forOf = forOf;\n            this._forOf.dataStream.pipe(takeUntil(this._detachedSubject)).subscribe(data => {\n                /** @type {?} */\n                const newLength = data.length;\n                if (newLength !== this._dataLength) {\n                    this._dataLength = newLength;\n                    this._scrollStrategy.onDataLengthChanged();\n                }\n                this._doChangeDetection();\n            });\n        });\n    }\n    /**\n     * Detaches the current `CdkVirtualForOf`.\n     * @return {?}\n     */\n    detach() {\n        this._forOf = null;\n        this._detachedSubject.next();\n    }\n    /**\n     * Gets the length of the data bound to this viewport (in number of items).\n     * @return {?}\n     */\n    getDataLength() {\n        return this._dataLength;\n    }\n    /**\n     * Gets the size of the viewport (in pixels).\n     * @return {?}\n     */\n    getViewportSize() {\n        return this._viewportSize;\n    }\n    /**\n     * Get the current rendered range of items.\n     * @return {?}\n     */\n    getRenderedRange() {\n        return this._renderedRange;\n    }\n    /**\n     * Sets the total size of all content (in pixels), including content that is not currently\n     * rendered.\n     * @param {?} size\n     * @return {?}\n     */\n    setTotalContentSize(size) {\n        if (this._totalContentSize !== size) {\n            this._totalContentSize = size;\n            /** @type {?} */\n            const axis = this.orientation == 'horizontal' ? 'X' : 'Y';\n            this._totalContentSizeTransform = `scale${axis}(${this._totalContentSize})`;\n            this._markChangeDetectionNeeded();\n        }\n    }\n    /**\n     * Sets the currently rendered range of indices.\n     * @param {?} range\n     * @return {?}\n     */\n    setRenderedRange(range) {\n        if (!rangesEqual(this._renderedRange, range)) {\n            this._renderedRangeSubject.next(this._renderedRange = range);\n            this._markChangeDetectionNeeded(() => this._scrollStrategy.onContentRendered());\n        }\n    }\n    /**\n     * Gets the offset from the start of the viewport to the start of the rendered data (in pixels).\n     * @return {?}\n     */\n    getOffsetToRenderedContentStart() {\n        return this._renderedContentOffsetNeedsRewrite ? null : this._renderedContentOffset;\n    }\n    /**\n     * Sets the offset from the start of the viewport to either the start or end of the rendered data\n     * (in pixels).\n     * @param {?} offset\n     * @param {?=} to\n     * @return {?}\n     */\n    setRenderedContentOffset(offset, to = 'to-start') {\n        /** @type {?} */\n        const isRtl = this.dir && this.dir.value == 'rtl';\n        /** @type {?} */\n        const isHorizontal = this.orientation == 'horizontal';\n        /** @type {?} */\n        const axis = isHorizontal ? 'X' : 'Y';\n        /** @type {?} */\n        const axisDirection = isHorizontal && isRtl ? -1 : 1;\n        /** @type {?} */\n        let transform = `translate${axis}(${Number(axisDirection * offset)}px)`;\n        this._renderedContentOffset = offset;\n        if (to === 'to-end') {\n            transform += ` translate${axis}(-100%)`;\n            // The viewport should rewrite this as a `to-start` offset on the next render cycle. Otherwise\n            // elements will appear to expand in the wrong direction (e.g. `mat-expansion-panel` would\n            // expand upward).\n            this._renderedContentOffsetNeedsRewrite = true;\n        }\n        if (this._renderedContentTransform != transform) {\n            // We know this value is safe because we parse `offset` with `Number()` before passing it\n            // into the string.\n            this._renderedContentTransform = transform;\n            this._markChangeDetectionNeeded(() => {\n                if (this._renderedContentOffsetNeedsRewrite) {\n                    this._renderedContentOffset -= this.measureRenderedContentSize();\n                    this._renderedContentOffsetNeedsRewrite = false;\n                    this.setRenderedContentOffset(this._renderedContentOffset);\n                }\n                else {\n                    this._scrollStrategy.onRenderedOffsetChanged();\n                }\n            });\n        }\n    }\n    /**\n     * Scrolls to the given offset from the start of the viewport. Please note that this is not always\n     * the same as setting `scrollTop` or `scrollLeft`. In a horizontal viewport with right-to-left\n     * direction, this would be the equivalent of setting a fictional `scrollRight` property.\n     * @param {?} offset The offset to scroll to.\n     * @param {?=} behavior The ScrollBehavior to use when scrolling. Default is behavior is `auto`.\n     * @return {?}\n     */\n    scrollToOffset(offset, behavior = 'auto') {\n        /** @type {?} */\n        const options = { behavior };\n        if (this.orientation === 'horizontal') {\n            options.start = offset;\n        }\n        else {\n            options.top = offset;\n        }\n        this.scrollTo(options);\n    }\n    /**\n     * Scrolls to the offset for the given index.\n     * @param {?} index The index of the element to scroll to.\n     * @param {?=} behavior The ScrollBehavior to use when scrolling. Default is behavior is `auto`.\n     * @return {?}\n     */\n    scrollToIndex(index, behavior = 'auto') {\n        this._scrollStrategy.scrollToIndex(index, behavior);\n    }\n    /**\n     * Gets the current scroll offset from the start of the viewport (in pixels).\n     * @param {?=} from The edge to measure the offset from. Defaults to 'top' in vertical mode and 'start'\n     *     in horizontal mode.\n     * @return {?}\n     */\n    measureScrollOffset(from) {\n        return super.measureScrollOffset(from ? from : this.orientation === 'horizontal' ? 'start' : 'top');\n    }\n    /**\n     * Measure the combined size of all of the rendered items.\n     * @return {?}\n     */\n    measureRenderedContentSize() {\n        /** @type {?} */\n        const contentEl = this._contentWrapper.nativeElement;\n        return this.orientation === 'horizontal' ? contentEl.offsetWidth : contentEl.offsetHeight;\n    }\n    /**\n     * Measure the total combined size of the given range. Throws if the range includes items that are\n     * not rendered.\n     * @param {?} range\n     * @return {?}\n     */\n    measureRangeSize(range) {\n        if (!this._forOf) {\n            return 0;\n        }\n        return this._forOf.measureRangeSize(range, this.orientation);\n    }\n    /**\n     * Update the viewport dimensions and re-render.\n     * @return {?}\n     */\n    checkViewportSize() {\n        // TODO: Cleanup later when add logic for handling content resize\n        this._measureViewportSize();\n        this._scrollStrategy.onDataLengthChanged();\n    }\n    /**\n     * Measure the viewport size.\n     * @return {?}\n     */\n    _measureViewportSize() {\n        /** @type {?} */\n        const viewportEl = this.elementRef.nativeElement;\n        this._viewportSize = this.orientation === 'horizontal' ?\n            viewportEl.clientWidth : viewportEl.clientHeight;\n    }\n    /**\n     * Queue up change detection to run.\n     * @param {?=} runAfter\n     * @return {?}\n     */\n    _markChangeDetectionNeeded(runAfter) {\n        if (runAfter) {\n            this._runAfterChangeDetection.push(runAfter);\n        }\n        // Use a Promise to batch together calls to `_doChangeDetection`. This way if we set a bunch of\n        // properties sequentially we only have to run `_doChangeDetection` once at the end.\n        if (!this._isChangeDetectionPending) {\n            this._isChangeDetectionPending = true;\n            this.ngZone.runOutsideAngular(() => Promise.resolve().then(() => {\n                this._doChangeDetection();\n            }));\n        }\n    }\n    /**\n     * Run change detection.\n     * @return {?}\n     */\n    _doChangeDetection() {\n        this._isChangeDetectionPending = false;\n        // Apply changes to Angular bindings. Note: We must call `markForCheck` to run change detection\n        // from the root, since the repeated items are content projected in. Calling `detectChanges`\n        // instead does not properly check the projected content.\n        this.ngZone.run(() => this._changeDetectorRef.markForCheck());\n        // Apply the content transform. The transform can't be set via an Angular binding because\n        // bypassSecurityTrustStyle is banned in Google. However the value is safe, it's composed of\n        // string literals, a variable that can only be 'X' or 'Y', and user input that is run through\n        // the `Number` function first to coerce it to a numeric value.\n        this._contentWrapper.nativeElement.style.transform = this._renderedContentTransform;\n        /** @type {?} */\n        const runAfterChangeDetection = this._runAfterChangeDetection;\n        this._runAfterChangeDetection = [];\n        for (const fn of runAfterChangeDetection) {\n            fn();\n        }\n    }\n}\nCdkVirtualScrollViewport.ɵfac = function CdkVirtualScrollViewport_Factory(t) { return new (t || CdkVirtualScrollViewport)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(VIRTUAL_SCROLL_STRATEGY, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.Directionality, 8), ɵngcc0.ɵɵdirectiveInject(ScrollDispatcher)); };\nCdkVirtualScrollViewport.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: CdkVirtualScrollViewport, selectors: [[\"cdk-virtual-scroll-viewport\"]], viewQuery: function CdkVirtualScrollViewport_Query(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(_c0, 5);\n    } if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._contentWrapper = _t.first);\n    } }, hostAttrs: [1, \"cdk-virtual-scroll-viewport\"], hostVars: 4, hostBindings: function CdkVirtualScrollViewport_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"cdk-virtual-scroll-orientation-horizontal\", ctx.orientation === \"horizontal\")(\"cdk-virtual-scroll-orientation-vertical\", ctx.orientation === \"vertical\");\n    } }, inputs: { orientation: \"orientation\" }, outputs: { scrolledIndexChange: \"scrolledIndexChange\" }, features: [ɵngcc0.ɵɵInheritDefinitionFeature], ngContentSelectors: _c1, decls: 4, vars: 2, consts: [[1, \"cdk-virtual-scroll-content-wrapper\"], [\"contentWrapper\", \"\"], [1, \"cdk-virtual-scroll-spacer\"]], template: function CdkVirtualScrollViewport_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵelementStart(0, \"div\", 0, 1);\n        ɵngcc0.ɵɵprojection(2);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelement(3, \"div\", 2);\n    } if (rf & 2) {\n        ɵngcc0.ɵɵadvance(3);\n        ɵngcc0.ɵɵstyleProp(\"transform\", ctx._totalContentSizeTransform);\n    } }, styles: [\"cdk-virtual-scroll-viewport{display:block;position:relative;overflow:auto;contain:strict;transform:translateZ(0);will-change:scroll-position;-webkit-overflow-scrolling:touch}.cdk-virtual-scroll-content-wrapper{position:absolute;top:0;left:0;contain:content}[dir=rtl] .cdk-virtual-scroll-content-wrapper{right:0;left:auto}.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper{min-height:100%}.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>dl:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>ol:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>table:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>ul:not([cdkVirtualFor]){padding-left:0;padding-right:0;margin-left:0;margin-right:0;border-left-width:0;border-right-width:0;outline:0}.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper{min-width:100%}.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>dl:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>ol:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>table:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>ul:not([cdkVirtualFor]){padding-top:0;padding-bottom:0;margin-top:0;margin-bottom:0;border-top-width:0;border-bottom-width:0;outline:0}.cdk-virtual-scroll-spacer{position:absolute;top:0;left:0;height:1px;width:1px;transform-origin:0 0}[dir=rtl] .cdk-virtual-scroll-spacer{right:0;left:auto;transform-origin:100% 0}\"], encapsulation: 2, changeDetection: 0 });\n/** @nocollapse */\nCdkVirtualScrollViewport.ctorParameters = () => [\n    { type: ElementRef },\n    { type: ChangeDetectorRef },\n    { type: NgZone },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [VIRTUAL_SCROLL_STRATEGY,] }] },\n    { type: Directionality, decorators: [{ type: Optional }] },\n    { type: ScrollDispatcher }\n];\nCdkVirtualScrollViewport.propDecorators = {\n    orientation: [{ type: Input }],\n    scrolledIndexChange: [{ type: Output }],\n    _contentWrapper: [{ type: ViewChild, args: ['contentWrapper',] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkVirtualScrollViewport, [{\n        type: Component,\n        args: [{ selector: 'cdk-virtual-scroll-viewport',\n                template: \"<div #contentWrapper class=\\\"cdk-virtual-scroll-content-wrapper\\\"><ng-content></ng-content></div><div class=\\\"cdk-virtual-scroll-spacer\\\" [style.transform]=\\\"_totalContentSizeTransform\\\"></div>\",\n                styles: [\"cdk-virtual-scroll-viewport{display:block;position:relative;overflow:auto;contain:strict;transform:translateZ(0);will-change:scroll-position;-webkit-overflow-scrolling:touch}.cdk-virtual-scroll-content-wrapper{position:absolute;top:0;left:0;contain:content}[dir=rtl] .cdk-virtual-scroll-content-wrapper{right:0;left:auto}.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper{min-height:100%}.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>dl:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>ol:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>table:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>ul:not([cdkVirtualFor]){padding-left:0;padding-right:0;margin-left:0;margin-right:0;border-left-width:0;border-right-width:0;outline:0}.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper{min-width:100%}.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>dl:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>ol:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>table:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>ul:not([cdkVirtualFor]){padding-top:0;padding-bottom:0;margin-top:0;margin-bottom:0;border-top-width:0;border-bottom-width:0;outline:0}.cdk-virtual-scroll-spacer{position:absolute;top:0;left:0;height:1px;width:1px;transform-origin:0 0}[dir=rtl] .cdk-virtual-scroll-spacer{right:0;left:auto;transform-origin:100% 0}\"],\n                host: {\n                    'class': 'cdk-virtual-scroll-viewport',\n                    '[class.cdk-virtual-scroll-orientation-horizontal]': 'orientation === \"horizontal\"',\n                    '[class.cdk-virtual-scroll-orientation-vertical]': 'orientation === \"vertical\"'\n                },\n                encapsulation: ViewEncapsulation.None,\n                changeDetection: ChangeDetectionStrategy.OnPush }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc0.NgZone }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [VIRTUAL_SCROLL_STRATEGY]\n            }] }, { type: ɵngcc2.Directionality, decorators: [{\n                type: Optional\n            }] }, { type: ScrollDispatcher }]; }, { orientation: [{\n            type: Input\n        }], scrolledIndexChange: [{\n            type: Output\n        }], _contentWrapper: [{\n            type: ViewChild,\n            args: ['contentWrapper']\n        }] }); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * Helper to extract size from a DOM Node.\n * @param {?} orientation\n * @param {?} node\n * @return {?}\n */\nfunction getSize(orientation, node) {\n    /** @type {?} */\n    const el = /** @type {?} */ (node);\n    if (!el.getBoundingClientRect) {\n        return 0;\n    }\n    /** @type {?} */\n    const rect = el.getBoundingClientRect();\n    return orientation == 'horizontal' ? rect.width : rect.height;\n}\n/**\n * A directive similar to `ngForOf` to be used for rendering data inside a virtual scrolling\n * container.\n * @template T\n */\nclass CdkVirtualForOf {\n    /**\n     * @param {?} _viewContainerRef\n     * @param {?} _template\n     * @param {?} _differs\n     * @param {?} _viewport\n     * @param {?} ngZone\n     */\n    constructor(_viewContainerRef, _template, _differs, /** The virtual scrolling viewport that these items are being rendered in. */\n    _viewport, ngZone) {\n        this._viewContainerRef = _viewContainerRef;\n        this._template = _template;\n        this._differs = _differs;\n        this._viewport = _viewport;\n        /**\n         * Emits when the rendered view of the data changes.\n         */\n        this.viewChange = new Subject();\n        /**\n         * Subject that emits when a new DataSource instance is given.\n         */\n        this._dataSourceChanges = new Subject();\n        /**\n         * The size of the cache used to store templates that are not being used for re-use later.\n         * Setting the cache size to `0` will disable caching. Defaults to 20 templates.\n         */\n        this.cdkVirtualForTemplateCacheSize = 20;\n        /**\n         * Emits whenever the data in the current DataSource changes.\n         */\n        this.dataStream = this._dataSourceChanges\n            .pipe(\n        // Start off with null `DataSource`.\n        startWith(/** @type {?} */ ((null))), \n        // Bundle up the previous and current data sources so we can work with both.\n        pairwise(), \n        // Use `_changeDataSource` to disconnect from the previous data source and connect to the\n        // new one, passing back a stream of data changes which we run through `switchMap` to give\n        // us a data stream that emits the latest data from whatever the current `DataSource` is.\n        switchMap(([prev, cur]) => this._changeDataSource(prev, cur)), \n        // Replay the last emitted data when someone subscribes.\n        shareReplay(1));\n        /**\n         * The differ used to calculate changes to the data.\n         */\n        this._differ = null;\n        /**\n         * The template cache used to hold on ot template instancess that have been stamped out, but don't\n         * currently need to be rendered. These instances will be reused in the future rather than\n         * stamping out brand new ones.\n         */\n        this._templateCache = [];\n        /**\n         * Whether the rendered data should be updated during the next ngDoCheck cycle.\n         */\n        this._needsUpdate = false;\n        this._destroyed = new Subject();\n        this.dataStream.subscribe(data => {\n            this._data = data;\n            this._onRenderedDataChange();\n        });\n        this._viewport.renderedRangeStream.pipe(takeUntil(this._destroyed)).subscribe(range => {\n            this._renderedRange = range;\n            ngZone.run(() => this.viewChange.next(this._renderedRange));\n            this._onRenderedDataChange();\n        });\n        this._viewport.attach(this);\n    }\n    /**\n     * The DataSource to display.\n     * @return {?}\n     */\n    get cdkVirtualForOf() {\n        return this._cdkVirtualForOf;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set cdkVirtualForOf(value) {\n        this._cdkVirtualForOf = value;\n        /** @type {?} */\n        const ds = value instanceof DataSource ? value :\n            // Slice the value if its an NgIterable to ensure we're working with an array.\n            new ArrayDataSource(value instanceof Observable ? value : Array.prototype.slice.call(value || []));\n        this._dataSourceChanges.next(ds);\n    }\n    /**\n     * The `TrackByFunction` to use for tracking changes. The `TrackByFunction` takes the index and\n     * the item and produces a value to be used as the item's identity when tracking changes.\n     * @return {?}\n     */\n    get cdkVirtualForTrackBy() {\n        return this._cdkVirtualForTrackBy;\n    }\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    set cdkVirtualForTrackBy(fn) {\n        this._needsUpdate = true;\n        this._cdkVirtualForTrackBy = fn ?\n            (index, item) => fn(index + (this._renderedRange ? this._renderedRange.start : 0), item) :\n            undefined;\n    }\n    /**\n     * The template used to stamp out new elements.\n     * @param {?} value\n     * @return {?}\n     */\n    set cdkVirtualForTemplate(value) {\n        if (value) {\n            this._needsUpdate = true;\n            this._template = value;\n        }\n    }\n    /**\n     * Measures the combined size (width for horizontal orientation, height for vertical) of all items\n     * in the specified range. Throws an error if the range includes items that are not currently\n     * rendered.\n     * @param {?} range\n     * @param {?} orientation\n     * @return {?}\n     */\n    measureRangeSize(range, orientation) {\n        if (range.start >= range.end) {\n            return 0;\n        }\n        if (range.start < this._renderedRange.start || range.end > this._renderedRange.end) {\n            throw Error(`Error: attempted to measure an item that isn't rendered.`);\n        }\n        /** @type {?} */\n        const renderedStartIndex = range.start - this._renderedRange.start;\n        /** @type {?} */\n        const rangeLen = range.end - range.start;\n        /** @type {?} */\n        let totalSize = 0;\n        /** @type {?} */\n        let i = rangeLen;\n        while (i--) {\n            /** @type {?} */\n            const view = /** @type {?} */ (this._viewContainerRef.get(i + renderedStartIndex));\n            /** @type {?} */\n            let j = view ? view.rootNodes.length : 0;\n            while (j--) {\n                totalSize += getSize(orientation, /** @type {?} */ ((view)).rootNodes[j]);\n            }\n        }\n        return totalSize;\n    }\n    /**\n     * @return {?}\n     */\n    ngDoCheck() {\n        if (this._differ && this._needsUpdate) {\n            /** @type {?} */\n            const changes = this._differ.diff(this._renderedItems);\n            if (!changes) {\n                this._updateContext();\n            }\n            else {\n                this._applyChanges(changes);\n            }\n            this._needsUpdate = false;\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this._viewport.detach();\n        this._dataSourceChanges.complete();\n        this.viewChange.complete();\n        this._destroyed.next();\n        this._destroyed.complete();\n        for (let view of this._templateCache) {\n            view.destroy();\n        }\n    }\n    /**\n     * React to scroll state changes in the viewport.\n     * @return {?}\n     */\n    _onRenderedDataChange() {\n        if (!this._renderedRange) {\n            return;\n        }\n        this._renderedItems = this._data.slice(this._renderedRange.start, this._renderedRange.end);\n        if (!this._differ) {\n            this._differ = this._differs.find(this._renderedItems).create(this.cdkVirtualForTrackBy);\n        }\n        this._needsUpdate = true;\n    }\n    /**\n     * Swap out one `DataSource` for another.\n     * @param {?} oldDs\n     * @param {?} newDs\n     * @return {?}\n     */\n    _changeDataSource(oldDs, newDs) {\n        if (oldDs) {\n            oldDs.disconnect(this);\n        }\n        this._needsUpdate = true;\n        return newDs.connect(this);\n    }\n    /**\n     * Update the `CdkVirtualForOfContext` for all views.\n     * @return {?}\n     */\n    _updateContext() {\n        /** @type {?} */\n        const count = this._data.length;\n        /** @type {?} */\n        let i = this._viewContainerRef.length;\n        while (i--) {\n            /** @type {?} */\n            let view = /** @type {?} */ (this._viewContainerRef.get(i));\n            view.context.index = this._renderedRange.start + i;\n            view.context.count = count;\n            this._updateComputedContextProperties(view.context);\n            view.detectChanges();\n        }\n    }\n    /**\n     * Apply changes to the DOM.\n     * @param {?} changes\n     * @return {?}\n     */\n    _applyChanges(changes) {\n        // Rearrange the views to put them in the right location.\n        changes.forEachOperation((record, adjustedPreviousIndex, currentIndex) => {\n            if (record.previousIndex == null) { // Item added.\n                /** @type {?} */\n                const view = this._getViewForNewItem();\n                this._viewContainerRef.insert(view, /** @type {?} */ ((currentIndex)));\n                view.context.$implicit = record.item;\n            }\n            else if (currentIndex == null) { // Item removed.\n                // Item removed.\n                this._cacheView(/** @type {?} */ (this._viewContainerRef.detach(/** @type {?} */ ((adjustedPreviousIndex)))));\n            }\n            else { // Item moved.\n                /** @type {?} */\n                const view = /** @type {?} */ (this._viewContainerRef.get(/** @type {?} */ ((adjustedPreviousIndex))));\n                this._viewContainerRef.move(view, currentIndex);\n                view.context.$implicit = record.item;\n            }\n        });\n        // Update $implicit for any items that had an identity change.\n        changes.forEachIdentityChange((record) => {\n            /** @type {?} */\n            const view = /** @type {?} */ (this._viewContainerRef.get(/** @type {?} */ ((record.currentIndex))));\n            view.context.$implicit = record.item;\n        });\n        /** @type {?} */\n        const count = this._data.length;\n        /** @type {?} */\n        let i = this._viewContainerRef.length;\n        while (i--) {\n            /** @type {?} */\n            const view = /** @type {?} */ (this._viewContainerRef.get(i));\n            view.context.index = this._renderedRange.start + i;\n            view.context.count = count;\n            this._updateComputedContextProperties(view.context);\n        }\n    }\n    /**\n     * Cache the given detached view.\n     * @param {?} view\n     * @return {?}\n     */\n    _cacheView(view) {\n        if (this._templateCache.length < this.cdkVirtualForTemplateCacheSize) {\n            this._templateCache.push(view);\n        }\n        else {\n            view.destroy();\n        }\n    }\n    /**\n     * Get a view for a new item, either from the cache or by creating a new one.\n     * @return {?}\n     */\n    _getViewForNewItem() {\n        return this._templateCache.pop() || this._viewContainerRef.createEmbeddedView(this._template, {\n            $implicit: /** @type {?} */ ((null)),\n            cdkVirtualForOf: this._cdkVirtualForOf,\n            index: -1,\n            count: -1,\n            first: false,\n            last: false,\n            odd: false,\n            even: false\n        });\n    }\n    /**\n     * Update the computed properties on the `CdkVirtualForOfContext`.\n     * @param {?} context\n     * @return {?}\n     */\n    _updateComputedContextProperties(context) {\n        context.first = context.index === 0;\n        context.last = context.index === context.count - 1;\n        context.even = context.index % 2 === 0;\n        context.odd = !context.even;\n    }\n}\nCdkVirtualForOf.ɵfac = function CdkVirtualForOf_Factory(t) { return new (t || CdkVirtualForOf)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.IterableDiffers), ɵngcc0.ɵɵdirectiveInject(CdkVirtualScrollViewport, 4), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone)); };\nCdkVirtualForOf.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: CdkVirtualForOf, selectors: [[\"\", \"cdkVirtualFor\", \"\", \"cdkVirtualForOf\", \"\"]], inputs: { cdkVirtualForTemplateCacheSize: \"cdkVirtualForTemplateCacheSize\", cdkVirtualForOf: \"cdkVirtualForOf\", cdkVirtualForTrackBy: \"cdkVirtualForTrackBy\", cdkVirtualForTemplate: \"cdkVirtualForTemplate\" } });\n/** @nocollapse */\nCdkVirtualForOf.ctorParameters = () => [\n    { type: ViewContainerRef },\n    { type: TemplateRef },\n    { type: IterableDiffers },\n    { type: CdkVirtualScrollViewport, decorators: [{ type: SkipSelf }] },\n    { type: NgZone }\n];\nCdkVirtualForOf.propDecorators = {\n    cdkVirtualForOf: [{ type: Input }],\n    cdkVirtualForTrackBy: [{ type: Input }],\n    cdkVirtualForTemplate: [{ type: Input }],\n    cdkVirtualForTemplateCacheSize: [{ type: Input }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkVirtualForOf, [{\n        type: Directive,\n        args: [{\n                selector: '[cdkVirtualFor][cdkVirtualForOf]'\n            }]\n    }], function () { return [{ type: ɵngcc0.ViewContainerRef }, { type: ɵngcc0.TemplateRef }, { type: ɵngcc0.IterableDiffers }, { type: CdkVirtualScrollViewport, decorators: [{\n                type: SkipSelf\n            }] }, { type: ɵngcc0.NgZone }]; }, { cdkVirtualForTemplateCacheSize: [{\n            type: Input\n        }], cdkVirtualForOf: [{\n            type: Input\n        }], cdkVirtualForTrackBy: [{\n            type: Input\n        }], cdkVirtualForTemplate: [{\n            type: Input\n        }] }); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\nclass ScrollingModule {\n}\nScrollingModule.ɵfac = function ScrollingModule_Factory(t) { return new (t || ScrollingModule)(); };\nScrollingModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: ScrollingModule });\nScrollingModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ imports: [[BidiModule, PlatformModule], BidiModule] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ScrollingModule, [{\n        type: NgModule,\n        args: [{\n                imports: [BidiModule, PlatformModule],\n                exports: [\n                    BidiModule,\n                    CdkFixedSizeVirtualScroll,\n                    CdkScrollable,\n                    CdkVirtualForOf,\n                    CdkVirtualScrollViewport,\n                ],\n                declarations: [\n                    CdkFixedSizeVirtualScroll,\n                    CdkScrollable,\n                    CdkVirtualForOf,\n                    CdkVirtualScrollViewport,\n                ]\n            }]\n    }], null, null); })();\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(ScrollingModule, { declarations: function () { return [CdkFixedSizeVirtualScroll, CdkScrollable, CdkVirtualForOf, CdkVirtualScrollViewport]; }, imports: function () { return [BidiModule, PlatformModule]; }, exports: function () { return [BidiModule, CdkFixedSizeVirtualScroll, CdkScrollable, CdkVirtualForOf, CdkVirtualScrollViewport]; } }); })();\n/**\n * @deprecated ScrollDispatchModule has been renamed to ScrollingModule.\n * \\@breaking-change 8.0.0 delete this alias\n */\nclass ScrollDispatchModule {\n}\nScrollDispatchModule.ɵfac = function ScrollDispatchModule_Factory(t) { return new (t || ScrollDispatchModule)(); };\nScrollDispatchModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: ScrollDispatchModule });\nScrollDispatchModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ imports: [[ScrollingModule], ScrollingModule] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ScrollDispatchModule, [{\n        type: NgModule,\n        args: [{\n                imports: [ScrollingModule],\n                exports: [ScrollingModule]\n            }]\n    }], null, null); })();\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(ScrollDispatchModule, { imports: [ScrollingModule], exports: [ScrollingModule] }); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/** *\n * Time in ms to throttle the resize events by default.\n  @type {?} */\nconst DEFAULT_RESIZE_TIME = 20;\n/**\n * Simple utility for getting the bounds of the browser viewport.\n * \\@docs-private\n */\nclass ViewportRuler {\n    /**\n     * @param {?} _platform\n     * @param {?} ngZone\n     */\n    constructor(_platform, ngZone) {\n        this._platform = _platform;\n        ngZone.runOutsideAngular(() => {\n            this._change = _platform.isBrowser ?\n                merge(fromEvent(window, 'resize'), fromEvent(window, 'orientationchange')) :\n                of();\n            // Note that we need to do the subscription inside `runOutsideAngular`\n            // since subscribing is what causes the event listener to be added.\n            this._invalidateCache = this.change().subscribe(() => this._updateViewportSize());\n        });\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this._invalidateCache.unsubscribe();\n    }\n    /**\n     * Returns the viewport's width and height.\n     * @return {?}\n     */\n    getViewportSize() {\n        if (!this._viewportSize) {\n            this._updateViewportSize();\n        }\n        /** @type {?} */\n        const output = { width: this._viewportSize.width, height: this._viewportSize.height };\n        // If we're not on a browser, don't cache the size since it'll be mocked out anyway.\n        if (!this._platform.isBrowser) {\n            this._viewportSize = /** @type {?} */ ((null));\n        }\n        return output;\n    }\n    /**\n     * Gets a ClientRect for the viewport's bounds.\n     * @return {?}\n     */\n    getViewportRect() {\n        /** @type {?} */\n        const scrollPosition = this.getViewportScrollPosition();\n        const { width, height } = this.getViewportSize();\n        return {\n            top: scrollPosition.top,\n            left: scrollPosition.left,\n            bottom: scrollPosition.top + height,\n            right: scrollPosition.left + width,\n            height,\n            width,\n        };\n    }\n    /**\n     * Gets the (top, left) scroll position of the viewport.\n     * @return {?}\n     */\n    getViewportScrollPosition() {\n        // While we can get a reference to the fake document\n        // during SSR, it doesn't have getBoundingClientRect.\n        if (!this._platform.isBrowser) {\n            return { top: 0, left: 0 };\n        }\n        /** @type {?} */\n        const documentElement = /** @type {?} */ ((document.documentElement));\n        /** @type {?} */\n        const documentRect = documentElement.getBoundingClientRect();\n        /** @type {?} */\n        const top = -documentRect.top || document.body.scrollTop || window.scrollY ||\n            documentElement.scrollTop || 0;\n        /** @type {?} */\n        const left = -documentRect.left || document.body.scrollLeft || window.scrollX ||\n            documentElement.scrollLeft || 0;\n        return { top, left };\n    }\n    /**\n     * Returns a stream that emits whenever the size of the viewport changes.\n     * @param {?=} throttleTime Time in milliseconds to throttle the stream.\n     * @return {?}\n     */\n    change(throttleTime = DEFAULT_RESIZE_TIME) {\n        return throttleTime > 0 ? this._change.pipe(auditTime(throttleTime)) : this._change;\n    }\n    /**\n     * Updates the cached viewport size.\n     * @return {?}\n     */\n    _updateViewportSize() {\n        this._viewportSize = this._platform.isBrowser ?\n            { width: window.innerWidth, height: window.innerHeight } :\n            { width: 0, height: 0 };\n    }\n}\nViewportRuler.ɵfac = function ViewportRuler_Factory(t) { return new (t || ViewportRuler)(ɵngcc0.ɵɵinject(ɵngcc1.Platform), ɵngcc0.ɵɵinject(ɵngcc0.NgZone)); };\nViewportRuler.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: ViewportRuler, factory: ViewportRuler.ɵfac, providedIn: 'root' });\n/** @nocollapse */\nViewportRuler.ctorParameters = () => [\n    { type: Platform },\n    { type: NgZone }\n];\n/** @nocollapse */ ViewportRuler.ngInjectableDef = defineInjectable({ factory: function ViewportRuler_Factory() { return new ViewportRuler(inject(Platform), inject(NgZone)); }, token: ViewportRuler, providedIn: \"root\" });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ViewportRuler, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return [{ type: ɵngcc1.Platform }, { type: ɵngcc0.NgZone }]; }, null); })();\n/**\n * \\@docs-private \\@deprecated \\@breaking-change 8.0.0\n * @param {?} parentRuler\n * @param {?} platform\n * @param {?} ngZone\n * @return {?}\n */\nfunction VIEWPORT_RULER_PROVIDER_FACTORY(parentRuler, platform, ngZone) {\n    return parentRuler || new ViewportRuler(platform, ngZone);\n}\n/** *\n * \\@docs-private \\@deprecated \\@breaking-change 8.0.0\n  @type {?} */\nconst VIEWPORT_RULER_PROVIDER = {\n    // If there is already a ViewportRuler available, use that. Otherwise, provide a new one.\n    provide: ViewportRuler,\n    deps: [[new Optional(), new SkipSelf(), ViewportRuler], Platform, NgZone],\n    useFactory: VIEWPORT_RULER_PROVIDER_FACTORY\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\nexport { _fixedSizeVirtualScrollStrategyFactory, FixedSizeVirtualScrollStrategy, CdkFixedSizeVirtualScroll, SCROLL_DISPATCHER_PROVIDER_FACTORY, DEFAULT_SCROLL_TIME, ScrollDispatcher, SCROLL_DISPATCHER_PROVIDER, CdkScrollable, ScrollingModule, ScrollDispatchModule, VIEWPORT_RULER_PROVIDER_FACTORY, DEFAULT_RESIZE_TIME, ViewportRuler, VIEWPORT_RULER_PROVIDER, CdkVirtualForOf, VIRTUAL_SCROLL_STRATEGY, CdkVirtualScrollViewport };\n\n//# sourceMappingURL=scrolling.js.map"]},"metadata":{},"sourceType":"module"}