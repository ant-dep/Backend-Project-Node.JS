{"ast":null,"code":"import _classCallCheck from \"/Users/adepertat/Dropbox/ECOLES/Openclassroom/P6_de_Pertat_Antoine/AntoinedePertat_6_240521/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/adepertat/Dropbox/ECOLES/Openclassroom/P6_de_Pertat_Antoine/AntoinedePertat_6_240521/frontend/node_modules/@babel/runtime/helpers/esm/createClass\";\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Platform, normalizePassiveListenerOptions, PlatformModule } from '@angular/cdk/platform';\nimport { Directive, ElementRef, EventEmitter, Injectable, NgZone, Output, Input, NgModule, defineInjectable, inject } from '@angular/core';\nimport { EMPTY, Subject, fromEvent } from 'rxjs';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { auditTime, takeUntil } from 'rxjs/operators';\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/** *\n * Options to pass to the animationstart listener.\n  @type {?} */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/platform';\nvar listenerOptions = /*@__PURE__*/normalizePassiveListenerOptions({\n  passive: true\n});\n\nvar AutofillMonitor = /*@__PURE__*/function () {\n  var AutofillMonitor = /*#__PURE__*/function () {\n    /**\n     * @param {?} _platform\n     * @param {?} _ngZone\n     */\n    function AutofillMonitor(_platform, _ngZone) {\n      _classCallCheck(this, AutofillMonitor);\n\n      this._platform = _platform;\n      this._ngZone = _ngZone;\n      this._monitoredElements = new Map();\n    }\n    /**\n     * @param {?} elementOrRef\n     * @return {?}\n     */\n\n\n    _createClass(AutofillMonitor, [{\n      key: \"monitor\",\n      value: function monitor(elementOrRef) {\n        var _this = this;\n\n        if (!this._platform.isBrowser) {\n          return EMPTY;\n        }\n        /** @type {?} */\n\n\n        var element = elementOrRef instanceof ElementRef ? elementOrRef.nativeElement : elementOrRef;\n        /** @type {?} */\n\n        var info = this._monitoredElements.get(element);\n\n        if (info) {\n          return info.subject.asObservable();\n        }\n        /** @type {?} */\n\n\n        var result = new Subject();\n        /** @type {?} */\n\n        var cssClass = 'cdk-text-field-autofilled';\n        /** @type {?} */\n\n        var listener =\n        /** @type {?} */\n        function listener(event) {\n          // Animation events fire on initial element render, we check for the presence of the autofill\n          // CSS class to make sure this is a real change in state, not just the initial render before\n          // we fire off events.\n          if (event.animationName === 'cdk-text-field-autofill-start' && !element.classList.contains(cssClass)) {\n            element.classList.add(cssClass);\n\n            _this._ngZone.run(function () {\n              return result.next({\n                target:\n                /** @type {?} */\n                event.target,\n                isAutofilled: true\n              });\n            });\n          } else if (event.animationName === 'cdk-text-field-autofill-end' && element.classList.contains(cssClass)) {\n            element.classList.remove(cssClass);\n\n            _this._ngZone.run(function () {\n              return result.next({\n                target:\n                /** @type {?} */\n                event.target,\n                isAutofilled: false\n              });\n            });\n          }\n        };\n\n        this._ngZone.runOutsideAngular(function () {\n          element.addEventListener('animationstart', listener, listenerOptions);\n          element.classList.add('cdk-text-field-autofill-monitored');\n        });\n\n        this._monitoredElements.set(element, {\n          subject: result,\n          unlisten: function unlisten() {\n            element.removeEventListener('animationstart', listener, listenerOptions);\n          }\n        });\n\n        return result.asObservable();\n      }\n      /**\n       * @param {?} elementOrRef\n       * @return {?}\n       */\n\n    }, {\n      key: \"stopMonitoring\",\n      value: function stopMonitoring(elementOrRef) {\n        /** @type {?} */\n        var element = elementOrRef instanceof ElementRef ? elementOrRef.nativeElement : elementOrRef;\n        /** @type {?} */\n\n        var info = this._monitoredElements.get(element);\n\n        if (info) {\n          info.unlisten();\n          info.subject.complete();\n          element.classList.remove('cdk-text-field-autofill-monitored');\n          element.classList.remove('cdk-text-field-autofilled');\n\n          this._monitoredElements.delete(element);\n        }\n      }\n      /**\n       * @return {?}\n       */\n\n    }, {\n      key: \"ngOnDestroy\",\n      value: function ngOnDestroy() {\n        var _this2 = this;\n\n        this._monitoredElements.forEach(function (_info, element) {\n          return _this2.stopMonitoring(element);\n        });\n      }\n    }]);\n\n    return AutofillMonitor;\n  }();\n\n  AutofillMonitor.ɵfac = function AutofillMonitor_Factory(t) {\n    return new (t || AutofillMonitor)(ɵngcc0.ɵɵinject(ɵngcc1.Platform), ɵngcc0.ɵɵinject(ɵngcc0.NgZone));\n  };\n\n  AutofillMonitor.ɵprov =\n  /*@__PURE__*/\n\n  /*@__PURE__*/\n  ɵngcc0.ɵɵdefineInjectable({\n    token: AutofillMonitor,\n    factory: AutofillMonitor.ɵfac,\n    providedIn: 'root'\n  });\n  /** @nocollapse */\n\n  AutofillMonitor.ngInjectableDef = /*@__PURE__*/defineInjectable({\n    factory: function AutofillMonitor_Factory() {\n      return new AutofillMonitor(inject(Platform), inject(NgZone));\n    },\n    token: AutofillMonitor,\n    providedIn: \"root\"\n  });\n  return AutofillMonitor;\n}();\n\nvar CdkAutofill = /*@__PURE__*/function () {\n  var CdkAutofill = /*#__PURE__*/function () {\n    /**\n     * @param {?} _elementRef\n     * @param {?} _autofillMonitor\n     */\n    function CdkAutofill(_elementRef, _autofillMonitor) {\n      _classCallCheck(this, CdkAutofill);\n\n      this._elementRef = _elementRef;\n      this._autofillMonitor = _autofillMonitor;\n      /**\n       * Emits when the autofill state of the element changes.\n       */\n\n      this.cdkAutofill = new EventEmitter();\n    }\n    /**\n     * @return {?}\n     */\n\n\n    _createClass(CdkAutofill, [{\n      key: \"ngOnInit\",\n      value: function ngOnInit() {\n        var _this3 = this;\n\n        this._autofillMonitor.monitor(this._elementRef).subscribe(function (event) {\n          return _this3.cdkAutofill.emit(event);\n        });\n      }\n      /**\n       * @return {?}\n       */\n\n    }, {\n      key: \"ngOnDestroy\",\n      value: function ngOnDestroy() {\n        this._autofillMonitor.stopMonitoring(this._elementRef);\n      }\n    }]);\n\n    return CdkAutofill;\n  }();\n\n  CdkAutofill.ɵfac = function CdkAutofill_Factory(t) {\n    return new (t || CdkAutofill)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(AutofillMonitor));\n  };\n\n  CdkAutofill.ɵdir =\n  /*@__PURE__*/\n\n  /*@__PURE__*/\n  ɵngcc0.ɵɵdefineDirective({\n    type: CdkAutofill,\n    selectors: [[\"\", \"cdkAutofill\", \"\"]],\n    outputs: {\n      cdkAutofill: \"cdkAutofill\"\n    }\n  });\n  return CdkAutofill;\n}();\n\nvar CdkTextareaAutosize = /*@__PURE__*/function () {\n  var CdkTextareaAutosize = /*#__PURE__*/function () {\n    /**\n     * @param {?} _elementRef\n     * @param {?} _platform\n     * @param {?} _ngZone\n     */\n    function CdkTextareaAutosize(_elementRef, _platform, _ngZone) {\n      _classCallCheck(this, CdkTextareaAutosize);\n\n      this._elementRef = _elementRef;\n      this._platform = _platform;\n      this._ngZone = _ngZone;\n      this._destroyed = new Subject();\n      this._enabled = true;\n      /**\n       * Value of minRows as of last resize. If the minRows has decreased, the\n       * height of the textarea needs to be recomputed to reflect the new minimum. The maxHeight\n       * does not have the same problem because it does not affect the textarea's scrollHeight.\n       */\n\n      this._previousMinRows = -1;\n      this._textareaElement =\n      /** @type {?} */\n      this._elementRef.nativeElement;\n    }\n    /**\n     * Minimum amount of rows in the textarea.\n     * @return {?}\n     */\n\n\n    _createClass(CdkTextareaAutosize, [{\n      key: \"minRows\",\n      get: function get() {\n        return this._minRows;\n      }\n      /**\n       * @param {?} value\n       * @return {?}\n       */\n      ,\n      set: function set(value) {\n        this._minRows = value;\n\n        this._setMinHeight();\n      }\n      /**\n       * Maximum amount of rows in the textarea.\n       * @return {?}\n       */\n\n    }, {\n      key: \"maxRows\",\n      get: function get() {\n        return this._maxRows;\n      }\n      /**\n       * @param {?} value\n       * @return {?}\n       */\n      ,\n      set: function set(value) {\n        this._maxRows = value;\n\n        this._setMaxHeight();\n      }\n      /**\n       * Whether autosizing is enabled or not\n       * @return {?}\n       */\n\n    }, {\n      key: \"enabled\",\n      get: function get() {\n        return this._enabled;\n      }\n      /**\n       * @param {?} value\n       * @return {?}\n       */\n      ,\n      set: function set(value) {\n        value = coerceBooleanProperty(value); // Only act if the actual value changed. This specifically helps to not run\n        // resizeToFitContent too early (i.e. before ngAfterViewInit)\n\n        if (this._enabled !== value) {\n          (this._enabled = value) ? this.resizeToFitContent(true) : this.reset();\n        }\n      }\n      /**\n       * Sets the minimum height of the textarea as determined by minRows.\n       * @return {?}\n       */\n\n    }, {\n      key: \"_setMinHeight\",\n      value: function _setMinHeight() {\n        /** @type {?} */\n        var minHeight = this.minRows && this._cachedLineHeight ? \"\".concat(this.minRows * this._cachedLineHeight, \"px\") : null;\n\n        if (minHeight) {\n          this._textareaElement.style.minHeight = minHeight;\n        }\n      }\n      /**\n       * Sets the maximum height of the textarea as determined by maxRows.\n       * @return {?}\n       */\n\n    }, {\n      key: \"_setMaxHeight\",\n      value: function _setMaxHeight() {\n        /** @type {?} */\n        var maxHeight = this.maxRows && this._cachedLineHeight ? \"\".concat(this.maxRows * this._cachedLineHeight, \"px\") : null;\n\n        if (maxHeight) {\n          this._textareaElement.style.maxHeight = maxHeight;\n        }\n      }\n      /**\n       * @return {?}\n       */\n\n    }, {\n      key: \"ngAfterViewInit\",\n      value: function ngAfterViewInit() {\n        var _this4 = this;\n\n        if (this._platform.isBrowser) {\n          // Remember the height which we started with in case autosizing is disabled\n          this._initialHeight = this._textareaElement.style.height;\n          this.resizeToFitContent();\n\n          this._ngZone.runOutsideAngular(function () {\n            fromEvent(window, 'resize').pipe(auditTime(16), takeUntil(_this4._destroyed)).subscribe(function () {\n              return _this4.resizeToFitContent(true);\n            });\n          });\n        }\n      }\n      /**\n       * @return {?}\n       */\n\n    }, {\n      key: \"ngOnDestroy\",\n      value: function ngOnDestroy() {\n        this._destroyed.next();\n\n        this._destroyed.complete();\n      }\n      /**\n       * Cache the height of a single-row textarea if it has not already been cached.\n       *\n       * We need to know how large a single \"row\" of a textarea is in order to apply minRows and\n       * maxRows. For the initial version, we will assume that the height of a single line in the\n       * textarea does not ever change.\n       * @return {?}\n       */\n\n    }, {\n      key: \"_cacheTextareaLineHeight\",\n      value: function _cacheTextareaLineHeight() {\n        if (this._cachedLineHeight) {\n          return;\n        }\n        /** @type {?} */\n\n\n        var textareaClone =\n        /** @type {?} */\n        this._textareaElement.cloneNode(false);\n\n        textareaClone.rows = 1; // Use `position: absolute` so that this doesn't cause a browser layout and use\n        // `visibility: hidden` so that nothing is rendered. Clear any other styles that\n        // would affect the height.\n\n        textareaClone.style.position = 'absolute';\n        textareaClone.style.visibility = 'hidden';\n        textareaClone.style.border = 'none';\n        textareaClone.style.padding = '0';\n        textareaClone.style.height = '';\n        textareaClone.style.minHeight = '';\n        textareaClone.style.maxHeight = ''; // In Firefox it happens that textarea elements are always bigger than the specified amount\n        // of rows. This is because Firefox tries to add extra space for the horizontal scrollbar.\n        // As a workaround that removes the extra space for the scrollbar, we can just set overflow\n        // to hidden. This ensures that there is no invalid calculation of the line height.\n        // See Firefox bug report: https://bugzilla.mozilla.org/show_bug.cgi?id=33654\n\n        textareaClone.style.overflow = 'hidden';\n        /** @type {?} */\n\n        this._textareaElement.parentNode.appendChild(textareaClone);\n\n        this._cachedLineHeight = textareaClone.clientHeight;\n        /** @type {?} */\n\n        this._textareaElement.parentNode.removeChild(textareaClone); // Min and max heights have to be re-calculated if the cached line height changes\n\n\n        this._setMinHeight();\n\n        this._setMaxHeight();\n      }\n      /**\n       * @return {?}\n       */\n\n    }, {\n      key: \"ngDoCheck\",\n      value: function ngDoCheck() {\n        if (this._platform.isBrowser) {\n          this.resizeToFitContent();\n        }\n      }\n      /**\n       * Resize the textarea to fit its content.\n       * @param {?=} force Whether to force a height recalculation. By default the height will be\n       *    recalculated only if the value changed since the last call.\n       * @return {?}\n       */\n\n    }, {\n      key: \"resizeToFitContent\",\n      value: function resizeToFitContent() {\n        var _this5 = this;\n\n        var force = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n\n        // If autosizing is disabled, just skip everything else\n        if (!this._enabled) {\n          return;\n        }\n\n        this._cacheTextareaLineHeight(); // If we haven't determined the line-height yet, we know we're still hidden and there's no point\n        // in checking the height of the textarea.\n\n\n        if (!this._cachedLineHeight) {\n          return;\n        }\n        /** @type {?} */\n\n\n        var textarea =\n        /** @type {?} */\n        this._elementRef.nativeElement;\n        /** @type {?} */\n\n        var value = textarea.value; // Only resize if the value or minRows have changed since these calculations can be expensive.\n\n        if (!force && this._minRows === this._previousMinRows && value === this._previousValue) {\n          return;\n        }\n        /** @type {?} */\n\n\n        var placeholderText = textarea.placeholder; // Reset the textarea height to auto in order to shrink back to its default size.\n        // Also temporarily force overflow:hidden, so scroll bars do not interfere with calculations.\n        // Long placeholders that are wider than the textarea width may lead to a bigger scrollHeight\n        // value. To ensure that the scrollHeight is not bigger than the content, the placeholders\n        // need to be removed temporarily.\n\n        textarea.classList.add('cdk-textarea-autosize-measuring');\n        textarea.placeholder = '';\n        /** @type {?} */\n\n        var height = textarea.scrollHeight - 4; // Use the scrollHeight to know how large the textarea *would* be if fit its entire value.\n\n        textarea.style.height = \"\".concat(height, \"px\");\n        textarea.classList.remove('cdk-textarea-autosize-measuring');\n        textarea.placeholder = placeholderText; // On Firefox resizing the textarea will prevent it from scrolling to the caret position.\n        // We need to re-set the selection in order for it to scroll to the proper position.\n\n        if (typeof requestAnimationFrame !== 'undefined') {\n          this._ngZone.runOutsideAngular(function () {\n            return requestAnimationFrame(function () {\n              var selectionStart = textarea.selectionStart,\n                  selectionEnd = textarea.selectionEnd; // IE will throw an \"Unspecified error\" if we try to set the selection range after the\n              // element has been removed from the DOM. Assert that the directive hasn't been destroyed\n              // between the time we requested the animation frame and when it was executed.\n              // Also note that we have to assert that the textarea is focused before we set the\n              // selection range. Setting the selection range on a non-focused textarea will cause\n              // it to receive focus on IE and Edge.\n\n              if (!_this5._destroyed.isStopped && document.activeElement === textarea) {\n                textarea.setSelectionRange(selectionStart, selectionEnd);\n              }\n            });\n          });\n        }\n\n        this._previousValue = value;\n        this._previousMinRows = this._minRows;\n      }\n      /**\n       * Resets the textarea to it's original size\n       * @return {?}\n       */\n\n    }, {\n      key: \"reset\",\n      value: function reset() {\n        // Do not try to change the textarea, if the initialHeight has not been determined yet\n        // This might potentially remove styles when reset() is called before ngAfterViewInit\n        if (this._initialHeight === undefined) {\n          return;\n        }\n\n        this._textareaElement.style.height = this._initialHeight;\n      }\n      /**\n       * @return {?}\n       */\n\n    }, {\n      key: \"_noopInputHandler\",\n      value: function _noopInputHandler() {// no-op handler that ensures we're running change detection on input events.\n      }\n    }]);\n\n    return CdkTextareaAutosize;\n  }();\n\n  CdkTextareaAutosize.ɵfac = function CdkTextareaAutosize_Factory(t) {\n    return new (t || CdkTextareaAutosize)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.Platform), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone));\n  };\n\n  CdkTextareaAutosize.ɵdir =\n  /*@__PURE__*/\n\n  /*@__PURE__*/\n  ɵngcc0.ɵɵdefineDirective({\n    type: CdkTextareaAutosize,\n    selectors: [[\"textarea\", \"cdkTextareaAutosize\", \"\"]],\n    hostAttrs: [\"rows\", \"1\", 1, \"cdk-textarea-autosize\"],\n    hostBindings: function CdkTextareaAutosize_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"input\", function CdkTextareaAutosize_input_HostBindingHandler() {\n          return ctx._noopInputHandler();\n        });\n      }\n    },\n    inputs: {\n      minRows: [\"cdkAutosizeMinRows\", \"minRows\"],\n      maxRows: [\"cdkAutosizeMaxRows\", \"maxRows\"],\n      enabled: [\"cdkTextareaAutosize\", \"enabled\"]\n    },\n    exportAs: [\"cdkTextareaAutosize\"]\n  });\n  return CdkTextareaAutosize;\n}();\n\nvar TextFieldModule = /*@__PURE__*/function () {\n  var TextFieldModule = function TextFieldModule() {\n    _classCallCheck(this, TextFieldModule);\n  };\n\n  TextFieldModule.ɵfac = function TextFieldModule_Factory(t) {\n    return new (t || TextFieldModule)();\n  };\n\n  TextFieldModule.ɵmod =\n  /*@__PURE__*/\n\n  /*@__PURE__*/\n  ɵngcc0.ɵɵdefineNgModule({\n    type: TextFieldModule\n  });\n  TextFieldModule.ɵinj =\n  /*@__PURE__*/\n\n  /*@__PURE__*/\n  ɵngcc0.ɵɵdefineInjector({\n    imports: [[PlatformModule]]\n  });\n  return TextFieldModule;\n}();\n/*@__PURE__*/\n\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(TextFieldModule, {\n    declarations: function declarations() {\n      return [CdkAutofill, CdkTextareaAutosize];\n    },\n    imports: function imports() {\n      return [PlatformModule];\n    },\n    exports: function exports() {\n      return [CdkAutofill, CdkTextareaAutosize];\n    }\n  });\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n\nexport { AutofillMonitor, CdkAutofill, CdkTextareaAutosize, TextFieldModule }; //# sourceMappingURL=text-field.js.map","map":null,"metadata":{},"sourceType":"module"}