{"ast":null,"code":"import _createClass from \"/Users/adepertat/Dropbox/ECOLES/Openclassroom/P6_de_Pertat_Antoine/dwj-projet6/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/Users/adepertat/Dropbox/ECOLES/Openclassroom/P6_de_Pertat_Antoine/dwj-projet6/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/adepertat/Dropbox/ECOLES/Openclassroom/P6_de_Pertat_Antoine/dwj-projet6/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _classCallCheck from \"/Users/adepertat/Dropbox/ECOLES/Openclassroom/P6_de_Pertat_Antoine/dwj-projet6/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { Directive, EventEmitter, Input, isDevMode, Output, Injectable, SkipSelf, Optional, NgModule, ChangeDetectionStrategy, ChangeDetectorRef, Component, ViewEncapsulation, Inject, defineInjectable } from '@angular/core';\nimport { mixinDisabled, mixinInitialized, AnimationCurves, AnimationDurations } from '@angular/material/core';\nimport { Subject, merge } from 'rxjs';\nimport { animate, state, style, transition, trigger, keyframes, query, animateChild } from '@angular/animations';\nimport { CommonModule } from '@angular/common';\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * \\@docs-private\n * @param {?} id\n * @return {?}\n */\n\nimport * as ɵngcc0 from '@angular/core';\nvar _c0 = [\"mat-sort-header\", \"\"];\nvar _c1 = [\"*\"];\n\nfunction getSortDuplicateSortableIdError(id) {\n  return Error(\"Cannot have two MatSortables with the same id (\".concat(id, \").\"));\n}\n/**\n * \\@docs-private\n * @return {?}\n */\n\n\nfunction getSortHeaderNotContainedWithinSortError() {\n  return Error(\"MatSortHeader must be placed within a parent element with the MatSort directive.\");\n}\n/**\n * \\@docs-private\n * @return {?}\n */\n\n\nfunction getSortHeaderMissingIdError() {\n  return Error(\"MatSortHeader must be provided with a unique id.\");\n}\n/**\n * \\@docs-private\n * @param {?} direction\n * @return {?}\n */\n\n\nfunction getSortInvalidDirectionError(direction) {\n  return Error(\"\".concat(direction, \" is not a valid sort direction ('asc' or 'desc').\"));\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * \\@docs-private\n */\n\n\nvar MatSortBase = function MatSortBase() {\n  _classCallCheck(this, MatSortBase);\n};\n/** @type {?} */\n\n\nvar _MatSortMixinBase = mixinInitialized(mixinDisabled(MatSortBase));\n/**\n * Container for MatSortables to manage the sort state and provide default sort parameters.\n */\n\n\nvar MatSort = /*#__PURE__*/function (_MatSortMixinBase2) {\n  _inherits(MatSort, _MatSortMixinBase2);\n\n  var _super = _createSuper(MatSort);\n\n  function MatSort() {\n    var _this;\n\n    _classCallCheck(this, MatSort);\n\n    _this = _super.apply(this, arguments);\n    /**\n     * Collection of all registered sortables that this directive manages.\n     */\n\n    _this.sortables = new Map();\n    /**\n     * Used to notify any child components listening to state changes.\n     */\n\n    _this._stateChanges = new Subject();\n    /**\n     * The direction to set when an MatSortable is initially sorted.\n     * May be overriden by the MatSortable's sort start.\n     */\n\n    _this.start = 'asc';\n    _this._direction = '';\n    /**\n     * Event emitted when the user changes either the active sort or sort direction.\n     */\n\n    _this.sortChange = new EventEmitter();\n    return _this;\n  }\n  /**\n   * The sort direction of the currently active MatSortable.\n   * @return {?}\n   */\n\n\n  _createClass(MatSort, [{\n    key: \"direction\",\n    get: function get() {\n      return this._direction;\n    }\n    /**\n     * @param {?} direction\n     * @return {?}\n     */\n    ,\n    set: function set(direction) {\n      if (isDevMode() && direction && direction !== 'asc' && direction !== 'desc') {\n        throw getSortInvalidDirectionError(direction);\n      }\n\n      this._direction = direction;\n    }\n    /**\n     * Whether to disable the user from clearing the sort by finishing the sort direction cycle.\n     * May be overriden by the MatSortable's disable clear input.\n     * @return {?}\n     */\n\n  }, {\n    key: \"disableClear\",\n    get: function get() {\n      return this._disableClear;\n    }\n    /**\n     * @param {?} v\n     * @return {?}\n     */\n    ,\n    set: function set(v) {\n      this._disableClear = coerceBooleanProperty(v);\n    }\n    /**\n     * Register function to be used by the contained MatSortables. Adds the MatSortable to the\n     * collection of MatSortables.\n     * @param {?} sortable\n     * @return {?}\n     */\n\n  }, {\n    key: \"register\",\n    value: function register(sortable) {\n      if (!sortable.id) {\n        throw getSortHeaderMissingIdError();\n      }\n\n      if (this.sortables.has(sortable.id)) {\n        throw getSortDuplicateSortableIdError(sortable.id);\n      }\n\n      this.sortables.set(sortable.id, sortable);\n    }\n    /**\n     * Unregister function to be used by the contained MatSortables. Removes the MatSortable from the\n     * collection of contained MatSortables.\n     * @param {?} sortable\n     * @return {?}\n     */\n\n  }, {\n    key: \"deregister\",\n    value: function deregister(sortable) {\n      this.sortables.delete(sortable.id);\n    }\n    /**\n     * Sets the active sort id and determines the new sort direction.\n     * @param {?} sortable\n     * @return {?}\n     */\n\n  }, {\n    key: \"sort\",\n    value: function sort(sortable) {\n      if (this.active != sortable.id) {\n        this.active = sortable.id;\n        this.direction = sortable.start ? sortable.start : this.start;\n      } else {\n        this.direction = this.getNextSortDirection(sortable);\n      }\n\n      this.sortChange.emit({\n        active: this.active,\n        direction: this.direction\n      });\n    }\n    /**\n     * Returns the next sort direction of the active sortable, checking for potential overrides.\n     * @param {?} sortable\n     * @return {?}\n     */\n\n  }, {\n    key: \"getNextSortDirection\",\n    value: function getNextSortDirection(sortable) {\n      if (!sortable) {\n        return '';\n      }\n      /** @type {?} */\n\n\n      var disableClear = sortable.disableClear != null ? sortable.disableClear : this.disableClear;\n      /** @type {?} */\n\n      var sortDirectionCycle = getSortDirectionCycle(sortable.start || this.start, disableClear);\n      /** @type {?} */\n\n      var nextDirectionIndex = sortDirectionCycle.indexOf(this.direction) + 1;\n\n      if (nextDirectionIndex >= sortDirectionCycle.length) {\n        nextDirectionIndex = 0;\n      }\n\n      return sortDirectionCycle[nextDirectionIndex];\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngOnInit\",\n    value: function ngOnInit() {\n      this._markInitialized();\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngOnChanges\",\n    value: function ngOnChanges() {\n      this._stateChanges.next();\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      this._stateChanges.complete();\n    }\n  }]);\n\n  return MatSort;\n}(_MatSortMixinBase);\n\nMatSort.ɵfac = /*@__PURE__*/function () {\n  var ɵMatSort_BaseFactory;\n  return function MatSort_Factory(t) {\n    return (ɵMatSort_BaseFactory || (ɵMatSort_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(MatSort)))(t || MatSort);\n  };\n}();\n\nMatSort.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n  type: MatSort,\n  selectors: [[\"\", \"matSort\", \"\"]],\n  inputs: {\n    disabled: [\"matSortDisabled\", \"disabled\"],\n    start: [\"matSortStart\", \"start\"],\n    direction: [\"matSortDirection\", \"direction\"],\n    disableClear: [\"matSortDisableClear\", \"disableClear\"],\n    active: [\"matSortActive\", \"active\"]\n  },\n  outputs: {\n    sortChange: \"matSortChange\"\n  },\n  exportAs: [\"matSort\"],\n  features: [ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature]\n});\nMatSort.propDecorators = {\n  active: [{\n    type: Input,\n    args: ['matSortActive']\n  }],\n  start: [{\n    type: Input,\n    args: ['matSortStart']\n  }],\n  direction: [{\n    type: Input,\n    args: ['matSortDirection']\n  }],\n  disableClear: [{\n    type: Input,\n    args: ['matSortDisableClear']\n  }],\n  sortChange: [{\n    type: Output,\n    args: ['matSortChange']\n  }]\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatSort, [{\n    type: Directive,\n    args: [{\n      selector: '[matSort]',\n      exportAs: 'matSort',\n      inputs: ['disabled: matSortDisabled']\n    }]\n  }], null, {\n    start: [{\n      type: Input,\n      args: ['matSortStart']\n    }],\n    sortChange: [{\n      type: Output,\n      args: ['matSortChange']\n    }],\n    direction: [{\n      type: Input,\n      args: ['matSortDirection']\n    }],\n    disableClear: [{\n      type: Input,\n      args: ['matSortDisableClear']\n    }],\n    active: [{\n      type: Input,\n      args: ['matSortActive']\n    }]\n  });\n})();\n/**\n * Returns the sort direction cycle to use given the provided parameters of order and clear.\n * @param {?} start\n * @param {?} disableClear\n * @return {?}\n */\n\n\nfunction getSortDirectionCycle(start, disableClear) {\n  /** @type {?} */\n  var sortOrder = ['asc', 'desc'];\n\n  if (start == 'desc') {\n    sortOrder.reverse();\n  }\n\n  if (!disableClear) {\n    sortOrder.push('');\n  }\n\n  return sortOrder;\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/** @type {?} */\n\n\nvar SORT_ANIMATION_TRANSITION = AnimationDurations.ENTERING + ' ' + AnimationCurves.STANDARD_CURVE;\n/** *\n * Animations used by MatSort.\n * \\@docs-private\n  @type {?} */\n\nvar matSortAnimations = {\n  /** Animation that moves the sort indicator. */\n  indicator: trigger('indicator', [state('active-asc, asc', style({\n    transform: 'translateY(0px)'\n  })), // 10px is the height of the sort indicator, minus the width of the pointers\n  state('active-desc, desc', style({\n    transform: 'translateY(10px)'\n  })), transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))]),\n\n  /** Animation that rotates the left pointer of the indicator based on the sorting direction. */\n  leftPointer: trigger('leftPointer', [state('active-asc, asc', style({\n    transform: 'rotate(-45deg)'\n  })), state('active-desc, desc', style({\n    transform: 'rotate(45deg)'\n  })), transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))]),\n\n  /** Animation that rotates the right pointer of the indicator based on the sorting direction. */\n  rightPointer: trigger('rightPointer', [state('active-asc, asc', style({\n    transform: 'rotate(45deg)'\n  })), state('active-desc, desc', style({\n    transform: 'rotate(-45deg)'\n  })), transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))]),\n\n  /** Animation that controls the arrow opacity. */\n  arrowOpacity: trigger('arrowOpacity', [state('desc-to-active, asc-to-active, active', style({\n    opacity: 1\n  })), state('desc-to-hint, asc-to-hint, hint', style({\n    opacity: .54\n  })), state('hint-to-desc, active-to-desc, desc, hint-to-asc, active-to-asc, asc, void', style({\n    opacity: 0\n  })), // Transition between all states except for immediate transitions\n  transition('* => asc, * => desc, * => active, * => hint, * => void', animate('0ms')), transition('* <=> *', animate(SORT_ANIMATION_TRANSITION))]),\n\n  /**\n     * Animation for the translation of the arrow as a whole. States are separated into two\n     * groups: ones with animations and others that are immediate. Immediate states are asc, desc,\n     * peek, and active. The other states define a specific animation (source-to-destination)\n     * and are determined as a function of their prev user-perceived state and what the next state\n     * should be.\n     */\n  arrowPosition: trigger('arrowPosition', [// Hidden Above => Hint Center\n  transition('* => desc-to-hint, * => desc-to-active', animate(SORT_ANIMATION_TRANSITION, keyframes([style({\n    transform: 'translateY(-25%)'\n  }), style({\n    transform: 'translateY(0)'\n  })]))), // Hint Center => Hidden Below\n  transition('* => hint-to-desc, * => active-to-desc', animate(SORT_ANIMATION_TRANSITION, keyframes([style({\n    transform: 'translateY(0)'\n  }), style({\n    transform: 'translateY(25%)'\n  })]))), // Hidden Below => Hint Center\n  transition('* => asc-to-hint, * => asc-to-active', animate(SORT_ANIMATION_TRANSITION, keyframes([style({\n    transform: 'translateY(25%)'\n  }), style({\n    transform: 'translateY(0)'\n  })]))), // Hint Center => Hidden Above\n  transition('* => hint-to-asc, * => active-to-asc', animate(SORT_ANIMATION_TRANSITION, keyframes([style({\n    transform: 'translateY(0)'\n  }), style({\n    transform: 'translateY(-25%)'\n  })]))), state('desc-to-hint, asc-to-hint, hint, desc-to-active, asc-to-active, active', style({\n    transform: 'translateY(0)'\n  })), state('hint-to-desc, active-to-desc, desc', style({\n    transform: 'translateY(-25%)'\n  })), state('hint-to-asc, active-to-asc, asc', style({\n    transform: 'translateY(25%)'\n  }))]),\n\n  /** Necessary trigger that calls animate on children animations. */\n  allowChildren: trigger('allowChildren', [transition('* <=> *', [query('@*', animateChild(), {\n    optional: true\n  })])])\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * To modify the labels and text displayed, create a new instance of MatSortHeaderIntl and\n * include it in a custom provider.\n */\n\nvar MatSortHeaderIntl = function MatSortHeaderIntl() {\n  _classCallCheck(this, MatSortHeaderIntl);\n\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  this.changes = new Subject();\n  /**\n   * ARIA label for the sorting button.\n   */\n\n  this.sortButtonLabel = function (id) {\n    return \"Change sorting for \".concat(id);\n  };\n};\n\nMatSortHeaderIntl.ɵfac = function MatSortHeaderIntl_Factory(t) {\n  return new (t || MatSortHeaderIntl)();\n};\n\nMatSortHeaderIntl.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n  token: MatSortHeaderIntl,\n  factory: MatSortHeaderIntl.ɵfac,\n  providedIn: 'root'\n});\n/** @nocollapse */\n\nMatSortHeaderIntl.ngInjectableDef = defineInjectable({\n  factory: function MatSortHeaderIntl_Factory() {\n    return new MatSortHeaderIntl();\n  },\n  token: MatSortHeaderIntl,\n  providedIn: \"root\"\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatSortHeaderIntl, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [];\n  }, null);\n})();\n/**\n * \\@docs-private\n * @param {?} parentIntl\n * @return {?}\n */\n\n\nfunction MAT_SORT_HEADER_INTL_PROVIDER_FACTORY(parentIntl) {\n  return parentIntl || new MatSortHeaderIntl();\n}\n/** *\n * \\@docs-private\n  @type {?} */\n\n\nvar MAT_SORT_HEADER_INTL_PROVIDER = {\n  // If there is already an MatSortHeaderIntl available, use that. Otherwise, provide a new one.\n  provide: MatSortHeaderIntl,\n  deps: [[new Optional(), new SkipSelf(), MatSortHeaderIntl]],\n  useFactory: MAT_SORT_HEADER_INTL_PROVIDER_FACTORY\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * \\@docs-private\n */\n\nvar MatSortHeaderBase = function MatSortHeaderBase() {\n  _classCallCheck(this, MatSortHeaderBase);\n};\n/** @type {?} */\n\n\nvar _MatSortHeaderMixinBase = mixinDisabled(MatSortHeaderBase);\n/**\n * Applies sorting behavior (click to change sort) and styles to an element, including an\n * arrow to display the current sort direction.\n *\n * Must be provided with an id and contained within a parent MatSort directive.\n *\n * If used on header cells in a CdkTable, it will automatically default its id from its containing\n * column definition.\n */\n\n\nvar MatSortHeader = /*#__PURE__*/function (_MatSortHeaderMixinBa) {\n  _inherits(MatSortHeader, _MatSortHeaderMixinBa);\n\n  var _super2 = _createSuper(MatSortHeader);\n\n  /**\n   * @param {?} _intl\n   * @param {?} changeDetectorRef\n   * @param {?} _sort\n   * @param {?} _columnDef\n   */\n  function MatSortHeader(_intl, changeDetectorRef, _sort, _columnDef) {\n    var _this2;\n\n    _classCallCheck(this, MatSortHeader);\n\n    // Note that we use a string token for the `_columnDef`, because the value is provided both by\n    // `material/table` and `cdk/table` and we can't have the CDK depending on Material,\n    // and we want to avoid having the sort header depending on the CDK table because\n    // of this single reference.\n    _this2 = _super2.call(this);\n    _this2._intl = _intl;\n    _this2._sort = _sort;\n    _this2._columnDef = _columnDef;\n    /**\n     * Flag set to true when the indicator should be displayed while the sort is not active. Used to\n     * provide an affordance that the header is sortable by showing on focus and hover.\n     */\n\n    _this2._showIndicatorHint = false;\n    /**\n     * The direction the arrow should be facing according to the current state.\n     */\n\n    _this2._arrowDirection = '';\n    /**\n     * Whether the view state animation should show the transition between the `from` and `to` states.\n     */\n\n    _this2._disableViewStateAnimation = false;\n    /**\n     * Sets the position of the arrow that displays when sorted.\n     */\n\n    _this2.arrowPosition = 'after';\n\n    if (!_sort) {\n      throw getSortHeaderNotContainedWithinSortError();\n    }\n\n    _this2._rerenderSubscription = merge(_sort.sortChange, _sort._stateChanges, _intl.changes).subscribe(function () {\n      if (_this2._isSorted()) {\n        _this2._updateArrowDirection();\n      } // If this header was recently active and now no longer sorted, animate away the arrow.\n\n\n      if (!_this2._isSorted() && _this2._viewState && _this2._viewState.toState === 'active') {\n        _this2._disableViewStateAnimation = false;\n\n        _this2._setAnimationTransitionState({\n          fromState: 'active',\n          toState: _this2._arrowDirection\n        });\n      }\n\n      changeDetectorRef.markForCheck();\n    });\n    return _this2;\n  }\n  /**\n   * Overrides the disable clear value of the containing MatSort for this MatSortable.\n   * @return {?}\n   */\n\n\n  _createClass(MatSortHeader, [{\n    key: \"disableClear\",\n    get: function get() {\n      return this._disableClear;\n    }\n    /**\n     * @param {?} v\n     * @return {?}\n     */\n    ,\n    set: function set(v) {\n      this._disableClear = coerceBooleanProperty(v);\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngOnInit\",\n    value: function ngOnInit() {\n      if (!this.id && this._columnDef) {\n        this.id = this._columnDef.name;\n      } // Initialize the direction of the arrow and set the view state to be immediately that state.\n\n\n      this._updateArrowDirection();\n\n      this._setAnimationTransitionState({\n        toState: this._isSorted() ? 'active' : this._arrowDirection\n      });\n\n      this._sort.register(this);\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      this._sort.deregister(this);\n\n      this._rerenderSubscription.unsubscribe();\n    }\n    /**\n     * Sets the \"hint\" state such that the arrow will be semi-transparently displayed as a hint to the\n     * user showing what the active sort will become. If set to false, the arrow will fade away.\n     * @param {?} visible\n     * @return {?}\n     */\n\n  }, {\n    key: \"_setIndicatorHintVisible\",\n    value: function _setIndicatorHintVisible(visible) {\n      // No-op if the sort header is disabled - should not make the hint visible.\n      if (this._isDisabled() && visible) {\n        return;\n      }\n\n      this._showIndicatorHint = visible;\n\n      if (!this._isSorted()) {\n        this._updateArrowDirection();\n\n        if (this._showIndicatorHint) {\n          this._setAnimationTransitionState({\n            fromState: this._arrowDirection,\n            toState: 'hint'\n          });\n        } else {\n          this._setAnimationTransitionState({\n            fromState: 'hint',\n            toState: this._arrowDirection\n          });\n        }\n      }\n    }\n    /**\n     * Sets the animation transition view state for the arrow's position and opacity. If the\n     * `disableViewStateAnimation` flag is set to true, the `fromState` will be ignored so that\n     * no animation appears.\n     * @param {?} viewState\n     * @return {?}\n     */\n\n  }, {\n    key: \"_setAnimationTransitionState\",\n    value: function _setAnimationTransitionState(viewState) {\n      this._viewState = viewState; // If the animation for arrow position state (opacity/translation) should be disabled,\n      // remove the fromState so that it jumps right to the toState.\n\n      if (this._disableViewStateAnimation) {\n        this._viewState = {\n          toState: viewState.toState\n        };\n      }\n    }\n    /**\n     * Triggers the sort on this sort header and removes the indicator hint.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_handleClick\",\n    value: function _handleClick() {\n      if (this._isDisabled()) {\n        return;\n      }\n\n      this._sort.sort(this); // Do not show the animation if the header was already shown in the right position.\n\n\n      if (this._viewState.toState === 'hint' || this._viewState.toState === 'active') {\n        this._disableViewStateAnimation = true;\n      }\n      /** @type {?} */\n\n\n      var viewState = this._isSorted() ? {\n        fromState: this._arrowDirection,\n        toState: 'active'\n      } : {\n        fromState: 'active',\n        toState: this._arrowDirection\n      };\n\n      this._setAnimationTransitionState(viewState);\n\n      this._showIndicatorHint = false;\n    }\n    /**\n     * Whether this MatSortHeader is currently sorted in either ascending or descending order.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_isSorted\",\n    value: function _isSorted() {\n      return this._sort.active == this.id && (this._sort.direction === 'asc' || this._sort.direction === 'desc');\n    }\n    /**\n     * Returns the animation state for the arrow direction (indicator and pointers).\n     * @return {?}\n     */\n\n  }, {\n    key: \"_getArrowDirectionState\",\n    value: function _getArrowDirectionState() {\n      return \"\".concat(this._isSorted() ? 'active-' : '').concat(this._arrowDirection);\n    }\n    /**\n     * Returns the arrow position state (opacity, translation).\n     * @return {?}\n     */\n\n  }, {\n    key: \"_getArrowViewState\",\n    value: function _getArrowViewState() {\n      /** @type {?} */\n      var fromState = this._viewState.fromState;\n      return (fromState ? \"\".concat(fromState, \"-to-\") : '') + this._viewState.toState;\n    }\n    /**\n     * Updates the direction the arrow should be pointing. If it is not sorted, the arrow should be\n     * facing the start direction. Otherwise if it is sorted, the arrow should point in the currently\n     * active sorted direction. The reason this is updated through a function is because the direction\n     * should only be changed at specific times - when deactivated but the hint is displayed and when\n     * the sort is active and the direction changes. Otherwise the arrow's direction should linger\n     * in cases such as the sort becoming deactivated but we want to animate the arrow away while\n     * preserving its direction, even though the next sort direction is actually different and should\n     * only be changed once the arrow displays again (hint or activation).\n     * @return {?}\n     */\n\n  }, {\n    key: \"_updateArrowDirection\",\n    value: function _updateArrowDirection() {\n      this._arrowDirection = this._isSorted() ? this._sort.direction : this.start || this._sort.start;\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"_isDisabled\",\n    value: function _isDisabled() {\n      return this._sort.disabled || this.disabled;\n    }\n    /**\n     * Gets the aria-sort attribute that should be applied to this sort header. If this header\n     * is not sorted, returns null so that the attribute is removed from the host element. Aria spec\n     * says that the aria-sort property should only be present on one header at a time, so removing\n     * ensures this is true.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_getAriaSortAttribute\",\n    value: function _getAriaSortAttribute() {\n      if (!this._isSorted()) {\n        return null;\n      }\n\n      return this._sort.direction == 'asc' ? 'ascending' : 'descending';\n    }\n  }]);\n\n  return MatSortHeader;\n}(_MatSortHeaderMixinBase);\n\nMatSortHeader.ɵfac = function MatSortHeader_Factory(t) {\n  return new (t || MatSortHeader)(ɵngcc0.ɵɵdirectiveInject(MatSortHeaderIntl), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(MatSort, 8), ɵngcc0.ɵɵdirectiveInject('MAT_SORT_HEADER_COLUMN_DEF', 8));\n};\n\nMatSortHeader.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n  type: MatSortHeader,\n  selectors: [[\"\", \"mat-sort-header\", \"\"]],\n  hostVars: 3,\n  hostBindings: function MatSortHeader_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵlistener(\"click\", function MatSortHeader_click_HostBindingHandler() {\n        return ctx._handleClick();\n      })(\"mouseenter\", function MatSortHeader_mouseenter_HostBindingHandler() {\n        return ctx._setIndicatorHintVisible(true);\n      })(\"longpress\", function MatSortHeader_longpress_HostBindingHandler() {\n        return ctx._setIndicatorHintVisible(true);\n      })(\"mouseleave\", function MatSortHeader_mouseleave_HostBindingHandler() {\n        return ctx._setIndicatorHintVisible(false);\n      });\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵattribute(\"aria-sort\", ctx._getAriaSortAttribute());\n      ɵngcc0.ɵɵclassProp(\"mat-sort-header-disabled\", ctx._isDisabled());\n    }\n  },\n  inputs: {\n    disabled: \"disabled\",\n    arrowPosition: \"arrowPosition\",\n    disableClear: \"disableClear\",\n    id: [\"mat-sort-header\", \"id\"],\n    start: \"start\"\n  },\n  exportAs: [\"matSortHeader\"],\n  features: [ɵngcc0.ɵɵInheritDefinitionFeature],\n  attrs: _c0,\n  ngContentSelectors: _c1,\n  decls: 9,\n  vars: 12,\n  consts: [[1, \"mat-sort-header-container\"], [\"type\", \"button\", 1, \"mat-sort-header-button\", 3, \"focus\", \"blur\"], [1, \"mat-sort-header-arrow\"], [1, \"mat-sort-header-stem\"], [1, \"mat-sort-header-indicator\"], [1, \"mat-sort-header-pointer-left\"], [1, \"mat-sort-header-pointer-right\"], [1, \"mat-sort-header-pointer-middle\"]],\n  template: function MatSortHeader_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵprojectionDef();\n      ɵngcc0.ɵɵelementStart(0, \"div\", 0);\n      ɵngcc0.ɵɵelementStart(1, \"button\", 1);\n      ɵngcc0.ɵɵlistener(\"focus\", function MatSortHeader_Template_button_focus_1_listener() {\n        return ctx._setIndicatorHintVisible(true);\n      })(\"blur\", function MatSortHeader_Template_button_blur_1_listener() {\n        return ctx._setIndicatorHintVisible(false);\n      });\n      ɵngcc0.ɵɵprojection(2);\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵelementStart(3, \"div\", 2);\n      ɵngcc0.ɵɵlistener(\"@arrowPosition.start\", function MatSortHeader_Template_div_animation_arrowPosition_start_3_listener() {\n        return ctx._disableViewStateAnimation = true;\n      })(\"@arrowPosition.done\", function MatSortHeader_Template_div_animation_arrowPosition_done_3_listener() {\n        return ctx._disableViewStateAnimation = false;\n      });\n      ɵngcc0.ɵɵelement(4, \"div\", 3);\n      ɵngcc0.ɵɵelementStart(5, \"div\", 4);\n      ɵngcc0.ɵɵelement(6, \"div\", 5);\n      ɵngcc0.ɵɵelement(7, \"div\", 6);\n      ɵngcc0.ɵɵelement(8, \"div\", 7);\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵclassProp(\"mat-sort-header-sorted\", ctx._isSorted())(\"mat-sort-header-position-before\", ctx.arrowPosition == \"before\");\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵattribute(\"disabled\", ctx._isDisabled() || null)(\"aria-label\", ctx._intl.sortButtonLabel(ctx.id));\n      ɵngcc0.ɵɵadvance(2);\n      ɵngcc0.ɵɵproperty(\"@arrowOpacity\", ctx._getArrowViewState())(\"@arrowPosition\", ctx._getArrowViewState())(\"@allowChildren\", ctx._getArrowDirectionState());\n      ɵngcc0.ɵɵadvance(2);\n      ɵngcc0.ɵɵproperty(\"@indicator\", ctx._getArrowDirectionState());\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵproperty(\"@leftPointer\", ctx._getArrowDirectionState());\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵproperty(\"@rightPointer\", ctx._getArrowDirectionState());\n    }\n  },\n  styles: [\".mat-sort-header-container{display:flex;cursor:pointer;align-items:center}.mat-sort-header-disabled .mat-sort-header-container{cursor:default}.mat-sort-header-position-before{flex-direction:row-reverse}.mat-sort-header-button{border:none;background:0 0;display:flex;align-items:center;padding:0;cursor:inherit;outline:0;font:inherit;color:currentColor}.mat-sort-header-arrow{height:12px;width:12px;min-width:12px;position:relative;display:flex;opacity:0}.mat-sort-header-arrow,[dir=rtl] .mat-sort-header-position-before .mat-sort-header-arrow{margin:0 0 0 6px}.mat-sort-header-position-before .mat-sort-header-arrow,[dir=rtl] .mat-sort-header-arrow{margin:0 6px 0 0}.mat-sort-header-stem{background:currentColor;height:10px;width:2px;margin:auto;display:flex;align-items:center}@media screen and (-ms-high-contrast:active){.mat-sort-header-stem{width:0;border-left:solid 2px}}.mat-sort-header-indicator{width:100%;height:2px;display:flex;align-items:center;position:absolute;top:0;left:0}.mat-sort-header-pointer-middle{margin:auto;height:2px;width:2px;background:currentColor;transform:rotate(45deg)}@media screen and (-ms-high-contrast:active){.mat-sort-header-pointer-middle{width:0;height:0;border-top:solid 2px;border-left:solid 2px}}.mat-sort-header-pointer-left,.mat-sort-header-pointer-right{background:currentColor;width:6px;height:2px;position:absolute;top:0}@media screen and (-ms-high-contrast:active){.mat-sort-header-pointer-left,.mat-sort-header-pointer-right{width:0;height:0;border-left:solid 6px;border-top:solid 2px}}.mat-sort-header-pointer-left{transform-origin:right;left:0}.mat-sort-header-pointer-right{transform-origin:left;right:0}\"],\n  encapsulation: 2,\n  data: {\n    animation: [matSortAnimations.indicator, matSortAnimations.leftPointer, matSortAnimations.rightPointer, matSortAnimations.arrowOpacity, matSortAnimations.arrowPosition, matSortAnimations.allowChildren]\n  },\n  changeDetection: 0\n});\n/** @nocollapse */\n\nMatSortHeader.ctorParameters = function () {\n  return [{\n    type: MatSortHeaderIntl\n  }, {\n    type: ChangeDetectorRef\n  }, {\n    type: MatSort,\n    decorators: [{\n      type: Optional\n    }]\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Inject,\n      args: ['MAT_SORT_HEADER_COLUMN_DEF']\n    }, {\n      type: Optional\n    }]\n  }];\n};\n\nMatSortHeader.propDecorators = {\n  id: [{\n    type: Input,\n    args: ['mat-sort-header']\n  }],\n  arrowPosition: [{\n    type: Input\n  }],\n  start: [{\n    type: Input\n  }],\n  disableClear: [{\n    type: Input\n  }]\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatSortHeader, [{\n    type: Component,\n    args: [{\n      selector: '[mat-sort-header]',\n      exportAs: 'matSortHeader',\n      template: \"<div class=\\\"mat-sort-header-container\\\" [class.mat-sort-header-sorted]=\\\"_isSorted()\\\" [class.mat-sort-header-position-before]=\\\"arrowPosition == 'before'\\\"><button class=\\\"mat-sort-header-button\\\" type=\\\"button\\\" [attr.disabled]=\\\"_isDisabled() || null\\\" [attr.aria-label]=\\\"_intl.sortButtonLabel(id)\\\" (focus)=\\\"_setIndicatorHintVisible(true)\\\" (blur)=\\\"_setIndicatorHintVisible(false)\\\"><ng-content></ng-content></button><div class=\\\"mat-sort-header-arrow\\\" [@arrowOpacity]=\\\"_getArrowViewState()\\\" [@arrowPosition]=\\\"_getArrowViewState()\\\" [@allowChildren]=\\\"_getArrowDirectionState()\\\" (@arrowPosition.start)=\\\"_disableViewStateAnimation = true\\\" (@arrowPosition.done)=\\\"_disableViewStateAnimation = false\\\"><div class=\\\"mat-sort-header-stem\\\"></div><div class=\\\"mat-sort-header-indicator\\\" [@indicator]=\\\"_getArrowDirectionState()\\\"><div class=\\\"mat-sort-header-pointer-left\\\" [@leftPointer]=\\\"_getArrowDirectionState()\\\"></div><div class=\\\"mat-sort-header-pointer-right\\\" [@rightPointer]=\\\"_getArrowDirectionState()\\\"></div><div class=\\\"mat-sort-header-pointer-middle\\\"></div></div></div></div>\",\n      styles: [\".mat-sort-header-container{display:flex;cursor:pointer;align-items:center}.mat-sort-header-disabled .mat-sort-header-container{cursor:default}.mat-sort-header-position-before{flex-direction:row-reverse}.mat-sort-header-button{border:none;background:0 0;display:flex;align-items:center;padding:0;cursor:inherit;outline:0;font:inherit;color:currentColor}.mat-sort-header-arrow{height:12px;width:12px;min-width:12px;position:relative;display:flex;opacity:0}.mat-sort-header-arrow,[dir=rtl] .mat-sort-header-position-before .mat-sort-header-arrow{margin:0 0 0 6px}.mat-sort-header-position-before .mat-sort-header-arrow,[dir=rtl] .mat-sort-header-arrow{margin:0 6px 0 0}.mat-sort-header-stem{background:currentColor;height:10px;width:2px;margin:auto;display:flex;align-items:center}@media screen and (-ms-high-contrast:active){.mat-sort-header-stem{width:0;border-left:solid 2px}}.mat-sort-header-indicator{width:100%;height:2px;display:flex;align-items:center;position:absolute;top:0;left:0}.mat-sort-header-pointer-middle{margin:auto;height:2px;width:2px;background:currentColor;transform:rotate(45deg)}@media screen and (-ms-high-contrast:active){.mat-sort-header-pointer-middle{width:0;height:0;border-top:solid 2px;border-left:solid 2px}}.mat-sort-header-pointer-left,.mat-sort-header-pointer-right{background:currentColor;width:6px;height:2px;position:absolute;top:0}@media screen and (-ms-high-contrast:active){.mat-sort-header-pointer-left,.mat-sort-header-pointer-right{width:0;height:0;border-left:solid 6px;border-top:solid 2px}}.mat-sort-header-pointer-left{transform-origin:right;left:0}.mat-sort-header-pointer-right{transform-origin:left;right:0}\"],\n      host: {\n        '(click)': '_handleClick()',\n        '(mouseenter)': '_setIndicatorHintVisible(true)',\n        '(longpress)': '_setIndicatorHintVisible(true)',\n        '(mouseleave)': '_setIndicatorHintVisible(false)',\n        '[attr.aria-sort]': '_getAriaSortAttribute()',\n        '[class.mat-sort-header-disabled]': '_isDisabled()'\n      },\n      encapsulation: ViewEncapsulation.None,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      inputs: ['disabled'],\n      animations: [matSortAnimations.indicator, matSortAnimations.leftPointer, matSortAnimations.rightPointer, matSortAnimations.arrowOpacity, matSortAnimations.arrowPosition, matSortAnimations.allowChildren]\n    }]\n  }], function () {\n    return [{\n      type: MatSortHeaderIntl\n    }, {\n      type: ɵngcc0.ChangeDetectorRef\n    }, {\n      type: MatSort,\n      decorators: [{\n        type: Optional\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: ['MAT_SORT_HEADER_COLUMN_DEF']\n      }, {\n        type: Optional\n      }]\n    }];\n  }, {\n    arrowPosition: [{\n      type: Input\n    }],\n    disableClear: [{\n      type: Input\n    }],\n    id: [{\n      type: Input,\n      args: ['mat-sort-header']\n    }],\n    start: [{\n      type: Input\n    }]\n  });\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n\nvar MatSortModule = function MatSortModule() {\n  _classCallCheck(this, MatSortModule);\n};\n\nMatSortModule.ɵfac = function MatSortModule_Factory(t) {\n  return new (t || MatSortModule)();\n};\n\nMatSortModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n  type: MatSortModule\n});\nMatSortModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n  providers: [MAT_SORT_HEADER_INTL_PROVIDER],\n  imports: [[CommonModule]]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatSortModule, [{\n    type: NgModule,\n    args: [{\n      imports: [CommonModule],\n      exports: [MatSort, MatSortHeader],\n      declarations: [MatSort, MatSortHeader],\n      providers: [MAT_SORT_HEADER_INTL_PROVIDER]\n    }]\n  }], null, null);\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatSortModule, {\n    declarations: function declarations() {\n      return [MatSort, MatSortHeader];\n    },\n    imports: function imports() {\n      return [CommonModule];\n    },\n    exports: function exports() {\n      return [MatSort, MatSortHeader];\n    }\n  });\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n\nexport { MatSortModule, MatSortHeaderBase, _MatSortHeaderMixinBase, MatSortHeader, MAT_SORT_HEADER_INTL_PROVIDER_FACTORY, MatSortHeaderIntl, MAT_SORT_HEADER_INTL_PROVIDER, MatSortBase, _MatSortMixinBase, MatSort, matSortAnimations }; //# sourceMappingURL=sort.js.map","map":{"version":3,"sources":["/Users/adepertat/Dropbox/ECOLES/Openclassroom/P6_de_Pertat_Antoine/dwj-projet6/node_modules/@angular/material/__ivy_ngcc__/esm2015/sort.js"],"names":["coerceBooleanProperty","Directive","EventEmitter","Input","isDevMode","Output","Injectable","SkipSelf","Optional","NgModule","ChangeDetectionStrategy","ChangeDetectorRef","Component","ViewEncapsulation","Inject","defineInjectable","mixinDisabled","mixinInitialized","AnimationCurves","AnimationDurations","Subject","merge","animate","state","style","transition","trigger","keyframes","query","animateChild","CommonModule","ɵngcc0","_c0","_c1","getSortDuplicateSortableIdError","id","Error","getSortHeaderNotContainedWithinSortError","getSortHeaderMissingIdError","getSortInvalidDirectionError","direction","MatSortBase","_MatSortMixinBase","MatSort","arguments","sortables","Map","_stateChanges","start","_direction","sortChange","_disableClear","v","sortable","has","set","delete","active","getNextSortDirection","emit","disableClear","sortDirectionCycle","getSortDirectionCycle","nextDirectionIndex","indexOf","length","_markInitialized","next","complete","ɵfac","ɵMatSort_BaseFactory","MatSort_Factory","t","ɵɵgetInheritedFactory","ɵdir","ɵɵdefineDirective","type","selectors","inputs","disabled","outputs","exportAs","features","ɵɵInheritDefinitionFeature","ɵɵNgOnChangesFeature","propDecorators","args","ngDevMode","ɵsetClassMetadata","selector","sortOrder","reverse","push","SORT_ANIMATION_TRANSITION","ENTERING","STANDARD_CURVE","matSortAnimations","indicator","transform","leftPointer","rightPointer","arrowOpacity","opacity","arrowPosition","allowChildren","optional","MatSortHeaderIntl","changes","sortButtonLabel","MatSortHeaderIntl_Factory","ɵprov","ɵɵdefineInjectable","token","factory","providedIn","ngInjectableDef","MAT_SORT_HEADER_INTL_PROVIDER_FACTORY","parentIntl","MAT_SORT_HEADER_INTL_PROVIDER","provide","deps","useFactory","MatSortHeaderBase","_MatSortHeaderMixinBase","MatSortHeader","_intl","changeDetectorRef","_sort","_columnDef","_showIndicatorHint","_arrowDirection","_disableViewStateAnimation","_rerenderSubscription","subscribe","_isSorted","_updateArrowDirection","_viewState","toState","_setAnimationTransitionState","fromState","markForCheck","name","register","deregister","unsubscribe","visible","_isDisabled","viewState","sort","MatSortHeader_Factory","ɵɵdirectiveInject","ɵcmp","ɵɵdefineComponent","hostVars","hostBindings","MatSortHeader_HostBindings","rf","ctx","ɵɵlistener","MatSortHeader_click_HostBindingHandler","_handleClick","MatSortHeader_mouseenter_HostBindingHandler","_setIndicatorHintVisible","MatSortHeader_longpress_HostBindingHandler","MatSortHeader_mouseleave_HostBindingHandler","ɵɵattribute","_getAriaSortAttribute","ɵɵclassProp","attrs","ngContentSelectors","decls","vars","consts","template","MatSortHeader_Template","ɵɵprojectionDef","ɵɵelementStart","MatSortHeader_Template_button_focus_1_listener","MatSortHeader_Template_button_blur_1_listener","ɵɵprojection","ɵɵelementEnd","MatSortHeader_Template_div_animation_arrowPosition_start_3_listener","MatSortHeader_Template_div_animation_arrowPosition_done_3_listener","ɵɵelement","ɵɵadvance","ɵɵproperty","_getArrowViewState","_getArrowDirectionState","styles","encapsulation","data","animation","changeDetection","ctorParameters","decorators","undefined","host","None","OnPush","animations","MatSortModule","MatSortModule_Factory","ɵmod","ɵɵdefineNgModule","ɵinj","ɵɵdefineInjector","providers","imports","exports","declarations","ngJitMode","ɵɵsetNgModuleScope"],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { Directive, EventEmitter, Input, isDevMode, Output, Injectable, SkipSelf, Optional, NgModule, ChangeDetectionStrategy, ChangeDetectorRef, Component, ViewEncapsulation, Inject, defineInjectable } from '@angular/core';\nimport { mixinDisabled, mixinInitialized, AnimationCurves, AnimationDurations } from '@angular/material/core';\nimport { Subject, merge } from 'rxjs';\nimport { animate, state, style, transition, trigger, keyframes, query, animateChild } from '@angular/animations';\nimport { CommonModule } from '@angular/common';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * \\@docs-private\n * @param {?} id\n * @return {?}\n */\nimport * as ɵngcc0 from '@angular/core';\n\nconst _c0 = [\"mat-sort-header\", \"\"];\nconst _c1 = [\"*\"];\nfunction getSortDuplicateSortableIdError(id) {\n    return Error(`Cannot have two MatSortables with the same id (${id}).`);\n}\n/**\n * \\@docs-private\n * @return {?}\n */\nfunction getSortHeaderNotContainedWithinSortError() {\n    return Error(`MatSortHeader must be placed within a parent element with the MatSort directive.`);\n}\n/**\n * \\@docs-private\n * @return {?}\n */\nfunction getSortHeaderMissingIdError() {\n    return Error(`MatSortHeader must be provided with a unique id.`);\n}\n/**\n * \\@docs-private\n * @param {?} direction\n * @return {?}\n */\nfunction getSortInvalidDirectionError(direction) {\n    return Error(`${direction} is not a valid sort direction ('asc' or 'desc').`);\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * \\@docs-private\n */\nclass MatSortBase {\n}\n/** @type {?} */\nconst _MatSortMixinBase = mixinInitialized(mixinDisabled(MatSortBase));\n/**\n * Container for MatSortables to manage the sort state and provide default sort parameters.\n */\nclass MatSort extends _MatSortMixinBase {\n    constructor() {\n        super(...arguments);\n        /**\n         * Collection of all registered sortables that this directive manages.\n         */\n        this.sortables = new Map();\n        /**\n         * Used to notify any child components listening to state changes.\n         */\n        this._stateChanges = new Subject();\n        /**\n         * The direction to set when an MatSortable is initially sorted.\n         * May be overriden by the MatSortable's sort start.\n         */\n        this.start = 'asc';\n        this._direction = '';\n        /**\n         * Event emitted when the user changes either the active sort or sort direction.\n         */\n        this.sortChange = new EventEmitter();\n    }\n    /**\n     * The sort direction of the currently active MatSortable.\n     * @return {?}\n     */\n    get direction() { return this._direction; }\n    /**\n     * @param {?} direction\n     * @return {?}\n     */\n    set direction(direction) {\n        if (isDevMode() && direction && direction !== 'asc' && direction !== 'desc') {\n            throw getSortInvalidDirectionError(direction);\n        }\n        this._direction = direction;\n    }\n    /**\n     * Whether to disable the user from clearing the sort by finishing the sort direction cycle.\n     * May be overriden by the MatSortable's disable clear input.\n     * @return {?}\n     */\n    get disableClear() { return this._disableClear; }\n    /**\n     * @param {?} v\n     * @return {?}\n     */\n    set disableClear(v) { this._disableClear = coerceBooleanProperty(v); }\n    /**\n     * Register function to be used by the contained MatSortables. Adds the MatSortable to the\n     * collection of MatSortables.\n     * @param {?} sortable\n     * @return {?}\n     */\n    register(sortable) {\n        if (!sortable.id) {\n            throw getSortHeaderMissingIdError();\n        }\n        if (this.sortables.has(sortable.id)) {\n            throw getSortDuplicateSortableIdError(sortable.id);\n        }\n        this.sortables.set(sortable.id, sortable);\n    }\n    /**\n     * Unregister function to be used by the contained MatSortables. Removes the MatSortable from the\n     * collection of contained MatSortables.\n     * @param {?} sortable\n     * @return {?}\n     */\n    deregister(sortable) {\n        this.sortables.delete(sortable.id);\n    }\n    /**\n     * Sets the active sort id and determines the new sort direction.\n     * @param {?} sortable\n     * @return {?}\n     */\n    sort(sortable) {\n        if (this.active != sortable.id) {\n            this.active = sortable.id;\n            this.direction = sortable.start ? sortable.start : this.start;\n        }\n        else {\n            this.direction = this.getNextSortDirection(sortable);\n        }\n        this.sortChange.emit({ active: this.active, direction: this.direction });\n    }\n    /**\n     * Returns the next sort direction of the active sortable, checking for potential overrides.\n     * @param {?} sortable\n     * @return {?}\n     */\n    getNextSortDirection(sortable) {\n        if (!sortable) {\n            return '';\n        }\n        /** @type {?} */\n        const disableClear = sortable.disableClear != null ? sortable.disableClear : this.disableClear;\n        /** @type {?} */\n        let sortDirectionCycle = getSortDirectionCycle(sortable.start || this.start, disableClear);\n        /** @type {?} */\n        let nextDirectionIndex = sortDirectionCycle.indexOf(this.direction) + 1;\n        if (nextDirectionIndex >= sortDirectionCycle.length) {\n            nextDirectionIndex = 0;\n        }\n        return sortDirectionCycle[nextDirectionIndex];\n    }\n    /**\n     * @return {?}\n     */\n    ngOnInit() {\n        this._markInitialized();\n    }\n    /**\n     * @return {?}\n     */\n    ngOnChanges() {\n        this._stateChanges.next();\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this._stateChanges.complete();\n    }\n}\nMatSort.ɵfac = /*@__PURE__*/ function () { let ɵMatSort_BaseFactory; return function MatSort_Factory(t) { return (ɵMatSort_BaseFactory || (ɵMatSort_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(MatSort)))(t || MatSort); }; }();\nMatSort.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: MatSort, selectors: [[\"\", \"matSort\", \"\"]], inputs: { disabled: [\"matSortDisabled\", \"disabled\"], start: [\"matSortStart\", \"start\"], direction: [\"matSortDirection\", \"direction\"], disableClear: [\"matSortDisableClear\", \"disableClear\"], active: [\"matSortActive\", \"active\"] }, outputs: { sortChange: \"matSortChange\" }, exportAs: [\"matSort\"], features: [ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature] });\nMatSort.propDecorators = {\n    active: [{ type: Input, args: ['matSortActive',] }],\n    start: [{ type: Input, args: ['matSortStart',] }],\n    direction: [{ type: Input, args: ['matSortDirection',] }],\n    disableClear: [{ type: Input, args: ['matSortDisableClear',] }],\n    sortChange: [{ type: Output, args: ['matSortChange',] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatSort, [{\n        type: Directive,\n        args: [{\n                selector: '[matSort]',\n                exportAs: 'matSort',\n                inputs: ['disabled: matSortDisabled']\n            }]\n    }], null, { start: [{\n            type: Input,\n            args: ['matSortStart']\n        }], sortChange: [{\n            type: Output,\n            args: ['matSortChange']\n        }], direction: [{\n            type: Input,\n            args: ['matSortDirection']\n        }], disableClear: [{\n            type: Input,\n            args: ['matSortDisableClear']\n        }], active: [{\n            type: Input,\n            args: ['matSortActive']\n        }] }); })();\n/**\n * Returns the sort direction cycle to use given the provided parameters of order and clear.\n * @param {?} start\n * @param {?} disableClear\n * @return {?}\n */\nfunction getSortDirectionCycle(start, disableClear) {\n    /** @type {?} */\n    let sortOrder = ['asc', 'desc'];\n    if (start == 'desc') {\n        sortOrder.reverse();\n    }\n    if (!disableClear) {\n        sortOrder.push('');\n    }\n    return sortOrder;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst SORT_ANIMATION_TRANSITION = AnimationDurations.ENTERING + ' ' +\n    AnimationCurves.STANDARD_CURVE;\n/** *\n * Animations used by MatSort.\n * \\@docs-private\n  @type {?} */\nconst matSortAnimations = {\n    /** Animation that moves the sort indicator. */\n    indicator: trigger('indicator', [\n        state('active-asc, asc', style({ transform: 'translateY(0px)' })),\n        // 10px is the height of the sort indicator, minus the width of the pointers\n        state('active-desc, desc', style({ transform: 'translateY(10px)' })),\n        transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n    ]),\n    /** Animation that rotates the left pointer of the indicator based on the sorting direction. */\n    leftPointer: trigger('leftPointer', [\n        state('active-asc, asc', style({ transform: 'rotate(-45deg)' })),\n        state('active-desc, desc', style({ transform: 'rotate(45deg)' })),\n        transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n    ]),\n    /** Animation that rotates the right pointer of the indicator based on the sorting direction. */\n    rightPointer: trigger('rightPointer', [\n        state('active-asc, asc', style({ transform: 'rotate(45deg)' })),\n        state('active-desc, desc', style({ transform: 'rotate(-45deg)' })),\n        transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n    ]),\n    /** Animation that controls the arrow opacity. */\n    arrowOpacity: trigger('arrowOpacity', [\n        state('desc-to-active, asc-to-active, active', style({ opacity: 1 })),\n        state('desc-to-hint, asc-to-hint, hint', style({ opacity: .54 })),\n        state('hint-to-desc, active-to-desc, desc, hint-to-asc, active-to-asc, asc, void', style({ opacity: 0 })),\n        // Transition between all states except for immediate transitions\n        transition('* => asc, * => desc, * => active, * => hint, * => void', animate('0ms')),\n        transition('* <=> *', animate(SORT_ANIMATION_TRANSITION)),\n    ]),\n    /**\n       * Animation for the translation of the arrow as a whole. States are separated into two\n       * groups: ones with animations and others that are immediate. Immediate states are asc, desc,\n       * peek, and active. The other states define a specific animation (source-to-destination)\n       * and are determined as a function of their prev user-perceived state and what the next state\n       * should be.\n       */\n    arrowPosition: trigger('arrowPosition', [\n        // Hidden Above => Hint Center\n        transition('* => desc-to-hint, * => desc-to-active', animate(SORT_ANIMATION_TRANSITION, keyframes([\n            style({ transform: 'translateY(-25%)' }),\n            style({ transform: 'translateY(0)' })\n        ]))),\n        // Hint Center => Hidden Below\n        transition('* => hint-to-desc, * => active-to-desc', animate(SORT_ANIMATION_TRANSITION, keyframes([\n            style({ transform: 'translateY(0)' }),\n            style({ transform: 'translateY(25%)' })\n        ]))),\n        // Hidden Below => Hint Center\n        transition('* => asc-to-hint, * => asc-to-active', animate(SORT_ANIMATION_TRANSITION, keyframes([\n            style({ transform: 'translateY(25%)' }),\n            style({ transform: 'translateY(0)' })\n        ]))),\n        // Hint Center => Hidden Above\n        transition('* => hint-to-asc, * => active-to-asc', animate(SORT_ANIMATION_TRANSITION, keyframes([\n            style({ transform: 'translateY(0)' }),\n            style({ transform: 'translateY(-25%)' })\n        ]))),\n        state('desc-to-hint, asc-to-hint, hint, desc-to-active, asc-to-active, active', style({ transform: 'translateY(0)' })),\n        state('hint-to-desc, active-to-desc, desc', style({ transform: 'translateY(-25%)' })),\n        state('hint-to-asc, active-to-asc, asc', style({ transform: 'translateY(25%)' })),\n    ]),\n    /** Necessary trigger that calls animate on children animations. */\n    allowChildren: trigger('allowChildren', [\n        transition('* <=> *', [\n            query('@*', animateChild(), { optional: true })\n        ])\n    ]),\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * To modify the labels and text displayed, create a new instance of MatSortHeaderIntl and\n * include it in a custom provider.\n */\nclass MatSortHeaderIntl {\n    constructor() {\n        /**\n         * Stream that emits whenever the labels here are changed. Use this to notify\n         * components if the labels have changed after initialization.\n         */\n        this.changes = new Subject();\n        /**\n         * ARIA label for the sorting button.\n         */\n        this.sortButtonLabel = (id) => {\n            return `Change sorting for ${id}`;\n        };\n    }\n}\nMatSortHeaderIntl.ɵfac = function MatSortHeaderIntl_Factory(t) { return new (t || MatSortHeaderIntl)(); };\nMatSortHeaderIntl.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: MatSortHeaderIntl, factory: MatSortHeaderIntl.ɵfac, providedIn: 'root' });\n/** @nocollapse */ MatSortHeaderIntl.ngInjectableDef = defineInjectable({ factory: function MatSortHeaderIntl_Factory() { return new MatSortHeaderIntl(); }, token: MatSortHeaderIntl, providedIn: \"root\" });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatSortHeaderIntl, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return []; }, null); })();\n/**\n * \\@docs-private\n * @param {?} parentIntl\n * @return {?}\n */\nfunction MAT_SORT_HEADER_INTL_PROVIDER_FACTORY(parentIntl) {\n    return parentIntl || new MatSortHeaderIntl();\n}\n/** *\n * \\@docs-private\n  @type {?} */\nconst MAT_SORT_HEADER_INTL_PROVIDER = {\n    // If there is already an MatSortHeaderIntl available, use that. Otherwise, provide a new one.\n    provide: MatSortHeaderIntl,\n    deps: [[new Optional(), new SkipSelf(), MatSortHeaderIntl]],\n    useFactory: MAT_SORT_HEADER_INTL_PROVIDER_FACTORY\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * \\@docs-private\n */\nclass MatSortHeaderBase {\n}\n/** @type {?} */\nconst _MatSortHeaderMixinBase = mixinDisabled(MatSortHeaderBase);\n/**\n * Applies sorting behavior (click to change sort) and styles to an element, including an\n * arrow to display the current sort direction.\n *\n * Must be provided with an id and contained within a parent MatSort directive.\n *\n * If used on header cells in a CdkTable, it will automatically default its id from its containing\n * column definition.\n */\nclass MatSortHeader extends _MatSortHeaderMixinBase {\n    /**\n     * @param {?} _intl\n     * @param {?} changeDetectorRef\n     * @param {?} _sort\n     * @param {?} _columnDef\n     */\n    constructor(_intl, changeDetectorRef, _sort, _columnDef) {\n        // Note that we use a string token for the `_columnDef`, because the value is provided both by\n        // `material/table` and `cdk/table` and we can't have the CDK depending on Material,\n        // and we want to avoid having the sort header depending on the CDK table because\n        // of this single reference.\n        super();\n        this._intl = _intl;\n        this._sort = _sort;\n        this._columnDef = _columnDef;\n        /**\n         * Flag set to true when the indicator should be displayed while the sort is not active. Used to\n         * provide an affordance that the header is sortable by showing on focus and hover.\n         */\n        this._showIndicatorHint = false;\n        /**\n         * The direction the arrow should be facing according to the current state.\n         */\n        this._arrowDirection = '';\n        /**\n         * Whether the view state animation should show the transition between the `from` and `to` states.\n         */\n        this._disableViewStateAnimation = false;\n        /**\n         * Sets the position of the arrow that displays when sorted.\n         */\n        this.arrowPosition = 'after';\n        if (!_sort) {\n            throw getSortHeaderNotContainedWithinSortError();\n        }\n        this._rerenderSubscription = merge(_sort.sortChange, _sort._stateChanges, _intl.changes)\n            .subscribe(() => {\n            if (this._isSorted()) {\n                this._updateArrowDirection();\n            }\n            // If this header was recently active and now no longer sorted, animate away the arrow.\n            if (!this._isSorted() && this._viewState && this._viewState.toState === 'active') {\n                this._disableViewStateAnimation = false;\n                this._setAnimationTransitionState({ fromState: 'active', toState: this._arrowDirection });\n            }\n            changeDetectorRef.markForCheck();\n        });\n    }\n    /**\n     * Overrides the disable clear value of the containing MatSort for this MatSortable.\n     * @return {?}\n     */\n    get disableClear() { return this._disableClear; }\n    /**\n     * @param {?} v\n     * @return {?}\n     */\n    set disableClear(v) { this._disableClear = coerceBooleanProperty(v); }\n    /**\n     * @return {?}\n     */\n    ngOnInit() {\n        if (!this.id && this._columnDef) {\n            this.id = this._columnDef.name;\n        }\n        // Initialize the direction of the arrow and set the view state to be immediately that state.\n        this._updateArrowDirection();\n        this._setAnimationTransitionState({ toState: this._isSorted() ? 'active' : this._arrowDirection });\n        this._sort.register(this);\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this._sort.deregister(this);\n        this._rerenderSubscription.unsubscribe();\n    }\n    /**\n     * Sets the \"hint\" state such that the arrow will be semi-transparently displayed as a hint to the\n     * user showing what the active sort will become. If set to false, the arrow will fade away.\n     * @param {?} visible\n     * @return {?}\n     */\n    _setIndicatorHintVisible(visible) {\n        // No-op if the sort header is disabled - should not make the hint visible.\n        if (this._isDisabled() && visible) {\n            return;\n        }\n        this._showIndicatorHint = visible;\n        if (!this._isSorted()) {\n            this._updateArrowDirection();\n            if (this._showIndicatorHint) {\n                this._setAnimationTransitionState({ fromState: this._arrowDirection, toState: 'hint' });\n            }\n            else {\n                this._setAnimationTransitionState({ fromState: 'hint', toState: this._arrowDirection });\n            }\n        }\n    }\n    /**\n     * Sets the animation transition view state for the arrow's position and opacity. If the\n     * `disableViewStateAnimation` flag is set to true, the `fromState` will be ignored so that\n     * no animation appears.\n     * @param {?} viewState\n     * @return {?}\n     */\n    _setAnimationTransitionState(viewState) {\n        this._viewState = viewState;\n        // If the animation for arrow position state (opacity/translation) should be disabled,\n        // remove the fromState so that it jumps right to the toState.\n        if (this._disableViewStateAnimation) {\n            this._viewState = { toState: viewState.toState };\n        }\n    }\n    /**\n     * Triggers the sort on this sort header and removes the indicator hint.\n     * @return {?}\n     */\n    _handleClick() {\n        if (this._isDisabled()) {\n            return;\n        }\n        this._sort.sort(this);\n        // Do not show the animation if the header was already shown in the right position.\n        if (this._viewState.toState === 'hint' || this._viewState.toState === 'active') {\n            this._disableViewStateAnimation = true;\n        }\n        /** @type {?} */\n        const viewState = this._isSorted() ?\n            { fromState: this._arrowDirection, toState: 'active' } :\n            { fromState: 'active', toState: this._arrowDirection };\n        this._setAnimationTransitionState(viewState);\n        this._showIndicatorHint = false;\n    }\n    /**\n     * Whether this MatSortHeader is currently sorted in either ascending or descending order.\n     * @return {?}\n     */\n    _isSorted() {\n        return this._sort.active == this.id &&\n            (this._sort.direction === 'asc' || this._sort.direction === 'desc');\n    }\n    /**\n     * Returns the animation state for the arrow direction (indicator and pointers).\n     * @return {?}\n     */\n    _getArrowDirectionState() {\n        return `${this._isSorted() ? 'active-' : ''}${this._arrowDirection}`;\n    }\n    /**\n     * Returns the arrow position state (opacity, translation).\n     * @return {?}\n     */\n    _getArrowViewState() {\n        /** @type {?} */\n        const fromState = this._viewState.fromState;\n        return (fromState ? `${fromState}-to-` : '') + this._viewState.toState;\n    }\n    /**\n     * Updates the direction the arrow should be pointing. If it is not sorted, the arrow should be\n     * facing the start direction. Otherwise if it is sorted, the arrow should point in the currently\n     * active sorted direction. The reason this is updated through a function is because the direction\n     * should only be changed at specific times - when deactivated but the hint is displayed and when\n     * the sort is active and the direction changes. Otherwise the arrow's direction should linger\n     * in cases such as the sort becoming deactivated but we want to animate the arrow away while\n     * preserving its direction, even though the next sort direction is actually different and should\n     * only be changed once the arrow displays again (hint or activation).\n     * @return {?}\n     */\n    _updateArrowDirection() {\n        this._arrowDirection = this._isSorted() ?\n            this._sort.direction :\n            (this.start || this._sort.start);\n    }\n    /**\n     * @return {?}\n     */\n    _isDisabled() {\n        return this._sort.disabled || this.disabled;\n    }\n    /**\n     * Gets the aria-sort attribute that should be applied to this sort header. If this header\n     * is not sorted, returns null so that the attribute is removed from the host element. Aria spec\n     * says that the aria-sort property should only be present on one header at a time, so removing\n     * ensures this is true.\n     * @return {?}\n     */\n    _getAriaSortAttribute() {\n        if (!this._isSorted()) {\n            return null;\n        }\n        return this._sort.direction == 'asc' ? 'ascending' : 'descending';\n    }\n}\nMatSortHeader.ɵfac = function MatSortHeader_Factory(t) { return new (t || MatSortHeader)(ɵngcc0.ɵɵdirectiveInject(MatSortHeaderIntl), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(MatSort, 8), ɵngcc0.ɵɵdirectiveInject('MAT_SORT_HEADER_COLUMN_DEF', 8)); };\nMatSortHeader.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: MatSortHeader, selectors: [[\"\", \"mat-sort-header\", \"\"]], hostVars: 3, hostBindings: function MatSortHeader_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"click\", function MatSortHeader_click_HostBindingHandler() { return ctx._handleClick(); })(\"mouseenter\", function MatSortHeader_mouseenter_HostBindingHandler() { return ctx._setIndicatorHintVisible(true); })(\"longpress\", function MatSortHeader_longpress_HostBindingHandler() { return ctx._setIndicatorHintVisible(true); })(\"mouseleave\", function MatSortHeader_mouseleave_HostBindingHandler() { return ctx._setIndicatorHintVisible(false); });\n    } if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"aria-sort\", ctx._getAriaSortAttribute());\n        ɵngcc0.ɵɵclassProp(\"mat-sort-header-disabled\", ctx._isDisabled());\n    } }, inputs: { disabled: \"disabled\", arrowPosition: \"arrowPosition\", disableClear: \"disableClear\", id: [\"mat-sort-header\", \"id\"], start: \"start\" }, exportAs: [\"matSortHeader\"], features: [ɵngcc0.ɵɵInheritDefinitionFeature], attrs: _c0, ngContentSelectors: _c1, decls: 9, vars: 12, consts: [[1, \"mat-sort-header-container\"], [\"type\", \"button\", 1, \"mat-sort-header-button\", 3, \"focus\", \"blur\"], [1, \"mat-sort-header-arrow\"], [1, \"mat-sort-header-stem\"], [1, \"mat-sort-header-indicator\"], [1, \"mat-sort-header-pointer-left\"], [1, \"mat-sort-header-pointer-right\"], [1, \"mat-sort-header-pointer-middle\"]], template: function MatSortHeader_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵelementStart(0, \"div\", 0);\n        ɵngcc0.ɵɵelementStart(1, \"button\", 1);\n        ɵngcc0.ɵɵlistener(\"focus\", function MatSortHeader_Template_button_focus_1_listener() { return ctx._setIndicatorHintVisible(true); })(\"blur\", function MatSortHeader_Template_button_blur_1_listener() { return ctx._setIndicatorHintVisible(false); });\n        ɵngcc0.ɵɵprojection(2);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementStart(3, \"div\", 2);\n        ɵngcc0.ɵɵlistener(\"@arrowPosition.start\", function MatSortHeader_Template_div_animation_arrowPosition_start_3_listener() { return ctx._disableViewStateAnimation = true; })(\"@arrowPosition.done\", function MatSortHeader_Template_div_animation_arrowPosition_done_3_listener() { return ctx._disableViewStateAnimation = false; });\n        ɵngcc0.ɵɵelement(4, \"div\", 3);\n        ɵngcc0.ɵɵelementStart(5, \"div\", 4);\n        ɵngcc0.ɵɵelement(6, \"div\", 5);\n        ɵngcc0.ɵɵelement(7, \"div\", 6);\n        ɵngcc0.ɵɵelement(8, \"div\", 7);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementEnd();\n    } if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"mat-sort-header-sorted\", ctx._isSorted())(\"mat-sort-header-position-before\", ctx.arrowPosition == \"before\");\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵattribute(\"disabled\", ctx._isDisabled() || null)(\"aria-label\", ctx._intl.sortButtonLabel(ctx.id));\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵproperty(\"@arrowOpacity\", ctx._getArrowViewState())(\"@arrowPosition\", ctx._getArrowViewState())(\"@allowChildren\", ctx._getArrowDirectionState());\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵproperty(\"@indicator\", ctx._getArrowDirectionState());\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"@leftPointer\", ctx._getArrowDirectionState());\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"@rightPointer\", ctx._getArrowDirectionState());\n    } }, styles: [\".mat-sort-header-container{display:flex;cursor:pointer;align-items:center}.mat-sort-header-disabled .mat-sort-header-container{cursor:default}.mat-sort-header-position-before{flex-direction:row-reverse}.mat-sort-header-button{border:none;background:0 0;display:flex;align-items:center;padding:0;cursor:inherit;outline:0;font:inherit;color:currentColor}.mat-sort-header-arrow{height:12px;width:12px;min-width:12px;position:relative;display:flex;opacity:0}.mat-sort-header-arrow,[dir=rtl] .mat-sort-header-position-before .mat-sort-header-arrow{margin:0 0 0 6px}.mat-sort-header-position-before .mat-sort-header-arrow,[dir=rtl] .mat-sort-header-arrow{margin:0 6px 0 0}.mat-sort-header-stem{background:currentColor;height:10px;width:2px;margin:auto;display:flex;align-items:center}@media screen and (-ms-high-contrast:active){.mat-sort-header-stem{width:0;border-left:solid 2px}}.mat-sort-header-indicator{width:100%;height:2px;display:flex;align-items:center;position:absolute;top:0;left:0}.mat-sort-header-pointer-middle{margin:auto;height:2px;width:2px;background:currentColor;transform:rotate(45deg)}@media screen and (-ms-high-contrast:active){.mat-sort-header-pointer-middle{width:0;height:0;border-top:solid 2px;border-left:solid 2px}}.mat-sort-header-pointer-left,.mat-sort-header-pointer-right{background:currentColor;width:6px;height:2px;position:absolute;top:0}@media screen and (-ms-high-contrast:active){.mat-sort-header-pointer-left,.mat-sort-header-pointer-right{width:0;height:0;border-left:solid 6px;border-top:solid 2px}}.mat-sort-header-pointer-left{transform-origin:right;left:0}.mat-sort-header-pointer-right{transform-origin:left;right:0}\"], encapsulation: 2, data: { animation: [\n            matSortAnimations.indicator,\n            matSortAnimations.leftPointer,\n            matSortAnimations.rightPointer,\n            matSortAnimations.arrowOpacity,\n            matSortAnimations.arrowPosition,\n            matSortAnimations.allowChildren,\n        ] }, changeDetection: 0 });\n/** @nocollapse */\nMatSortHeader.ctorParameters = () => [\n    { type: MatSortHeaderIntl },\n    { type: ChangeDetectorRef },\n    { type: MatSort, decorators: [{ type: Optional }] },\n    { type: undefined, decorators: [{ type: Inject, args: ['MAT_SORT_HEADER_COLUMN_DEF',] }, { type: Optional }] }\n];\nMatSortHeader.propDecorators = {\n    id: [{ type: Input, args: ['mat-sort-header',] }],\n    arrowPosition: [{ type: Input }],\n    start: [{ type: Input }],\n    disableClear: [{ type: Input }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatSortHeader, [{\n        type: Component,\n        args: [{ selector: '[mat-sort-header]',\n                exportAs: 'matSortHeader',\n                template: \"<div class=\\\"mat-sort-header-container\\\" [class.mat-sort-header-sorted]=\\\"_isSorted()\\\" [class.mat-sort-header-position-before]=\\\"arrowPosition == 'before'\\\"><button class=\\\"mat-sort-header-button\\\" type=\\\"button\\\" [attr.disabled]=\\\"_isDisabled() || null\\\" [attr.aria-label]=\\\"_intl.sortButtonLabel(id)\\\" (focus)=\\\"_setIndicatorHintVisible(true)\\\" (blur)=\\\"_setIndicatorHintVisible(false)\\\"><ng-content></ng-content></button><div class=\\\"mat-sort-header-arrow\\\" [@arrowOpacity]=\\\"_getArrowViewState()\\\" [@arrowPosition]=\\\"_getArrowViewState()\\\" [@allowChildren]=\\\"_getArrowDirectionState()\\\" (@arrowPosition.start)=\\\"_disableViewStateAnimation = true\\\" (@arrowPosition.done)=\\\"_disableViewStateAnimation = false\\\"><div class=\\\"mat-sort-header-stem\\\"></div><div class=\\\"mat-sort-header-indicator\\\" [@indicator]=\\\"_getArrowDirectionState()\\\"><div class=\\\"mat-sort-header-pointer-left\\\" [@leftPointer]=\\\"_getArrowDirectionState()\\\"></div><div class=\\\"mat-sort-header-pointer-right\\\" [@rightPointer]=\\\"_getArrowDirectionState()\\\"></div><div class=\\\"mat-sort-header-pointer-middle\\\"></div></div></div></div>\",\n                styles: [\".mat-sort-header-container{display:flex;cursor:pointer;align-items:center}.mat-sort-header-disabled .mat-sort-header-container{cursor:default}.mat-sort-header-position-before{flex-direction:row-reverse}.mat-sort-header-button{border:none;background:0 0;display:flex;align-items:center;padding:0;cursor:inherit;outline:0;font:inherit;color:currentColor}.mat-sort-header-arrow{height:12px;width:12px;min-width:12px;position:relative;display:flex;opacity:0}.mat-sort-header-arrow,[dir=rtl] .mat-sort-header-position-before .mat-sort-header-arrow{margin:0 0 0 6px}.mat-sort-header-position-before .mat-sort-header-arrow,[dir=rtl] .mat-sort-header-arrow{margin:0 6px 0 0}.mat-sort-header-stem{background:currentColor;height:10px;width:2px;margin:auto;display:flex;align-items:center}@media screen and (-ms-high-contrast:active){.mat-sort-header-stem{width:0;border-left:solid 2px}}.mat-sort-header-indicator{width:100%;height:2px;display:flex;align-items:center;position:absolute;top:0;left:0}.mat-sort-header-pointer-middle{margin:auto;height:2px;width:2px;background:currentColor;transform:rotate(45deg)}@media screen and (-ms-high-contrast:active){.mat-sort-header-pointer-middle{width:0;height:0;border-top:solid 2px;border-left:solid 2px}}.mat-sort-header-pointer-left,.mat-sort-header-pointer-right{background:currentColor;width:6px;height:2px;position:absolute;top:0}@media screen and (-ms-high-contrast:active){.mat-sort-header-pointer-left,.mat-sort-header-pointer-right{width:0;height:0;border-left:solid 6px;border-top:solid 2px}}.mat-sort-header-pointer-left{transform-origin:right;left:0}.mat-sort-header-pointer-right{transform-origin:left;right:0}\"],\n                host: {\n                    '(click)': '_handleClick()',\n                    '(mouseenter)': '_setIndicatorHintVisible(true)',\n                    '(longpress)': '_setIndicatorHintVisible(true)',\n                    '(mouseleave)': '_setIndicatorHintVisible(false)',\n                    '[attr.aria-sort]': '_getAriaSortAttribute()',\n                    '[class.mat-sort-header-disabled]': '_isDisabled()'\n                },\n                encapsulation: ViewEncapsulation.None,\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                inputs: ['disabled'],\n                animations: [\n                    matSortAnimations.indicator,\n                    matSortAnimations.leftPointer,\n                    matSortAnimations.rightPointer,\n                    matSortAnimations.arrowOpacity,\n                    matSortAnimations.arrowPosition,\n                    matSortAnimations.allowChildren,\n                ] }]\n    }], function () { return [{ type: MatSortHeaderIntl }, { type: ɵngcc0.ChangeDetectorRef }, { type: MatSort, decorators: [{\n                type: Optional\n            }] }, { type: undefined, decorators: [{\n                type: Inject,\n                args: ['MAT_SORT_HEADER_COLUMN_DEF']\n            }, {\n                type: Optional\n            }] }]; }, { arrowPosition: [{\n            type: Input\n        }], disableClear: [{\n            type: Input\n        }], id: [{\n            type: Input,\n            args: ['mat-sort-header']\n        }], start: [{\n            type: Input\n        }] }); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\nclass MatSortModule {\n}\nMatSortModule.ɵfac = function MatSortModule_Factory(t) { return new (t || MatSortModule)(); };\nMatSortModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: MatSortModule });\nMatSortModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ providers: [MAT_SORT_HEADER_INTL_PROVIDER], imports: [[CommonModule]] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatSortModule, [{\n        type: NgModule,\n        args: [{\n                imports: [CommonModule],\n                exports: [MatSort, MatSortHeader],\n                declarations: [MatSort, MatSortHeader],\n                providers: [MAT_SORT_HEADER_INTL_PROVIDER]\n            }]\n    }], null, null); })();\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatSortModule, { declarations: function () { return [MatSort, MatSortHeader]; }, imports: function () { return [CommonModule]; }, exports: function () { return [MatSort, MatSortHeader]; } }); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\nexport { MatSortModule, MatSortHeaderBase, _MatSortHeaderMixinBase, MatSortHeader, MAT_SORT_HEADER_INTL_PROVIDER_FACTORY, MatSortHeaderIntl, MAT_SORT_HEADER_INTL_PROVIDER, MatSortBase, _MatSortMixinBase, MatSort, matSortAnimations };\n\n//# sourceMappingURL=sort.js.map"]},"metadata":{},"sourceType":"module"}