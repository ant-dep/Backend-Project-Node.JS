{"ast":null,"code":"import _classCallCheck from \"/Users/adepertat/Dropbox/ECOLES/Openclassroom/P6_de_Pertat_Antoine/dwj-projet6/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/adepertat/Dropbox/ECOLES/Openclassroom/P6_de_Pertat_Antoine/dwj-projet6/node_modules/@babel/runtime/helpers/esm/createClass\";\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Platform, normalizePassiveListenerOptions, PlatformModule } from '@angular/cdk/platform';\nimport { Directive, ElementRef, EventEmitter, Injectable, NgZone, Output, Input, NgModule, defineInjectable, inject } from '@angular/core';\nimport { EMPTY, Subject, fromEvent } from 'rxjs';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { auditTime, takeUntil } from 'rxjs/operators';\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/** *\n * Options to pass to the animationstart listener.\n  @type {?} */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/platform';\nvar listenerOptions = normalizePassiveListenerOptions({\n  passive: true\n});\n/**\n * An injectable service that can be used to monitor the autofill state of an input.\n * Based on the following blog post:\n * https://medium.com/\\@brunn/detecting-autofilled-fields-in-javascript-aed598d25da7\n */\n\nvar AutofillMonitor = /*#__PURE__*/function () {\n  /**\n   * @param {?} _platform\n   * @param {?} _ngZone\n   */\n  function AutofillMonitor(_platform, _ngZone) {\n    _classCallCheck(this, AutofillMonitor);\n\n    this._platform = _platform;\n    this._ngZone = _ngZone;\n    this._monitoredElements = new Map();\n  }\n  /**\n   * @param {?} elementOrRef\n   * @return {?}\n   */\n\n\n  _createClass(AutofillMonitor, [{\n    key: \"monitor\",\n    value: function monitor(elementOrRef) {\n      var _this = this;\n\n      if (!this._platform.isBrowser) {\n        return EMPTY;\n      }\n      /** @type {?} */\n\n\n      var element = elementOrRef instanceof ElementRef ? elementOrRef.nativeElement : elementOrRef;\n      /** @type {?} */\n\n      var info = this._monitoredElements.get(element);\n\n      if (info) {\n        return info.subject.asObservable();\n      }\n      /** @type {?} */\n\n\n      var result = new Subject();\n      /** @type {?} */\n\n      var cssClass = 'cdk-text-field-autofilled';\n      /** @type {?} */\n\n      var listener =\n      /** @type {?} */\n      function listener(event) {\n        // Animation events fire on initial element render, we check for the presence of the autofill\n        // CSS class to make sure this is a real change in state, not just the initial render before\n        // we fire off events.\n        if (event.animationName === 'cdk-text-field-autofill-start' && !element.classList.contains(cssClass)) {\n          element.classList.add(cssClass);\n\n          _this._ngZone.run(function () {\n            return result.next({\n              target:\n              /** @type {?} */\n              event.target,\n              isAutofilled: true\n            });\n          });\n        } else if (event.animationName === 'cdk-text-field-autofill-end' && element.classList.contains(cssClass)) {\n          element.classList.remove(cssClass);\n\n          _this._ngZone.run(function () {\n            return result.next({\n              target:\n              /** @type {?} */\n              event.target,\n              isAutofilled: false\n            });\n          });\n        }\n      };\n\n      this._ngZone.runOutsideAngular(function () {\n        element.addEventListener('animationstart', listener, listenerOptions);\n        element.classList.add('cdk-text-field-autofill-monitored');\n      });\n\n      this._monitoredElements.set(element, {\n        subject: result,\n        unlisten: function unlisten() {\n          element.removeEventListener('animationstart', listener, listenerOptions);\n        }\n      });\n\n      return result.asObservable();\n    }\n    /**\n     * @param {?} elementOrRef\n     * @return {?}\n     */\n\n  }, {\n    key: \"stopMonitoring\",\n    value: function stopMonitoring(elementOrRef) {\n      /** @type {?} */\n      var element = elementOrRef instanceof ElementRef ? elementOrRef.nativeElement : elementOrRef;\n      /** @type {?} */\n\n      var info = this._monitoredElements.get(element);\n\n      if (info) {\n        info.unlisten();\n        info.subject.complete();\n        element.classList.remove('cdk-text-field-autofill-monitored');\n        element.classList.remove('cdk-text-field-autofilled');\n\n        this._monitoredElements.delete(element);\n      }\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      var _this2 = this;\n\n      this._monitoredElements.forEach(function (_info, element) {\n        return _this2.stopMonitoring(element);\n      });\n    }\n  }]);\n\n  return AutofillMonitor;\n}();\n\nAutofillMonitor.ɵfac = function AutofillMonitor_Factory(t) {\n  return new (t || AutofillMonitor)(ɵngcc0.ɵɵinject(ɵngcc1.Platform), ɵngcc0.ɵɵinject(ɵngcc0.NgZone));\n};\n\nAutofillMonitor.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n  token: AutofillMonitor,\n  factory: AutofillMonitor.ɵfac,\n  providedIn: 'root'\n});\n/** @nocollapse */\n\nAutofillMonitor.ctorParameters = function () {\n  return [{\n    type: Platform\n  }, {\n    type: NgZone\n  }];\n};\n/** @nocollapse */\n\n\nAutofillMonitor.ngInjectableDef = defineInjectable({\n  factory: function AutofillMonitor_Factory() {\n    return new AutofillMonitor(inject(Platform), inject(NgZone));\n  },\n  token: AutofillMonitor,\n  providedIn: \"root\"\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(AutofillMonitor, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc1.Platform\n    }, {\n      type: ɵngcc0.NgZone\n    }];\n  }, null);\n})();\n/**\n * A directive that can be used to monitor the autofill state of an input.\n */\n\n\nvar CdkAutofill = /*#__PURE__*/function () {\n  /**\n   * @param {?} _elementRef\n   * @param {?} _autofillMonitor\n   */\n  function CdkAutofill(_elementRef, _autofillMonitor) {\n    _classCallCheck(this, CdkAutofill);\n\n    this._elementRef = _elementRef;\n    this._autofillMonitor = _autofillMonitor;\n    /**\n     * Emits when the autofill state of the element changes.\n     */\n\n    this.cdkAutofill = new EventEmitter();\n  }\n  /**\n   * @return {?}\n   */\n\n\n  _createClass(CdkAutofill, [{\n    key: \"ngOnInit\",\n    value: function ngOnInit() {\n      var _this3 = this;\n\n      this._autofillMonitor.monitor(this._elementRef).subscribe(function (event) {\n        return _this3.cdkAutofill.emit(event);\n      });\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      this._autofillMonitor.stopMonitoring(this._elementRef);\n    }\n  }]);\n\n  return CdkAutofill;\n}();\n\nCdkAutofill.ɵfac = function CdkAutofill_Factory(t) {\n  return new (t || CdkAutofill)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(AutofillMonitor));\n};\n\nCdkAutofill.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n  type: CdkAutofill,\n  selectors: [[\"\", \"cdkAutofill\", \"\"]],\n  outputs: {\n    cdkAutofill: \"cdkAutofill\"\n  }\n});\n/** @nocollapse */\n\nCdkAutofill.ctorParameters = function () {\n  return [{\n    type: ElementRef\n  }, {\n    type: AutofillMonitor\n  }];\n};\n\nCdkAutofill.propDecorators = {\n  cdkAutofill: [{\n    type: Output\n  }]\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkAutofill, [{\n    type: Directive,\n    args: [{\n      selector: '[cdkAutofill]'\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ElementRef\n    }, {\n      type: AutofillMonitor\n    }];\n  }, {\n    cdkAutofill: [{\n      type: Output\n    }]\n  });\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * Directive to automatically resize a textarea to fit its content.\n */\n\n\nvar CdkTextareaAutosize = /*#__PURE__*/function () {\n  /**\n   * @param {?} _elementRef\n   * @param {?} _platform\n   * @param {?} _ngZone\n   */\n  function CdkTextareaAutosize(_elementRef, _platform, _ngZone) {\n    _classCallCheck(this, CdkTextareaAutosize);\n\n    this._elementRef = _elementRef;\n    this._platform = _platform;\n    this._ngZone = _ngZone;\n    this._destroyed = new Subject();\n    this._enabled = true;\n    /**\n     * Value of minRows as of last resize. If the minRows has decreased, the\n     * height of the textarea needs to be recomputed to reflect the new minimum. The maxHeight\n     * does not have the same problem because it does not affect the textarea's scrollHeight.\n     */\n\n    this._previousMinRows = -1;\n    this._textareaElement =\n    /** @type {?} */\n    this._elementRef.nativeElement;\n  }\n  /**\n   * Minimum amount of rows in the textarea.\n   * @return {?}\n   */\n\n\n  _createClass(CdkTextareaAutosize, [{\n    key: \"minRows\",\n    get: function get() {\n      return this._minRows;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ,\n    set: function set(value) {\n      this._minRows = value;\n\n      this._setMinHeight();\n    }\n    /**\n     * Maximum amount of rows in the textarea.\n     * @return {?}\n     */\n\n  }, {\n    key: \"maxRows\",\n    get: function get() {\n      return this._maxRows;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ,\n    set: function set(value) {\n      this._maxRows = value;\n\n      this._setMaxHeight();\n    }\n    /**\n     * Whether autosizing is enabled or not\n     * @return {?}\n     */\n\n  }, {\n    key: \"enabled\",\n    get: function get() {\n      return this._enabled;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ,\n    set: function set(value) {\n      value = coerceBooleanProperty(value); // Only act if the actual value changed. This specifically helps to not run\n      // resizeToFitContent too early (i.e. before ngAfterViewInit)\n\n      if (this._enabled !== value) {\n        (this._enabled = value) ? this.resizeToFitContent(true) : this.reset();\n      }\n    }\n    /**\n     * Sets the minimum height of the textarea as determined by minRows.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_setMinHeight\",\n    value: function _setMinHeight() {\n      /** @type {?} */\n      var minHeight = this.minRows && this._cachedLineHeight ? \"\".concat(this.minRows * this._cachedLineHeight, \"px\") : null;\n\n      if (minHeight) {\n        this._textareaElement.style.minHeight = minHeight;\n      }\n    }\n    /**\n     * Sets the maximum height of the textarea as determined by maxRows.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_setMaxHeight\",\n    value: function _setMaxHeight() {\n      /** @type {?} */\n      var maxHeight = this.maxRows && this._cachedLineHeight ? \"\".concat(this.maxRows * this._cachedLineHeight, \"px\") : null;\n\n      if (maxHeight) {\n        this._textareaElement.style.maxHeight = maxHeight;\n      }\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngAfterViewInit\",\n    value: function ngAfterViewInit() {\n      var _this4 = this;\n\n      if (this._platform.isBrowser) {\n        // Remember the height which we started with in case autosizing is disabled\n        this._initialHeight = this._textareaElement.style.height;\n        this.resizeToFitContent();\n\n        this._ngZone.runOutsideAngular(function () {\n          fromEvent(window, 'resize').pipe(auditTime(16), takeUntil(_this4._destroyed)).subscribe(function () {\n            return _this4.resizeToFitContent(true);\n          });\n        });\n      }\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      this._destroyed.next();\n\n      this._destroyed.complete();\n    }\n    /**\n     * Cache the height of a single-row textarea if it has not already been cached.\n     *\n     * We need to know how large a single \"row\" of a textarea is in order to apply minRows and\n     * maxRows. For the initial version, we will assume that the height of a single line in the\n     * textarea does not ever change.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_cacheTextareaLineHeight\",\n    value: function _cacheTextareaLineHeight() {\n      if (this._cachedLineHeight) {\n        return;\n      }\n      /** @type {?} */\n\n\n      var textareaClone =\n      /** @type {?} */\n      this._textareaElement.cloneNode(false);\n\n      textareaClone.rows = 1; // Use `position: absolute` so that this doesn't cause a browser layout and use\n      // `visibility: hidden` so that nothing is rendered. Clear any other styles that\n      // would affect the height.\n\n      textareaClone.style.position = 'absolute';\n      textareaClone.style.visibility = 'hidden';\n      textareaClone.style.border = 'none';\n      textareaClone.style.padding = '0';\n      textareaClone.style.height = '';\n      textareaClone.style.minHeight = '';\n      textareaClone.style.maxHeight = ''; // In Firefox it happens that textarea elements are always bigger than the specified amount\n      // of rows. This is because Firefox tries to add extra space for the horizontal scrollbar.\n      // As a workaround that removes the extra space for the scrollbar, we can just set overflow\n      // to hidden. This ensures that there is no invalid calculation of the line height.\n      // See Firefox bug report: https://bugzilla.mozilla.org/show_bug.cgi?id=33654\n\n      textareaClone.style.overflow = 'hidden';\n      /** @type {?} */\n\n      this._textareaElement.parentNode.appendChild(textareaClone);\n\n      this._cachedLineHeight = textareaClone.clientHeight;\n      /** @type {?} */\n\n      this._textareaElement.parentNode.removeChild(textareaClone); // Min and max heights have to be re-calculated if the cached line height changes\n\n\n      this._setMinHeight();\n\n      this._setMaxHeight();\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngDoCheck\",\n    value: function ngDoCheck() {\n      if (this._platform.isBrowser) {\n        this.resizeToFitContent();\n      }\n    }\n    /**\n     * Resize the textarea to fit its content.\n     * @param {?=} force Whether to force a height recalculation. By default the height will be\n     *    recalculated only if the value changed since the last call.\n     * @return {?}\n     */\n\n  }, {\n    key: \"resizeToFitContent\",\n    value: function resizeToFitContent() {\n      var _this5 = this;\n\n      var force = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n\n      // If autosizing is disabled, just skip everything else\n      if (!this._enabled) {\n        return;\n      }\n\n      this._cacheTextareaLineHeight(); // If we haven't determined the line-height yet, we know we're still hidden and there's no point\n      // in checking the height of the textarea.\n\n\n      if (!this._cachedLineHeight) {\n        return;\n      }\n      /** @type {?} */\n\n\n      var textarea =\n      /** @type {?} */\n      this._elementRef.nativeElement;\n      /** @type {?} */\n\n      var value = textarea.value; // Only resize if the value or minRows have changed since these calculations can be expensive.\n\n      if (!force && this._minRows === this._previousMinRows && value === this._previousValue) {\n        return;\n      }\n      /** @type {?} */\n\n\n      var placeholderText = textarea.placeholder; // Reset the textarea height to auto in order to shrink back to its default size.\n      // Also temporarily force overflow:hidden, so scroll bars do not interfere with calculations.\n      // Long placeholders that are wider than the textarea width may lead to a bigger scrollHeight\n      // value. To ensure that the scrollHeight is not bigger than the content, the placeholders\n      // need to be removed temporarily.\n\n      textarea.classList.add('cdk-textarea-autosize-measuring');\n      textarea.placeholder = '';\n      /** @type {?} */\n\n      var height = textarea.scrollHeight - 4; // Use the scrollHeight to know how large the textarea *would* be if fit its entire value.\n\n      textarea.style.height = \"\".concat(height, \"px\");\n      textarea.classList.remove('cdk-textarea-autosize-measuring');\n      textarea.placeholder = placeholderText; // On Firefox resizing the textarea will prevent it from scrolling to the caret position.\n      // We need to re-set the selection in order for it to scroll to the proper position.\n\n      if (typeof requestAnimationFrame !== 'undefined') {\n        this._ngZone.runOutsideAngular(function () {\n          return requestAnimationFrame(function () {\n            var selectionStart = textarea.selectionStart,\n                selectionEnd = textarea.selectionEnd; // IE will throw an \"Unspecified error\" if we try to set the selection range after the\n            // element has been removed from the DOM. Assert that the directive hasn't been destroyed\n            // between the time we requested the animation frame and when it was executed.\n            // Also note that we have to assert that the textarea is focused before we set the\n            // selection range. Setting the selection range on a non-focused textarea will cause\n            // it to receive focus on IE and Edge.\n\n            if (!_this5._destroyed.isStopped && document.activeElement === textarea) {\n              textarea.setSelectionRange(selectionStart, selectionEnd);\n            }\n          });\n        });\n      }\n\n      this._previousValue = value;\n      this._previousMinRows = this._minRows;\n    }\n    /**\n     * Resets the textarea to it's original size\n     * @return {?}\n     */\n\n  }, {\n    key: \"reset\",\n    value: function reset() {\n      // Do not try to change the textarea, if the initialHeight has not been determined yet\n      // This might potentially remove styles when reset() is called before ngAfterViewInit\n      if (this._initialHeight === undefined) {\n        return;\n      }\n\n      this._textareaElement.style.height = this._initialHeight;\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"_noopInputHandler\",\n    value: function _noopInputHandler() {// no-op handler that ensures we're running change detection on input events.\n    }\n  }]);\n\n  return CdkTextareaAutosize;\n}();\n\nCdkTextareaAutosize.ɵfac = function CdkTextareaAutosize_Factory(t) {\n  return new (t || CdkTextareaAutosize)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.Platform), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone));\n};\n\nCdkTextareaAutosize.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n  type: CdkTextareaAutosize,\n  selectors: [[\"textarea\", \"cdkTextareaAutosize\", \"\"]],\n  hostAttrs: [\"rows\", \"1\", 1, \"cdk-textarea-autosize\"],\n  hostBindings: function CdkTextareaAutosize_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵlistener(\"input\", function CdkTextareaAutosize_input_HostBindingHandler() {\n        return ctx._noopInputHandler();\n      });\n    }\n  },\n  inputs: {\n    minRows: [\"cdkAutosizeMinRows\", \"minRows\"],\n    maxRows: [\"cdkAutosizeMaxRows\", \"maxRows\"],\n    enabled: [\"cdkTextareaAutosize\", \"enabled\"]\n  },\n  exportAs: [\"cdkTextareaAutosize\"]\n});\n/** @nocollapse */\n\nCdkTextareaAutosize.ctorParameters = function () {\n  return [{\n    type: ElementRef\n  }, {\n    type: Platform\n  }, {\n    type: NgZone\n  }];\n};\n\nCdkTextareaAutosize.propDecorators = {\n  minRows: [{\n    type: Input,\n    args: ['cdkAutosizeMinRows']\n  }],\n  maxRows: [{\n    type: Input,\n    args: ['cdkAutosizeMaxRows']\n  }],\n  enabled: [{\n    type: Input,\n    args: ['cdkTextareaAutosize']\n  }]\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkTextareaAutosize, [{\n    type: Directive,\n    args: [{\n      selector: 'textarea[cdkTextareaAutosize]',\n      exportAs: 'cdkTextareaAutosize',\n      host: {\n        'class': 'cdk-textarea-autosize',\n        // Textarea elements that have the directive applied should have a single row by default.\n        // Browsers normally show two rows by default and therefore this limits the minRows binding.\n        'rows': '1',\n        '(input)': '_noopInputHandler()'\n      }\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ElementRef\n    }, {\n      type: ɵngcc1.Platform\n    }, {\n      type: ɵngcc0.NgZone\n    }];\n  }, {\n    minRows: [{\n      type: Input,\n      args: ['cdkAutosizeMinRows']\n    }],\n    maxRows: [{\n      type: Input,\n      args: ['cdkAutosizeMaxRows']\n    }],\n    enabled: [{\n      type: Input,\n      args: ['cdkTextareaAutosize']\n    }]\n  });\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n\nvar TextFieldModule = function TextFieldModule() {\n  _classCallCheck(this, TextFieldModule);\n};\n\nTextFieldModule.ɵfac = function TextFieldModule_Factory(t) {\n  return new (t || TextFieldModule)();\n};\n\nTextFieldModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n  type: TextFieldModule\n});\nTextFieldModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n  imports: [[PlatformModule]]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(TextFieldModule, [{\n    type: NgModule,\n    args: [{\n      declarations: [CdkAutofill, CdkTextareaAutosize],\n      imports: [PlatformModule],\n      exports: [CdkAutofill, CdkTextareaAutosize]\n    }]\n  }], null, null);\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(TextFieldModule, {\n    declarations: function declarations() {\n      return [CdkAutofill, CdkTextareaAutosize];\n    },\n    imports: function imports() {\n      return [PlatformModule];\n    },\n    exports: function exports() {\n      return [CdkAutofill, CdkTextareaAutosize];\n    }\n  });\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n\nexport { AutofillMonitor, CdkAutofill, CdkTextareaAutosize, TextFieldModule }; //# sourceMappingURL=text-field.js.map","map":{"version":3,"sources":["/Users/adepertat/Dropbox/ECOLES/Openclassroom/P6_de_Pertat_Antoine/dwj-projet6/node_modules/@angular/cdk/__ivy_ngcc__/esm2015/text-field.js"],"names":["Platform","normalizePassiveListenerOptions","PlatformModule","Directive","ElementRef","EventEmitter","Injectable","NgZone","Output","Input","NgModule","defineInjectable","inject","EMPTY","Subject","fromEvent","coerceBooleanProperty","auditTime","takeUntil","ɵngcc0","ɵngcc1","listenerOptions","passive","AutofillMonitor","_platform","_ngZone","_monitoredElements","Map","elementOrRef","isBrowser","element","nativeElement","info","get","subject","asObservable","result","cssClass","listener","event","animationName","classList","contains","add","run","next","target","isAutofilled","remove","runOutsideAngular","addEventListener","set","unlisten","removeEventListener","complete","delete","forEach","_info","stopMonitoring","ɵfac","AutofillMonitor_Factory","t","ɵɵinject","ɵprov","ɵɵdefineInjectable","token","factory","providedIn","ctorParameters","type","ngInjectableDef","ngDevMode","ɵsetClassMetadata","args","CdkAutofill","_elementRef","_autofillMonitor","cdkAutofill","monitor","subscribe","emit","CdkAutofill_Factory","ɵɵdirectiveInject","ɵdir","ɵɵdefineDirective","selectors","outputs","propDecorators","selector","CdkTextareaAutosize","_destroyed","_enabled","_previousMinRows","_textareaElement","_minRows","value","_setMinHeight","_maxRows","_setMaxHeight","resizeToFitContent","reset","minHeight","minRows","_cachedLineHeight","style","maxHeight","maxRows","_initialHeight","height","window","pipe","textareaClone","cloneNode","rows","position","visibility","border","padding","overflow","parentNode","appendChild","clientHeight","removeChild","force","_cacheTextareaLineHeight","textarea","_previousValue","placeholderText","placeholder","scrollHeight","requestAnimationFrame","selectionStart","selectionEnd","isStopped","document","activeElement","setSelectionRange","undefined","CdkTextareaAutosize_Factory","hostAttrs","hostBindings","CdkTextareaAutosize_HostBindings","rf","ctx","ɵɵlistener","CdkTextareaAutosize_input_HostBindingHandler","_noopInputHandler","inputs","enabled","exportAs","host","TextFieldModule","TextFieldModule_Factory","ɵmod","ɵɵdefineNgModule","ɵinj","ɵɵdefineInjector","imports","declarations","exports","ngJitMode","ɵɵsetNgModuleScope"],"mappings":";;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,QAAT,EAAmBC,+BAAnB,EAAoDC,cAApD,QAA0E,uBAA1E;AACA,SAASC,SAAT,EAAoBC,UAApB,EAAgCC,YAAhC,EAA8CC,UAA9C,EAA0DC,MAA1D,EAAkEC,MAAlE,EAA0EC,KAA1E,EAAiFC,QAAjF,EAA2FC,gBAA3F,EAA6GC,MAA7G,QAA2H,eAA3H;AACA,SAASC,KAAT,EAAgBC,OAAhB,EAAyBC,SAAzB,QAA0C,MAA1C;AACA,SAASC,qBAAT,QAAsC,uBAAtC;AACA,SAASC,SAAT,EAAoBC,SAApB,QAAqC,gBAArC;AAEA;AACA;AACA;AACA;;AACA;AACA;AACA;;AACA,OAAO,KAAKC,MAAZ,MAAwB,eAAxB;AACA,OAAO,KAAKC,MAAZ,MAAwB,uBAAxB;AACA,IAAMC,eAAe,GAAGpB,+BAA+B,CAAC;AAAEqB,EAAAA,OAAO,EAAE;AAAX,CAAD,CAAvD;AACA;AACA;AACA;AACA;AACA;;IACMC,e;AACF;AACJ;AACA;AACA;AACI,2BAAYC,SAAZ,EAAuBC,OAAvB,EAAgC;AAAA;;AAC5B,SAAKD,SAAL,GAAiBA,SAAjB;AACA,SAAKC,OAAL,GAAeA,OAAf;AACA,SAAKC,kBAAL,GAA0B,IAAIC,GAAJ,EAA1B;AACH;AACD;AACJ;AACA;AACA;;;;;WACI,iBAAQC,YAAR,EAAsB;AAAA;;AAClB,UAAI,CAAC,KAAKJ,SAAL,CAAeK,SAApB,EAA+B;AAC3B,eAAOhB,KAAP;AACH;AACD;;;AACA,UAAMiB,OAAO,GAAGF,YAAY,YAAYxB,UAAxB,GAAqCwB,YAAY,CAACG,aAAlD,GAAkEH,YAAlF;AACA;;AACA,UAAMI,IAAI,GAAG,KAAKN,kBAAL,CAAwBO,GAAxB,CAA4BH,OAA5B,CAAb;;AACA,UAAIE,IAAJ,EAAU;AACN,eAAOA,IAAI,CAACE,OAAL,CAAaC,YAAb,EAAP;AACH;AACD;;;AACA,UAAMC,MAAM,GAAG,IAAItB,OAAJ,EAAf;AACA;;AACA,UAAMuB,QAAQ,GAAG,2BAAjB;AACA;;AACA,UAAMC,QAAQ;AAAG;AAAmB,eAA9BA,QAA8B,CAACC,KAAD,EAAW;AAC3C;AACA;AACA;AACA,YAAIA,KAAK,CAACC,aAAN,KAAwB,+BAAxB,IACA,CAACV,OAAO,CAACW,SAAR,CAAkBC,QAAlB,CAA2BL,QAA3B,CADL,EAC2C;AACvCP,UAAAA,OAAO,CAACW,SAAR,CAAkBE,GAAlB,CAAsBN,QAAtB;;AACA,UAAA,KAAI,CAACZ,OAAL,CAAamB,GAAb,CAAiB;AAAA,mBAAMR,MAAM,CAACS,IAAP,CAAY;AAAEC,cAAAA,MAAM;AAAE;AAAkBP,cAAAA,KAAK,CAACO,MAAlC;AAA2CC,cAAAA,YAAY,EAAE;AAAzD,aAAZ,CAAN;AAAA,WAAjB;AACH,SAJD,MAKK,IAAIR,KAAK,CAACC,aAAN,KAAwB,6BAAxB,IACLV,OAAO,CAACW,SAAR,CAAkBC,QAAlB,CAA2BL,QAA3B,CADC,EACqC;AACtCP,UAAAA,OAAO,CAACW,SAAR,CAAkBO,MAAlB,CAAyBX,QAAzB;;AACA,UAAA,KAAI,CAACZ,OAAL,CAAamB,GAAb,CAAiB;AAAA,mBAAMR,MAAM,CAACS,IAAP,CAAY;AAAEC,cAAAA,MAAM;AAAE;AAAkBP,cAAAA,KAAK,CAACO,MAAlC;AAA2CC,cAAAA,YAAY,EAAE;AAAzD,aAAZ,CAAN;AAAA,WAAjB;AACH;AACJ,OAdD;;AAeA,WAAKtB,OAAL,CAAawB,iBAAb,CAA+B,YAAM;AACjCnB,QAAAA,OAAO,CAACoB,gBAAR,CAAyB,gBAAzB,EAA2CZ,QAA3C,EAAqDjB,eAArD;AACAS,QAAAA,OAAO,CAACW,SAAR,CAAkBE,GAAlB,CAAsB,mCAAtB;AACH,OAHD;;AAIA,WAAKjB,kBAAL,CAAwByB,GAAxB,CAA4BrB,OAA5B,EAAqC;AACjCI,QAAAA,OAAO,EAAEE,MADwB;AAEjCgB,QAAAA,QAAQ,EAAE,oBAAM;AACZtB,UAAAA,OAAO,CAACuB,mBAAR,CAA4B,gBAA5B,EAA8Cf,QAA9C,EAAwDjB,eAAxD;AACH;AAJgC,OAArC;;AAMA,aAAOe,MAAM,CAACD,YAAP,EAAP;AACH;AACD;AACJ;AACA;AACA;;;;WACI,wBAAeP,YAAf,EAA6B;AACzB;AACA,UAAME,OAAO,GAAGF,YAAY,YAAYxB,UAAxB,GAAqCwB,YAAY,CAACG,aAAlD,GAAkEH,YAAlF;AACA;;AACA,UAAMI,IAAI,GAAG,KAAKN,kBAAL,CAAwBO,GAAxB,CAA4BH,OAA5B,CAAb;;AACA,UAAIE,IAAJ,EAAU;AACNA,QAAAA,IAAI,CAACoB,QAAL;AACApB,QAAAA,IAAI,CAACE,OAAL,CAAaoB,QAAb;AACAxB,QAAAA,OAAO,CAACW,SAAR,CAAkBO,MAAlB,CAAyB,mCAAzB;AACAlB,QAAAA,OAAO,CAACW,SAAR,CAAkBO,MAAlB,CAAyB,2BAAzB;;AACA,aAAKtB,kBAAL,CAAwB6B,MAAxB,CAA+BzB,OAA/B;AACH;AACJ;AACD;AACJ;AACA;;;;WACI,uBAAc;AAAA;;AACV,WAAKJ,kBAAL,CAAwB8B,OAAxB,CAAgC,UAACC,KAAD,EAAQ3B,OAAR;AAAA,eAAoB,MAAI,CAAC4B,cAAL,CAAoB5B,OAApB,CAApB;AAAA,OAAhC;AACH;;;;;;AAELP,eAAe,CAACoC,IAAhB,GAAuB,SAASC,uBAAT,CAAiCC,CAAjC,EAAoC;AAAE,SAAO,KAAKA,CAAC,IAAItC,eAAV,EAA2BJ,MAAM,CAAC2C,QAAP,CAAgB1C,MAAM,CAACpB,QAAvB,CAA3B,EAA6DmB,MAAM,CAAC2C,QAAP,CAAgB3C,MAAM,CAACZ,MAAvB,CAA7D,CAAP;AAAsG,CAAnK;;AACAgB,eAAe,CAACwC,KAAhB,GAAwB,aAAc5C,MAAM,CAAC6C,kBAAP,CAA0B;AAAEC,EAAAA,KAAK,EAAE1C,eAAT;AAA0B2C,EAAAA,OAAO,EAAE3C,eAAe,CAACoC,IAAnD;AAAyDQ,EAAAA,UAAU,EAAE;AAArE,CAA1B,CAAtC;AACA;;AACA5C,eAAe,CAAC6C,cAAhB,GAAiC;AAAA,SAAM,CACnC;AAAEC,IAAAA,IAAI,EAAErE;AAAR,GADmC,EAEnC;AAAEqE,IAAAA,IAAI,EAAE9D;AAAR,GAFmC,CAAN;AAAA,CAAjC;AAIA;;;AAAmBgB,eAAe,CAAC+C,eAAhB,GAAkC3D,gBAAgB,CAAC;AAAEuD,EAAAA,OAAO,EAAE,SAASN,uBAAT,GAAmC;AAAE,WAAO,IAAIrC,eAAJ,CAAoBX,MAAM,CAACZ,QAAD,CAA1B,EAAsCY,MAAM,CAACL,MAAD,CAA5C,CAAP;AAA+D,GAA/G;AAAiH0D,EAAAA,KAAK,EAAE1C,eAAxH;AAAyI4C,EAAAA,UAAU,EAAE;AAArJ,CAAD,CAAlD;;AACnB,CAAC,YAAY;AAAE,GAAC,OAAOI,SAAP,KAAqB,WAArB,IAAoCA,SAArC,KAAmDpD,MAAM,CAACqD,iBAAP,CAAyBjD,eAAzB,EAA0C,CAAC;AACrG8C,IAAAA,IAAI,EAAE/D,UAD+F;AAErGmE,IAAAA,IAAI,EAAE,CAAC;AAAEN,MAAAA,UAAU,EAAE;AAAd,KAAD;AAF+F,GAAD,CAA1C,EAG1D,YAAY;AAAE,WAAO,CAAC;AAAEE,MAAAA,IAAI,EAAEjD,MAAM,CAACpB;AAAf,KAAD,EAA4B;AAAEqE,MAAAA,IAAI,EAAElD,MAAM,CAACZ;AAAf,KAA5B,CAAP;AAA8D,GAHlB,EAGoB,IAHpB,CAAnD;AAG+E,CAH9F;AAIA;AACA;AACA;;;IACMmE,W;AACF;AACJ;AACA;AACA;AACI,uBAAYC,WAAZ,EAAyBC,gBAAzB,EAA2C;AAAA;;AACvC,SAAKD,WAAL,GAAmBA,WAAnB;AACA,SAAKC,gBAAL,GAAwBA,gBAAxB;AACA;AACR;AACA;;AACQ,SAAKC,WAAL,GAAmB,IAAIxE,YAAJ,EAAnB;AACH;AACD;AACJ;AACA;;;;;WACI,oBAAW;AAAA;;AACP,WAAKuE,gBAAL,CACKE,OADL,CACa,KAAKH,WADlB,EAEKI,SAFL,CAEe,UAAAxC,KAAK;AAAA,eAAI,MAAI,CAACsC,WAAL,CAAiBG,IAAjB,CAAsBzC,KAAtB,CAAJ;AAAA,OAFpB;AAGH;AACD;AACJ;AACA;;;;WACI,uBAAc;AACV,WAAKqC,gBAAL,CAAsBlB,cAAtB,CAAqC,KAAKiB,WAA1C;AACH;;;;;;AAELD,WAAW,CAACf,IAAZ,GAAmB,SAASsB,mBAAT,CAA6BpB,CAA7B,EAAgC;AAAE,SAAO,KAAKA,CAAC,IAAIa,WAAV,EAAuBvD,MAAM,CAAC+D,iBAAP,CAAyB/D,MAAM,CAACf,UAAhC,CAAvB,EAAoEe,MAAM,CAAC+D,iBAAP,CAAyB3D,eAAzB,CAApE,CAAP;AAAwH,CAA7K;;AACAmD,WAAW,CAACS,IAAZ,GAAmB,aAAchE,MAAM,CAACiE,iBAAP,CAAyB;AAAEf,EAAAA,IAAI,EAAEK,WAAR;AAAqBW,EAAAA,SAAS,EAAE,CAAC,CAAC,EAAD,EAAK,aAAL,EAAoB,EAApB,CAAD,CAAhC;AAA2DC,EAAAA,OAAO,EAAE;AAAET,IAAAA,WAAW,EAAE;AAAf;AAApE,CAAzB,CAAjC;AACA;;AACAH,WAAW,CAACN,cAAZ,GAA6B;AAAA,SAAM,CAC/B;AAAEC,IAAAA,IAAI,EAAEjE;AAAR,GAD+B,EAE/B;AAAEiE,IAAAA,IAAI,EAAE9C;AAAR,GAF+B,CAAN;AAAA,CAA7B;;AAIAmD,WAAW,CAACa,cAAZ,GAA6B;AACzBV,EAAAA,WAAW,EAAE,CAAC;AAAER,IAAAA,IAAI,EAAE7D;AAAR,GAAD;AADY,CAA7B;;AAGA,CAAC,YAAY;AAAE,GAAC,OAAO+D,SAAP,KAAqB,WAArB,IAAoCA,SAArC,KAAmDpD,MAAM,CAACqD,iBAAP,CAAyBE,WAAzB,EAAsC,CAAC;AACjGL,IAAAA,IAAI,EAAElE,SAD2F;AAEjGsE,IAAAA,IAAI,EAAE,CAAC;AACCe,MAAAA,QAAQ,EAAE;AADX,KAAD;AAF2F,GAAD,CAAtC,EAK1D,YAAY;AAAE,WAAO,CAAC;AAAEnB,MAAAA,IAAI,EAAElD,MAAM,CAACf;AAAf,KAAD,EAA8B;AAAEiE,MAAAA,IAAI,EAAE9C;AAAR,KAA9B,CAAP;AAAkE,GALtB,EAKwB;AAAEsD,IAAAA,WAAW,EAAE,CAAC;AAC9FR,MAAAA,IAAI,EAAE7D;AADwF,KAAD;AAAf,GALxB,CAAnD;AAOC,CAPhB;AASA;AACA;AACA;AACA;;AACA;AACA;AACA;;;IACMiF,mB;AACF;AACJ;AACA;AACA;AACA;AACI,+BAAYd,WAAZ,EAAyBnD,SAAzB,EAAoCC,OAApC,EAA6C;AAAA;;AACzC,SAAKkD,WAAL,GAAmBA,WAAnB;AACA,SAAKnD,SAAL,GAAiBA,SAAjB;AACA,SAAKC,OAAL,GAAeA,OAAf;AACA,SAAKiE,UAAL,GAAkB,IAAI5E,OAAJ,EAAlB;AACA,SAAK6E,QAAL,GAAgB,IAAhB;AACA;AACR;AACA;AACA;AACA;;AACQ,SAAKC,gBAAL,GAAwB,CAAC,CAAzB;AACA,SAAKC,gBAAL;AAAwB;AAAkB,SAAKlB,WAAL,CAAiB5C,aAA3D;AACH;AACD;AACJ;AACA;AACA;;;;;SACI,eAAc;AAAE,aAAO,KAAK+D,QAAZ;AAAuB;AACvC;AACJ;AACA;AACA;;SACI,aAAYC,KAAZ,EAAmB;AACf,WAAKD,QAAL,GAAgBC,KAAhB;;AACA,WAAKC,aAAL;AACH;AACD;AACJ;AACA;AACA;;;;SACI,eAAc;AAAE,aAAO,KAAKC,QAAZ;AAAuB;AACvC;AACJ;AACA;AACA;;SACI,aAAYF,KAAZ,EAAmB;AACf,WAAKE,QAAL,GAAgBF,KAAhB;;AACA,WAAKG,aAAL;AACH;AACD;AACJ;AACA;AACA;;;;SACI,eAAc;AAAE,aAAO,KAAKP,QAAZ;AAAuB;AACvC;AACJ;AACA;AACA;;SACI,aAAYI,KAAZ,EAAmB;AACfA,MAAAA,KAAK,GAAG/E,qBAAqB,CAAC+E,KAAD,CAA7B,CADe,CAEf;AACA;;AACA,UAAI,KAAKJ,QAAL,KAAkBI,KAAtB,EAA6B;AACzB,SAAC,KAAKJ,QAAL,GAAgBI,KAAjB,IAA0B,KAAKI,kBAAL,CAAwB,IAAxB,CAA1B,GAA0D,KAAKC,KAAL,EAA1D;AACH;AACJ;AACD;AACJ;AACA;AACA;;;;WACI,yBAAgB;AACZ;AACA,UAAMC,SAAS,GAAG,KAAKC,OAAL,IAAgB,KAAKC,iBAArB,aACX,KAAKD,OAAL,GAAe,KAAKC,iBADT,UACiC,IADnD;;AAEA,UAAIF,SAAJ,EAAe;AACX,aAAKR,gBAAL,CAAsBW,KAAtB,CAA4BH,SAA5B,GAAwCA,SAAxC;AACH;AACJ;AACD;AACJ;AACA;AACA;;;;WACI,yBAAgB;AACZ;AACA,UAAMI,SAAS,GAAG,KAAKC,OAAL,IAAgB,KAAKH,iBAArB,aACX,KAAKG,OAAL,GAAe,KAAKH,iBADT,UACiC,IADnD;;AAEA,UAAIE,SAAJ,EAAe;AACX,aAAKZ,gBAAL,CAAsBW,KAAtB,CAA4BC,SAA5B,GAAwCA,SAAxC;AACH;AACJ;AACD;AACJ;AACA;;;;WACI,2BAAkB;AAAA;;AACd,UAAI,KAAKjF,SAAL,CAAeK,SAAnB,EAA8B;AAC1B;AACA,aAAK8E,cAAL,GAAsB,KAAKd,gBAAL,CAAsBW,KAAtB,CAA4BI,MAAlD;AACA,aAAKT,kBAAL;;AACA,aAAK1E,OAAL,CAAawB,iBAAb,CAA+B,YAAM;AACjClC,UAAAA,SAAS,CAAC8F,MAAD,EAAS,QAAT,CAAT,CACKC,IADL,CACU7F,SAAS,CAAC,EAAD,CADnB,EACyBC,SAAS,CAAC,MAAI,CAACwE,UAAN,CADlC,EAEKX,SAFL,CAEe;AAAA,mBAAM,MAAI,CAACoB,kBAAL,CAAwB,IAAxB,CAAN;AAAA,WAFf;AAGH,SAJD;AAKH;AACJ;AACD;AACJ;AACA;;;;WACI,uBAAc;AACV,WAAKT,UAAL,CAAgB7C,IAAhB;;AACA,WAAK6C,UAAL,CAAgBpC,QAAhB;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;;;WACI,oCAA2B;AACvB,UAAI,KAAKiD,iBAAT,EAA4B;AACxB;AACH;AACD;;;AACA,UAAIQ,aAAa;AAAG;AAAkB,WAAKlB,gBAAL,CAAsBmB,SAAtB,CAAgC,KAAhC,CAAtC;;AACAD,MAAAA,aAAa,CAACE,IAAd,GAAqB,CAArB,CANuB,CAOvB;AACA;AACA;;AACAF,MAAAA,aAAa,CAACP,KAAd,CAAoBU,QAApB,GAA+B,UAA/B;AACAH,MAAAA,aAAa,CAACP,KAAd,CAAoBW,UAApB,GAAiC,QAAjC;AACAJ,MAAAA,aAAa,CAACP,KAAd,CAAoBY,MAApB,GAA6B,MAA7B;AACAL,MAAAA,aAAa,CAACP,KAAd,CAAoBa,OAApB,GAA8B,GAA9B;AACAN,MAAAA,aAAa,CAACP,KAAd,CAAoBI,MAApB,GAA6B,EAA7B;AACAG,MAAAA,aAAa,CAACP,KAAd,CAAoBH,SAApB,GAAgC,EAAhC;AACAU,MAAAA,aAAa,CAACP,KAAd,CAAoBC,SAApB,GAAgC,EAAhC,CAhBuB,CAiBvB;AACA;AACA;AACA;AACA;;AACAM,MAAAA,aAAa,CAACP,KAAd,CAAoBc,QAApB,GAA+B,QAA/B;AAAyC;;AACvC,WAAKzB,gBAAL,CAAsB0B,UAAxB,CAAqCC,WAArC,CAAiDT,aAAjD;;AACA,WAAKR,iBAAL,GAAyBQ,aAAa,CAACU,YAAvC;AAAqD;;AACnD,WAAK5B,gBAAL,CAAsB0B,UAAxB,CAAqCG,WAArC,CAAiDX,aAAjD,EAzBuB,CA0BvB;;;AACA,WAAKf,aAAL;;AACA,WAAKE,aAAL;AACH;AACD;AACJ;AACA;;;;WACI,qBAAY;AACR,UAAI,KAAK1E,SAAL,CAAeK,SAAnB,EAA8B;AAC1B,aAAKsE,kBAAL;AACH;AACJ;AACD;AACJ;AACA;AACA;AACA;AACA;;;;WACI,8BAAkC;AAAA;;AAAA,UAAfwB,KAAe,uEAAP,KAAO;;AAC9B;AACA,UAAI,CAAC,KAAKhC,QAAV,EAAoB;AAChB;AACH;;AACD,WAAKiC,wBAAL,GAL8B,CAM9B;AACA;;;AACA,UAAI,CAAC,KAAKrB,iBAAV,EAA6B;AACzB;AACH;AACD;;;AACA,UAAMsB,QAAQ;AAAG;AAAkB,WAAKlD,WAAL,CAAiB5C,aAApD;AACA;;AACA,UAAMgE,KAAK,GAAG8B,QAAQ,CAAC9B,KAAvB,CAd8B,CAe9B;;AACA,UAAI,CAAC4B,KAAD,IAAU,KAAK7B,QAAL,KAAkB,KAAKF,gBAAjC,IAAqDG,KAAK,KAAK,KAAK+B,cAAxE,EAAwF;AACpF;AACH;AACD;;;AACA,UAAMC,eAAe,GAAGF,QAAQ,CAACG,WAAjC,CApB8B,CAqB9B;AACA;AACA;AACA;AACA;;AACAH,MAAAA,QAAQ,CAACpF,SAAT,CAAmBE,GAAnB,CAAuB,iCAAvB;AACAkF,MAAAA,QAAQ,CAACG,WAAT,GAAuB,EAAvB;AACA;;AACA,UAAMpB,MAAM,GAAGiB,QAAQ,CAACI,YAAT,GAAwB,CAAvC,CA7B8B,CA8B9B;;AACAJ,MAAAA,QAAQ,CAACrB,KAAT,CAAeI,MAAf,aAA2BA,MAA3B;AACAiB,MAAAA,QAAQ,CAACpF,SAAT,CAAmBO,MAAnB,CAA0B,iCAA1B;AACA6E,MAAAA,QAAQ,CAACG,WAAT,GAAuBD,eAAvB,CAjC8B,CAkC9B;AACA;;AACA,UAAI,OAAOG,qBAAP,KAAiC,WAArC,EAAkD;AAC9C,aAAKzG,OAAL,CAAawB,iBAAb,CAA+B;AAAA,iBAAMiF,qBAAqB,CAAC,YAAM;AAC7D,gBAAQC,cAAR,GAAyCN,QAAzC,CAAQM,cAAR;AAAA,gBAAwBC,YAAxB,GAAyCP,QAAzC,CAAwBO,YAAxB,CAD6D,CAE7D;AACA;AACA;AACA;AACA;AACA;;AACA,gBAAI,CAAC,MAAI,CAAC1C,UAAL,CAAgB2C,SAAjB,IAA8BC,QAAQ,CAACC,aAAT,KAA2BV,QAA7D,EAAuE;AACnEA,cAAAA,QAAQ,CAACW,iBAAT,CAA2BL,cAA3B,EAA2CC,YAA3C;AACH;AACJ,WAXyD,CAA3B;AAAA,SAA/B;AAYH;;AACD,WAAKN,cAAL,GAAsB/B,KAAtB;AACA,WAAKH,gBAAL,GAAwB,KAAKE,QAA7B;AACH;AACD;AACJ;AACA;AACA;;;;WACI,iBAAQ;AACJ;AACA;AACA,UAAI,KAAKa,cAAL,KAAwB8B,SAA5B,EAAuC;AACnC;AACH;;AACD,WAAK5C,gBAAL,CAAsBW,KAAtB,CAA4BI,MAA5B,GAAqC,KAAKD,cAA1C;AACH;AACD;AACJ;AACA;;;;WACI,6BAAoB,CAChB;AACH;;;;;;AAELlB,mBAAmB,CAAC9B,IAApB,GAA2B,SAAS+E,2BAAT,CAAqC7E,CAArC,EAAwC;AAAE,SAAO,KAAKA,CAAC,IAAI4B,mBAAV,EAA+BtE,MAAM,CAAC+D,iBAAP,CAAyB/D,MAAM,CAACf,UAAhC,CAA/B,EAA4Ee,MAAM,CAAC+D,iBAAP,CAAyB9D,MAAM,CAACpB,QAAhC,CAA5E,EAAuHmB,MAAM,CAAC+D,iBAAP,CAAyB/D,MAAM,CAACZ,MAAhC,CAAvH,CAAP;AAAyK,CAA9O;;AACAkF,mBAAmB,CAACN,IAApB,GAA2B,aAAchE,MAAM,CAACiE,iBAAP,CAAyB;AAAEf,EAAAA,IAAI,EAAEoB,mBAAR;AAA6BJ,EAAAA,SAAS,EAAE,CAAC,CAAC,UAAD,EAAa,qBAAb,EAAoC,EAApC,CAAD,CAAxC;AAAmFsD,EAAAA,SAAS,EAAE,CAAC,MAAD,EAAS,GAAT,EAAc,CAAd,EAAiB,uBAAjB,CAA9F;AAAyIC,EAAAA,YAAY,EAAE,SAASC,gCAAT,CAA0CC,EAA1C,EAA8CC,GAA9C,EAAmD;AAAE,QAAID,EAAE,GAAG,CAAT,EAAY;AAClR3H,MAAAA,MAAM,CAAC6H,UAAP,CAAkB,OAAlB,EAA2B,SAASC,4CAAT,GAAwD;AAAE,eAAOF,GAAG,CAACG,iBAAJ,EAAP;AAAiC,OAAtH;AACH;AAAE,GAF2D;AAEzDC,EAAAA,MAAM,EAAE;AAAE7C,IAAAA,OAAO,EAAE,CAAC,oBAAD,EAAuB,SAAvB,CAAX;AAA8CI,IAAAA,OAAO,EAAE,CAAC,oBAAD,EAAuB,SAAvB,CAAvD;AAA0F0C,IAAAA,OAAO,EAAE,CAAC,qBAAD,EAAwB,SAAxB;AAAnG,GAFiD;AAEwFC,EAAAA,QAAQ,EAAE,CAAC,qBAAD;AAFlG,CAAzB,CAAzC;AAGA;;AACA5D,mBAAmB,CAACrB,cAApB,GAAqC;AAAA,SAAM,CACvC;AAAEC,IAAAA,IAAI,EAAEjE;AAAR,GADuC,EAEvC;AAAEiE,IAAAA,IAAI,EAAErE;AAAR,GAFuC,EAGvC;AAAEqE,IAAAA,IAAI,EAAE9D;AAAR,GAHuC,CAAN;AAAA,CAArC;;AAKAkF,mBAAmB,CAACF,cAApB,GAAqC;AACjCe,EAAAA,OAAO,EAAE,CAAC;AAAEjC,IAAAA,IAAI,EAAE5D,KAAR;AAAegE,IAAAA,IAAI,EAAE,CAAC,oBAAD;AAArB,GAAD,CADwB;AAEjCiC,EAAAA,OAAO,EAAE,CAAC;AAAErC,IAAAA,IAAI,EAAE5D,KAAR;AAAegE,IAAAA,IAAI,EAAE,CAAC,oBAAD;AAArB,GAAD,CAFwB;AAGjC2E,EAAAA,OAAO,EAAE,CAAC;AAAE/E,IAAAA,IAAI,EAAE5D,KAAR;AAAegE,IAAAA,IAAI,EAAE,CAAC,qBAAD;AAArB,GAAD;AAHwB,CAArC;;AAKA,CAAC,YAAY;AAAE,GAAC,OAAOF,SAAP,KAAqB,WAArB,IAAoCA,SAArC,KAAmDpD,MAAM,CAACqD,iBAAP,CAAyBiB,mBAAzB,EAA8C,CAAC;AACzGpB,IAAAA,IAAI,EAAElE,SADmG;AAEzGsE,IAAAA,IAAI,EAAE,CAAC;AACCe,MAAAA,QAAQ,EAAE,+BADX;AAEC6D,MAAAA,QAAQ,EAAE,qBAFX;AAGCC,MAAAA,IAAI,EAAE;AACF,iBAAS,uBADP;AAEF;AACA;AACA,gBAAQ,GAJN;AAKF,mBAAW;AALT;AAHP,KAAD;AAFmG,GAAD,CAA9C,EAa1D,YAAY;AAAE,WAAO,CAAC;AAAEjF,MAAAA,IAAI,EAAElD,MAAM,CAACf;AAAf,KAAD,EAA8B;AAAEiE,MAAAA,IAAI,EAAEjD,MAAM,CAACpB;AAAf,KAA9B,EAAyD;AAAEqE,MAAAA,IAAI,EAAElD,MAAM,CAACZ;AAAf,KAAzD,CAAP;AAA2F,GAb/C,EAaiD;AAAE+F,IAAAA,OAAO,EAAE,CAAC;AACnHjC,MAAAA,IAAI,EAAE5D,KAD6G;AAEnHgE,MAAAA,IAAI,EAAE,CAAC,oBAAD;AAF6G,KAAD,CAAX;AAGvGiC,IAAAA,OAAO,EAAE,CAAC;AACVrC,MAAAA,IAAI,EAAE5D,KADI;AAEVgE,MAAAA,IAAI,EAAE,CAAC,oBAAD;AAFI,KAAD,CAH8F;AAMvG2E,IAAAA,OAAO,EAAE,CAAC;AACV/E,MAAAA,IAAI,EAAE5D,KADI;AAEVgE,MAAAA,IAAI,EAAE,CAAC,qBAAD;AAFI,KAAD;AAN8F,GAbjD,CAAnD;AAsBC,CAtBhB;AAwBA;AACA;AACA;AACA;;;IACM8E,e;;;;AAENA,eAAe,CAAC5F,IAAhB,GAAuB,SAAS6F,uBAAT,CAAiC3F,CAAjC,EAAoC;AAAE,SAAO,KAAKA,CAAC,IAAI0F,eAAV,GAAP;AAAsC,CAAnG;;AACAA,eAAe,CAACE,IAAhB,GAAuB,aAActI,MAAM,CAACuI,gBAAP,CAAwB;AAAErF,EAAAA,IAAI,EAAEkF;AAAR,CAAxB,CAArC;AACAA,eAAe,CAACI,IAAhB,GAAuB,aAAcxI,MAAM,CAACyI,gBAAP,CAAwB;AAAEC,EAAAA,OAAO,EAAE,CAAC,CAAC3J,cAAD,CAAD;AAAX,CAAxB,CAArC;;AACA,CAAC,YAAY;AAAE,GAAC,OAAOqE,SAAP,KAAqB,WAArB,IAAoCA,SAArC,KAAmDpD,MAAM,CAACqD,iBAAP,CAAyB+E,eAAzB,EAA0C,CAAC;AACrGlF,IAAAA,IAAI,EAAE3D,QAD+F;AAErG+D,IAAAA,IAAI,EAAE,CAAC;AACCqF,MAAAA,YAAY,EAAE,CAACpF,WAAD,EAAce,mBAAd,CADf;AAECoE,MAAAA,OAAO,EAAE,CAAC3J,cAAD,CAFV;AAGC6J,MAAAA,OAAO,EAAE,CAACrF,WAAD,EAAce,mBAAd;AAHV,KAAD;AAF+F,GAAD,CAA1C,EAO1D,IAP0D,EAOpD,IAPoD,CAAnD;AAOO,CAPtB;;AAQA,CAAC,YAAY;AAAE,GAAC,OAAOuE,SAAP,KAAqB,WAArB,IAAoCA,SAArC,KAAmD7I,MAAM,CAAC8I,kBAAP,CAA0BV,eAA1B,EAA2C;AAAEO,IAAAA,YAAY,EAAE,wBAAY;AAAE,aAAO,CAACpF,WAAD,EAAce,mBAAd,CAAP;AAA4C,KAA1E;AAA4EoE,IAAAA,OAAO,EAAE,mBAAY;AAAE,aAAO,CAAC3J,cAAD,CAAP;AAA0B,KAA7H;AAA+H6J,IAAAA,OAAO,EAAE,mBAAY;AAAE,aAAO,CAACrF,WAAD,EAAce,mBAAd,CAAP;AAA4C;AAAlM,GAA3C,CAAnD;AAAsS,CAArT;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;;AAEA,SAASlE,eAAT,EAA0BmD,WAA1B,EAAuCe,mBAAvC,EAA4D8D,eAA5D,G,CAEA","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Platform, normalizePassiveListenerOptions, PlatformModule } from '@angular/cdk/platform';\nimport { Directive, ElementRef, EventEmitter, Injectable, NgZone, Output, Input, NgModule, defineInjectable, inject } from '@angular/core';\nimport { EMPTY, Subject, fromEvent } from 'rxjs';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { auditTime, takeUntil } from 'rxjs/operators';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/** *\n * Options to pass to the animationstart listener.\n  @type {?} */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/platform';\nconst listenerOptions = normalizePassiveListenerOptions({ passive: true });\n/**\n * An injectable service that can be used to monitor the autofill state of an input.\n * Based on the following blog post:\n * https://medium.com/\\@brunn/detecting-autofilled-fields-in-javascript-aed598d25da7\n */\nclass AutofillMonitor {\n    /**\n     * @param {?} _platform\n     * @param {?} _ngZone\n     */\n    constructor(_platform, _ngZone) {\n        this._platform = _platform;\n        this._ngZone = _ngZone;\n        this._monitoredElements = new Map();\n    }\n    /**\n     * @param {?} elementOrRef\n     * @return {?}\n     */\n    monitor(elementOrRef) {\n        if (!this._platform.isBrowser) {\n            return EMPTY;\n        }\n        /** @type {?} */\n        const element = elementOrRef instanceof ElementRef ? elementOrRef.nativeElement : elementOrRef;\n        /** @type {?} */\n        const info = this._monitoredElements.get(element);\n        if (info) {\n            return info.subject.asObservable();\n        }\n        /** @type {?} */\n        const result = new Subject();\n        /** @type {?} */\n        const cssClass = 'cdk-text-field-autofilled';\n        /** @type {?} */\n        const listener = /** @type {?} */ (((event) => {\n            // Animation events fire on initial element render, we check for the presence of the autofill\n            // CSS class to make sure this is a real change in state, not just the initial render before\n            // we fire off events.\n            if (event.animationName === 'cdk-text-field-autofill-start' &&\n                !element.classList.contains(cssClass)) {\n                element.classList.add(cssClass);\n                this._ngZone.run(() => result.next({ target: /** @type {?} */ (event.target), isAutofilled: true }));\n            }\n            else if (event.animationName === 'cdk-text-field-autofill-end' &&\n                element.classList.contains(cssClass)) {\n                element.classList.remove(cssClass);\n                this._ngZone.run(() => result.next({ target: /** @type {?} */ (event.target), isAutofilled: false }));\n            }\n        }));\n        this._ngZone.runOutsideAngular(() => {\n            element.addEventListener('animationstart', listener, listenerOptions);\n            element.classList.add('cdk-text-field-autofill-monitored');\n        });\n        this._monitoredElements.set(element, {\n            subject: result,\n            unlisten: () => {\n                element.removeEventListener('animationstart', listener, listenerOptions);\n            }\n        });\n        return result.asObservable();\n    }\n    /**\n     * @param {?} elementOrRef\n     * @return {?}\n     */\n    stopMonitoring(elementOrRef) {\n        /** @type {?} */\n        const element = elementOrRef instanceof ElementRef ? elementOrRef.nativeElement : elementOrRef;\n        /** @type {?} */\n        const info = this._monitoredElements.get(element);\n        if (info) {\n            info.unlisten();\n            info.subject.complete();\n            element.classList.remove('cdk-text-field-autofill-monitored');\n            element.classList.remove('cdk-text-field-autofilled');\n            this._monitoredElements.delete(element);\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this._monitoredElements.forEach((_info, element) => this.stopMonitoring(element));\n    }\n}\nAutofillMonitor.ɵfac = function AutofillMonitor_Factory(t) { return new (t || AutofillMonitor)(ɵngcc0.ɵɵinject(ɵngcc1.Platform), ɵngcc0.ɵɵinject(ɵngcc0.NgZone)); };\nAutofillMonitor.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: AutofillMonitor, factory: AutofillMonitor.ɵfac, providedIn: 'root' });\n/** @nocollapse */\nAutofillMonitor.ctorParameters = () => [\n    { type: Platform },\n    { type: NgZone }\n];\n/** @nocollapse */ AutofillMonitor.ngInjectableDef = defineInjectable({ factory: function AutofillMonitor_Factory() { return new AutofillMonitor(inject(Platform), inject(NgZone)); }, token: AutofillMonitor, providedIn: \"root\" });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(AutofillMonitor, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return [{ type: ɵngcc1.Platform }, { type: ɵngcc0.NgZone }]; }, null); })();\n/**\n * A directive that can be used to monitor the autofill state of an input.\n */\nclass CdkAutofill {\n    /**\n     * @param {?} _elementRef\n     * @param {?} _autofillMonitor\n     */\n    constructor(_elementRef, _autofillMonitor) {\n        this._elementRef = _elementRef;\n        this._autofillMonitor = _autofillMonitor;\n        /**\n         * Emits when the autofill state of the element changes.\n         */\n        this.cdkAutofill = new EventEmitter();\n    }\n    /**\n     * @return {?}\n     */\n    ngOnInit() {\n        this._autofillMonitor\n            .monitor(this._elementRef)\n            .subscribe(event => this.cdkAutofill.emit(event));\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this._autofillMonitor.stopMonitoring(this._elementRef);\n    }\n}\nCdkAutofill.ɵfac = function CdkAutofill_Factory(t) { return new (t || CdkAutofill)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(AutofillMonitor)); };\nCdkAutofill.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: CdkAutofill, selectors: [[\"\", \"cdkAutofill\", \"\"]], outputs: { cdkAutofill: \"cdkAutofill\" } });\n/** @nocollapse */\nCdkAutofill.ctorParameters = () => [\n    { type: ElementRef },\n    { type: AutofillMonitor }\n];\nCdkAutofill.propDecorators = {\n    cdkAutofill: [{ type: Output }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkAutofill, [{\n        type: Directive,\n        args: [{\n                selector: '[cdkAutofill]'\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: AutofillMonitor }]; }, { cdkAutofill: [{\n            type: Output\n        }] }); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * Directive to automatically resize a textarea to fit its content.\n */\nclass CdkTextareaAutosize {\n    /**\n     * @param {?} _elementRef\n     * @param {?} _platform\n     * @param {?} _ngZone\n     */\n    constructor(_elementRef, _platform, _ngZone) {\n        this._elementRef = _elementRef;\n        this._platform = _platform;\n        this._ngZone = _ngZone;\n        this._destroyed = new Subject();\n        this._enabled = true;\n        /**\n         * Value of minRows as of last resize. If the minRows has decreased, the\n         * height of the textarea needs to be recomputed to reflect the new minimum. The maxHeight\n         * does not have the same problem because it does not affect the textarea's scrollHeight.\n         */\n        this._previousMinRows = -1;\n        this._textareaElement = /** @type {?} */ (this._elementRef.nativeElement);\n    }\n    /**\n     * Minimum amount of rows in the textarea.\n     * @return {?}\n     */\n    get minRows() { return this._minRows; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set minRows(value) {\n        this._minRows = value;\n        this._setMinHeight();\n    }\n    /**\n     * Maximum amount of rows in the textarea.\n     * @return {?}\n     */\n    get maxRows() { return this._maxRows; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set maxRows(value) {\n        this._maxRows = value;\n        this._setMaxHeight();\n    }\n    /**\n     * Whether autosizing is enabled or not\n     * @return {?}\n     */\n    get enabled() { return this._enabled; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set enabled(value) {\n        value = coerceBooleanProperty(value);\n        // Only act if the actual value changed. This specifically helps to not run\n        // resizeToFitContent too early (i.e. before ngAfterViewInit)\n        if (this._enabled !== value) {\n            (this._enabled = value) ? this.resizeToFitContent(true) : this.reset();\n        }\n    }\n    /**\n     * Sets the minimum height of the textarea as determined by minRows.\n     * @return {?}\n     */\n    _setMinHeight() {\n        /** @type {?} */\n        const minHeight = this.minRows && this._cachedLineHeight ?\n            `${this.minRows * this._cachedLineHeight}px` : null;\n        if (minHeight) {\n            this._textareaElement.style.minHeight = minHeight;\n        }\n    }\n    /**\n     * Sets the maximum height of the textarea as determined by maxRows.\n     * @return {?}\n     */\n    _setMaxHeight() {\n        /** @type {?} */\n        const maxHeight = this.maxRows && this._cachedLineHeight ?\n            `${this.maxRows * this._cachedLineHeight}px` : null;\n        if (maxHeight) {\n            this._textareaElement.style.maxHeight = maxHeight;\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngAfterViewInit() {\n        if (this._platform.isBrowser) {\n            // Remember the height which we started with in case autosizing is disabled\n            this._initialHeight = this._textareaElement.style.height;\n            this.resizeToFitContent();\n            this._ngZone.runOutsideAngular(() => {\n                fromEvent(window, 'resize')\n                    .pipe(auditTime(16), takeUntil(this._destroyed))\n                    .subscribe(() => this.resizeToFitContent(true));\n            });\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this._destroyed.next();\n        this._destroyed.complete();\n    }\n    /**\n     * Cache the height of a single-row textarea if it has not already been cached.\n     *\n     * We need to know how large a single \"row\" of a textarea is in order to apply minRows and\n     * maxRows. For the initial version, we will assume that the height of a single line in the\n     * textarea does not ever change.\n     * @return {?}\n     */\n    _cacheTextareaLineHeight() {\n        if (this._cachedLineHeight) {\n            return;\n        }\n        /** @type {?} */\n        let textareaClone = /** @type {?} */ (this._textareaElement.cloneNode(false));\n        textareaClone.rows = 1;\n        // Use `position: absolute` so that this doesn't cause a browser layout and use\n        // `visibility: hidden` so that nothing is rendered. Clear any other styles that\n        // would affect the height.\n        textareaClone.style.position = 'absolute';\n        textareaClone.style.visibility = 'hidden';\n        textareaClone.style.border = 'none';\n        textareaClone.style.padding = '0';\n        textareaClone.style.height = '';\n        textareaClone.style.minHeight = '';\n        textareaClone.style.maxHeight = '';\n        // In Firefox it happens that textarea elements are always bigger than the specified amount\n        // of rows. This is because Firefox tries to add extra space for the horizontal scrollbar.\n        // As a workaround that removes the extra space for the scrollbar, we can just set overflow\n        // to hidden. This ensures that there is no invalid calculation of the line height.\n        // See Firefox bug report: https://bugzilla.mozilla.org/show_bug.cgi?id=33654\n        textareaClone.style.overflow = 'hidden'; /** @type {?} */\n        ((this._textareaElement.parentNode)).appendChild(textareaClone);\n        this._cachedLineHeight = textareaClone.clientHeight; /** @type {?} */\n        ((this._textareaElement.parentNode)).removeChild(textareaClone);\n        // Min and max heights have to be re-calculated if the cached line height changes\n        this._setMinHeight();\n        this._setMaxHeight();\n    }\n    /**\n     * @return {?}\n     */\n    ngDoCheck() {\n        if (this._platform.isBrowser) {\n            this.resizeToFitContent();\n        }\n    }\n    /**\n     * Resize the textarea to fit its content.\n     * @param {?=} force Whether to force a height recalculation. By default the height will be\n     *    recalculated only if the value changed since the last call.\n     * @return {?}\n     */\n    resizeToFitContent(force = false) {\n        // If autosizing is disabled, just skip everything else\n        if (!this._enabled) {\n            return;\n        }\n        this._cacheTextareaLineHeight();\n        // If we haven't determined the line-height yet, we know we're still hidden and there's no point\n        // in checking the height of the textarea.\n        if (!this._cachedLineHeight) {\n            return;\n        }\n        /** @type {?} */\n        const textarea = /** @type {?} */ (this._elementRef.nativeElement);\n        /** @type {?} */\n        const value = textarea.value;\n        // Only resize if the value or minRows have changed since these calculations can be expensive.\n        if (!force && this._minRows === this._previousMinRows && value === this._previousValue) {\n            return;\n        }\n        /** @type {?} */\n        const placeholderText = textarea.placeholder;\n        // Reset the textarea height to auto in order to shrink back to its default size.\n        // Also temporarily force overflow:hidden, so scroll bars do not interfere with calculations.\n        // Long placeholders that are wider than the textarea width may lead to a bigger scrollHeight\n        // value. To ensure that the scrollHeight is not bigger than the content, the placeholders\n        // need to be removed temporarily.\n        textarea.classList.add('cdk-textarea-autosize-measuring');\n        textarea.placeholder = '';\n        /** @type {?} */\n        const height = textarea.scrollHeight - 4;\n        // Use the scrollHeight to know how large the textarea *would* be if fit its entire value.\n        textarea.style.height = `${height}px`;\n        textarea.classList.remove('cdk-textarea-autosize-measuring');\n        textarea.placeholder = placeholderText;\n        // On Firefox resizing the textarea will prevent it from scrolling to the caret position.\n        // We need to re-set the selection in order for it to scroll to the proper position.\n        if (typeof requestAnimationFrame !== 'undefined') {\n            this._ngZone.runOutsideAngular(() => requestAnimationFrame(() => {\n                const { selectionStart, selectionEnd } = textarea;\n                // IE will throw an \"Unspecified error\" if we try to set the selection range after the\n                // element has been removed from the DOM. Assert that the directive hasn't been destroyed\n                // between the time we requested the animation frame and when it was executed.\n                // Also note that we have to assert that the textarea is focused before we set the\n                // selection range. Setting the selection range on a non-focused textarea will cause\n                // it to receive focus on IE and Edge.\n                if (!this._destroyed.isStopped && document.activeElement === textarea) {\n                    textarea.setSelectionRange(selectionStart, selectionEnd);\n                }\n            }));\n        }\n        this._previousValue = value;\n        this._previousMinRows = this._minRows;\n    }\n    /**\n     * Resets the textarea to it's original size\n     * @return {?}\n     */\n    reset() {\n        // Do not try to change the textarea, if the initialHeight has not been determined yet\n        // This might potentially remove styles when reset() is called before ngAfterViewInit\n        if (this._initialHeight === undefined) {\n            return;\n        }\n        this._textareaElement.style.height = this._initialHeight;\n    }\n    /**\n     * @return {?}\n     */\n    _noopInputHandler() {\n        // no-op handler that ensures we're running change detection on input events.\n    }\n}\nCdkTextareaAutosize.ɵfac = function CdkTextareaAutosize_Factory(t) { return new (t || CdkTextareaAutosize)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.Platform), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone)); };\nCdkTextareaAutosize.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: CdkTextareaAutosize, selectors: [[\"textarea\", \"cdkTextareaAutosize\", \"\"]], hostAttrs: [\"rows\", \"1\", 1, \"cdk-textarea-autosize\"], hostBindings: function CdkTextareaAutosize_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"input\", function CdkTextareaAutosize_input_HostBindingHandler() { return ctx._noopInputHandler(); });\n    } }, inputs: { minRows: [\"cdkAutosizeMinRows\", \"minRows\"], maxRows: [\"cdkAutosizeMaxRows\", \"maxRows\"], enabled: [\"cdkTextareaAutosize\", \"enabled\"] }, exportAs: [\"cdkTextareaAutosize\"] });\n/** @nocollapse */\nCdkTextareaAutosize.ctorParameters = () => [\n    { type: ElementRef },\n    { type: Platform },\n    { type: NgZone }\n];\nCdkTextareaAutosize.propDecorators = {\n    minRows: [{ type: Input, args: ['cdkAutosizeMinRows',] }],\n    maxRows: [{ type: Input, args: ['cdkAutosizeMaxRows',] }],\n    enabled: [{ type: Input, args: ['cdkTextareaAutosize',] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkTextareaAutosize, [{\n        type: Directive,\n        args: [{\n                selector: 'textarea[cdkTextareaAutosize]',\n                exportAs: 'cdkTextareaAutosize',\n                host: {\n                    'class': 'cdk-textarea-autosize',\n                    // Textarea elements that have the directive applied should have a single row by default.\n                    // Browsers normally show two rows by default and therefore this limits the minRows binding.\n                    'rows': '1',\n                    '(input)': '_noopInputHandler()'\n                }\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc1.Platform }, { type: ɵngcc0.NgZone }]; }, { minRows: [{\n            type: Input,\n            args: ['cdkAutosizeMinRows']\n        }], maxRows: [{\n            type: Input,\n            args: ['cdkAutosizeMaxRows']\n        }], enabled: [{\n            type: Input,\n            args: ['cdkTextareaAutosize']\n        }] }); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\nclass TextFieldModule {\n}\nTextFieldModule.ɵfac = function TextFieldModule_Factory(t) { return new (t || TextFieldModule)(); };\nTextFieldModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: TextFieldModule });\nTextFieldModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ imports: [[PlatformModule]] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(TextFieldModule, [{\n        type: NgModule,\n        args: [{\n                declarations: [CdkAutofill, CdkTextareaAutosize],\n                imports: [PlatformModule],\n                exports: [CdkAutofill, CdkTextareaAutosize]\n            }]\n    }], null, null); })();\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(TextFieldModule, { declarations: function () { return [CdkAutofill, CdkTextareaAutosize]; }, imports: function () { return [PlatformModule]; }, exports: function () { return [CdkAutofill, CdkTextareaAutosize]; } }); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\nexport { AutofillMonitor, CdkAutofill, CdkTextareaAutosize, TextFieldModule };\n\n//# sourceMappingURL=text-field.js.map"]},"metadata":{},"sourceType":"module"}