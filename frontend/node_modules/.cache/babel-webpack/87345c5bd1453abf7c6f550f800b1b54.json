{"ast":null,"code":"import _createClass from \"/Users/adepertat/Dropbox/ECOLES/Openclassroom/P6_de_Pertat_Antoine/AntoinedePertat_6_240521/frontend/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/Users/adepertat/Dropbox/ECOLES/Openclassroom/P6_de_Pertat_Antoine/AntoinedePertat_6_240521/frontend/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/adepertat/Dropbox/ECOLES/Openclassroom/P6_de_Pertat_Antoine/AntoinedePertat_6_240521/frontend/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _classCallCheck from \"/Users/adepertat/Dropbox/ECOLES/Openclassroom/P6_de_Pertat_Antoine/AntoinedePertat_6_240521/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { animate, state, style, transition, trigger } from '@angular/animations';\nimport { Component, ElementRef, EventEmitter, Inject, Optional, ChangeDetectorRef, ViewChild, ViewEncapsulation, ChangeDetectionStrategy, Injectable, InjectionToken, Injector, SkipSelf, TemplateRef, Directive, Input, NgModule } from '@angular/core';\nimport { DOCUMENT, Location, CommonModule } from '@angular/common';\nimport { BasePortalOutlet, CdkPortalOutlet, ComponentPortal, PortalInjector, TemplatePortal, PortalModule } from '@angular/cdk/portal';\nimport { FocusTrapFactory } from '@angular/cdk/a11y';\nimport { ESCAPE } from '@angular/cdk/keycodes';\nimport { Subject, defer, of } from 'rxjs';\nimport { filter, take, startWith } from 'rxjs/operators';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { Overlay, OverlayConfig, OverlayContainer, OverlayModule } from '@angular/cdk/overlay';\nimport { MatCommonModule } from '@angular/material/core';\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * Configuration for opening a modal dialog with the MatDialog service.\n * @template D\n */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/a11y';\nimport * as ɵngcc2 from '@angular/cdk/portal';\nimport * as ɵngcc3 from '@angular/cdk/overlay';\nimport * as ɵngcc4 from '@angular/common';\n\nfunction MatDialogContainer_ng_template_0_Template(rf, ctx) {}\n\nvar MatDialogConfig = function MatDialogConfig() {\n  _classCallCheck(this, MatDialogConfig);\n\n  /**\n   * The ARIA role of the dialog element.\n   */\n  this.role = 'dialog';\n  /**\n   * Custom class for the overlay pane.\n   */\n\n  this.panelClass = '';\n  /**\n   * Whether the dialog has a backdrop.\n   */\n\n  this.hasBackdrop = true;\n  /**\n   * Custom class for the backdrop,\n   */\n\n  this.backdropClass = '';\n  /**\n   * Whether the user can use escape or clicking on the backdrop to close the modal.\n   */\n\n  this.disableClose = false;\n  /**\n   * Width of the dialog.\n   */\n\n  this.width = '';\n  /**\n   * Height of the dialog.\n   */\n\n  this.height = '';\n  /**\n   * Max-width of the dialog. If a number is provided, pixel units are assumed. Defaults to 80vw\n   */\n\n  this.maxWidth = '80vw';\n  /**\n   * Data being injected into the child component.\n   */\n\n  this.data = null;\n  /**\n   * ID of the element that describes the dialog.\n   */\n\n  this.ariaDescribedBy = null;\n  /**\n   * Aria label to assign to the dialog element\n   */\n\n  this.ariaLabel = null;\n  /**\n   * Whether the dialog should focus the first focusable element on open.\n   */\n\n  this.autoFocus = true;\n  /**\n   * Whether the dialog should restore focus to the\n   * previously-focused element, after it's closed.\n   */\n\n  this.restoreFocus = true;\n  /**\n   * Whether the dialog should close when the user goes backwards/forwards in history.\n   * Note that this usually doesn't include clicking on links (unless the user is using\n   * the `HashLocationStrategy`).\n   */\n\n  this.closeOnNavigation = true;\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/** @type {?} */\n\n\nvar animationBody = [// Note: The `enter` animation transitions to `transform: none`, because for some reason\n// specifying the transform explicitly, causes IE both to blur the dialog content and\n// decimate the animation performance. Leaving it as `none` solves both issues.\n\n/*@__PURE__*/\nstate('void, exit', /*@__PURE__*/style({\n  opacity: 0,\n  transform: 'scale(0.7)'\n})), /*@__PURE__*/state('enter', /*@__PURE__*/style({\n  transform: 'none'\n})), /*@__PURE__*/transition('* => enter', /*@__PURE__*/animate('150ms cubic-bezier(0, 0, 0.2, 1)', /*@__PURE__*/style({\n  transform: 'none',\n  opacity: 1\n}))), /*@__PURE__*/transition('* => void, * => exit', /*@__PURE__*/animate('75ms cubic-bezier(0.4, 0.0, 0.2, 1)', /*@__PURE__*/style({\n  opacity: 0\n})))];\n/** *\n * Animations used by MatDialog.\n * \\@docs-private\n  @type {?} */\n\nvar matDialogAnimations = {\n  /** Animation that is applied on the dialog container by defalt. */\n  dialogContainer: /*@__PURE__*/trigger('dialogContainer', animationBody),\n\n  /** @deprecated @breaking-change 8.0.0 Use `matDialogAnimations.dialogContainer` instead. */\n  slideDialog: /*@__PURE__*/trigger('slideDialog', animationBody)\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * Throws an exception for the case when a ComponentPortal is\n * attached to a DomPortalOutlet without an origin.\n * \\@docs-private\n * @return {?}\n */\n\nfunction throwMatDialogContentAlreadyAttachedError() {\n  throw Error('Attempting to attach dialog content after content is already attached');\n}\n\nvar MatDialogContainer = /*@__PURE__*/function () {\n  var MatDialogContainer = /*#__PURE__*/function (_BasePortalOutlet) {\n    _inherits(MatDialogContainer, _BasePortalOutlet);\n\n    var _super = _createSuper(MatDialogContainer);\n\n    /**\n     * @param {?} _elementRef\n     * @param {?} _focusTrapFactory\n     * @param {?} _changeDetectorRef\n     * @param {?} _document\n     * @param {?} _config\n     */\n    function MatDialogContainer(_elementRef, _focusTrapFactory, _changeDetectorRef, _document, _config) {\n      var _this;\n\n      _classCallCheck(this, MatDialogContainer);\n\n      _this = _super.call(this);\n      _this._elementRef = _elementRef;\n      _this._focusTrapFactory = _focusTrapFactory;\n      _this._changeDetectorRef = _changeDetectorRef;\n      _this._document = _document;\n      _this._config = _config;\n      /**\n       * Element that was focused before the dialog was opened. Save this to restore upon close.\n       */\n\n      _this._elementFocusedBeforeDialogWasOpened = null;\n      /**\n       * State of the dialog animation.\n       */\n\n      _this._state = 'enter';\n      /**\n       * Emits when an animation state changes.\n       */\n\n      _this._animationStateChanged = new EventEmitter();\n      /**\n       * ID of the element that should be considered as the dialog's label.\n       */\n\n      _this._ariaLabelledBy = null;\n      return _this;\n    }\n    /**\n     * Attach a ComponentPortal as content to this dialog container.\n     * @template T\n     * @param {?} portal Portal to be attached as the dialog content.\n     * @return {?}\n     */\n\n\n    _createClass(MatDialogContainer, [{\n      key: \"attachComponentPortal\",\n      value: function attachComponentPortal(portal) {\n        if (this._portalOutlet.hasAttached()) {\n          throwMatDialogContentAlreadyAttachedError();\n        }\n\n        this._savePreviouslyFocusedElement();\n\n        return this._portalOutlet.attachComponentPortal(portal);\n      }\n      /**\n       * Attach a TemplatePortal as content to this dialog container.\n       * @template C\n       * @param {?} portal Portal to be attached as the dialog content.\n       * @return {?}\n       */\n\n    }, {\n      key: \"attachTemplatePortal\",\n      value: function attachTemplatePortal(portal) {\n        if (this._portalOutlet.hasAttached()) {\n          throwMatDialogContentAlreadyAttachedError();\n        }\n\n        this._savePreviouslyFocusedElement();\n\n        return this._portalOutlet.attachTemplatePortal(portal);\n      }\n      /**\n       * Moves the focus inside the focus trap.\n       * @return {?}\n       */\n\n    }, {\n      key: \"_trapFocus\",\n      value: function _trapFocus() {\n        if (!this._focusTrap) {\n          this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n        } // If were to attempt to focus immediately, then the content of the dialog would not yet be\n        // ready in instances where change detection has to run first. To deal with this, we simply\n        // wait for the microtask queue to be empty.\n\n\n        if (this._config.autoFocus) {\n          this._focusTrap.focusInitialElementWhenReady();\n        }\n      }\n      /**\n       * Restores focus to the element that was focused before the dialog opened.\n       * @return {?}\n       */\n\n    }, {\n      key: \"_restoreFocus\",\n      value: function _restoreFocus() {\n        /** @type {?} */\n        var toFocus = this._elementFocusedBeforeDialogWasOpened; // We need the extra check, because IE can set the `activeElement` to null in some cases.\n\n        if (this._config.restoreFocus && toFocus && typeof toFocus.focus === 'function') {\n          toFocus.focus();\n        }\n\n        if (this._focusTrap) {\n          this._focusTrap.destroy();\n        }\n      }\n      /**\n       * Saves a reference to the element that was focused before the dialog was opened.\n       * @return {?}\n       */\n\n    }, {\n      key: \"_savePreviouslyFocusedElement\",\n      value: function _savePreviouslyFocusedElement() {\n        var _this2 = this;\n\n        if (this._document) {\n          this._elementFocusedBeforeDialogWasOpened =\n          /** @type {?} */\n          this._document.activeElement; // Note that there is no focus method when rendering on the server.\n\n          if (this._elementRef.nativeElement.focus) {\n            // Move focus onto the dialog immediately in order to prevent the user from accidentally\n            // opening multiple dialogs at the same time. Needs to be async, because the element\n            // may not be focusable immediately.\n            Promise.resolve().then(function () {\n              return _this2._elementRef.nativeElement.focus();\n            });\n          }\n        }\n      }\n      /**\n       * Callback, invoked whenever an animation on the host completes.\n       * @param {?} event\n       * @return {?}\n       */\n\n    }, {\n      key: \"_onAnimationDone\",\n      value: function _onAnimationDone(event) {\n        if (event.toState === 'enter') {\n          this._trapFocus();\n        } else if (event.toState === 'exit') {\n          this._restoreFocus();\n        }\n\n        this._animationStateChanged.emit(event);\n      }\n      /**\n       * Callback, invoked when an animation on the host starts.\n       * @param {?} event\n       * @return {?}\n       */\n\n    }, {\n      key: \"_onAnimationStart\",\n      value: function _onAnimationStart(event) {\n        this._animationStateChanged.emit(event);\n      }\n      /**\n       * Starts the dialog exit animation.\n       * @return {?}\n       */\n\n    }, {\n      key: \"_startExitAnimation\",\n      value: function _startExitAnimation() {\n        this._state = 'exit'; // Mark the container for check so it can react if the\n        // view container is using OnPush change detection.\n\n        this._changeDetectorRef.markForCheck();\n      }\n    }]);\n\n    return MatDialogContainer;\n  }(BasePortalOutlet);\n\n  MatDialogContainer.ɵfac = function MatDialogContainer_Factory(t) {\n    return new (t || MatDialogContainer)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.FocusTrapFactory), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(DOCUMENT, 8), ɵngcc0.ɵɵdirectiveInject(MatDialogConfig));\n  };\n\n  MatDialogContainer.ɵcmp =\n  /*@__PURE__*/\n\n  /*@__PURE__*/\n  ɵngcc0.ɵɵdefineComponent({\n    type: MatDialogContainer,\n    selectors: [[\"mat-dialog-container\"]],\n    viewQuery: function MatDialogContainer_Query(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(CdkPortalOutlet, 5);\n      }\n\n      if (rf & 2) {\n        var _t;\n\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._portalOutlet = _t.first);\n      }\n    },\n    hostAttrs: [\"tabindex\", \"-1\", \"aria-modal\", \"true\", 1, \"mat-dialog-container\"],\n    hostVars: 6,\n    hostBindings: function MatDialogContainer_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵsyntheticHostListener(\"@dialogContainer.start\", function MatDialogContainer_animation_dialogContainer_start_HostBindingHandler($event) {\n          return ctx._onAnimationStart($event);\n        })(\"@dialogContainer.done\", function MatDialogContainer_animation_dialogContainer_done_HostBindingHandler($event) {\n          return ctx._onAnimationDone($event);\n        });\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"id\", ctx._id)(\"role\", ctx._config.role)(\"aria-labelledby\", ctx._config.ariaLabel ? null : ctx._ariaLabelledBy)(\"aria-label\", ctx._config.ariaLabel)(\"aria-describedby\", ctx._config.ariaDescribedBy || null);\n        ɵngcc0.ɵɵsyntheticHostProperty(\"@dialogContainer\", ctx._state);\n      }\n    },\n    features: [ɵngcc0.ɵɵInheritDefinitionFeature],\n    decls: 1,\n    vars: 0,\n    consts: [[\"cdkPortalOutlet\", \"\"]],\n    template: function MatDialogContainer_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵtemplate(0, MatDialogContainer_ng_template_0_Template, 0, 0, \"ng-template\", 0);\n      }\n    },\n    directives: [ɵngcc2.CdkPortalOutlet],\n    styles: [\".mat-dialog-container{display:block;padding:24px;border-radius:4px;box-sizing:border-box;overflow:auto;outline:0;width:100%;height:100%;min-height:inherit;max-height:inherit}@media screen and (-ms-high-contrast:active){.mat-dialog-container{outline:solid 1px}}.mat-dialog-content{display:block;margin:0 -24px;padding:0 24px;max-height:65vh;overflow:auto;-webkit-overflow-scrolling:touch}.mat-dialog-title{margin:0 0 20px;display:block}.mat-dialog-actions{padding:8px 0;display:flex;flex-wrap:wrap;min-height:52px;align-items:center;margin-bottom:-24px}.mat-dialog-actions[align=end]{justify-content:flex-end}.mat-dialog-actions[align=center]{justify-content:center}.mat-dialog-actions .mat-button+.mat-button,.mat-dialog-actions .mat-button+.mat-raised-button,.mat-dialog-actions .mat-raised-button+.mat-button,.mat-dialog-actions .mat-raised-button+.mat-raised-button{margin-left:8px}[dir=rtl] .mat-dialog-actions .mat-button+.mat-button,[dir=rtl] .mat-dialog-actions .mat-button+.mat-raised-button,[dir=rtl] .mat-dialog-actions .mat-raised-button+.mat-button,[dir=rtl] .mat-dialog-actions .mat-raised-button+.mat-raised-button{margin-left:0;margin-right:8px}\"],\n    encapsulation: 2,\n    data: {\n      animation: [matDialogAnimations.dialogContainer]\n    }\n  });\n  return MatDialogContainer;\n}();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/** @type {?} */\n\n\nvar uniqueId = 0;\n/**\n * Reference to a dialog opened via the MatDialog service.\n * @template T, R\n */\n\nvar MatDialogRef = /*#__PURE__*/function () {\n  /**\n   * @param {?} _overlayRef\n   * @param {?} _containerInstance\n   * @param {?=} _location\n   * @param {?=} id\n   */\n  function MatDialogRef(_overlayRef, _containerInstance, // @breaking-change 8.0.0 `_location` parameter to be removed.\n  _location) {\n    var _this3 = this;\n\n    var id = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : \"mat-dialog-\".concat(uniqueId++);\n\n    _classCallCheck(this, MatDialogRef);\n\n    this._overlayRef = _overlayRef;\n    this._containerInstance = _containerInstance;\n    this.id = id;\n    /**\n     * Whether the user is allowed to close the dialog.\n     */\n\n    this.disableClose = this._containerInstance._config.disableClose;\n    /**\n     * Subject for notifying the user that the dialog has finished opening.\n     */\n\n    this._afterOpened = new Subject();\n    /**\n     * Subject for notifying the user that the dialog has finished closing.\n     */\n\n    this._afterClosed = new Subject();\n    /**\n     * Subject for notifying the user that the dialog has started closing.\n     */\n\n    this._beforeClosed = new Subject(); // Pass the id along to the container.\n\n    _containerInstance._id = id; // Emit when opening animation completes\n\n    _containerInstance._animationStateChanged.pipe(filter(function (event) {\n      return event.phaseName === 'done' && event.toState === 'enter';\n    }), take(1)).subscribe(function () {\n      _this3._afterOpened.next();\n\n      _this3._afterOpened.complete();\n    }); // Dispose overlay when closing animation is complete\n\n\n    _containerInstance._animationStateChanged.pipe(filter(function (event) {\n      return event.phaseName === 'done' && event.toState === 'exit';\n    }), take(1)).subscribe(function () {\n      return _this3._overlayRef.dispose();\n    });\n\n    _overlayRef.detachments().subscribe(function () {\n      _this3._beforeClosed.next(_this3._result);\n\n      _this3._beforeClosed.complete();\n\n      _this3._afterClosed.next(_this3._result);\n\n      _this3._afterClosed.complete();\n\n      _this3.componentInstance =\n      /** @type {?} */\n      null;\n\n      _this3._overlayRef.dispose();\n    });\n\n    _overlayRef.keydownEvents().pipe(filter(function (event) {\n      return event.keyCode === ESCAPE && !_this3.disableClose;\n    })).subscribe(function () {\n      return _this3.close();\n    });\n  }\n  /**\n   * Close the dialog.\n   * @param {?=} dialogResult Optional result to return to the dialog opener.\n   * @return {?}\n   */\n\n\n  _createClass(MatDialogRef, [{\n    key: \"close\",\n    value: function close(dialogResult) {\n      var _this4 = this;\n\n      this._result = dialogResult; // Transition the backdrop in parallel to the dialog.\n\n      this._containerInstance._animationStateChanged.pipe(filter(function (event) {\n        return event.phaseName === 'start';\n      }), take(1)).subscribe(function () {\n        _this4._beforeClosed.next(dialogResult);\n\n        _this4._beforeClosed.complete();\n\n        _this4._overlayRef.detachBackdrop();\n      });\n\n      this._containerInstance._startExitAnimation();\n    }\n    /**\n     * Gets an observable that is notified when the dialog is finished opening.\n     * @return {?}\n     */\n\n  }, {\n    key: \"afterOpened\",\n    value: function afterOpened() {\n      return this._afterOpened.asObservable();\n    }\n    /**\n     * Gets an observable that is notified when the dialog is finished closing.\n     * @return {?}\n     */\n\n  }, {\n    key: \"afterClosed\",\n    value: function afterClosed() {\n      return this._afterClosed.asObservable();\n    }\n    /**\n     * Gets an observable that is notified when the dialog has started closing.\n     * @return {?}\n     */\n\n  }, {\n    key: \"beforeClosed\",\n    value: function beforeClosed() {\n      return this._beforeClosed.asObservable();\n    }\n    /**\n     * Gets an observable that emits when the overlay's backdrop has been clicked.\n     * @return {?}\n     */\n\n  }, {\n    key: \"backdropClick\",\n    value: function backdropClick() {\n      return this._overlayRef.backdropClick();\n    }\n    /**\n     * Gets an observable that emits when keydown events are targeted on the overlay.\n     * @return {?}\n     */\n\n  }, {\n    key: \"keydownEvents\",\n    value: function keydownEvents() {\n      return this._overlayRef.keydownEvents();\n    }\n    /**\n     * Updates the dialog's position.\n     * @param {?=} position New dialog position.\n     * @return {?}\n     */\n\n  }, {\n    key: \"updatePosition\",\n    value: function updatePosition(position) {\n      /** @type {?} */\n      var strategy = this._getPositionStrategy();\n\n      if (position && (position.left || position.right)) {\n        position.left ? strategy.left(position.left) : strategy.right(position.right);\n      } else {\n        strategy.centerHorizontally();\n      }\n\n      if (position && (position.top || position.bottom)) {\n        position.top ? strategy.top(position.top) : strategy.bottom(position.bottom);\n      } else {\n        strategy.centerVertically();\n      }\n\n      this._overlayRef.updatePosition();\n\n      return this;\n    }\n    /**\n     * Updates the dialog's width and height.\n     * @param {?=} width New width of the dialog.\n     * @param {?=} height New height of the dialog.\n     * @return {?}\n     */\n\n  }, {\n    key: \"updateSize\",\n    value: function updateSize() {\n      var width = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n      var height = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n\n      this._getPositionStrategy().width(width).height(height);\n\n      this._overlayRef.updatePosition();\n\n      return this;\n    }\n    /**\n     * Gets an observable that is notified when the dialog is finished opening.\n     * @deprecated Use `afterOpened` instead.\n     * \\@breaking-change 8.0.0\n     * @return {?}\n     */\n\n  }, {\n    key: \"afterOpen\",\n    value: function afterOpen() {\n      return this.afterOpened();\n    }\n    /**\n     * Gets an observable that is notified when the dialog has started closing.\n     * @deprecated Use `beforeClosed` instead.\n     * \\@breaking-change 8.0.0\n     * @return {?}\n     */\n\n  }, {\n    key: \"beforeClose\",\n    value: function beforeClose() {\n      return this.beforeClosed();\n    }\n    /**\n     * Fetches the position strategy object from the overlay ref.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_getPositionStrategy\",\n    value: function _getPositionStrategy() {\n      return (\n        /** @type {?} */\n        this._overlayRef.getConfig().positionStrategy\n      );\n    }\n  }]);\n\n  return MatDialogRef;\n}();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/** *\n * Injection token that can be used to access the data that was passed in to a dialog.\n  @type {?} */\n\n\nvar MAT_DIALOG_DATA = /*@__PURE__*/new InjectionToken('MatDialogData');\n/** *\n * Injection token that can be used to specify default dialog options.\n  @type {?} */\n\nvar MAT_DIALOG_DEFAULT_OPTIONS = /*@__PURE__*/new InjectionToken('mat-dialog-default-options');\n/** *\n * Injection token that determines the scroll handling while the dialog is open.\n  @type {?} */\n\nvar MAT_DIALOG_SCROLL_STRATEGY = /*@__PURE__*/new InjectionToken('mat-dialog-scroll-strategy');\n/**\n * \\@docs-private\n * @param {?} overlay\n * @return {?}\n */\n\nfunction MAT_DIALOG_SCROLL_STRATEGY_FACTORY(overlay) {\n  return function () {\n    return overlay.scrollStrategies.block();\n  };\n}\n/**\n * \\@docs-private\n * @param {?} overlay\n * @return {?}\n */\n\n\nfunction MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay) {\n  return function () {\n    return overlay.scrollStrategies.block();\n  };\n}\n/** *\n * \\@docs-private\n  @type {?} */\n\n\nvar MAT_DIALOG_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_DIALOG_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY\n};\n\nvar MatDialog = /*@__PURE__*/function () {\n  var MatDialog = /*#__PURE__*/function () {\n    /**\n     * @param {?} _overlay\n     * @param {?} _injector\n     * @param {?} _location\n     * @param {?} _defaultOptions\n     * @param {?} scrollStrategy\n     * @param {?} _parentDialog\n     * @param {?} _overlayContainer\n     */\n    function MatDialog(_overlay, _injector, _location, _defaultOptions, scrollStrategy, _parentDialog, _overlayContainer) {\n      var _this5 = this;\n\n      _classCallCheck(this, MatDialog);\n\n      this._overlay = _overlay;\n      this._injector = _injector;\n      this._location = _location;\n      this._defaultOptions = _defaultOptions;\n      this._parentDialog = _parentDialog;\n      this._overlayContainer = _overlayContainer;\n      this._openDialogsAtThisLevel = [];\n      this._afterAllClosedAtThisLevel = new Subject();\n      this._afterOpenedAtThisLevel = new Subject();\n      this._ariaHiddenElements = new Map();\n      /**\n       * Stream that emits when all open dialog have finished closing.\n       * Will emit on subscribe if there are no open dialogs to begin with.\n       */\n\n      this.afterAllClosed = defer(function () {\n        return _this5.openDialogs.length ? _this5._afterAllClosed : _this5._afterAllClosed.pipe(startWith(undefined));\n      });\n      this._scrollStrategy = scrollStrategy;\n    }\n    /**\n     * Keeps track of the currently-open dialogs.\n     * @return {?}\n     */\n\n\n    _createClass(MatDialog, [{\n      key: \"openDialogs\",\n      get: function get() {\n        return this._parentDialog ? this._parentDialog.openDialogs : this._openDialogsAtThisLevel;\n      }\n      /**\n       * Stream that emits when a dialog has been opened.\n       * @return {?}\n       */\n\n    }, {\n      key: \"afterOpened\",\n      get: function get() {\n        return this._parentDialog ? this._parentDialog.afterOpened : this._afterOpenedAtThisLevel;\n      }\n      /**\n       * Stream that emits when a dialog has been opened.\n       * @deprecated Use `afterOpened` instead.\n       * \\@breaking-change 8.0.0\n       * @return {?}\n       */\n\n    }, {\n      key: \"afterOpen\",\n      get: function get() {\n        return this.afterOpened;\n      }\n      /**\n       * @return {?}\n       */\n\n    }, {\n      key: \"_afterAllClosed\",\n      get: function get() {\n        /** @type {?} */\n        var parent = this._parentDialog;\n        return parent ? parent._afterAllClosed : this._afterAllClosedAtThisLevel;\n      }\n      /**\n       * Opens a modal dialog containing the given component.\n       * @template T, D, R\n       * @param {?} componentOrTemplateRef Type of the component to load into the dialog,\n       *     or a TemplateRef to instantiate as the dialog content.\n       * @param {?=} config Extra configuration options.\n       * @return {?} Reference to the newly-opened dialog.\n       */\n\n    }, {\n      key: \"open\",\n      value: function open(componentOrTemplateRef, config) {\n        var _this6 = this;\n\n        config = _applyConfigDefaults(config, this._defaultOptions || new MatDialogConfig());\n\n        if (config.id && this.getDialogById(config.id)) {\n          throw Error(\"Dialog with id \\\"\".concat(config.id, \"\\\" exists already. The dialog id must be unique.\"));\n        }\n        /** @type {?} */\n\n\n        var overlayRef = this._createOverlay(config);\n        /** @type {?} */\n\n\n        var dialogContainer = this._attachDialogContainer(overlayRef, config);\n        /** @type {?} */\n\n\n        var dialogRef = this._attachDialogContent(componentOrTemplateRef, dialogContainer, overlayRef, config); // If this is the first dialog that we're opening, hide all the non-overlay content.\n\n\n        if (!this.openDialogs.length) {\n          this._hideNonDialogContentFromAssistiveTechnology();\n        }\n\n        this.openDialogs.push(dialogRef);\n        dialogRef.afterClosed().subscribe(function () {\n          return _this6._removeOpenDialog(dialogRef);\n        });\n        this.afterOpened.next(dialogRef);\n        return dialogRef;\n      }\n      /**\n       * Closes all of the currently-open dialogs.\n       * @return {?}\n       */\n\n    }, {\n      key: \"closeAll\",\n      value: function closeAll() {\n        this._closeDialogs(this.openDialogs);\n      }\n      /**\n       * Finds an open dialog by its id.\n       * @param {?} id ID to use when looking up the dialog.\n       * @return {?}\n       */\n\n    }, {\n      key: \"getDialogById\",\n      value: function getDialogById(id) {\n        return this.openDialogs.find(function (dialog) {\n          return dialog.id === id;\n        });\n      }\n      /**\n       * @return {?}\n       */\n\n    }, {\n      key: \"ngOnDestroy\",\n      value: function ngOnDestroy() {\n        // Only close the dialogs at this level on destroy\n        // since the parent service may still be active.\n        this._closeDialogs(this._openDialogsAtThisLevel);\n      }\n      /**\n       * Creates the overlay into which the dialog will be loaded.\n       * @param {?} config The dialog configuration.\n       * @return {?} A promise resolving to the OverlayRef for the created overlay.\n       */\n\n    }, {\n      key: \"_createOverlay\",\n      value: function _createOverlay(config) {\n        /** @type {?} */\n        var overlayConfig = this._getOverlayConfig(config);\n\n        return this._overlay.create(overlayConfig);\n      }\n      /**\n       * Creates an overlay config from a dialog config.\n       * @param {?} dialogConfig The dialog configuration.\n       * @return {?} The overlay configuration.\n       */\n\n    }, {\n      key: \"_getOverlayConfig\",\n      value: function _getOverlayConfig(dialogConfig) {\n        /** @type {?} */\n        var state$$1 = new OverlayConfig({\n          positionStrategy: this._overlay.position().global(),\n          scrollStrategy: dialogConfig.scrollStrategy || this._scrollStrategy(),\n          panelClass: dialogConfig.panelClass,\n          hasBackdrop: dialogConfig.hasBackdrop,\n          direction: dialogConfig.direction,\n          minWidth: dialogConfig.minWidth,\n          minHeight: dialogConfig.minHeight,\n          maxWidth: dialogConfig.maxWidth,\n          maxHeight: dialogConfig.maxHeight,\n          disposeOnNavigation: dialogConfig.closeOnNavigation\n        });\n\n        if (dialogConfig.backdropClass) {\n          state$$1.backdropClass = dialogConfig.backdropClass;\n        }\n\n        return state$$1;\n      }\n      /**\n       * Attaches an MatDialogContainer to a dialog's already-created overlay.\n       * @param {?} overlay Reference to the dialog's underlying overlay.\n       * @param {?} config The dialog configuration.\n       * @return {?} A promise resolving to a ComponentRef for the attached container.\n       */\n\n    }, {\n      key: \"_attachDialogContainer\",\n      value: function _attachDialogContainer(overlay, config) {\n        /** @type {?} */\n        var userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n        /** @type {?} */\n\n        var injector = new PortalInjector(userInjector || this._injector, new WeakMap([[MatDialogConfig, config]]));\n        /** @type {?} */\n\n        var containerPortal = new ComponentPortal(MatDialogContainer, config.viewContainerRef, injector);\n        /** @type {?} */\n\n        var containerRef = overlay.attach(containerPortal);\n        return containerRef.instance;\n      }\n      /**\n       * Attaches the user-provided component to the already-created MatDialogContainer.\n       * @template T, R\n       * @param {?} componentOrTemplateRef The type of component being loaded into the dialog,\n       *     or a TemplateRef to instantiate as the content.\n       * @param {?} dialogContainer Reference to the wrapping MatDialogContainer.\n       * @param {?} overlayRef Reference to the overlay in which the dialog resides.\n       * @param {?} config The dialog configuration.\n       * @return {?} A promise resolving to the MatDialogRef that should be returned to the user.\n       */\n\n    }, {\n      key: \"_attachDialogContent\",\n      value: function _attachDialogContent(componentOrTemplateRef, dialogContainer, overlayRef, config) {\n        /** @type {?} */\n        var dialogRef = new MatDialogRef(overlayRef, dialogContainer, this._location, config.id); // When the dialog backdrop is clicked, we want to close it.\n\n        if (config.hasBackdrop) {\n          overlayRef.backdropClick().subscribe(function () {\n            if (!dialogRef.disableClose) {\n              dialogRef.close();\n            }\n          });\n        }\n\n        if (componentOrTemplateRef instanceof TemplateRef) {\n          dialogContainer.attachTemplatePortal(new TemplatePortal(componentOrTemplateRef,\n          /** @type {?} */\n          null,\n          /** @type {?} */\n          {\n            $implicit: config.data,\n            dialogRef: dialogRef\n          }));\n        } else {\n          /** @type {?} */\n          var injector = this._createInjector(config, dialogRef, dialogContainer);\n          /** @type {?} */\n\n\n          var contentRef = dialogContainer.attachComponentPortal(new ComponentPortal(componentOrTemplateRef, undefined, injector));\n          dialogRef.componentInstance = contentRef.instance;\n        }\n\n        dialogRef.updateSize(config.width, config.height).updatePosition(config.position);\n        return dialogRef;\n      }\n      /**\n       * Creates a custom injector to be used inside the dialog. This allows a component loaded inside\n       * of a dialog to close itself and, optionally, to return a value.\n       * @template T\n       * @param {?} config Config object that is used to construct the dialog.\n       * @param {?} dialogRef Reference to the dialog.\n       * @param {?} dialogContainer\n       * @return {?} The custom injector that can be used inside the dialog.\n       */\n\n    }, {\n      key: \"_createInjector\",\n      value: function _createInjector(config, dialogRef, dialogContainer) {\n        /** @type {?} */\n        var userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n        /** @type {?} */\n\n        var injectionTokens = new WeakMap([[MatDialogContainer, dialogContainer], [MAT_DIALOG_DATA, config.data], [MatDialogRef, dialogRef]]);\n\n        if (config.direction && (!userInjector || !userInjector.get(Directionality, null))) {\n          injectionTokens.set(Directionality, {\n            value: config.direction,\n            change: of()\n          });\n        }\n\n        return new PortalInjector(userInjector || this._injector, injectionTokens);\n      }\n      /**\n       * Removes a dialog from the array of open dialogs.\n       * @param {?} dialogRef Dialog to be removed.\n       * @return {?}\n       */\n\n    }, {\n      key: \"_removeOpenDialog\",\n      value: function _removeOpenDialog(dialogRef) {\n        /** @type {?} */\n        var index = this.openDialogs.indexOf(dialogRef);\n\n        if (index > -1) {\n          this.openDialogs.splice(index, 1); // If all the dialogs were closed, remove/restore the `aria-hidden`\n          // to a the siblings and emit to the `afterAllClosed` stream.\n\n          if (!this.openDialogs.length) {\n            this._ariaHiddenElements.forEach(function (previousValue, element) {\n              if (previousValue) {\n                element.setAttribute('aria-hidden', previousValue);\n              } else {\n                element.removeAttribute('aria-hidden');\n              }\n            });\n\n            this._ariaHiddenElements.clear();\n\n            this._afterAllClosed.next();\n          }\n        }\n      }\n      /**\n       * Hides all of the content that isn't an overlay from assistive technology.\n       * @return {?}\n       */\n\n    }, {\n      key: \"_hideNonDialogContentFromAssistiveTechnology\",\n      value: function _hideNonDialogContentFromAssistiveTechnology() {\n        /** @type {?} */\n        var overlayContainer = this._overlayContainer.getContainerElement(); // Ensure that the overlay container is attached to the DOM.\n\n\n        if (overlayContainer.parentElement) {\n          /** @type {?} */\n          var siblings = overlayContainer.parentElement.children;\n\n          for (var i = siblings.length - 1; i > -1; i--) {\n            /** @type {?} */\n            var sibling = siblings[i];\n\n            if (sibling !== overlayContainer && sibling.nodeName !== 'SCRIPT' && sibling.nodeName !== 'STYLE' && !sibling.hasAttribute('aria-live')) {\n              this._ariaHiddenElements.set(sibling, sibling.getAttribute('aria-hidden'));\n\n              sibling.setAttribute('aria-hidden', 'true');\n            }\n          }\n        }\n      }\n      /**\n       * Closes all of the dialogs in an array.\n       * @param {?} dialogs\n       * @return {?}\n       */\n\n    }, {\n      key: \"_closeDialogs\",\n      value: function _closeDialogs(dialogs) {\n        /** @type {?} */\n        var i = dialogs.length;\n\n        while (i--) {\n          // The `_openDialogs` property isn't updated after close until the rxjs subscription\n          // runs on the next microtask, in addition to modifying the array as we're going\n          // through it. We loop through all of them and call close without assuming that\n          // they'll be removed from the list instantaneously.\n          dialogs[i].close();\n        }\n      }\n    }]);\n\n    return MatDialog;\n  }();\n\n  MatDialog.ɵfac = function MatDialog_Factory(t) {\n    return new (t || MatDialog)(ɵngcc0.ɵɵinject(ɵngcc3.Overlay), ɵngcc0.ɵɵinject(ɵngcc0.Injector), ɵngcc0.ɵɵinject(ɵngcc4.Location, 8), ɵngcc0.ɵɵinject(MAT_DIALOG_DEFAULT_OPTIONS, 8), ɵngcc0.ɵɵinject(MAT_DIALOG_SCROLL_STRATEGY), ɵngcc0.ɵɵinject(MatDialog, 12), ɵngcc0.ɵɵinject(ɵngcc3.OverlayContainer));\n  };\n\n  MatDialog.ɵprov =\n  /*@__PURE__*/\n\n  /*@__PURE__*/\n  ɵngcc0.ɵɵdefineInjectable({\n    token: MatDialog,\n    factory: MatDialog.ɵfac\n  });\n  return MatDialog;\n}();\n/**\n * Applies default options to the dialog config.\n * @param {?=} config Config to be modified.\n * @param {?=} defaultOptions Default options provided.\n * @return {?} The new configuration object.\n */\n\n\nfunction _applyConfigDefaults(config, defaultOptions) {\n  return Object.assign({}, defaultOptions, config);\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/** *\n * Counter used to generate unique IDs for dialog elements.\n  @type {?} */\n\n\nvar dialogElementUid = 0;\n\nvar MatDialogClose = /*@__PURE__*/function () {\n  var MatDialogClose = /*#__PURE__*/function () {\n    /**\n     * @param {?} dialogRef\n     * @param {?} _elementRef\n     * @param {?} _dialog\n     */\n    function MatDialogClose(dialogRef, _elementRef, _dialog) {\n      _classCallCheck(this, MatDialogClose);\n\n      this.dialogRef = dialogRef;\n      this._elementRef = _elementRef;\n      this._dialog = _dialog;\n      /**\n       * Screenreader label for the button.\n       */\n\n      this.ariaLabel = 'Close dialog';\n    }\n    /**\n     * @return {?}\n     */\n\n\n    _createClass(MatDialogClose, [{\n      key: \"ngOnInit\",\n      value: function ngOnInit() {\n        if (!this.dialogRef) {\n          // When this directive is included in a dialog via TemplateRef (rather than being\n          // in a Component), the DialogRef isn't available via injection because embedded\n          // views cannot be given a custom injector. Instead, we look up the DialogRef by\n          // ID. This must occur in `onInit`, as the ID binding for the dialog container won't\n          // be resolved at constructor time.\n          this.dialogRef =\n          /** @type {?} */\n          getClosestDialog(this._elementRef, this._dialog.openDialogs);\n        }\n      }\n      /**\n       * @param {?} changes\n       * @return {?}\n       */\n\n    }, {\n      key: \"ngOnChanges\",\n      value: function ngOnChanges(changes) {\n        /** @type {?} */\n        var proxiedChange = changes[\"_matDialogClose\"] || changes[\"_matDialogCloseResult\"];\n\n        if (proxiedChange) {\n          this.dialogResult = proxiedChange.currentValue;\n        }\n      }\n    }]);\n\n    return MatDialogClose;\n  }();\n\n  MatDialogClose.ɵfac = function MatDialogClose_Factory(t) {\n    return new (t || MatDialogClose)(ɵngcc0.ɵɵdirectiveInject(MatDialogRef, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(MatDialog));\n  };\n\n  MatDialogClose.ɵdir =\n  /*@__PURE__*/\n\n  /*@__PURE__*/\n  ɵngcc0.ɵɵdefineDirective({\n    type: MatDialogClose,\n    selectors: [[\"button\", \"mat-dialog-close\", \"\"], [\"button\", \"matDialogClose\", \"\"]],\n    hostAttrs: [\"type\", \"button\"],\n    hostVars: 1,\n    hostBindings: function MatDialogClose_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"click\", function MatDialogClose_click_HostBindingHandler() {\n          return ctx.dialogRef.close(ctx.dialogResult);\n        });\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"aria-label\", ctx.ariaLabel);\n      }\n    },\n    inputs: {\n      ariaLabel: [\"aria-label\", \"ariaLabel\"],\n      dialogResult: [\"mat-dialog-close\", \"dialogResult\"],\n      _matDialogClose: [\"matDialogClose\", \"_matDialogClose\"]\n    },\n    exportAs: [\"matDialogClose\"],\n    features: [ɵngcc0.ɵɵNgOnChangesFeature]\n  });\n  return MatDialogClose;\n}();\n\nvar MatDialogTitle = /*@__PURE__*/function () {\n  var MatDialogTitle = /*#__PURE__*/function () {\n    /**\n     * @param {?} _dialogRef\n     * @param {?} _elementRef\n     * @param {?} _dialog\n     */\n    function MatDialogTitle(_dialogRef, _elementRef, _dialog) {\n      _classCallCheck(this, MatDialogTitle);\n\n      this._dialogRef = _dialogRef;\n      this._elementRef = _elementRef;\n      this._dialog = _dialog;\n      this.id = \"mat-dialog-title-\".concat(dialogElementUid++);\n    }\n    /**\n     * @return {?}\n     */\n\n\n    _createClass(MatDialogTitle, [{\n      key: \"ngOnInit\",\n      value: function ngOnInit() {\n        var _this7 = this;\n\n        if (!this._dialogRef) {\n          this._dialogRef =\n          /** @type {?} */\n          getClosestDialog(this._elementRef, this._dialog.openDialogs);\n        }\n\n        if (this._dialogRef) {\n          Promise.resolve().then(function () {\n            /** @type {?} */\n            var container = _this7._dialogRef._containerInstance;\n\n            if (container && !container._ariaLabelledBy) {\n              container._ariaLabelledBy = _this7.id;\n            }\n          });\n        }\n      }\n    }]);\n\n    return MatDialogTitle;\n  }();\n\n  MatDialogTitle.ɵfac = function MatDialogTitle_Factory(t) {\n    return new (t || MatDialogTitle)(ɵngcc0.ɵɵdirectiveInject(MatDialogRef, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(MatDialog));\n  };\n\n  MatDialogTitle.ɵdir =\n  /*@__PURE__*/\n\n  /*@__PURE__*/\n  ɵngcc0.ɵɵdefineDirective({\n    type: MatDialogTitle,\n    selectors: [[\"\", \"mat-dialog-title\", \"\"], [\"\", \"matDialogTitle\", \"\"]],\n    hostAttrs: [1, \"mat-dialog-title\"],\n    hostVars: 1,\n    hostBindings: function MatDialogTitle_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        ɵngcc0.ɵɵhostProperty(\"id\", ctx.id);\n      }\n    },\n    inputs: {\n      id: \"id\"\n    },\n    exportAs: [\"matDialogTitle\"]\n  });\n  return MatDialogTitle;\n}();\n\nvar MatDialogContent = /*@__PURE__*/function () {\n  var MatDialogContent = function MatDialogContent() {\n    _classCallCheck(this, MatDialogContent);\n  };\n\n  MatDialogContent.ɵfac = function MatDialogContent_Factory(t) {\n    return new (t || MatDialogContent)();\n  };\n\n  MatDialogContent.ɵdir =\n  /*@__PURE__*/\n\n  /*@__PURE__*/\n  ɵngcc0.ɵɵdefineDirective({\n    type: MatDialogContent,\n    selectors: [[\"\", \"mat-dialog-content\", \"\"], [\"mat-dialog-content\"], [\"\", \"matDialogContent\", \"\"]],\n    hostAttrs: [1, \"mat-dialog-content\"]\n  });\n  return MatDialogContent;\n}();\n\nvar MatDialogActions = /*@__PURE__*/function () {\n  var MatDialogActions = function MatDialogActions() {\n    _classCallCheck(this, MatDialogActions);\n  };\n\n  MatDialogActions.ɵfac = function MatDialogActions_Factory(t) {\n    return new (t || MatDialogActions)();\n  };\n\n  MatDialogActions.ɵdir =\n  /*@__PURE__*/\n\n  /*@__PURE__*/\n  ɵngcc0.ɵɵdefineDirective({\n    type: MatDialogActions,\n    selectors: [[\"\", \"mat-dialog-actions\", \"\"], [\"mat-dialog-actions\"], [\"\", \"matDialogActions\", \"\"]],\n    hostAttrs: [1, \"mat-dialog-actions\"]\n  });\n  return MatDialogActions;\n}();\n/**\n * Finds the closest MatDialogRef to an element by looking at the DOM.\n * @param {?} element Element relative to which to look for a dialog.\n * @param {?} openDialogs References to the currently-open dialogs.\n * @return {?}\n */\n\n\nfunction getClosestDialog(element, openDialogs) {\n  /** @type {?} */\n  var parent = element.nativeElement.parentElement;\n\n  while (parent && !parent.classList.contains('mat-dialog-container')) {\n    parent = parent.parentElement;\n  }\n\n  return parent ? openDialogs.find(function (dialog) {\n    return dialog.id ===\n    /** @type {?} */\n    parent.id;\n  }) : null;\n}\n\nvar MatDialogModule = /*@__PURE__*/function () {\n  var MatDialogModule = function MatDialogModule() {\n    _classCallCheck(this, MatDialogModule);\n  };\n\n  MatDialogModule.ɵfac = function MatDialogModule_Factory(t) {\n    return new (t || MatDialogModule)();\n  };\n\n  MatDialogModule.ɵmod =\n  /*@__PURE__*/\n\n  /*@__PURE__*/\n  ɵngcc0.ɵɵdefineNgModule({\n    type: MatDialogModule\n  });\n  MatDialogModule.ɵinj =\n  /*@__PURE__*/\n\n  /*@__PURE__*/\n  ɵngcc0.ɵɵdefineInjector({\n    providers: [MatDialog, MAT_DIALOG_SCROLL_STRATEGY_PROVIDER],\n    imports: [[CommonModule, OverlayModule, PortalModule, MatCommonModule], MatCommonModule]\n  });\n  return MatDialogModule;\n}();\n/*@__PURE__*/\n\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatDialogModule, {\n    declarations: function declarations() {\n      return [MatDialogContainer, MatDialogClose, MatDialogTitle, MatDialogActions, MatDialogContent];\n    },\n    imports: function imports() {\n      return [CommonModule, OverlayModule, PortalModule, MatCommonModule];\n    },\n    exports: function exports() {\n      return [MatDialogContainer, MatDialogClose, MatDialogTitle, MatDialogContent, MatDialogActions, MatCommonModule];\n    }\n  });\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n\nexport { MatDialogModule, MAT_DIALOG_SCROLL_STRATEGY_FACTORY, MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY, MAT_DIALOG_DATA, MAT_DIALOG_DEFAULT_OPTIONS, MAT_DIALOG_SCROLL_STRATEGY, MAT_DIALOG_SCROLL_STRATEGY_PROVIDER, MatDialog, throwMatDialogContentAlreadyAttachedError, MatDialogContainer, MatDialogClose, MatDialogTitle, MatDialogContent, MatDialogActions, MatDialogConfig, MatDialogRef, matDialogAnimations }; //# sourceMappingURL=dialog.js.map","map":null,"metadata":{},"sourceType":"module"}