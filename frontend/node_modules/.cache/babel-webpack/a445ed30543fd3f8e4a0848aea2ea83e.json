{"ast":null,"code":"import _slicedToArray from \"/Users/adepertat/Dropbox/ECOLES/Openclassroom/P6_de_Pertat_Antoine/AntoinedePertat_6_240521/frontend/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _inherits from \"/Users/adepertat/Dropbox/ECOLES/Openclassroom/P6_de_Pertat_Antoine/AntoinedePertat_6_240521/frontend/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/adepertat/Dropbox/ECOLES/Openclassroom/P6_de_Pertat_Antoine/AntoinedePertat_6_240521/frontend/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _createClass from \"/Users/adepertat/Dropbox/ECOLES/Openclassroom/P6_de_Pertat_Antoine/AntoinedePertat_6_240521/frontend/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _classCallCheck from \"/Users/adepertat/Dropbox/ECOLES/Openclassroom/P6_de_Pertat_Antoine/AntoinedePertat_6_240521/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { DOCUMENT } from '@angular/common';\nimport { HttpClient } from '@angular/common/http';\nimport { Inject, Injectable, Optional, SecurityContext, SkipSelf, NgModule, Attribute, ChangeDetectionStrategy, Component, ElementRef, Input, ViewEncapsulation, InjectionToken, inject, defineInjectable } from '@angular/core';\nimport { DomSanitizer } from '@angular/platform-browser';\nimport { forkJoin, of, throwError } from 'rxjs';\nimport { catchError, finalize, map, share, tap, take } from 'rxjs/operators';\nimport { mixinColor, MatCommonModule } from '@angular/material/core';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * Returns an exception to be thrown in the case when attempting to\n * load an icon with a name that cannot be found.\n * \\@docs-private\n * @param {?} iconName\n * @return {?}\n */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/common/http';\nimport * as ɵngcc2 from '@angular/platform-browser';\nvar _c0 = [\"*\"];\n\nfunction getMatIconNameNotFoundError(iconName) {\n  return Error(\"Unable to find icon with the name \\\"\".concat(iconName, \"\\\"\"));\n}\n/**\n * Returns an exception to be thrown when the consumer attempts to use\n * `<mat-icon>` without including \\@angular/http.\n * \\@docs-private\n * @return {?}\n */\n\n\nfunction getMatIconNoHttpProviderError() {\n  return Error('Could not find HttpClient provider for use with Angular Material icons. ' + 'Please include the HttpClientModule from @angular/common/http in your ' + 'app imports.');\n}\n/**\n * Returns an exception to be thrown when a URL couldn't be sanitized.\n * \\@docs-private\n * @param {?} url URL that was attempted to be sanitized.\n * @return {?}\n */\n\n\nfunction getMatIconFailedToSanitizeUrlError(url) {\n  return Error(\"The URL provided to MatIconRegistry was not trusted as a resource URL \" + \"via Angular's DomSanitizer. Attempted URL was \\\"\".concat(url, \"\\\".\"));\n}\n/**\n * Returns an exception to be thrown when a HTML string couldn't be sanitized.\n * \\@docs-private\n * @param {?} literal HTML that was attempted to be sanitized.\n * @return {?}\n */\n\n\nfunction getMatIconFailedToSanitizeLiteralError(literal) {\n  return Error(\"The literal provided to MatIconRegistry was not trusted as safe HTML by \" + \"Angular's DomSanitizer. Attempted literal was \\\"\".concat(literal, \"\\\".\"));\n}\n/**\n * Configuration for an icon, including the URL and possibly the cached SVG element.\n * \\@docs-private\n */\n\n\nvar SvgIconConfig =\n/**\n * @param {?} data\n */\nfunction SvgIconConfig(data) {\n  _classCallCheck(this, SvgIconConfig);\n\n  // Note that we can't use `instanceof SVGElement` here,\n  // because it'll break during server-side rendering.\n  if (!!\n  /** @type {?} */\n  data.nodeName) {\n    this.svgElement =\n    /** @type {?} */\n    data;\n  } else {\n    this.url =\n    /** @type {?} */\n    data;\n  }\n};\n\nvar MatIconRegistry = /*@__PURE__*/function () {\n  var MatIconRegistry = /*#__PURE__*/function () {\n    /**\n     * @param {?} _httpClient\n     * @param {?} _sanitizer\n     * @param {?} document\n     */\n    function MatIconRegistry(_httpClient, _sanitizer, document) {\n      _classCallCheck(this, MatIconRegistry);\n\n      this._httpClient = _httpClient;\n      this._sanitizer = _sanitizer;\n      /**\n       * URLs and cached SVG elements for individual icons. Keys are of the format \"[namespace]:[icon]\".\n       */\n\n      this._svgIconConfigs = new Map();\n      /**\n       * SvgIconConfig objects and cached SVG elements for icon sets, keyed by namespace.\n       * Multiple icon sets can be registered under the same namespace.\n       */\n\n      this._iconSetConfigs = new Map();\n      /**\n       * Cache for icons loaded by direct URLs.\n       */\n\n      this._cachedIconsByUrl = new Map();\n      /**\n       * In-progress icon fetches. Used to coalesce multiple requests to the same URL.\n       */\n\n      this._inProgressUrlFetches = new Map();\n      /**\n       * Map from font identifiers to their CSS class names. Used for icon fonts.\n       */\n\n      this._fontCssClassesByAlias = new Map();\n      /**\n       * The CSS class to apply when an `<mat-icon>` component has no icon name, url, or font specified.\n       * The default 'material-icons' value assumes that the material icon font has been loaded as\n       * described at http://google.github.io/material-design-icons/#icon-font-for-the-web\n       */\n\n      this._defaultFontSetClass = 'material-icons';\n      this._document = document;\n    }\n    /**\n     * Registers an icon by URL in the default namespace.\n     * @param {?} iconName Name under which the icon should be registered.\n     * @param {?} url\n     * @return {?}\n     */\n\n\n    _createClass(MatIconRegistry, [{\n      key: \"addSvgIcon\",\n      value: function addSvgIcon(iconName, url) {\n        return this.addSvgIconInNamespace('', iconName, url);\n      }\n      /**\n       * Registers an icon using an HTML string in the default namespace.\n       * @param {?} iconName Name under which the icon should be registered.\n       * @param {?} literal SVG source of the icon.\n       * @return {?}\n       */\n\n    }, {\n      key: \"addSvgIconLiteral\",\n      value: function addSvgIconLiteral(iconName, literal) {\n        return this.addSvgIconLiteralInNamespace('', iconName, literal);\n      }\n      /**\n       * Registers an icon by URL in the specified namespace.\n       * @param {?} namespace Namespace in which the icon should be registered.\n       * @param {?} iconName Name under which the icon should be registered.\n       * @param {?} url\n       * @return {?}\n       */\n\n    }, {\n      key: \"addSvgIconInNamespace\",\n      value: function addSvgIconInNamespace(namespace, iconName, url) {\n        return this._addSvgIconConfig(namespace, iconName, new SvgIconConfig(url));\n      }\n      /**\n       * Registers an icon using an HTML string in the specified namespace.\n       * @param {?} namespace Namespace in which the icon should be registered.\n       * @param {?} iconName Name under which the icon should be registered.\n       * @param {?} literal SVG source of the icon.\n       * @return {?}\n       */\n\n    }, {\n      key: \"addSvgIconLiteralInNamespace\",\n      value: function addSvgIconLiteralInNamespace(namespace, iconName, literal) {\n        /** @type {?} */\n        var sanitizedLiteral = this._sanitizer.sanitize(SecurityContext.HTML, literal);\n\n        if (!sanitizedLiteral) {\n          throw getMatIconFailedToSanitizeLiteralError(literal);\n        }\n        /** @type {?} */\n\n\n        var svgElement = this._createSvgElementForSingleIcon(sanitizedLiteral);\n\n        return this._addSvgIconConfig(namespace, iconName, new SvgIconConfig(svgElement));\n      }\n      /**\n       * Registers an icon set by URL in the default namespace.\n       * @param {?} url\n       * @return {?}\n       */\n\n    }, {\n      key: \"addSvgIconSet\",\n      value: function addSvgIconSet(url) {\n        return this.addSvgIconSetInNamespace('', url);\n      }\n      /**\n       * Registers an icon set using an HTML string in the default namespace.\n       * @param {?} literal SVG source of the icon set.\n       * @return {?}\n       */\n\n    }, {\n      key: \"addSvgIconSetLiteral\",\n      value: function addSvgIconSetLiteral(literal) {\n        return this.addSvgIconSetLiteralInNamespace('', literal);\n      }\n      /**\n       * Registers an icon set by URL in the specified namespace.\n       * @param {?} namespace Namespace in which to register the icon set.\n       * @param {?} url\n       * @return {?}\n       */\n\n    }, {\n      key: \"addSvgIconSetInNamespace\",\n      value: function addSvgIconSetInNamespace(namespace, url) {\n        return this._addSvgIconSetConfig(namespace, new SvgIconConfig(url));\n      }\n      /**\n       * Registers an icon set using an HTML string in the specified namespace.\n       * @param {?} namespace Namespace in which to register the icon set.\n       * @param {?} literal SVG source of the icon set.\n       * @return {?}\n       */\n\n    }, {\n      key: \"addSvgIconSetLiteralInNamespace\",\n      value: function addSvgIconSetLiteralInNamespace(namespace, literal) {\n        /** @type {?} */\n        var sanitizedLiteral = this._sanitizer.sanitize(SecurityContext.HTML, literal);\n\n        if (!sanitizedLiteral) {\n          throw getMatIconFailedToSanitizeLiteralError(literal);\n        }\n        /** @type {?} */\n\n\n        var svgElement = this._svgElementFromString(sanitizedLiteral);\n\n        return this._addSvgIconSetConfig(namespace, new SvgIconConfig(svgElement));\n      }\n      /**\n       * Defines an alias for a CSS class name to be used for icon fonts. Creating an matIcon\n       * component with the alias as the fontSet input will cause the class name to be applied\n       * to the `<mat-icon>` element.\n       *\n       * @param {?} alias Alias for the font.\n       * @param {?=} className Class name override to be used instead of the alias.\n       * @return {?}\n       */\n\n    }, {\n      key: \"registerFontClassAlias\",\n      value: function registerFontClassAlias(alias) {\n        var className = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : alias;\n\n        this._fontCssClassesByAlias.set(alias, className);\n\n        return this;\n      }\n      /**\n       * Returns the CSS class name associated with the alias by a previous call to\n       * registerFontClassAlias. If no CSS class has been associated, returns the alias unmodified.\n       * @param {?} alias\n       * @return {?}\n       */\n\n    }, {\n      key: \"classNameForFontAlias\",\n      value: function classNameForFontAlias(alias) {\n        return this._fontCssClassesByAlias.get(alias) || alias;\n      }\n      /**\n       * Sets the CSS class name to be used for icon fonts when an `<mat-icon>` component does not\n       * have a fontSet input value, and is not loading an icon by name or URL.\n       *\n       * @param {?} className\n       * @return {?}\n       */\n\n    }, {\n      key: \"setDefaultFontSetClass\",\n      value: function setDefaultFontSetClass(className) {\n        this._defaultFontSetClass = className;\n        return this;\n      }\n      /**\n       * Returns the CSS class name to be used for icon fonts when an `<mat-icon>` component does not\n       * have a fontSet input value, and is not loading an icon by name or URL.\n       * @return {?}\n       */\n\n    }, {\n      key: \"getDefaultFontSetClass\",\n      value: function getDefaultFontSetClass() {\n        return this._defaultFontSetClass;\n      }\n      /**\n       * Returns an Observable that produces the icon (as an `<svg>` DOM element) from the given URL.\n       * The response from the URL may be cached so this will not always cause an HTTP request, but\n       * the produced element will always be a new copy of the originally fetched icon. (That is,\n       * it will not contain any modifications made to elements previously returned).\n       *\n       * @param {?} safeUrl URL from which to fetch the SVG icon.\n       * @return {?}\n       */\n\n    }, {\n      key: \"getSvgIconFromUrl\",\n      value: function getSvgIconFromUrl(safeUrl) {\n        var _this = this;\n\n        /** @type {?} */\n        var url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n\n        if (!url) {\n          throw getMatIconFailedToSanitizeUrlError(safeUrl);\n        }\n        /** @type {?} */\n\n\n        var cachedIcon = this._cachedIconsByUrl.get(url);\n\n        if (cachedIcon) {\n          return of(cloneSvg(cachedIcon));\n        }\n\n        return this._loadSvgIconFromConfig(new SvgIconConfig(safeUrl)).pipe(tap(function (svg) {\n          return _this._cachedIconsByUrl.set(\n          /** @type {?} */\n          url, svg);\n        }), map(function (svg) {\n          return cloneSvg(svg);\n        }));\n      }\n      /**\n       * Returns an Observable that produces the icon (as an `<svg>` DOM element) with the given name\n       * and namespace. The icon must have been previously registered with addIcon or addIconSet;\n       * if not, the Observable will throw an error.\n       *\n       * @param {?} name Name of the icon to be retrieved.\n       * @param {?=} namespace Namespace in which to look for the icon.\n       * @return {?}\n       */\n\n    }, {\n      key: \"getNamedSvgIcon\",\n      value: function getNamedSvgIcon(name) {\n        var namespace = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n\n        /** @type {?} */\n        var key = iconKey(namespace, name);\n        /** @type {?} */\n\n        var config = this._svgIconConfigs.get(key);\n\n        if (config) {\n          return this._getSvgFromConfig(config);\n        }\n        /** @type {?} */\n\n\n        var iconSetConfigs = this._iconSetConfigs.get(namespace);\n\n        if (iconSetConfigs) {\n          return this._getSvgFromIconSetConfigs(name, iconSetConfigs);\n        }\n\n        return throwError(getMatIconNameNotFoundError(key));\n      }\n      /**\n       * Returns the cached icon for a SvgIconConfig if available, or fetches it from its URL if not.\n       * @param {?} config\n       * @return {?}\n       */\n\n    }, {\n      key: \"_getSvgFromConfig\",\n      value: function _getSvgFromConfig(config) {\n        if (config.svgElement) {\n          // We already have the SVG element for this icon, return a copy.\n          return of(cloneSvg(config.svgElement));\n        } else {\n          // Fetch the icon from the config's URL, cache it, and return a copy.\n          return this._loadSvgIconFromConfig(config).pipe(tap(function (svg) {\n            return config.svgElement = svg;\n          }), map(function (svg) {\n            return cloneSvg(svg);\n          }));\n        }\n      }\n      /**\n       * Attempts to find an icon with the specified name in any of the SVG icon sets.\n       * First searches the available cached icons for a nested element with a matching name, and\n       * if found copies the element to a new `<svg>` element. If not found, fetches all icon sets\n       * that have not been cached, and searches again after all fetches are completed.\n       * The returned Observable produces the SVG element if possible, and throws\n       * an error if no icon with the specified name can be found.\n       * @param {?} name\n       * @param {?} iconSetConfigs\n       * @return {?}\n       */\n\n    }, {\n      key: \"_getSvgFromIconSetConfigs\",\n      value: function _getSvgFromIconSetConfigs(name, iconSetConfigs) {\n        var _this2 = this;\n\n        /** @type {?} */\n        var namedIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n\n        if (namedIcon) {\n          // We could cache namedIcon in _svgIconConfigs, but since we have to make a copy every\n          // time anyway, there's probably not much advantage compared to just always extracting\n          // it from the icon set.\n          return of(namedIcon);\n        }\n        /** @type {?} */\n\n\n        var iconSetFetchRequests = iconSetConfigs.filter(function (iconSetConfig) {\n          return !iconSetConfig.svgElement;\n        }).map(function (iconSetConfig) {\n          return _this2._loadSvgIconSetFromConfig(iconSetConfig).pipe(catchError(function (err) {\n            /** @type {?} */\n            var url = _this2._sanitizer.sanitize(SecurityContext.RESOURCE_URL, iconSetConfig.url); // Swallow errors fetching individual URLs so the\n            // combined Observable won't necessarily fail.\n\n\n            console.error(\"Loading icon set URL: \".concat(url, \" failed: \").concat(err.message));\n            return of(null);\n          }));\n        }); // Fetch all the icon set URLs. When the requests complete, every IconSet should have a\n        // cached SVG element (unless the request failed), and we can check again for the icon.\n\n        return forkJoin(iconSetFetchRequests).pipe(map(function () {\n          /** @type {?} */\n          var foundIcon = _this2._extractIconWithNameFromAnySet(name, iconSetConfigs);\n\n          if (!foundIcon) {\n            throw getMatIconNameNotFoundError(name);\n          }\n\n          return foundIcon;\n        }));\n      }\n      /**\n       * Searches the cached SVG elements for the given icon sets for a nested icon element whose \"id\"\n       * tag matches the specified name. If found, copies the nested element to a new SVG element and\n       * returns it. Returns null if no matching element is found.\n       * @param {?} iconName\n       * @param {?} iconSetConfigs\n       * @return {?}\n       */\n\n    }, {\n      key: \"_extractIconWithNameFromAnySet\",\n      value: function _extractIconWithNameFromAnySet(iconName, iconSetConfigs) {\n        // Iterate backwards, so icon sets added later have precedence.\n        for (var i = iconSetConfigs.length - 1; i >= 0; i--) {\n          /** @type {?} */\n          var config = iconSetConfigs[i];\n\n          if (config.svgElement) {\n            /** @type {?} */\n            var foundIcon = this._extractSvgIconFromSet(config.svgElement, iconName);\n\n            if (foundIcon) {\n              return foundIcon;\n            }\n          }\n        }\n\n        return null;\n      }\n      /**\n       * Loads the content of the icon URL specified in the SvgIconConfig and creates an SVG element\n       * from it.\n       * @param {?} config\n       * @return {?}\n       */\n\n    }, {\n      key: \"_loadSvgIconFromConfig\",\n      value: function _loadSvgIconFromConfig(config) {\n        var _this3 = this;\n\n        return this._fetchUrl(config.url).pipe(map(function (svgText) {\n          return _this3._createSvgElementForSingleIcon(svgText);\n        }));\n      }\n      /**\n       * Loads the content of the icon set URL specified in the SvgIconConfig and creates an SVG element\n       * from it.\n       * @param {?} config\n       * @return {?}\n       */\n\n    }, {\n      key: \"_loadSvgIconSetFromConfig\",\n      value: function _loadSvgIconSetFromConfig(config) {\n        var _this4 = this;\n\n        // If the SVG for this icon set has already been parsed, do nothing.\n        if (config.svgElement) {\n          return of(config.svgElement);\n        }\n\n        return this._fetchUrl(config.url).pipe(map(function (svgText) {\n          // It is possible that the icon set was parsed and cached by an earlier request, so parsing\n          // only needs to occur if the cache is yet unset.\n          if (!config.svgElement) {\n            config.svgElement = _this4._svgElementFromString(svgText);\n          }\n\n          return config.svgElement;\n        }));\n      }\n      /**\n       * Creates a DOM element from the given SVG string, and adds default attributes.\n       * @param {?} responseText\n       * @return {?}\n       */\n\n    }, {\n      key: \"_createSvgElementForSingleIcon\",\n      value: function _createSvgElementForSingleIcon(responseText) {\n        /** @type {?} */\n        var svg = this._svgElementFromString(responseText);\n\n        this._setSvgAttributes(svg);\n\n        return svg;\n      }\n      /**\n       * Searches the cached element of the given SvgIconConfig for a nested icon element whose \"id\"\n       * tag matches the specified name. If found, copies the nested element to a new SVG element and\n       * returns it. Returns null if no matching element is found.\n       * @param {?} iconSet\n       * @param {?} iconName\n       * @return {?}\n       */\n\n    }, {\n      key: \"_extractSvgIconFromSet\",\n      value: function _extractSvgIconFromSet(iconSet, iconName) {\n        /** @type {?} */\n        var iconSource = iconSet.querySelector('#' + iconName);\n\n        if (!iconSource) {\n          return null;\n        }\n        /** @type {?} */\n\n\n        var iconElement =\n        /** @type {?} */\n        iconSource.cloneNode(true);\n        iconElement.removeAttribute('id'); // If the icon node is itself an <svg> node, clone and return it directly. If not, set it as\n        // the content of a new <svg> node.\n\n        if (iconElement.nodeName.toLowerCase() === 'svg') {\n          return this._setSvgAttributes(\n          /** @type {?} */\n          iconElement);\n        } // If the node is a <symbol>, it won't be rendered so we have to convert it into <svg>. Note\n        // that the same could be achieved by referring to it via <use href=\"#id\">, however the <use>\n        // tag is problematic on Firefox, because it needs to include the current page path.\n\n\n        if (iconElement.nodeName.toLowerCase() === 'symbol') {\n          return this._setSvgAttributes(this._toSvgElement(iconElement));\n        }\n        /** @type {?} */\n\n\n        var svg = this._svgElementFromString('<svg></svg>'); // Clone the node so we don't remove it from the parent icon set element.\n\n\n        svg.appendChild(iconElement);\n        return this._setSvgAttributes(svg);\n      }\n      /**\n       * Creates a DOM element from the given SVG string.\n       * @param {?} str\n       * @return {?}\n       */\n\n    }, {\n      key: \"_svgElementFromString\",\n      value: function _svgElementFromString(str) {\n        /** @type {?} */\n        var div = this._document.createElement('DIV');\n\n        div.innerHTML = str;\n        /** @type {?} */\n\n        var svg =\n        /** @type {?} */\n        div.querySelector('svg');\n\n        if (!svg) {\n          throw Error('<svg> tag not found');\n        }\n\n        return svg;\n      }\n      /**\n       * Converts an element into an SVG node by cloning all of its children.\n       * @param {?} element\n       * @return {?}\n       */\n\n    }, {\n      key: \"_toSvgElement\",\n      value: function _toSvgElement(element) {\n        /** @type {?} */\n        var svg = this._svgElementFromString('<svg></svg>');\n\n        for (var i = 0; i < element.childNodes.length; i++) {\n          if (element.childNodes[i].nodeType === this._document.ELEMENT_NODE) {\n            svg.appendChild(element.childNodes[i].cloneNode(true));\n          }\n        }\n\n        return svg;\n      }\n      /**\n       * Sets the default attributes for an SVG element to be used as an icon.\n       * @param {?} svg\n       * @return {?}\n       */\n\n    }, {\n      key: \"_setSvgAttributes\",\n      value: function _setSvgAttributes(svg) {\n        svg.setAttribute('fit', '');\n        svg.setAttribute('height', '100%');\n        svg.setAttribute('width', '100%');\n        svg.setAttribute('preserveAspectRatio', 'xMidYMid meet');\n        svg.setAttribute('focusable', 'false'); // Disable IE11 default behavior to make SVGs focusable.\n\n        return svg;\n      }\n      /**\n       * Returns an Observable which produces the string contents of the given URL. Results may be\n       * cached, so future calls with the same URL may not cause another HTTP request.\n       * @param {?} safeUrl\n       * @return {?}\n       */\n\n    }, {\n      key: \"_fetchUrl\",\n      value: function _fetchUrl(safeUrl) {\n        var _this5 = this;\n\n        if (!this._httpClient) {\n          throw getMatIconNoHttpProviderError();\n        }\n\n        if (safeUrl == null) {\n          throw Error(\"Cannot fetch icon from URL \\\"\".concat(safeUrl, \"\\\".\"));\n        }\n        /** @type {?} */\n\n\n        var url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n\n        if (!url) {\n          throw getMatIconFailedToSanitizeUrlError(safeUrl);\n        }\n        /** @type {?} */\n\n\n        var inProgressFetch = this._inProgressUrlFetches.get(url);\n\n        if (inProgressFetch) {\n          return inProgressFetch;\n        }\n        /** @type {?} */\n\n\n        var req = this._httpClient.get(url, {\n          responseType: 'text'\n        }).pipe(finalize(function () {\n          return _this5._inProgressUrlFetches.delete(url);\n        }), share());\n\n        this._inProgressUrlFetches.set(url, req);\n\n        return req;\n      }\n      /**\n       * Registers an icon config by name in the specified namespace.\n       * @param {?} namespace Namespace in which to register the icon config.\n       * @param {?} iconName Name under which to register the config.\n       * @param {?} config Config to be registered.\n       * @return {?}\n       */\n\n    }, {\n      key: \"_addSvgIconConfig\",\n      value: function _addSvgIconConfig(namespace, iconName, config) {\n        this._svgIconConfigs.set(iconKey(namespace, iconName), config);\n\n        return this;\n      }\n      /**\n       * Registers an icon set config in the specified namespace.\n       * @param {?} namespace Namespace in which to register the icon config.\n       * @param {?} config Config to be registered.\n       * @return {?}\n       */\n\n    }, {\n      key: \"_addSvgIconSetConfig\",\n      value: function _addSvgIconSetConfig(namespace, config) {\n        /** @type {?} */\n        var configNamespace = this._iconSetConfigs.get(namespace);\n\n        if (configNamespace) {\n          configNamespace.push(config);\n        } else {\n          this._iconSetConfigs.set(namespace, [config]);\n        }\n\n        return this;\n      }\n    }]);\n\n    return MatIconRegistry;\n  }();\n\n  MatIconRegistry.ɵfac = function MatIconRegistry_Factory(t) {\n    return new (t || MatIconRegistry)(ɵngcc0.ɵɵinject(ɵngcc1.HttpClient, 8), ɵngcc0.ɵɵinject(ɵngcc2.DomSanitizer), ɵngcc0.ɵɵinject(DOCUMENT, 8));\n  };\n\n  MatIconRegistry.ɵprov =\n  /*@__PURE__*/\n\n  /*@__PURE__*/\n  ɵngcc0.ɵɵdefineInjectable({\n    token: MatIconRegistry,\n    factory: MatIconRegistry.ɵfac,\n    providedIn: 'root'\n  });\n  /** @nocollapse */\n\n  MatIconRegistry.ngInjectableDef = /*@__PURE__*/defineInjectable({\n    factory: function MatIconRegistry_Factory() {\n      return new MatIconRegistry(inject(HttpClient, 8), inject(DomSanitizer), inject(DOCUMENT, 8));\n    },\n    token: MatIconRegistry,\n    providedIn: \"root\"\n  });\n  return MatIconRegistry;\n}();\n/**\n * \\@docs-private\n * @param {?} parentRegistry\n * @param {?} httpClient\n * @param {?} sanitizer\n * @param {?=} document\n * @return {?}\n */\n\n\nfunction ICON_REGISTRY_PROVIDER_FACTORY(parentRegistry, httpClient, sanitizer, document) {\n  return parentRegistry || new MatIconRegistry(httpClient, sanitizer, document);\n}\n/** *\n * \\@docs-private\n  @type {?} */\n\n\nvar ICON_REGISTRY_PROVIDER = {\n  // If there is already an MatIconRegistry available, use that. Otherwise, provide a new one.\n  provide: MatIconRegistry,\n  deps: [[/*@__PURE__*/new Optional(), /*@__PURE__*/new SkipSelf(), MatIconRegistry], [/*@__PURE__*/new Optional(), HttpClient], DomSanitizer, [/*@__PURE__*/new Optional(),\n  /** @type {?} */\n  DOCUMENT]],\n  useFactory: ICON_REGISTRY_PROVIDER_FACTORY\n};\n/**\n * Clones an SVGElement while preserving type information.\n * @param {?} svg\n * @return {?}\n */\n\nfunction cloneSvg(svg) {\n  return (\n    /** @type {?} */\n    svg.cloneNode(true)\n  );\n}\n/**\n * Returns the cache key to use for an icon namespace and name.\n * @param {?} namespace\n * @param {?} name\n * @return {?}\n */\n\n\nfunction iconKey(namespace, name) {\n  return namespace + ':' + name;\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * \\@docs-private\n */\n\n\nvar MatIconBase =\n/**\n * @param {?} _elementRef\n */\nfunction MatIconBase(_elementRef) {\n  _classCallCheck(this, MatIconBase);\n\n  this._elementRef = _elementRef;\n};\n/** @type {?} */\n\n\nvar _MatIconMixinBase = /*@__PURE__*/mixinColor(MatIconBase);\n/** *\n * Injection token used to provide the current location to `MatIcon`.\n * Used to handle server-side rendering and to stub out during unit tests.\n * \\@docs-private\n  @type {?} */\n\n\nvar MAT_ICON_LOCATION = /*@__PURE__*/new InjectionToken('mat-icon-location', {\n  providedIn: 'root',\n  factory: MAT_ICON_LOCATION_FACTORY\n});\n/**\n * \\@docs-private\n * @return {?}\n */\n\nfunction MAT_ICON_LOCATION_FACTORY() {\n  /** @type {?} */\n  var _document = inject(DOCUMENT);\n\n  return {\n    // Note that this needs to be a function, rather than a property, because Angular\n    // will only resolve it once, but we want the current path on each call.\n    getPathname: function getPathname() {\n      return _document && _document.location && _document.location.pathname || '';\n    }\n  };\n}\n/** *\n * SVG attributes that accept a FuncIRI (e.g. `url(<something>)`).\n  @type {?} */\n\n\nvar funcIriAttributes = ['clip-path', 'color-profile', 'src', 'cursor', 'fill', 'filter', 'marker', 'marker-start', 'marker-mid', 'marker-end', 'mask', 'stroke'];\n\nvar ɵ0 = function ɵ0(attr) {\n  return \"[\".concat(attr, \"]\");\n};\n/** *\n * Selector that can be used to find all elements that are using a `FuncIRI`.\n  @type {?} */\n\n\nvar funcIriAttributeSelector =\n/*@__PURE__*/\n\n/*@__PURE__*/\nfuncIriAttributes.map(ɵ0).join(', ');\n/** *\n * Regex that can be used to extract the id out of a FuncIRI.\n  @type {?} */\n\nvar funcIriPattern = /^url\\(['\"]?#(.*?)['\"]?\\)$/;\n\nvar MatIcon = /*@__PURE__*/function () {\n  var MatIcon = /*#__PURE__*/function (_MatIconMixinBase2) {\n    _inherits(MatIcon, _MatIconMixinBase2);\n\n    var _super = _createSuper(MatIcon);\n\n    /**\n     * @param {?} elementRef\n     * @param {?} _iconRegistry\n     * @param {?} ariaHidden\n     * @param {?=} _location\n     */\n    function MatIcon(elementRef, _iconRegistry, ariaHidden,\n    /**\n    * @deprecated `location` parameter to be made required.\n    * @breaking-change 8.0.0\n    */\n    _location) {\n      var _this6;\n\n      _classCallCheck(this, MatIcon);\n\n      _this6 = _super.call(this, elementRef);\n      _this6._iconRegistry = _iconRegistry;\n      _this6._location = _location;\n      _this6._inline = false; // If the user has not explicitly set aria-hidden, mark the icon as hidden, as this is\n      // the right thing to do for the majority of icon use-cases.\n\n      if (!ariaHidden) {\n        elementRef.nativeElement.setAttribute('aria-hidden', 'true');\n      }\n\n      return _this6;\n    }\n    /**\n     * Whether the icon should be inlined, automatically sizing the icon to match the font size of\n     * the element the icon is contained in.\n     * @return {?}\n     */\n\n\n    _createClass(MatIcon, [{\n      key: \"inline\",\n      get: function get() {\n        return this._inline;\n      }\n      /**\n       * @param {?} inline\n       * @return {?}\n       */\n      ,\n      set: function set(inline) {\n        this._inline = coerceBooleanProperty(inline);\n      }\n      /**\n       * Font set that the icon is a part of.\n       * @return {?}\n       */\n\n    }, {\n      key: \"fontSet\",\n      get: function get() {\n        return this._fontSet;\n      }\n      /**\n       * @param {?} value\n       * @return {?}\n       */\n      ,\n      set: function set(value) {\n        this._fontSet = this._cleanupFontValue(value);\n      }\n      /**\n       * Name of an icon within a font set.\n       * @return {?}\n       */\n\n    }, {\n      key: \"fontIcon\",\n      get: function get() {\n        return this._fontIcon;\n      }\n      /**\n       * @param {?} value\n       * @return {?}\n       */\n      ,\n      set: function set(value) {\n        this._fontIcon = this._cleanupFontValue(value);\n      }\n      /**\n       * Splits an svgIcon binding value into its icon set and icon name components.\n       * Returns a 2-element array of [(icon set), (icon name)].\n       * The separator for the two fields is ':'. If there is no separator, an empty\n       * string is returned for the icon set and the entire value is returned for\n       * the icon name. If the argument is falsy, returns an array of two empty strings.\n       * Throws an error if the name contains two or more ':' separators.\n       * Examples:\n       *   `'social:cake' -> ['social', 'cake']\n       *   'penguin' -> ['', 'penguin']\n       *   null -> ['', '']\n       *   'a:b:c' -> (throws Error)`\n       * @param {?} iconName\n       * @return {?}\n       */\n\n    }, {\n      key: \"_splitIconName\",\n      value: function _splitIconName(iconName) {\n        if (!iconName) {\n          return ['', ''];\n        }\n        /** @type {?} */\n\n\n        var parts = iconName.split(':');\n\n        switch (parts.length) {\n          case 1:\n            return ['', parts[0]];\n          // Use default namespace.\n\n          case 2:\n            return (\n              /** @type {?} */\n              parts\n            );\n\n          default:\n            throw Error(\"Invalid icon name: \\\"\".concat(iconName, \"\\\"\"));\n        }\n      }\n      /**\n       * @param {?} changes\n       * @return {?}\n       */\n\n    }, {\n      key: \"ngOnChanges\",\n      value: function ngOnChanges(changes) {\n        var _this7 = this;\n\n        // Only update the inline SVG icon if the inputs changed, to avoid unnecessary DOM operations.\n        if (changes[\"svgIcon\"]) {\n          if (this.svgIcon) {\n            var _this$_splitIconName = this._splitIconName(this.svgIcon),\n                _this$_splitIconName2 = _slicedToArray(_this$_splitIconName, 2),\n                namespace = _this$_splitIconName2[0],\n                iconName = _this$_splitIconName2[1];\n\n            this._iconRegistry.getNamedSvgIcon(iconName, namespace).pipe(take(1)).subscribe(function (svg) {\n              return _this7._setSvgElement(svg);\n            }, function (err) {\n              return console.log(\"Error retrieving icon: \".concat(err.message));\n            });\n          } else {\n            this._clearSvgElement();\n          }\n        }\n\n        if (this._usingFontIcon()) {\n          this._updateFontIconClasses();\n        }\n      }\n      /**\n       * @return {?}\n       */\n\n    }, {\n      key: \"ngOnInit\",\n      value: function ngOnInit() {\n        // Update font classes because ngOnChanges won't be called if none of the inputs are present,\n        // e.g. <mat-icon>arrow</mat-icon> In this case we need to add a CSS class for the default font.\n        if (this._usingFontIcon()) {\n          this._updateFontIconClasses();\n        }\n      }\n      /**\n       * @return {?}\n       */\n\n    }, {\n      key: \"ngAfterViewChecked\",\n      value: function ngAfterViewChecked() {\n        /** @type {?} */\n        var cachedElements = this._elementsWithExternalReferences;\n\n        if (cachedElements && this._location && cachedElements.size) {\n          /** @type {?} */\n          var newPath = this._location.getPathname(); // We need to check whether the URL has changed on each change detection since\n          // the browser doesn't have an API that will let us react on link clicks and\n          // we can't depend on the Angular router. The references need to be updated,\n          // because while most browsers don't care whether the URL is correct after\n          // the first render, Safari will break if the user navigates to a different\n          // page and the SVG isn't re-rendered.\n\n\n          if (newPath !== this._previousPath) {\n            this._previousPath = newPath;\n\n            this._prependPathToReferences(newPath);\n          }\n        }\n      }\n      /**\n       * @return {?}\n       */\n\n    }, {\n      key: \"ngOnDestroy\",\n      value: function ngOnDestroy() {\n        if (this._elementsWithExternalReferences) {\n          this._elementsWithExternalReferences.clear();\n        }\n      }\n      /**\n       * @return {?}\n       */\n\n    }, {\n      key: \"_usingFontIcon\",\n      value: function _usingFontIcon() {\n        return !this.svgIcon;\n      }\n      /**\n       * @param {?} svg\n       * @return {?}\n       */\n\n    }, {\n      key: \"_setSvgElement\",\n      value: function _setSvgElement(svg) {\n        this._clearSvgElement();\n        /** @type {?} */\n\n\n        var styleTags =\n        /** @type {?} */\n        svg.querySelectorAll('style');\n\n        for (var i = 0; i < styleTags.length; i++) {\n          styleTags[i].textContent += ' ';\n        } // Note: we do this fix here, rather than the icon registry, because the\n        // references have to point to the URL at the time that the icon was created.\n\n\n        if (this._location) {\n          /** @type {?} */\n          var path = this._location.getPathname();\n\n          this._previousPath = path;\n\n          this._cacheChildrenWithExternalReferences(svg);\n\n          this._prependPathToReferences(path);\n        }\n\n        this._elementRef.nativeElement.appendChild(svg);\n      }\n      /**\n       * @return {?}\n       */\n\n    }, {\n      key: \"_clearSvgElement\",\n      value: function _clearSvgElement() {\n        /** @type {?} */\n        var layoutElement = this._elementRef.nativeElement;\n        /** @type {?} */\n\n        var childCount = layoutElement.childNodes.length;\n\n        if (this._elementsWithExternalReferences) {\n          this._elementsWithExternalReferences.clear();\n        } // Remove existing non-element child nodes and SVGs, and add the new SVG element. Note that\n        // we can't use innerHTML, because IE will throw if the element has a data binding.\n\n\n        while (childCount--) {\n          /** @type {?} */\n          var child = layoutElement.childNodes[childCount]; // 1 corresponds to Node.ELEMENT_NODE. We remove all non-element nodes in order to get rid\n          // of any loose text nodes, as well as any SVG elements in order to remove any old icons.\n\n          if (child.nodeType !== 1 || child.nodeName.toLowerCase() === 'svg') {\n            layoutElement.removeChild(child);\n          }\n        }\n      }\n      /**\n       * @return {?}\n       */\n\n    }, {\n      key: \"_updateFontIconClasses\",\n      value: function _updateFontIconClasses() {\n        if (!this._usingFontIcon()) {\n          return;\n        }\n        /** @type {?} */\n\n\n        var elem = this._elementRef.nativeElement;\n        /** @type {?} */\n\n        var fontSetClass = this.fontSet ? this._iconRegistry.classNameForFontAlias(this.fontSet) : this._iconRegistry.getDefaultFontSetClass();\n\n        if (fontSetClass != this._previousFontSetClass) {\n          if (this._previousFontSetClass) {\n            elem.classList.remove(this._previousFontSetClass);\n          }\n\n          if (fontSetClass) {\n            elem.classList.add(fontSetClass);\n          }\n\n          this._previousFontSetClass = fontSetClass;\n        }\n\n        if (this.fontIcon != this._previousFontIconClass) {\n          if (this._previousFontIconClass) {\n            elem.classList.remove(this._previousFontIconClass);\n          }\n\n          if (this.fontIcon) {\n            elem.classList.add(this.fontIcon);\n          }\n\n          this._previousFontIconClass = this.fontIcon;\n        }\n      }\n      /**\n       * Cleans up a value to be used as a fontIcon or fontSet.\n       * Since the value ends up being assigned as a CSS class, we\n       * have to trim the value and omit space-separated values.\n       * @param {?} value\n       * @return {?}\n       */\n\n    }, {\n      key: \"_cleanupFontValue\",\n      value: function _cleanupFontValue(value) {\n        return typeof value === 'string' ? value.trim().split(' ')[0] : value;\n      }\n      /**\n       * Prepends the current path to all elements that have an attribute pointing to a `FuncIRI`\n       * reference. This is required because WebKit browsers require references to be prefixed with\n       * the current path, if the page has a `base` tag.\n       * @param {?} path\n       * @return {?}\n       */\n\n    }, {\n      key: \"_prependPathToReferences\",\n      value: function _prependPathToReferences(path) {\n        /** @type {?} */\n        var elements = this._elementsWithExternalReferences;\n\n        if (elements) {\n          elements.forEach(function (attrs, element) {\n            attrs.forEach(function (attr) {\n              element.setAttribute(attr.name, \"url('\".concat(path, \"#\").concat(attr.value, \"')\"));\n            });\n          });\n        }\n      }\n      /**\n       * Caches the children of an SVG element that have `url()`\n       * references that we need to prefix with the current path.\n       * @param {?} element\n       * @return {?}\n       */\n\n    }, {\n      key: \"_cacheChildrenWithExternalReferences\",\n      value: function _cacheChildrenWithExternalReferences(element) {\n        /** @type {?} */\n        var elementsWithFuncIri = element.querySelectorAll(funcIriAttributeSelector);\n        /** @type {?} */\n\n        var elements = this._elementsWithExternalReferences = this._elementsWithExternalReferences || new Map();\n\n        var _loop = function _loop(i) {\n          funcIriAttributes.forEach(function (attr) {\n            /** @type {?} */\n            var elementWithReference = elementsWithFuncIri[i];\n            /** @type {?} */\n\n            var value = elementWithReference.getAttribute(attr);\n            /** @type {?} */\n\n            var match = value ? value.match(funcIriPattern) : null;\n\n            if (match) {\n              /** @type {?} */\n              var attributes = elements.get(elementWithReference);\n\n              if (!attributes) {\n                attributes = [];\n                elements.set(elementWithReference, attributes);\n              }\n              /** @type {?} */\n\n\n              attributes.push({\n                name: attr,\n                value: match[1]\n              });\n            }\n          });\n        };\n\n        for (var i = 0; i < elementsWithFuncIri.length; i++) {\n          _loop(i);\n        }\n      }\n    }]);\n\n    return MatIcon;\n  }(_MatIconMixinBase);\n\n  MatIcon.ɵfac = function MatIcon_Factory(t) {\n    return new (t || MatIcon)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(MatIconRegistry), ɵngcc0.ɵɵinjectAttribute('aria-hidden'), ɵngcc0.ɵɵdirectiveInject(MAT_ICON_LOCATION, 8));\n  };\n\n  MatIcon.ɵcmp =\n  /*@__PURE__*/\n\n  /*@__PURE__*/\n  ɵngcc0.ɵɵdefineComponent({\n    type: MatIcon,\n    selectors: [[\"mat-icon\"]],\n    hostAttrs: [\"role\", \"img\", 1, \"mat-icon\"],\n    hostVars: 2,\n    hostBindings: function MatIcon_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"mat-icon-inline\", ctx.inline);\n      }\n    },\n    inputs: {\n      color: \"color\",\n      inline: \"inline\",\n      fontSet: \"fontSet\",\n      fontIcon: \"fontIcon\",\n      svgIcon: \"svgIcon\"\n    },\n    exportAs: [\"matIcon\"],\n    features: [ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature],\n    ngContentSelectors: _c0,\n    decls: 1,\n    vars: 0,\n    template: function MatIcon_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵprojection(0);\n      }\n    },\n    styles: [\".mat-icon{background-repeat:no-repeat;display:inline-block;fill:currentColor;height:24px;width:24px}.mat-icon.mat-icon-inline{font-size:inherit;height:inherit;line-height:inherit;width:inherit}[dir=rtl] .mat-icon-rtl-mirror{transform:scale(-1,1)}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .mat-icon,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .mat-icon{display:block}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .mat-icon-button .mat-icon,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .mat-icon-button .mat-icon{margin:auto}\"],\n    encapsulation: 2,\n    changeDetection: 0\n  });\n  return MatIcon;\n}();\n\nvar MatIconModule = /*@__PURE__*/function () {\n  var MatIconModule = function MatIconModule() {\n    _classCallCheck(this, MatIconModule);\n  };\n\n  MatIconModule.ɵfac = function MatIconModule_Factory(t) {\n    return new (t || MatIconModule)();\n  };\n\n  MatIconModule.ɵmod =\n  /*@__PURE__*/\n\n  /*@__PURE__*/\n  ɵngcc0.ɵɵdefineNgModule({\n    type: MatIconModule\n  });\n  MatIconModule.ɵinj =\n  /*@__PURE__*/\n\n  /*@__PURE__*/\n  ɵngcc0.ɵɵdefineInjector({\n    imports: [[MatCommonModule], MatCommonModule]\n  });\n  return MatIconModule;\n}();\n/*@__PURE__*/\n\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatIconModule, {\n    declarations: function declarations() {\n      return [MatIcon];\n    },\n    imports: function imports() {\n      return [MatCommonModule];\n    },\n    exports: function exports() {\n      return [MatIcon, MatCommonModule];\n    }\n  });\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n\nexport { MatIconModule, MAT_ICON_LOCATION_FACTORY, MatIconBase, _MatIconMixinBase, MAT_ICON_LOCATION, MatIcon, getMatIconNameNotFoundError, getMatIconNoHttpProviderError, getMatIconFailedToSanitizeUrlError, getMatIconFailedToSanitizeLiteralError, ICON_REGISTRY_PROVIDER_FACTORY, MatIconRegistry, ICON_REGISTRY_PROVIDER }; //# sourceMappingURL=icon.js.map","map":null,"metadata":{},"sourceType":"module"}