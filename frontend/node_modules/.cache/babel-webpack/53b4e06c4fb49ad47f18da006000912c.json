{"ast":null,"code":"import _slicedToArray from \"/Users/adepertat/Dropbox/ECOLES/Openclassroom/P6_de_Pertat_Antoine/AntoinedePertat_6_240521/frontend/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _toConsumableArray from \"/Users/adepertat/Dropbox/ECOLES/Openclassroom/P6_de_Pertat_Antoine/AntoinedePertat_6_240521/frontend/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _assertThisInitialized from \"/Users/adepertat/Dropbox/ECOLES/Openclassroom/P6_de_Pertat_Antoine/AntoinedePertat_6_240521/frontend/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"/Users/adepertat/Dropbox/ECOLES/Openclassroom/P6_de_Pertat_Antoine/AntoinedePertat_6_240521/frontend/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/adepertat/Dropbox/ECOLES/Openclassroom/P6_de_Pertat_Antoine/AntoinedePertat_6_240521/frontend/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _classCallCheck from \"/Users/adepertat/Dropbox/ECOLES/Openclassroom/P6_de_Pertat_Antoine/AntoinedePertat_6_240521/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/adepertat/Dropbox/ECOLES/Openclassroom/P6_de_Pertat_Antoine/AntoinedePertat_6_240521/frontend/node_modules/@babel/runtime/helpers/esm/createClass\";\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Directive, TemplateRef, ComponentFactoryResolver, ApplicationRef, Injector, ViewContainerRef, Inject, InjectionToken, ChangeDetectionStrategy, Component, ElementRef, ViewEncapsulation, Optional, ContentChild, ContentChildren, EventEmitter, Input, NgZone, Output, ViewChild, Self, NgModule } from '@angular/core';\nimport { TemplatePortal, DomPortalOutlet } from '@angular/cdk/portal';\nimport { DOCUMENT, CommonModule } from '@angular/common';\nimport { Subject, merge, Subscription, asapScheduler, of } from 'rxjs';\nimport { trigger, state, style, animate, transition, query, group } from '@angular/animations';\nimport { FocusMonitor, FocusKeyManager, isFakeMousedownFromScreenReader } from '@angular/cdk/a11y';\nimport { mixinDisabled, mixinDisableRipple, MatCommonModule, MatRippleModule } from '@angular/material/core';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { ESCAPE, LEFT_ARROW, RIGHT_ARROW, DOWN_ARROW, UP_ARROW } from '@angular/cdk/keycodes';\nimport { startWith, switchMap, take, delay, filter, takeUntil } from 'rxjs/operators';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { Overlay, OverlayConfig, OverlayModule } from '@angular/cdk/overlay';\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * Menu content that will be rendered lazily once the menu is opened.\n */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/a11y';\nimport * as ɵngcc2 from '@angular/material/core';\nimport * as ɵngcc3 from '@angular/common';\nimport * as ɵngcc4 from '@angular/cdk/overlay';\nimport * as ɵngcc5 from '@angular/cdk/bidi';\nvar _c0 = [\"mat-menu-item\", \"\"];\nvar _c1 = [\"*\"];\n\nfunction MatMenu_ng_template_0_Template(rf, ctx) {\n  if (rf & 1) {\n    var _r2 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵelementStart(0, \"div\", 0);\n    ɵngcc0.ɵɵlistener(\"keydown\", function MatMenu_ng_template_0_Template_div_keydown_0_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r2);\n      var ctx_r1 = ɵngcc0.ɵɵnextContext();\n      return ctx_r1._handleKeydown($event);\n    })(\"click\", function MatMenu_ng_template_0_Template_div_click_0_listener() {\n      ɵngcc0.ɵɵrestoreView(_r2);\n      var ctx_r3 = ɵngcc0.ɵɵnextContext();\n      return ctx_r3.closed.emit(\"click\");\n    })(\"@transformMenu.start\", function MatMenu_ng_template_0_Template_div_animation_transformMenu_start_0_listener() {\n      ɵngcc0.ɵɵrestoreView(_r2);\n      var ctx_r4 = ɵngcc0.ɵɵnextContext();\n      return ctx_r4._isAnimating = true;\n    })(\"@transformMenu.done\", function MatMenu_ng_template_0_Template_div_animation_transformMenu_done_0_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r2);\n      var ctx_r5 = ɵngcc0.ɵɵnextContext();\n      return ctx_r5._onAnimationDone($event);\n    });\n    ɵngcc0.ɵɵelementStart(1, \"div\", 1);\n    ɵngcc0.ɵɵprojection(2);\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"ngClass\", ctx_r0._classList)(\"@transformMenu\", ctx_r0._panelAnimationState);\n  }\n}\n\nvar MatMenuContent = /*@__PURE__*/function () {\n  var MatMenuContent = /*#__PURE__*/function () {\n    /**\n     * @param {?} _template\n     * @param {?} _componentFactoryResolver\n     * @param {?} _appRef\n     * @param {?} _injector\n     * @param {?} _viewContainerRef\n     * @param {?} _document\n     */\n    function MatMenuContent(_template, _componentFactoryResolver, _appRef, _injector, _viewContainerRef, _document) {\n      _classCallCheck(this, MatMenuContent);\n\n      this._template = _template;\n      this._componentFactoryResolver = _componentFactoryResolver;\n      this._appRef = _appRef;\n      this._injector = _injector;\n      this._viewContainerRef = _viewContainerRef;\n      this._document = _document;\n      /**\n       * Emits when the menu content has been attached.\n       */\n\n      this._attached = new Subject();\n    }\n    /**\n     * Attaches the content with a particular context.\n     * \\@docs-private\n     * @param {?=} context\n     * @return {?}\n     */\n\n\n    _createClass(MatMenuContent, [{\n      key: \"attach\",\n      value: function attach() {\n        var context = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n        if (!this._portal) {\n          this._portal = new TemplatePortal(this._template, this._viewContainerRef);\n        }\n\n        this.detach();\n\n        if (!this._outlet) {\n          this._outlet = new DomPortalOutlet(this._document.createElement('div'), this._componentFactoryResolver, this._appRef, this._injector);\n        }\n        /** @type {?} */\n\n\n        var element = this._template.elementRef.nativeElement;\n        /** @type {?} */\n\n        // Because we support opening the same menu from different triggers (which in turn have their\n        // own `OverlayRef` panel), we have to re-insert the host element every time, otherwise we\n        // risk it staying attached to a pane that's no longer in the DOM.\n        element.parentNode.insertBefore(this._outlet.outletElement, element);\n\n        this._portal.attach(this._outlet, context);\n\n        this._attached.next();\n      }\n      /**\n       * Detaches the content.\n       * \\@docs-private\n       * @return {?}\n       */\n\n    }, {\n      key: \"detach\",\n      value: function detach() {\n        if (this._portal.isAttached) {\n          this._portal.detach();\n        }\n      }\n      /**\n       * @return {?}\n       */\n\n    }, {\n      key: \"ngOnDestroy\",\n      value: function ngOnDestroy() {\n        if (this._outlet) {\n          this._outlet.dispose();\n        }\n      }\n    }]);\n\n    return MatMenuContent;\n  }();\n\n  MatMenuContent.ɵfac = function MatMenuContent_Factory(t) {\n    return new (t || MatMenuContent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ComponentFactoryResolver), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ApplicationRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Injector), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(DOCUMENT));\n  };\n\n  MatMenuContent.ɵdir =\n  /*@__PURE__*/\n\n  /*@__PURE__*/\n  ɵngcc0.ɵɵdefineDirective({\n    type: MatMenuContent,\n    selectors: [[\"ng-template\", \"matMenuContent\", \"\"]]\n  });\n  return MatMenuContent;\n}();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/** *\n * Animations used by the mat-menu component.\n * Animation duration and timing values are based on:\n * https://material.io/guidelines/components/menus.html#menus-usage\n * \\@docs-private\n  @type {?} */\n\n\nvar matMenuAnimations = {\n  /**\n     * This animation controls the menu panel's entry and exit from the page.\n     *\n     * When the menu panel is added to the DOM, it scales in and fades in its border.\n     *\n     * When the menu panel is removed from the DOM, it simply fades out after a brief\n     * delay to display the ripple.\n     */\n  transformMenu: /*@__PURE__*/trigger('transformMenu', [/*@__PURE__*/state('void', /*@__PURE__*/style({\n    opacity: 0,\n    transform: 'scale(0.8)'\n  })), /*@__PURE__*/transition('void => enter', /*@__PURE__*/group([/*@__PURE__*/query('.mat-menu-content', /*@__PURE__*/animate('100ms linear', /*@__PURE__*/style({\n    opacity: 1\n  }))), /*@__PURE__*/animate('120ms cubic-bezier(0, 0, 0.2, 1)', /*@__PURE__*/style({\n    transform: 'scale(1)'\n  }))])), /*@__PURE__*/transition('* => void', /*@__PURE__*/animate('100ms 25ms linear', /*@__PURE__*/style({\n    opacity: 0\n  })))]),\n\n  /**\n     * This animation fades in the background color and content of the menu panel\n     * after its containing element is scaled in.\n     */\n  fadeInItems: /*@__PURE__*/trigger('fadeInItems', [// TODO(crisbeto): this is inside the `transformMenu`\n  // now. Remove next time we do breaking changes.\n\n  /*@__PURE__*/\n  state('showing', /*@__PURE__*/style({\n    opacity: 1\n  })), /*@__PURE__*/transition('void => *', [/*@__PURE__*/style({\n    opacity: 0\n  }), /*@__PURE__*/animate('400ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)')])])\n};\n/** *\n * @deprecated\n * \\@breaking-change 8.0.0\n * \\@docs-private\n  @type {?} */\n\nvar fadeInItems = matMenuAnimations.fadeInItems;\n/** *\n * @deprecated\n * \\@breaking-change 8.0.0\n * \\@docs-private\n  @type {?} */\n\nvar transformMenu = matMenuAnimations.transformMenu;\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * Throws an exception for the case when menu trigger doesn't have a valid mat-menu instance\n * \\@docs-private\n * @return {?}\n */\n\nfunction throwMatMenuMissingError() {\n  throw Error(\"matMenuTriggerFor: must pass in an mat-menu instance.\\n\\n    Example:\\n      <mat-menu #menu=\\\"matMenu\\\"></mat-menu>\\n      <button [matMenuTriggerFor]=\\\"menu\\\"></button>\");\n}\n/**\n * Throws an exception for the case when menu's x-position value isn't valid.\n * In other words, it doesn't match 'before' or 'after'.\n * \\@docs-private\n * @return {?}\n */\n\n\nfunction throwMatMenuInvalidPositionX() {\n  throw Error(\"xPosition value must be either 'before' or after'.\\n      Example: <mat-menu xPosition=\\\"before\\\" #menu=\\\"matMenu\\\"></mat-menu>\");\n}\n/**\n * Throws an exception for the case when menu's y-position value isn't valid.\n * In other words, it doesn't match 'above' or 'below'.\n * \\@docs-private\n * @return {?}\n */\n\n\nfunction throwMatMenuInvalidPositionY() {\n  throw Error(\"yPosition value must be either 'above' or below'.\\n      Example: <mat-menu yPosition=\\\"above\\\" #menu=\\\"matMenu\\\"></mat-menu>\");\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/** *\n * Injection token used to provide the parent menu to menu-specific components.\n * \\@docs-private\n  @type {?} */\n\n\nvar MAT_MENU_PANEL = /*@__PURE__*/new InjectionToken('MAT_MENU_PANEL');\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * \\@docs-private\n */\n\nvar MatMenuItemBase = function MatMenuItemBase() {\n  _classCallCheck(this, MatMenuItemBase);\n};\n/** @type {?} */\n\n\nvar _MatMenuItemMixinBase = /*@__PURE__*/mixinDisableRipple( /*@__PURE__*/mixinDisabled(MatMenuItemBase));\n\nvar MatMenuItem = /*@__PURE__*/function () {\n  var MatMenuItem = /*#__PURE__*/function (_MatMenuItemMixinBase2) {\n    _inherits(MatMenuItem, _MatMenuItemMixinBase2);\n\n    var _super = _createSuper(MatMenuItem);\n\n    /**\n     * @param {?} _elementRef\n     * @param {?=} document\n     * @param {?=} _focusMonitor\n     * @param {?=} _parentMenu\n     */\n    function MatMenuItem(_elementRef, document, _focusMonitor, _parentMenu) {\n      var _this;\n\n      _classCallCheck(this, MatMenuItem);\n\n      // @breaking-change 8.0.0 make `_focusMonitor` and `document` required params.\n      _this = _super.call(this);\n      _this._elementRef = _elementRef;\n      _this._focusMonitor = _focusMonitor;\n      _this._parentMenu = _parentMenu;\n      /**\n       * Stream that emits when the menu item is hovered.\n       */\n\n      _this._hovered = new Subject();\n      /**\n       * Whether the menu item is highlighted.\n       */\n\n      _this._highlighted = false;\n      /**\n       * Whether the menu item acts as a trigger for a sub-menu.\n       */\n\n      _this._triggersSubmenu = false;\n\n      if (_focusMonitor) {\n        // Start monitoring the element so it gets the appropriate focused classes. We want\n        // to show the focus style for menu items only when the focus was not caused by a\n        // mouse or touch interaction.\n        _focusMonitor.monitor(_this._elementRef, false);\n      }\n\n      if (_parentMenu && _parentMenu.addItem) {\n        _parentMenu.addItem(_assertThisInitialized(_this));\n      }\n\n      _this._document = document;\n      return _this;\n    }\n    /**\n     * Focuses the menu item.\n     * @param {?=} origin\n     * @return {?}\n     */\n\n\n    _createClass(MatMenuItem, [{\n      key: \"focus\",\n      value: function focus() {\n        var origin = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'program';\n\n        if (this._focusMonitor) {\n          this._focusMonitor.focusVia(this._getHostElement(), origin);\n        } else {\n          this._getHostElement().focus();\n        }\n      }\n      /**\n       * @return {?}\n       */\n\n    }, {\n      key: \"ngOnDestroy\",\n      value: function ngOnDestroy() {\n        if (this._focusMonitor) {\n          this._focusMonitor.stopMonitoring(this._elementRef);\n        }\n\n        if (this._parentMenu && this._parentMenu.removeItem) {\n          this._parentMenu.removeItem(this);\n        }\n\n        this._hovered.complete();\n      }\n      /**\n       * Used to set the `tabindex`.\n       * @return {?}\n       */\n\n    }, {\n      key: \"_getTabIndex\",\n      value: function _getTabIndex() {\n        return this.disabled ? '-1' : '0';\n      }\n      /**\n       * Returns the host DOM element.\n       * @return {?}\n       */\n\n    }, {\n      key: \"_getHostElement\",\n      value: function _getHostElement() {\n        return this._elementRef.nativeElement;\n      }\n      /**\n       * Prevents the default element actions if it is disabled.\n       * @param {?} event\n       * @return {?}\n       */\n\n    }, {\n      key: \"_checkDisabled\",\n      value: function _checkDisabled(event) {\n        if (this.disabled) {\n          event.preventDefault();\n          event.stopPropagation();\n        }\n      }\n      /**\n       * Emits to the hover stream.\n       * @return {?}\n       */\n\n    }, {\n      key: \"_handleMouseEnter\",\n      value: function _handleMouseEnter() {\n        this._hovered.next(this);\n      }\n      /**\n       * Gets the label to be used when determining whether the option should be focused.\n       * @return {?}\n       */\n\n    }, {\n      key: \"getLabel\",\n      value: function getLabel() {\n        /** @type {?} */\n        var element = this._elementRef.nativeElement;\n        /** @type {?} */\n\n        var textNodeType = this._document ? this._document.TEXT_NODE : 3;\n        /** @type {?} */\n\n        var output = '';\n\n        if (element.childNodes) {\n          /** @type {?} */\n          var length = element.childNodes.length; // Go through all the top-level text nodes and extract their text.\n          // We skip anything that's not a text node to prevent the text from\n          // being thrown off by something like an icon.\n\n          for (var i = 0; i < length; i++) {\n            if (element.childNodes[i].nodeType === textNodeType) {\n              output += element.childNodes[i].textContent;\n            }\n          }\n        }\n\n        return output.trim();\n      }\n    }]);\n\n    return MatMenuItem;\n  }(_MatMenuItemMixinBase);\n\n  MatMenuItem.ɵfac = function MatMenuItem_Factory(t) {\n    return new (t || MatMenuItem)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(DOCUMENT), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.FocusMonitor), ɵngcc0.ɵɵdirectiveInject(MAT_MENU_PANEL, 8));\n  };\n\n  MatMenuItem.ɵcmp =\n  /*@__PURE__*/\n\n  /*@__PURE__*/\n  ɵngcc0.ɵɵdefineComponent({\n    type: MatMenuItem,\n    selectors: [[\"\", \"mat-menu-item\", \"\"]],\n    hostAttrs: [\"role\", \"menuitem\", 1, \"mat-menu-item\"],\n    hostVars: 7,\n    hostBindings: function MatMenuItem_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"click\", function MatMenuItem_click_HostBindingHandler($event) {\n          return ctx._checkDisabled($event);\n        })(\"mouseenter\", function MatMenuItem_mouseenter_HostBindingHandler() {\n          return ctx._handleMouseEnter();\n        });\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"tabindex\", ctx._getTabIndex())(\"aria-disabled\", ctx.disabled.toString())(\"disabled\", ctx.disabled || null);\n        ɵngcc0.ɵɵclassProp(\"mat-menu-item-highlighted\", ctx._highlighted)(\"mat-menu-item-submenu-trigger\", ctx._triggersSubmenu);\n      }\n    },\n    inputs: {\n      disabled: \"disabled\",\n      disableRipple: \"disableRipple\"\n    },\n    exportAs: [\"matMenuItem\"],\n    features: [ɵngcc0.ɵɵInheritDefinitionFeature],\n    attrs: _c0,\n    ngContentSelectors: _c1,\n    decls: 2,\n    vars: 2,\n    consts: [[\"matRipple\", \"\", 1, \"mat-menu-ripple\", 3, \"matRippleDisabled\", \"matRippleTrigger\"]],\n    template: function MatMenuItem_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵprojection(0);\n        ɵngcc0.ɵɵelement(1, \"div\", 0);\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"matRippleDisabled\", ctx.disableRipple || ctx.disabled)(\"matRippleTrigger\", ctx._getHostElement());\n      }\n    },\n    directives: [ɵngcc2.MatRipple],\n    encapsulation: 2,\n    changeDetection: 0\n  });\n  return MatMenuItem;\n}();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/** *\n * Injection token to be used to override the default options for `mat-menu`.\n  @type {?} */\n\n\nvar MAT_MENU_DEFAULT_OPTIONS = /*@__PURE__*/new InjectionToken('mat-menu-default-options', {\n  providedIn: 'root',\n  factory: MAT_MENU_DEFAULT_OPTIONS_FACTORY\n});\n/**\n * \\@docs-private\n * @return {?}\n */\n\nfunction MAT_MENU_DEFAULT_OPTIONS_FACTORY() {\n  return {\n    overlapTrigger: false,\n    xPosition: 'after',\n    yPosition: 'below',\n    backdropClass: 'cdk-overlay-transparent-backdrop'\n  };\n}\n/** *\n * Start elevation for the menu panel.\n * \\@docs-private\n  @type {?} */\n\n\nvar MAT_MENU_BASE_ELEVATION = 4;\n\nvar MatMenu = /*@__PURE__*/function () {\n  var MatMenu = /*#__PURE__*/function () {\n    /**\n     * @param {?} _elementRef\n     * @param {?} _ngZone\n     * @param {?} _defaultOptions\n     */\n    function MatMenu(_elementRef, _ngZone, _defaultOptions) {\n      _classCallCheck(this, MatMenu);\n\n      this._elementRef = _elementRef;\n      this._ngZone = _ngZone;\n      this._defaultOptions = _defaultOptions;\n      this._xPosition = this._defaultOptions.xPosition;\n      this._yPosition = this._defaultOptions.yPosition;\n      /**\n       * Menu items inside the current menu.\n       */\n\n      this._items = [];\n      /**\n       * Emits whenever the amount of menu items changes.\n       */\n\n      this._itemChanges = new Subject();\n      /**\n       * Subscription to tab events on the menu panel\n       */\n\n      this._tabSubscription = Subscription.EMPTY;\n      /**\n       * Config object to be passed into the menu's ngClass\n       */\n\n      this._classList = {};\n      /**\n       * Current state of the panel animation.\n       */\n\n      this._panelAnimationState = 'void';\n      /**\n       * Emits whenever an animation on the menu completes.\n       */\n\n      this._animationDone = new Subject();\n      /**\n       * Class to be added to the backdrop element.\n       */\n\n      this.backdropClass = this._defaultOptions.backdropClass;\n      this._overlapTrigger = this._defaultOptions.overlapTrigger;\n      this._hasBackdrop = this._defaultOptions.hasBackdrop;\n      /**\n       * Event emitted when the menu is closed.\n       */\n\n      this.closed = new EventEmitter();\n      /**\n       * Event emitted when the menu is closed.\n       * @deprecated Switch to `closed` instead\n       * \\@breaking-change 8.0.0\n       */\n\n      this.close = this.closed;\n    }\n    /**\n     * Position of the menu in the X axis.\n     * @return {?}\n     */\n\n\n    _createClass(MatMenu, [{\n      key: \"xPosition\",\n      get: function get() {\n        return this._xPosition;\n      }\n      /**\n       * @param {?} value\n       * @return {?}\n       */\n      ,\n      set: function set(value) {\n        if (value !== 'before' && value !== 'after') {\n          throwMatMenuInvalidPositionX();\n        }\n\n        this._xPosition = value;\n        this.setPositionClasses();\n      }\n      /**\n       * Position of the menu in the Y axis.\n       * @return {?}\n       */\n\n    }, {\n      key: \"yPosition\",\n      get: function get() {\n        return this._yPosition;\n      }\n      /**\n       * @param {?} value\n       * @return {?}\n       */\n      ,\n      set: function set(value) {\n        if (value !== 'above' && value !== 'below') {\n          throwMatMenuInvalidPositionY();\n        }\n\n        this._yPosition = value;\n        this.setPositionClasses();\n      }\n      /**\n       * Whether the menu should overlap its trigger.\n       * @return {?}\n       */\n\n    }, {\n      key: \"overlapTrigger\",\n      get: function get() {\n        return this._overlapTrigger;\n      }\n      /**\n       * @param {?} value\n       * @return {?}\n       */\n      ,\n      set: function set(value) {\n        this._overlapTrigger = coerceBooleanProperty(value);\n      }\n      /**\n       * Whether the menu has a backdrop.\n       * @return {?}\n       */\n\n    }, {\n      key: \"hasBackdrop\",\n      get: function get() {\n        return this._hasBackdrop;\n      }\n      /**\n       * @param {?} value\n       * @return {?}\n       */\n      ,\n      set: function set(value) {\n        this._hasBackdrop = coerceBooleanProperty(value);\n      }\n      /**\n       * This method takes classes set on the host mat-menu element and applies them on the\n       * menu template that displays in the overlay container.  Otherwise, it's difficult\n       * to style the containing menu from outside the component.\n       * @param {?} classes list of class names\n       * @return {?}\n       */\n\n    }, {\n      key: \"panelClass\",\n      set: function set(classes) {\n        if (classes && classes.length) {\n          this._classList = classes.split(' ').reduce(function (obj, className) {\n            obj[className] = true;\n            return obj;\n          }, {});\n          this._elementRef.nativeElement.className = '';\n        }\n      }\n      /**\n       * This method takes classes set on the host mat-menu element and applies them on the\n       * menu template that displays in the overlay container.  Otherwise, it's difficult\n       * to style the containing menu from outside the component.\n       * @deprecated Use `panelClass` instead.\n       * \\@breaking-change 8.0.0\n       * @return {?}\n       */\n\n    }, {\n      key: \"classList\",\n      get: function get() {\n        return this.panelClass;\n      }\n      /**\n       * @param {?} classes\n       * @return {?}\n       */\n      ,\n      set: function set(classes) {\n        this.panelClass = classes;\n      }\n      /**\n       * @return {?}\n       */\n\n    }, {\n      key: \"ngOnInit\",\n      value: function ngOnInit() {\n        this.setPositionClasses();\n      }\n      /**\n       * @return {?}\n       */\n\n    }, {\n      key: \"ngAfterContentInit\",\n      value: function ngAfterContentInit() {\n        var _this2 = this;\n\n        this._keyManager = new FocusKeyManager(this._items).withWrap().withTypeAhead();\n        this._tabSubscription = this._keyManager.tabOut.subscribe(function () {\n          return _this2.closed.emit('tab');\n        });\n      }\n      /**\n       * @return {?}\n       */\n\n    }, {\n      key: \"ngOnDestroy\",\n      value: function ngOnDestroy() {\n        this._tabSubscription.unsubscribe();\n\n        this.closed.complete();\n      }\n      /**\n       * Stream that emits whenever the hovered menu item changes.\n       * @return {?}\n       */\n\n    }, {\n      key: \"_hovered\",\n      value: function _hovered() {\n        return this._itemChanges.pipe(startWith(this._items), switchMap(function (items) {\n          return merge.apply(void 0, _toConsumableArray(items.map(function (item) {\n            return item._hovered;\n          })));\n        }));\n      }\n      /**\n       * Handle a keyboard event from the menu, delegating to the appropriate action.\n       * @param {?} event\n       * @return {?}\n       */\n\n    }, {\n      key: \"_handleKeydown\",\n      value: function _handleKeydown(event) {\n        /** @type {?} */\n        var keyCode = event.keyCode;\n\n        switch (keyCode) {\n          case ESCAPE:\n            this.closed.emit('keydown');\n            break;\n\n          case LEFT_ARROW:\n            if (this.parentMenu && this.direction === 'ltr') {\n              this.closed.emit('keydown');\n            }\n\n            break;\n\n          case RIGHT_ARROW:\n            if (this.parentMenu && this.direction === 'rtl') {\n              this.closed.emit('keydown');\n            }\n\n            break;\n\n          default:\n            if (keyCode === UP_ARROW || keyCode === DOWN_ARROW) {\n              this._keyManager.setFocusOrigin('keyboard');\n            }\n\n            this._keyManager.onKeydown(event);\n\n        }\n      }\n      /**\n       * Focus the first item in the menu.\n       * @param {?=} origin Action from which the focus originated. Used to set the correct styling.\n       * @return {?}\n       */\n\n    }, {\n      key: \"focusFirstItem\",\n      value: function focusFirstItem() {\n        var _this3 = this;\n\n        var origin = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'program';\n\n        // When the content is rendered lazily, it takes a bit before the items are inside the DOM.\n        if (this.lazyContent) {\n          this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(function () {\n            return _this3._keyManager.setFocusOrigin(origin).setFirstItemActive();\n          });\n        } else {\n          this._keyManager.setFocusOrigin(origin).setFirstItemActive();\n        }\n      }\n      /**\n       * Resets the active item in the menu. This is used when the menu is opened, allowing\n       * the user to start from the first option when pressing the down arrow.\n       * @return {?}\n       */\n\n    }, {\n      key: \"resetActiveItem\",\n      value: function resetActiveItem() {\n        this._keyManager.setActiveItem(-1);\n      }\n      /**\n       * Sets the menu panel elevation.\n       * @param {?} depth Number of parent menus that come before the menu.\n       * @return {?}\n       */\n\n    }, {\n      key: \"setElevation\",\n      value: function setElevation(depth) {\n        /** @type {?} */\n        var newElevation = \"mat-elevation-z\".concat(MAT_MENU_BASE_ELEVATION + depth);\n        /** @type {?} */\n\n        var customElevation = Object.keys(this._classList).find(function (c) {\n          return c.startsWith('mat-elevation-z');\n        });\n\n        if (!customElevation || customElevation === this._previousElevation) {\n          if (this._previousElevation) {\n            this._classList[this._previousElevation] = false;\n          }\n\n          this._classList[newElevation] = true;\n          this._previousElevation = newElevation;\n        }\n      }\n      /**\n       * Registers a menu item with the menu.\n       * \\@docs-private\n       * @param {?} item\n       * @return {?}\n       */\n\n    }, {\n      key: \"addItem\",\n      value: function addItem(item) {\n        // We register the items through this method, rather than picking them up through\n        // `ContentChildren`, because we need the items to be picked up by their closest\n        // `mat-menu` ancestor. If we used `@ContentChildren(MatMenuItem, {descendants: true})`,\n        // all descendant items will bleed into the top-level menu in the case where the consumer\n        // has `mat-menu` instances nested inside each other.\n        if (this._items.indexOf(item) === -1) {\n          this._items.push(item);\n\n          this._itemChanges.next(this._items);\n        }\n      }\n      /**\n       * Removes an item from the menu.\n       * \\@docs-private\n       * @param {?} item\n       * @return {?}\n       */\n\n    }, {\n      key: \"removeItem\",\n      value: function removeItem(item) {\n        /** @type {?} */\n        var index = this._items.indexOf(item);\n\n        if (this._items.indexOf(item) > -1) {\n          this._items.splice(index, 1);\n\n          this._itemChanges.next(this._items);\n        }\n      }\n      /**\n       * Adds classes to the menu panel based on its position. Can be used by\n       * consumers to add specific styling based on the position.\n       * \\@docs-private\n       * @param {?=} posX Position of the menu along the x axis.\n       * @param {?=} posY Position of the menu along the y axis.\n       * @return {?}\n       */\n\n    }, {\n      key: \"setPositionClasses\",\n      value: function setPositionClasses() {\n        var posX = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.xPosition;\n        var posY = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.yPosition;\n\n        /** @type {?} */\n        var classes = this._classList;\n        classes['mat-menu-before'] = posX === 'before';\n        classes['mat-menu-after'] = posX === 'after';\n        classes['mat-menu-above'] = posY === 'above';\n        classes['mat-menu-below'] = posY === 'below';\n      }\n      /**\n       * Starts the enter animation.\n       * @return {?}\n       */\n\n    }, {\n      key: \"_startAnimation\",\n      value: function _startAnimation() {\n        // @breaking-change 8.0.0 Combine with _resetAnimation.\n        this._panelAnimationState = 'enter';\n      }\n      /**\n       * Resets the panel animation to its initial state.\n       * @return {?}\n       */\n\n    }, {\n      key: \"_resetAnimation\",\n      value: function _resetAnimation() {\n        // @breaking-change 8.0.0 Combine with _startAnimation.\n        this._panelAnimationState = 'void';\n      }\n      /**\n       * Callback that is invoked when the panel animation completes.\n       * @param {?} event\n       * @return {?}\n       */\n\n    }, {\n      key: \"_onAnimationDone\",\n      value: function _onAnimationDone(event) {\n        this._animationDone.next(event);\n\n        this._isAnimating = false; // Scroll the content element to the top once the animation is done. This is necessary, because\n        // we move focus to the first item while it's still being animated, which can throw the browser\n        // off when it determines the scroll position. Alternatively we can move focus when the\n        // animation is done, however moving focus asynchronously will interrupt screen readers\n        // which are in the process of reading out the menu already. We take the `element` from\n        // the `event` since we can't use a `ViewChild` to access the pane.\n\n        if (event.toState === 'enter' && this._keyManager.activeItemIndex === 0) {\n          event.element.scrollTop = 0;\n        }\n      }\n    }]);\n\n    return MatMenu;\n  }();\n\n  MatMenu.ɵfac = function MatMenu_Factory(t) {\n    return new (t || MatMenu)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(MAT_MENU_DEFAULT_OPTIONS));\n  };\n\n  MatMenu.ɵcmp =\n  /*@__PURE__*/\n\n  /*@__PURE__*/\n  ɵngcc0.ɵɵdefineComponent({\n    type: MatMenu,\n    selectors: [[\"mat-menu\"]],\n    contentQueries: function MatMenu_ContentQueries(rf, ctx, dirIndex) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MatMenuContent, 5);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MatMenuItem, 4);\n      }\n\n      if (rf & 2) {\n        var _t;\n\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.lazyContent = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.items = _t);\n      }\n    },\n    viewQuery: function MatMenu_Query(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(TemplateRef, 5);\n      }\n\n      if (rf & 2) {\n        var _t;\n\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.templateRef = _t.first);\n      }\n    },\n    inputs: {\n      backdropClass: \"backdropClass\",\n      xPosition: \"xPosition\",\n      yPosition: \"yPosition\",\n      overlapTrigger: \"overlapTrigger\",\n      hasBackdrop: \"hasBackdrop\",\n      panelClass: [\"class\", \"panelClass\"],\n      classList: \"classList\"\n    },\n    outputs: {\n      closed: \"closed\",\n      close: \"close\"\n    },\n    exportAs: [\"matMenu\"],\n    features: [/*@__PURE__*/ɵngcc0.ɵɵProvidersFeature([{\n      provide: MAT_MENU_PANEL,\n      useExisting: MatMenu\n    }])],\n    ngContentSelectors: _c1,\n    decls: 1,\n    vars: 0,\n    consts: [[\"tabindex\", \"-1\", \"role\", \"menu\", 1, \"mat-menu-panel\", 3, \"ngClass\", \"keydown\", \"click\"], [1, \"mat-menu-content\"]],\n    template: function MatMenu_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵtemplate(0, MatMenu_ng_template_0_Template, 3, 2, \"ng-template\");\n      }\n    },\n    directives: [ɵngcc3.NgClass],\n    styles: [\".mat-menu-panel{min-width:112px;max-width:280px;overflow:auto;-webkit-overflow-scrolling:touch;max-height:calc(100vh - 48px);border-radius:4px;outline:0}@media screen and (-ms-high-contrast:active){.mat-menu-panel{outline:solid 1px}}.mat-menu-content:not(:empty){padding-top:8px;padding-bottom:8px}.mat-menu-item{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:pointer;outline:0;border:none;-webkit-tap-highlight-color:transparent;white-space:nowrap;overflow:hidden;text-overflow:ellipsis;display:block;line-height:48px;height:48px;padding:0 16px;text-align:left;text-decoration:none;max-width:100%;position:relative}.mat-menu-item::-moz-focus-inner{border:0}.mat-menu-item[disabled]{cursor:default}[dir=rtl] .mat-menu-item{text-align:right}.mat-menu-item .mat-icon{margin-right:16px;vertical-align:middle}.mat-menu-item .mat-icon svg{vertical-align:top}[dir=rtl] .mat-menu-item .mat-icon{margin-left:16px;margin-right:0}@media screen and (-ms-high-contrast:active){.mat-menu-item-highlighted,.mat-menu-item.cdk-keyboard-focused,.mat-menu-item.cdk-program-focused{outline:dotted 1px}}.mat-menu-item-submenu-trigger{padding-right:32px}.mat-menu-item-submenu-trigger::after{width:0;height:0;border-style:solid;border-width:5px 0 5px 5px;border-color:transparent transparent transparent currentColor;content:'';display:inline-block;position:absolute;top:50%;right:16px;transform:translateY(-50%)}[dir=rtl] .mat-menu-item-submenu-trigger{padding-right:16px;padding-left:32px}[dir=rtl] .mat-menu-item-submenu-trigger::after{right:auto;left:16px;transform:rotateY(180deg) translateY(-50%)}.mat-menu-panel.ng-animating .mat-menu-item-submenu-trigger{pointer-events:none}button.mat-menu-item{width:100%}.mat-menu-item .mat-menu-ripple{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none}\"],\n    encapsulation: 2,\n    data: {\n      animation: [matMenuAnimations.transformMenu, matMenuAnimations.fadeInItems]\n    },\n    changeDetection: 0\n  });\n  return MatMenu;\n}();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/** *\n * Injection token that determines the scroll handling while the menu is open.\n  @type {?} */\n\n\nvar MAT_MENU_SCROLL_STRATEGY = /*@__PURE__*/new InjectionToken('mat-menu-scroll-strategy');\n/**\n * \\@docs-private\n * @param {?} overlay\n * @return {?}\n */\n\nfunction MAT_MENU_SCROLL_STRATEGY_FACTORY(overlay) {\n  return function () {\n    return overlay.scrollStrategies.reposition();\n  };\n}\n/** *\n * \\@docs-private\n  @type {?} */\n\n\nvar MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_MENU_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_MENU_SCROLL_STRATEGY_FACTORY\n};\n/** *\n * Default top padding of the menu panel.\n  @type {?} */\n\nvar MENU_PANEL_TOP_PADDING = 8;\n\nvar MatMenuTrigger = /*@__PURE__*/function () {\n  var MatMenuTrigger = /*#__PURE__*/function () {\n    /**\n     * @param {?} _overlay\n     * @param {?} _element\n     * @param {?} _viewContainerRef\n     * @param {?} scrollStrategy\n     * @param {?} _parentMenu\n     * @param {?} _menuItemInstance\n     * @param {?} _dir\n     * @param {?=} _focusMonitor\n     */\n    function MatMenuTrigger(_overlay, _element, _viewContainerRef, scrollStrategy, _parentMenu, _menuItemInstance, _dir, _focusMonitor) {\n      _classCallCheck(this, MatMenuTrigger);\n\n      this._overlay = _overlay;\n      this._element = _element;\n      this._viewContainerRef = _viewContainerRef;\n      this._parentMenu = _parentMenu;\n      this._menuItemInstance = _menuItemInstance;\n      this._dir = _dir;\n      this._focusMonitor = _focusMonitor;\n      this._overlayRef = null;\n      this._menuOpen = false;\n      this._closeSubscription = Subscription.EMPTY;\n      this._hoverSubscription = Subscription.EMPTY; // Tracking input type is necessary so it's possible to only auto-focus\n      // the first item of the list when the menu is opened via the keyboard\n\n      this._openedBy = null;\n      /**\n       * Event emitted when the associated menu is opened.\n       */\n\n      this.menuOpened = new EventEmitter();\n      /**\n       * Event emitted when the associated menu is opened.\n       * @deprecated Switch to `menuOpened` instead\n       * \\@breaking-change 8.0.0\n       */\n\n      this.onMenuOpen = this.menuOpened;\n      /**\n       * Event emitted when the associated menu is closed.\n       */\n\n      this.menuClosed = new EventEmitter();\n      /**\n       * Event emitted when the associated menu is closed.\n       * @deprecated Switch to `menuClosed` instead\n       * \\@breaking-change 8.0.0\n       */\n\n      this.onMenuClose = this.menuClosed;\n\n      if (_menuItemInstance) {\n        _menuItemInstance._triggersSubmenu = this.triggersSubmenu();\n      }\n\n      this._scrollStrategy = scrollStrategy;\n    }\n    /**\n     * @deprecated\n     * \\@breaking-change 8.0.0\n     * @return {?}\n     */\n\n\n    _createClass(MatMenuTrigger, [{\n      key: \"_deprecatedMatMenuTriggerFor\",\n      get: function get() {\n        return this.menu;\n      }\n      /**\n       * @param {?} v\n       * @return {?}\n       */\n      ,\n      set: function set(v) {\n        this.menu = v;\n      }\n      /**\n       * @return {?}\n       */\n\n    }, {\n      key: \"ngAfterContentInit\",\n      value: function ngAfterContentInit() {\n        var _this4 = this;\n\n        this._checkMenu();\n\n        this.menu.close.asObservable().subscribe(function (reason) {\n          _this4._destroyMenu(); // If a click closed the menu, we should close the entire chain of nested menus.\n\n\n          if ((reason === 'click' || reason === 'tab') && _this4._parentMenu) {\n            _this4._parentMenu.closed.emit(reason);\n          }\n        });\n\n        this._handleHover();\n      }\n      /**\n       * @return {?}\n       */\n\n    }, {\n      key: \"ngOnDestroy\",\n      value: function ngOnDestroy() {\n        if (this._overlayRef) {\n          this._overlayRef.dispose();\n\n          this._overlayRef = null;\n        }\n\n        this._cleanUpSubscriptions();\n      }\n      /**\n       * Whether the menu is open.\n       * @return {?}\n       */\n\n    }, {\n      key: \"menuOpen\",\n      get: function get() {\n        return this._menuOpen;\n      }\n      /**\n       * The text direction of the containing app.\n       * @return {?}\n       */\n\n    }, {\n      key: \"dir\",\n      get: function get() {\n        return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n      }\n      /**\n       * Whether the menu triggers a sub-menu or a top-level one.\n       * @return {?}\n       */\n\n    }, {\n      key: \"triggersSubmenu\",\n      value: function triggersSubmenu() {\n        return !!(this._menuItemInstance && this._parentMenu);\n      }\n      /**\n       * Toggles the menu between the open and closed states.\n       * @return {?}\n       */\n\n    }, {\n      key: \"toggleMenu\",\n      value: function toggleMenu() {\n        return this._menuOpen ? this.closeMenu() : this.openMenu();\n      }\n      /**\n       * Opens the menu.\n       * @return {?}\n       */\n\n    }, {\n      key: \"openMenu\",\n      value: function openMenu() {\n        var _this5 = this;\n\n        if (this._menuOpen) {\n          return;\n        }\n\n        this._checkMenu();\n        /** @type {?} */\n\n\n        var overlayRef = this._createOverlay();\n\n        this._setPosition(\n        /** @type {?} */\n        overlayRef.getConfig().positionStrategy);\n\n        overlayRef.attach(this._portal);\n\n        if (this.menu.lazyContent) {\n          this.menu.lazyContent.attach(this.menuData);\n        }\n\n        this._closeSubscription = this._menuClosingActions().subscribe(function () {\n          return _this5.closeMenu();\n        });\n\n        this._initMenu();\n\n        if (this.menu instanceof MatMenu) {\n          this.menu._startAnimation();\n        }\n      }\n      /**\n       * Closes the menu.\n       * @return {?}\n       */\n\n    }, {\n      key: \"closeMenu\",\n      value: function closeMenu() {\n        this.menu.close.emit();\n      }\n      /**\n       * Focuses the menu trigger.\n       * @param {?=} origin Source of the menu trigger's focus.\n       * @return {?}\n       */\n\n    }, {\n      key: \"focus\",\n      value: function focus() {\n        var origin = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'program';\n\n        if (this._focusMonitor) {\n          this._focusMonitor.focusVia(this._element, origin);\n        } else {\n          this._element.nativeElement.focus();\n        }\n      }\n      /**\n       * Closes the menu and does the necessary cleanup.\n       * @return {?}\n       */\n\n    }, {\n      key: \"_destroyMenu\",\n      value: function _destroyMenu() {\n        var _this6 = this;\n\n        if (!this._overlayRef || !this.menuOpen) {\n          return;\n        }\n        /** @type {?} */\n\n\n        var menu = this.menu;\n\n        this._closeSubscription.unsubscribe();\n\n        this._overlayRef.detach();\n\n        if (menu instanceof MatMenu) {\n          menu._resetAnimation();\n\n          if (menu.lazyContent) {\n            // Wait for the exit animation to finish before detaching the content.\n            menu._animationDone.pipe(filter(function (event) {\n              return event.toState === 'void';\n            }), take(1), // Interrupt if the content got re-attached.\n            takeUntil(menu.lazyContent._attached)).subscribe(function () {\n              return (\n                /** @type {?} */\n                menu.lazyContent.detach()\n              );\n            }, undefined, function () {\n              // No matter whether the content got re-attached, reset the menu.\n              _this6._resetMenu();\n            });\n          } else {\n            this._resetMenu();\n          }\n        } else {\n          this._resetMenu();\n\n          if (menu.lazyContent) {\n            menu.lazyContent.detach();\n          }\n        }\n      }\n      /**\n       * This method sets the menu state to open and focuses the first item if\n       * the menu was opened via the keyboard.\n       * @return {?}\n       */\n\n    }, {\n      key: \"_initMenu\",\n      value: function _initMenu() {\n        this.menu.parentMenu = this.triggersSubmenu() ? this._parentMenu : undefined;\n        this.menu.direction = this.dir;\n\n        this._setMenuElevation();\n\n        this._setIsMenuOpen(true);\n\n        this.menu.focusFirstItem(this._openedBy || 'program');\n      }\n      /**\n       * Updates the menu elevation based on the amount of parent menus that it has.\n       * @return {?}\n       */\n\n    }, {\n      key: \"_setMenuElevation\",\n      value: function _setMenuElevation() {\n        if (this.menu.setElevation) {\n          /** @type {?} */\n          var depth = 0;\n          /** @type {?} */\n\n          var parentMenu = this.menu.parentMenu;\n\n          while (parentMenu) {\n            depth++;\n            parentMenu = parentMenu.parentMenu;\n          }\n\n          this.menu.setElevation(depth);\n        }\n      }\n      /**\n       * This method resets the menu when it's closed, most importantly restoring\n       * focus to the menu trigger if the menu was opened via the keyboard.\n       * @return {?}\n       */\n\n    }, {\n      key: \"_resetMenu\",\n      value: function _resetMenu() {\n        this._setIsMenuOpen(false); // We should reset focus if the user is navigating using a keyboard or\n        // if we have a top-level trigger which might cause focus to be lost\n        // when clicking on the backdrop.\n\n\n        if (!this._openedBy) {\n          // Note that the focus style will show up both for `program` and\n          // `keyboard` so we don't have to specify which one it is.\n          this.focus();\n        } else if (!this.triggersSubmenu()) {\n          this.focus(this._openedBy);\n        }\n\n        this._openedBy = null;\n      }\n      /**\n       * @param {?} isOpen\n       * @return {?}\n       */\n\n    }, {\n      key: \"_setIsMenuOpen\",\n      value: function _setIsMenuOpen(isOpen) {\n        this._menuOpen = isOpen;\n        this._menuOpen ? this.menuOpened.emit() : this.menuClosed.emit();\n\n        if (this.triggersSubmenu()) {\n          this._menuItemInstance._highlighted = isOpen;\n        }\n      }\n      /**\n       * This method checks that a valid instance of MatMenu has been passed into\n       * matMenuTriggerFor. If not, an exception is thrown.\n       * @return {?}\n       */\n\n    }, {\n      key: \"_checkMenu\",\n      value: function _checkMenu() {\n        if (!this.menu) {\n          throwMatMenuMissingError();\n        }\n      }\n      /**\n       * This method creates the overlay from the provided menu's template and saves its\n       * OverlayRef so that it can be attached to the DOM when openMenu is called.\n       * @return {?}\n       */\n\n    }, {\n      key: \"_createOverlay\",\n      value: function _createOverlay() {\n        if (!this._overlayRef) {\n          this._portal = new TemplatePortal(this.menu.templateRef, this._viewContainerRef);\n          /** @type {?} */\n\n          var config = this._getOverlayConfig();\n\n          this._subscribeToPositions(\n          /** @type {?} */\n          config.positionStrategy);\n\n          this._overlayRef = this._overlay.create(config); // Consume the `keydownEvents` in order to prevent them from going to another overlay.\n          // Ideally we'd also have our keyboard event logic in here, however doing so will\n          // break anybody that may have implemented the `MatMenuPanel` themselves.\n\n          this._overlayRef.keydownEvents().subscribe();\n        }\n\n        return this._overlayRef;\n      }\n      /**\n       * This method builds the configuration object needed to create the overlay, the OverlayState.\n       * @return {?} OverlayConfig\n       */\n\n    }, {\n      key: \"_getOverlayConfig\",\n      value: function _getOverlayConfig() {\n        return new OverlayConfig({\n          positionStrategy: this._overlay.position().flexibleConnectedTo(this._element).withLockedPosition().withTransformOriginOn('.mat-menu-panel'),\n          hasBackdrop: this.menu.hasBackdrop == null ? !this.triggersSubmenu() : this.menu.hasBackdrop,\n          backdropClass: this.menu.backdropClass || 'cdk-overlay-transparent-backdrop',\n          scrollStrategy: this._scrollStrategy(),\n          direction: this._dir\n        });\n      }\n      /**\n       * Listens to changes in the position of the overlay and sets the correct classes\n       * on the menu based on the new position. This ensures the animation origin is always\n       * correct, even if a fallback position is used for the overlay.\n       * @param {?} position\n       * @return {?}\n       */\n\n    }, {\n      key: \"_subscribeToPositions\",\n      value: function _subscribeToPositions(position) {\n        var _this7 = this;\n\n        if (this.menu.setPositionClasses) {\n          position.positionChanges.subscribe(function (change) {\n            /** @type {?} */\n            var posX = change.connectionPair.overlayX === 'start' ? 'after' : 'before';\n            /** @type {?} */\n\n            var posY = change.connectionPair.overlayY === 'top' ? 'below' : 'above';\n            /** @type {?} */\n\n            _this7.menu.setPositionClasses(posX, posY);\n          });\n        }\n      }\n      /**\n       * Sets the appropriate positions on a position strategy\n       * so the overlay connects with the trigger correctly.\n       * @param {?} positionStrategy Strategy whose position to update.\n       * @return {?}\n       */\n\n    }, {\n      key: \"_setPosition\",\n      value: function _setPosition(positionStrategy) {\n        var _ref = this.menu.xPosition === 'before' ? ['end', 'start'] : ['start', 'end'],\n            _ref2 = _slicedToArray(_ref, 2),\n            originX = _ref2[0],\n            originFallbackX = _ref2[1];\n\n        var _ref3 = this.menu.yPosition === 'above' ? ['bottom', 'top'] : ['top', 'bottom'],\n            _ref4 = _slicedToArray(_ref3, 2),\n            overlayY = _ref4[0],\n            overlayFallbackY = _ref4[1];\n\n        var originY = overlayY,\n            originFallbackY = overlayFallbackY;\n        var overlayX = originX,\n            overlayFallbackX = originFallbackX;\n        /** @type {?} */\n\n        var offsetY = 0;\n\n        if (this.triggersSubmenu()) {\n          // When the menu is a sub-menu, it should always align itself\n          // to the edges of the trigger, instead of overlapping it.\n          overlayFallbackX = originX = this.menu.xPosition === 'before' ? 'start' : 'end';\n          originFallbackX = overlayX = originX === 'end' ? 'start' : 'end';\n          offsetY = overlayY === 'bottom' ? MENU_PANEL_TOP_PADDING : -MENU_PANEL_TOP_PADDING;\n        } else if (!this.menu.overlapTrigger) {\n          originY = overlayY === 'top' ? 'bottom' : 'top';\n          originFallbackY = overlayFallbackY === 'top' ? 'bottom' : 'top';\n        }\n\n        positionStrategy.withPositions([{\n          originX: originX,\n          originY: originY,\n          overlayX: overlayX,\n          overlayY: overlayY,\n          offsetY: offsetY\n        }, {\n          originX: originFallbackX,\n          originY: originY,\n          overlayX: overlayFallbackX,\n          overlayY: overlayY,\n          offsetY: offsetY\n        }, {\n          originX: originX,\n          originY: originFallbackY,\n          overlayX: overlayX,\n          overlayY: overlayFallbackY,\n          offsetY: -offsetY\n        }, {\n          originX: originFallbackX,\n          originY: originFallbackY,\n          overlayX: overlayFallbackX,\n          overlayY: overlayFallbackY,\n          offsetY: -offsetY\n        }]);\n      }\n      /**\n       * Cleans up the active subscriptions.\n       * @return {?}\n       */\n\n    }, {\n      key: \"_cleanUpSubscriptions\",\n      value: function _cleanUpSubscriptions() {\n        this._closeSubscription.unsubscribe();\n\n        this._hoverSubscription.unsubscribe();\n      }\n      /**\n       * Returns a stream that emits whenever an action that should close the menu occurs.\n       * @return {?}\n       */\n\n    }, {\n      key: \"_menuClosingActions\",\n      value: function _menuClosingActions() {\n        var _this8 = this;\n\n        /** @type {?} */\n        var backdrop =\n        /** @type {?} */\n        this._overlayRef.backdropClick();\n        /** @type {?} */\n\n\n        var detachments =\n        /** @type {?} */\n        this._overlayRef.detachments();\n        /** @type {?} */\n\n\n        var parentClose = this._parentMenu ? this._parentMenu.closed : of();\n        /** @type {?} */\n\n        var hover = this._parentMenu ? this._parentMenu._hovered().pipe(filter(function (active) {\n          return active !== _this8._menuItemInstance;\n        }), filter(function () {\n          return _this8._menuOpen;\n        })) : of();\n        return merge(backdrop, parentClose, hover, detachments);\n      }\n      /**\n       * Handles mouse presses on the trigger.\n       * @param {?} event\n       * @return {?}\n       */\n\n    }, {\n      key: \"_handleMousedown\",\n      value: function _handleMousedown(event) {\n        if (!isFakeMousedownFromScreenReader(event)) {\n          // Since right or middle button clicks won't trigger the `click` event,\n          // we shouldn't consider the menu as opened by mouse in those cases.\n          this._openedBy = event.button === 0 ? 'mouse' : null; // Since clicking on the trigger won't close the menu if it opens a sub-menu,\n          // we should prevent focus from moving onto it via click to avoid the\n          // highlight from lingering on the menu item.\n\n          if (this.triggersSubmenu()) {\n            event.preventDefault();\n          }\n        }\n      }\n      /**\n       * Handles key presses on the trigger.\n       * @param {?} event\n       * @return {?}\n       */\n\n    }, {\n      key: \"_handleKeydown\",\n      value: function _handleKeydown(event) {\n        /** @type {?} */\n        var keyCode = event.keyCode;\n\n        if (this.triggersSubmenu() && (keyCode === RIGHT_ARROW && this.dir === 'ltr' || keyCode === LEFT_ARROW && this.dir === 'rtl')) {\n          this.openMenu();\n        }\n      }\n      /**\n       * Handles click events on the trigger.\n       * @param {?} event\n       * @return {?}\n       */\n\n    }, {\n      key: \"_handleClick\",\n      value: function _handleClick(event) {\n        if (this.triggersSubmenu()) {\n          // Stop event propagation to avoid closing the parent menu.\n          event.stopPropagation();\n          this.openMenu();\n        } else {\n          this.toggleMenu();\n        }\n      }\n      /**\n       * Handles the cases where the user hovers over the trigger.\n       * @return {?}\n       */\n\n    }, {\n      key: \"_handleHover\",\n      value: function _handleHover() {\n        var _this9 = this;\n\n        // Subscribe to changes in the hovered item in order to toggle the panel.\n        if (!this.triggersSubmenu()) {\n          return;\n        }\n\n        this._hoverSubscription = this._parentMenu._hovered() // Since we might have multiple competing triggers for the same menu (e.g. a sub-menu\n        // with different data and triggers), we have to delay it by a tick to ensure that\n        // it won't be closed immediately after it is opened.\n        .pipe(filter(function (active) {\n          return active === _this9._menuItemInstance && !active.disabled;\n        }), delay(0, asapScheduler)).subscribe(function () {\n          _this9._openedBy = 'mouse'; // If the same menu is used between multiple triggers, it might still be animating\n          // while the new trigger tries to re-open it. Wait for the animation to finish\n          // before doing so. Also interrupt if the user moves to another item.\n\n          if (_this9.menu instanceof MatMenu && _this9.menu._isAnimating) {\n            // We need the `delay(0)` here in order to avoid\n            // 'changed after checked' errors in some cases. See #12194.\n            _this9.menu._animationDone.pipe(take(1), delay(0, asapScheduler), takeUntil(_this9._parentMenu._hovered())).subscribe(function () {\n              return _this9.openMenu();\n            });\n          } else {\n            _this9.openMenu();\n          }\n        });\n      }\n    }]);\n\n    return MatMenuTrigger;\n  }();\n\n  MatMenuTrigger.ɵfac = function MatMenuTrigger_Factory(t) {\n    return new (t || MatMenuTrigger)(ɵngcc0.ɵɵdirectiveInject(ɵngcc4.Overlay), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(MAT_MENU_SCROLL_STRATEGY), ɵngcc0.ɵɵdirectiveInject(MatMenu, 8), ɵngcc0.ɵɵdirectiveInject(MatMenuItem, 10), ɵngcc0.ɵɵdirectiveInject(ɵngcc5.Directionality, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.FocusMonitor));\n  };\n\n  MatMenuTrigger.ɵdir =\n  /*@__PURE__*/\n\n  /*@__PURE__*/\n  ɵngcc0.ɵɵdefineDirective({\n    type: MatMenuTrigger,\n    selectors: [[\"\", \"mat-menu-trigger-for\", \"\"], [\"\", \"matMenuTriggerFor\", \"\"]],\n    hostAttrs: [\"aria-haspopup\", \"true\"],\n    hostVars: 1,\n    hostBindings: function MatMenuTrigger_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"mousedown\", function MatMenuTrigger_mousedown_HostBindingHandler($event) {\n          return ctx._handleMousedown($event);\n        })(\"touchstart\", function MatMenuTrigger_touchstart_HostBindingHandler() {\n          return ctx._openedBy = \"touch\";\n        })(\"keydown\", function MatMenuTrigger_keydown_HostBindingHandler($event) {\n          return ctx._handleKeydown($event);\n        })(\"click\", function MatMenuTrigger_click_HostBindingHandler($event) {\n          return ctx._handleClick($event);\n        });\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"aria-expanded\", ctx.menuOpen || null);\n      }\n    },\n    inputs: {\n      _deprecatedMatMenuTriggerFor: [\"mat-menu-trigger-for\", \"_deprecatedMatMenuTriggerFor\"],\n      menu: [\"matMenuTriggerFor\", \"menu\"],\n      menuData: [\"matMenuTriggerData\", \"menuData\"]\n    },\n    outputs: {\n      menuOpened: \"menuOpened\",\n      onMenuOpen: \"onMenuOpen\",\n      menuClosed: \"menuClosed\",\n      onMenuClose: \"onMenuClose\"\n    },\n    exportAs: [\"matMenuTrigger\"]\n  });\n  return MatMenuTrigger;\n}();\n\nvar MatMenuModule = /*@__PURE__*/function () {\n  var MatMenuModule = function MatMenuModule() {\n    _classCallCheck(this, MatMenuModule);\n  };\n\n  MatMenuModule.ɵfac = function MatMenuModule_Factory(t) {\n    return new (t || MatMenuModule)();\n  };\n\n  MatMenuModule.ɵmod =\n  /*@__PURE__*/\n\n  /*@__PURE__*/\n  ɵngcc0.ɵɵdefineNgModule({\n    type: MatMenuModule\n  });\n  MatMenuModule.ɵinj =\n  /*@__PURE__*/\n\n  /*@__PURE__*/\n  ɵngcc0.ɵɵdefineInjector({\n    providers: [MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER],\n    imports: [[CommonModule, MatCommonModule, MatRippleModule, OverlayModule], MatCommonModule]\n  });\n  return MatMenuModule;\n}();\n/*@__PURE__*/\n\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatMenuModule, {\n    declarations: function declarations() {\n      return [MatMenu, MatMenuItem, MatMenuTrigger, MatMenuContent];\n    },\n    imports: function imports() {\n      return [CommonModule, MatCommonModule, MatRippleModule, OverlayModule];\n    },\n    exports: function exports() {\n      return [MatMenu, MatMenuItem, MatMenuTrigger, MatMenuContent, MatCommonModule];\n    }\n  });\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n\nexport { MAT_MENU_SCROLL_STRATEGY, MatMenuModule, MatMenu, MAT_MENU_DEFAULT_OPTIONS, MatMenuItem, MatMenuTrigger, matMenuAnimations, fadeInItems, transformMenu, MatMenuContent, MAT_MENU_DEFAULT_OPTIONS_FACTORY as ɵa19, MatMenuItemBase as ɵb19, _MatMenuItemMixinBase as ɵc19, MAT_MENU_PANEL as ɵf19, MAT_MENU_SCROLL_STRATEGY_FACTORY as ɵd19, MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER as ɵe19 }; //# sourceMappingURL=menu.js.map","map":null,"metadata":{},"sourceType":"module"}