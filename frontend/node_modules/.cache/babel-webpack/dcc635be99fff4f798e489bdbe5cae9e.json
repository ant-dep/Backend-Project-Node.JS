{"ast":null,"code":"import _slicedToArray from \"/Users/adepertat/Dropbox/ECOLES/Openclassroom/P6_de_Pertat_Antoine/dwj-projet6/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _inherits from \"/Users/adepertat/Dropbox/ECOLES/Openclassroom/P6_de_Pertat_Antoine/dwj-projet6/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/adepertat/Dropbox/ECOLES/Openclassroom/P6_de_Pertat_Antoine/dwj-projet6/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _createClass from \"/Users/adepertat/Dropbox/ECOLES/Openclassroom/P6_de_Pertat_Antoine/dwj-projet6/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _classCallCheck from \"/Users/adepertat/Dropbox/ECOLES/Openclassroom/P6_de_Pertat_Antoine/dwj-projet6/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { DOCUMENT } from '@angular/common';\nimport { HttpClient } from '@angular/common/http';\nimport { Inject, Injectable, Optional, SecurityContext, SkipSelf, NgModule, Attribute, ChangeDetectionStrategy, Component, ElementRef, Input, ViewEncapsulation, InjectionToken, inject, defineInjectable } from '@angular/core';\nimport { DomSanitizer } from '@angular/platform-browser';\nimport { forkJoin, of, throwError } from 'rxjs';\nimport { catchError, finalize, map, share, tap, take } from 'rxjs/operators';\nimport { mixinColor, MatCommonModule } from '@angular/material/core';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * Returns an exception to be thrown in the case when attempting to\n * load an icon with a name that cannot be found.\n * \\@docs-private\n * @param {?} iconName\n * @return {?}\n */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/common/http';\nimport * as ɵngcc2 from '@angular/platform-browser';\nvar _c0 = [\"*\"];\n\nfunction getMatIconNameNotFoundError(iconName) {\n  return Error(\"Unable to find icon with the name \\\"\".concat(iconName, \"\\\"\"));\n}\n/**\n * Returns an exception to be thrown when the consumer attempts to use\n * `<mat-icon>` without including \\@angular/http.\n * \\@docs-private\n * @return {?}\n */\n\n\nfunction getMatIconNoHttpProviderError() {\n  return Error('Could not find HttpClient provider for use with Angular Material icons. ' + 'Please include the HttpClientModule from @angular/common/http in your ' + 'app imports.');\n}\n/**\n * Returns an exception to be thrown when a URL couldn't be sanitized.\n * \\@docs-private\n * @param {?} url URL that was attempted to be sanitized.\n * @return {?}\n */\n\n\nfunction getMatIconFailedToSanitizeUrlError(url) {\n  return Error(\"The URL provided to MatIconRegistry was not trusted as a resource URL \" + \"via Angular's DomSanitizer. Attempted URL was \\\"\".concat(url, \"\\\".\"));\n}\n/**\n * Returns an exception to be thrown when a HTML string couldn't be sanitized.\n * \\@docs-private\n * @param {?} literal HTML that was attempted to be sanitized.\n * @return {?}\n */\n\n\nfunction getMatIconFailedToSanitizeLiteralError(literal) {\n  return Error(\"The literal provided to MatIconRegistry was not trusted as safe HTML by \" + \"Angular's DomSanitizer. Attempted literal was \\\"\".concat(literal, \"\\\".\"));\n}\n/**\n * Configuration for an icon, including the URL and possibly the cached SVG element.\n * \\@docs-private\n */\n\n\nvar SvgIconConfig =\n/**\n * @param {?} data\n */\nfunction SvgIconConfig(data) {\n  _classCallCheck(this, SvgIconConfig);\n\n  // Note that we can't use `instanceof SVGElement` here,\n  // because it'll break during server-side rendering.\n  if (!!\n  /** @type {?} */\n  data.nodeName) {\n    this.svgElement =\n    /** @type {?} */\n    data;\n  } else {\n    this.url =\n    /** @type {?} */\n    data;\n  }\n};\n/**\n * Service to register and display icons used by the `<mat-icon>` component.\n * - Registers icon URLs by namespace and name.\n * - Registers icon set URLs by namespace.\n * - Registers aliases for CSS classes, for use with icon fonts.\n * - Loads icons from URLs and extracts individual icons from icon sets.\n */\n\n\nvar MatIconRegistry = /*#__PURE__*/function () {\n  /**\n   * @param {?} _httpClient\n   * @param {?} _sanitizer\n   * @param {?} document\n   */\n  function MatIconRegistry(_httpClient, _sanitizer, document) {\n    _classCallCheck(this, MatIconRegistry);\n\n    this._httpClient = _httpClient;\n    this._sanitizer = _sanitizer;\n    /**\n     * URLs and cached SVG elements for individual icons. Keys are of the format \"[namespace]:[icon]\".\n     */\n\n    this._svgIconConfigs = new Map();\n    /**\n     * SvgIconConfig objects and cached SVG elements for icon sets, keyed by namespace.\n     * Multiple icon sets can be registered under the same namespace.\n     */\n\n    this._iconSetConfigs = new Map();\n    /**\n     * Cache for icons loaded by direct URLs.\n     */\n\n    this._cachedIconsByUrl = new Map();\n    /**\n     * In-progress icon fetches. Used to coalesce multiple requests to the same URL.\n     */\n\n    this._inProgressUrlFetches = new Map();\n    /**\n     * Map from font identifiers to their CSS class names. Used for icon fonts.\n     */\n\n    this._fontCssClassesByAlias = new Map();\n    /**\n     * The CSS class to apply when an `<mat-icon>` component has no icon name, url, or font specified.\n     * The default 'material-icons' value assumes that the material icon font has been loaded as\n     * described at http://google.github.io/material-design-icons/#icon-font-for-the-web\n     */\n\n    this._defaultFontSetClass = 'material-icons';\n    this._document = document;\n  }\n  /**\n   * Registers an icon by URL in the default namespace.\n   * @param {?} iconName Name under which the icon should be registered.\n   * @param {?} url\n   * @return {?}\n   */\n\n\n  _createClass(MatIconRegistry, [{\n    key: \"addSvgIcon\",\n    value: function addSvgIcon(iconName, url) {\n      return this.addSvgIconInNamespace('', iconName, url);\n    }\n    /**\n     * Registers an icon using an HTML string in the default namespace.\n     * @param {?} iconName Name under which the icon should be registered.\n     * @param {?} literal SVG source of the icon.\n     * @return {?}\n     */\n\n  }, {\n    key: \"addSvgIconLiteral\",\n    value: function addSvgIconLiteral(iconName, literal) {\n      return this.addSvgIconLiteralInNamespace('', iconName, literal);\n    }\n    /**\n     * Registers an icon by URL in the specified namespace.\n     * @param {?} namespace Namespace in which the icon should be registered.\n     * @param {?} iconName Name under which the icon should be registered.\n     * @param {?} url\n     * @return {?}\n     */\n\n  }, {\n    key: \"addSvgIconInNamespace\",\n    value: function addSvgIconInNamespace(namespace, iconName, url) {\n      return this._addSvgIconConfig(namespace, iconName, new SvgIconConfig(url));\n    }\n    /**\n     * Registers an icon using an HTML string in the specified namespace.\n     * @param {?} namespace Namespace in which the icon should be registered.\n     * @param {?} iconName Name under which the icon should be registered.\n     * @param {?} literal SVG source of the icon.\n     * @return {?}\n     */\n\n  }, {\n    key: \"addSvgIconLiteralInNamespace\",\n    value: function addSvgIconLiteralInNamespace(namespace, iconName, literal) {\n      /** @type {?} */\n      var sanitizedLiteral = this._sanitizer.sanitize(SecurityContext.HTML, literal);\n\n      if (!sanitizedLiteral) {\n        throw getMatIconFailedToSanitizeLiteralError(literal);\n      }\n      /** @type {?} */\n\n\n      var svgElement = this._createSvgElementForSingleIcon(sanitizedLiteral);\n\n      return this._addSvgIconConfig(namespace, iconName, new SvgIconConfig(svgElement));\n    }\n    /**\n     * Registers an icon set by URL in the default namespace.\n     * @param {?} url\n     * @return {?}\n     */\n\n  }, {\n    key: \"addSvgIconSet\",\n    value: function addSvgIconSet(url) {\n      return this.addSvgIconSetInNamespace('', url);\n    }\n    /**\n     * Registers an icon set using an HTML string in the default namespace.\n     * @param {?} literal SVG source of the icon set.\n     * @return {?}\n     */\n\n  }, {\n    key: \"addSvgIconSetLiteral\",\n    value: function addSvgIconSetLiteral(literal) {\n      return this.addSvgIconSetLiteralInNamespace('', literal);\n    }\n    /**\n     * Registers an icon set by URL in the specified namespace.\n     * @param {?} namespace Namespace in which to register the icon set.\n     * @param {?} url\n     * @return {?}\n     */\n\n  }, {\n    key: \"addSvgIconSetInNamespace\",\n    value: function addSvgIconSetInNamespace(namespace, url) {\n      return this._addSvgIconSetConfig(namespace, new SvgIconConfig(url));\n    }\n    /**\n     * Registers an icon set using an HTML string in the specified namespace.\n     * @param {?} namespace Namespace in which to register the icon set.\n     * @param {?} literal SVG source of the icon set.\n     * @return {?}\n     */\n\n  }, {\n    key: \"addSvgIconSetLiteralInNamespace\",\n    value: function addSvgIconSetLiteralInNamespace(namespace, literal) {\n      /** @type {?} */\n      var sanitizedLiteral = this._sanitizer.sanitize(SecurityContext.HTML, literal);\n\n      if (!sanitizedLiteral) {\n        throw getMatIconFailedToSanitizeLiteralError(literal);\n      }\n      /** @type {?} */\n\n\n      var svgElement = this._svgElementFromString(sanitizedLiteral);\n\n      return this._addSvgIconSetConfig(namespace, new SvgIconConfig(svgElement));\n    }\n    /**\n     * Defines an alias for a CSS class name to be used for icon fonts. Creating an matIcon\n     * component with the alias as the fontSet input will cause the class name to be applied\n     * to the `<mat-icon>` element.\n     *\n     * @param {?} alias Alias for the font.\n     * @param {?=} className Class name override to be used instead of the alias.\n     * @return {?}\n     */\n\n  }, {\n    key: \"registerFontClassAlias\",\n    value: function registerFontClassAlias(alias) {\n      var className = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : alias;\n\n      this._fontCssClassesByAlias.set(alias, className);\n\n      return this;\n    }\n    /**\n     * Returns the CSS class name associated with the alias by a previous call to\n     * registerFontClassAlias. If no CSS class has been associated, returns the alias unmodified.\n     * @param {?} alias\n     * @return {?}\n     */\n\n  }, {\n    key: \"classNameForFontAlias\",\n    value: function classNameForFontAlias(alias) {\n      return this._fontCssClassesByAlias.get(alias) || alias;\n    }\n    /**\n     * Sets the CSS class name to be used for icon fonts when an `<mat-icon>` component does not\n     * have a fontSet input value, and is not loading an icon by name or URL.\n     *\n     * @param {?} className\n     * @return {?}\n     */\n\n  }, {\n    key: \"setDefaultFontSetClass\",\n    value: function setDefaultFontSetClass(className) {\n      this._defaultFontSetClass = className;\n      return this;\n    }\n    /**\n     * Returns the CSS class name to be used for icon fonts when an `<mat-icon>` component does not\n     * have a fontSet input value, and is not loading an icon by name or URL.\n     * @return {?}\n     */\n\n  }, {\n    key: \"getDefaultFontSetClass\",\n    value: function getDefaultFontSetClass() {\n      return this._defaultFontSetClass;\n    }\n    /**\n     * Returns an Observable that produces the icon (as an `<svg>` DOM element) from the given URL.\n     * The response from the URL may be cached so this will not always cause an HTTP request, but\n     * the produced element will always be a new copy of the originally fetched icon. (That is,\n     * it will not contain any modifications made to elements previously returned).\n     *\n     * @param {?} safeUrl URL from which to fetch the SVG icon.\n     * @return {?}\n     */\n\n  }, {\n    key: \"getSvgIconFromUrl\",\n    value: function getSvgIconFromUrl(safeUrl) {\n      var _this = this;\n\n      /** @type {?} */\n      var url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n\n      if (!url) {\n        throw getMatIconFailedToSanitizeUrlError(safeUrl);\n      }\n      /** @type {?} */\n\n\n      var cachedIcon = this._cachedIconsByUrl.get(url);\n\n      if (cachedIcon) {\n        return of(cloneSvg(cachedIcon));\n      }\n\n      return this._loadSvgIconFromConfig(new SvgIconConfig(safeUrl)).pipe(tap(function (svg) {\n        return _this._cachedIconsByUrl.set(\n        /** @type {?} */\n        url, svg);\n      }), map(function (svg) {\n        return cloneSvg(svg);\n      }));\n    }\n    /**\n     * Returns an Observable that produces the icon (as an `<svg>` DOM element) with the given name\n     * and namespace. The icon must have been previously registered with addIcon or addIconSet;\n     * if not, the Observable will throw an error.\n     *\n     * @param {?} name Name of the icon to be retrieved.\n     * @param {?=} namespace Namespace in which to look for the icon.\n     * @return {?}\n     */\n\n  }, {\n    key: \"getNamedSvgIcon\",\n    value: function getNamedSvgIcon(name) {\n      var namespace = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n\n      /** @type {?} */\n      var key = iconKey(namespace, name);\n      /** @type {?} */\n\n      var config = this._svgIconConfigs.get(key);\n\n      if (config) {\n        return this._getSvgFromConfig(config);\n      }\n      /** @type {?} */\n\n\n      var iconSetConfigs = this._iconSetConfigs.get(namespace);\n\n      if (iconSetConfigs) {\n        return this._getSvgFromIconSetConfigs(name, iconSetConfigs);\n      }\n\n      return throwError(getMatIconNameNotFoundError(key));\n    }\n    /**\n     * Returns the cached icon for a SvgIconConfig if available, or fetches it from its URL if not.\n     * @param {?} config\n     * @return {?}\n     */\n\n  }, {\n    key: \"_getSvgFromConfig\",\n    value: function _getSvgFromConfig(config) {\n      if (config.svgElement) {\n        // We already have the SVG element for this icon, return a copy.\n        return of(cloneSvg(config.svgElement));\n      } else {\n        // Fetch the icon from the config's URL, cache it, and return a copy.\n        return this._loadSvgIconFromConfig(config).pipe(tap(function (svg) {\n          return config.svgElement = svg;\n        }), map(function (svg) {\n          return cloneSvg(svg);\n        }));\n      }\n    }\n    /**\n     * Attempts to find an icon with the specified name in any of the SVG icon sets.\n     * First searches the available cached icons for a nested element with a matching name, and\n     * if found copies the element to a new `<svg>` element. If not found, fetches all icon sets\n     * that have not been cached, and searches again after all fetches are completed.\n     * The returned Observable produces the SVG element if possible, and throws\n     * an error if no icon with the specified name can be found.\n     * @param {?} name\n     * @param {?} iconSetConfigs\n     * @return {?}\n     */\n\n  }, {\n    key: \"_getSvgFromIconSetConfigs\",\n    value: function _getSvgFromIconSetConfigs(name, iconSetConfigs) {\n      var _this2 = this;\n\n      /** @type {?} */\n      var namedIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n\n      if (namedIcon) {\n        // We could cache namedIcon in _svgIconConfigs, but since we have to make a copy every\n        // time anyway, there's probably not much advantage compared to just always extracting\n        // it from the icon set.\n        return of(namedIcon);\n      }\n      /** @type {?} */\n\n\n      var iconSetFetchRequests = iconSetConfigs.filter(function (iconSetConfig) {\n        return !iconSetConfig.svgElement;\n      }).map(function (iconSetConfig) {\n        return _this2._loadSvgIconSetFromConfig(iconSetConfig).pipe(catchError(function (err) {\n          /** @type {?} */\n          var url = _this2._sanitizer.sanitize(SecurityContext.RESOURCE_URL, iconSetConfig.url); // Swallow errors fetching individual URLs so the\n          // combined Observable won't necessarily fail.\n\n\n          console.error(\"Loading icon set URL: \".concat(url, \" failed: \").concat(err.message));\n          return of(null);\n        }));\n      }); // Fetch all the icon set URLs. When the requests complete, every IconSet should have a\n      // cached SVG element (unless the request failed), and we can check again for the icon.\n\n      return forkJoin(iconSetFetchRequests).pipe(map(function () {\n        /** @type {?} */\n        var foundIcon = _this2._extractIconWithNameFromAnySet(name, iconSetConfigs);\n\n        if (!foundIcon) {\n          throw getMatIconNameNotFoundError(name);\n        }\n\n        return foundIcon;\n      }));\n    }\n    /**\n     * Searches the cached SVG elements for the given icon sets for a nested icon element whose \"id\"\n     * tag matches the specified name. If found, copies the nested element to a new SVG element and\n     * returns it. Returns null if no matching element is found.\n     * @param {?} iconName\n     * @param {?} iconSetConfigs\n     * @return {?}\n     */\n\n  }, {\n    key: \"_extractIconWithNameFromAnySet\",\n    value: function _extractIconWithNameFromAnySet(iconName, iconSetConfigs) {\n      // Iterate backwards, so icon sets added later have precedence.\n      for (var i = iconSetConfigs.length - 1; i >= 0; i--) {\n        /** @type {?} */\n        var config = iconSetConfigs[i];\n\n        if (config.svgElement) {\n          /** @type {?} */\n          var foundIcon = this._extractSvgIconFromSet(config.svgElement, iconName);\n\n          if (foundIcon) {\n            return foundIcon;\n          }\n        }\n      }\n\n      return null;\n    }\n    /**\n     * Loads the content of the icon URL specified in the SvgIconConfig and creates an SVG element\n     * from it.\n     * @param {?} config\n     * @return {?}\n     */\n\n  }, {\n    key: \"_loadSvgIconFromConfig\",\n    value: function _loadSvgIconFromConfig(config) {\n      var _this3 = this;\n\n      return this._fetchUrl(config.url).pipe(map(function (svgText) {\n        return _this3._createSvgElementForSingleIcon(svgText);\n      }));\n    }\n    /**\n     * Loads the content of the icon set URL specified in the SvgIconConfig and creates an SVG element\n     * from it.\n     * @param {?} config\n     * @return {?}\n     */\n\n  }, {\n    key: \"_loadSvgIconSetFromConfig\",\n    value: function _loadSvgIconSetFromConfig(config) {\n      var _this4 = this;\n\n      // If the SVG for this icon set has already been parsed, do nothing.\n      if (config.svgElement) {\n        return of(config.svgElement);\n      }\n\n      return this._fetchUrl(config.url).pipe(map(function (svgText) {\n        // It is possible that the icon set was parsed and cached by an earlier request, so parsing\n        // only needs to occur if the cache is yet unset.\n        if (!config.svgElement) {\n          config.svgElement = _this4._svgElementFromString(svgText);\n        }\n\n        return config.svgElement;\n      }));\n    }\n    /**\n     * Creates a DOM element from the given SVG string, and adds default attributes.\n     * @param {?} responseText\n     * @return {?}\n     */\n\n  }, {\n    key: \"_createSvgElementForSingleIcon\",\n    value: function _createSvgElementForSingleIcon(responseText) {\n      /** @type {?} */\n      var svg = this._svgElementFromString(responseText);\n\n      this._setSvgAttributes(svg);\n\n      return svg;\n    }\n    /**\n     * Searches the cached element of the given SvgIconConfig for a nested icon element whose \"id\"\n     * tag matches the specified name. If found, copies the nested element to a new SVG element and\n     * returns it. Returns null if no matching element is found.\n     * @param {?} iconSet\n     * @param {?} iconName\n     * @return {?}\n     */\n\n  }, {\n    key: \"_extractSvgIconFromSet\",\n    value: function _extractSvgIconFromSet(iconSet, iconName) {\n      /** @type {?} */\n      var iconSource = iconSet.querySelector('#' + iconName);\n\n      if (!iconSource) {\n        return null;\n      }\n      /** @type {?} */\n\n\n      var iconElement =\n      /** @type {?} */\n      iconSource.cloneNode(true);\n      iconElement.removeAttribute('id'); // If the icon node is itself an <svg> node, clone and return it directly. If not, set it as\n      // the content of a new <svg> node.\n\n      if (iconElement.nodeName.toLowerCase() === 'svg') {\n        return this._setSvgAttributes(\n        /** @type {?} */\n        iconElement);\n      } // If the node is a <symbol>, it won't be rendered so we have to convert it into <svg>. Note\n      // that the same could be achieved by referring to it via <use href=\"#id\">, however the <use>\n      // tag is problematic on Firefox, because it needs to include the current page path.\n\n\n      if (iconElement.nodeName.toLowerCase() === 'symbol') {\n        return this._setSvgAttributes(this._toSvgElement(iconElement));\n      }\n      /** @type {?} */\n\n\n      var svg = this._svgElementFromString('<svg></svg>'); // Clone the node so we don't remove it from the parent icon set element.\n\n\n      svg.appendChild(iconElement);\n      return this._setSvgAttributes(svg);\n    }\n    /**\n     * Creates a DOM element from the given SVG string.\n     * @param {?} str\n     * @return {?}\n     */\n\n  }, {\n    key: \"_svgElementFromString\",\n    value: function _svgElementFromString(str) {\n      /** @type {?} */\n      var div = this._document.createElement('DIV');\n\n      div.innerHTML = str;\n      /** @type {?} */\n\n      var svg =\n      /** @type {?} */\n      div.querySelector('svg');\n\n      if (!svg) {\n        throw Error('<svg> tag not found');\n      }\n\n      return svg;\n    }\n    /**\n     * Converts an element into an SVG node by cloning all of its children.\n     * @param {?} element\n     * @return {?}\n     */\n\n  }, {\n    key: \"_toSvgElement\",\n    value: function _toSvgElement(element) {\n      /** @type {?} */\n      var svg = this._svgElementFromString('<svg></svg>');\n\n      for (var i = 0; i < element.childNodes.length; i++) {\n        if (element.childNodes[i].nodeType === this._document.ELEMENT_NODE) {\n          svg.appendChild(element.childNodes[i].cloneNode(true));\n        }\n      }\n\n      return svg;\n    }\n    /**\n     * Sets the default attributes for an SVG element to be used as an icon.\n     * @param {?} svg\n     * @return {?}\n     */\n\n  }, {\n    key: \"_setSvgAttributes\",\n    value: function _setSvgAttributes(svg) {\n      svg.setAttribute('fit', '');\n      svg.setAttribute('height', '100%');\n      svg.setAttribute('width', '100%');\n      svg.setAttribute('preserveAspectRatio', 'xMidYMid meet');\n      svg.setAttribute('focusable', 'false'); // Disable IE11 default behavior to make SVGs focusable.\n\n      return svg;\n    }\n    /**\n     * Returns an Observable which produces the string contents of the given URL. Results may be\n     * cached, so future calls with the same URL may not cause another HTTP request.\n     * @param {?} safeUrl\n     * @return {?}\n     */\n\n  }, {\n    key: \"_fetchUrl\",\n    value: function _fetchUrl(safeUrl) {\n      var _this5 = this;\n\n      if (!this._httpClient) {\n        throw getMatIconNoHttpProviderError();\n      }\n\n      if (safeUrl == null) {\n        throw Error(\"Cannot fetch icon from URL \\\"\".concat(safeUrl, \"\\\".\"));\n      }\n      /** @type {?} */\n\n\n      var url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n\n      if (!url) {\n        throw getMatIconFailedToSanitizeUrlError(safeUrl);\n      }\n      /** @type {?} */\n\n\n      var inProgressFetch = this._inProgressUrlFetches.get(url);\n\n      if (inProgressFetch) {\n        return inProgressFetch;\n      }\n      /** @type {?} */\n\n\n      var req = this._httpClient.get(url, {\n        responseType: 'text'\n      }).pipe(finalize(function () {\n        return _this5._inProgressUrlFetches.delete(url);\n      }), share());\n\n      this._inProgressUrlFetches.set(url, req);\n\n      return req;\n    }\n    /**\n     * Registers an icon config by name in the specified namespace.\n     * @param {?} namespace Namespace in which to register the icon config.\n     * @param {?} iconName Name under which to register the config.\n     * @param {?} config Config to be registered.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_addSvgIconConfig\",\n    value: function _addSvgIconConfig(namespace, iconName, config) {\n      this._svgIconConfigs.set(iconKey(namespace, iconName), config);\n\n      return this;\n    }\n    /**\n     * Registers an icon set config in the specified namespace.\n     * @param {?} namespace Namespace in which to register the icon config.\n     * @param {?} config Config to be registered.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_addSvgIconSetConfig\",\n    value: function _addSvgIconSetConfig(namespace, config) {\n      /** @type {?} */\n      var configNamespace = this._iconSetConfigs.get(namespace);\n\n      if (configNamespace) {\n        configNamespace.push(config);\n      } else {\n        this._iconSetConfigs.set(namespace, [config]);\n      }\n\n      return this;\n    }\n  }]);\n\n  return MatIconRegistry;\n}();\n\nMatIconRegistry.ɵfac = function MatIconRegistry_Factory(t) {\n  return new (t || MatIconRegistry)(ɵngcc0.ɵɵinject(ɵngcc1.HttpClient, 8), ɵngcc0.ɵɵinject(ɵngcc2.DomSanitizer), ɵngcc0.ɵɵinject(DOCUMENT, 8));\n};\n\nMatIconRegistry.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n  token: MatIconRegistry,\n  factory: MatIconRegistry.ɵfac,\n  providedIn: 'root'\n});\n/** @nocollapse */\n\nMatIconRegistry.ctorParameters = function () {\n  return [{\n    type: HttpClient,\n    decorators: [{\n      type: Optional\n    }]\n  }, {\n    type: DomSanitizer\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Optional\n    }, {\n      type: Inject,\n      args: [DOCUMENT]\n    }]\n  }];\n};\n/** @nocollapse */\n\n\nMatIconRegistry.ngInjectableDef = defineInjectable({\n  factory: function MatIconRegistry_Factory() {\n    return new MatIconRegistry(inject(HttpClient, 8), inject(DomSanitizer), inject(DOCUMENT, 8));\n  },\n  token: MatIconRegistry,\n  providedIn: \"root\"\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatIconRegistry, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc1.HttpClient,\n      decorators: [{\n        type: Optional\n      }]\n    }, {\n      type: ɵngcc2.DomSanitizer\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }];\n  }, null);\n})();\n/**\n * \\@docs-private\n * @param {?} parentRegistry\n * @param {?} httpClient\n * @param {?} sanitizer\n * @param {?=} document\n * @return {?}\n */\n\n\nfunction ICON_REGISTRY_PROVIDER_FACTORY(parentRegistry, httpClient, sanitizer, document) {\n  return parentRegistry || new MatIconRegistry(httpClient, sanitizer, document);\n}\n/** *\n * \\@docs-private\n  @type {?} */\n\n\nvar ICON_REGISTRY_PROVIDER = {\n  // If there is already an MatIconRegistry available, use that. Otherwise, provide a new one.\n  provide: MatIconRegistry,\n  deps: [[new Optional(), new SkipSelf(), MatIconRegistry], [new Optional(), HttpClient], DomSanitizer, [new Optional(),\n  /** @type {?} */\n  DOCUMENT]],\n  useFactory: ICON_REGISTRY_PROVIDER_FACTORY\n};\n/**\n * Clones an SVGElement while preserving type information.\n * @param {?} svg\n * @return {?}\n */\n\nfunction cloneSvg(svg) {\n  return (\n    /** @type {?} */\n    svg.cloneNode(true)\n  );\n}\n/**\n * Returns the cache key to use for an icon namespace and name.\n * @param {?} namespace\n * @param {?} name\n * @return {?}\n */\n\n\nfunction iconKey(namespace, name) {\n  return namespace + ':' + name;\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * \\@docs-private\n */\n\n\nvar MatIconBase =\n/**\n * @param {?} _elementRef\n */\nfunction MatIconBase(_elementRef) {\n  _classCallCheck(this, MatIconBase);\n\n  this._elementRef = _elementRef;\n};\n/** @type {?} */\n\n\nvar _MatIconMixinBase = mixinColor(MatIconBase);\n/** *\n * Injection token used to provide the current location to `MatIcon`.\n * Used to handle server-side rendering and to stub out during unit tests.\n * \\@docs-private\n  @type {?} */\n\n\nvar MAT_ICON_LOCATION = new InjectionToken('mat-icon-location', {\n  providedIn: 'root',\n  factory: MAT_ICON_LOCATION_FACTORY\n});\n/**\n * \\@docs-private\n * @return {?}\n */\n\nfunction MAT_ICON_LOCATION_FACTORY() {\n  /** @type {?} */\n  var _document = inject(DOCUMENT);\n\n  return {\n    // Note that this needs to be a function, rather than a property, because Angular\n    // will only resolve it once, but we want the current path on each call.\n    getPathname: function getPathname() {\n      return _document && _document.location && _document.location.pathname || '';\n    }\n  };\n}\n/** *\n * SVG attributes that accept a FuncIRI (e.g. `url(<something>)`).\n  @type {?} */\n\n\nvar funcIriAttributes = ['clip-path', 'color-profile', 'src', 'cursor', 'fill', 'filter', 'marker', 'marker-start', 'marker-mid', 'marker-end', 'mask', 'stroke'];\n\nvar ɵ0 = function ɵ0(attr) {\n  return \"[\".concat(attr, \"]\");\n};\n/** *\n * Selector that can be used to find all elements that are using a `FuncIRI`.\n  @type {?} */\n\n\nvar funcIriAttributeSelector = funcIriAttributes.map(ɵ0).join(', ');\n/** *\n * Regex that can be used to extract the id out of a FuncIRI.\n  @type {?} */\n\nvar funcIriPattern = /^url\\(['\"]?#(.*?)['\"]?\\)$/;\n/**\n * Component to display an icon. It can be used in the following ways:\n *\n * - Specify the svgIcon input to load an SVG icon from a URL previously registered with the\n *   addSvgIcon, addSvgIconInNamespace, addSvgIconSet, or addSvgIconSetInNamespace methods of\n *   MatIconRegistry. If the svgIcon value contains a colon it is assumed to be in the format\n *   \"[namespace]:[name]\", if not the value will be the name of an icon in the default namespace.\n *   Examples:\n *     `<mat-icon svgIcon=\"left-arrow\"></mat-icon>\n *     <mat-icon svgIcon=\"animals:cat\"></mat-icon>`\n *\n * - Use a font ligature as an icon by putting the ligature text in the content of the `<mat-icon>`\n *   component. By default the Material icons font is used as described at\n *   http://google.github.io/material-design-icons/#icon-font-for-the-web. You can specify an\n *   alternate font by setting the fontSet input to either the CSS class to apply to use the\n *   desired font, or to an alias previously registered with MatIconRegistry.registerFontClassAlias.\n *   Examples:\n *     `<mat-icon>home</mat-icon>\n *     <mat-icon fontSet=\"myfont\">sun</mat-icon>`\n *\n * - Specify a font glyph to be included via CSS rules by setting the fontSet input to specify the\n *   font, and the fontIcon input to specify the icon. Typically the fontIcon will specify a\n *   CSS class which causes the glyph to be displayed via a :before selector, as in\n *   https://fortawesome.github.io/Font-Awesome/examples/\n *   Example:\n *     `<mat-icon fontSet=\"fa\" fontIcon=\"alarm\"></mat-icon>`\n */\n\nvar MatIcon = /*#__PURE__*/function (_MatIconMixinBase2) {\n  _inherits(MatIcon, _MatIconMixinBase2);\n\n  var _super = _createSuper(MatIcon);\n\n  /**\n   * @param {?} elementRef\n   * @param {?} _iconRegistry\n   * @param {?} ariaHidden\n   * @param {?=} _location\n   */\n  function MatIcon(elementRef, _iconRegistry, ariaHidden,\n  /**\n  * @deprecated `location` parameter to be made required.\n  * @breaking-change 8.0.0\n  */\n  _location) {\n    var _this6;\n\n    _classCallCheck(this, MatIcon);\n\n    _this6 = _super.call(this, elementRef);\n    _this6._iconRegistry = _iconRegistry;\n    _this6._location = _location;\n    _this6._inline = false; // If the user has not explicitly set aria-hidden, mark the icon as hidden, as this is\n    // the right thing to do for the majority of icon use-cases.\n\n    if (!ariaHidden) {\n      elementRef.nativeElement.setAttribute('aria-hidden', 'true');\n    }\n\n    return _this6;\n  }\n  /**\n   * Whether the icon should be inlined, automatically sizing the icon to match the font size of\n   * the element the icon is contained in.\n   * @return {?}\n   */\n\n\n  _createClass(MatIcon, [{\n    key: \"inline\",\n    get: function get() {\n      return this._inline;\n    }\n    /**\n     * @param {?} inline\n     * @return {?}\n     */\n    ,\n    set: function set(inline) {\n      this._inline = coerceBooleanProperty(inline);\n    }\n    /**\n     * Font set that the icon is a part of.\n     * @return {?}\n     */\n\n  }, {\n    key: \"fontSet\",\n    get: function get() {\n      return this._fontSet;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ,\n    set: function set(value) {\n      this._fontSet = this._cleanupFontValue(value);\n    }\n    /**\n     * Name of an icon within a font set.\n     * @return {?}\n     */\n\n  }, {\n    key: \"fontIcon\",\n    get: function get() {\n      return this._fontIcon;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ,\n    set: function set(value) {\n      this._fontIcon = this._cleanupFontValue(value);\n    }\n    /**\n     * Splits an svgIcon binding value into its icon set and icon name components.\n     * Returns a 2-element array of [(icon set), (icon name)].\n     * The separator for the two fields is ':'. If there is no separator, an empty\n     * string is returned for the icon set and the entire value is returned for\n     * the icon name. If the argument is falsy, returns an array of two empty strings.\n     * Throws an error if the name contains two or more ':' separators.\n     * Examples:\n     *   `'social:cake' -> ['social', 'cake']\n     *   'penguin' -> ['', 'penguin']\n     *   null -> ['', '']\n     *   'a:b:c' -> (throws Error)`\n     * @param {?} iconName\n     * @return {?}\n     */\n\n  }, {\n    key: \"_splitIconName\",\n    value: function _splitIconName(iconName) {\n      if (!iconName) {\n        return ['', ''];\n      }\n      /** @type {?} */\n\n\n      var parts = iconName.split(':');\n\n      switch (parts.length) {\n        case 1:\n          return ['', parts[0]];\n        // Use default namespace.\n\n        case 2:\n          return (\n            /** @type {?} */\n            parts\n          );\n\n        default:\n          throw Error(\"Invalid icon name: \\\"\".concat(iconName, \"\\\"\"));\n      }\n    }\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngOnChanges\",\n    value: function ngOnChanges(changes) {\n      var _this7 = this;\n\n      // Only update the inline SVG icon if the inputs changed, to avoid unnecessary DOM operations.\n      if (changes[\"svgIcon\"]) {\n        if (this.svgIcon) {\n          var _this$_splitIconName = this._splitIconName(this.svgIcon),\n              _this$_splitIconName2 = _slicedToArray(_this$_splitIconName, 2),\n              namespace = _this$_splitIconName2[0],\n              iconName = _this$_splitIconName2[1];\n\n          this._iconRegistry.getNamedSvgIcon(iconName, namespace).pipe(take(1)).subscribe(function (svg) {\n            return _this7._setSvgElement(svg);\n          }, function (err) {\n            return console.log(\"Error retrieving icon: \".concat(err.message));\n          });\n        } else {\n          this._clearSvgElement();\n        }\n      }\n\n      if (this._usingFontIcon()) {\n        this._updateFontIconClasses();\n      }\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngOnInit\",\n    value: function ngOnInit() {\n      // Update font classes because ngOnChanges won't be called if none of the inputs are present,\n      // e.g. <mat-icon>arrow</mat-icon> In this case we need to add a CSS class for the default font.\n      if (this._usingFontIcon()) {\n        this._updateFontIconClasses();\n      }\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngAfterViewChecked\",\n    value: function ngAfterViewChecked() {\n      /** @type {?} */\n      var cachedElements = this._elementsWithExternalReferences;\n\n      if (cachedElements && this._location && cachedElements.size) {\n        /** @type {?} */\n        var newPath = this._location.getPathname(); // We need to check whether the URL has changed on each change detection since\n        // the browser doesn't have an API that will let us react on link clicks and\n        // we can't depend on the Angular router. The references need to be updated,\n        // because while most browsers don't care whether the URL is correct after\n        // the first render, Safari will break if the user navigates to a different\n        // page and the SVG isn't re-rendered.\n\n\n        if (newPath !== this._previousPath) {\n          this._previousPath = newPath;\n\n          this._prependPathToReferences(newPath);\n        }\n      }\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      if (this._elementsWithExternalReferences) {\n        this._elementsWithExternalReferences.clear();\n      }\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"_usingFontIcon\",\n    value: function _usingFontIcon() {\n      return !this.svgIcon;\n    }\n    /**\n     * @param {?} svg\n     * @return {?}\n     */\n\n  }, {\n    key: \"_setSvgElement\",\n    value: function _setSvgElement(svg) {\n      this._clearSvgElement();\n      /** @type {?} */\n\n\n      var styleTags =\n      /** @type {?} */\n      svg.querySelectorAll('style');\n\n      for (var i = 0; i < styleTags.length; i++) {\n        styleTags[i].textContent += ' ';\n      } // Note: we do this fix here, rather than the icon registry, because the\n      // references have to point to the URL at the time that the icon was created.\n\n\n      if (this._location) {\n        /** @type {?} */\n        var path = this._location.getPathname();\n\n        this._previousPath = path;\n\n        this._cacheChildrenWithExternalReferences(svg);\n\n        this._prependPathToReferences(path);\n      }\n\n      this._elementRef.nativeElement.appendChild(svg);\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"_clearSvgElement\",\n    value: function _clearSvgElement() {\n      /** @type {?} */\n      var layoutElement = this._elementRef.nativeElement;\n      /** @type {?} */\n\n      var childCount = layoutElement.childNodes.length;\n\n      if (this._elementsWithExternalReferences) {\n        this._elementsWithExternalReferences.clear();\n      } // Remove existing non-element child nodes and SVGs, and add the new SVG element. Note that\n      // we can't use innerHTML, because IE will throw if the element has a data binding.\n\n\n      while (childCount--) {\n        /** @type {?} */\n        var child = layoutElement.childNodes[childCount]; // 1 corresponds to Node.ELEMENT_NODE. We remove all non-element nodes in order to get rid\n        // of any loose text nodes, as well as any SVG elements in order to remove any old icons.\n\n        if (child.nodeType !== 1 || child.nodeName.toLowerCase() === 'svg') {\n          layoutElement.removeChild(child);\n        }\n      }\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"_updateFontIconClasses\",\n    value: function _updateFontIconClasses() {\n      if (!this._usingFontIcon()) {\n        return;\n      }\n      /** @type {?} */\n\n\n      var elem = this._elementRef.nativeElement;\n      /** @type {?} */\n\n      var fontSetClass = this.fontSet ? this._iconRegistry.classNameForFontAlias(this.fontSet) : this._iconRegistry.getDefaultFontSetClass();\n\n      if (fontSetClass != this._previousFontSetClass) {\n        if (this._previousFontSetClass) {\n          elem.classList.remove(this._previousFontSetClass);\n        }\n\n        if (fontSetClass) {\n          elem.classList.add(fontSetClass);\n        }\n\n        this._previousFontSetClass = fontSetClass;\n      }\n\n      if (this.fontIcon != this._previousFontIconClass) {\n        if (this._previousFontIconClass) {\n          elem.classList.remove(this._previousFontIconClass);\n        }\n\n        if (this.fontIcon) {\n          elem.classList.add(this.fontIcon);\n        }\n\n        this._previousFontIconClass = this.fontIcon;\n      }\n    }\n    /**\n     * Cleans up a value to be used as a fontIcon or fontSet.\n     * Since the value ends up being assigned as a CSS class, we\n     * have to trim the value and omit space-separated values.\n     * @param {?} value\n     * @return {?}\n     */\n\n  }, {\n    key: \"_cleanupFontValue\",\n    value: function _cleanupFontValue(value) {\n      return typeof value === 'string' ? value.trim().split(' ')[0] : value;\n    }\n    /**\n     * Prepends the current path to all elements that have an attribute pointing to a `FuncIRI`\n     * reference. This is required because WebKit browsers require references to be prefixed with\n     * the current path, if the page has a `base` tag.\n     * @param {?} path\n     * @return {?}\n     */\n\n  }, {\n    key: \"_prependPathToReferences\",\n    value: function _prependPathToReferences(path) {\n      /** @type {?} */\n      var elements = this._elementsWithExternalReferences;\n\n      if (elements) {\n        elements.forEach(function (attrs, element) {\n          attrs.forEach(function (attr) {\n            element.setAttribute(attr.name, \"url('\".concat(path, \"#\").concat(attr.value, \"')\"));\n          });\n        });\n      }\n    }\n    /**\n     * Caches the children of an SVG element that have `url()`\n     * references that we need to prefix with the current path.\n     * @param {?} element\n     * @return {?}\n     */\n\n  }, {\n    key: \"_cacheChildrenWithExternalReferences\",\n    value: function _cacheChildrenWithExternalReferences(element) {\n      /** @type {?} */\n      var elementsWithFuncIri = element.querySelectorAll(funcIriAttributeSelector);\n      /** @type {?} */\n\n      var elements = this._elementsWithExternalReferences = this._elementsWithExternalReferences || new Map();\n\n      var _loop = function _loop(i) {\n        funcIriAttributes.forEach(function (attr) {\n          /** @type {?} */\n          var elementWithReference = elementsWithFuncIri[i];\n          /** @type {?} */\n\n          var value = elementWithReference.getAttribute(attr);\n          /** @type {?} */\n\n          var match = value ? value.match(funcIriPattern) : null;\n\n          if (match) {\n            /** @type {?} */\n            var attributes = elements.get(elementWithReference);\n\n            if (!attributes) {\n              attributes = [];\n              elements.set(elementWithReference, attributes);\n            }\n            /** @type {?} */\n\n\n            attributes.push({\n              name: attr,\n              value: match[1]\n            });\n          }\n        });\n      };\n\n      for (var i = 0; i < elementsWithFuncIri.length; i++) {\n        _loop(i);\n      }\n    }\n  }]);\n\n  return MatIcon;\n}(_MatIconMixinBase);\n\nMatIcon.ɵfac = function MatIcon_Factory(t) {\n  return new (t || MatIcon)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(MatIconRegistry), ɵngcc0.ɵɵinjectAttribute('aria-hidden'), ɵngcc0.ɵɵdirectiveInject(MAT_ICON_LOCATION, 8));\n};\n\nMatIcon.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n  type: MatIcon,\n  selectors: [[\"mat-icon\"]],\n  hostAttrs: [\"role\", \"img\", 1, \"mat-icon\"],\n  hostVars: 2,\n  hostBindings: function MatIcon_HostBindings(rf, ctx) {\n    if (rf & 2) {\n      ɵngcc0.ɵɵclassProp(\"mat-icon-inline\", ctx.inline);\n    }\n  },\n  inputs: {\n    color: \"color\",\n    inline: \"inline\",\n    fontSet: \"fontSet\",\n    fontIcon: \"fontIcon\",\n    svgIcon: \"svgIcon\"\n  },\n  exportAs: [\"matIcon\"],\n  features: [ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature],\n  ngContentSelectors: _c0,\n  decls: 1,\n  vars: 0,\n  template: function MatIcon_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵprojectionDef();\n      ɵngcc0.ɵɵprojection(0);\n    }\n  },\n  styles: [\".mat-icon{background-repeat:no-repeat;display:inline-block;fill:currentColor;height:24px;width:24px}.mat-icon.mat-icon-inline{font-size:inherit;height:inherit;line-height:inherit;width:inherit}[dir=rtl] .mat-icon-rtl-mirror{transform:scale(-1,1)}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .mat-icon,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .mat-icon{display:block}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .mat-icon-button .mat-icon,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .mat-icon-button .mat-icon{margin:auto}\"],\n  encapsulation: 2,\n  changeDetection: 0\n});\n/** @nocollapse */\n\nMatIcon.ctorParameters = function () {\n  return [{\n    type: ElementRef\n  }, {\n    type: MatIconRegistry\n  }, {\n    type: String,\n    decorators: [{\n      type: Attribute,\n      args: ['aria-hidden']\n    }]\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Optional\n    }, {\n      type: Inject,\n      args: [MAT_ICON_LOCATION]\n    }]\n  }];\n};\n\nMatIcon.propDecorators = {\n  inline: [{\n    type: Input\n  }],\n  svgIcon: [{\n    type: Input\n  }],\n  fontSet: [{\n    type: Input\n  }],\n  fontIcon: [{\n    type: Input\n  }]\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatIcon, [{\n    type: Component,\n    args: [{\n      template: '<ng-content></ng-content>',\n      selector: 'mat-icon',\n      exportAs: 'matIcon',\n      styles: [\".mat-icon{background-repeat:no-repeat;display:inline-block;fill:currentColor;height:24px;width:24px}.mat-icon.mat-icon-inline{font-size:inherit;height:inherit;line-height:inherit;width:inherit}[dir=rtl] .mat-icon-rtl-mirror{transform:scale(-1,1)}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .mat-icon,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .mat-icon{display:block}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .mat-icon-button .mat-icon,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .mat-icon-button .mat-icon{margin:auto}\"],\n      inputs: ['color'],\n      host: {\n        'role': 'img',\n        'class': 'mat-icon',\n        '[class.mat-icon-inline]': 'inline'\n      },\n      encapsulation: ViewEncapsulation.None,\n      changeDetection: ChangeDetectionStrategy.OnPush\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ElementRef\n    }, {\n      type: MatIconRegistry\n    }, {\n      type: String,\n      decorators: [{\n        type: Attribute,\n        args: ['aria-hidden']\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [MAT_ICON_LOCATION]\n      }]\n    }];\n  }, {\n    inline: [{\n      type: Input\n    }],\n    fontSet: [{\n      type: Input\n    }],\n    fontIcon: [{\n      type: Input\n    }],\n    svgIcon: [{\n      type: Input\n    }]\n  });\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n\nvar MatIconModule = function MatIconModule() {\n  _classCallCheck(this, MatIconModule);\n};\n\nMatIconModule.ɵfac = function MatIconModule_Factory(t) {\n  return new (t || MatIconModule)();\n};\n\nMatIconModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n  type: MatIconModule\n});\nMatIconModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n  imports: [[MatCommonModule], MatCommonModule]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatIconModule, [{\n    type: NgModule,\n    args: [{\n      imports: [MatCommonModule],\n      exports: [MatIcon, MatCommonModule],\n      declarations: [MatIcon]\n    }]\n  }], null, null);\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatIconModule, {\n    declarations: function declarations() {\n      return [MatIcon];\n    },\n    imports: function imports() {\n      return [MatCommonModule];\n    },\n    exports: function exports() {\n      return [MatIcon, MatCommonModule];\n    }\n  });\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n\nexport { MatIconModule, MAT_ICON_LOCATION_FACTORY, MatIconBase, _MatIconMixinBase, MAT_ICON_LOCATION, MatIcon, getMatIconNameNotFoundError, getMatIconNoHttpProviderError, getMatIconFailedToSanitizeUrlError, getMatIconFailedToSanitizeLiteralError, ICON_REGISTRY_PROVIDER_FACTORY, MatIconRegistry, ICON_REGISTRY_PROVIDER }; //# sourceMappingURL=icon.js.map","map":{"version":3,"sources":["/Users/adepertat/Dropbox/ECOLES/Openclassroom/P6_de_Pertat_Antoine/dwj-projet6/node_modules/@angular/material/__ivy_ngcc__/esm2015/icon.js"],"names":["DOCUMENT","HttpClient","Inject","Injectable","Optional","SecurityContext","SkipSelf","NgModule","Attribute","ChangeDetectionStrategy","Component","ElementRef","Input","ViewEncapsulation","InjectionToken","inject","defineInjectable","DomSanitizer","forkJoin","of","throwError","catchError","finalize","map","share","tap","take","mixinColor","MatCommonModule","coerceBooleanProperty","ɵngcc0","ɵngcc1","ɵngcc2","_c0","getMatIconNameNotFoundError","iconName","Error","getMatIconNoHttpProviderError","getMatIconFailedToSanitizeUrlError","url","getMatIconFailedToSanitizeLiteralError","literal","SvgIconConfig","data","nodeName","svgElement","MatIconRegistry","_httpClient","_sanitizer","document","_svgIconConfigs","Map","_iconSetConfigs","_cachedIconsByUrl","_inProgressUrlFetches","_fontCssClassesByAlias","_defaultFontSetClass","_document","addSvgIconInNamespace","addSvgIconLiteralInNamespace","namespace","_addSvgIconConfig","sanitizedLiteral","sanitize","HTML","_createSvgElementForSingleIcon","addSvgIconSetInNamespace","addSvgIconSetLiteralInNamespace","_addSvgIconSetConfig","_svgElementFromString","alias","className","set","get","safeUrl","RESOURCE_URL","cachedIcon","cloneSvg","_loadSvgIconFromConfig","pipe","svg","name","key","iconKey","config","_getSvgFromConfig","iconSetConfigs","_getSvgFromIconSetConfigs","namedIcon","_extractIconWithNameFromAnySet","iconSetFetchRequests","filter","iconSetConfig","_loadSvgIconSetFromConfig","err","console","error","message","foundIcon","i","length","_extractSvgIconFromSet","_fetchUrl","svgText","responseText","_setSvgAttributes","iconSet","iconSource","querySelector","iconElement","cloneNode","removeAttribute","toLowerCase","_toSvgElement","appendChild","str","div","createElement","innerHTML","element","childNodes","nodeType","ELEMENT_NODE","setAttribute","inProgressFetch","req","responseType","delete","configNamespace","push","ɵfac","MatIconRegistry_Factory","t","ɵɵinject","ɵprov","ɵɵdefineInjectable","token","factory","providedIn","ctorParameters","type","decorators","undefined","args","ngInjectableDef","ngDevMode","ɵsetClassMetadata","ICON_REGISTRY_PROVIDER_FACTORY","parentRegistry","httpClient","sanitizer","ICON_REGISTRY_PROVIDER","provide","deps","useFactory","MatIconBase","_elementRef","_MatIconMixinBase","MAT_ICON_LOCATION","MAT_ICON_LOCATION_FACTORY","getPathname","location","pathname","funcIriAttributes","ɵ0","attr","funcIriAttributeSelector","join","funcIriPattern","MatIcon","elementRef","_iconRegistry","ariaHidden","_location","_inline","nativeElement","inline","_fontSet","value","_cleanupFontValue","_fontIcon","parts","split","changes","svgIcon","_splitIconName","getNamedSvgIcon","subscribe","_setSvgElement","log","_clearSvgElement","_usingFontIcon","_updateFontIconClasses","cachedElements","_elementsWithExternalReferences","size","newPath","_previousPath","_prependPathToReferences","clear","styleTags","querySelectorAll","textContent","path","_cacheChildrenWithExternalReferences","layoutElement","childCount","child","removeChild","elem","fontSetClass","fontSet","classNameForFontAlias","getDefaultFontSetClass","_previousFontSetClass","classList","remove","add","fontIcon","_previousFontIconClass","trim","elements","forEach","attrs","elementsWithFuncIri","elementWithReference","getAttribute","match","attributes","MatIcon_Factory","ɵɵdirectiveInject","ɵɵinjectAttribute","ɵcmp","ɵɵdefineComponent","selectors","hostAttrs","hostVars","hostBindings","MatIcon_HostBindings","rf","ctx","ɵɵclassProp","inputs","color","exportAs","features","ɵɵInheritDefinitionFeature","ɵɵNgOnChangesFeature","ngContentSelectors","decls","vars","template","MatIcon_Template","ɵɵprojectionDef","ɵɵprojection","styles","encapsulation","changeDetection","String","propDecorators","selector","host","None","OnPush","MatIconModule","MatIconModule_Factory","ɵmod","ɵɵdefineNgModule","ɵinj","ɵɵdefineInjector","imports","exports","declarations","ngJitMode","ɵɵsetNgModuleScope"],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { DOCUMENT } from '@angular/common';\nimport { HttpClient } from '@angular/common/http';\nimport { Inject, Injectable, Optional, SecurityContext, SkipSelf, NgModule, Attribute, ChangeDetectionStrategy, Component, ElementRef, Input, ViewEncapsulation, InjectionToken, inject, defineInjectable } from '@angular/core';\nimport { DomSanitizer } from '@angular/platform-browser';\nimport { forkJoin, of, throwError } from 'rxjs';\nimport { catchError, finalize, map, share, tap, take } from 'rxjs/operators';\nimport { mixinColor, MatCommonModule } from '@angular/material/core';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * Returns an exception to be thrown in the case when attempting to\n * load an icon with a name that cannot be found.\n * \\@docs-private\n * @param {?} iconName\n * @return {?}\n */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/common/http';\nimport * as ɵngcc2 from '@angular/platform-browser';\n\nconst _c0 = [\"*\"];\nfunction getMatIconNameNotFoundError(iconName) {\n    return Error(`Unable to find icon with the name \"${iconName}\"`);\n}\n/**\n * Returns an exception to be thrown when the consumer attempts to use\n * `<mat-icon>` without including \\@angular/http.\n * \\@docs-private\n * @return {?}\n */\nfunction getMatIconNoHttpProviderError() {\n    return Error('Could not find HttpClient provider for use with Angular Material icons. ' +\n        'Please include the HttpClientModule from @angular/common/http in your ' +\n        'app imports.');\n}\n/**\n * Returns an exception to be thrown when a URL couldn't be sanitized.\n * \\@docs-private\n * @param {?} url URL that was attempted to be sanitized.\n * @return {?}\n */\nfunction getMatIconFailedToSanitizeUrlError(url) {\n    return Error(`The URL provided to MatIconRegistry was not trusted as a resource URL ` +\n        `via Angular's DomSanitizer. Attempted URL was \"${url}\".`);\n}\n/**\n * Returns an exception to be thrown when a HTML string couldn't be sanitized.\n * \\@docs-private\n * @param {?} literal HTML that was attempted to be sanitized.\n * @return {?}\n */\nfunction getMatIconFailedToSanitizeLiteralError(literal) {\n    return Error(`The literal provided to MatIconRegistry was not trusted as safe HTML by ` +\n        `Angular's DomSanitizer. Attempted literal was \"${literal}\".`);\n}\n/**\n * Configuration for an icon, including the URL and possibly the cached SVG element.\n * \\@docs-private\n */\nclass SvgIconConfig {\n    /**\n     * @param {?} data\n     */\n    constructor(data) {\n        // Note that we can't use `instanceof SVGElement` here,\n        // because it'll break during server-side rendering.\n        if (!!(/** @type {?} */ (data)).nodeName) {\n            this.svgElement = /** @type {?} */ (data);\n        }\n        else {\n            this.url = /** @type {?} */ (data);\n        }\n    }\n}\n/**\n * Service to register and display icons used by the `<mat-icon>` component.\n * - Registers icon URLs by namespace and name.\n * - Registers icon set URLs by namespace.\n * - Registers aliases for CSS classes, for use with icon fonts.\n * - Loads icons from URLs and extracts individual icons from icon sets.\n */\nclass MatIconRegistry {\n    /**\n     * @param {?} _httpClient\n     * @param {?} _sanitizer\n     * @param {?} document\n     */\n    constructor(_httpClient, _sanitizer, document) {\n        this._httpClient = _httpClient;\n        this._sanitizer = _sanitizer;\n        /**\n         * URLs and cached SVG elements for individual icons. Keys are of the format \"[namespace]:[icon]\".\n         */\n        this._svgIconConfigs = new Map();\n        /**\n         * SvgIconConfig objects and cached SVG elements for icon sets, keyed by namespace.\n         * Multiple icon sets can be registered under the same namespace.\n         */\n        this._iconSetConfigs = new Map();\n        /**\n         * Cache for icons loaded by direct URLs.\n         */\n        this._cachedIconsByUrl = new Map();\n        /**\n         * In-progress icon fetches. Used to coalesce multiple requests to the same URL.\n         */\n        this._inProgressUrlFetches = new Map();\n        /**\n         * Map from font identifiers to their CSS class names. Used for icon fonts.\n         */\n        this._fontCssClassesByAlias = new Map();\n        /**\n         * The CSS class to apply when an `<mat-icon>` component has no icon name, url, or font specified.\n         * The default 'material-icons' value assumes that the material icon font has been loaded as\n         * described at http://google.github.io/material-design-icons/#icon-font-for-the-web\n         */\n        this._defaultFontSetClass = 'material-icons';\n        this._document = document;\n    }\n    /**\n     * Registers an icon by URL in the default namespace.\n     * @param {?} iconName Name under which the icon should be registered.\n     * @param {?} url\n     * @return {?}\n     */\n    addSvgIcon(iconName, url) {\n        return this.addSvgIconInNamespace('', iconName, url);\n    }\n    /**\n     * Registers an icon using an HTML string in the default namespace.\n     * @param {?} iconName Name under which the icon should be registered.\n     * @param {?} literal SVG source of the icon.\n     * @return {?}\n     */\n    addSvgIconLiteral(iconName, literal) {\n        return this.addSvgIconLiteralInNamespace('', iconName, literal);\n    }\n    /**\n     * Registers an icon by URL in the specified namespace.\n     * @param {?} namespace Namespace in which the icon should be registered.\n     * @param {?} iconName Name under which the icon should be registered.\n     * @param {?} url\n     * @return {?}\n     */\n    addSvgIconInNamespace(namespace, iconName, url) {\n        return this._addSvgIconConfig(namespace, iconName, new SvgIconConfig(url));\n    }\n    /**\n     * Registers an icon using an HTML string in the specified namespace.\n     * @param {?} namespace Namespace in which the icon should be registered.\n     * @param {?} iconName Name under which the icon should be registered.\n     * @param {?} literal SVG source of the icon.\n     * @return {?}\n     */\n    addSvgIconLiteralInNamespace(namespace, iconName, literal) {\n        /** @type {?} */\n        const sanitizedLiteral = this._sanitizer.sanitize(SecurityContext.HTML, literal);\n        if (!sanitizedLiteral) {\n            throw getMatIconFailedToSanitizeLiteralError(literal);\n        }\n        /** @type {?} */\n        const svgElement = this._createSvgElementForSingleIcon(sanitizedLiteral);\n        return this._addSvgIconConfig(namespace, iconName, new SvgIconConfig(svgElement));\n    }\n    /**\n     * Registers an icon set by URL in the default namespace.\n     * @param {?} url\n     * @return {?}\n     */\n    addSvgIconSet(url) {\n        return this.addSvgIconSetInNamespace('', url);\n    }\n    /**\n     * Registers an icon set using an HTML string in the default namespace.\n     * @param {?} literal SVG source of the icon set.\n     * @return {?}\n     */\n    addSvgIconSetLiteral(literal) {\n        return this.addSvgIconSetLiteralInNamespace('', literal);\n    }\n    /**\n     * Registers an icon set by URL in the specified namespace.\n     * @param {?} namespace Namespace in which to register the icon set.\n     * @param {?} url\n     * @return {?}\n     */\n    addSvgIconSetInNamespace(namespace, url) {\n        return this._addSvgIconSetConfig(namespace, new SvgIconConfig(url));\n    }\n    /**\n     * Registers an icon set using an HTML string in the specified namespace.\n     * @param {?} namespace Namespace in which to register the icon set.\n     * @param {?} literal SVG source of the icon set.\n     * @return {?}\n     */\n    addSvgIconSetLiteralInNamespace(namespace, literal) {\n        /** @type {?} */\n        const sanitizedLiteral = this._sanitizer.sanitize(SecurityContext.HTML, literal);\n        if (!sanitizedLiteral) {\n            throw getMatIconFailedToSanitizeLiteralError(literal);\n        }\n        /** @type {?} */\n        const svgElement = this._svgElementFromString(sanitizedLiteral);\n        return this._addSvgIconSetConfig(namespace, new SvgIconConfig(svgElement));\n    }\n    /**\n     * Defines an alias for a CSS class name to be used for icon fonts. Creating an matIcon\n     * component with the alias as the fontSet input will cause the class name to be applied\n     * to the `<mat-icon>` element.\n     *\n     * @param {?} alias Alias for the font.\n     * @param {?=} className Class name override to be used instead of the alias.\n     * @return {?}\n     */\n    registerFontClassAlias(alias, className = alias) {\n        this._fontCssClassesByAlias.set(alias, className);\n        return this;\n    }\n    /**\n     * Returns the CSS class name associated with the alias by a previous call to\n     * registerFontClassAlias. If no CSS class has been associated, returns the alias unmodified.\n     * @param {?} alias\n     * @return {?}\n     */\n    classNameForFontAlias(alias) {\n        return this._fontCssClassesByAlias.get(alias) || alias;\n    }\n    /**\n     * Sets the CSS class name to be used for icon fonts when an `<mat-icon>` component does not\n     * have a fontSet input value, and is not loading an icon by name or URL.\n     *\n     * @param {?} className\n     * @return {?}\n     */\n    setDefaultFontSetClass(className) {\n        this._defaultFontSetClass = className;\n        return this;\n    }\n    /**\n     * Returns the CSS class name to be used for icon fonts when an `<mat-icon>` component does not\n     * have a fontSet input value, and is not loading an icon by name or URL.\n     * @return {?}\n     */\n    getDefaultFontSetClass() {\n        return this._defaultFontSetClass;\n    }\n    /**\n     * Returns an Observable that produces the icon (as an `<svg>` DOM element) from the given URL.\n     * The response from the URL may be cached so this will not always cause an HTTP request, but\n     * the produced element will always be a new copy of the originally fetched icon. (That is,\n     * it will not contain any modifications made to elements previously returned).\n     *\n     * @param {?} safeUrl URL from which to fetch the SVG icon.\n     * @return {?}\n     */\n    getSvgIconFromUrl(safeUrl) {\n        /** @type {?} */\n        const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n        if (!url) {\n            throw getMatIconFailedToSanitizeUrlError(safeUrl);\n        }\n        /** @type {?} */\n        const cachedIcon = this._cachedIconsByUrl.get(url);\n        if (cachedIcon) {\n            return of(cloneSvg(cachedIcon));\n        }\n        return this._loadSvgIconFromConfig(new SvgIconConfig(safeUrl)).pipe(tap(svg => this._cachedIconsByUrl.set(/** @type {?} */ ((url)), svg)), map(svg => cloneSvg(svg)));\n    }\n    /**\n     * Returns an Observable that produces the icon (as an `<svg>` DOM element) with the given name\n     * and namespace. The icon must have been previously registered with addIcon or addIconSet;\n     * if not, the Observable will throw an error.\n     *\n     * @param {?} name Name of the icon to be retrieved.\n     * @param {?=} namespace Namespace in which to look for the icon.\n     * @return {?}\n     */\n    getNamedSvgIcon(name, namespace = '') {\n        /** @type {?} */\n        const key = iconKey(namespace, name);\n        /** @type {?} */\n        const config = this._svgIconConfigs.get(key);\n        if (config) {\n            return this._getSvgFromConfig(config);\n        }\n        /** @type {?} */\n        const iconSetConfigs = this._iconSetConfigs.get(namespace);\n        if (iconSetConfigs) {\n            return this._getSvgFromIconSetConfigs(name, iconSetConfigs);\n        }\n        return throwError(getMatIconNameNotFoundError(key));\n    }\n    /**\n     * Returns the cached icon for a SvgIconConfig if available, or fetches it from its URL if not.\n     * @param {?} config\n     * @return {?}\n     */\n    _getSvgFromConfig(config) {\n        if (config.svgElement) {\n            // We already have the SVG element for this icon, return a copy.\n            return of(cloneSvg(config.svgElement));\n        }\n        else {\n            // Fetch the icon from the config's URL, cache it, and return a copy.\n            return this._loadSvgIconFromConfig(config).pipe(tap(svg => config.svgElement = svg), map(svg => cloneSvg(svg)));\n        }\n    }\n    /**\n     * Attempts to find an icon with the specified name in any of the SVG icon sets.\n     * First searches the available cached icons for a nested element with a matching name, and\n     * if found copies the element to a new `<svg>` element. If not found, fetches all icon sets\n     * that have not been cached, and searches again after all fetches are completed.\n     * The returned Observable produces the SVG element if possible, and throws\n     * an error if no icon with the specified name can be found.\n     * @param {?} name\n     * @param {?} iconSetConfigs\n     * @return {?}\n     */\n    _getSvgFromIconSetConfigs(name, iconSetConfigs) {\n        /** @type {?} */\n        const namedIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n        if (namedIcon) {\n            // We could cache namedIcon in _svgIconConfigs, but since we have to make a copy every\n            // time anyway, there's probably not much advantage compared to just always extracting\n            // it from the icon set.\n            return of(namedIcon);\n        }\n        /** @type {?} */\n        const iconSetFetchRequests = iconSetConfigs\n            .filter(iconSetConfig => !iconSetConfig.svgElement)\n            .map(iconSetConfig => {\n            return this._loadSvgIconSetFromConfig(iconSetConfig).pipe(catchError((err) => {\n                /** @type {?} */\n                const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, iconSetConfig.url);\n                // Swallow errors fetching individual URLs so the\n                // combined Observable won't necessarily fail.\n                console.error(`Loading icon set URL: ${url} failed: ${err.message}`);\n                return of(null);\n            }));\n        });\n        // Fetch all the icon set URLs. When the requests complete, every IconSet should have a\n        // cached SVG element (unless the request failed), and we can check again for the icon.\n        return forkJoin(iconSetFetchRequests).pipe(map(() => {\n            /** @type {?} */\n            const foundIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n            if (!foundIcon) {\n                throw getMatIconNameNotFoundError(name);\n            }\n            return foundIcon;\n        }));\n    }\n    /**\n     * Searches the cached SVG elements for the given icon sets for a nested icon element whose \"id\"\n     * tag matches the specified name. If found, copies the nested element to a new SVG element and\n     * returns it. Returns null if no matching element is found.\n     * @param {?} iconName\n     * @param {?} iconSetConfigs\n     * @return {?}\n     */\n    _extractIconWithNameFromAnySet(iconName, iconSetConfigs) {\n        // Iterate backwards, so icon sets added later have precedence.\n        for (let i = iconSetConfigs.length - 1; i >= 0; i--) {\n            /** @type {?} */\n            const config = iconSetConfigs[i];\n            if (config.svgElement) {\n                /** @type {?} */\n                const foundIcon = this._extractSvgIconFromSet(config.svgElement, iconName);\n                if (foundIcon) {\n                    return foundIcon;\n                }\n            }\n        }\n        return null;\n    }\n    /**\n     * Loads the content of the icon URL specified in the SvgIconConfig and creates an SVG element\n     * from it.\n     * @param {?} config\n     * @return {?}\n     */\n    _loadSvgIconFromConfig(config) {\n        return this._fetchUrl(config.url)\n            .pipe(map(svgText => this._createSvgElementForSingleIcon(svgText)));\n    }\n    /**\n     * Loads the content of the icon set URL specified in the SvgIconConfig and creates an SVG element\n     * from it.\n     * @param {?} config\n     * @return {?}\n     */\n    _loadSvgIconSetFromConfig(config) {\n        // If the SVG for this icon set has already been parsed, do nothing.\n        if (config.svgElement) {\n            return of(config.svgElement);\n        }\n        return this._fetchUrl(config.url).pipe(map(svgText => {\n            // It is possible that the icon set was parsed and cached by an earlier request, so parsing\n            // only needs to occur if the cache is yet unset.\n            if (!config.svgElement) {\n                config.svgElement = this._svgElementFromString(svgText);\n            }\n            return config.svgElement;\n        }));\n    }\n    /**\n     * Creates a DOM element from the given SVG string, and adds default attributes.\n     * @param {?} responseText\n     * @return {?}\n     */\n    _createSvgElementForSingleIcon(responseText) {\n        /** @type {?} */\n        const svg = this._svgElementFromString(responseText);\n        this._setSvgAttributes(svg);\n        return svg;\n    }\n    /**\n     * Searches the cached element of the given SvgIconConfig for a nested icon element whose \"id\"\n     * tag matches the specified name. If found, copies the nested element to a new SVG element and\n     * returns it. Returns null if no matching element is found.\n     * @param {?} iconSet\n     * @param {?} iconName\n     * @return {?}\n     */\n    _extractSvgIconFromSet(iconSet, iconName) {\n        /** @type {?} */\n        const iconSource = iconSet.querySelector('#' + iconName);\n        if (!iconSource) {\n            return null;\n        }\n        /** @type {?} */\n        const iconElement = /** @type {?} */ (iconSource.cloneNode(true));\n        iconElement.removeAttribute('id');\n        // If the icon node is itself an <svg> node, clone and return it directly. If not, set it as\n        // the content of a new <svg> node.\n        if (iconElement.nodeName.toLowerCase() === 'svg') {\n            return this._setSvgAttributes(/** @type {?} */ (iconElement));\n        }\n        // If the node is a <symbol>, it won't be rendered so we have to convert it into <svg>. Note\n        // that the same could be achieved by referring to it via <use href=\"#id\">, however the <use>\n        // tag is problematic on Firefox, because it needs to include the current page path.\n        if (iconElement.nodeName.toLowerCase() === 'symbol') {\n            return this._setSvgAttributes(this._toSvgElement(iconElement));\n        }\n        /** @type {?} */\n        const svg = this._svgElementFromString('<svg></svg>');\n        // Clone the node so we don't remove it from the parent icon set element.\n        svg.appendChild(iconElement);\n        return this._setSvgAttributes(svg);\n    }\n    /**\n     * Creates a DOM element from the given SVG string.\n     * @param {?} str\n     * @return {?}\n     */\n    _svgElementFromString(str) {\n        /** @type {?} */\n        const div = this._document.createElement('DIV');\n        div.innerHTML = str;\n        /** @type {?} */\n        const svg = /** @type {?} */ (div.querySelector('svg'));\n        if (!svg) {\n            throw Error('<svg> tag not found');\n        }\n        return svg;\n    }\n    /**\n     * Converts an element into an SVG node by cloning all of its children.\n     * @param {?} element\n     * @return {?}\n     */\n    _toSvgElement(element) {\n        /** @type {?} */\n        let svg = this._svgElementFromString('<svg></svg>');\n        for (let i = 0; i < element.childNodes.length; i++) {\n            if (element.childNodes[i].nodeType === this._document.ELEMENT_NODE) {\n                svg.appendChild(element.childNodes[i].cloneNode(true));\n            }\n        }\n        return svg;\n    }\n    /**\n     * Sets the default attributes for an SVG element to be used as an icon.\n     * @param {?} svg\n     * @return {?}\n     */\n    _setSvgAttributes(svg) {\n        svg.setAttribute('fit', '');\n        svg.setAttribute('height', '100%');\n        svg.setAttribute('width', '100%');\n        svg.setAttribute('preserveAspectRatio', 'xMidYMid meet');\n        svg.setAttribute('focusable', 'false'); // Disable IE11 default behavior to make SVGs focusable.\n        return svg;\n    }\n    /**\n     * Returns an Observable which produces the string contents of the given URL. Results may be\n     * cached, so future calls with the same URL may not cause another HTTP request.\n     * @param {?} safeUrl\n     * @return {?}\n     */\n    _fetchUrl(safeUrl) {\n        if (!this._httpClient) {\n            throw getMatIconNoHttpProviderError();\n        }\n        if (safeUrl == null) {\n            throw Error(`Cannot fetch icon from URL \"${safeUrl}\".`);\n        }\n        /** @type {?} */\n        const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n        if (!url) {\n            throw getMatIconFailedToSanitizeUrlError(safeUrl);\n        }\n        /** @type {?} */\n        const inProgressFetch = this._inProgressUrlFetches.get(url);\n        if (inProgressFetch) {\n            return inProgressFetch;\n        }\n        /** @type {?} */\n        const req = this._httpClient.get(url, { responseType: 'text' }).pipe(finalize(() => this._inProgressUrlFetches.delete(url)), share());\n        this._inProgressUrlFetches.set(url, req);\n        return req;\n    }\n    /**\n     * Registers an icon config by name in the specified namespace.\n     * @param {?} namespace Namespace in which to register the icon config.\n     * @param {?} iconName Name under which to register the config.\n     * @param {?} config Config to be registered.\n     * @return {?}\n     */\n    _addSvgIconConfig(namespace, iconName, config) {\n        this._svgIconConfigs.set(iconKey(namespace, iconName), config);\n        return this;\n    }\n    /**\n     * Registers an icon set config in the specified namespace.\n     * @param {?} namespace Namespace in which to register the icon config.\n     * @param {?} config Config to be registered.\n     * @return {?}\n     */\n    _addSvgIconSetConfig(namespace, config) {\n        /** @type {?} */\n        const configNamespace = this._iconSetConfigs.get(namespace);\n        if (configNamespace) {\n            configNamespace.push(config);\n        }\n        else {\n            this._iconSetConfigs.set(namespace, [config]);\n        }\n        return this;\n    }\n}\nMatIconRegistry.ɵfac = function MatIconRegistry_Factory(t) { return new (t || MatIconRegistry)(ɵngcc0.ɵɵinject(ɵngcc1.HttpClient, 8), ɵngcc0.ɵɵinject(ɵngcc2.DomSanitizer), ɵngcc0.ɵɵinject(DOCUMENT, 8)); };\nMatIconRegistry.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: MatIconRegistry, factory: MatIconRegistry.ɵfac, providedIn: 'root' });\n/** @nocollapse */\nMatIconRegistry.ctorParameters = () => [\n    { type: HttpClient, decorators: [{ type: Optional }] },\n    { type: DomSanitizer },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DOCUMENT,] }] }\n];\n/** @nocollapse */ MatIconRegistry.ngInjectableDef = defineInjectable({ factory: function MatIconRegistry_Factory() { return new MatIconRegistry(inject(HttpClient, 8), inject(DomSanitizer), inject(DOCUMENT, 8)); }, token: MatIconRegistry, providedIn: \"root\" });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatIconRegistry, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return [{ type: ɵngcc1.HttpClient, decorators: [{\n                type: Optional\n            }] }, { type: ɵngcc2.DomSanitizer }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [DOCUMENT]\n            }] }]; }, null); })();\n/**\n * \\@docs-private\n * @param {?} parentRegistry\n * @param {?} httpClient\n * @param {?} sanitizer\n * @param {?=} document\n * @return {?}\n */\nfunction ICON_REGISTRY_PROVIDER_FACTORY(parentRegistry, httpClient, sanitizer, document) {\n    return parentRegistry || new MatIconRegistry(httpClient, sanitizer, document);\n}\n/** *\n * \\@docs-private\n  @type {?} */\nconst ICON_REGISTRY_PROVIDER = {\n    // If there is already an MatIconRegistry available, use that. Otherwise, provide a new one.\n    provide: MatIconRegistry,\n    deps: [\n        [new Optional(), new SkipSelf(), MatIconRegistry],\n        [new Optional(), HttpClient],\n        DomSanitizer,\n        [new Optional(), /** @type {?} */ (DOCUMENT)],\n    ],\n    useFactory: ICON_REGISTRY_PROVIDER_FACTORY,\n};\n/**\n * Clones an SVGElement while preserving type information.\n * @param {?} svg\n * @return {?}\n */\nfunction cloneSvg(svg) {\n    return /** @type {?} */ (svg.cloneNode(true));\n}\n/**\n * Returns the cache key to use for an icon namespace and name.\n * @param {?} namespace\n * @param {?} name\n * @return {?}\n */\nfunction iconKey(namespace, name) {\n    return namespace + ':' + name;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * \\@docs-private\n */\nclass MatIconBase {\n    /**\n     * @param {?} _elementRef\n     */\n    constructor(_elementRef) {\n        this._elementRef = _elementRef;\n    }\n}\n/** @type {?} */\nconst _MatIconMixinBase = mixinColor(MatIconBase);\n/** *\n * Injection token used to provide the current location to `MatIcon`.\n * Used to handle server-side rendering and to stub out during unit tests.\n * \\@docs-private\n  @type {?} */\nconst MAT_ICON_LOCATION = new InjectionToken('mat-icon-location', {\n    providedIn: 'root',\n    factory: MAT_ICON_LOCATION_FACTORY\n});\n/**\n * \\@docs-private\n * @return {?}\n */\nfunction MAT_ICON_LOCATION_FACTORY() {\n    /** @type {?} */\n    const _document = inject(DOCUMENT);\n    return {\n        // Note that this needs to be a function, rather than a property, because Angular\n        // will only resolve it once, but we want the current path on each call.\n        getPathname: () => (_document && _document.location && _document.location.pathname) || ''\n    };\n}\n/** *\n * SVG attributes that accept a FuncIRI (e.g. `url(<something>)`).\n  @type {?} */\nconst funcIriAttributes = [\n    'clip-path',\n    'color-profile',\n    'src',\n    'cursor',\n    'fill',\n    'filter',\n    'marker',\n    'marker-start',\n    'marker-mid',\n    'marker-end',\n    'mask',\n    'stroke'\n];\nconst ɵ0 = attr => `[${attr}]`;\n/** *\n * Selector that can be used to find all elements that are using a `FuncIRI`.\n  @type {?} */\nconst funcIriAttributeSelector = funcIriAttributes.map(ɵ0).join(', ');\n/** *\n * Regex that can be used to extract the id out of a FuncIRI.\n  @type {?} */\nconst funcIriPattern = /^url\\(['\"]?#(.*?)['\"]?\\)$/;\n/**\n * Component to display an icon. It can be used in the following ways:\n *\n * - Specify the svgIcon input to load an SVG icon from a URL previously registered with the\n *   addSvgIcon, addSvgIconInNamespace, addSvgIconSet, or addSvgIconSetInNamespace methods of\n *   MatIconRegistry. If the svgIcon value contains a colon it is assumed to be in the format\n *   \"[namespace]:[name]\", if not the value will be the name of an icon in the default namespace.\n *   Examples:\n *     `<mat-icon svgIcon=\"left-arrow\"></mat-icon>\n *     <mat-icon svgIcon=\"animals:cat\"></mat-icon>`\n *\n * - Use a font ligature as an icon by putting the ligature text in the content of the `<mat-icon>`\n *   component. By default the Material icons font is used as described at\n *   http://google.github.io/material-design-icons/#icon-font-for-the-web. You can specify an\n *   alternate font by setting the fontSet input to either the CSS class to apply to use the\n *   desired font, or to an alias previously registered with MatIconRegistry.registerFontClassAlias.\n *   Examples:\n *     `<mat-icon>home</mat-icon>\n *     <mat-icon fontSet=\"myfont\">sun</mat-icon>`\n *\n * - Specify a font glyph to be included via CSS rules by setting the fontSet input to specify the\n *   font, and the fontIcon input to specify the icon. Typically the fontIcon will specify a\n *   CSS class which causes the glyph to be displayed via a :before selector, as in\n *   https://fortawesome.github.io/Font-Awesome/examples/\n *   Example:\n *     `<mat-icon fontSet=\"fa\" fontIcon=\"alarm\"></mat-icon>`\n */\nclass MatIcon extends _MatIconMixinBase {\n    /**\n     * @param {?} elementRef\n     * @param {?} _iconRegistry\n     * @param {?} ariaHidden\n     * @param {?=} _location\n     */\n    constructor(elementRef, _iconRegistry, ariaHidden, /**\n           * @deprecated `location` parameter to be made required.\n           * @breaking-change 8.0.0\n           */\n    _location) {\n        super(elementRef);\n        this._iconRegistry = _iconRegistry;\n        this._location = _location;\n        this._inline = false;\n        // If the user has not explicitly set aria-hidden, mark the icon as hidden, as this is\n        // the right thing to do for the majority of icon use-cases.\n        if (!ariaHidden) {\n            elementRef.nativeElement.setAttribute('aria-hidden', 'true');\n        }\n    }\n    /**\n     * Whether the icon should be inlined, automatically sizing the icon to match the font size of\n     * the element the icon is contained in.\n     * @return {?}\n     */\n    get inline() {\n        return this._inline;\n    }\n    /**\n     * @param {?} inline\n     * @return {?}\n     */\n    set inline(inline) {\n        this._inline = coerceBooleanProperty(inline);\n    }\n    /**\n     * Font set that the icon is a part of.\n     * @return {?}\n     */\n    get fontSet() { return this._fontSet; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set fontSet(value) {\n        this._fontSet = this._cleanupFontValue(value);\n    }\n    /**\n     * Name of an icon within a font set.\n     * @return {?}\n     */\n    get fontIcon() { return this._fontIcon; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set fontIcon(value) {\n        this._fontIcon = this._cleanupFontValue(value);\n    }\n    /**\n     * Splits an svgIcon binding value into its icon set and icon name components.\n     * Returns a 2-element array of [(icon set), (icon name)].\n     * The separator for the two fields is ':'. If there is no separator, an empty\n     * string is returned for the icon set and the entire value is returned for\n     * the icon name. If the argument is falsy, returns an array of two empty strings.\n     * Throws an error if the name contains two or more ':' separators.\n     * Examples:\n     *   `'social:cake' -> ['social', 'cake']\n     *   'penguin' -> ['', 'penguin']\n     *   null -> ['', '']\n     *   'a:b:c' -> (throws Error)`\n     * @param {?} iconName\n     * @return {?}\n     */\n    _splitIconName(iconName) {\n        if (!iconName) {\n            return ['', ''];\n        }\n        /** @type {?} */\n        const parts = iconName.split(':');\n        switch (parts.length) {\n            case 1: return ['', parts[0]]; // Use default namespace.\n            case 2: return /** @type {?} */ (parts);\n            default: throw Error(`Invalid icon name: \"${iconName}\"`);\n        }\n    }\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    ngOnChanges(changes) {\n        // Only update the inline SVG icon if the inputs changed, to avoid unnecessary DOM operations.\n        if (changes[\"svgIcon\"]) {\n            if (this.svgIcon) {\n                const [namespace, iconName] = this._splitIconName(this.svgIcon);\n                this._iconRegistry.getNamedSvgIcon(iconName, namespace).pipe(take(1)).subscribe(svg => this._setSvgElement(svg), (err) => console.log(`Error retrieving icon: ${err.message}`));\n            }\n            else {\n                this._clearSvgElement();\n            }\n        }\n        if (this._usingFontIcon()) {\n            this._updateFontIconClasses();\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngOnInit() {\n        // Update font classes because ngOnChanges won't be called if none of the inputs are present,\n        // e.g. <mat-icon>arrow</mat-icon> In this case we need to add a CSS class for the default font.\n        if (this._usingFontIcon()) {\n            this._updateFontIconClasses();\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngAfterViewChecked() {\n        /** @type {?} */\n        const cachedElements = this._elementsWithExternalReferences;\n        if (cachedElements && this._location && cachedElements.size) {\n            /** @type {?} */\n            const newPath = this._location.getPathname();\n            // We need to check whether the URL has changed on each change detection since\n            // the browser doesn't have an API that will let us react on link clicks and\n            // we can't depend on the Angular router. The references need to be updated,\n            // because while most browsers don't care whether the URL is correct after\n            // the first render, Safari will break if the user navigates to a different\n            // page and the SVG isn't re-rendered.\n            if (newPath !== this._previousPath) {\n                this._previousPath = newPath;\n                this._prependPathToReferences(newPath);\n            }\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        if (this._elementsWithExternalReferences) {\n            this._elementsWithExternalReferences.clear();\n        }\n    }\n    /**\n     * @return {?}\n     */\n    _usingFontIcon() {\n        return !this.svgIcon;\n    }\n    /**\n     * @param {?} svg\n     * @return {?}\n     */\n    _setSvgElement(svg) {\n        this._clearSvgElement();\n        /** @type {?} */\n        const styleTags = /** @type {?} */ (svg.querySelectorAll('style'));\n        for (let i = 0; i < styleTags.length; i++) {\n            styleTags[i].textContent += ' ';\n        }\n        // Note: we do this fix here, rather than the icon registry, because the\n        // references have to point to the URL at the time that the icon was created.\n        if (this._location) {\n            /** @type {?} */\n            const path = this._location.getPathname();\n            this._previousPath = path;\n            this._cacheChildrenWithExternalReferences(svg);\n            this._prependPathToReferences(path);\n        }\n        this._elementRef.nativeElement.appendChild(svg);\n    }\n    /**\n     * @return {?}\n     */\n    _clearSvgElement() {\n        /** @type {?} */\n        const layoutElement = this._elementRef.nativeElement;\n        /** @type {?} */\n        let childCount = layoutElement.childNodes.length;\n        if (this._elementsWithExternalReferences) {\n            this._elementsWithExternalReferences.clear();\n        }\n        // Remove existing non-element child nodes and SVGs, and add the new SVG element. Note that\n        // we can't use innerHTML, because IE will throw if the element has a data binding.\n        while (childCount--) {\n            /** @type {?} */\n            const child = layoutElement.childNodes[childCount];\n            // 1 corresponds to Node.ELEMENT_NODE. We remove all non-element nodes in order to get rid\n            // of any loose text nodes, as well as any SVG elements in order to remove any old icons.\n            if (child.nodeType !== 1 || child.nodeName.toLowerCase() === 'svg') {\n                layoutElement.removeChild(child);\n            }\n        }\n    }\n    /**\n     * @return {?}\n     */\n    _updateFontIconClasses() {\n        if (!this._usingFontIcon()) {\n            return;\n        }\n        /** @type {?} */\n        const elem = this._elementRef.nativeElement;\n        /** @type {?} */\n        const fontSetClass = this.fontSet ?\n            this._iconRegistry.classNameForFontAlias(this.fontSet) :\n            this._iconRegistry.getDefaultFontSetClass();\n        if (fontSetClass != this._previousFontSetClass) {\n            if (this._previousFontSetClass) {\n                elem.classList.remove(this._previousFontSetClass);\n            }\n            if (fontSetClass) {\n                elem.classList.add(fontSetClass);\n            }\n            this._previousFontSetClass = fontSetClass;\n        }\n        if (this.fontIcon != this._previousFontIconClass) {\n            if (this._previousFontIconClass) {\n                elem.classList.remove(this._previousFontIconClass);\n            }\n            if (this.fontIcon) {\n                elem.classList.add(this.fontIcon);\n            }\n            this._previousFontIconClass = this.fontIcon;\n        }\n    }\n    /**\n     * Cleans up a value to be used as a fontIcon or fontSet.\n     * Since the value ends up being assigned as a CSS class, we\n     * have to trim the value and omit space-separated values.\n     * @param {?} value\n     * @return {?}\n     */\n    _cleanupFontValue(value) {\n        return typeof value === 'string' ? value.trim().split(' ')[0] : value;\n    }\n    /**\n     * Prepends the current path to all elements that have an attribute pointing to a `FuncIRI`\n     * reference. This is required because WebKit browsers require references to be prefixed with\n     * the current path, if the page has a `base` tag.\n     * @param {?} path\n     * @return {?}\n     */\n    _prependPathToReferences(path) {\n        /** @type {?} */\n        const elements = this._elementsWithExternalReferences;\n        if (elements) {\n            elements.forEach((attrs, element) => {\n                attrs.forEach(attr => {\n                    element.setAttribute(attr.name, `url('${path}#${attr.value}')`);\n                });\n            });\n        }\n    }\n    /**\n     * Caches the children of an SVG element that have `url()`\n     * references that we need to prefix with the current path.\n     * @param {?} element\n     * @return {?}\n     */\n    _cacheChildrenWithExternalReferences(element) {\n        /** @type {?} */\n        const elementsWithFuncIri = element.querySelectorAll(funcIriAttributeSelector);\n        /** @type {?} */\n        const elements = this._elementsWithExternalReferences =\n            this._elementsWithExternalReferences || new Map();\n        for (let i = 0; i < elementsWithFuncIri.length; i++) {\n            funcIriAttributes.forEach(attr => {\n                /** @type {?} */\n                const elementWithReference = elementsWithFuncIri[i];\n                /** @type {?} */\n                const value = elementWithReference.getAttribute(attr);\n                /** @type {?} */\n                const match = value ? value.match(funcIriPattern) : null;\n                if (match) {\n                    /** @type {?} */\n                    let attributes = elements.get(elementWithReference);\n                    if (!attributes) {\n                        attributes = [];\n                        elements.set(elementWithReference, attributes);\n                    } /** @type {?} */\n                    ((attributes)).push({ name: attr, value: match[1] });\n                }\n            });\n        }\n    }\n}\nMatIcon.ɵfac = function MatIcon_Factory(t) { return new (t || MatIcon)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(MatIconRegistry), ɵngcc0.ɵɵinjectAttribute('aria-hidden'), ɵngcc0.ɵɵdirectiveInject(MAT_ICON_LOCATION, 8)); };\nMatIcon.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: MatIcon, selectors: [[\"mat-icon\"]], hostAttrs: [\"role\", \"img\", 1, \"mat-icon\"], hostVars: 2, hostBindings: function MatIcon_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"mat-icon-inline\", ctx.inline);\n    } }, inputs: { color: \"color\", inline: \"inline\", fontSet: \"fontSet\", fontIcon: \"fontIcon\", svgIcon: \"svgIcon\" }, exportAs: [\"matIcon\"], features: [ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature], ngContentSelectors: _c0, decls: 1, vars: 0, template: function MatIcon_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵprojection(0);\n    } }, styles: [\".mat-icon{background-repeat:no-repeat;display:inline-block;fill:currentColor;height:24px;width:24px}.mat-icon.mat-icon-inline{font-size:inherit;height:inherit;line-height:inherit;width:inherit}[dir=rtl] .mat-icon-rtl-mirror{transform:scale(-1,1)}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .mat-icon,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .mat-icon{display:block}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .mat-icon-button .mat-icon,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .mat-icon-button .mat-icon{margin:auto}\"], encapsulation: 2, changeDetection: 0 });\n/** @nocollapse */\nMatIcon.ctorParameters = () => [\n    { type: ElementRef },\n    { type: MatIconRegistry },\n    { type: String, decorators: [{ type: Attribute, args: ['aria-hidden',] }] },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_ICON_LOCATION,] }] }\n];\nMatIcon.propDecorators = {\n    inline: [{ type: Input }],\n    svgIcon: [{ type: Input }],\n    fontSet: [{ type: Input }],\n    fontIcon: [{ type: Input }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatIcon, [{\n        type: Component,\n        args: [{ template: '<ng-content></ng-content>',\n                selector: 'mat-icon',\n                exportAs: 'matIcon',\n                styles: [\".mat-icon{background-repeat:no-repeat;display:inline-block;fill:currentColor;height:24px;width:24px}.mat-icon.mat-icon-inline{font-size:inherit;height:inherit;line-height:inherit;width:inherit}[dir=rtl] .mat-icon-rtl-mirror{transform:scale(-1,1)}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .mat-icon,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .mat-icon{display:block}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .mat-icon-button .mat-icon,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .mat-icon-button .mat-icon{margin:auto}\"],\n                inputs: ['color'],\n                host: {\n                    'role': 'img',\n                    'class': 'mat-icon',\n                    '[class.mat-icon-inline]': 'inline'\n                },\n                encapsulation: ViewEncapsulation.None,\n                changeDetection: ChangeDetectionStrategy.OnPush }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: MatIconRegistry }, { type: String, decorators: [{\n                type: Attribute,\n                args: ['aria-hidden']\n            }] }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [MAT_ICON_LOCATION]\n            }] }]; }, { inline: [{\n            type: Input\n        }], fontSet: [{\n            type: Input\n        }], fontIcon: [{\n            type: Input\n        }], svgIcon: [{\n            type: Input\n        }] }); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\nclass MatIconModule {\n}\nMatIconModule.ɵfac = function MatIconModule_Factory(t) { return new (t || MatIconModule)(); };\nMatIconModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: MatIconModule });\nMatIconModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ imports: [[MatCommonModule], MatCommonModule] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatIconModule, [{\n        type: NgModule,\n        args: [{\n                imports: [MatCommonModule],\n                exports: [MatIcon, MatCommonModule],\n                declarations: [MatIcon]\n            }]\n    }], null, null); })();\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatIconModule, { declarations: function () { return [MatIcon]; }, imports: function () { return [MatCommonModule]; }, exports: function () { return [MatIcon, MatCommonModule]; } }); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\nexport { MatIconModule, MAT_ICON_LOCATION_FACTORY, MatIconBase, _MatIconMixinBase, MAT_ICON_LOCATION, MatIcon, getMatIconNameNotFoundError, getMatIconNoHttpProviderError, getMatIconFailedToSanitizeUrlError, getMatIconFailedToSanitizeLiteralError, ICON_REGISTRY_PROVIDER_FACTORY, MatIconRegistry, ICON_REGISTRY_PROVIDER };\n\n//# sourceMappingURL=icon.js.map"]},"metadata":{},"sourceType":"module"}