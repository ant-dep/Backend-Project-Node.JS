{"ast":null,"code":"import _get from \"/Users/adepertat/Dropbox/ECOLES/Openclassroom/P6_de_Pertat_Antoine/dwj-projet6/node_modules/@babel/runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"/Users/adepertat/Dropbox/ECOLES/Openclassroom/P6_de_Pertat_Antoine/dwj-projet6/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/adepertat/Dropbox/ECOLES/Openclassroom/P6_de_Pertat_Antoine/dwj-projet6/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/adepertat/Dropbox/ECOLES/Openclassroom/P6_de_Pertat_Antoine/dwj-projet6/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _toConsumableArray from \"/Users/adepertat/Dropbox/ECOLES/Openclassroom/P6_de_Pertat_Antoine/dwj-projet6/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"/Users/adepertat/Dropbox/ECOLES/Openclassroom/P6_de_Pertat_Antoine/dwj-projet6/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/adepertat/Dropbox/ECOLES/Openclassroom/P6_de_Pertat_Antoine/dwj-projet6/node_modules/@babel/runtime/helpers/esm/createClass\";\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { SelectionModel } from '@angular/cdk/collections';\nimport { Observable, BehaviorSubject, of, Subject } from 'rxjs';\nimport { take, takeUntil } from 'rxjs/operators';\nimport { Directive, TemplateRef, ViewContainerRef, ChangeDetectionStrategy, ChangeDetectorRef, Component, ContentChildren, ElementRef, Input, IterableDiffers, ViewChild, ViewEncapsulation, Optional, Renderer2, NgModule } from '@angular/core';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { coerceNumberProperty, coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { FocusMonitor } from '@angular/cdk/a11y';\nimport { CommonModule } from '@angular/common';\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * Base tree control. It has basic toggle/expand/collapse operations on a single data node.\n * @abstract\n * @template T\n */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/bidi';\n\nvar BaseTreeControl = /*#__PURE__*/function () {\n  function BaseTreeControl() {\n    _classCallCheck(this, BaseTreeControl);\n\n    /**\n     * A selection model with multi-selection to track expansion status.\n     */\n    this.expansionModel = new SelectionModel(true);\n  }\n  /**\n   * Toggles one single data node's expanded/collapsed state.\n   * @param {?} dataNode\n   * @return {?}\n   */\n\n\n  _createClass(BaseTreeControl, [{\n    key: \"toggle\",\n    value: function toggle(dataNode) {\n      this.expansionModel.toggle(dataNode);\n    }\n    /**\n     * Expands one single data node.\n     * @param {?} dataNode\n     * @return {?}\n     */\n\n  }, {\n    key: \"expand\",\n    value: function expand(dataNode) {\n      this.expansionModel.select(dataNode);\n    }\n    /**\n     * Collapses one single data node.\n     * @param {?} dataNode\n     * @return {?}\n     */\n\n  }, {\n    key: \"collapse\",\n    value: function collapse(dataNode) {\n      this.expansionModel.deselect(dataNode);\n    }\n    /**\n     * Whether a given data node is expanded or not. Returns true if the data node is expanded.\n     * @param {?} dataNode\n     * @return {?}\n     */\n\n  }, {\n    key: \"isExpanded\",\n    value: function isExpanded(dataNode) {\n      return this.expansionModel.isSelected(dataNode);\n    }\n    /**\n     * Toggles a subtree rooted at `node` recursively.\n     * @param {?} dataNode\n     * @return {?}\n     */\n\n  }, {\n    key: \"toggleDescendants\",\n    value: function toggleDescendants(dataNode) {\n      this.expansionModel.isSelected(dataNode) ? this.collapseDescendants(dataNode) : this.expandDescendants(dataNode);\n    }\n    /**\n     * Collapse all dataNodes in the tree.\n     * @return {?}\n     */\n\n  }, {\n    key: \"collapseAll\",\n    value: function collapseAll() {\n      this.expansionModel.clear();\n    }\n    /**\n     * Expands a subtree rooted at given data node recursively.\n     * @param {?} dataNode\n     * @return {?}\n     */\n\n  }, {\n    key: \"expandDescendants\",\n    value: function expandDescendants(dataNode) {\n      var _this$expansionModel;\n\n      /** @type {?} */\n      var toBeProcessed = [dataNode];\n      toBeProcessed.push.apply(toBeProcessed, _toConsumableArray(this.getDescendants(dataNode)));\n\n      (_this$expansionModel = this.expansionModel).select.apply(_this$expansionModel, toBeProcessed);\n    }\n    /**\n     * Collapses a subtree rooted at given data node recursively.\n     * @param {?} dataNode\n     * @return {?}\n     */\n\n  }, {\n    key: \"collapseDescendants\",\n    value: function collapseDescendants(dataNode) {\n      var _this$expansionModel2;\n\n      /** @type {?} */\n      var toBeProcessed = [dataNode];\n      toBeProcessed.push.apply(toBeProcessed, _toConsumableArray(this.getDescendants(dataNode)));\n\n      (_this$expansionModel2 = this.expansionModel).deselect.apply(_this$expansionModel2, toBeProcessed);\n    }\n  }]);\n\n  return BaseTreeControl;\n}();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * Flat tree control. Able to expand/collapse a subtree recursively for flattened tree.\n * @template T\n */\n\n\nvar FlatTreeControl = /*#__PURE__*/function (_BaseTreeControl) {\n  _inherits(FlatTreeControl, _BaseTreeControl);\n\n  var _super = _createSuper(FlatTreeControl);\n\n  /**\n   * Construct with flat tree data node functions getLevel and isExpandable.\n   * @param {?} getLevel\n   * @param {?} isExpandable\n   */\n  function FlatTreeControl(getLevel, isExpandable) {\n    var _this;\n\n    _classCallCheck(this, FlatTreeControl);\n\n    _this = _super.call(this);\n    _this.getLevel = getLevel;\n    _this.isExpandable = isExpandable;\n    return _this;\n  }\n  /**\n   * Gets a list of the data node's subtree of descendent data nodes.\n   *\n   * To make this working, the `dataNodes` of the TreeControl must be flattened tree nodes\n   * with correct levels.\n   * @param {?} dataNode\n   * @return {?}\n   */\n\n\n  _createClass(FlatTreeControl, [{\n    key: \"getDescendants\",\n    value: function getDescendants(dataNode) {\n      /** @type {?} */\n      var startIndex = this.dataNodes.indexOf(dataNode);\n      /** @type {?} */\n\n      var results = []; // Goes through flattened tree nodes in the `dataNodes` array, and get all descendants.\n      // The level of descendants of a tree node must be greater than the level of the given\n      // tree node.\n      // If we reach a node whose level is equal to the level of the tree node, we hit a sibling.\n      // If we reach a node whose level is greater than the level of the tree node, we hit a\n      // sibling of an ancestor.\n\n      for (var i = startIndex + 1; i < this.dataNodes.length && this.getLevel(dataNode) < this.getLevel(this.dataNodes[i]); i++) {\n        results.push(this.dataNodes[i]);\n      }\n\n      return results;\n    }\n    /**\n     * Expands all data nodes in the tree.\n     *\n     * To make this working, the `dataNodes` variable of the TreeControl must be set to all flattened\n     * data nodes of the tree.\n     * @return {?}\n     */\n\n  }, {\n    key: \"expandAll\",\n    value: function expandAll() {\n      var _this$expansionModel3;\n\n      (_this$expansionModel3 = this.expansionModel).select.apply(_this$expansionModel3, _toConsumableArray(this.dataNodes));\n    }\n  }]);\n\n  return FlatTreeControl;\n}(BaseTreeControl);\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * Nested tree control. Able to expand/collapse a subtree recursively for NestedNode type.\n * @template T\n */\n\n\nvar NestedTreeControl = /*#__PURE__*/function (_BaseTreeControl2) {\n  _inherits(NestedTreeControl, _BaseTreeControl2);\n\n  var _super2 = _createSuper(NestedTreeControl);\n\n  /**\n   * Construct with nested tree function getChildren.\n   * @param {?} getChildren\n   */\n  function NestedTreeControl(getChildren) {\n    var _this2;\n\n    _classCallCheck(this, NestedTreeControl);\n\n    _this2 = _super2.call(this);\n    _this2.getChildren = getChildren;\n    return _this2;\n  }\n  /**\n   * Expands all dataNodes in the tree.\n   *\n   * To make this working, the `dataNodes` variable of the TreeControl must be set to all root level\n   * data nodes of the tree.\n   * @return {?}\n   */\n\n\n  _createClass(NestedTreeControl, [{\n    key: \"expandAll\",\n    value: function expandAll() {\n      var _this3 = this,\n          _this$expansionModel4;\n\n      this.expansionModel.clear();\n      /** @type {?} */\n\n      var allNodes = this.dataNodes.reduce(function (accumulator, dataNode) {\n        return [].concat(_toConsumableArray(accumulator), _toConsumableArray(_this3.getDescendants(dataNode)), [dataNode]);\n      }, []);\n\n      (_this$expansionModel4 = this.expansionModel).select.apply(_this$expansionModel4, _toConsumableArray(allNodes));\n    }\n    /**\n     * Gets a list of descendant dataNodes of a subtree rooted at given data node recursively.\n     * @param {?} dataNode\n     * @return {?}\n     */\n\n  }, {\n    key: \"getDescendants\",\n    value: function getDescendants(dataNode) {\n      /** @type {?} */\n      var descendants = [];\n\n      this._getDescendants(descendants, dataNode); // Remove the node itself\n\n\n      return descendants.splice(1);\n    }\n    /**\n     * A helper function to get descendants recursively.\n     * @param {?} descendants\n     * @param {?} dataNode\n     * @return {?}\n     */\n\n  }, {\n    key: \"_getDescendants\",\n    value: function _getDescendants(descendants, dataNode) {\n      var _this4 = this;\n\n      descendants.push(dataNode);\n      /** @type {?} */\n\n      var childrenNodes = this.getChildren(dataNode);\n\n      if (Array.isArray(childrenNodes)) {\n        childrenNodes.forEach(function (child) {\n          return _this4._getDescendants(descendants, child);\n        });\n      } else if (childrenNodes instanceof Observable) {\n        childrenNodes.pipe(take(1)).subscribe(function (children) {\n          children.forEach(function (child) {\n            return _this4._getDescendants(descendants, child);\n          });\n        });\n      }\n    }\n  }]);\n\n  return NestedTreeControl;\n}(BaseTreeControl);\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * Context provided to the tree node component.\n * @template T\n */\n\n\nvar CdkTreeNodeOutletContext =\n/**\n * @param {?} data\n */\nfunction CdkTreeNodeOutletContext(data) {\n  _classCallCheck(this, CdkTreeNodeOutletContext);\n\n  this.$implicit = data;\n};\n/**\n * Data node definition for the CdkTree.\n * Captures the node's template and a when predicate that describes when this node should be used.\n * @template T\n */\n\n\nvar CdkTreeNodeDef =\n/**\n * \\@docs-private\n * @param {?} template\n */\nfunction CdkTreeNodeDef(template) {\n  _classCallCheck(this, CdkTreeNodeDef);\n\n  this.template = template;\n};\n\nCdkTreeNodeDef.ɵfac = function CdkTreeNodeDef_Factory(t) {\n  return new (t || CdkTreeNodeDef)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef));\n};\n\nCdkTreeNodeDef.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n  type: CdkTreeNodeDef,\n  selectors: [[\"\", \"cdkTreeNodeDef\", \"\"]],\n  inputs: {\n    when: [\"cdkTreeNodeDefWhen\", \"when\"]\n  }\n});\n/** @nocollapse */\n\nCdkTreeNodeDef.ctorParameters = function () {\n  return [{\n    type: TemplateRef\n  }];\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkTreeNodeDef, [{\n    type: Directive,\n    args: [{\n      selector: '[cdkTreeNodeDef]',\n      inputs: ['when: cdkTreeNodeDefWhen']\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.TemplateRef\n    }];\n  }, null);\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * Outlet for nested CdkNode. Put `[cdkTreeNodeOutlet]` on a tag to place children dataNodes\n * inside the outlet.\n */\n\n\nvar CdkTreeNodeOutlet =\n/**\n * @param {?} viewContainer\n */\nfunction CdkTreeNodeOutlet(viewContainer) {\n  _classCallCheck(this, CdkTreeNodeOutlet);\n\n  this.viewContainer = viewContainer;\n};\n\nCdkTreeNodeOutlet.ɵfac = function CdkTreeNodeOutlet_Factory(t) {\n  return new (t || CdkTreeNodeOutlet)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef));\n};\n\nCdkTreeNodeOutlet.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n  type: CdkTreeNodeOutlet,\n  selectors: [[\"\", \"cdkTreeNodeOutlet\", \"\"]]\n});\n/** @nocollapse */\n\nCdkTreeNodeOutlet.ctorParameters = function () {\n  return [{\n    type: ViewContainerRef\n  }];\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkTreeNodeOutlet, [{\n    type: Directive,\n    args: [{\n      selector: '[cdkTreeNodeOutlet]'\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ViewContainerRef\n    }];\n  }, null);\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * Returns an error to be thrown when there is no usable data.\n * \\@docs-private\n * @return {?}\n */\n\n\nfunction getTreeNoValidDataSourceError() {\n  return Error(\"A valid data source must be provided.\");\n}\n/**\n * Returns an error to be thrown when there are multiple nodes that are missing a when function.\n * \\@docs-private\n * @return {?}\n */\n\n\nfunction getTreeMultipleDefaultNodeDefsError() {\n  return Error(\"There can only be one default row without a when predicate function.\");\n}\n/**\n * Returns an error to be thrown when there are no matching node defs for a particular set of data.\n * \\@docs-private\n * @return {?}\n */\n\n\nfunction getTreeMissingMatchingNodeDefError() {\n  return Error(\"Could not find a matching node definition for the provided node data.\");\n}\n/**\n * Returns an error to be thrown when there are tree control.\n * \\@docs-private\n * @return {?}\n */\n\n\nfunction getTreeControlMissingError() {\n  return Error(\"Could not find a tree control for the tree.\");\n}\n/**\n * Returns an error to be thrown when tree control did not implement functions for flat/nested node.\n * \\@docs-private\n * @return {?}\n */\n\n\nfunction getTreeControlFunctionsMissingError() {\n  return Error(\"Could not find functions for nested/flat tree in tree control.\");\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * CDK tree component that connects with a data source to retrieve data of type `T` and renders\n * dataNodes with hierarchy. Updates the dataNodes when new data is provided by the data source.\n * @template T\n */\n\n\nvar CdkTree = /*#__PURE__*/function () {\n  /**\n   * @param {?} _differs\n   * @param {?} _changeDetectorRef\n   */\n  function CdkTree(_differs, _changeDetectorRef) {\n    _classCallCheck(this, CdkTree);\n\n    this._differs = _differs;\n    this._changeDetectorRef = _changeDetectorRef;\n    /**\n     * Subject that emits when the component has been destroyed.\n     */\n\n    this._onDestroy = new Subject();\n    /**\n     * Level of nodes\n     */\n\n    this._levels = new Map();\n    /**\n     * Stream containing the latest information on what rows are being displayed on screen.\n     * Can be used by the data source to as a heuristic of what data should be provided.\n     */\n\n    this.viewChange = new BehaviorSubject({\n      start: 0,\n      end: Number.MAX_VALUE\n    });\n  }\n  /**\n   * Provides a stream containing the latest data array to render. Influenced by the tree's\n   * stream of view window (what dataNodes are currently on screen).\n   * Data source can be an observable of data array, or a data array to render.\n   * @return {?}\n   */\n\n\n  _createClass(CdkTree, [{\n    key: \"dataSource\",\n    get: function get() {\n      return this._dataSource;\n    }\n    /**\n     * @param {?} dataSource\n     * @return {?}\n     */\n    ,\n    set: function set(dataSource) {\n      if (this._dataSource !== dataSource) {\n        this._switchDataSource(dataSource);\n      }\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngOnInit\",\n    value: function ngOnInit() {\n      this._dataDiffer = this._differs.find([]).create(this.trackBy);\n\n      if (!this.treeControl) {\n        throw getTreeControlMissingError();\n      }\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      this._nodeOutlet.viewContainer.clear();\n\n      this._onDestroy.next();\n\n      this._onDestroy.complete();\n\n      if (this._dataSource && typeof\n      /** @type {?} */\n      this._dataSource.disconnect === 'function') {\n        /** @type {?} */\n        this.dataSource.disconnect(this);\n      }\n\n      if (this._dataSubscription) {\n        this._dataSubscription.unsubscribe();\n\n        this._dataSubscription = null;\n      }\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngAfterContentChecked\",\n    value: function ngAfterContentChecked() {\n      /** @type {?} */\n      var defaultNodeDefs = this._nodeDefs.filter(function (def) {\n        return !def.when;\n      });\n\n      if (defaultNodeDefs.length > 1) {\n        throw getTreeMultipleDefaultNodeDefsError();\n      }\n\n      this._defaultNodeDef = defaultNodeDefs[0];\n\n      if (this.dataSource && this._nodeDefs && !this._dataSubscription) {\n        this._observeRenderChanges();\n      }\n    }\n    /**\n     * Switch to the provided data source by resetting the data and unsubscribing from the current\n     * render change subscription if one exists. If the data source is null, interpret this by\n     * clearing the node outlet. Otherwise start listening for new data.\n     * @param {?} dataSource\n     * @return {?}\n     */\n\n  }, {\n    key: \"_switchDataSource\",\n    value: function _switchDataSource(dataSource) {\n      if (this._dataSource && typeof\n      /** @type {?} */\n      this._dataSource.disconnect === 'function') {\n        /** @type {?} */\n        this.dataSource.disconnect(this);\n      }\n\n      if (this._dataSubscription) {\n        this._dataSubscription.unsubscribe();\n\n        this._dataSubscription = null;\n      } // Remove the all dataNodes if there is now no data source\n\n\n      if (!dataSource) {\n        this._nodeOutlet.viewContainer.clear();\n      }\n\n      this._dataSource = dataSource;\n\n      if (this._nodeDefs) {\n        this._observeRenderChanges();\n      }\n    }\n    /**\n     * Set up a subscription for the data provided by the data source.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_observeRenderChanges\",\n    value: function _observeRenderChanges() {\n      var _this5 = this;\n\n      /** @type {?} */\n      var dataStream; // Cannot use `instanceof DataSource` since the data source could be a literal with\n      // `connect` function and may not extends DataSource.\n\n      if (typeof\n      /** @type {?} */\n      this._dataSource.connect === 'function') {\n        dataStream =\n        /** @type {?} */\n        this._dataSource.connect(this);\n      } else if (this._dataSource instanceof Observable) {\n        dataStream = this._dataSource;\n      } else if (Array.isArray(this._dataSource)) {\n        dataStream = of(this._dataSource);\n      }\n\n      if (dataStream) {\n        this._dataSubscription = dataStream.pipe(takeUntil(this._onDestroy)).subscribe(function (data) {\n          return _this5.renderNodeChanges(data);\n        });\n      } else {\n        throw getTreeNoValidDataSourceError();\n      }\n    }\n    /**\n     * Check for changes made in the data and render each change (node added/removed/moved).\n     * @param {?} data\n     * @param {?=} dataDiffer\n     * @param {?=} viewContainer\n     * @param {?=} parentData\n     * @return {?}\n     */\n\n  }, {\n    key: \"renderNodeChanges\",\n    value: function renderNodeChanges(data) {\n      var _this6 = this;\n\n      var dataDiffer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this._dataDiffer;\n      var viewContainer = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this._nodeOutlet.viewContainer;\n      var parentData = arguments.length > 3 ? arguments[3] : undefined;\n\n      /** @type {?} */\n      var changes = dataDiffer.diff(data);\n\n      if (!changes) {\n        return;\n      }\n\n      changes.forEachOperation(function (item, adjustedPreviousIndex, currentIndex) {\n        if (item.previousIndex == null) {\n          _this6.insertNode(data[\n          /** @type {?} */\n          currentIndex],\n          /** @type {?} */\n          currentIndex, viewContainer, parentData);\n        } else if (currentIndex == null) {\n          viewContainer.remove(\n          /** @type {?} */\n          adjustedPreviousIndex);\n\n          _this6._levels.delete(item.item);\n        } else {\n          /** @type {?} */\n          var view = viewContainer.get(\n          /** @type {?} */\n          adjustedPreviousIndex);\n          viewContainer.move(\n          /** @type {?} */\n          view, currentIndex);\n        }\n      });\n\n      this._changeDetectorRef.detectChanges();\n    }\n    /**\n     * Finds the matching node definition that should be used for this node data. If there is only\n     * one node definition, it is returned. Otherwise, find the node definition that has a when\n     * predicate that returns true with the data. If none return true, return the default node\n     * definition.\n     * @param {?} data\n     * @param {?} i\n     * @return {?}\n     */\n\n  }, {\n    key: \"_getNodeDef\",\n    value: function _getNodeDef(data, i) {\n      if (this._nodeDefs.length === 1) {\n        return this._nodeDefs.first;\n      }\n      /** @type {?} */\n\n\n      var nodeDef = this._nodeDefs.find(function (def) {\n        return def.when && def.when(i, data);\n      }) || this._defaultNodeDef;\n\n      if (!nodeDef) {\n        throw getTreeMissingMatchingNodeDefError();\n      }\n\n      return nodeDef;\n    }\n    /**\n     * Create the embedded view for the data node template and place it in the correct index location\n     * within the data node view container.\n     * @param {?} nodeData\n     * @param {?} index\n     * @param {?=} viewContainer\n     * @param {?=} parentData\n     * @return {?}\n     */\n\n  }, {\n    key: \"insertNode\",\n    value: function insertNode(nodeData, index, viewContainer, parentData) {\n      /** @type {?} */\n      var node = this._getNodeDef(nodeData, index);\n      /** @type {?} */\n\n\n      var context = new CdkTreeNodeOutletContext(nodeData); // If the tree is flat tree, then use the `getLevel` function in flat tree control\n      // Otherwise, use the level of parent node.\n\n      if (this.treeControl.getLevel) {\n        context.level = this.treeControl.getLevel(nodeData);\n      } else if (typeof parentData !== 'undefined' && this._levels.has(parentData)) {\n        context.level =\n        /** @type {?} */\n        this._levels.get(parentData) + 1;\n      } else {\n        context.level = 0;\n      }\n\n      this._levels.set(nodeData, context.level);\n      /** @type {?} */\n\n\n      var container = viewContainer ? viewContainer : this._nodeOutlet.viewContainer;\n      container.createEmbeddedView(node.template, context, index); // Set the data to just created `CdkTreeNode`.\n      // The `CdkTreeNode` created from `createEmbeddedView` will be saved in static variable\n      //     `mostRecentTreeNode`. We get it from static variable and pass the node data to it.\n\n      if (CdkTreeNode.mostRecentTreeNode) {\n        CdkTreeNode.mostRecentTreeNode.data = nodeData;\n      }\n    }\n  }]);\n\n  return CdkTree;\n}();\n\nCdkTree.ɵfac = function CdkTree_Factory(t) {\n  return new (t || CdkTree)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.IterableDiffers), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef));\n};\n\nCdkTree.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n  type: CdkTree,\n  selectors: [[\"cdk-tree\"]],\n  contentQueries: function CdkTree_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵcontentQuery(dirIndex, CdkTreeNodeDef, 4);\n    }\n\n    if (rf & 2) {\n      var _t;\n\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._nodeDefs = _t);\n    }\n  },\n  viewQuery: function CdkTree_Query(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵviewQuery(CdkTreeNodeOutlet, 5);\n    }\n\n    if (rf & 2) {\n      var _t;\n\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._nodeOutlet = _t.first);\n    }\n  },\n  hostAttrs: [\"role\", \"tree\", 1, \"cdk-tree\"],\n  inputs: {\n    dataSource: \"dataSource\",\n    treeControl: \"treeControl\",\n    trackBy: \"trackBy\"\n  },\n  exportAs: [\"cdkTree\"],\n  decls: 1,\n  vars: 0,\n  consts: [[\"cdkTreeNodeOutlet\", \"\"]],\n  template: function CdkTree_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵelementContainer(0, 0);\n    }\n  },\n  directives: [CdkTreeNodeOutlet],\n  encapsulation: 2,\n  changeDetection: 0\n});\n/** @nocollapse */\n\nCdkTree.ctorParameters = function () {\n  return [{\n    type: IterableDiffers\n  }, {\n    type: ChangeDetectorRef\n  }];\n};\n\nCdkTree.propDecorators = {\n  dataSource: [{\n    type: Input\n  }],\n  treeControl: [{\n    type: Input\n  }],\n  trackBy: [{\n    type: Input\n  }],\n  _nodeOutlet: [{\n    type: ViewChild,\n    args: [CdkTreeNodeOutlet]\n  }],\n  _nodeDefs: [{\n    type: ContentChildren,\n    args: [CdkTreeNodeDef]\n  }]\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkTree, [{\n    type: Component,\n    args: [{\n      selector: 'cdk-tree',\n      exportAs: 'cdkTree',\n      template: \"<ng-container cdkTreeNodeOutlet></ng-container>\",\n      host: {\n        'class': 'cdk-tree',\n        'role': 'tree'\n      },\n      encapsulation: ViewEncapsulation.None,\n      changeDetection: ChangeDetectionStrategy.OnPush\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.IterableDiffers\n    }, {\n      type: ɵngcc0.ChangeDetectorRef\n    }];\n  }, {\n    dataSource: [{\n      type: Input\n    }],\n    treeControl: [{\n      type: Input\n    }],\n    trackBy: [{\n      type: Input\n    }],\n    _nodeOutlet: [{\n      type: ViewChild,\n      args: [CdkTreeNodeOutlet]\n    }],\n    _nodeDefs: [{\n      type: ContentChildren,\n      args: [CdkTreeNodeDef]\n    }]\n  });\n})();\n/**\n * Tree node for CdkTree. It contains the data in the tree node.\n * @template T\n */\n\n\nvar CdkTreeNode = /*#__PURE__*/function () {\n  /**\n   * @param {?} _elementRef\n   * @param {?} _tree\n   */\n  function CdkTreeNode(_elementRef, _tree) {\n    _classCallCheck(this, CdkTreeNode);\n\n    this._elementRef = _elementRef;\n    this._tree = _tree;\n    /**\n     * Subject that emits when the component has been destroyed.\n     */\n\n    this._destroyed = new Subject();\n    /**\n     * The role of the node should be 'group' if it's an internal node,\n     * and 'treeitem' if it's a leaf node.\n     */\n\n    this.role = 'treeitem';\n    CdkTreeNode.mostRecentTreeNode =\n    /** @type {?} */\n    this;\n  }\n  /**\n   * The tree node's data.\n   * @return {?}\n   */\n\n\n  _createClass(CdkTreeNode, [{\n    key: \"data\",\n    get: function get() {\n      return this._data;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ,\n    set: function set(value) {\n      this._data = value;\n\n      this._setRoleFromData();\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"isExpanded\",\n    get: function get() {\n      return this._tree.treeControl.isExpanded(this._data);\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"level\",\n    get: function get() {\n      return this._tree.treeControl.getLevel ? this._tree.treeControl.getLevel(this._data) : 0;\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      // If this is the last tree node being destroyed,\n      // clear out the reference to avoid leaking memory.\n      if (CdkTreeNode.mostRecentTreeNode === this) {\n        CdkTreeNode.mostRecentTreeNode = null;\n      }\n\n      this._destroyed.next();\n\n      this._destroyed.complete();\n    }\n    /**\n     * Focuses the menu item. Implements for FocusableOption.\n     * @return {?}\n     */\n\n  }, {\n    key: \"focus\",\n    value: function focus() {\n      this._elementRef.nativeElement.focus();\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"_setRoleFromData\",\n    value: function _setRoleFromData() {\n      var _this7 = this;\n\n      if (this._tree.treeControl.isExpandable) {\n        this.role = this._tree.treeControl.isExpandable(this._data) ? 'group' : 'treeitem';\n      } else {\n        if (!this._tree.treeControl.getChildren) {\n          throw getTreeControlFunctionsMissingError();\n        }\n        /** @type {?} */\n\n\n        var childrenNodes = this._tree.treeControl.getChildren(this._data);\n\n        if (Array.isArray(childrenNodes)) {\n          this._setRoleFromChildren(\n          /** @type {?} */\n          childrenNodes);\n        } else if (childrenNodes instanceof Observable) {\n          childrenNodes.pipe(takeUntil(this._destroyed)).subscribe(function (children) {\n            return _this7._setRoleFromChildren(children);\n          });\n        }\n      }\n    }\n    /**\n     * @param {?} children\n     * @return {?}\n     */\n\n  }, {\n    key: \"_setRoleFromChildren\",\n    value: function _setRoleFromChildren(children) {\n      this.role = children && children.length ? 'group' : 'treeitem';\n    }\n  }]);\n\n  return CdkTreeNode;\n}();\n\nCdkTreeNode.ɵfac = function CdkTreeNode_Factory(t) {\n  return new (t || CdkTreeNode)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(CdkTree));\n};\n\nCdkTreeNode.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n  type: CdkTreeNode,\n  selectors: [[\"cdk-tree-node\"]],\n  hostAttrs: [1, \"cdk-tree-node\"],\n  hostVars: 3,\n  hostBindings: function CdkTreeNode_HostBindings(rf, ctx) {\n    if (rf & 2) {\n      ɵngcc0.ɵɵattribute(\"aria-expanded\", ctx.isExpanded)(\"aria-level\", ctx.role === \"treeitem\" ? ctx.level : null)(\"role\", ctx.role);\n    }\n  },\n  inputs: {\n    role: \"role\"\n  },\n  exportAs: [\"cdkTreeNode\"]\n});\n/**\n * The most recently created `CdkTreeNode`. We save it in static variable so we can retrieve it\n * in `CdkTree` and set the data to it.\n */\n\nCdkTreeNode.mostRecentTreeNode = null;\n/** @nocollapse */\n\nCdkTreeNode.ctorParameters = function () {\n  return [{\n    type: ElementRef\n  }, {\n    type: CdkTree\n  }];\n};\n\nCdkTreeNode.propDecorators = {\n  role: [{\n    type: Input\n  }]\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkTreeNode, [{\n    type: Directive,\n    args: [{\n      selector: 'cdk-tree-node',\n      exportAs: 'cdkTreeNode',\n      host: {\n        '[attr.aria-expanded]': 'isExpanded',\n        '[attr.aria-level]': 'role === \"treeitem\" ? level : null',\n        '[attr.role]': 'role',\n        'class': 'cdk-tree-node'\n      }\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ElementRef\n    }, {\n      type: CdkTree\n    }];\n  }, {\n    role: [{\n      type: Input\n    }]\n  });\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * Nested node is a child of `<cdk-tree>`. It works with nested tree.\n * By using `cdk-nested-tree-node` component in tree node template, children of the parent node will\n * be added in the `cdkTreeNodeOutlet` in tree node template.\n * For example:\n *   ```html\n *   <cdk-mested-tree-node>\n *     {{node.name}}\n *     <ng-template cdkTreeNodeOutlet></ng-template>\n *   </cdk-tree-node>\n *   ```\n * The children of node will be automatically added to `cdkTreeNodeOutlet`, the result dom will be\n * like this:\n *   ```html\n *   <cdk-nested-tree-node>\n *     {{node.name}}\n *      <cdk-nested-tree-node>{{child1.name}}</cdk-tree-node>\n *      <cdk-nested-tree-node>{{child2.name}}</cdk-tree-node>\n *   </cdk-tree-node>\n *   ```\n * @template T\n */\n\n\nvar CdkNestedTreeNode = /*#__PURE__*/function (_CdkTreeNode) {\n  _inherits(CdkNestedTreeNode, _CdkTreeNode);\n\n  var _super3 = _createSuper(CdkNestedTreeNode);\n\n  /**\n   * @param {?} _elementRef\n   * @param {?} _tree\n   * @param {?} _differs\n   */\n  function CdkNestedTreeNode(_elementRef, _tree, _differs) {\n    var _this8;\n\n    _classCallCheck(this, CdkNestedTreeNode);\n\n    _this8 = _super3.call(this, _elementRef, _tree);\n    _this8._elementRef = _elementRef;\n    _this8._tree = _tree;\n    _this8._differs = _differs;\n    return _this8;\n  }\n  /**\n   * @return {?}\n   */\n\n\n  _createClass(CdkNestedTreeNode, [{\n    key: \"ngAfterContentInit\",\n    value: function ngAfterContentInit() {\n      var _this9 = this;\n\n      this._dataDiffer = this._differs.find([]).create(this._tree.trackBy);\n\n      if (!this._tree.treeControl.getChildren) {\n        throw getTreeControlFunctionsMissingError();\n      }\n      /** @type {?} */\n\n\n      var childrenNodes = this._tree.treeControl.getChildren(this.data);\n\n      if (Array.isArray(childrenNodes)) {\n        this.updateChildrenNodes(\n        /** @type {?} */\n        childrenNodes);\n      } else if (childrenNodes instanceof Observable) {\n        childrenNodes.pipe(takeUntil(this._destroyed)).subscribe(function (result) {\n          return _this9.updateChildrenNodes(result);\n        });\n      }\n\n      this.nodeOutlet.changes.pipe(takeUntil(this._destroyed)).subscribe(function () {\n        return _this9.updateChildrenNodes();\n      });\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      this._clear();\n\n      _get(_getPrototypeOf(CdkNestedTreeNode.prototype), \"ngOnDestroy\", this).call(this);\n    }\n    /**\n     * Add children dataNodes to the NodeOutlet\n     * @param {?=} children\n     * @return {?}\n     */\n\n  }, {\n    key: \"updateChildrenNodes\",\n    value: function updateChildrenNodes(children) {\n      if (children) {\n        this._children = children;\n      }\n\n      if (this.nodeOutlet.length && this._children) {\n        /** @type {?} */\n        var viewContainer = this.nodeOutlet.first.viewContainer;\n\n        this._tree.renderNodeChanges(this._children, this._dataDiffer, viewContainer, this._data);\n      } else {\n        // Reset the data differ if there's no children nodes displayed\n        this._dataDiffer.diff([]);\n      }\n    }\n    /**\n     * Clear the children dataNodes.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_clear\",\n    value: function _clear() {\n      if (this.nodeOutlet && this.nodeOutlet.first) {\n        this.nodeOutlet.first.viewContainer.clear();\n\n        this._dataDiffer.diff([]);\n      }\n    }\n  }]);\n\n  return CdkNestedTreeNode;\n}(CdkTreeNode);\n\nCdkNestedTreeNode.ɵfac = function CdkNestedTreeNode_Factory(t) {\n  return new (t || CdkNestedTreeNode)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(CdkTree), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.IterableDiffers));\n};\n\nCdkNestedTreeNode.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n  type: CdkNestedTreeNode,\n  selectors: [[\"cdk-nested-tree-node\"]],\n  contentQueries: function CdkNestedTreeNode_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵcontentQuery(dirIndex, CdkTreeNodeOutlet, 4);\n    }\n\n    if (rf & 2) {\n      var _t;\n\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.nodeOutlet = _t);\n    }\n  },\n  hostAttrs: [1, \"cdk-tree-node\", \"cdk-nested-tree-node\"],\n  hostVars: 2,\n  hostBindings: function CdkNestedTreeNode_HostBindings(rf, ctx) {\n    if (rf & 2) {\n      ɵngcc0.ɵɵattribute(\"aria-expanded\", ctx.isExpanded)(\"role\", ctx.role);\n    }\n  },\n  exportAs: [\"cdkNestedTreeNode\"],\n  features: [ɵngcc0.ɵɵProvidersFeature([{\n    provide: CdkTreeNode,\n    useExisting: CdkNestedTreeNode\n  }]), ɵngcc0.ɵɵInheritDefinitionFeature]\n});\n/** @nocollapse */\n\nCdkNestedTreeNode.ctorParameters = function () {\n  return [{\n    type: ElementRef\n  }, {\n    type: CdkTree\n  }, {\n    type: IterableDiffers\n  }];\n};\n\nCdkNestedTreeNode.propDecorators = {\n  nodeOutlet: [{\n    type: ContentChildren,\n    args: [CdkTreeNodeOutlet]\n  }]\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkNestedTreeNode, [{\n    type: Directive,\n    args: [{\n      selector: 'cdk-nested-tree-node',\n      exportAs: 'cdkNestedTreeNode',\n      host: {\n        '[attr.aria-expanded]': 'isExpanded',\n        '[attr.role]': 'role',\n        'class': 'cdk-tree-node cdk-nested-tree-node'\n      },\n      providers: [{\n        provide: CdkTreeNode,\n        useExisting: CdkNestedTreeNode\n      }]\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ElementRef\n    }, {\n      type: CdkTree\n    }, {\n      type: ɵngcc0.IterableDiffers\n    }];\n  }, {\n    nodeOutlet: [{\n      type: ContentChildren,\n      args: [CdkTreeNodeOutlet]\n    }]\n  });\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/** *\n * Regex used to split a string on its CSS units.\n  @type {?} */\n\n\nvar cssUnitPattern = /([A-Za-z%]+)$/;\n/**\n * Indent for the children tree dataNodes.\n * This directive will add left-padding to the node to show hierarchy.\n * @template T\n */\n\nvar CdkTreeNodePadding = /*#__PURE__*/function () {\n  /**\n   * @param {?} _treeNode\n   * @param {?} _tree\n   * @param {?} _renderer\n   * @param {?} _element\n   * @param {?} _dir\n   */\n  function CdkTreeNodePadding(_treeNode, _tree, _renderer, _element, _dir) {\n    var _this10 = this;\n\n    _classCallCheck(this, CdkTreeNodePadding);\n\n    this._treeNode = _treeNode;\n    this._tree = _tree;\n    this._renderer = _renderer;\n    this._element = _element;\n    this._dir = _dir;\n    /**\n     * Subject that emits when the component has been destroyed.\n     */\n\n    this._destroyed = new Subject();\n    /**\n     * CSS units used for the indentation value.\n     */\n\n    this.indentUnits = 'px';\n    this._indent = 40;\n\n    this._setPadding();\n\n    if (this._dir) {\n      this._dir.change.pipe(takeUntil(this._destroyed)).subscribe(function () {\n        return _this10._setPadding();\n      });\n    }\n  }\n  /**\n   * The level of depth of the tree node. The padding will be `level * indent` pixels.\n   * @return {?}\n   */\n\n\n  _createClass(CdkTreeNodePadding, [{\n    key: \"level\",\n    get: function get() {\n      return this._level;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ,\n    set: function set(value) {\n      this._level = coerceNumberProperty(value);\n\n      this._setPadding();\n    }\n    /**\n     * The indent for each level. Can be a number or a CSS string.\n     * Default number 40px from material design menu sub-menu spec.\n     * @return {?}\n     */\n\n  }, {\n    key: \"indent\",\n    get: function get() {\n      return this._indent;\n    }\n    /**\n     * @param {?} indent\n     * @return {?}\n     */\n    ,\n    set: function set(indent) {\n      /** @type {?} */\n      var value = indent;\n      /** @type {?} */\n\n      var units = 'px';\n\n      if (typeof indent === 'string') {\n        /** @type {?} */\n        var parts = indent.split(cssUnitPattern);\n        value = parts[0];\n        units = parts[1] || units;\n      }\n\n      this.indentUnits = units;\n      this._indent = coerceNumberProperty(value);\n\n      this._setPadding();\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      this._destroyed.next();\n\n      this._destroyed.complete();\n    }\n    /**\n     * The padding indent value for the tree node. Returns a string with px numbers if not null.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_paddingIndent\",\n    value: function _paddingIndent() {\n      /** @type {?} */\n      var nodeLevel = this._treeNode.data && this._tree.treeControl.getLevel ? this._tree.treeControl.getLevel(this._treeNode.data) : null;\n      /** @type {?} */\n\n      var level = this._level || nodeLevel;\n      return level ? \"\".concat(level * this._indent).concat(this.indentUnits) : null;\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"_setPadding\",\n    value: function _setPadding() {\n      /** @type {?} */\n      var padding = this._paddingIndent();\n      /** @type {?} */\n\n\n      var paddingProp = this._dir && this._dir.value === 'rtl' ? 'paddingRight' : 'paddingLeft';\n\n      this._renderer.setStyle(this._element.nativeElement, paddingProp, padding);\n    }\n  }]);\n\n  return CdkTreeNodePadding;\n}();\n\nCdkTreeNodePadding.ɵfac = function CdkTreeNodePadding_Factory(t) {\n  return new (t || CdkTreeNodePadding)(ɵngcc0.ɵɵdirectiveInject(CdkTreeNode), ɵngcc0.ɵɵdirectiveInject(CdkTree), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.Directionality, 8));\n};\n\nCdkTreeNodePadding.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n  type: CdkTreeNodePadding,\n  selectors: [[\"\", \"cdkTreeNodePadding\", \"\"]],\n  inputs: {\n    level: [\"cdkTreeNodePadding\", \"level\"],\n    indent: [\"cdkTreeNodePaddingIndent\", \"indent\"]\n  }\n});\n/** @nocollapse */\n\nCdkTreeNodePadding.ctorParameters = function () {\n  return [{\n    type: CdkTreeNode\n  }, {\n    type: CdkTree\n  }, {\n    type: Renderer2\n  }, {\n    type: ElementRef\n  }, {\n    type: Directionality,\n    decorators: [{\n      type: Optional\n    }]\n  }];\n};\n\nCdkTreeNodePadding.propDecorators = {\n  level: [{\n    type: Input,\n    args: ['cdkTreeNodePadding']\n  }],\n  indent: [{\n    type: Input,\n    args: ['cdkTreeNodePaddingIndent']\n  }]\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkTreeNodePadding, [{\n    type: Directive,\n    args: [{\n      selector: '[cdkTreeNodePadding]'\n    }]\n  }], function () {\n    return [{\n      type: CdkTreeNode\n    }, {\n      type: CdkTree\n    }, {\n      type: ɵngcc0.Renderer2\n    }, {\n      type: ɵngcc0.ElementRef\n    }, {\n      type: ɵngcc1.Directionality,\n      decorators: [{\n        type: Optional\n      }]\n    }];\n  }, {\n    level: [{\n      type: Input,\n      args: ['cdkTreeNodePadding']\n    }],\n    indent: [{\n      type: Input,\n      args: ['cdkTreeNodePaddingIndent']\n    }]\n  });\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * Node toggle to expand/collapse the node.\n * @template T\n */\n\n\nvar CdkTreeNodeToggle = /*#__PURE__*/function () {\n  /**\n   * @param {?} _tree\n   * @param {?} _treeNode\n   */\n  function CdkTreeNodeToggle(_tree, _treeNode) {\n    _classCallCheck(this, CdkTreeNodeToggle);\n\n    this._tree = _tree;\n    this._treeNode = _treeNode;\n    this._recursive = false;\n  }\n  /**\n   * Whether expand/collapse the node recursively.\n   * @return {?}\n   */\n\n\n  _createClass(CdkTreeNodeToggle, [{\n    key: \"recursive\",\n    get: function get() {\n      return this._recursive;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ,\n    set: function set(value) {\n      this._recursive = coerceBooleanProperty(value);\n    }\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n\n  }, {\n    key: \"_toggle\",\n    value: function _toggle(event) {\n      this.recursive ? this._tree.treeControl.toggleDescendants(this._treeNode.data) : this._tree.treeControl.toggle(this._treeNode.data);\n      event.stopPropagation();\n    }\n  }]);\n\n  return CdkTreeNodeToggle;\n}();\n\nCdkTreeNodeToggle.ɵfac = function CdkTreeNodeToggle_Factory(t) {\n  return new (t || CdkTreeNodeToggle)(ɵngcc0.ɵɵdirectiveInject(CdkTree), ɵngcc0.ɵɵdirectiveInject(CdkTreeNode));\n};\n\nCdkTreeNodeToggle.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n  type: CdkTreeNodeToggle,\n  selectors: [[\"\", \"cdkTreeNodeToggle\", \"\"]],\n  hostBindings: function CdkTreeNodeToggle_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵlistener(\"click\", function CdkTreeNodeToggle_click_HostBindingHandler($event) {\n        return ctx._toggle($event);\n      });\n    }\n  },\n  inputs: {\n    recursive: [\"cdkTreeNodeToggleRecursive\", \"recursive\"]\n  }\n});\n/** @nocollapse */\n\nCdkTreeNodeToggle.ctorParameters = function () {\n  return [{\n    type: CdkTree\n  }, {\n    type: CdkTreeNode\n  }];\n};\n\nCdkTreeNodeToggle.propDecorators = {\n  recursive: [{\n    type: Input,\n    args: ['cdkTreeNodeToggleRecursive']\n  }]\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkTreeNodeToggle, [{\n    type: Directive,\n    args: [{\n      selector: '[cdkTreeNodeToggle]',\n      host: {\n        '(click)': '_toggle($event)'\n      }\n    }]\n  }], function () {\n    return [{\n      type: CdkTree\n    }, {\n      type: CdkTreeNode\n    }];\n  }, {\n    recursive: [{\n      type: Input,\n      args: ['cdkTreeNodeToggleRecursive']\n    }]\n  });\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/** @type {?} */\n\n\nvar EXPORTED_DECLARATIONS = [CdkNestedTreeNode, CdkTreeNodeDef, CdkTreeNodePadding, CdkTreeNodeToggle, CdkTree, CdkTreeNode, CdkTreeNodeOutlet];\n\nvar CdkTreeModule = function CdkTreeModule() {\n  _classCallCheck(this, CdkTreeModule);\n};\n\nCdkTreeModule.ɵfac = function CdkTreeModule_Factory(t) {\n  return new (t || CdkTreeModule)();\n};\n\nCdkTreeModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n  type: CdkTreeModule\n});\nCdkTreeModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n  providers: [FocusMonitor, CdkTreeNodeDef],\n  imports: [[CommonModule]]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkTreeModule, [{\n    type: NgModule,\n    args: [{\n      imports: [CommonModule],\n      exports: EXPORTED_DECLARATIONS,\n      declarations: EXPORTED_DECLARATIONS,\n      providers: [FocusMonitor, CdkTreeNodeDef]\n    }]\n  }], null, null);\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(CdkTreeModule, {\n    declarations: function declarations() {\n      return [CdkNestedTreeNode, CdkTreeNodeDef, CdkTreeNodePadding, CdkTreeNodeToggle, CdkTree, CdkTreeNode, CdkTreeNodeOutlet];\n    },\n    imports: function imports() {\n      return [CommonModule];\n    },\n    exports: function exports() {\n      return [CdkNestedTreeNode, CdkTreeNodeDef, CdkTreeNodePadding, CdkTreeNodeToggle, CdkTree, CdkTreeNode, CdkTreeNodeOutlet];\n    }\n  });\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n\nexport { BaseTreeControl, FlatTreeControl, NestedTreeControl, CdkNestedTreeNode, CdkTreeNodeOutletContext, CdkTreeNodeDef, CdkTreeNodePadding, CdkTreeNodeOutlet, CdkTree, CdkTreeNode, getTreeNoValidDataSourceError, getTreeMultipleDefaultNodeDefsError, getTreeMissingMatchingNodeDefError, getTreeControlMissingError, getTreeControlFunctionsMissingError, CdkTreeModule, CdkTreeNodeToggle }; //# sourceMappingURL=tree.js.map","map":{"version":3,"sources":["/Users/adepertat/Dropbox/ECOLES/Openclassroom/P6_de_Pertat_Antoine/dwj-projet6/node_modules/@angular/cdk/__ivy_ngcc__/esm2015/tree.js"],"names":["SelectionModel","Observable","BehaviorSubject","of","Subject","take","takeUntil","Directive","TemplateRef","ViewContainerRef","ChangeDetectionStrategy","ChangeDetectorRef","Component","ContentChildren","ElementRef","Input","IterableDiffers","ViewChild","ViewEncapsulation","Optional","Renderer2","NgModule","Directionality","coerceNumberProperty","coerceBooleanProperty","FocusMonitor","CommonModule","ɵngcc0","ɵngcc1","BaseTreeControl","expansionModel","dataNode","toggle","select","deselect","isSelected","collapseDescendants","expandDescendants","clear","toBeProcessed","push","getDescendants","FlatTreeControl","getLevel","isExpandable","startIndex","dataNodes","indexOf","results","i","length","NestedTreeControl","getChildren","allNodes","reduce","accumulator","descendants","_getDescendants","splice","childrenNodes","Array","isArray","forEach","child","pipe","subscribe","children","CdkTreeNodeOutletContext","data","$implicit","CdkTreeNodeDef","template","ɵfac","CdkTreeNodeDef_Factory","t","ɵɵdirectiveInject","ɵdir","ɵɵdefineDirective","type","selectors","inputs","when","ctorParameters","ngDevMode","ɵsetClassMetadata","args","selector","CdkTreeNodeOutlet","viewContainer","CdkTreeNodeOutlet_Factory","getTreeNoValidDataSourceError","Error","getTreeMultipleDefaultNodeDefsError","getTreeMissingMatchingNodeDefError","getTreeControlMissingError","getTreeControlFunctionsMissingError","CdkTree","_differs","_changeDetectorRef","_onDestroy","_levels","Map","viewChange","start","end","Number","MAX_VALUE","_dataSource","dataSource","_switchDataSource","_dataDiffer","find","create","trackBy","treeControl","_nodeOutlet","next","complete","disconnect","_dataSubscription","unsubscribe","defaultNodeDefs","_nodeDefs","filter","def","_defaultNodeDef","_observeRenderChanges","dataStream","connect","renderNodeChanges","dataDiffer","parentData","changes","diff","forEachOperation","item","adjustedPreviousIndex","currentIndex","previousIndex","insertNode","remove","delete","view","get","move","detectChanges","first","nodeDef","nodeData","index","node","_getNodeDef","context","level","has","set","container","createEmbeddedView","CdkTreeNode","mostRecentTreeNode","CdkTree_Factory","ɵcmp","ɵɵdefineComponent","contentQueries","CdkTree_ContentQueries","rf","ctx","dirIndex","ɵɵcontentQuery","_t","ɵɵqueryRefresh","ɵɵloadQuery","viewQuery","CdkTree_Query","ɵɵviewQuery","hostAttrs","exportAs","decls","vars","consts","CdkTree_Template","ɵɵelementContainer","directives","encapsulation","changeDetection","propDecorators","host","None","OnPush","_elementRef","_tree","_destroyed","role","_data","value","_setRoleFromData","isExpanded","nativeElement","focus","_setRoleFromChildren","CdkTreeNode_Factory","hostVars","hostBindings","CdkTreeNode_HostBindings","ɵɵattribute","CdkNestedTreeNode","updateChildrenNodes","result","nodeOutlet","_clear","_children","CdkNestedTreeNode_Factory","CdkNestedTreeNode_ContentQueries","CdkNestedTreeNode_HostBindings","features","ɵɵProvidersFeature","provide","useExisting","ɵɵInheritDefinitionFeature","providers","cssUnitPattern","CdkTreeNodePadding","_treeNode","_renderer","_element","_dir","indentUnits","_indent","_setPadding","change","_level","indent","units","parts","split","nodeLevel","padding","_paddingIndent","paddingProp","setStyle","CdkTreeNodePadding_Factory","decorators","CdkTreeNodeToggle","_recursive","event","recursive","toggleDescendants","stopPropagation","CdkTreeNodeToggle_Factory","CdkTreeNodeToggle_HostBindings","ɵɵlistener","CdkTreeNodeToggle_click_HostBindingHandler","$event","_toggle","EXPORTED_DECLARATIONS","CdkTreeModule","CdkTreeModule_Factory","ɵmod","ɵɵdefineNgModule","ɵinj","ɵɵdefineInjector","imports","exports","declarations","ngJitMode","ɵɵsetNgModuleScope"],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { SelectionModel } from '@angular/cdk/collections';\nimport { Observable, BehaviorSubject, of, Subject } from 'rxjs';\nimport { take, takeUntil } from 'rxjs/operators';\nimport { Directive, TemplateRef, ViewContainerRef, ChangeDetectionStrategy, ChangeDetectorRef, Component, ContentChildren, ElementRef, Input, IterableDiffers, ViewChild, ViewEncapsulation, Optional, Renderer2, NgModule } from '@angular/core';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { coerceNumberProperty, coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { FocusMonitor } from '@angular/cdk/a11y';\nimport { CommonModule } from '@angular/common';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * Base tree control. It has basic toggle/expand/collapse operations on a single data node.\n * @abstract\n * @template T\n */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/bidi';\nclass BaseTreeControl {\n    constructor() {\n        /**\n         * A selection model with multi-selection to track expansion status.\n         */\n        this.expansionModel = new SelectionModel(true);\n    }\n    /**\n     * Toggles one single data node's expanded/collapsed state.\n     * @param {?} dataNode\n     * @return {?}\n     */\n    toggle(dataNode) {\n        this.expansionModel.toggle(dataNode);\n    }\n    /**\n     * Expands one single data node.\n     * @param {?} dataNode\n     * @return {?}\n     */\n    expand(dataNode) {\n        this.expansionModel.select(dataNode);\n    }\n    /**\n     * Collapses one single data node.\n     * @param {?} dataNode\n     * @return {?}\n     */\n    collapse(dataNode) {\n        this.expansionModel.deselect(dataNode);\n    }\n    /**\n     * Whether a given data node is expanded or not. Returns true if the data node is expanded.\n     * @param {?} dataNode\n     * @return {?}\n     */\n    isExpanded(dataNode) {\n        return this.expansionModel.isSelected(dataNode);\n    }\n    /**\n     * Toggles a subtree rooted at `node` recursively.\n     * @param {?} dataNode\n     * @return {?}\n     */\n    toggleDescendants(dataNode) {\n        this.expansionModel.isSelected(dataNode)\n            ? this.collapseDescendants(dataNode)\n            : this.expandDescendants(dataNode);\n    }\n    /**\n     * Collapse all dataNodes in the tree.\n     * @return {?}\n     */\n    collapseAll() {\n        this.expansionModel.clear();\n    }\n    /**\n     * Expands a subtree rooted at given data node recursively.\n     * @param {?} dataNode\n     * @return {?}\n     */\n    expandDescendants(dataNode) {\n        /** @type {?} */\n        let toBeProcessed = [dataNode];\n        toBeProcessed.push(...this.getDescendants(dataNode));\n        this.expansionModel.select(...toBeProcessed);\n    }\n    /**\n     * Collapses a subtree rooted at given data node recursively.\n     * @param {?} dataNode\n     * @return {?}\n     */\n    collapseDescendants(dataNode) {\n        /** @type {?} */\n        let toBeProcessed = [dataNode];\n        toBeProcessed.push(...this.getDescendants(dataNode));\n        this.expansionModel.deselect(...toBeProcessed);\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * Flat tree control. Able to expand/collapse a subtree recursively for flattened tree.\n * @template T\n */\nclass FlatTreeControl extends BaseTreeControl {\n    /**\n     * Construct with flat tree data node functions getLevel and isExpandable.\n     * @param {?} getLevel\n     * @param {?} isExpandable\n     */\n    constructor(getLevel, isExpandable) {\n        super();\n        this.getLevel = getLevel;\n        this.isExpandable = isExpandable;\n    }\n    /**\n     * Gets a list of the data node's subtree of descendent data nodes.\n     *\n     * To make this working, the `dataNodes` of the TreeControl must be flattened tree nodes\n     * with correct levels.\n     * @param {?} dataNode\n     * @return {?}\n     */\n    getDescendants(dataNode) {\n        /** @type {?} */\n        const startIndex = this.dataNodes.indexOf(dataNode);\n        /** @type {?} */\n        const results = [];\n        // Goes through flattened tree nodes in the `dataNodes` array, and get all descendants.\n        // The level of descendants of a tree node must be greater than the level of the given\n        // tree node.\n        // If we reach a node whose level is equal to the level of the tree node, we hit a sibling.\n        // If we reach a node whose level is greater than the level of the tree node, we hit a\n        // sibling of an ancestor.\n        for (let i = startIndex + 1; i < this.dataNodes.length && this.getLevel(dataNode) < this.getLevel(this.dataNodes[i]); i++) {\n            results.push(this.dataNodes[i]);\n        }\n        return results;\n    }\n    /**\n     * Expands all data nodes in the tree.\n     *\n     * To make this working, the `dataNodes` variable of the TreeControl must be set to all flattened\n     * data nodes of the tree.\n     * @return {?}\n     */\n    expandAll() {\n        this.expansionModel.select(...this.dataNodes);\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * Nested tree control. Able to expand/collapse a subtree recursively for NestedNode type.\n * @template T\n */\nclass NestedTreeControl extends BaseTreeControl {\n    /**\n     * Construct with nested tree function getChildren.\n     * @param {?} getChildren\n     */\n    constructor(getChildren) {\n        super();\n        this.getChildren = getChildren;\n    }\n    /**\n     * Expands all dataNodes in the tree.\n     *\n     * To make this working, the `dataNodes` variable of the TreeControl must be set to all root level\n     * data nodes of the tree.\n     * @return {?}\n     */\n    expandAll() {\n        this.expansionModel.clear();\n        /** @type {?} */\n        const allNodes = this.dataNodes.reduce((accumulator, dataNode) => [...accumulator, ...this.getDescendants(dataNode), dataNode], []);\n        this.expansionModel.select(...allNodes);\n    }\n    /**\n     * Gets a list of descendant dataNodes of a subtree rooted at given data node recursively.\n     * @param {?} dataNode\n     * @return {?}\n     */\n    getDescendants(dataNode) {\n        /** @type {?} */\n        const descendants = [];\n        this._getDescendants(descendants, dataNode);\n        // Remove the node itself\n        return descendants.splice(1);\n    }\n    /**\n     * A helper function to get descendants recursively.\n     * @param {?} descendants\n     * @param {?} dataNode\n     * @return {?}\n     */\n    _getDescendants(descendants, dataNode) {\n        descendants.push(dataNode);\n        /** @type {?} */\n        const childrenNodes = this.getChildren(dataNode);\n        if (Array.isArray(childrenNodes)) {\n            childrenNodes.forEach((child) => this._getDescendants(descendants, child));\n        }\n        else if (childrenNodes instanceof Observable) {\n            childrenNodes.pipe(take(1)).subscribe(children => {\n                children.forEach((child) => this._getDescendants(descendants, child));\n            });\n        }\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * Context provided to the tree node component.\n * @template T\n */\nclass CdkTreeNodeOutletContext {\n    /**\n     * @param {?} data\n     */\n    constructor(data) {\n        this.$implicit = data;\n    }\n}\n/**\n * Data node definition for the CdkTree.\n * Captures the node's template and a when predicate that describes when this node should be used.\n * @template T\n */\nclass CdkTreeNodeDef {\n    /**\n     * \\@docs-private\n     * @param {?} template\n     */\n    constructor(template) {\n        this.template = template;\n    }\n}\nCdkTreeNodeDef.ɵfac = function CdkTreeNodeDef_Factory(t) { return new (t || CdkTreeNodeDef)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef)); };\nCdkTreeNodeDef.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: CdkTreeNodeDef, selectors: [[\"\", \"cdkTreeNodeDef\", \"\"]], inputs: { when: [\"cdkTreeNodeDefWhen\", \"when\"] } });\n/** @nocollapse */\nCdkTreeNodeDef.ctorParameters = () => [\n    { type: TemplateRef }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkTreeNodeDef, [{\n        type: Directive,\n        args: [{\n                selector: '[cdkTreeNodeDef]',\n                inputs: [\n                    'when: cdkTreeNodeDefWhen'\n                ]\n            }]\n    }], function () { return [{ type: ɵngcc0.TemplateRef }]; }, null); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * Outlet for nested CdkNode. Put `[cdkTreeNodeOutlet]` on a tag to place children dataNodes\n * inside the outlet.\n */\nclass CdkTreeNodeOutlet {\n    /**\n     * @param {?} viewContainer\n     */\n    constructor(viewContainer) {\n        this.viewContainer = viewContainer;\n    }\n}\nCdkTreeNodeOutlet.ɵfac = function CdkTreeNodeOutlet_Factory(t) { return new (t || CdkTreeNodeOutlet)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef)); };\nCdkTreeNodeOutlet.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: CdkTreeNodeOutlet, selectors: [[\"\", \"cdkTreeNodeOutlet\", \"\"]] });\n/** @nocollapse */\nCdkTreeNodeOutlet.ctorParameters = () => [\n    { type: ViewContainerRef }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkTreeNodeOutlet, [{\n        type: Directive,\n        args: [{\n                selector: '[cdkTreeNodeOutlet]'\n            }]\n    }], function () { return [{ type: ɵngcc0.ViewContainerRef }]; }, null); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * Returns an error to be thrown when there is no usable data.\n * \\@docs-private\n * @return {?}\n */\nfunction getTreeNoValidDataSourceError() {\n    return Error(`A valid data source must be provided.`);\n}\n/**\n * Returns an error to be thrown when there are multiple nodes that are missing a when function.\n * \\@docs-private\n * @return {?}\n */\nfunction getTreeMultipleDefaultNodeDefsError() {\n    return Error(`There can only be one default row without a when predicate function.`);\n}\n/**\n * Returns an error to be thrown when there are no matching node defs for a particular set of data.\n * \\@docs-private\n * @return {?}\n */\nfunction getTreeMissingMatchingNodeDefError() {\n    return Error(`Could not find a matching node definition for the provided node data.`);\n}\n/**\n * Returns an error to be thrown when there are tree control.\n * \\@docs-private\n * @return {?}\n */\nfunction getTreeControlMissingError() {\n    return Error(`Could not find a tree control for the tree.`);\n}\n/**\n * Returns an error to be thrown when tree control did not implement functions for flat/nested node.\n * \\@docs-private\n * @return {?}\n */\nfunction getTreeControlFunctionsMissingError() {\n    return Error(`Could not find functions for nested/flat tree in tree control.`);\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * CDK tree component that connects with a data source to retrieve data of type `T` and renders\n * dataNodes with hierarchy. Updates the dataNodes when new data is provided by the data source.\n * @template T\n */\nclass CdkTree {\n    /**\n     * @param {?} _differs\n     * @param {?} _changeDetectorRef\n     */\n    constructor(_differs, _changeDetectorRef) {\n        this._differs = _differs;\n        this._changeDetectorRef = _changeDetectorRef;\n        /**\n         * Subject that emits when the component has been destroyed.\n         */\n        this._onDestroy = new Subject();\n        /**\n         * Level of nodes\n         */\n        this._levels = new Map();\n        /**\n         * Stream containing the latest information on what rows are being displayed on screen.\n         * Can be used by the data source to as a heuristic of what data should be provided.\n         */\n        this.viewChange = new BehaviorSubject({ start: 0, end: Number.MAX_VALUE });\n    }\n    /**\n     * Provides a stream containing the latest data array to render. Influenced by the tree's\n     * stream of view window (what dataNodes are currently on screen).\n     * Data source can be an observable of data array, or a data array to render.\n     * @return {?}\n     */\n    get dataSource() { return this._dataSource; }\n    /**\n     * @param {?} dataSource\n     * @return {?}\n     */\n    set dataSource(dataSource) {\n        if (this._dataSource !== dataSource) {\n            this._switchDataSource(dataSource);\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngOnInit() {\n        this._dataDiffer = this._differs.find([]).create(this.trackBy);\n        if (!this.treeControl) {\n            throw getTreeControlMissingError();\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this._nodeOutlet.viewContainer.clear();\n        this._onDestroy.next();\n        this._onDestroy.complete();\n        if (this._dataSource && typeof (/** @type {?} */ (this._dataSource)).disconnect === 'function') {\n            (/** @type {?} */ (this.dataSource)).disconnect(this);\n        }\n        if (this._dataSubscription) {\n            this._dataSubscription.unsubscribe();\n            this._dataSubscription = null;\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngAfterContentChecked() {\n        /** @type {?} */\n        const defaultNodeDefs = this._nodeDefs.filter(def => !def.when);\n        if (defaultNodeDefs.length > 1) {\n            throw getTreeMultipleDefaultNodeDefsError();\n        }\n        this._defaultNodeDef = defaultNodeDefs[0];\n        if (this.dataSource && this._nodeDefs && !this._dataSubscription) {\n            this._observeRenderChanges();\n        }\n    }\n    /**\n     * Switch to the provided data source by resetting the data and unsubscribing from the current\n     * render change subscription if one exists. If the data source is null, interpret this by\n     * clearing the node outlet. Otherwise start listening for new data.\n     * @param {?} dataSource\n     * @return {?}\n     */\n    _switchDataSource(dataSource) {\n        if (this._dataSource && typeof (/** @type {?} */ (this._dataSource)).disconnect === 'function') {\n            (/** @type {?} */ (this.dataSource)).disconnect(this);\n        }\n        if (this._dataSubscription) {\n            this._dataSubscription.unsubscribe();\n            this._dataSubscription = null;\n        }\n        // Remove the all dataNodes if there is now no data source\n        if (!dataSource) {\n            this._nodeOutlet.viewContainer.clear();\n        }\n        this._dataSource = dataSource;\n        if (this._nodeDefs) {\n            this._observeRenderChanges();\n        }\n    }\n    /**\n     * Set up a subscription for the data provided by the data source.\n     * @return {?}\n     */\n    _observeRenderChanges() {\n        /** @type {?} */\n        let dataStream;\n        // Cannot use `instanceof DataSource` since the data source could be a literal with\n        // `connect` function and may not extends DataSource.\n        if (typeof (/** @type {?} */ (this._dataSource)).connect === 'function') {\n            dataStream = (/** @type {?} */ (this._dataSource)).connect(this);\n        }\n        else if (this._dataSource instanceof Observable) {\n            dataStream = this._dataSource;\n        }\n        else if (Array.isArray(this._dataSource)) {\n            dataStream = of(this._dataSource);\n        }\n        if (dataStream) {\n            this._dataSubscription = dataStream.pipe(takeUntil(this._onDestroy))\n                .subscribe(data => this.renderNodeChanges(data));\n        }\n        else {\n            throw getTreeNoValidDataSourceError();\n        }\n    }\n    /**\n     * Check for changes made in the data and render each change (node added/removed/moved).\n     * @param {?} data\n     * @param {?=} dataDiffer\n     * @param {?=} viewContainer\n     * @param {?=} parentData\n     * @return {?}\n     */\n    renderNodeChanges(data, dataDiffer = this._dataDiffer, viewContainer = this._nodeOutlet.viewContainer, parentData) {\n        /** @type {?} */\n        const changes = dataDiffer.diff(data);\n        if (!changes) {\n            return;\n        }\n        changes.forEachOperation((item, adjustedPreviousIndex, currentIndex) => {\n            if (item.previousIndex == null) {\n                this.insertNode(data[/** @type {?} */ ((currentIndex))], /** @type {?} */ ((currentIndex)), viewContainer, parentData);\n            }\n            else if (currentIndex == null) {\n                viewContainer.remove(/** @type {?} */ ((adjustedPreviousIndex)));\n                this._levels.delete(item.item);\n            }\n            else {\n                /** @type {?} */\n                const view = viewContainer.get(/** @type {?} */ ((adjustedPreviousIndex)));\n                viewContainer.move(/** @type {?} */ ((view)), currentIndex);\n            }\n        });\n        this._changeDetectorRef.detectChanges();\n    }\n    /**\n     * Finds the matching node definition that should be used for this node data. If there is only\n     * one node definition, it is returned. Otherwise, find the node definition that has a when\n     * predicate that returns true with the data. If none return true, return the default node\n     * definition.\n     * @param {?} data\n     * @param {?} i\n     * @return {?}\n     */\n    _getNodeDef(data, i) {\n        if (this._nodeDefs.length === 1) {\n            return this._nodeDefs.first;\n        }\n        /** @type {?} */\n        const nodeDef = this._nodeDefs.find(def => def.when && def.when(i, data)) || this._defaultNodeDef;\n        if (!nodeDef) {\n            throw getTreeMissingMatchingNodeDefError();\n        }\n        return nodeDef;\n    }\n    /**\n     * Create the embedded view for the data node template and place it in the correct index location\n     * within the data node view container.\n     * @param {?} nodeData\n     * @param {?} index\n     * @param {?=} viewContainer\n     * @param {?=} parentData\n     * @return {?}\n     */\n    insertNode(nodeData, index, viewContainer, parentData) {\n        /** @type {?} */\n        const node = this._getNodeDef(nodeData, index);\n        /** @type {?} */\n        const context = new CdkTreeNodeOutletContext(nodeData);\n        // If the tree is flat tree, then use the `getLevel` function in flat tree control\n        // Otherwise, use the level of parent node.\n        if (this.treeControl.getLevel) {\n            context.level = this.treeControl.getLevel(nodeData);\n        }\n        else if (typeof parentData !== 'undefined' && this._levels.has(parentData)) {\n            context.level = /** @type {?} */ ((this._levels.get(parentData))) + 1;\n        }\n        else {\n            context.level = 0;\n        }\n        this._levels.set(nodeData, context.level);\n        /** @type {?} */\n        const container = viewContainer ? viewContainer : this._nodeOutlet.viewContainer;\n        container.createEmbeddedView(node.template, context, index);\n        // Set the data to just created `CdkTreeNode`.\n        // The `CdkTreeNode` created from `createEmbeddedView` will be saved in static variable\n        //     `mostRecentTreeNode`. We get it from static variable and pass the node data to it.\n        if (CdkTreeNode.mostRecentTreeNode) {\n            CdkTreeNode.mostRecentTreeNode.data = nodeData;\n        }\n    }\n}\nCdkTree.ɵfac = function CdkTree_Factory(t) { return new (t || CdkTree)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.IterableDiffers), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef)); };\nCdkTree.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: CdkTree, selectors: [[\"cdk-tree\"]], contentQueries: function CdkTree_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, CdkTreeNodeDef, 4);\n    } if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._nodeDefs = _t);\n    } }, viewQuery: function CdkTree_Query(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(CdkTreeNodeOutlet, 5);\n    } if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._nodeOutlet = _t.first);\n    } }, hostAttrs: [\"role\", \"tree\", 1, \"cdk-tree\"], inputs: { dataSource: \"dataSource\", treeControl: \"treeControl\", trackBy: \"trackBy\" }, exportAs: [\"cdkTree\"], decls: 1, vars: 0, consts: [[\"cdkTreeNodeOutlet\", \"\"]], template: function CdkTree_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵelementContainer(0, 0);\n    } }, directives: [CdkTreeNodeOutlet], encapsulation: 2, changeDetection: 0 });\n/** @nocollapse */\nCdkTree.ctorParameters = () => [\n    { type: IterableDiffers },\n    { type: ChangeDetectorRef }\n];\nCdkTree.propDecorators = {\n    dataSource: [{ type: Input }],\n    treeControl: [{ type: Input }],\n    trackBy: [{ type: Input }],\n    _nodeOutlet: [{ type: ViewChild, args: [CdkTreeNodeOutlet,] }],\n    _nodeDefs: [{ type: ContentChildren, args: [CdkTreeNodeDef,] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkTree, [{\n        type: Component,\n        args: [{ selector: 'cdk-tree',\n                exportAs: 'cdkTree',\n                template: `<ng-container cdkTreeNodeOutlet></ng-container>`,\n                host: {\n                    'class': 'cdk-tree',\n                    'role': 'tree'\n                },\n                encapsulation: ViewEncapsulation.None,\n                changeDetection: ChangeDetectionStrategy.OnPush }]\n    }], function () { return [{ type: ɵngcc0.IterableDiffers }, { type: ɵngcc0.ChangeDetectorRef }]; }, { dataSource: [{\n            type: Input\n        }], treeControl: [{\n            type: Input\n        }], trackBy: [{\n            type: Input\n        }], _nodeOutlet: [{\n            type: ViewChild,\n            args: [CdkTreeNodeOutlet]\n        }], _nodeDefs: [{\n            type: ContentChildren,\n            args: [CdkTreeNodeDef]\n        }] }); })();\n/**\n * Tree node for CdkTree. It contains the data in the tree node.\n * @template T\n */\nclass CdkTreeNode {\n    /**\n     * @param {?} _elementRef\n     * @param {?} _tree\n     */\n    constructor(_elementRef, _tree) {\n        this._elementRef = _elementRef;\n        this._tree = _tree;\n        /**\n         * Subject that emits when the component has been destroyed.\n         */\n        this._destroyed = new Subject();\n        /**\n         * The role of the node should be 'group' if it's an internal node,\n         * and 'treeitem' if it's a leaf node.\n         */\n        this.role = 'treeitem';\n        CdkTreeNode.mostRecentTreeNode = /** @type {?} */ (this);\n    }\n    /**\n     * The tree node's data.\n     * @return {?}\n     */\n    get data() { return this._data; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set data(value) {\n        this._data = value;\n        this._setRoleFromData();\n    }\n    /**\n     * @return {?}\n     */\n    get isExpanded() {\n        return this._tree.treeControl.isExpanded(this._data);\n    }\n    /**\n     * @return {?}\n     */\n    get level() {\n        return this._tree.treeControl.getLevel ? this._tree.treeControl.getLevel(this._data) : 0;\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        // If this is the last tree node being destroyed,\n        // clear out the reference to avoid leaking memory.\n        if (CdkTreeNode.mostRecentTreeNode === this) {\n            CdkTreeNode.mostRecentTreeNode = null;\n        }\n        this._destroyed.next();\n        this._destroyed.complete();\n    }\n    /**\n     * Focuses the menu item. Implements for FocusableOption.\n     * @return {?}\n     */\n    focus() {\n        this._elementRef.nativeElement.focus();\n    }\n    /**\n     * @return {?}\n     */\n    _setRoleFromData() {\n        if (this._tree.treeControl.isExpandable) {\n            this.role = this._tree.treeControl.isExpandable(this._data) ? 'group' : 'treeitem';\n        }\n        else {\n            if (!this._tree.treeControl.getChildren) {\n                throw getTreeControlFunctionsMissingError();\n            }\n            /** @type {?} */\n            const childrenNodes = this._tree.treeControl.getChildren(this._data);\n            if (Array.isArray(childrenNodes)) {\n                this._setRoleFromChildren(/** @type {?} */ (childrenNodes));\n            }\n            else if (childrenNodes instanceof Observable) {\n                childrenNodes.pipe(takeUntil(this._destroyed))\n                    .subscribe(children => this._setRoleFromChildren(children));\n            }\n        }\n    }\n    /**\n     * @param {?} children\n     * @return {?}\n     */\n    _setRoleFromChildren(children) {\n        this.role = children && children.length ? 'group' : 'treeitem';\n    }\n}\nCdkTreeNode.ɵfac = function CdkTreeNode_Factory(t) { return new (t || CdkTreeNode)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(CdkTree)); };\nCdkTreeNode.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: CdkTreeNode, selectors: [[\"cdk-tree-node\"]], hostAttrs: [1, \"cdk-tree-node\"], hostVars: 3, hostBindings: function CdkTreeNode_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"aria-expanded\", ctx.isExpanded)(\"aria-level\", ctx.role === \"treeitem\" ? ctx.level : null)(\"role\", ctx.role);\n    } }, inputs: { role: \"role\" }, exportAs: [\"cdkTreeNode\"] });\n/**\n * The most recently created `CdkTreeNode`. We save it in static variable so we can retrieve it\n * in `CdkTree` and set the data to it.\n */\nCdkTreeNode.mostRecentTreeNode = null;\n/** @nocollapse */\nCdkTreeNode.ctorParameters = () => [\n    { type: ElementRef },\n    { type: CdkTree }\n];\nCdkTreeNode.propDecorators = {\n    role: [{ type: Input }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkTreeNode, [{\n        type: Directive,\n        args: [{\n                selector: 'cdk-tree-node',\n                exportAs: 'cdkTreeNode',\n                host: {\n                    '[attr.aria-expanded]': 'isExpanded',\n                    '[attr.aria-level]': 'role === \"treeitem\" ? level : null',\n                    '[attr.role]': 'role',\n                    'class': 'cdk-tree-node'\n                }\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: CdkTree }]; }, { role: [{\n            type: Input\n        }] }); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * Nested node is a child of `<cdk-tree>`. It works with nested tree.\n * By using `cdk-nested-tree-node` component in tree node template, children of the parent node will\n * be added in the `cdkTreeNodeOutlet` in tree node template.\n * For example:\n *   ```html\n *   <cdk-mested-tree-node>\n *     {{node.name}}\n *     <ng-template cdkTreeNodeOutlet></ng-template>\n *   </cdk-tree-node>\n *   ```\n * The children of node will be automatically added to `cdkTreeNodeOutlet`, the result dom will be\n * like this:\n *   ```html\n *   <cdk-nested-tree-node>\n *     {{node.name}}\n *      <cdk-nested-tree-node>{{child1.name}}</cdk-tree-node>\n *      <cdk-nested-tree-node>{{child2.name}}</cdk-tree-node>\n *   </cdk-tree-node>\n *   ```\n * @template T\n */\nclass CdkNestedTreeNode extends CdkTreeNode {\n    /**\n     * @param {?} _elementRef\n     * @param {?} _tree\n     * @param {?} _differs\n     */\n    constructor(_elementRef, _tree, _differs) {\n        super(_elementRef, _tree);\n        this._elementRef = _elementRef;\n        this._tree = _tree;\n        this._differs = _differs;\n    }\n    /**\n     * @return {?}\n     */\n    ngAfterContentInit() {\n        this._dataDiffer = this._differs.find([]).create(this._tree.trackBy);\n        if (!this._tree.treeControl.getChildren) {\n            throw getTreeControlFunctionsMissingError();\n        }\n        /** @type {?} */\n        const childrenNodes = this._tree.treeControl.getChildren(this.data);\n        if (Array.isArray(childrenNodes)) {\n            this.updateChildrenNodes(/** @type {?} */ (childrenNodes));\n        }\n        else if (childrenNodes instanceof Observable) {\n            childrenNodes.pipe(takeUntil(this._destroyed))\n                .subscribe(result => this.updateChildrenNodes(result));\n        }\n        this.nodeOutlet.changes.pipe(takeUntil(this._destroyed))\n            .subscribe(() => this.updateChildrenNodes());\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this._clear();\n        super.ngOnDestroy();\n    }\n    /**\n     * Add children dataNodes to the NodeOutlet\n     * @param {?=} children\n     * @return {?}\n     */\n    updateChildrenNodes(children) {\n        if (children) {\n            this._children = children;\n        }\n        if (this.nodeOutlet.length && this._children) {\n            /** @type {?} */\n            const viewContainer = this.nodeOutlet.first.viewContainer;\n            this._tree.renderNodeChanges(this._children, this._dataDiffer, viewContainer, this._data);\n        }\n        else {\n            // Reset the data differ if there's no children nodes displayed\n            this._dataDiffer.diff([]);\n        }\n    }\n    /**\n     * Clear the children dataNodes.\n     * @return {?}\n     */\n    _clear() {\n        if (this.nodeOutlet && this.nodeOutlet.first) {\n            this.nodeOutlet.first.viewContainer.clear();\n            this._dataDiffer.diff([]);\n        }\n    }\n}\nCdkNestedTreeNode.ɵfac = function CdkNestedTreeNode_Factory(t) { return new (t || CdkNestedTreeNode)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(CdkTree), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.IterableDiffers)); };\nCdkNestedTreeNode.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: CdkNestedTreeNode, selectors: [[\"cdk-nested-tree-node\"]], contentQueries: function CdkNestedTreeNode_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, CdkTreeNodeOutlet, 4);\n    } if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.nodeOutlet = _t);\n    } }, hostAttrs: [1, \"cdk-tree-node\", \"cdk-nested-tree-node\"], hostVars: 2, hostBindings: function CdkNestedTreeNode_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"aria-expanded\", ctx.isExpanded)(\"role\", ctx.role);\n    } }, exportAs: [\"cdkNestedTreeNode\"], features: [ɵngcc0.ɵɵProvidersFeature([{ provide: CdkTreeNode, useExisting: CdkNestedTreeNode }]), ɵngcc0.ɵɵInheritDefinitionFeature] });\n/** @nocollapse */\nCdkNestedTreeNode.ctorParameters = () => [\n    { type: ElementRef },\n    { type: CdkTree },\n    { type: IterableDiffers }\n];\nCdkNestedTreeNode.propDecorators = {\n    nodeOutlet: [{ type: ContentChildren, args: [CdkTreeNodeOutlet,] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkNestedTreeNode, [{\n        type: Directive,\n        args: [{\n                selector: 'cdk-nested-tree-node',\n                exportAs: 'cdkNestedTreeNode',\n                host: {\n                    '[attr.aria-expanded]': 'isExpanded',\n                    '[attr.role]': 'role',\n                    'class': 'cdk-tree-node cdk-nested-tree-node'\n                },\n                providers: [{ provide: CdkTreeNode, useExisting: CdkNestedTreeNode }]\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: CdkTree }, { type: ɵngcc0.IterableDiffers }]; }, { nodeOutlet: [{\n            type: ContentChildren,\n            args: [CdkTreeNodeOutlet]\n        }] }); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/** *\n * Regex used to split a string on its CSS units.\n  @type {?} */\nconst cssUnitPattern = /([A-Za-z%]+)$/;\n/**\n * Indent for the children tree dataNodes.\n * This directive will add left-padding to the node to show hierarchy.\n * @template T\n */\nclass CdkTreeNodePadding {\n    /**\n     * @param {?} _treeNode\n     * @param {?} _tree\n     * @param {?} _renderer\n     * @param {?} _element\n     * @param {?} _dir\n     */\n    constructor(_treeNode, _tree, _renderer, _element, _dir) {\n        this._treeNode = _treeNode;\n        this._tree = _tree;\n        this._renderer = _renderer;\n        this._element = _element;\n        this._dir = _dir;\n        /**\n         * Subject that emits when the component has been destroyed.\n         */\n        this._destroyed = new Subject();\n        /**\n         * CSS units used for the indentation value.\n         */\n        this.indentUnits = 'px';\n        this._indent = 40;\n        this._setPadding();\n        if (this._dir) {\n            this._dir.change.pipe(takeUntil(this._destroyed)).subscribe(() => this._setPadding());\n        }\n    }\n    /**\n     * The level of depth of the tree node. The padding will be `level * indent` pixels.\n     * @return {?}\n     */\n    get level() { return this._level; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set level(value) {\n        this._level = coerceNumberProperty(value);\n        this._setPadding();\n    }\n    /**\n     * The indent for each level. Can be a number or a CSS string.\n     * Default number 40px from material design menu sub-menu spec.\n     * @return {?}\n     */\n    get indent() { return this._indent; }\n    /**\n     * @param {?} indent\n     * @return {?}\n     */\n    set indent(indent) {\n        /** @type {?} */\n        let value = indent;\n        /** @type {?} */\n        let units = 'px';\n        if (typeof indent === 'string') {\n            /** @type {?} */\n            const parts = indent.split(cssUnitPattern);\n            value = parts[0];\n            units = parts[1] || units;\n        }\n        this.indentUnits = units;\n        this._indent = coerceNumberProperty(value);\n        this._setPadding();\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this._destroyed.next();\n        this._destroyed.complete();\n    }\n    /**\n     * The padding indent value for the tree node. Returns a string with px numbers if not null.\n     * @return {?}\n     */\n    _paddingIndent() {\n        /** @type {?} */\n        const nodeLevel = (this._treeNode.data && this._tree.treeControl.getLevel)\n            ? this._tree.treeControl.getLevel(this._treeNode.data)\n            : null;\n        /** @type {?} */\n        const level = this._level || nodeLevel;\n        return level ? `${level * this._indent}${this.indentUnits}` : null;\n    }\n    /**\n     * @return {?}\n     */\n    _setPadding() {\n        /** @type {?} */\n        const padding = this._paddingIndent();\n        /** @type {?} */\n        const paddingProp = this._dir && this._dir.value === 'rtl' ? 'paddingRight' : 'paddingLeft';\n        this._renderer.setStyle(this._element.nativeElement, paddingProp, padding);\n    }\n}\nCdkTreeNodePadding.ɵfac = function CdkTreeNodePadding_Factory(t) { return new (t || CdkTreeNodePadding)(ɵngcc0.ɵɵdirectiveInject(CdkTreeNode), ɵngcc0.ɵɵdirectiveInject(CdkTree), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.Directionality, 8)); };\nCdkTreeNodePadding.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: CdkTreeNodePadding, selectors: [[\"\", \"cdkTreeNodePadding\", \"\"]], inputs: { level: [\"cdkTreeNodePadding\", \"level\"], indent: [\"cdkTreeNodePaddingIndent\", \"indent\"] } });\n/** @nocollapse */\nCdkTreeNodePadding.ctorParameters = () => [\n    { type: CdkTreeNode },\n    { type: CdkTree },\n    { type: Renderer2 },\n    { type: ElementRef },\n    { type: Directionality, decorators: [{ type: Optional }] }\n];\nCdkTreeNodePadding.propDecorators = {\n    level: [{ type: Input, args: ['cdkTreeNodePadding',] }],\n    indent: [{ type: Input, args: ['cdkTreeNodePaddingIndent',] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkTreeNodePadding, [{\n        type: Directive,\n        args: [{\n                selector: '[cdkTreeNodePadding]'\n            }]\n    }], function () { return [{ type: CdkTreeNode }, { type: CdkTree }, { type: ɵngcc0.Renderer2 }, { type: ɵngcc0.ElementRef }, { type: ɵngcc1.Directionality, decorators: [{\n                type: Optional\n            }] }]; }, { level: [{\n            type: Input,\n            args: ['cdkTreeNodePadding']\n        }], indent: [{\n            type: Input,\n            args: ['cdkTreeNodePaddingIndent']\n        }] }); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * Node toggle to expand/collapse the node.\n * @template T\n */\nclass CdkTreeNodeToggle {\n    /**\n     * @param {?} _tree\n     * @param {?} _treeNode\n     */\n    constructor(_tree, _treeNode) {\n        this._tree = _tree;\n        this._treeNode = _treeNode;\n        this._recursive = false;\n    }\n    /**\n     * Whether expand/collapse the node recursively.\n     * @return {?}\n     */\n    get recursive() { return this._recursive; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set recursive(value) { this._recursive = coerceBooleanProperty(value); }\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    _toggle(event) {\n        this.recursive\n            ? this._tree.treeControl.toggleDescendants(this._treeNode.data)\n            : this._tree.treeControl.toggle(this._treeNode.data);\n        event.stopPropagation();\n    }\n}\nCdkTreeNodeToggle.ɵfac = function CdkTreeNodeToggle_Factory(t) { return new (t || CdkTreeNodeToggle)(ɵngcc0.ɵɵdirectiveInject(CdkTree), ɵngcc0.ɵɵdirectiveInject(CdkTreeNode)); };\nCdkTreeNodeToggle.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: CdkTreeNodeToggle, selectors: [[\"\", \"cdkTreeNodeToggle\", \"\"]], hostBindings: function CdkTreeNodeToggle_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"click\", function CdkTreeNodeToggle_click_HostBindingHandler($event) { return ctx._toggle($event); });\n    } }, inputs: { recursive: [\"cdkTreeNodeToggleRecursive\", \"recursive\"] } });\n/** @nocollapse */\nCdkTreeNodeToggle.ctorParameters = () => [\n    { type: CdkTree },\n    { type: CdkTreeNode }\n];\nCdkTreeNodeToggle.propDecorators = {\n    recursive: [{ type: Input, args: ['cdkTreeNodeToggleRecursive',] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkTreeNodeToggle, [{\n        type: Directive,\n        args: [{\n                selector: '[cdkTreeNodeToggle]',\n                host: {\n                    '(click)': '_toggle($event)'\n                }\n            }]\n    }], function () { return [{ type: CdkTree }, { type: CdkTreeNode }]; }, { recursive: [{\n            type: Input,\n            args: ['cdkTreeNodeToggleRecursive']\n        }] }); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst EXPORTED_DECLARATIONS = [\n    CdkNestedTreeNode,\n    CdkTreeNodeDef,\n    CdkTreeNodePadding,\n    CdkTreeNodeToggle,\n    CdkTree,\n    CdkTreeNode,\n    CdkTreeNodeOutlet,\n];\nclass CdkTreeModule {\n}\nCdkTreeModule.ɵfac = function CdkTreeModule_Factory(t) { return new (t || CdkTreeModule)(); };\nCdkTreeModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: CdkTreeModule });\nCdkTreeModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ providers: [FocusMonitor, CdkTreeNodeDef], imports: [[CommonModule]] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkTreeModule, [{\n        type: NgModule,\n        args: [{\n                imports: [CommonModule],\n                exports: EXPORTED_DECLARATIONS,\n                declarations: EXPORTED_DECLARATIONS,\n                providers: [FocusMonitor, CdkTreeNodeDef]\n            }]\n    }], null, null); })();\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(CdkTreeModule, { declarations: function () { return [CdkNestedTreeNode, CdkTreeNodeDef, CdkTreeNodePadding, CdkTreeNodeToggle, CdkTree, CdkTreeNode, CdkTreeNodeOutlet]; }, imports: function () { return [CommonModule]; }, exports: function () { return [CdkNestedTreeNode, CdkTreeNodeDef, CdkTreeNodePadding, CdkTreeNodeToggle, CdkTree, CdkTreeNode, CdkTreeNodeOutlet]; } }); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\nexport { BaseTreeControl, FlatTreeControl, NestedTreeControl, CdkNestedTreeNode, CdkTreeNodeOutletContext, CdkTreeNodeDef, CdkTreeNodePadding, CdkTreeNodeOutlet, CdkTree, CdkTreeNode, getTreeNoValidDataSourceError, getTreeMultipleDefaultNodeDefsError, getTreeMissingMatchingNodeDefError, getTreeControlMissingError, getTreeControlFunctionsMissingError, CdkTreeModule, CdkTreeNodeToggle };\n\n//# sourceMappingURL=tree.js.map"]},"metadata":{},"sourceType":"module"}