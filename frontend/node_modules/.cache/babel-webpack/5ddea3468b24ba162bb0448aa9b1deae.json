{"ast":null,"code":"import _assertThisInitialized from \"/Users/adepertat/Dropbox/ECOLES/Openclassroom/P6_de_Pertat_Antoine/AntoinedePertat_6_240521/frontend/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _get from \"/Users/adepertat/Dropbox/ECOLES/Openclassroom/P6_de_Pertat_Antoine/AntoinedePertat_6_240521/frontend/node_modules/@babel/runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"/Users/adepertat/Dropbox/ECOLES/Openclassroom/P6_de_Pertat_Antoine/AntoinedePertat_6_240521/frontend/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/adepertat/Dropbox/ECOLES/Openclassroom/P6_de_Pertat_Antoine/AntoinedePertat_6_240521/frontend/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/adepertat/Dropbox/ECOLES/Openclassroom/P6_de_Pertat_Antoine/AntoinedePertat_6_240521/frontend/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _createClass from \"/Users/adepertat/Dropbox/ECOLES/Openclassroom/P6_de_Pertat_Antoine/AntoinedePertat_6_240521/frontend/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _classCallCheck from \"/Users/adepertat/Dropbox/ECOLES/Openclassroom/P6_de_Pertat_Antoine/AntoinedePertat_6_240521/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { NgModule, InjectionToken, Optional, Inject, isDevMode, inject, LOCALE_ID, Injectable, Directive, ElementRef, Input, NgZone, Component, ViewEncapsulation, ChangeDetectionStrategy, ChangeDetectorRef, EventEmitter, Output, defineInjectable } from '@angular/core';\nimport { HAMMER_LOADER, HammerGestureConfig } from '@angular/platform-browser';\nimport { BidiModule } from '@angular/cdk/bidi';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { Subject, Observable } from 'rxjs';\nimport { Platform, PlatformModule, normalizePassiveListenerOptions } from '@angular/cdk/platform';\nimport { startWith } from 'rxjs/operators';\nimport { isFakeMousedownFromScreenReader } from '@angular/cdk/a11y';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\nimport { ENTER, SPACE } from '@angular/cdk/keycodes';\nimport { CommonModule } from '@angular/common';\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * \\@docs-private\n */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/platform';\nimport * as ɵngcc2 from '@angular/common';\nvar _c0 = [\"*\", [[\"mat-option\"], [\"ng-container\"]]];\nvar _c1 = [\"*\", \"mat-option, ng-container\"];\n\nfunction MatOption_mat_pseudo_checkbox_0_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelement(0, \"mat-pseudo-checkbox\", 3);\n  }\n\n  if (rf & 2) {\n    var ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"state\", ctx_r0.selected ? \"checked\" : \"\")(\"disabled\", ctx_r0.disabled);\n  }\n}\n\nvar _c2 = [\"*\"];\n\nvar AnimationCurves = /*@__PURE__*/function () {\n  var AnimationCurves = function AnimationCurves() {\n    _classCallCheck(this, AnimationCurves);\n  };\n\n  AnimationCurves.STANDARD_CURVE = 'cubic-bezier(0.4,0.0,0.2,1)';\n  AnimationCurves.DECELERATION_CURVE = 'cubic-bezier(0.0,0.0,0.2,1)';\n  AnimationCurves.ACCELERATION_CURVE = 'cubic-bezier(0.4,0.0,1,1)';\n  AnimationCurves.SHARP_CURVE = 'cubic-bezier(0.4,0.0,0.6,1)';\n  return AnimationCurves;\n}();\n\nvar AnimationDurations = /*@__PURE__*/function () {\n  var AnimationDurations = function AnimationDurations() {\n    _classCallCheck(this, AnimationDurations);\n  };\n\n  AnimationDurations.COMPLEX = '375ms';\n  AnimationDurations.ENTERING = '225ms';\n  AnimationDurations.EXITING = '195ms';\n  return AnimationDurations;\n}();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/** *\n * Injection token that configures whether the Material sanity checks are enabled.\n  @type {?} */\n\n\nvar MATERIAL_SANITY_CHECKS = /*@__PURE__*/new InjectionToken('mat-sanity-checks', {\n  providedIn: 'root',\n  factory: MATERIAL_SANITY_CHECKS_FACTORY\n});\n/**\n * \\@docs-private\n * @return {?}\n */\n\nfunction MATERIAL_SANITY_CHECKS_FACTORY() {\n  return true;\n}\n\nvar MatCommonModule = /*@__PURE__*/function () {\n  var MatCommonModule = /*#__PURE__*/function () {\n    /**\n     * @param {?} _sanityChecksEnabled\n     * @param {?=} _hammerLoader\n     */\n    function MatCommonModule(_sanityChecksEnabled, _hammerLoader) {\n      _classCallCheck(this, MatCommonModule);\n\n      this._sanityChecksEnabled = _sanityChecksEnabled;\n      this._hammerLoader = _hammerLoader;\n      /**\n       * Whether we've done the global sanity checks (e.g. a theme is loaded, there is a doctype).\n       */\n\n      this._hasDoneGlobalChecks = false;\n      /**\n       * Whether we've already checked for HammerJs availability.\n       */\n\n      this._hasCheckedHammer = false;\n      /**\n       * Reference to the global `document` object.\n       */\n\n      this._document = typeof document === 'object' && document ? document : null;\n      /**\n       * Reference to the global 'window' object.\n       */\n\n      this._window = typeof window === 'object' && window ? window : null;\n\n      if (this._areChecksEnabled() && !this._hasDoneGlobalChecks) {\n        this._checkDoctypeIsDefined();\n\n        this._checkThemeIsPresent();\n\n        this._hasDoneGlobalChecks = true;\n      }\n    }\n    /**\n     * Whether any sanity checks are enabled\n     * @return {?}\n     */\n\n\n    _createClass(MatCommonModule, [{\n      key: \"_areChecksEnabled\",\n      value: function _areChecksEnabled() {\n        return this._sanityChecksEnabled && isDevMode() && !this._isTestEnv();\n      }\n      /**\n       * Whether the code is running in tests.\n       * @return {?}\n       */\n\n    }, {\n      key: \"_isTestEnv\",\n      value: function _isTestEnv() {\n        /** @type {?} */\n        var window =\n        /** @type {?} */\n        this._window;\n        return window && (window.__karma__ || window.jasmine);\n      }\n      /**\n       * @return {?}\n       */\n\n    }, {\n      key: \"_checkDoctypeIsDefined\",\n      value: function _checkDoctypeIsDefined() {\n        if (this._document && !this._document.doctype) {\n          console.warn('Current document does not have a doctype. This may cause ' + 'some Angular Material components not to behave as expected.');\n        }\n      }\n      /**\n       * @return {?}\n       */\n\n    }, {\n      key: \"_checkThemeIsPresent\",\n      value: function _checkThemeIsPresent() {\n        // We need to assert that the `body` is defined, because these checks run very early\n        // and the `body` won't be defined if the consumer put their scripts in the `head`.\n        if (!this._document || !this._document.body || typeof getComputedStyle !== 'function') {\n          return;\n        }\n        /** @type {?} */\n\n\n        var testElement = this._document.createElement('div');\n\n        testElement.classList.add('mat-theme-loaded-marker');\n\n        this._document.body.appendChild(testElement);\n        /** @type {?} */\n\n\n        var computedStyle = getComputedStyle(testElement); // In some situations the computed style of the test element can be null. For example in\n        // Firefox, the computed style is null if an application is running inside of a hidden iframe.\n        // See: https://bugzilla.mozilla.org/show_bug.cgi?id=548397\n\n        if (computedStyle && computedStyle.display !== 'none') {\n          console.warn('Could not find Angular Material core theme. Most Material ' + 'components may not work as expected. For more info refer ' + 'to the theming guide: https://material.angular.io/guide/theming');\n        }\n\n        this._document.body.removeChild(testElement);\n      }\n      /**\n       * Checks whether HammerJS is available.\n       * @return {?}\n       */\n\n    }, {\n      key: \"_checkHammerIsAvailable\",\n      value: function _checkHammerIsAvailable() {\n        if (this._hasCheckedHammer || !this._window) {\n          return;\n        }\n\n        if (this._areChecksEnabled() && !\n        /** @type {?} */\n        this._window['Hammer'] && !this._hammerLoader) {\n          console.warn('Could not find HammerJS. Certain Angular Material components may not work correctly.');\n        }\n\n        this._hasCheckedHammer = true;\n      }\n    }]);\n\n    return MatCommonModule;\n  }();\n\n  MatCommonModule.ɵfac = function MatCommonModule_Factory(t) {\n    return new (t || MatCommonModule)(ɵngcc0.ɵɵinject(MATERIAL_SANITY_CHECKS, 8), ɵngcc0.ɵɵinject(HAMMER_LOADER, 8));\n  };\n\n  MatCommonModule.ɵmod =\n  /*@__PURE__*/\n\n  /*@__PURE__*/\n  ɵngcc0.ɵɵdefineNgModule({\n    type: MatCommonModule\n  });\n  MatCommonModule.ɵinj =\n  /*@__PURE__*/\n\n  /*@__PURE__*/\n  ɵngcc0.ɵɵdefineInjector({\n    imports: [[BidiModule], BidiModule]\n  });\n  return MatCommonModule;\n}();\n/*@__PURE__*/\n\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatCommonModule, {\n    imports: function imports() {\n      return [BidiModule];\n    },\n    exports: function exports() {\n      return [BidiModule];\n    }\n  });\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * Mixin to augment a directive with a `disabled` property.\n * @template T\n * @param {?} base\n * @return {?}\n */\n\n\nfunction mixinDisabled(base) {\n  return /*#__PURE__*/function (_base) {\n    _inherits(_class, _base);\n\n    var _super = _createSuper(_class);\n\n    /**\n     * @param {...?} args\n     */\n    function _class() {\n      var _this;\n\n      _classCallCheck(this, _class);\n\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      _this = _super.call.apply(_super, [this].concat(args));\n      _this._disabled = false;\n      return _this;\n    }\n    /**\n     * @return {?}\n     */\n\n\n    _createClass(_class, [{\n      key: \"disabled\",\n      get: function get() {\n        return this._disabled;\n      }\n      /**\n       * @param {?} value\n       * @return {?}\n       */\n      ,\n      set: function set(value) {\n        this._disabled = coerceBooleanProperty(value);\n      }\n    }]);\n\n    return _class;\n  }(base);\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * Mixin to augment a directive with a `color` property.\n * @template T\n * @param {?} base\n * @param {?=} defaultColor\n * @return {?}\n */\n\n\nfunction mixinColor(base, defaultColor) {\n  return /*#__PURE__*/function (_base2) {\n    _inherits(_class2, _base2);\n\n    var _super2 = _createSuper(_class2);\n\n    /**\n     * @param {...?} args\n     */\n    function _class2() {\n      var _this2;\n\n      _classCallCheck(this, _class2);\n\n      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        args[_key2] = arguments[_key2];\n      }\n\n      _this2 = _super2.call.apply(_super2, [this].concat(args)); // Set the default color that can be specified from the mixin.\n\n      _this2.color = defaultColor;\n      return _this2;\n    }\n\n    _createClass(_class2, [{\n      key: \"color\",\n      get:\n      /**\n       * @return {?}\n       */\n      function get() {\n        return this._color;\n      }\n      /**\n       * @param {?} value\n       * @return {?}\n       */\n      ,\n      set: function set(value) {\n        /** @type {?} */\n        var colorPalette = value || defaultColor;\n\n        if (colorPalette !== this._color) {\n          if (this._color) {\n            this._elementRef.nativeElement.classList.remove(\"mat-\".concat(this._color));\n          }\n\n          if (colorPalette) {\n            this._elementRef.nativeElement.classList.add(\"mat-\".concat(colorPalette));\n          }\n\n          this._color = colorPalette;\n        }\n      }\n    }]);\n\n    return _class2;\n  }(base);\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * Mixin to augment a directive with a `disableRipple` property.\n * @template T\n * @param {?} base\n * @return {?}\n */\n\n\nfunction mixinDisableRipple(base) {\n  return /*#__PURE__*/function (_base3) {\n    _inherits(_class3, _base3);\n\n    var _super3 = _createSuper(_class3);\n\n    /**\n     * @param {...?} args\n     */\n    function _class3() {\n      var _this3;\n\n      _classCallCheck(this, _class3);\n\n      for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n        args[_key3] = arguments[_key3];\n      }\n\n      _this3 = _super3.call.apply(_super3, [this].concat(args));\n      _this3._disableRipple = false;\n      return _this3;\n    }\n    /**\n     * Whether the ripple effect is disabled or not.\n     * @return {?}\n     */\n\n\n    _createClass(_class3, [{\n      key: \"disableRipple\",\n      get: function get() {\n        return this._disableRipple;\n      }\n      /**\n       * @param {?} value\n       * @return {?}\n       */\n      ,\n      set: function set(value) {\n        this._disableRipple = coerceBooleanProperty(value);\n      }\n    }]);\n\n    return _class3;\n  }(base);\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * Mixin to augment a directive with a `tabIndex` property.\n * @template T\n * @param {?} base\n * @param {?=} defaultTabIndex\n * @return {?}\n */\n\n\nfunction mixinTabIndex(base) {\n  var defaultTabIndex = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  return /*#__PURE__*/function (_base4) {\n    _inherits(_class4, _base4);\n\n    var _super4 = _createSuper(_class4);\n\n    /**\n     * @param {...?} args\n     */\n    function _class4() {\n      var _this4;\n\n      _classCallCheck(this, _class4);\n\n      for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n        args[_key4] = arguments[_key4];\n      }\n\n      _this4 = _super4.call.apply(_super4, [this].concat(args));\n      _this4._tabIndex = defaultTabIndex;\n      return _this4;\n    }\n    /**\n     * @return {?}\n     */\n\n\n    _createClass(_class4, [{\n      key: \"tabIndex\",\n      get: function get() {\n        return this.disabled ? -1 : this._tabIndex;\n      }\n      /**\n       * @param {?} value\n       * @return {?}\n       */\n      ,\n      set: function set(value) {\n        // If the specified tabIndex value is null or undefined, fall back to the default value.\n        this._tabIndex = value != null ? value : defaultTabIndex;\n      }\n    }]);\n\n    return _class4;\n  }(base);\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * Mixin to augment a directive with updateErrorState method.\n * For component with `errorState` and need to update `errorState`.\n * @template T\n * @param {?} base\n * @return {?}\n */\n\n\nfunction mixinErrorState(base) {\n  return /*#__PURE__*/function (_base5) {\n    _inherits(_class5, _base5);\n\n    var _super5 = _createSuper(_class5);\n\n    /**\n     * @param {...?} args\n     */\n    function _class5() {\n      var _this5;\n\n      _classCallCheck(this, _class5);\n\n      for (var _len5 = arguments.length, args = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {\n        args[_key5] = arguments[_key5];\n      }\n\n      _this5 = _super5.call.apply(_super5, [this].concat(args));\n      /**\n       * Whether the component is in an error state.\n       */\n\n      _this5.errorState = false;\n      /**\n       * Stream that emits whenever the state of the input changes such that the wrapping\n       * `MatFormField` needs to run change detection.\n       */\n\n      _this5.stateChanges = new Subject();\n      return _this5;\n    }\n    /**\n     * @return {?}\n     */\n\n\n    _createClass(_class5, [{\n      key: \"updateErrorState\",\n      value: function updateErrorState() {\n        /** @type {?} */\n        var oldState = this.errorState;\n        /** @type {?} */\n\n        var parent = this._parentFormGroup || this._parentForm;\n        /** @type {?} */\n\n        var matcher = this.errorStateMatcher || this._defaultErrorStateMatcher;\n        /** @type {?} */\n\n        var control = this.ngControl ?\n        /** @type {?} */\n        this.ngControl.control : null;\n        /** @type {?} */\n\n        var newState = matcher.isErrorState(control, parent);\n\n        if (newState !== oldState) {\n          this.errorState = newState;\n          this.stateChanges.next();\n        }\n      }\n    }]);\n\n    return _class5;\n  }(base);\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * Mixin to augment a directive with an initialized property that will emits when ngOnInit ends.\n * @template T\n * @param {?} base\n * @return {?}\n */\n\n\nfunction mixinInitialized(base) {\n  return /*#__PURE__*/function (_base6) {\n    _inherits(_class6, _base6);\n\n    var _super6 = _createSuper(_class6);\n\n    /**\n     * @param {...?} args\n     */\n    function _class6() {\n      var _this6;\n\n      _classCallCheck(this, _class6);\n\n      for (var _len6 = arguments.length, args = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {\n        args[_key6] = arguments[_key6];\n      }\n\n      _this6 = _super6.call.apply(_super6, [this].concat(args));\n      /**\n       * Whether this directive has been marked as initialized.\n       */\n\n      _this6._isInitialized = false;\n      /**\n       * List of subscribers that subscribed before the directive was initialized. Should be notified\n       * during _markInitialized. Set to null after pending subscribers are notified, and should\n       * not expect to be populated after.\n       */\n\n      _this6._pendingSubscribers = [];\n      /**\n       * Observable stream that emits when the directive initializes. If already initialized, the\n       * subscriber is stored to be notified once _markInitialized is called.\n       */\n\n      _this6.initialized = new Observable(function (subscriber) {\n        // If initialized, immediately notify the subscriber. Otherwise store the subscriber to notify\n        // when _markInitialized is called.\n        if (_this6._isInitialized) {\n          _this6._notifySubscriber(subscriber);\n        } else {\n          /** @type {?} */\n          _this6._pendingSubscribers.push(subscriber);\n        }\n      });\n      return _this6;\n    }\n    /**\n     * Marks the state as initialized and notifies pending subscribers. Should be called at the end\n     * of ngOnInit.\n     * \\@docs-private\n     * @return {?}\n     */\n\n\n    _createClass(_class6, [{\n      key: \"_markInitialized\",\n      value: function _markInitialized() {\n        if (this._isInitialized) {\n          throw Error('This directive has already been marked as initialized and ' + 'should not be called twice.');\n        }\n\n        this._isInitialized = true;\n        /** @type {?} */\n\n        this._pendingSubscribers.forEach(this._notifySubscriber);\n\n        this._pendingSubscribers = null;\n      }\n      /**\n       * Emits and completes the subscriber stream (should only emit once).\n       * @param {?} subscriber\n       * @return {?}\n       */\n\n    }, {\n      key: \"_notifySubscriber\",\n      value: function _notifySubscriber(subscriber) {\n        subscriber.next();\n        subscriber.complete();\n      }\n    }]);\n\n    return _class6;\n  }(base);\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/** *\n * InjectionToken for datepicker that can be used to override default locale code.\n  @type {?} */\n\n\nvar MAT_DATE_LOCALE = /*@__PURE__*/new InjectionToken('MAT_DATE_LOCALE', {\n  providedIn: 'root',\n  factory: MAT_DATE_LOCALE_FACTORY\n});\n/**\n * \\@docs-private\n * @return {?}\n */\n\nfunction MAT_DATE_LOCALE_FACTORY() {\n  return inject(LOCALE_ID);\n}\n/** *\n * No longer needed since MAT_DATE_LOCALE has been changed to a scoped injectable.\n * If you are importing and providing this in your code you can simply remove it.\n * @deprecated\n * \\@breaking-change 8.0.0\n  @type {?} */\n\n\nvar MAT_DATE_LOCALE_PROVIDER = {\n  provide: MAT_DATE_LOCALE,\n  useExisting: LOCALE_ID\n};\n/**\n * Adapts type `D` to be usable as a date by cdk-based components that work with dates.\n * @abstract\n * @template D\n */\n\nvar DateAdapter = /*#__PURE__*/function () {\n  function DateAdapter() {\n    _classCallCheck(this, DateAdapter);\n\n    this._localeChanges = new Subject();\n  }\n  /**\n   * A stream that emits when the locale changes.\n   * @return {?}\n   */\n\n\n  _createClass(DateAdapter, [{\n    key: \"localeChanges\",\n    get: function get() {\n      return this._localeChanges;\n    }\n    /**\n     * Attempts to deserialize a value to a valid date object. This is different from parsing in that\n     * deserialize should only accept non-ambiguous, locale-independent formats (e.g. a ISO 8601\n     * string). The default implementation does not allow any deserialization, it simply checks that\n     * the given value is already a valid date object or null. The `<mat-datepicker>` will call this\n     * method on all of it's `\\@Input()` properties that accept dates. It is therefore possible to\n     * support passing values from your backend directly to these properties by overriding this method\n     * to also deserialize the format used by your backend.\n     * @param {?} value The value to be deserialized into a date object.\n     * @return {?} The deserialized date object, either a valid date, null if the value can be\n     *     deserialized into a null date (e.g. the empty string), or an invalid date.\n     */\n\n  }, {\n    key: \"deserialize\",\n    value: function deserialize(value) {\n      if (value == null || this.isDateInstance(value) && this.isValid(value)) {\n        return value;\n      }\n\n      return this.invalid();\n    }\n    /**\n     * Sets the locale used for all dates.\n     * @param {?} locale The new locale.\n     * @return {?}\n     */\n\n  }, {\n    key: \"setLocale\",\n    value: function setLocale(locale) {\n      this.locale = locale;\n\n      this._localeChanges.next();\n    }\n    /**\n     * Compares two dates.\n     * @param {?} first The first date to compare.\n     * @param {?} second The second date to compare.\n     * @return {?} 0 if the dates are equal, a number less than 0 if the first date is earlier,\n     *     a number greater than 0 if the first date is later.\n     */\n\n  }, {\n    key: \"compareDate\",\n    value: function compareDate(first, second) {\n      return this.getYear(first) - this.getYear(second) || this.getMonth(first) - this.getMonth(second) || this.getDate(first) - this.getDate(second);\n    }\n    /**\n     * Checks if two dates are equal.\n     * @param {?} first The first date to check.\n     * @param {?} second The second date to check.\n     * @return {?} Whether the two dates are equal.\n     *     Null dates are considered equal to other null dates.\n     */\n\n  }, {\n    key: \"sameDate\",\n    value: function sameDate(first, second) {\n      if (first && second) {\n        /** @type {?} */\n        var firstValid = this.isValid(first);\n        /** @type {?} */\n\n        var secondValid = this.isValid(second);\n\n        if (firstValid && secondValid) {\n          return !this.compareDate(first, second);\n        }\n\n        return firstValid == secondValid;\n      }\n\n      return first == second;\n    }\n    /**\n     * Clamp the given date between min and max dates.\n     * @param {?} date The date to clamp.\n     * @param {?=} min The minimum value to allow. If null or omitted no min is enforced.\n     * @param {?=} max The maximum value to allow. If null or omitted no max is enforced.\n     * @return {?} `min` if `date` is less than `min`, `max` if date is greater than `max`,\n     *     otherwise `date`.\n     */\n\n  }, {\n    key: \"clampDate\",\n    value: function clampDate(date, min, max) {\n      if (min && this.compareDate(date, min) < 0) {\n        return min;\n      }\n\n      if (max && this.compareDate(date, max) > 0) {\n        return max;\n      }\n\n      return date;\n    }\n  }]);\n\n  return DateAdapter;\n}();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/** @type {?} */\n\n\nvar MAT_DATE_FORMATS = /*@__PURE__*/new InjectionToken('mat-date-formats');\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/** *\n * Whether the browser supports the Intl API.\n  @type {?} */\n\nvar SUPPORTS_INTL_API = typeof Intl != 'undefined';\n/** *\n * The default month names to use if Intl API is not available.\n  @type {?} */\n\nvar DEFAULT_MONTH_NAMES = {\n  'long': ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'],\n  'short': ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\n  'narrow': ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D']\n};\n\nvar ɵ0 = function ɵ0(i) {\n  return String(i + 1);\n};\n/** *\n * The default date names to use if Intl API is not available.\n  @type {?} */\n\n\nvar DEFAULT_DATE_NAMES = /*@__PURE__*/range(31, ɵ0);\n/** *\n * The default day of the week names to use if Intl API is not available.\n  @type {?} */\n\nvar DEFAULT_DAY_OF_WEEK_NAMES = {\n  'long': ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],\n  'short': ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],\n  'narrow': ['S', 'M', 'T', 'W', 'T', 'F', 'S']\n};\n/** *\n * Matches strings that have the form of a valid RFC 3339 string\n * (https://tools.ietf.org/html/rfc3339). Note that the string may not actually be a valid date\n * because the regex will match strings an with out of bounds month, date, etc.\n  @type {?} */\n\nvar ISO_8601_REGEX = /^\\d{4}-\\d{2}-\\d{2}(?:T\\d{2}:\\d{2}:\\d{2}(?:\\.\\d+)?(?:Z|(?:(?:\\+|-)\\d{2}:\\d{2}))?)?$/;\n/**\n * Creates an array and fills it with values.\n * @template T\n * @param {?} length\n * @param {?} valueFunction\n * @return {?}\n */\n\nfunction range(length, valueFunction) {\n  /** @type {?} */\n  var valuesArray = Array(length);\n\n  for (var i = 0; i < length; i++) {\n    valuesArray[i] = valueFunction(i);\n  }\n\n  return valuesArray;\n}\n\nvar NativeDateAdapter = /*@__PURE__*/function () {\n  var NativeDateAdapter = /*#__PURE__*/function (_DateAdapter) {\n    _inherits(NativeDateAdapter, _DateAdapter);\n\n    var _super7 = _createSuper(NativeDateAdapter);\n\n    /**\n     * @param {?} matDateLocale\n     * @param {?} platform\n     */\n    function NativeDateAdapter(matDateLocale, platform) {\n      var _thisSuper, _this7;\n\n      _classCallCheck(this, NativeDateAdapter);\n\n      _this7 = _super7.call(this);\n      /**\n       * Whether to use `timeZone: 'utc'` with `Intl.DateTimeFormat` when formatting dates.\n       * Without this `Intl.DateTimeFormat` sometimes chooses the wrong timeZone, which can throw off\n       * the result. (e.g. in the en-US locale `new Date(1800, 7, 14).toLocaleDateString()`\n       * will produce `'8/13/1800'`.\n       *\n       * TODO(mmalerba): drop this variable. It's not being used in the code right now. We're now\n       * getting the string representation of a Date object from it's utc representation. We're keeping\n       * it here for sometime, just for precaution, in case we decide to revert some of these changes\n       * though.\n       */\n\n      _this7.useUtcForDisplay = true;\n\n      _get((_thisSuper = _assertThisInitialized(_this7), _getPrototypeOf(NativeDateAdapter.prototype)), \"setLocale\", _thisSuper).call(_thisSuper, matDateLocale); // IE does its own time zone correction, so we disable this on IE.\n\n\n      _this7.useUtcForDisplay = !platform.TRIDENT;\n      _this7._clampDate = platform.TRIDENT || platform.EDGE;\n      return _this7;\n    }\n    /**\n     * @param {?} date\n     * @return {?}\n     */\n\n\n    _createClass(NativeDateAdapter, [{\n      key: \"getYear\",\n      value: function getYear(date) {\n        return date.getFullYear();\n      }\n      /**\n       * @param {?} date\n       * @return {?}\n       */\n\n    }, {\n      key: \"getMonth\",\n      value: function getMonth(date) {\n        return date.getMonth();\n      }\n      /**\n       * @param {?} date\n       * @return {?}\n       */\n\n    }, {\n      key: \"getDate\",\n      value: function getDate(date) {\n        return date.getDate();\n      }\n      /**\n       * @param {?} date\n       * @return {?}\n       */\n\n    }, {\n      key: \"getDayOfWeek\",\n      value: function getDayOfWeek(date) {\n        return date.getDay();\n      }\n      /**\n       * @param {?} style\n       * @return {?}\n       */\n\n    }, {\n      key: \"getMonthNames\",\n      value: function getMonthNames(style) {\n        var _this8 = this;\n\n        if (SUPPORTS_INTL_API) {\n          /** @type {?} */\n          var dtf = new Intl.DateTimeFormat(this.locale, {\n            month: style,\n            timeZone: 'utc'\n          });\n          return range(12, function (i) {\n            return _this8._stripDirectionalityCharacters(_this8._format(dtf, new Date(2017, i, 1)));\n          });\n        }\n\n        return DEFAULT_MONTH_NAMES[style];\n      }\n      /**\n       * @return {?}\n       */\n\n    }, {\n      key: \"getDateNames\",\n      value: function getDateNames() {\n        var _this9 = this;\n\n        if (SUPPORTS_INTL_API) {\n          /** @type {?} */\n          var dtf = new Intl.DateTimeFormat(this.locale, {\n            day: 'numeric',\n            timeZone: 'utc'\n          });\n          return range(31, function (i) {\n            return _this9._stripDirectionalityCharacters(_this9._format(dtf, new Date(2017, 0, i + 1)));\n          });\n        }\n\n        return DEFAULT_DATE_NAMES;\n      }\n      /**\n       * @param {?} style\n       * @return {?}\n       */\n\n    }, {\n      key: \"getDayOfWeekNames\",\n      value: function getDayOfWeekNames(style) {\n        var _this10 = this;\n\n        if (SUPPORTS_INTL_API) {\n          /** @type {?} */\n          var dtf = new Intl.DateTimeFormat(this.locale, {\n            weekday: style,\n            timeZone: 'utc'\n          });\n          return range(7, function (i) {\n            return _this10._stripDirectionalityCharacters(_this10._format(dtf, new Date(2017, 0, i + 1)));\n          });\n        }\n\n        return DEFAULT_DAY_OF_WEEK_NAMES[style];\n      }\n      /**\n       * @param {?} date\n       * @return {?}\n       */\n\n    }, {\n      key: \"getYearName\",\n      value: function getYearName(date) {\n        if (SUPPORTS_INTL_API) {\n          /** @type {?} */\n          var dtf = new Intl.DateTimeFormat(this.locale, {\n            year: 'numeric',\n            timeZone: 'utc'\n          });\n          return this._stripDirectionalityCharacters(this._format(dtf, date));\n        }\n\n        return String(this.getYear(date));\n      }\n      /**\n       * @return {?}\n       */\n\n    }, {\n      key: \"getFirstDayOfWeek\",\n      value: function getFirstDayOfWeek() {\n        // We can't tell using native JS Date what the first day of the week is, we default to Sunday.\n        return 0;\n      }\n      /**\n       * @param {?} date\n       * @return {?}\n       */\n\n    }, {\n      key: \"getNumDaysInMonth\",\n      value: function getNumDaysInMonth(date) {\n        return this.getDate(this._createDateWithOverflow(this.getYear(date), this.getMonth(date) + 1, 0));\n      }\n      /**\n       * @param {?} date\n       * @return {?}\n       */\n\n    }, {\n      key: \"clone\",\n      value: function clone(date) {\n        return this.createDate(this.getYear(date), this.getMonth(date), this.getDate(date));\n      }\n      /**\n       * @param {?} year\n       * @param {?} month\n       * @param {?} date\n       * @return {?}\n       */\n\n    }, {\n      key: \"createDate\",\n      value: function createDate(year, month, date) {\n        // Check for invalid month and date (except upper bound on date which we have to check after\n        // creating the Date).\n        if (month < 0 || month > 11) {\n          throw Error(\"Invalid month index \\\"\".concat(month, \"\\\". Month index has to be between 0 and 11.\"));\n        }\n\n        if (date < 1) {\n          throw Error(\"Invalid date \\\"\".concat(date, \"\\\". Date has to be greater than 0.\"));\n        }\n        /** @type {?} */\n\n\n        var result = this._createDateWithOverflow(year, month, date); // Check that the date wasn't above the upper bound for the month, causing the month to overflow\n\n\n        if (result.getMonth() != month) {\n          throw Error(\"Invalid date \\\"\".concat(date, \"\\\" for month with index \\\"\").concat(month, \"\\\".\"));\n        }\n\n        return result;\n      }\n      /**\n       * @return {?}\n       */\n\n    }, {\n      key: \"today\",\n      value: function today() {\n        return new Date();\n      }\n      /**\n       * @param {?} value\n       * @return {?}\n       */\n\n    }, {\n      key: \"parse\",\n      value: function parse(value) {\n        // We have no way using the native JS Date to set the parse format or locale, so we ignore these\n        // parameters.\n        if (typeof value == 'number') {\n          return new Date(value);\n        }\n\n        return value ? new Date(Date.parse(value)) : null;\n      }\n      /**\n       * @param {?} date\n       * @param {?} displayFormat\n       * @return {?}\n       */\n\n    }, {\n      key: \"format\",\n      value: function format(date, displayFormat) {\n        if (!this.isValid(date)) {\n          throw Error('NativeDateAdapter: Cannot format invalid date.');\n        }\n\n        if (SUPPORTS_INTL_API) {\n          // On IE and Edge the i18n API will throw a hard error that can crash the entire app\n          // if we attempt to format a date whose year is less than 1 or greater than 9999.\n          if (this._clampDate && (date.getFullYear() < 1 || date.getFullYear() > 9999)) {\n            date = this.clone(date);\n            date.setFullYear(Math.max(1, Math.min(9999, date.getFullYear())));\n          }\n\n          displayFormat = Object.assign({}, displayFormat, {\n            timeZone: 'utc'\n          });\n          /** @type {?} */\n\n          var dtf = new Intl.DateTimeFormat(this.locale, displayFormat);\n          return this._stripDirectionalityCharacters(this._format(dtf, date));\n        }\n\n        return this._stripDirectionalityCharacters(date.toDateString());\n      }\n      /**\n       * @param {?} date\n       * @param {?} years\n       * @return {?}\n       */\n\n    }, {\n      key: \"addCalendarYears\",\n      value: function addCalendarYears(date, years) {\n        return this.addCalendarMonths(date, years * 12);\n      }\n      /**\n       * @param {?} date\n       * @param {?} months\n       * @return {?}\n       */\n\n    }, {\n      key: \"addCalendarMonths\",\n      value: function addCalendarMonths(date, months) {\n        /** @type {?} */\n        var newDate = this._createDateWithOverflow(this.getYear(date), this.getMonth(date) + months, this.getDate(date)); // It's possible to wind up in the wrong month if the original month has more days than the new\n        // month. In this case we want to go to the last day of the desired month.\n        // Note: the additional + 12 % 12 ensures we end up with a positive number, since JS % doesn't\n        // guarantee this.\n\n\n        if (this.getMonth(newDate) != ((this.getMonth(date) + months) % 12 + 12) % 12) {\n          newDate = this._createDateWithOverflow(this.getYear(newDate), this.getMonth(newDate), 0);\n        }\n\n        return newDate;\n      }\n      /**\n       * @param {?} date\n       * @param {?} days\n       * @return {?}\n       */\n\n    }, {\n      key: \"addCalendarDays\",\n      value: function addCalendarDays(date, days) {\n        return this._createDateWithOverflow(this.getYear(date), this.getMonth(date), this.getDate(date) + days);\n      }\n      /**\n       * @param {?} date\n       * @return {?}\n       */\n\n    }, {\n      key: \"toIso8601\",\n      value: function toIso8601(date) {\n        return [date.getUTCFullYear(), this._2digit(date.getUTCMonth() + 1), this._2digit(date.getUTCDate())].join('-');\n      }\n      /**\n       * Returns the given value if given a valid Date or null. Deserializes valid ISO 8601 strings\n       * (https://www.ietf.org/rfc/rfc3339.txt) into valid Dates and empty string into null. Returns an\n       * invalid date for all other values.\n       * @param {?} value\n       * @return {?}\n       */\n\n    }, {\n      key: \"deserialize\",\n      value: function deserialize(value) {\n        if (typeof value === 'string') {\n          if (!value) {\n            return null;\n          } // The `Date` constructor accepts formats other than ISO 8601, so we need to make sure the\n          // string is the right format first.\n\n\n          if (ISO_8601_REGEX.test(value)) {\n            /** @type {?} */\n            var date = new Date(value);\n\n            if (this.isValid(date)) {\n              return date;\n            }\n          }\n        }\n\n        return _get(_getPrototypeOf(NativeDateAdapter.prototype), \"deserialize\", this).call(this, value);\n      }\n      /**\n       * @param {?} obj\n       * @return {?}\n       */\n\n    }, {\n      key: \"isDateInstance\",\n      value: function isDateInstance(obj) {\n        return obj instanceof Date;\n      }\n      /**\n       * @param {?} date\n       * @return {?}\n       */\n\n    }, {\n      key: \"isValid\",\n      value: function isValid(date) {\n        return !isNaN(date.getTime());\n      }\n      /**\n       * @return {?}\n       */\n\n    }, {\n      key: \"invalid\",\n      value: function invalid() {\n        return new Date(NaN);\n      }\n      /**\n       * Creates a date but allows the month and date to overflow.\n       * @param {?} year\n       * @param {?} month\n       * @param {?} date\n       * @return {?}\n       */\n\n    }, {\n      key: \"_createDateWithOverflow\",\n      value: function _createDateWithOverflow(year, month, date) {\n        /** @type {?} */\n        var result = new Date(year, month, date); // We need to correct for the fact that JS native Date treats years in range [0, 99] as\n        // abbreviations for 19xx.\n\n        if (year >= 0 && year < 100) {\n          result.setFullYear(this.getYear(result) - 1900);\n        }\n\n        return result;\n      }\n      /**\n       * Pads a number to make it two digits.\n       * @param {?} n The number to pad.\n       * @return {?} The padded number.\n       */\n\n    }, {\n      key: \"_2digit\",\n      value: function _2digit(n) {\n        return ('00' + n).slice(-2);\n      }\n      /**\n       * Strip out unicode LTR and RTL characters. Edge and IE insert these into formatted dates while\n       * other browsers do not. We remove them to make output consistent and because they interfere with\n       * date parsing.\n       * @param {?} str The string to strip direction characters from.\n       * @return {?} The stripped string.\n       */\n\n    }, {\n      key: \"_stripDirectionalityCharacters\",\n      value: function _stripDirectionalityCharacters(str) {\n        return str.replace(/[\\u200e\\u200f]/g, '');\n      }\n      /**\n       * When converting Date object to string, javascript built-in functions may return wrong\n       * results because it applies its internal DST rules. The DST rules around the world change\n       * very frequently, and the current valid rule is not always valid in previous years though.\n       * We work around this problem building a new Date object which has its internal UTC\n       * representation with the local date and time.\n       * @param {?} dtf Intl.DateTimeFormat object, containg the desired string format. It must have\n       *    timeZone set to 'utc' to work fine.\n       * @param {?} date Date from which we want to get the string representation according to dtf\n       * @return {?} A Date object with its UTC representation based on the passed in date info\n       */\n\n    }, {\n      key: \"_format\",\n      value: function _format(dtf, date) {\n        /** @type {?} */\n        var d = new Date(Date.UTC(date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(), date.getMinutes(), date.getSeconds(), date.getMilliseconds()));\n        return dtf.format(d);\n      }\n    }]);\n\n    return NativeDateAdapter;\n  }(DateAdapter);\n\n  NativeDateAdapter.ɵfac = function NativeDateAdapter_Factory(t) {\n    return new (t || NativeDateAdapter)(ɵngcc0.ɵɵinject(MAT_DATE_LOCALE, 8), ɵngcc0.ɵɵinject(ɵngcc1.Platform));\n  };\n\n  NativeDateAdapter.ɵprov =\n  /*@__PURE__*/\n\n  /*@__PURE__*/\n  ɵngcc0.ɵɵdefineInjectable({\n    token: NativeDateAdapter,\n    factory: NativeDateAdapter.ɵfac\n  });\n  return NativeDateAdapter;\n}();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/** @type {?} */\n\n\nvar MAT_NATIVE_DATE_FORMATS = {\n  parse: {\n    dateInput: null\n  },\n  display: {\n    dateInput: {\n      year: 'numeric',\n      month: 'numeric',\n      day: 'numeric'\n    },\n    monthYearLabel: {\n      year: 'numeric',\n      month: 'short'\n    },\n    dateA11yLabel: {\n      year: 'numeric',\n      month: 'long',\n      day: 'numeric'\n    },\n    monthYearA11yLabel: {\n      year: 'numeric',\n      month: 'long'\n    }\n  }\n};\n\nvar NativeDateModule = /*@__PURE__*/function () {\n  var NativeDateModule = function NativeDateModule() {\n    _classCallCheck(this, NativeDateModule);\n  };\n\n  NativeDateModule.ɵfac = function NativeDateModule_Factory(t) {\n    return new (t || NativeDateModule)();\n  };\n\n  NativeDateModule.ɵmod =\n  /*@__PURE__*/\n\n  /*@__PURE__*/\n  ɵngcc0.ɵɵdefineNgModule({\n    type: NativeDateModule\n  });\n  NativeDateModule.ɵinj =\n  /*@__PURE__*/\n\n  /*@__PURE__*/\n  ɵngcc0.ɵɵdefineInjector({\n    providers: [{\n      provide: DateAdapter,\n      useClass: NativeDateAdapter\n    }],\n    imports: [[PlatformModule]]\n  });\n  return NativeDateModule;\n}();\n/*@__PURE__*/\n\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NativeDateModule, {\n    imports: function imports() {\n      return [PlatformModule];\n    }\n  });\n})();\n\nvar ɵ0$1 = MAT_NATIVE_DATE_FORMATS;\n\nvar MatNativeDateModule = /*@__PURE__*/function () {\n  var MatNativeDateModule = function MatNativeDateModule() {\n    _classCallCheck(this, MatNativeDateModule);\n  };\n\n  MatNativeDateModule.ɵfac = function MatNativeDateModule_Factory(t) {\n    return new (t || MatNativeDateModule)();\n  };\n\n  MatNativeDateModule.ɵmod =\n  /*@__PURE__*/\n\n  /*@__PURE__*/\n  ɵngcc0.ɵɵdefineNgModule({\n    type: MatNativeDateModule\n  });\n  MatNativeDateModule.ɵinj =\n  /*@__PURE__*/\n\n  /*@__PURE__*/\n  ɵngcc0.ɵɵdefineInjector({\n    providers: [{\n      provide: MAT_DATE_FORMATS,\n      useValue: ɵ0$1\n    }],\n    imports: [[NativeDateModule]]\n  });\n  return MatNativeDateModule;\n}();\n/*@__PURE__*/\n\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatNativeDateModule, {\n    imports: [NativeDateModule]\n  });\n})();\n\nvar ShowOnDirtyErrorStateMatcher = /*@__PURE__*/function () {\n  var ShowOnDirtyErrorStateMatcher = /*#__PURE__*/function () {\n    function ShowOnDirtyErrorStateMatcher() {\n      _classCallCheck(this, ShowOnDirtyErrorStateMatcher);\n    }\n\n    _createClass(ShowOnDirtyErrorStateMatcher, [{\n      key: \"isErrorState\",\n      value:\n      /**\n       * @param {?} control\n       * @param {?} form\n       * @return {?}\n       */\n      function isErrorState(control, form) {\n        return !!(control && control.invalid && (control.dirty || form && form.submitted));\n      }\n    }]);\n\n    return ShowOnDirtyErrorStateMatcher;\n  }();\n\n  ShowOnDirtyErrorStateMatcher.ɵfac = function ShowOnDirtyErrorStateMatcher_Factory(t) {\n    return new (t || ShowOnDirtyErrorStateMatcher)();\n  };\n\n  ShowOnDirtyErrorStateMatcher.ɵprov =\n  /*@__PURE__*/\n\n  /*@__PURE__*/\n  ɵngcc0.ɵɵdefineInjectable({\n    token: ShowOnDirtyErrorStateMatcher,\n    factory: ShowOnDirtyErrorStateMatcher.ɵfac\n  });\n  return ShowOnDirtyErrorStateMatcher;\n}();\n\nvar ErrorStateMatcher = /*@__PURE__*/function () {\n  var ErrorStateMatcher = /*#__PURE__*/function () {\n    function ErrorStateMatcher() {\n      _classCallCheck(this, ErrorStateMatcher);\n    }\n\n    _createClass(ErrorStateMatcher, [{\n      key: \"isErrorState\",\n      value:\n      /**\n       * @param {?} control\n       * @param {?} form\n       * @return {?}\n       */\n      function isErrorState(control, form) {\n        return !!(control && control.invalid && (control.touched || form && form.submitted));\n      }\n    }]);\n\n    return ErrorStateMatcher;\n  }();\n\n  ErrorStateMatcher.ɵfac = function ErrorStateMatcher_Factory(t) {\n    return new (t || ErrorStateMatcher)();\n  };\n\n  ErrorStateMatcher.ɵprov =\n  /*@__PURE__*/\n\n  /*@__PURE__*/\n  ɵngcc0.ɵɵdefineInjectable({\n    token: ErrorStateMatcher,\n    factory: ErrorStateMatcher.ɵfac,\n    providedIn: 'root'\n  });\n  /** @nocollapse */\n\n  ErrorStateMatcher.ngInjectableDef = /*@__PURE__*/defineInjectable({\n    factory: function ErrorStateMatcher_Factory() {\n      return new ErrorStateMatcher();\n    },\n    token: ErrorStateMatcher,\n    providedIn: \"root\"\n  });\n  return ErrorStateMatcher;\n}();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/** *\n * Injection token that can be used to provide options to the Hammerjs instance.\n * More info at http://hammerjs.github.io/api/.\n  @type {?} */\n\n\nvar MAT_HAMMER_OPTIONS = /*@__PURE__*/new InjectionToken('MAT_HAMMER_OPTIONS');\n/** @type {?} */\n\nvar ANGULAR_MATERIAL_SUPPORTED_HAMMER_GESTURES = ['longpress', 'slide', 'slidestart', 'slideend', 'slideright', 'slideleft'];\n\nvar ɵ0$2 = function ɵ0$2() {},\n    ɵ1 = function ɵ1() {};\n/** *\n * Fake HammerInstance that is used when a Hammer instance is requested when HammerJS has not\n * been loaded on the page.\n  @type {?} */\n\n\nvar noopHammerInstance = {\n  on: ɵ0$2,\n  off: ɵ1\n};\n\nvar GestureConfig = /*@__PURE__*/function () {\n  var GestureConfig = /*#__PURE__*/function (_HammerGestureConfig) {\n    _inherits(GestureConfig, _HammerGestureConfig);\n\n    var _super8 = _createSuper(GestureConfig);\n\n    /**\n     * @param {?=} _hammerOptions\n     * @param {?=} commonModule\n     */\n    function GestureConfig(_hammerOptions, commonModule) {\n      var _this11;\n\n      _classCallCheck(this, GestureConfig);\n\n      _this11 = _super8.call(this);\n      _this11._hammerOptions = _hammerOptions;\n      /**\n       * List of new event names to add to the gesture support list\n       */\n\n      _this11.events = ANGULAR_MATERIAL_SUPPORTED_HAMMER_GESTURES;\n\n      if (commonModule) {\n        commonModule._checkHammerIsAvailable();\n      }\n\n      return _this11;\n    }\n    /**\n     * Builds Hammer instance manually to add custom recognizers that match the Material Design spec.\n     *\n     * Our gesture names come from the Material Design gestures spec:\n     * https://material.io/design/#gestures-touch-mechanics\n     *\n     * More information on default recognizers can be found in Hammer docs:\n     * http://hammerjs.github.io/recognizer-pan/\n     * http://hammerjs.github.io/recognizer-press/\n     *\n     * @param {?} element Element to which to assign the new HammerJS gestures.\n     * @return {?} Newly-created HammerJS instance.\n     */\n\n\n    _createClass(GestureConfig, [{\n      key: \"buildHammer\",\n      value: function buildHammer(element) {\n        /** @type {?} */\n        var hammer = typeof window !== 'undefined' ?\n        /** @type {?} */\n        window.Hammer : null;\n\n        if (!hammer) {\n          // If HammerJS is not loaded here, return the noop HammerInstance. This is necessary to\n          // ensure that omitting HammerJS completely will not cause any errors while *also* supporting\n          // the lazy-loading of HammerJS via the HAMMER_LOADER token introduced in Angular 6.1.\n          // Because we can't depend on HAMMER_LOADER's existance until 7.0, we have to always set\n          // `this.events` to the set we support, instead of conditionally setting it to `[]` if\n          // `HAMMER_LOADER` is present (and then throwing an Error here if `window.Hammer` is\n          // undefined).\n          // @breaking-change 8.0.0\n          return noopHammerInstance;\n        }\n        /** @type {?} */\n\n\n        var mc = new hammer(element, this._hammerOptions || undefined);\n        /** @type {?} */\n\n        var pan = new hammer.Pan();\n        /** @type {?} */\n\n        var swipe = new hammer.Swipe();\n        /** @type {?} */\n\n        var press = new hammer.Press();\n        /** @type {?} */\n\n        var slide = this._createRecognizer(pan, {\n          event: 'slide',\n          threshold: 0\n        }, swipe);\n        /** @type {?} */\n\n\n        var longpress = this._createRecognizer(press, {\n          event: 'longpress',\n          time: 500\n        }); // Overwrite the default `pan` event to use the swipe event.\n\n\n        pan.recognizeWith(swipe); // Since the slide event threshold is set to zero, the slide recognizer can fire and\n        // accidentally reset the longpress recognizer. In order to make sure that the two\n        // recognizers can run simultaneously but don't affect each other, we allow the slide\n        // recognizer to recognize while a longpress is being processed.\n        // See: https://github.com/hammerjs/hammer.js/blob/master/src/manager.js#L123-L124\n\n        longpress.recognizeWith(slide); // Add customized gestures to Hammer manager\n\n        mc.add([swipe, press, pan, slide, longpress]);\n        return (\n          /** @type {?} */\n          mc\n        );\n      }\n      /**\n       * Creates a new recognizer, without affecting the default recognizers of HammerJS\n       * @param {?} base\n       * @param {?} options\n       * @param {...?} inheritances\n       * @return {?}\n       */\n\n    }, {\n      key: \"_createRecognizer\",\n      value: function _createRecognizer(base, options) {\n        /** @type {?} */\n        var recognizer = new\n        /** @type {?} */\n        base.constructor(options);\n\n        for (var _len7 = arguments.length, inheritances = new Array(_len7 > 2 ? _len7 - 2 : 0), _key7 = 2; _key7 < _len7; _key7++) {\n          inheritances[_key7 - 2] = arguments[_key7];\n        }\n\n        inheritances.push(base);\n        inheritances.forEach(function (item) {\n          return recognizer.recognizeWith(item);\n        });\n        return recognizer;\n      }\n    }]);\n\n    return GestureConfig;\n  }(HammerGestureConfig);\n\n  GestureConfig.ɵfac = function GestureConfig_Factory(t) {\n    return new (t || GestureConfig)(ɵngcc0.ɵɵinject(MAT_HAMMER_OPTIONS, 8), ɵngcc0.ɵɵinject(MatCommonModule, 8));\n  };\n\n  GestureConfig.ɵprov =\n  /*@__PURE__*/\n\n  /*@__PURE__*/\n  ɵngcc0.ɵɵdefineInjectable({\n    token: GestureConfig,\n    factory: GestureConfig.ɵfac\n  });\n  return GestureConfig;\n}();\n\nvar MatLine = /*@__PURE__*/function () {\n  var MatLine = function MatLine() {\n    _classCallCheck(this, MatLine);\n  };\n\n  MatLine.ɵfac = function MatLine_Factory(t) {\n    return new (t || MatLine)();\n  };\n\n  MatLine.ɵdir =\n  /*@__PURE__*/\n\n  /*@__PURE__*/\n  ɵngcc0.ɵɵdefineDirective({\n    type: MatLine,\n    selectors: [[\"\", \"mat-line\", \"\"], [\"\", \"matLine\", \"\"]],\n    hostAttrs: [1, \"mat-line\"]\n  });\n  return MatLine;\n}();\n/**\n * Helper that takes a query list of lines and sets the correct class on the host.\n * \\@docs-private\n * @param {?} lines\n * @param {?} element\n * @return {?}\n */\n\n\nfunction setLines(lines, element) {\n  // Note: doesn't need to unsubscribe, because `changes`\n  // gets completed by Angular when the view is destroyed.\n  lines.changes.pipe(startWith(lines)).subscribe(function (_ref) {\n    var length = _ref.length;\n    setClass(element, 'mat-2-line', false);\n    setClass(element, 'mat-3-line', false);\n    setClass(element, 'mat-multi-line', false);\n\n    if (length === 2 || length === 3) {\n      setClass(element, \"mat-\".concat(length, \"-line\"), true);\n    } else if (length > 3) {\n      setClass(element, \"mat-multi-line\", true);\n    }\n  });\n}\n/**\n * Adds or removes a class from an element.\n * @param {?} element\n * @param {?} className\n * @param {?} isAdd\n * @return {?}\n */\n\n\nfunction setClass(element, className, isAdd) {\n  /** @type {?} */\n  var classList = element.nativeElement.classList;\n  isAdd ? classList.add(className) : classList.remove(className);\n}\n/**\n * Helper that takes a query list of lines and sets the correct class on the host.\n * \\@docs-private\n * @deprecated Use `setLines` instead.\n * \\@breaking-change 8.0.0\n */\n\n\nvar MatLineSetter =\n/**\n * @param {?} lines\n * @param {?} element\n */\nfunction MatLineSetter(lines, element) {\n  _classCallCheck(this, MatLineSetter);\n\n  setLines(lines, element);\n};\n\nvar MatLineModule = /*@__PURE__*/function () {\n  var MatLineModule = function MatLineModule() {\n    _classCallCheck(this, MatLineModule);\n  };\n\n  MatLineModule.ɵfac = function MatLineModule_Factory(t) {\n    return new (t || MatLineModule)();\n  };\n\n  MatLineModule.ɵmod =\n  /*@__PURE__*/\n\n  /*@__PURE__*/\n  ɵngcc0.ɵɵdefineNgModule({\n    type: MatLineModule\n  });\n  MatLineModule.ɵinj =\n  /*@__PURE__*/\n\n  /*@__PURE__*/\n  ɵngcc0.ɵɵdefineInjector({\n    imports: [[MatCommonModule], MatCommonModule]\n  });\n  return MatLineModule;\n}();\n/*@__PURE__*/\n\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatLineModule, {\n    declarations: [MatLine],\n    imports: [MatCommonModule],\n    exports: [MatLine, MatCommonModule]\n  });\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/** @enum {number} */\n\n\nvar RippleState = {\n  FADING_IN: 0,\n  VISIBLE: 1,\n  FADING_OUT: 2,\n  HIDDEN: 3\n};\nRippleState[RippleState.FADING_IN] = 'FADING_IN';\nRippleState[RippleState.VISIBLE] = 'VISIBLE';\nRippleState[RippleState.FADING_OUT] = 'FADING_OUT';\nRippleState[RippleState.HIDDEN] = 'HIDDEN';\n/**\n * Reference to a previously launched ripple element.\n */\n\nvar RippleRef = /*#__PURE__*/function () {\n  /**\n   * @param {?} _renderer\n   * @param {?} element\n   * @param {?} config\n   */\n  function RippleRef(_renderer, element, config) {\n    _classCallCheck(this, RippleRef);\n\n    this._renderer = _renderer;\n    this.element = element;\n    this.config = config;\n    /**\n     * Current state of the ripple.\n     */\n\n    this.state = RippleState.HIDDEN;\n  }\n  /**\n   * Fades out the ripple element.\n   * @return {?}\n   */\n\n\n  _createClass(RippleRef, [{\n    key: \"fadeOut\",\n    value: function fadeOut() {\n      this._renderer.fadeOutRipple(this);\n    }\n  }]);\n\n  return RippleRef;\n}();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/** *\n * Default ripple animation configuration for ripples without an explicit\n * animation config specified.\n  @type {?} */\n\n\nvar defaultRippleAnimationConfig = {\n  enterDuration: 450,\n  exitDuration: 400\n};\n/** *\n * Timeout for ignoring mouse events. Mouse events will be temporary ignored after touch\n * events to avoid synthetic mouse events.\n  @type {?} */\n\nvar ignoreMouseEventsTimeout = 800;\n/** *\n * Options that apply to all the event listeners that are bound by the ripple renderer.\n  @type {?} */\n\nvar passiveEventOptions = /*@__PURE__*/normalizePassiveListenerOptions({\n  passive: true\n});\n/**\n * Helper service that performs DOM manipulations. Not intended to be used outside this module.\n * The constructor takes a reference to the ripple directive's host element and a map of DOM\n * event handlers to be installed on the element that triggers ripple animations.\n * This will eventually become a custom renderer once Angular support exists.\n * \\@docs-private\n */\n\nvar RippleRenderer = /*#__PURE__*/function () {\n  /**\n   * @param {?} _target\n   * @param {?} _ngZone\n   * @param {?} elementRef\n   * @param {?} platform\n   */\n  function RippleRenderer(_target, _ngZone, elementRef, platform) {\n    var _this12 = this;\n\n    _classCallCheck(this, RippleRenderer);\n\n    this._target = _target;\n    this._ngZone = _ngZone;\n    /**\n     * Whether the pointer is currently down or not.\n     */\n\n    this._isPointerDown = false;\n    /**\n     * Events to be registered on the trigger element.\n     */\n\n    this._triggerEvents = new Map();\n    /**\n     * Set of currently active ripple references.\n     */\n\n    this._activeRipples = new Set();\n    /**\n     * Function being called whenever the trigger is being pressed using mouse.\n     */\n\n    this.onMousedown = function (event) {\n      /** @type {?} */\n      var isFakeMousedown = isFakeMousedownFromScreenReader(event);\n      /** @type {?} */\n\n      var isSyntheticEvent = _this12._lastTouchStartEvent && Date.now() < _this12._lastTouchStartEvent + ignoreMouseEventsTimeout;\n\n      if (!_this12._target.rippleDisabled && !isFakeMousedown && !isSyntheticEvent) {\n        _this12._isPointerDown = true;\n\n        _this12.fadeInRipple(event.clientX, event.clientY, _this12._target.rippleConfig);\n      }\n    };\n    /**\n     * Function being called whenever the trigger is being pressed using touch.\n     */\n\n\n    this.onTouchStart = function (event) {\n      if (!_this12._target.rippleDisabled) {\n        // Some browsers fire mouse events after a `touchstart` event. Those synthetic mouse\n        // events will launch a second ripple if we don't ignore mouse events for a specific\n        // time after a touchstart event.\n        _this12._lastTouchStartEvent = Date.now();\n        _this12._isPointerDown = true;\n        /** @type {?} */\n\n        var touches = event.changedTouches;\n\n        for (var i = 0; i < touches.length; i++) {\n          _this12.fadeInRipple(touches[i].clientX, touches[i].clientY, _this12._target.rippleConfig);\n        }\n      }\n    };\n    /**\n     * Function being called whenever the trigger is being released.\n     */\n\n\n    this.onPointerUp = function () {\n      if (!_this12._isPointerDown) {\n        return;\n      }\n\n      _this12._isPointerDown = false; // Fade-out all ripples that are visible and not persistent.\n\n      _this12._activeRipples.forEach(function (ripple) {\n        /** @type {?} */\n        var isVisible = ripple.state === RippleState.VISIBLE || ripple.config.terminateOnPointerUp && ripple.state === RippleState.FADING_IN;\n\n        if (!ripple.config.persistent && isVisible) {\n          ripple.fadeOut();\n        }\n      });\n    }; // Only do anything if we're on the browser.\n\n\n    if (platform.isBrowser) {\n      this._containerElement = elementRef.nativeElement; // Specify events which need to be registered on the trigger.\n\n      this._triggerEvents.set('mousedown', this.onMousedown).set('mouseup', this.onPointerUp).set('mouseleave', this.onPointerUp).set('touchstart', this.onTouchStart).set('touchend', this.onPointerUp).set('touchcancel', this.onPointerUp);\n    }\n  }\n  /**\n   * Fades in a ripple at the given coordinates.\n   * @param {?} x Coordinate within the element, along the X axis at which to start the ripple.\n   * @param {?} y Coordinate within the element, along the Y axis at which to start the ripple.\n   * @param {?=} config Extra ripple options.\n   * @return {?}\n   */\n\n\n  _createClass(RippleRenderer, [{\n    key: \"fadeInRipple\",\n    value: function fadeInRipple(x, y) {\n      var _this13 = this;\n\n      var config = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n      /** @type {?} */\n      var containerRect = this._containerRect = this._containerRect || this._containerElement.getBoundingClientRect();\n      /** @type {?} */\n\n\n      var animationConfig = Object.assign({}, defaultRippleAnimationConfig, config.animation);\n\n      if (config.centered) {\n        x = containerRect.left + containerRect.width / 2;\n        y = containerRect.top + containerRect.height / 2;\n      }\n      /** @type {?} */\n\n\n      var radius = config.radius || distanceToFurthestCorner(x, y, containerRect);\n      /** @type {?} */\n\n      var offsetX = x - containerRect.left;\n      /** @type {?} */\n\n      var offsetY = y - containerRect.top;\n      /** @type {?} */\n\n      var duration = animationConfig.enterDuration;\n      /** @type {?} */\n\n      var ripple = document.createElement('div');\n      ripple.classList.add('mat-ripple-element');\n      ripple.style.left = \"\".concat(offsetX - radius, \"px\");\n      ripple.style.top = \"\".concat(offsetY - radius, \"px\");\n      ripple.style.height = \"\".concat(radius * 2, \"px\");\n      ripple.style.width = \"\".concat(radius * 2, \"px\"); // If the color is not set, the default CSS color will be used.\n\n      ripple.style.backgroundColor = config.color || null;\n      ripple.style.transitionDuration = \"\".concat(duration, \"ms\");\n\n      this._containerElement.appendChild(ripple); // By default the browser does not recalculate the styles of dynamically created\n      // ripple elements. This is critical because then the `scale` would not animate properly.\n\n\n      enforceStyleRecalculation(ripple);\n      ripple.style.transform = 'scale(1)';\n      /** @type {?} */\n\n      var rippleRef = new RippleRef(this, ripple, config);\n      rippleRef.state = RippleState.FADING_IN; // Add the ripple reference to the list of all active ripples.\n\n      this._activeRipples.add(rippleRef);\n\n      if (!config.persistent) {\n        this._mostRecentTransientRipple = rippleRef;\n      } // Wait for the ripple element to be completely faded in.\n      // Once it's faded in, the ripple can be hidden immediately if the mouse is released.\n\n\n      this.runTimeoutOutsideZone(function () {\n        /** @type {?} */\n        var isMostRecentTransientRipple = rippleRef === _this13._mostRecentTransientRipple;\n        rippleRef.state = RippleState.VISIBLE; // When the timer runs out while the user has kept their pointer down, we want to\n        // keep only the persistent ripples and the latest transient ripple. We do this,\n        // because we don't want stacked transient ripples to appear after their enter\n        // animation has finished.\n\n        if (!config.persistent && (!isMostRecentTransientRipple || !_this13._isPointerDown)) {\n          rippleRef.fadeOut();\n        }\n      }, duration);\n      return rippleRef;\n    }\n    /**\n     * Fades out a ripple reference.\n     * @param {?} rippleRef\n     * @return {?}\n     */\n\n  }, {\n    key: \"fadeOutRipple\",\n    value: function fadeOutRipple(rippleRef) {\n      /** @type {?} */\n      var wasActive = this._activeRipples.delete(rippleRef);\n\n      if (rippleRef === this._mostRecentTransientRipple) {\n        this._mostRecentTransientRipple = null;\n      } // Clear out the cached bounding rect if we have no more ripples.\n\n\n      if (!this._activeRipples.size) {\n        this._containerRect = null;\n      } // For ripples that are not active anymore, don't re-un the fade-out animation.\n\n\n      if (!wasActive) {\n        return;\n      }\n      /** @type {?} */\n\n\n      var rippleEl = rippleRef.element;\n      /** @type {?} */\n\n      var animationConfig = Object.assign({}, defaultRippleAnimationConfig, rippleRef.config.animation);\n      rippleEl.style.transitionDuration = \"\".concat(animationConfig.exitDuration, \"ms\");\n      rippleEl.style.opacity = '0';\n      rippleRef.state = RippleState.FADING_OUT; // Once the ripple faded out, the ripple can be safely removed from the DOM.\n\n      this.runTimeoutOutsideZone(function () {\n        rippleRef.state = RippleState.HIDDEN;\n        /** @type {?} */\n\n        rippleEl.parentNode.removeChild(rippleEl);\n      }, animationConfig.exitDuration);\n    }\n    /**\n     * Fades out all currently active ripples.\n     * @return {?}\n     */\n\n  }, {\n    key: \"fadeOutAll\",\n    value: function fadeOutAll() {\n      this._activeRipples.forEach(function (ripple) {\n        return ripple.fadeOut();\n      });\n    }\n    /**\n     * Sets up the trigger event listeners\n     * @param {?} element\n     * @return {?}\n     */\n\n  }, {\n    key: \"setupTriggerEvents\",\n    value: function setupTriggerEvents(element) {\n      var _this14 = this;\n\n      if (!element || element === this._triggerElement) {\n        return;\n      } // Remove all previously registered event listeners from the trigger element.\n\n\n      this._removeTriggerEvents();\n\n      this._ngZone.runOutsideAngular(function () {\n        _this14._triggerEvents.forEach(function (fn, type) {\n          element.addEventListener(type, fn, passiveEventOptions);\n        });\n      });\n\n      this._triggerElement = element;\n    }\n    /**\n     * Runs a timeout outside of the Angular zone to avoid triggering the change detection.\n     * @param {?} fn\n     * @param {?=} delay\n     * @return {?}\n     */\n\n  }, {\n    key: \"runTimeoutOutsideZone\",\n    value: function runTimeoutOutsideZone(fn) {\n      var delay = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n\n      this._ngZone.runOutsideAngular(function () {\n        return setTimeout(fn, delay);\n      });\n    }\n    /**\n     * Removes previously registered event listeners from the trigger element.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_removeTriggerEvents\",\n    value: function _removeTriggerEvents() {\n      var _this15 = this;\n\n      if (this._triggerElement) {\n        this._triggerEvents.forEach(function (fn, type) {\n          /** @type {?} */\n          _this15._triggerElement.removeEventListener(type, fn, passiveEventOptions);\n        });\n      }\n    }\n  }]);\n\n  return RippleRenderer;\n}();\n/**\n * Enforces a style recalculation of a DOM element by computing its styles.\n * @param {?} element\n * @return {?}\n */\n\n\nfunction enforceStyleRecalculation(element) {\n  // Enforce a style recalculation by calling `getComputedStyle` and accessing any property.\n  // Calling `getPropertyValue` is important to let optimizers know that this is not a noop.\n  // See: https://gist.github.com/paulirish/5d52fb081b3570c81e3a\n  window.getComputedStyle(element).getPropertyValue('opacity');\n}\n/**\n * Returns the distance from the point (x, y) to the furthest corner of a rectangle.\n * @param {?} x\n * @param {?} y\n * @param {?} rect\n * @return {?}\n */\n\n\nfunction distanceToFurthestCorner(x, y, rect) {\n  /** @type {?} */\n  var distX = Math.max(Math.abs(x - rect.left), Math.abs(x - rect.right));\n  /** @type {?} */\n\n  var distY = Math.max(Math.abs(y - rect.top), Math.abs(y - rect.bottom));\n  return Math.sqrt(distX * distX + distY * distY);\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/** *\n * Injection token that can be used to specify the global ripple options.\n  @type {?} */\n\n\nvar MAT_RIPPLE_GLOBAL_OPTIONS = /*@__PURE__*/new InjectionToken('mat-ripple-global-options');\n\nvar MatRipple = /*@__PURE__*/function () {\n  var MatRipple = /*#__PURE__*/function () {\n    /**\n     * @param {?} _elementRef\n     * @param {?} ngZone\n     * @param {?} platform\n     * @param {?} globalOptions\n     * @param {?=} animationMode\n     */\n    function MatRipple(_elementRef, ngZone, platform, globalOptions, animationMode) {\n      _classCallCheck(this, MatRipple);\n\n      this._elementRef = _elementRef;\n      /**\n       * If set, the radius in pixels of foreground ripples when fully expanded. If unset, the radius\n       * will be the distance from the center of the ripple to the furthest corner of the host element's\n       * bounding rectangle.\n       */\n\n      this.radius = 0;\n      this._disabled = false;\n      /**\n       * Whether ripple directive is initialized and the input bindings are set.\n       */\n\n      this._isInitialized = false;\n      this._globalOptions = globalOptions || {};\n      this._rippleRenderer = new RippleRenderer(this, ngZone, _elementRef, platform);\n\n      if (animationMode === 'NoopAnimations') {\n        this._globalOptions.animation = {\n          enterDuration: 0,\n          exitDuration: 0\n        };\n      }\n    }\n    /**\n     * Whether click events will not trigger the ripple. Ripples can be still launched manually\n     * by using the `launch()` method.\n     * @return {?}\n     */\n\n\n    _createClass(MatRipple, [{\n      key: \"disabled\",\n      get: function get() {\n        return this._disabled;\n      }\n      /**\n       * @param {?} value\n       * @return {?}\n       */\n      ,\n      set: function set(value) {\n        this._disabled = value;\n\n        this._setupTriggerEventsIfEnabled();\n      }\n      /**\n       * The element that triggers the ripple when click events are received.\n       * Defaults to the directive's host element.\n       * @return {?}\n       */\n\n    }, {\n      key: \"trigger\",\n      get: function get() {\n        return this._trigger || this._elementRef.nativeElement;\n      }\n      /**\n       * @param {?} trigger\n       * @return {?}\n       */\n      ,\n      set: function set(trigger) {\n        this._trigger = trigger;\n\n        this._setupTriggerEventsIfEnabled();\n      }\n      /**\n       * @return {?}\n       */\n\n    }, {\n      key: \"ngOnInit\",\n      value: function ngOnInit() {\n        this._isInitialized = true;\n\n        this._setupTriggerEventsIfEnabled();\n      }\n      /**\n       * @return {?}\n       */\n\n    }, {\n      key: \"ngOnDestroy\",\n      value: function ngOnDestroy() {\n        this._rippleRenderer._removeTriggerEvents();\n      }\n      /**\n       * Fades out all currently showing ripple elements.\n       * @return {?}\n       */\n\n    }, {\n      key: \"fadeOutAll\",\n      value: function fadeOutAll() {\n        this._rippleRenderer.fadeOutAll();\n      }\n      /**\n       * Ripple configuration from the directive's input values.\n       * \\@docs-private Implemented as part of RippleTarget\n       * @return {?}\n       */\n\n    }, {\n      key: \"rippleConfig\",\n      get: function get() {\n        return {\n          centered: this.centered,\n          radius: this.radius,\n          color: this.color,\n          animation: Object.assign({}, this._globalOptions.animation, this.animation),\n          terminateOnPointerUp: this._globalOptions.terminateOnPointerUp\n        };\n      }\n      /**\n       * Whether ripples on pointer-down are disabled or not.\n       * \\@docs-private Implemented as part of RippleTarget\n       * @return {?}\n       */\n\n    }, {\n      key: \"rippleDisabled\",\n      get: function get() {\n        return this.disabled || !!this._globalOptions.disabled;\n      }\n      /**\n       * Sets up the the trigger event listeners if ripples are enabled.\n       * @return {?}\n       */\n\n    }, {\n      key: \"_setupTriggerEventsIfEnabled\",\n      value: function _setupTriggerEventsIfEnabled() {\n        if (!this.disabled && this._isInitialized) {\n          this._rippleRenderer.setupTriggerEvents(this.trigger);\n        }\n      }\n      /**\n       * Launches a manual ripple at the specified coordinated or just by the ripple config.\n       * @param {?} configOrX\n       * @param {?=} y\n       * @param {?=} config\n       * @return {?}\n       */\n\n    }, {\n      key: \"launch\",\n      value: function launch(configOrX) {\n        var y = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n        var config = arguments.length > 2 ? arguments[2] : undefined;\n\n        if (typeof configOrX === 'number') {\n          return this._rippleRenderer.fadeInRipple(configOrX, y, Object.assign({}, this.rippleConfig, config));\n        } else {\n          return this._rippleRenderer.fadeInRipple(0, 0, Object.assign({}, this.rippleConfig, configOrX));\n        }\n      }\n    }]);\n\n    return MatRipple;\n  }();\n\n  MatRipple.ɵfac = function MatRipple_Factory(t) {\n    return new (t || MatRipple)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.Platform), ɵngcc0.ɵɵdirectiveInject(MAT_RIPPLE_GLOBAL_OPTIONS, 8), ɵngcc0.ɵɵdirectiveInject(ANIMATION_MODULE_TYPE, 8));\n  };\n\n  MatRipple.ɵdir =\n  /*@__PURE__*/\n\n  /*@__PURE__*/\n  ɵngcc0.ɵɵdefineDirective({\n    type: MatRipple,\n    selectors: [[\"\", \"mat-ripple\", \"\"], [\"\", \"matRipple\", \"\"]],\n    hostAttrs: [1, \"mat-ripple\"],\n    hostVars: 2,\n    hostBindings: function MatRipple_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"mat-ripple-unbounded\", ctx.unbounded);\n      }\n    },\n    inputs: {\n      radius: [\"matRippleRadius\", \"radius\"],\n      disabled: [\"matRippleDisabled\", \"disabled\"],\n      trigger: [\"matRippleTrigger\", \"trigger\"],\n      color: [\"matRippleColor\", \"color\"],\n      unbounded: [\"matRippleUnbounded\", \"unbounded\"],\n      centered: [\"matRippleCentered\", \"centered\"],\n      animation: [\"matRippleAnimation\", \"animation\"]\n    },\n    exportAs: [\"matRipple\"]\n  });\n  return MatRipple;\n}();\n\nvar MatRippleModule = /*@__PURE__*/function () {\n  var MatRippleModule = function MatRippleModule() {\n    _classCallCheck(this, MatRippleModule);\n  };\n\n  MatRippleModule.ɵfac = function MatRippleModule_Factory(t) {\n    return new (t || MatRippleModule)();\n  };\n\n  MatRippleModule.ɵmod =\n  /*@__PURE__*/\n\n  /*@__PURE__*/\n  ɵngcc0.ɵɵdefineNgModule({\n    type: MatRippleModule\n  });\n  MatRippleModule.ɵinj =\n  /*@__PURE__*/\n\n  /*@__PURE__*/\n  ɵngcc0.ɵɵdefineInjector({\n    imports: [[MatCommonModule, PlatformModule], MatCommonModule]\n  });\n  return MatRippleModule;\n}();\n/*@__PURE__*/\n\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatRippleModule, {\n    declarations: function declarations() {\n      return [MatRipple];\n    },\n    imports: function imports() {\n      return [MatCommonModule, PlatformModule];\n    },\n    exports: function exports() {\n      return [MatRipple, MatCommonModule];\n    }\n  });\n})();\n\nvar MatPseudoCheckbox = /*@__PURE__*/function () {\n  var MatPseudoCheckbox =\n  /**\n   * @param {?=} _animationMode\n   */\n  function MatPseudoCheckbox(_animationMode) {\n    _classCallCheck(this, MatPseudoCheckbox);\n\n    this._animationMode = _animationMode;\n    /**\n     * Display state of the checkbox.\n     */\n\n    this.state = 'unchecked';\n    /**\n     * Whether the checkbox is disabled.\n     */\n\n    this.disabled = false;\n  };\n\n  MatPseudoCheckbox.ɵfac = function MatPseudoCheckbox_Factory(t) {\n    return new (t || MatPseudoCheckbox)(ɵngcc0.ɵɵdirectiveInject(ANIMATION_MODULE_TYPE, 8));\n  };\n\n  MatPseudoCheckbox.ɵcmp =\n  /*@__PURE__*/\n\n  /*@__PURE__*/\n  ɵngcc0.ɵɵdefineComponent({\n    type: MatPseudoCheckbox,\n    selectors: [[\"mat-pseudo-checkbox\"]],\n    hostAttrs: [1, \"mat-pseudo-checkbox\"],\n    hostVars: 8,\n    hostBindings: function MatPseudoCheckbox_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"mat-pseudo-checkbox-indeterminate\", ctx.state === \"indeterminate\")(\"mat-pseudo-checkbox-checked\", ctx.state === \"checked\")(\"mat-pseudo-checkbox-disabled\", ctx.disabled)(\"_mat-animation-noopable\", ctx._animationMode === \"NoopAnimations\");\n      }\n    },\n    inputs: {\n      state: \"state\",\n      disabled: \"disabled\"\n    },\n    decls: 0,\n    vars: 0,\n    template: function MatPseudoCheckbox_Template(rf, ctx) {},\n    styles: [\".mat-pseudo-checkbox{width:16px;height:16px;border:2px solid;border-radius:2px;cursor:pointer;display:inline-block;vertical-align:middle;box-sizing:border-box;position:relative;flex-shrink:0;transition:border-color 90ms cubic-bezier(0,0,.2,.1),background-color 90ms cubic-bezier(0,0,.2,.1)}.mat-pseudo-checkbox::after{position:absolute;opacity:0;content:'';border-bottom:2px solid currentColor;transition:opacity 90ms cubic-bezier(0,0,.2,.1)}.mat-pseudo-checkbox.mat-pseudo-checkbox-checked,.mat-pseudo-checkbox.mat-pseudo-checkbox-indeterminate{border-color:transparent}._mat-animation-noopable.mat-pseudo-checkbox{transition:none;animation:none}._mat-animation-noopable.mat-pseudo-checkbox::after{transition:none}.mat-pseudo-checkbox-disabled{cursor:default}.mat-pseudo-checkbox-disabled.mat-pseudo-checkbox-indeterminate{opacity:.5}.mat-pseudo-checkbox-indeterminate::after{top:5px;left:1px;width:10px;opacity:1;border-radius:2px}.mat-pseudo-checkbox-checked::after{top:2.4px;left:1px;width:8px;height:3px;border-left:2px solid currentColor;transform:rotate(-45deg);opacity:1}\"],\n    encapsulation: 2,\n    changeDetection: 0\n  });\n  return MatPseudoCheckbox;\n}();\n\nvar MatPseudoCheckboxModule = /*@__PURE__*/function () {\n  var MatPseudoCheckboxModule = function MatPseudoCheckboxModule() {\n    _classCallCheck(this, MatPseudoCheckboxModule);\n  };\n\n  MatPseudoCheckboxModule.ɵfac = function MatPseudoCheckboxModule_Factory(t) {\n    return new (t || MatPseudoCheckboxModule)();\n  };\n\n  MatPseudoCheckboxModule.ɵmod =\n  /*@__PURE__*/\n\n  /*@__PURE__*/\n  ɵngcc0.ɵɵdefineNgModule({\n    type: MatPseudoCheckboxModule\n  });\n  MatPseudoCheckboxModule.ɵinj =\n  /*@__PURE__*/\n\n  /*@__PURE__*/\n  ɵngcc0.ɵɵdefineInjector({});\n  return MatPseudoCheckboxModule;\n}();\n/*@__PURE__*/\n\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatPseudoCheckboxModule, {\n    declarations: [MatPseudoCheckbox],\n    exports: [MatPseudoCheckbox]\n  });\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * \\@docs-private\n */\n\n\nvar MatOptgroupBase = function MatOptgroupBase() {\n  _classCallCheck(this, MatOptgroupBase);\n};\n/** @type {?} */\n\n\nvar _MatOptgroupMixinBase = /*@__PURE__*/mixinDisabled(MatOptgroupBase);\n/** @type {?} */\n\n\nvar _uniqueOptgroupIdCounter = 0;\n\nvar MatOptgroup = /*@__PURE__*/function () {\n  var MatOptgroup = /*#__PURE__*/function (_MatOptgroupMixinBase2) {\n    _inherits(MatOptgroup, _MatOptgroupMixinBase2);\n\n    var _super9 = _createSuper(MatOptgroup);\n\n    function MatOptgroup() {\n      var _this16;\n\n      _classCallCheck(this, MatOptgroup);\n\n      _this16 = _super9.apply(this, arguments);\n      /**\n       * Unique id for the underlying label.\n       */\n\n      _this16._labelId = \"mat-optgroup-label-\".concat(_uniqueOptgroupIdCounter++);\n      return _this16;\n    }\n\n    return MatOptgroup;\n  }(_MatOptgroupMixinBase);\n\n  MatOptgroup.ɵfac =\n  /*@__PURE__*/\n\n  /*@__PURE__*/\n  function () {\n    var ɵMatOptgroup_BaseFactory;\n    return function MatOptgroup_Factory(t) {\n      return (ɵMatOptgroup_BaseFactory || (ɵMatOptgroup_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(MatOptgroup)))(t || MatOptgroup);\n    };\n  }();\n\n  MatOptgroup.ɵcmp =\n  /*@__PURE__*/\n\n  /*@__PURE__*/\n  ɵngcc0.ɵɵdefineComponent({\n    type: MatOptgroup,\n    selectors: [[\"mat-optgroup\"]],\n    hostAttrs: [\"role\", \"group\", 1, \"mat-optgroup\"],\n    hostVars: 4,\n    hostBindings: function MatOptgroup_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"aria-disabled\", ctx.disabled.toString())(\"aria-labelledby\", ctx._labelId);\n        ɵngcc0.ɵɵclassProp(\"mat-optgroup-disabled\", ctx.disabled);\n      }\n    },\n    inputs: {\n      disabled: \"disabled\",\n      label: \"label\"\n    },\n    exportAs: [\"matOptgroup\"],\n    features: [ɵngcc0.ɵɵInheritDefinitionFeature],\n    ngContentSelectors: _c1,\n    decls: 4,\n    vars: 2,\n    consts: [[1, \"mat-optgroup-label\", 3, \"id\"]],\n    template: function MatOptgroup_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef(_c0);\n        ɵngcc0.ɵɵelementStart(0, \"label\", 0);\n        ɵngcc0.ɵɵtext(1);\n        ɵngcc0.ɵɵprojection(2);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵprojection(3, 1);\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵproperty(\"id\", ctx._labelId);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵtextInterpolate(ctx.label);\n      }\n    },\n    styles: [\".mat-optgroup-label{white-space:nowrap;overflow:hidden;text-overflow:ellipsis;display:block;line-height:48px;height:48px;padding:0 16px;text-align:left;text-decoration:none;max-width:100%;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:default}.mat-optgroup-label[disabled]{cursor:default}[dir=rtl] .mat-optgroup-label{text-align:right}.mat-optgroup-label .mat-icon{margin-right:16px;vertical-align:middle}.mat-optgroup-label .mat-icon svg{vertical-align:top}[dir=rtl] .mat-optgroup-label .mat-icon{margin-left:16px;margin-right:0}\"],\n    encapsulation: 2,\n    changeDetection: 0\n  });\n  return MatOptgroup;\n}();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/** *\n * Option IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n  @type {?} */\n\n\nvar _uniqueIdCounter = 0;\n/**\n * Event object emitted by MatOption when selected or deselected.\n */\n\nvar MatOptionSelectionChange =\n/**\n * @param {?} source\n * @param {?=} isUserInput\n */\nfunction MatOptionSelectionChange(source) {\n  var isUserInput = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n  _classCallCheck(this, MatOptionSelectionChange);\n\n  this.source = source;\n  this.isUserInput = isUserInput;\n};\n/** *\n * Injection token used to provide the parent component to options.\n  @type {?} */\n\n\nvar MAT_OPTION_PARENT_COMPONENT = /*@__PURE__*/new InjectionToken('MAT_OPTION_PARENT_COMPONENT');\n\nvar MatOption = /*@__PURE__*/function () {\n  var MatOption = /*#__PURE__*/function () {\n    /**\n     * @param {?} _element\n     * @param {?} _changeDetectorRef\n     * @param {?} _parent\n     * @param {?} group\n     */\n    function MatOption(_element, _changeDetectorRef, _parent, group) {\n      _classCallCheck(this, MatOption);\n\n      this._element = _element;\n      this._changeDetectorRef = _changeDetectorRef;\n      this._parent = _parent;\n      this.group = group;\n      this._selected = false;\n      this._active = false;\n      this._disabled = false;\n      this._mostRecentViewValue = '';\n      /**\n       * The unique ID of the option.\n       */\n\n      this.id = \"mat-option-\".concat(_uniqueIdCounter++);\n      /**\n       * Event emitted when the option is selected or deselected.\n       */\n\n      this.onSelectionChange = new EventEmitter();\n      /**\n       * Emits when the state of the option changes and any parents have to be notified.\n       */\n\n      this._stateChanges = new Subject();\n    }\n    /**\n     * Whether the wrapping component is in multiple selection mode.\n     * @return {?}\n     */\n\n\n    _createClass(MatOption, [{\n      key: \"multiple\",\n      get: function get() {\n        return this._parent && this._parent.multiple;\n      }\n      /**\n       * Whether or not the option is currently selected.\n       * @return {?}\n       */\n\n    }, {\n      key: \"selected\",\n      get: function get() {\n        return this._selected;\n      }\n      /**\n       * Whether the option is disabled.\n       * @return {?}\n       */\n\n    }, {\n      key: \"disabled\",\n      get: function get() {\n        return this.group && this.group.disabled || this._disabled;\n      }\n      /**\n       * @param {?} value\n       * @return {?}\n       */\n      ,\n      set: function set(value) {\n        this._disabled = coerceBooleanProperty(value);\n      }\n      /**\n       * Whether ripples for the option are disabled.\n       * @return {?}\n       */\n\n    }, {\n      key: \"disableRipple\",\n      get: function get() {\n        return this._parent && this._parent.disableRipple;\n      }\n      /**\n       * Whether or not the option is currently active and ready to be selected.\n       * An active option displays styles as if it is focused, but the\n       * focus is actually retained somewhere else. This comes in handy\n       * for components like autocomplete where focus must remain on the input.\n       * @return {?}\n       */\n\n    }, {\n      key: \"active\",\n      get: function get() {\n        return this._active;\n      }\n      /**\n       * The displayed value of the option. It is necessary to show the selected option in the\n       * select's trigger.\n       * @return {?}\n       */\n\n    }, {\n      key: \"viewValue\",\n      get: function get() {\n        // TODO(kara): Add input property alternative for node envs.\n        return (this._getHostElement().textContent || '').trim();\n      }\n      /**\n       * Selects the option.\n       * @return {?}\n       */\n\n    }, {\n      key: \"select\",\n      value: function select() {\n        if (!this._selected) {\n          this._selected = true;\n\n          this._changeDetectorRef.markForCheck();\n\n          this._emitSelectionChangeEvent();\n        }\n      }\n      /**\n       * Deselects the option.\n       * @return {?}\n       */\n\n    }, {\n      key: \"deselect\",\n      value: function deselect() {\n        if (this._selected) {\n          this._selected = false;\n\n          this._changeDetectorRef.markForCheck();\n\n          this._emitSelectionChangeEvent();\n        }\n      }\n      /**\n       * Sets focus onto this option.\n       * @return {?}\n       */\n\n    }, {\n      key: \"focus\",\n      value: function focus() {\n        /** @type {?} */\n        var element = this._getHostElement();\n\n        if (typeof element.focus === 'function') {\n          element.focus();\n        }\n      }\n      /**\n       * This method sets display styles on the option to make it appear\n       * active. This is used by the ActiveDescendantKeyManager so key\n       * events will display the proper options as active on arrow key events.\n       * @return {?}\n       */\n\n    }, {\n      key: \"setActiveStyles\",\n      value: function setActiveStyles() {\n        if (!this._active) {\n          this._active = true;\n\n          this._changeDetectorRef.markForCheck();\n        }\n      }\n      /**\n       * This method removes display styles on the option that made it appear\n       * active. This is used by the ActiveDescendantKeyManager so key\n       * events will display the proper options as active on arrow key events.\n       * @return {?}\n       */\n\n    }, {\n      key: \"setInactiveStyles\",\n      value: function setInactiveStyles() {\n        if (this._active) {\n          this._active = false;\n\n          this._changeDetectorRef.markForCheck();\n        }\n      }\n      /**\n       * Gets the label to be used when determining whether the option should be focused.\n       * @return {?}\n       */\n\n    }, {\n      key: \"getLabel\",\n      value: function getLabel() {\n        return this.viewValue;\n      }\n      /**\n       * Ensures the option is selected when activated from the keyboard.\n       * @param {?} event\n       * @return {?}\n       */\n\n    }, {\n      key: \"_handleKeydown\",\n      value: function _handleKeydown(event) {\n        if (event.keyCode === ENTER || event.keyCode === SPACE) {\n          this._selectViaInteraction(); // Prevent the page from scrolling down and form submits.\n\n\n          event.preventDefault();\n        }\n      }\n      /**\n       * `Selects the option while indicating the selection came from the user. Used to\n       * determine if the select's view -> model callback should be invoked.`\n       * @return {?}\n       */\n\n    }, {\n      key: \"_selectViaInteraction\",\n      value: function _selectViaInteraction() {\n        if (!this.disabled) {\n          this._selected = this.multiple ? !this._selected : true;\n\n          this._changeDetectorRef.markForCheck();\n\n          this._emitSelectionChangeEvent(true);\n        }\n      }\n      /**\n       * Returns the correct tabindex for the option depending on disabled state.\n       * @return {?}\n       */\n\n    }, {\n      key: \"_getTabIndex\",\n      value: function _getTabIndex() {\n        return this.disabled ? '-1' : '0';\n      }\n      /**\n       * Gets the host DOM element.\n       * @return {?}\n       */\n\n    }, {\n      key: \"_getHostElement\",\n      value: function _getHostElement() {\n        return this._element.nativeElement;\n      }\n      /**\n       * @return {?}\n       */\n\n    }, {\n      key: \"ngAfterViewChecked\",\n      value: function ngAfterViewChecked() {\n        // Since parent components could be using the option's label to display the selected values\n        // (e.g. `mat-select`) and they don't have a way of knowing if the option's label has changed\n        // we have to check for changes in the DOM ourselves and dispatch an event. These checks are\n        // relatively cheap, however we still limit them only to selected options in order to avoid\n        // hitting the DOM too often.\n        if (this._selected) {\n          /** @type {?} */\n          var viewValue = this.viewValue;\n\n          if (viewValue !== this._mostRecentViewValue) {\n            this._mostRecentViewValue = viewValue;\n\n            this._stateChanges.next();\n          }\n        }\n      }\n      /**\n       * @return {?}\n       */\n\n    }, {\n      key: \"ngOnDestroy\",\n      value: function ngOnDestroy() {\n        this._stateChanges.complete();\n      }\n      /**\n       * Emits the selection change event.\n       * @param {?=} isUserInput\n       * @return {?}\n       */\n\n    }, {\n      key: \"_emitSelectionChangeEvent\",\n      value: function _emitSelectionChangeEvent() {\n        var isUserInput = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n        this.onSelectionChange.emit(new MatOptionSelectionChange(this, isUserInput));\n      }\n    }]);\n\n    return MatOption;\n  }();\n\n  MatOption.ɵfac = function MatOption_Factory(t) {\n    return new (t || MatOption)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(MAT_OPTION_PARENT_COMPONENT, 8), ɵngcc0.ɵɵdirectiveInject(MatOptgroup, 8));\n  };\n\n  MatOption.ɵcmp =\n  /*@__PURE__*/\n\n  /*@__PURE__*/\n  ɵngcc0.ɵɵdefineComponent({\n    type: MatOption,\n    selectors: [[\"mat-option\"]],\n    hostAttrs: [\"role\", \"option\", 1, \"mat-option\"],\n    hostVars: 12,\n    hostBindings: function MatOption_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"click\", function MatOption_click_HostBindingHandler() {\n          return ctx._selectViaInteraction();\n        })(\"keydown\", function MatOption_keydown_HostBindingHandler($event) {\n          return ctx._handleKeydown($event);\n        });\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵhostProperty(\"id\", ctx.id);\n        ɵngcc0.ɵɵattribute(\"tabindex\", ctx._getTabIndex())(\"aria-selected\", ctx.selected.toString())(\"aria-disabled\", ctx.disabled.toString());\n        ɵngcc0.ɵɵclassProp(\"mat-selected\", ctx.selected)(\"mat-option-multiple\", ctx.multiple)(\"mat-active\", ctx.active)(\"mat-option-disabled\", ctx.disabled);\n      }\n    },\n    inputs: {\n      id: \"id\",\n      disabled: \"disabled\",\n      value: \"value\"\n    },\n    outputs: {\n      onSelectionChange: \"onSelectionChange\"\n    },\n    exportAs: [\"matOption\"],\n    ngContentSelectors: _c2,\n    decls: 4,\n    vars: 3,\n    consts: [[\"class\", \"mat-option-pseudo-checkbox\", 3, \"state\", \"disabled\", 4, \"ngIf\"], [1, \"mat-option-text\"], [\"mat-ripple\", \"\", 1, \"mat-option-ripple\", 3, \"matRippleTrigger\", \"matRippleDisabled\"], [1, \"mat-option-pseudo-checkbox\", 3, \"state\", \"disabled\"]],\n    template: function MatOption_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵtemplate(0, MatOption_mat_pseudo_checkbox_0_Template, 1, 2, \"mat-pseudo-checkbox\", 0);\n        ɵngcc0.ɵɵelementStart(1, \"span\", 1);\n        ɵngcc0.ɵɵprojection(2);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelement(3, \"div\", 2);\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.multiple);\n        ɵngcc0.ɵɵadvance(3);\n        ɵngcc0.ɵɵproperty(\"matRippleTrigger\", ctx._getHostElement())(\"matRippleDisabled\", ctx.disabled || ctx.disableRipple);\n      }\n    },\n    directives: [ɵngcc2.NgIf, MatRipple, MatPseudoCheckbox],\n    styles: [\".mat-option{white-space:nowrap;overflow:hidden;text-overflow:ellipsis;display:block;line-height:48px;height:48px;padding:0 16px;text-align:left;text-decoration:none;max-width:100%;position:relative;cursor:pointer;outline:0;display:flex;flex-direction:row;max-width:100%;box-sizing:border-box;align-items:center;-webkit-tap-highlight-color:transparent}.mat-option[disabled]{cursor:default}[dir=rtl] .mat-option{text-align:right}.mat-option .mat-icon{margin-right:16px;vertical-align:middle}.mat-option .mat-icon svg{vertical-align:top}[dir=rtl] .mat-option .mat-icon{margin-left:16px;margin-right:0}.mat-option[aria-disabled=true]{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:default}.mat-optgroup .mat-option:not(.mat-option-multiple){padding-left:32px}[dir=rtl] .mat-optgroup .mat-option:not(.mat-option-multiple){padding-left:16px;padding-right:32px}@media screen and (-ms-high-contrast:active){.mat-option{margin:0 1px}.mat-option.mat-active{border:solid 1px currentColor;margin:0}}.mat-option-text{display:inline-block;flex-grow:1;overflow:hidden;text-overflow:ellipsis}.mat-option .mat-option-ripple{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none}@media screen and (-ms-high-contrast:active){.mat-option .mat-option-ripple{opacity:.5}}.mat-option-pseudo-checkbox{margin-right:8px}[dir=rtl] .mat-option-pseudo-checkbox{margin-left:8px;margin-right:0}\"],\n    encapsulation: 2,\n    changeDetection: 0\n  });\n  return MatOption;\n}();\n/**\n * Counts the amount of option group labels that precede the specified option.\n * \\@docs-private\n * @param {?} optionIndex Index of the option at which to start counting.\n * @param {?} options Flat list of all of the options.\n * @param {?} optionGroups Flat list of all of the option groups.\n * @return {?}\n */\n\n\nfunction _countGroupLabelsBeforeOption(optionIndex, options, optionGroups) {\n  if (optionGroups.length) {\n    /** @type {?} */\n    var optionsArray = options.toArray();\n    /** @type {?} */\n\n    var groups = optionGroups.toArray();\n    /** @type {?} */\n\n    var groupCounter = 0;\n\n    for (var i = 0; i < optionIndex + 1; i++) {\n      if (optionsArray[i].group && optionsArray[i].group === groups[groupCounter]) {\n        groupCounter++;\n      }\n    }\n\n    return groupCounter;\n  }\n\n  return 0;\n}\n/**\n * Determines the position to which to scroll a panel in order for an option to be into view.\n * \\@docs-private\n * @param {?} optionIndex Index of the option to be scrolled into the view.\n * @param {?} optionHeight Height of the options.\n * @param {?} currentScrollPosition Current scroll position of the panel.\n * @param {?} panelHeight Height of the panel.\n * @return {?}\n */\n\n\nfunction _getOptionScrollPosition(optionIndex, optionHeight, currentScrollPosition, panelHeight) {\n  /** @type {?} */\n  var optionOffset = optionIndex * optionHeight;\n\n  if (optionOffset < currentScrollPosition) {\n    return optionOffset;\n  }\n\n  if (optionOffset + optionHeight > currentScrollPosition + panelHeight) {\n    return Math.max(0, optionOffset - panelHeight + optionHeight);\n  }\n\n  return currentScrollPosition;\n}\n\nvar MatOptionModule = /*@__PURE__*/function () {\n  var MatOptionModule = function MatOptionModule() {\n    _classCallCheck(this, MatOptionModule);\n  };\n\n  MatOptionModule.ɵfac = function MatOptionModule_Factory(t) {\n    return new (t || MatOptionModule)();\n  };\n\n  MatOptionModule.ɵmod =\n  /*@__PURE__*/\n\n  /*@__PURE__*/\n  ɵngcc0.ɵɵdefineNgModule({\n    type: MatOptionModule\n  });\n  MatOptionModule.ɵinj =\n  /*@__PURE__*/\n\n  /*@__PURE__*/\n  ɵngcc0.ɵɵdefineInjector({\n    imports: [[MatRippleModule, CommonModule, MatPseudoCheckboxModule]]\n  });\n  return MatOptionModule;\n}();\n/*@__PURE__*/\n\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatOptionModule, {\n    declarations: function declarations() {\n      return [MatOption, MatOptgroup];\n    },\n    imports: function imports() {\n      return [MatRippleModule, CommonModule, MatPseudoCheckboxModule];\n    },\n    exports: function exports() {\n      return [MatOption, MatOptgroup];\n    }\n  });\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/** *\n * InjectionToken that can be used to specify the global label options.\n  @type {?} */\n\n\nvar MAT_LABEL_GLOBAL_OPTIONS = /*@__PURE__*/new InjectionToken('mat-label-global-options');\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/** *\n * When constructing a Date, the month is zero-based. This can be confusing, since people are\n * used to seeing them one-based. So we create these aliases to make writing the tests easier.\n  @type {?} */\n\nvar JAN = 0;\n/** *\n * When constructing a Date, the month is zero-based. This can be confusing, since people are\n * used to seeing them one-based. So we create these aliases to make writing the tests easier.\n  @type {?} */\n\nvar FEB = 1;\n/** *\n * When constructing a Date, the month is zero-based. This can be confusing, since people are\n * used to seeing them one-based. So we create these aliases to make writing the tests easier.\n  @type {?} */\n\nvar MAR = 2;\n/** *\n * When constructing a Date, the month is zero-based. This can be confusing, since people are\n * used to seeing them one-based. So we create these aliases to make writing the tests easier.\n  @type {?} */\n\nvar APR = 3;\n/** *\n * When constructing a Date, the month is zero-based. This can be confusing, since people are\n * used to seeing them one-based. So we create these aliases to make writing the tests easier.\n  @type {?} */\n\nvar MAY = 4;\n/** *\n * When constructing a Date, the month is zero-based. This can be confusing, since people are\n * used to seeing them one-based. So we create these aliases to make writing the tests easier.\n  @type {?} */\n\nvar JUN = 5;\n/** *\n * When constructing a Date, the month is zero-based. This can be confusing, since people are\n * used to seeing them one-based. So we create these aliases to make writing the tests easier.\n  @type {?} */\n\nvar JUL = 6;\n/** *\n * When constructing a Date, the month is zero-based. This can be confusing, since people are\n * used to seeing them one-based. So we create these aliases to make writing the tests easier.\n  @type {?} */\n\nvar AUG = 7;\n/** *\n * When constructing a Date, the month is zero-based. This can be confusing, since people are\n * used to seeing them one-based. So we create these aliases to make writing the tests easier.\n  @type {?} */\n\nvar SEP = 8;\n/** *\n * When constructing a Date, the month is zero-based. This can be confusing, since people are\n * used to seeing them one-based. So we create these aliases to make writing the tests easier.\n  @type {?} */\n\nvar OCT = 9;\n/** *\n * When constructing a Date, the month is zero-based. This can be confusing, since people are\n * used to seeing them one-based. So we create these aliases to make writing the tests easier.\n  @type {?} */\n\nvar NOV = 10;\n/** *\n * When constructing a Date, the month is zero-based. This can be confusing, since people are\n * used to seeing them one-based. So we create these aliases to make writing the tests easier.\n  @type {?} */\n\nvar DEC = 11;\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\nexport { AnimationCurves, AnimationDurations, MatCommonModule, MATERIAL_SANITY_CHECKS, mixinDisabled, mixinColor, mixinDisableRipple, mixinTabIndex, mixinErrorState, mixinInitialized, NativeDateModule, MatNativeDateModule, MAT_DATE_LOCALE_FACTORY, MAT_DATE_LOCALE, MAT_DATE_LOCALE_PROVIDER, DateAdapter, MAT_DATE_FORMATS, NativeDateAdapter, MAT_NATIVE_DATE_FORMATS, ShowOnDirtyErrorStateMatcher, ErrorStateMatcher, MAT_HAMMER_OPTIONS, GestureConfig, setLines, MatLine, MatLineSetter, MatLineModule, MatOptionModule, _countGroupLabelsBeforeOption, _getOptionScrollPosition, MatOptionSelectionChange, MAT_OPTION_PARENT_COMPONENT, MatOption, MatOptgroupBase, _MatOptgroupMixinBase, MatOptgroup, MAT_LABEL_GLOBAL_OPTIONS, MatRippleModule, MAT_RIPPLE_GLOBAL_OPTIONS, MatRipple, RippleState, RippleRef, defaultRippleAnimationConfig, RippleRenderer, MatPseudoCheckboxModule, MatPseudoCheckbox, JAN, FEB, MAR, APR, MAY, JUN, JUL, AUG, SEP, OCT, NOV, DEC, MATERIAL_SANITY_CHECKS_FACTORY as ɵa1 }; //# sourceMappingURL=core.js.map","map":null,"metadata":{},"sourceType":"module"}