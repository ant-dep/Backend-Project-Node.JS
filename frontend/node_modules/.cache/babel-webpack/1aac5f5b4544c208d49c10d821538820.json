{"ast":null,"code":"import _createClass from \"/Users/adepertat/Dropbox/ECOLES/Openclassroom/P6_de_Pertat_Antoine/AntoinedePertat_6_240521/frontend/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/Users/adepertat/Dropbox/ECOLES/Openclassroom/P6_de_Pertat_Antoine/AntoinedePertat_6_240521/frontend/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/adepertat/Dropbox/ECOLES/Openclassroom/P6_de_Pertat_Antoine/AntoinedePertat_6_240521/frontend/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _classCallCheck from \"/Users/adepertat/Dropbox/ECOLES/Openclassroom/P6_de_Pertat_Antoine/AntoinedePertat_6_240521/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { animate, state, style, transition, trigger } from '@angular/animations';\nimport { Component, ElementRef, EventEmitter, Inject, Optional, ChangeDetectorRef, ViewChild, ViewEncapsulation, ChangeDetectionStrategy, Injectable, InjectionToken, Injector, SkipSelf, TemplateRef, Directive, Input, NgModule } from '@angular/core';\nimport { DOCUMENT, Location, CommonModule } from '@angular/common';\nimport { BasePortalOutlet, CdkPortalOutlet, ComponentPortal, PortalInjector, TemplatePortal, PortalModule } from '@angular/cdk/portal';\nimport { FocusTrapFactory } from '@angular/cdk/a11y';\nimport { ESCAPE } from '@angular/cdk/keycodes';\nimport { Subject, defer, of } from 'rxjs';\nimport { filter, take, startWith } from 'rxjs/operators';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { Overlay, OverlayConfig, OverlayContainer, OverlayModule } from '@angular/cdk/overlay';\nimport { MatCommonModule } from '@angular/material/core';\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * Configuration for opening a modal dialog with the MatDialog service.\n * @template D\n */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/a11y';\nimport * as ɵngcc2 from '@angular/cdk/portal';\nimport * as ɵngcc3 from '@angular/cdk/overlay';\nimport * as ɵngcc4 from '@angular/common';\n\nfunction MatDialogContainer_ng_template_0_Template(rf, ctx) {}\n\nvar MatDialogConfig = function MatDialogConfig() {\n  _classCallCheck(this, MatDialogConfig);\n\n  /**\n   * The ARIA role of the dialog element.\n   */\n  this.role = 'dialog';\n  /**\n   * Custom class for the overlay pane.\n   */\n\n  this.panelClass = '';\n  /**\n   * Whether the dialog has a backdrop.\n   */\n\n  this.hasBackdrop = true;\n  /**\n   * Custom class for the backdrop,\n   */\n\n  this.backdropClass = '';\n  /**\n   * Whether the user can use escape or clicking on the backdrop to close the modal.\n   */\n\n  this.disableClose = false;\n  /**\n   * Width of the dialog.\n   */\n\n  this.width = '';\n  /**\n   * Height of the dialog.\n   */\n\n  this.height = '';\n  /**\n   * Max-width of the dialog. If a number is provided, pixel units are assumed. Defaults to 80vw\n   */\n\n  this.maxWidth = '80vw';\n  /**\n   * Data being injected into the child component.\n   */\n\n  this.data = null;\n  /**\n   * ID of the element that describes the dialog.\n   */\n\n  this.ariaDescribedBy = null;\n  /**\n   * Aria label to assign to the dialog element\n   */\n\n  this.ariaLabel = null;\n  /**\n   * Whether the dialog should focus the first focusable element on open.\n   */\n\n  this.autoFocus = true;\n  /**\n   * Whether the dialog should restore focus to the\n   * previously-focused element, after it's closed.\n   */\n\n  this.restoreFocus = true;\n  /**\n   * Whether the dialog should close when the user goes backwards/forwards in history.\n   * Note that this usually doesn't include clicking on links (unless the user is using\n   * the `HashLocationStrategy`).\n   */\n\n  this.closeOnNavigation = true;\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/** @type {?} */\n\n\nvar animationBody = [// Note: The `enter` animation transitions to `transform: none`, because for some reason\n// specifying the transform explicitly, causes IE both to blur the dialog content and\n// decimate the animation performance. Leaving it as `none` solves both issues.\nstate('void, exit', style({\n  opacity: 0,\n  transform: 'scale(0.7)'\n})), state('enter', style({\n  transform: 'none'\n})), transition('* => enter', animate('150ms cubic-bezier(0, 0, 0.2, 1)', style({\n  transform: 'none',\n  opacity: 1\n}))), transition('* => void, * => exit', animate('75ms cubic-bezier(0.4, 0.0, 0.2, 1)', style({\n  opacity: 0\n})))];\n/** *\n * Animations used by MatDialog.\n * \\@docs-private\n  @type {?} */\n\nvar matDialogAnimations = {\n  /** Animation that is applied on the dialog container by defalt. */\n  dialogContainer: trigger('dialogContainer', animationBody),\n\n  /** @deprecated @breaking-change 8.0.0 Use `matDialogAnimations.dialogContainer` instead. */\n  slideDialog: trigger('slideDialog', animationBody)\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * Throws an exception for the case when a ComponentPortal is\n * attached to a DomPortalOutlet without an origin.\n * \\@docs-private\n * @return {?}\n */\n\nfunction throwMatDialogContentAlreadyAttachedError() {\n  throw Error('Attempting to attach dialog content after content is already attached');\n}\n/**\n * Internal component that wraps user-provided dialog content.\n * Animation is based on https://material.io/guidelines/motion/choreography.html.\n * \\@docs-private\n */\n\n\nvar MatDialogContainer = /*#__PURE__*/function (_BasePortalOutlet) {\n  _inherits(MatDialogContainer, _BasePortalOutlet);\n\n  var _super = _createSuper(MatDialogContainer);\n\n  /**\n   * @param {?} _elementRef\n   * @param {?} _focusTrapFactory\n   * @param {?} _changeDetectorRef\n   * @param {?} _document\n   * @param {?} _config\n   */\n  function MatDialogContainer(_elementRef, _focusTrapFactory, _changeDetectorRef, _document, _config) {\n    var _this;\n\n    _classCallCheck(this, MatDialogContainer);\n\n    _this = _super.call(this);\n    _this._elementRef = _elementRef;\n    _this._focusTrapFactory = _focusTrapFactory;\n    _this._changeDetectorRef = _changeDetectorRef;\n    _this._document = _document;\n    _this._config = _config;\n    /**\n     * Element that was focused before the dialog was opened. Save this to restore upon close.\n     */\n\n    _this._elementFocusedBeforeDialogWasOpened = null;\n    /**\n     * State of the dialog animation.\n     */\n\n    _this._state = 'enter';\n    /**\n     * Emits when an animation state changes.\n     */\n\n    _this._animationStateChanged = new EventEmitter();\n    /**\n     * ID of the element that should be considered as the dialog's label.\n     */\n\n    _this._ariaLabelledBy = null;\n    return _this;\n  }\n  /**\n   * Attach a ComponentPortal as content to this dialog container.\n   * @template T\n   * @param {?} portal Portal to be attached as the dialog content.\n   * @return {?}\n   */\n\n\n  _createClass(MatDialogContainer, [{\n    key: \"attachComponentPortal\",\n    value: function attachComponentPortal(portal) {\n      if (this._portalOutlet.hasAttached()) {\n        throwMatDialogContentAlreadyAttachedError();\n      }\n\n      this._savePreviouslyFocusedElement();\n\n      return this._portalOutlet.attachComponentPortal(portal);\n    }\n    /**\n     * Attach a TemplatePortal as content to this dialog container.\n     * @template C\n     * @param {?} portal Portal to be attached as the dialog content.\n     * @return {?}\n     */\n\n  }, {\n    key: \"attachTemplatePortal\",\n    value: function attachTemplatePortal(portal) {\n      if (this._portalOutlet.hasAttached()) {\n        throwMatDialogContentAlreadyAttachedError();\n      }\n\n      this._savePreviouslyFocusedElement();\n\n      return this._portalOutlet.attachTemplatePortal(portal);\n    }\n    /**\n     * Moves the focus inside the focus trap.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_trapFocus\",\n    value: function _trapFocus() {\n      if (!this._focusTrap) {\n        this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n      } // If were to attempt to focus immediately, then the content of the dialog would not yet be\n      // ready in instances where change detection has to run first. To deal with this, we simply\n      // wait for the microtask queue to be empty.\n\n\n      if (this._config.autoFocus) {\n        this._focusTrap.focusInitialElementWhenReady();\n      }\n    }\n    /**\n     * Restores focus to the element that was focused before the dialog opened.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_restoreFocus\",\n    value: function _restoreFocus() {\n      /** @type {?} */\n      var toFocus = this._elementFocusedBeforeDialogWasOpened; // We need the extra check, because IE can set the `activeElement` to null in some cases.\n\n      if (this._config.restoreFocus && toFocus && typeof toFocus.focus === 'function') {\n        toFocus.focus();\n      }\n\n      if (this._focusTrap) {\n        this._focusTrap.destroy();\n      }\n    }\n    /**\n     * Saves a reference to the element that was focused before the dialog was opened.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_savePreviouslyFocusedElement\",\n    value: function _savePreviouslyFocusedElement() {\n      var _this2 = this;\n\n      if (this._document) {\n        this._elementFocusedBeforeDialogWasOpened =\n        /** @type {?} */\n        this._document.activeElement; // Note that there is no focus method when rendering on the server.\n\n        if (this._elementRef.nativeElement.focus) {\n          // Move focus onto the dialog immediately in order to prevent the user from accidentally\n          // opening multiple dialogs at the same time. Needs to be async, because the element\n          // may not be focusable immediately.\n          Promise.resolve().then(function () {\n            return _this2._elementRef.nativeElement.focus();\n          });\n        }\n      }\n    }\n    /**\n     * Callback, invoked whenever an animation on the host completes.\n     * @param {?} event\n     * @return {?}\n     */\n\n  }, {\n    key: \"_onAnimationDone\",\n    value: function _onAnimationDone(event) {\n      if (event.toState === 'enter') {\n        this._trapFocus();\n      } else if (event.toState === 'exit') {\n        this._restoreFocus();\n      }\n\n      this._animationStateChanged.emit(event);\n    }\n    /**\n     * Callback, invoked when an animation on the host starts.\n     * @param {?} event\n     * @return {?}\n     */\n\n  }, {\n    key: \"_onAnimationStart\",\n    value: function _onAnimationStart(event) {\n      this._animationStateChanged.emit(event);\n    }\n    /**\n     * Starts the dialog exit animation.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_startExitAnimation\",\n    value: function _startExitAnimation() {\n      this._state = 'exit'; // Mark the container for check so it can react if the\n      // view container is using OnPush change detection.\n\n      this._changeDetectorRef.markForCheck();\n    }\n  }]);\n\n  return MatDialogContainer;\n}(BasePortalOutlet);\n\nMatDialogContainer.ɵfac = function MatDialogContainer_Factory(t) {\n  return new (t || MatDialogContainer)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.FocusTrapFactory), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(DOCUMENT, 8), ɵngcc0.ɵɵdirectiveInject(MatDialogConfig));\n};\n\nMatDialogContainer.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n  type: MatDialogContainer,\n  selectors: [[\"mat-dialog-container\"]],\n  viewQuery: function MatDialogContainer_Query(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵviewQuery(CdkPortalOutlet, 5);\n    }\n\n    if (rf & 2) {\n      var _t;\n\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._portalOutlet = _t.first);\n    }\n  },\n  hostAttrs: [\"tabindex\", \"-1\", \"aria-modal\", \"true\", 1, \"mat-dialog-container\"],\n  hostVars: 6,\n  hostBindings: function MatDialogContainer_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵsyntheticHostListener(\"@dialogContainer.start\", function MatDialogContainer_animation_dialogContainer_start_HostBindingHandler($event) {\n        return ctx._onAnimationStart($event);\n      })(\"@dialogContainer.done\", function MatDialogContainer_animation_dialogContainer_done_HostBindingHandler($event) {\n        return ctx._onAnimationDone($event);\n      });\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵattribute(\"id\", ctx._id)(\"role\", ctx._config.role)(\"aria-labelledby\", ctx._config.ariaLabel ? null : ctx._ariaLabelledBy)(\"aria-label\", ctx._config.ariaLabel)(\"aria-describedby\", ctx._config.ariaDescribedBy || null);\n      ɵngcc0.ɵɵsyntheticHostProperty(\"@dialogContainer\", ctx._state);\n    }\n  },\n  features: [ɵngcc0.ɵɵInheritDefinitionFeature],\n  decls: 1,\n  vars: 0,\n  consts: [[\"cdkPortalOutlet\", \"\"]],\n  template: function MatDialogContainer_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵtemplate(0, MatDialogContainer_ng_template_0_Template, 0, 0, \"ng-template\", 0);\n    }\n  },\n  directives: [ɵngcc2.CdkPortalOutlet],\n  styles: [\".mat-dialog-container{display:block;padding:24px;border-radius:4px;box-sizing:border-box;overflow:auto;outline:0;width:100%;height:100%;min-height:inherit;max-height:inherit}@media screen and (-ms-high-contrast:active){.mat-dialog-container{outline:solid 1px}}.mat-dialog-content{display:block;margin:0 -24px;padding:0 24px;max-height:65vh;overflow:auto;-webkit-overflow-scrolling:touch}.mat-dialog-title{margin:0 0 20px;display:block}.mat-dialog-actions{padding:8px 0;display:flex;flex-wrap:wrap;min-height:52px;align-items:center;margin-bottom:-24px}.mat-dialog-actions[align=end]{justify-content:flex-end}.mat-dialog-actions[align=center]{justify-content:center}.mat-dialog-actions .mat-button+.mat-button,.mat-dialog-actions .mat-button+.mat-raised-button,.mat-dialog-actions .mat-raised-button+.mat-button,.mat-dialog-actions .mat-raised-button+.mat-raised-button{margin-left:8px}[dir=rtl] .mat-dialog-actions .mat-button+.mat-button,[dir=rtl] .mat-dialog-actions .mat-button+.mat-raised-button,[dir=rtl] .mat-dialog-actions .mat-raised-button+.mat-button,[dir=rtl] .mat-dialog-actions .mat-raised-button+.mat-raised-button{margin-left:0;margin-right:8px}\"],\n  encapsulation: 2,\n  data: {\n    animation: [matDialogAnimations.dialogContainer]\n  }\n});\n/** @nocollapse */\n\nMatDialogContainer.ctorParameters = function () {\n  return [{\n    type: ElementRef\n  }, {\n    type: FocusTrapFactory\n  }, {\n    type: ChangeDetectorRef\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Optional\n    }, {\n      type: Inject,\n      args: [DOCUMENT]\n    }]\n  }, {\n    type: MatDialogConfig\n  }];\n};\n\nMatDialogContainer.propDecorators = {\n  _portalOutlet: [{\n    type: ViewChild,\n    args: [CdkPortalOutlet]\n  }]\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatDialogContainer, [{\n    type: Component,\n    args: [{\n      selector: 'mat-dialog-container',\n      template: \"<ng-template cdkPortalOutlet></ng-template>\",\n      styles: [\".mat-dialog-container{display:block;padding:24px;border-radius:4px;box-sizing:border-box;overflow:auto;outline:0;width:100%;height:100%;min-height:inherit;max-height:inherit}@media screen and (-ms-high-contrast:active){.mat-dialog-container{outline:solid 1px}}.mat-dialog-content{display:block;margin:0 -24px;padding:0 24px;max-height:65vh;overflow:auto;-webkit-overflow-scrolling:touch}.mat-dialog-title{margin:0 0 20px;display:block}.mat-dialog-actions{padding:8px 0;display:flex;flex-wrap:wrap;min-height:52px;align-items:center;margin-bottom:-24px}.mat-dialog-actions[align=end]{justify-content:flex-end}.mat-dialog-actions[align=center]{justify-content:center}.mat-dialog-actions .mat-button+.mat-button,.mat-dialog-actions .mat-button+.mat-raised-button,.mat-dialog-actions .mat-raised-button+.mat-button,.mat-dialog-actions .mat-raised-button+.mat-raised-button{margin-left:8px}[dir=rtl] .mat-dialog-actions .mat-button+.mat-button,[dir=rtl] .mat-dialog-actions .mat-button+.mat-raised-button,[dir=rtl] .mat-dialog-actions .mat-raised-button+.mat-button,[dir=rtl] .mat-dialog-actions .mat-raised-button+.mat-raised-button{margin-left:0;margin-right:8px}\"],\n      encapsulation: ViewEncapsulation.None,\n      // Using OnPush for dialogs caused some G3 sync issues. Disabled until we can track them down.\n      // tslint:disable-next-line:validate-decorators\n      changeDetection: ChangeDetectionStrategy.Default,\n      animations: [matDialogAnimations.dialogContainer],\n      host: {\n        'class': 'mat-dialog-container',\n        'tabindex': '-1',\n        'aria-modal': 'true',\n        '[attr.id]': '_id',\n        '[attr.role]': '_config.role',\n        '[attr.aria-labelledby]': '_config.ariaLabel ? null : _ariaLabelledBy',\n        '[attr.aria-label]': '_config.ariaLabel',\n        '[attr.aria-describedby]': '_config.ariaDescribedBy || null',\n        '[@dialogContainer]': '_state',\n        '(@dialogContainer.start)': '_onAnimationStart($event)',\n        '(@dialogContainer.done)': '_onAnimationDone($event)'\n      }\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ElementRef\n    }, {\n      type: ɵngcc1.FocusTrapFactory\n    }, {\n      type: ɵngcc0.ChangeDetectorRef\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }, {\n      type: MatDialogConfig\n    }];\n  }, {\n    _portalOutlet: [{\n      type: ViewChild,\n      args: [CdkPortalOutlet]\n    }]\n  });\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/** @type {?} */\n\n\nvar uniqueId = 0;\n/**\n * Reference to a dialog opened via the MatDialog service.\n * @template T, R\n */\n\nvar MatDialogRef = /*#__PURE__*/function () {\n  /**\n   * @param {?} _overlayRef\n   * @param {?} _containerInstance\n   * @param {?=} _location\n   * @param {?=} id\n   */\n  function MatDialogRef(_overlayRef, _containerInstance, // @breaking-change 8.0.0 `_location` parameter to be removed.\n  _location) {\n    var _this3 = this;\n\n    var id = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : \"mat-dialog-\".concat(uniqueId++);\n\n    _classCallCheck(this, MatDialogRef);\n\n    this._overlayRef = _overlayRef;\n    this._containerInstance = _containerInstance;\n    this.id = id;\n    /**\n     * Whether the user is allowed to close the dialog.\n     */\n\n    this.disableClose = this._containerInstance._config.disableClose;\n    /**\n     * Subject for notifying the user that the dialog has finished opening.\n     */\n\n    this._afterOpened = new Subject();\n    /**\n     * Subject for notifying the user that the dialog has finished closing.\n     */\n\n    this._afterClosed = new Subject();\n    /**\n     * Subject for notifying the user that the dialog has started closing.\n     */\n\n    this._beforeClosed = new Subject(); // Pass the id along to the container.\n\n    _containerInstance._id = id; // Emit when opening animation completes\n\n    _containerInstance._animationStateChanged.pipe(filter(function (event) {\n      return event.phaseName === 'done' && event.toState === 'enter';\n    }), take(1)).subscribe(function () {\n      _this3._afterOpened.next();\n\n      _this3._afterOpened.complete();\n    }); // Dispose overlay when closing animation is complete\n\n\n    _containerInstance._animationStateChanged.pipe(filter(function (event) {\n      return event.phaseName === 'done' && event.toState === 'exit';\n    }), take(1)).subscribe(function () {\n      return _this3._overlayRef.dispose();\n    });\n\n    _overlayRef.detachments().subscribe(function () {\n      _this3._beforeClosed.next(_this3._result);\n\n      _this3._beforeClosed.complete();\n\n      _this3._afterClosed.next(_this3._result);\n\n      _this3._afterClosed.complete();\n\n      _this3.componentInstance =\n      /** @type {?} */\n      null;\n\n      _this3._overlayRef.dispose();\n    });\n\n    _overlayRef.keydownEvents().pipe(filter(function (event) {\n      return event.keyCode === ESCAPE && !_this3.disableClose;\n    })).subscribe(function () {\n      return _this3.close();\n    });\n  }\n  /**\n   * Close the dialog.\n   * @param {?=} dialogResult Optional result to return to the dialog opener.\n   * @return {?}\n   */\n\n\n  _createClass(MatDialogRef, [{\n    key: \"close\",\n    value: function close(dialogResult) {\n      var _this4 = this;\n\n      this._result = dialogResult; // Transition the backdrop in parallel to the dialog.\n\n      this._containerInstance._animationStateChanged.pipe(filter(function (event) {\n        return event.phaseName === 'start';\n      }), take(1)).subscribe(function () {\n        _this4._beforeClosed.next(dialogResult);\n\n        _this4._beforeClosed.complete();\n\n        _this4._overlayRef.detachBackdrop();\n      });\n\n      this._containerInstance._startExitAnimation();\n    }\n    /**\n     * Gets an observable that is notified when the dialog is finished opening.\n     * @return {?}\n     */\n\n  }, {\n    key: \"afterOpened\",\n    value: function afterOpened() {\n      return this._afterOpened.asObservable();\n    }\n    /**\n     * Gets an observable that is notified when the dialog is finished closing.\n     * @return {?}\n     */\n\n  }, {\n    key: \"afterClosed\",\n    value: function afterClosed() {\n      return this._afterClosed.asObservable();\n    }\n    /**\n     * Gets an observable that is notified when the dialog has started closing.\n     * @return {?}\n     */\n\n  }, {\n    key: \"beforeClosed\",\n    value: function beforeClosed() {\n      return this._beforeClosed.asObservable();\n    }\n    /**\n     * Gets an observable that emits when the overlay's backdrop has been clicked.\n     * @return {?}\n     */\n\n  }, {\n    key: \"backdropClick\",\n    value: function backdropClick() {\n      return this._overlayRef.backdropClick();\n    }\n    /**\n     * Gets an observable that emits when keydown events are targeted on the overlay.\n     * @return {?}\n     */\n\n  }, {\n    key: \"keydownEvents\",\n    value: function keydownEvents() {\n      return this._overlayRef.keydownEvents();\n    }\n    /**\n     * Updates the dialog's position.\n     * @param {?=} position New dialog position.\n     * @return {?}\n     */\n\n  }, {\n    key: \"updatePosition\",\n    value: function updatePosition(position) {\n      /** @type {?} */\n      var strategy = this._getPositionStrategy();\n\n      if (position && (position.left || position.right)) {\n        position.left ? strategy.left(position.left) : strategy.right(position.right);\n      } else {\n        strategy.centerHorizontally();\n      }\n\n      if (position && (position.top || position.bottom)) {\n        position.top ? strategy.top(position.top) : strategy.bottom(position.bottom);\n      } else {\n        strategy.centerVertically();\n      }\n\n      this._overlayRef.updatePosition();\n\n      return this;\n    }\n    /**\n     * Updates the dialog's width and height.\n     * @param {?=} width New width of the dialog.\n     * @param {?=} height New height of the dialog.\n     * @return {?}\n     */\n\n  }, {\n    key: \"updateSize\",\n    value: function updateSize() {\n      var width = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n      var height = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n\n      this._getPositionStrategy().width(width).height(height);\n\n      this._overlayRef.updatePosition();\n\n      return this;\n    }\n    /**\n     * Gets an observable that is notified when the dialog is finished opening.\n     * @deprecated Use `afterOpened` instead.\n     * \\@breaking-change 8.0.0\n     * @return {?}\n     */\n\n  }, {\n    key: \"afterOpen\",\n    value: function afterOpen() {\n      return this.afterOpened();\n    }\n    /**\n     * Gets an observable that is notified when the dialog has started closing.\n     * @deprecated Use `beforeClosed` instead.\n     * \\@breaking-change 8.0.0\n     * @return {?}\n     */\n\n  }, {\n    key: \"beforeClose\",\n    value: function beforeClose() {\n      return this.beforeClosed();\n    }\n    /**\n     * Fetches the position strategy object from the overlay ref.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_getPositionStrategy\",\n    value: function _getPositionStrategy() {\n      return (\n        /** @type {?} */\n        this._overlayRef.getConfig().positionStrategy\n      );\n    }\n  }]);\n\n  return MatDialogRef;\n}();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/** *\n * Injection token that can be used to access the data that was passed in to a dialog.\n  @type {?} */\n\n\nvar MAT_DIALOG_DATA = new InjectionToken('MatDialogData');\n/** *\n * Injection token that can be used to specify default dialog options.\n  @type {?} */\n\nvar MAT_DIALOG_DEFAULT_OPTIONS = new InjectionToken('mat-dialog-default-options');\n/** *\n * Injection token that determines the scroll handling while the dialog is open.\n  @type {?} */\n\nvar MAT_DIALOG_SCROLL_STRATEGY = new InjectionToken('mat-dialog-scroll-strategy');\n/**\n * \\@docs-private\n * @param {?} overlay\n * @return {?}\n */\n\nfunction MAT_DIALOG_SCROLL_STRATEGY_FACTORY(overlay) {\n  return function () {\n    return overlay.scrollStrategies.block();\n  };\n}\n/**\n * \\@docs-private\n * @param {?} overlay\n * @return {?}\n */\n\n\nfunction MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay) {\n  return function () {\n    return overlay.scrollStrategies.block();\n  };\n}\n/** *\n * \\@docs-private\n  @type {?} */\n\n\nvar MAT_DIALOG_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_DIALOG_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY\n};\n/**\n * Service to open Material Design modal dialogs.\n */\n\nvar MatDialog = /*#__PURE__*/function () {\n  /**\n   * @param {?} _overlay\n   * @param {?} _injector\n   * @param {?} _location\n   * @param {?} _defaultOptions\n   * @param {?} scrollStrategy\n   * @param {?} _parentDialog\n   * @param {?} _overlayContainer\n   */\n  function MatDialog(_overlay, _injector, _location, _defaultOptions, scrollStrategy, _parentDialog, _overlayContainer) {\n    var _this5 = this;\n\n    _classCallCheck(this, MatDialog);\n\n    this._overlay = _overlay;\n    this._injector = _injector;\n    this._location = _location;\n    this._defaultOptions = _defaultOptions;\n    this._parentDialog = _parentDialog;\n    this._overlayContainer = _overlayContainer;\n    this._openDialogsAtThisLevel = [];\n    this._afterAllClosedAtThisLevel = new Subject();\n    this._afterOpenedAtThisLevel = new Subject();\n    this._ariaHiddenElements = new Map();\n    /**\n     * Stream that emits when all open dialog have finished closing.\n     * Will emit on subscribe if there are no open dialogs to begin with.\n     */\n\n    this.afterAllClosed = defer(function () {\n      return _this5.openDialogs.length ? _this5._afterAllClosed : _this5._afterAllClosed.pipe(startWith(undefined));\n    });\n    this._scrollStrategy = scrollStrategy;\n  }\n  /**\n   * Keeps track of the currently-open dialogs.\n   * @return {?}\n   */\n\n\n  _createClass(MatDialog, [{\n    key: \"openDialogs\",\n    get: function get() {\n      return this._parentDialog ? this._parentDialog.openDialogs : this._openDialogsAtThisLevel;\n    }\n    /**\n     * Stream that emits when a dialog has been opened.\n     * @return {?}\n     */\n\n  }, {\n    key: \"afterOpened\",\n    get: function get() {\n      return this._parentDialog ? this._parentDialog.afterOpened : this._afterOpenedAtThisLevel;\n    }\n    /**\n     * Stream that emits when a dialog has been opened.\n     * @deprecated Use `afterOpened` instead.\n     * \\@breaking-change 8.0.0\n     * @return {?}\n     */\n\n  }, {\n    key: \"afterOpen\",\n    get: function get() {\n      return this.afterOpened;\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"_afterAllClosed\",\n    get: function get() {\n      /** @type {?} */\n      var parent = this._parentDialog;\n      return parent ? parent._afterAllClosed : this._afterAllClosedAtThisLevel;\n    }\n    /**\n     * Opens a modal dialog containing the given component.\n     * @template T, D, R\n     * @param {?} componentOrTemplateRef Type of the component to load into the dialog,\n     *     or a TemplateRef to instantiate as the dialog content.\n     * @param {?=} config Extra configuration options.\n     * @return {?} Reference to the newly-opened dialog.\n     */\n\n  }, {\n    key: \"open\",\n    value: function open(componentOrTemplateRef, config) {\n      var _this6 = this;\n\n      config = _applyConfigDefaults(config, this._defaultOptions || new MatDialogConfig());\n\n      if (config.id && this.getDialogById(config.id)) {\n        throw Error(\"Dialog with id \\\"\".concat(config.id, \"\\\" exists already. The dialog id must be unique.\"));\n      }\n      /** @type {?} */\n\n\n      var overlayRef = this._createOverlay(config);\n      /** @type {?} */\n\n\n      var dialogContainer = this._attachDialogContainer(overlayRef, config);\n      /** @type {?} */\n\n\n      var dialogRef = this._attachDialogContent(componentOrTemplateRef, dialogContainer, overlayRef, config); // If this is the first dialog that we're opening, hide all the non-overlay content.\n\n\n      if (!this.openDialogs.length) {\n        this._hideNonDialogContentFromAssistiveTechnology();\n      }\n\n      this.openDialogs.push(dialogRef);\n      dialogRef.afterClosed().subscribe(function () {\n        return _this6._removeOpenDialog(dialogRef);\n      });\n      this.afterOpened.next(dialogRef);\n      return dialogRef;\n    }\n    /**\n     * Closes all of the currently-open dialogs.\n     * @return {?}\n     */\n\n  }, {\n    key: \"closeAll\",\n    value: function closeAll() {\n      this._closeDialogs(this.openDialogs);\n    }\n    /**\n     * Finds an open dialog by its id.\n     * @param {?} id ID to use when looking up the dialog.\n     * @return {?}\n     */\n\n  }, {\n    key: \"getDialogById\",\n    value: function getDialogById(id) {\n      return this.openDialogs.find(function (dialog) {\n        return dialog.id === id;\n      });\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      // Only close the dialogs at this level on destroy\n      // since the parent service may still be active.\n      this._closeDialogs(this._openDialogsAtThisLevel);\n    }\n    /**\n     * Creates the overlay into which the dialog will be loaded.\n     * @param {?} config The dialog configuration.\n     * @return {?} A promise resolving to the OverlayRef for the created overlay.\n     */\n\n  }, {\n    key: \"_createOverlay\",\n    value: function _createOverlay(config) {\n      /** @type {?} */\n      var overlayConfig = this._getOverlayConfig(config);\n\n      return this._overlay.create(overlayConfig);\n    }\n    /**\n     * Creates an overlay config from a dialog config.\n     * @param {?} dialogConfig The dialog configuration.\n     * @return {?} The overlay configuration.\n     */\n\n  }, {\n    key: \"_getOverlayConfig\",\n    value: function _getOverlayConfig(dialogConfig) {\n      /** @type {?} */\n      var state$$1 = new OverlayConfig({\n        positionStrategy: this._overlay.position().global(),\n        scrollStrategy: dialogConfig.scrollStrategy || this._scrollStrategy(),\n        panelClass: dialogConfig.panelClass,\n        hasBackdrop: dialogConfig.hasBackdrop,\n        direction: dialogConfig.direction,\n        minWidth: dialogConfig.minWidth,\n        minHeight: dialogConfig.minHeight,\n        maxWidth: dialogConfig.maxWidth,\n        maxHeight: dialogConfig.maxHeight,\n        disposeOnNavigation: dialogConfig.closeOnNavigation\n      });\n\n      if (dialogConfig.backdropClass) {\n        state$$1.backdropClass = dialogConfig.backdropClass;\n      }\n\n      return state$$1;\n    }\n    /**\n     * Attaches an MatDialogContainer to a dialog's already-created overlay.\n     * @param {?} overlay Reference to the dialog's underlying overlay.\n     * @param {?} config The dialog configuration.\n     * @return {?} A promise resolving to a ComponentRef for the attached container.\n     */\n\n  }, {\n    key: \"_attachDialogContainer\",\n    value: function _attachDialogContainer(overlay, config) {\n      /** @type {?} */\n      var userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n      /** @type {?} */\n\n      var injector = new PortalInjector(userInjector || this._injector, new WeakMap([[MatDialogConfig, config]]));\n      /** @type {?} */\n\n      var containerPortal = new ComponentPortal(MatDialogContainer, config.viewContainerRef, injector);\n      /** @type {?} */\n\n      var containerRef = overlay.attach(containerPortal);\n      return containerRef.instance;\n    }\n    /**\n     * Attaches the user-provided component to the already-created MatDialogContainer.\n     * @template T, R\n     * @param {?} componentOrTemplateRef The type of component being loaded into the dialog,\n     *     or a TemplateRef to instantiate as the content.\n     * @param {?} dialogContainer Reference to the wrapping MatDialogContainer.\n     * @param {?} overlayRef Reference to the overlay in which the dialog resides.\n     * @param {?} config The dialog configuration.\n     * @return {?} A promise resolving to the MatDialogRef that should be returned to the user.\n     */\n\n  }, {\n    key: \"_attachDialogContent\",\n    value: function _attachDialogContent(componentOrTemplateRef, dialogContainer, overlayRef, config) {\n      /** @type {?} */\n      var dialogRef = new MatDialogRef(overlayRef, dialogContainer, this._location, config.id); // When the dialog backdrop is clicked, we want to close it.\n\n      if (config.hasBackdrop) {\n        overlayRef.backdropClick().subscribe(function () {\n          if (!dialogRef.disableClose) {\n            dialogRef.close();\n          }\n        });\n      }\n\n      if (componentOrTemplateRef instanceof TemplateRef) {\n        dialogContainer.attachTemplatePortal(new TemplatePortal(componentOrTemplateRef,\n        /** @type {?} */\n        null,\n        /** @type {?} */\n        {\n          $implicit: config.data,\n          dialogRef: dialogRef\n        }));\n      } else {\n        /** @type {?} */\n        var injector = this._createInjector(config, dialogRef, dialogContainer);\n        /** @type {?} */\n\n\n        var contentRef = dialogContainer.attachComponentPortal(new ComponentPortal(componentOrTemplateRef, undefined, injector));\n        dialogRef.componentInstance = contentRef.instance;\n      }\n\n      dialogRef.updateSize(config.width, config.height).updatePosition(config.position);\n      return dialogRef;\n    }\n    /**\n     * Creates a custom injector to be used inside the dialog. This allows a component loaded inside\n     * of a dialog to close itself and, optionally, to return a value.\n     * @template T\n     * @param {?} config Config object that is used to construct the dialog.\n     * @param {?} dialogRef Reference to the dialog.\n     * @param {?} dialogContainer\n     * @return {?} The custom injector that can be used inside the dialog.\n     */\n\n  }, {\n    key: \"_createInjector\",\n    value: function _createInjector(config, dialogRef, dialogContainer) {\n      /** @type {?} */\n      var userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n      /** @type {?} */\n\n      var injectionTokens = new WeakMap([[MatDialogContainer, dialogContainer], [MAT_DIALOG_DATA, config.data], [MatDialogRef, dialogRef]]);\n\n      if (config.direction && (!userInjector || !userInjector.get(Directionality, null))) {\n        injectionTokens.set(Directionality, {\n          value: config.direction,\n          change: of()\n        });\n      }\n\n      return new PortalInjector(userInjector || this._injector, injectionTokens);\n    }\n    /**\n     * Removes a dialog from the array of open dialogs.\n     * @param {?} dialogRef Dialog to be removed.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_removeOpenDialog\",\n    value: function _removeOpenDialog(dialogRef) {\n      /** @type {?} */\n      var index = this.openDialogs.indexOf(dialogRef);\n\n      if (index > -1) {\n        this.openDialogs.splice(index, 1); // If all the dialogs were closed, remove/restore the `aria-hidden`\n        // to a the siblings and emit to the `afterAllClosed` stream.\n\n        if (!this.openDialogs.length) {\n          this._ariaHiddenElements.forEach(function (previousValue, element) {\n            if (previousValue) {\n              element.setAttribute('aria-hidden', previousValue);\n            } else {\n              element.removeAttribute('aria-hidden');\n            }\n          });\n\n          this._ariaHiddenElements.clear();\n\n          this._afterAllClosed.next();\n        }\n      }\n    }\n    /**\n     * Hides all of the content that isn't an overlay from assistive technology.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_hideNonDialogContentFromAssistiveTechnology\",\n    value: function _hideNonDialogContentFromAssistiveTechnology() {\n      /** @type {?} */\n      var overlayContainer = this._overlayContainer.getContainerElement(); // Ensure that the overlay container is attached to the DOM.\n\n\n      if (overlayContainer.parentElement) {\n        /** @type {?} */\n        var siblings = overlayContainer.parentElement.children;\n\n        for (var i = siblings.length - 1; i > -1; i--) {\n          /** @type {?} */\n          var sibling = siblings[i];\n\n          if (sibling !== overlayContainer && sibling.nodeName !== 'SCRIPT' && sibling.nodeName !== 'STYLE' && !sibling.hasAttribute('aria-live')) {\n            this._ariaHiddenElements.set(sibling, sibling.getAttribute('aria-hidden'));\n\n            sibling.setAttribute('aria-hidden', 'true');\n          }\n        }\n      }\n    }\n    /**\n     * Closes all of the dialogs in an array.\n     * @param {?} dialogs\n     * @return {?}\n     */\n\n  }, {\n    key: \"_closeDialogs\",\n    value: function _closeDialogs(dialogs) {\n      /** @type {?} */\n      var i = dialogs.length;\n\n      while (i--) {\n        // The `_openDialogs` property isn't updated after close until the rxjs subscription\n        // runs on the next microtask, in addition to modifying the array as we're going\n        // through it. We loop through all of them and call close without assuming that\n        // they'll be removed from the list instantaneously.\n        dialogs[i].close();\n      }\n    }\n  }]);\n\n  return MatDialog;\n}();\n\nMatDialog.ɵfac = function MatDialog_Factory(t) {\n  return new (t || MatDialog)(ɵngcc0.ɵɵinject(ɵngcc3.Overlay), ɵngcc0.ɵɵinject(ɵngcc0.Injector), ɵngcc0.ɵɵinject(ɵngcc4.Location, 8), ɵngcc0.ɵɵinject(MAT_DIALOG_DEFAULT_OPTIONS, 8), ɵngcc0.ɵɵinject(MAT_DIALOG_SCROLL_STRATEGY), ɵngcc0.ɵɵinject(MatDialog, 12), ɵngcc0.ɵɵinject(ɵngcc3.OverlayContainer));\n};\n\nMatDialog.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n  token: MatDialog,\n  factory: MatDialog.ɵfac\n});\n/** @nocollapse */\n\nMatDialog.ctorParameters = function () {\n  return [{\n    type: Overlay\n  }, {\n    type: Injector\n  }, {\n    type: Location,\n    decorators: [{\n      type: Optional\n    }]\n  }, {\n    type: MatDialogConfig,\n    decorators: [{\n      type: Optional\n    }, {\n      type: Inject,\n      args: [MAT_DIALOG_DEFAULT_OPTIONS]\n    }]\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Inject,\n      args: [MAT_DIALOG_SCROLL_STRATEGY]\n    }]\n  }, {\n    type: MatDialog,\n    decorators: [{\n      type: Optional\n    }, {\n      type: SkipSelf\n    }]\n  }, {\n    type: OverlayContainer\n  }];\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatDialog, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: ɵngcc3.Overlay\n    }, {\n      type: ɵngcc0.Injector\n    }, {\n      type: ɵngcc4.Location,\n      decorators: [{\n        type: Optional\n      }]\n    }, {\n      type: MatDialogConfig,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [MAT_DIALOG_DEFAULT_OPTIONS]\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [MAT_DIALOG_SCROLL_STRATEGY]\n      }]\n    }, {\n      type: MatDialog,\n      decorators: [{\n        type: Optional\n      }, {\n        type: SkipSelf\n      }]\n    }, {\n      type: ɵngcc3.OverlayContainer\n    }];\n  }, null);\n})();\n/**\n * Applies default options to the dialog config.\n * @param {?=} config Config to be modified.\n * @param {?=} defaultOptions Default options provided.\n * @return {?} The new configuration object.\n */\n\n\nfunction _applyConfigDefaults(config, defaultOptions) {\n  return Object.assign({}, defaultOptions, config);\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/** *\n * Counter used to generate unique IDs for dialog elements.\n  @type {?} */\n\n\nvar dialogElementUid = 0;\n/**\n * Button that will close the current dialog.\n */\n\nvar MatDialogClose = /*#__PURE__*/function () {\n  /**\n   * @param {?} dialogRef\n   * @param {?} _elementRef\n   * @param {?} _dialog\n   */\n  function MatDialogClose(dialogRef, _elementRef, _dialog) {\n    _classCallCheck(this, MatDialogClose);\n\n    this.dialogRef = dialogRef;\n    this._elementRef = _elementRef;\n    this._dialog = _dialog;\n    /**\n     * Screenreader label for the button.\n     */\n\n    this.ariaLabel = 'Close dialog';\n  }\n  /**\n   * @return {?}\n   */\n\n\n  _createClass(MatDialogClose, [{\n    key: \"ngOnInit\",\n    value: function ngOnInit() {\n      if (!this.dialogRef) {\n        // When this directive is included in a dialog via TemplateRef (rather than being\n        // in a Component), the DialogRef isn't available via injection because embedded\n        // views cannot be given a custom injector. Instead, we look up the DialogRef by\n        // ID. This must occur in `onInit`, as the ID binding for the dialog container won't\n        // be resolved at constructor time.\n        this.dialogRef =\n        /** @type {?} */\n        getClosestDialog(this._elementRef, this._dialog.openDialogs);\n      }\n    }\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngOnChanges\",\n    value: function ngOnChanges(changes) {\n      /** @type {?} */\n      var proxiedChange = changes[\"_matDialogClose\"] || changes[\"_matDialogCloseResult\"];\n\n      if (proxiedChange) {\n        this.dialogResult = proxiedChange.currentValue;\n      }\n    }\n  }]);\n\n  return MatDialogClose;\n}();\n\nMatDialogClose.ɵfac = function MatDialogClose_Factory(t) {\n  return new (t || MatDialogClose)(ɵngcc0.ɵɵdirectiveInject(MatDialogRef, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(MatDialog));\n};\n\nMatDialogClose.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n  type: MatDialogClose,\n  selectors: [[\"button\", \"mat-dialog-close\", \"\"], [\"button\", \"matDialogClose\", \"\"]],\n  hostAttrs: [\"type\", \"button\"],\n  hostVars: 1,\n  hostBindings: function MatDialogClose_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵlistener(\"click\", function MatDialogClose_click_HostBindingHandler() {\n        return ctx.dialogRef.close(ctx.dialogResult);\n      });\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵattribute(\"aria-label\", ctx.ariaLabel);\n    }\n  },\n  inputs: {\n    ariaLabel: [\"aria-label\", \"ariaLabel\"],\n    dialogResult: [\"mat-dialog-close\", \"dialogResult\"],\n    _matDialogClose: [\"matDialogClose\", \"_matDialogClose\"]\n  },\n  exportAs: [\"matDialogClose\"],\n  features: [ɵngcc0.ɵɵNgOnChangesFeature]\n});\n/** @nocollapse */\n\nMatDialogClose.ctorParameters = function () {\n  return [{\n    type: MatDialogRef,\n    decorators: [{\n      type: Optional\n    }]\n  }, {\n    type: ElementRef\n  }, {\n    type: MatDialog\n  }];\n};\n\nMatDialogClose.propDecorators = {\n  ariaLabel: [{\n    type: Input,\n    args: ['aria-label']\n  }],\n  dialogResult: [{\n    type: Input,\n    args: ['mat-dialog-close']\n  }],\n  _matDialogClose: [{\n    type: Input,\n    args: ['matDialogClose']\n  }]\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatDialogClose, [{\n    type: Directive,\n    args: [{\n      selector: \"button[mat-dialog-close], button[matDialogClose]\",\n      exportAs: 'matDialogClose',\n      host: {\n        '(click)': 'dialogRef.close(dialogResult)',\n        '[attr.aria-label]': 'ariaLabel',\n        'type': 'button'\n      }\n    }]\n  }], function () {\n    return [{\n      type: MatDialogRef,\n      decorators: [{\n        type: Optional\n      }]\n    }, {\n      type: ɵngcc0.ElementRef\n    }, {\n      type: MatDialog\n    }];\n  }, {\n    ariaLabel: [{\n      type: Input,\n      args: ['aria-label']\n    }],\n    dialogResult: [{\n      type: Input,\n      args: ['mat-dialog-close']\n    }],\n    _matDialogClose: [{\n      type: Input,\n      args: ['matDialogClose']\n    }]\n  });\n})();\n/**\n * Title of a dialog element. Stays fixed to the top of the dialog when scrolling.\n */\n\n\nvar MatDialogTitle = /*#__PURE__*/function () {\n  /**\n   * @param {?} _dialogRef\n   * @param {?} _elementRef\n   * @param {?} _dialog\n   */\n  function MatDialogTitle(_dialogRef, _elementRef, _dialog) {\n    _classCallCheck(this, MatDialogTitle);\n\n    this._dialogRef = _dialogRef;\n    this._elementRef = _elementRef;\n    this._dialog = _dialog;\n    this.id = \"mat-dialog-title-\".concat(dialogElementUid++);\n  }\n  /**\n   * @return {?}\n   */\n\n\n  _createClass(MatDialogTitle, [{\n    key: \"ngOnInit\",\n    value: function ngOnInit() {\n      var _this7 = this;\n\n      if (!this._dialogRef) {\n        this._dialogRef =\n        /** @type {?} */\n        getClosestDialog(this._elementRef, this._dialog.openDialogs);\n      }\n\n      if (this._dialogRef) {\n        Promise.resolve().then(function () {\n          /** @type {?} */\n          var container = _this7._dialogRef._containerInstance;\n\n          if (container && !container._ariaLabelledBy) {\n            container._ariaLabelledBy = _this7.id;\n          }\n        });\n      }\n    }\n  }]);\n\n  return MatDialogTitle;\n}();\n\nMatDialogTitle.ɵfac = function MatDialogTitle_Factory(t) {\n  return new (t || MatDialogTitle)(ɵngcc0.ɵɵdirectiveInject(MatDialogRef, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(MatDialog));\n};\n\nMatDialogTitle.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n  type: MatDialogTitle,\n  selectors: [[\"\", \"mat-dialog-title\", \"\"], [\"\", \"matDialogTitle\", \"\"]],\n  hostAttrs: [1, \"mat-dialog-title\"],\n  hostVars: 1,\n  hostBindings: function MatDialogTitle_HostBindings(rf, ctx) {\n    if (rf & 2) {\n      ɵngcc0.ɵɵhostProperty(\"id\", ctx.id);\n    }\n  },\n  inputs: {\n    id: \"id\"\n  },\n  exportAs: [\"matDialogTitle\"]\n});\n/** @nocollapse */\n\nMatDialogTitle.ctorParameters = function () {\n  return [{\n    type: MatDialogRef,\n    decorators: [{\n      type: Optional\n    }]\n  }, {\n    type: ElementRef\n  }, {\n    type: MatDialog\n  }];\n};\n\nMatDialogTitle.propDecorators = {\n  id: [{\n    type: Input\n  }]\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatDialogTitle, [{\n    type: Directive,\n    args: [{\n      selector: '[mat-dialog-title], [matDialogTitle]',\n      exportAs: 'matDialogTitle',\n      host: {\n        'class': 'mat-dialog-title',\n        '[id]': 'id'\n      }\n    }]\n  }], function () {\n    return [{\n      type: MatDialogRef,\n      decorators: [{\n        type: Optional\n      }]\n    }, {\n      type: ɵngcc0.ElementRef\n    }, {\n      type: MatDialog\n    }];\n  }, {\n    id: [{\n      type: Input\n    }]\n  });\n})();\n/**\n * Scrollable content container of a dialog.\n */\n\n\nvar MatDialogContent = function MatDialogContent() {\n  _classCallCheck(this, MatDialogContent);\n};\n\nMatDialogContent.ɵfac = function MatDialogContent_Factory(t) {\n  return new (t || MatDialogContent)();\n};\n\nMatDialogContent.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n  type: MatDialogContent,\n  selectors: [[\"\", \"mat-dialog-content\", \"\"], [\"mat-dialog-content\"], [\"\", \"matDialogContent\", \"\"]],\n  hostAttrs: [1, \"mat-dialog-content\"]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatDialogContent, [{\n    type: Directive,\n    args: [{\n      selector: \"[mat-dialog-content], mat-dialog-content, [matDialogContent]\",\n      host: {\n        'class': 'mat-dialog-content'\n      }\n    }]\n  }], null, null);\n})();\n/**\n * Container for the bottom action buttons in a dialog.\n * Stays fixed to the bottom when scrolling.\n */\n\n\nvar MatDialogActions = function MatDialogActions() {\n  _classCallCheck(this, MatDialogActions);\n};\n\nMatDialogActions.ɵfac = function MatDialogActions_Factory(t) {\n  return new (t || MatDialogActions)();\n};\n\nMatDialogActions.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n  type: MatDialogActions,\n  selectors: [[\"\", \"mat-dialog-actions\", \"\"], [\"mat-dialog-actions\"], [\"\", \"matDialogActions\", \"\"]],\n  hostAttrs: [1, \"mat-dialog-actions\"]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatDialogActions, [{\n    type: Directive,\n    args: [{\n      selector: \"[mat-dialog-actions], mat-dialog-actions, [matDialogActions]\",\n      host: {\n        'class': 'mat-dialog-actions'\n      }\n    }]\n  }], null, null);\n})();\n/**\n * Finds the closest MatDialogRef to an element by looking at the DOM.\n * @param {?} element Element relative to which to look for a dialog.\n * @param {?} openDialogs References to the currently-open dialogs.\n * @return {?}\n */\n\n\nfunction getClosestDialog(element, openDialogs) {\n  /** @type {?} */\n  var parent = element.nativeElement.parentElement;\n\n  while (parent && !parent.classList.contains('mat-dialog-container')) {\n    parent = parent.parentElement;\n  }\n\n  return parent ? openDialogs.find(function (dialog) {\n    return dialog.id ===\n    /** @type {?} */\n    parent.id;\n  }) : null;\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n\nvar MatDialogModule = function MatDialogModule() {\n  _classCallCheck(this, MatDialogModule);\n};\n\nMatDialogModule.ɵfac = function MatDialogModule_Factory(t) {\n  return new (t || MatDialogModule)();\n};\n\nMatDialogModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n  type: MatDialogModule\n});\nMatDialogModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n  providers: [MatDialog, MAT_DIALOG_SCROLL_STRATEGY_PROVIDER],\n  imports: [[CommonModule, OverlayModule, PortalModule, MatCommonModule], MatCommonModule]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatDialogModule, [{\n    type: NgModule,\n    args: [{\n      imports: [CommonModule, OverlayModule, PortalModule, MatCommonModule],\n      exports: [MatDialogContainer, MatDialogClose, MatDialogTitle, MatDialogContent, MatDialogActions, MatCommonModule],\n      declarations: [MatDialogContainer, MatDialogClose, MatDialogTitle, MatDialogActions, MatDialogContent],\n      providers: [MatDialog, MAT_DIALOG_SCROLL_STRATEGY_PROVIDER],\n      entryComponents: [MatDialogContainer]\n    }]\n  }], null, null);\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatDialogModule, {\n    declarations: function declarations() {\n      return [MatDialogContainer, MatDialogClose, MatDialogTitle, MatDialogActions, MatDialogContent];\n    },\n    imports: function imports() {\n      return [CommonModule, OverlayModule, PortalModule, MatCommonModule];\n    },\n    exports: function exports() {\n      return [MatDialogContainer, MatDialogClose, MatDialogTitle, MatDialogContent, MatDialogActions, MatCommonModule];\n    }\n  });\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n\nexport { MatDialogModule, MAT_DIALOG_SCROLL_STRATEGY_FACTORY, MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY, MAT_DIALOG_DATA, MAT_DIALOG_DEFAULT_OPTIONS, MAT_DIALOG_SCROLL_STRATEGY, MAT_DIALOG_SCROLL_STRATEGY_PROVIDER, MatDialog, throwMatDialogContentAlreadyAttachedError, MatDialogContainer, MatDialogClose, MatDialogTitle, MatDialogContent, MatDialogActions, MatDialogConfig, MatDialogRef, matDialogAnimations }; //# sourceMappingURL=dialog.js.map","map":{"version":3,"sources":["/Users/adepertat/Dropbox/ECOLES/Openclassroom/P6_de_Pertat_Antoine/AntoinedePertat_6_240521/frontend/node_modules/@angular/material/__ivy_ngcc__/esm2015/dialog.js"],"names":["animate","state","style","transition","trigger","Component","ElementRef","EventEmitter","Inject","Optional","ChangeDetectorRef","ViewChild","ViewEncapsulation","ChangeDetectionStrategy","Injectable","InjectionToken","Injector","SkipSelf","TemplateRef","Directive","Input","NgModule","DOCUMENT","Location","CommonModule","BasePortalOutlet","CdkPortalOutlet","ComponentPortal","PortalInjector","TemplatePortal","PortalModule","FocusTrapFactory","ESCAPE","Subject","defer","of","filter","take","startWith","Directionality","Overlay","OverlayConfig","OverlayContainer","OverlayModule","MatCommonModule","ɵngcc0","ɵngcc1","ɵngcc2","ɵngcc3","ɵngcc4","MatDialogContainer_ng_template_0_Template","rf","ctx","MatDialogConfig","role","panelClass","hasBackdrop","backdropClass","disableClose","width","height","maxWidth","data","ariaDescribedBy","ariaLabel","autoFocus","restoreFocus","closeOnNavigation","animationBody","opacity","transform","matDialogAnimations","dialogContainer","slideDialog","throwMatDialogContentAlreadyAttachedError","Error","MatDialogContainer","_elementRef","_focusTrapFactory","_changeDetectorRef","_document","_config","_elementFocusedBeforeDialogWasOpened","_state","_animationStateChanged","_ariaLabelledBy","portal","_portalOutlet","hasAttached","_savePreviouslyFocusedElement","attachComponentPortal","attachTemplatePortal","_focusTrap","create","nativeElement","focusInitialElementWhenReady","toFocus","focus","destroy","activeElement","Promise","resolve","then","event","toState","_trapFocus","_restoreFocus","emit","markForCheck","ɵfac","MatDialogContainer_Factory","t","ɵɵdirectiveInject","ɵcmp","ɵɵdefineComponent","type","selectors","viewQuery","MatDialogContainer_Query","ɵɵviewQuery","_t","ɵɵqueryRefresh","ɵɵloadQuery","first","hostAttrs","hostVars","hostBindings","MatDialogContainer_HostBindings","ɵɵsyntheticHostListener","MatDialogContainer_animation_dialogContainer_start_HostBindingHandler","$event","_onAnimationStart","MatDialogContainer_animation_dialogContainer_done_HostBindingHandler","_onAnimationDone","ɵɵattribute","_id","ɵɵsyntheticHostProperty","features","ɵɵInheritDefinitionFeature","decls","vars","consts","template","MatDialogContainer_Template","ɵɵtemplate","directives","styles","encapsulation","animation","ctorParameters","undefined","decorators","args","propDecorators","ngDevMode","ɵsetClassMetadata","selector","None","changeDetection","Default","animations","host","uniqueId","MatDialogRef","_overlayRef","_containerInstance","_location","id","_afterOpened","_afterClosed","_beforeClosed","pipe","phaseName","subscribe","next","complete","dispose","detachments","_result","componentInstance","keydownEvents","keyCode","close","dialogResult","detachBackdrop","_startExitAnimation","asObservable","backdropClick","position","strategy","_getPositionStrategy","left","right","centerHorizontally","top","bottom","centerVertically","updatePosition","afterOpened","beforeClosed","getConfig","positionStrategy","MAT_DIALOG_DATA","MAT_DIALOG_DEFAULT_OPTIONS","MAT_DIALOG_SCROLL_STRATEGY","MAT_DIALOG_SCROLL_STRATEGY_FACTORY","overlay","scrollStrategies","block","MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY","MAT_DIALOG_SCROLL_STRATEGY_PROVIDER","provide","deps","useFactory","MatDialog","_overlay","_injector","_defaultOptions","scrollStrategy","_parentDialog","_overlayContainer","_openDialogsAtThisLevel","_afterAllClosedAtThisLevel","_afterOpenedAtThisLevel","_ariaHiddenElements","Map","afterAllClosed","openDialogs","length","_afterAllClosed","_scrollStrategy","parent","componentOrTemplateRef","config","_applyConfigDefaults","getDialogById","overlayRef","_createOverlay","_attachDialogContainer","dialogRef","_attachDialogContent","_hideNonDialogContentFromAssistiveTechnology","push","afterClosed","_removeOpenDialog","_closeDialogs","find","dialog","overlayConfig","_getOverlayConfig","dialogConfig","state$$1","global","direction","minWidth","minHeight","maxHeight","disposeOnNavigation","userInjector","viewContainerRef","injector","WeakMap","containerPortal","containerRef","attach","instance","$implicit","_createInjector","contentRef","updateSize","injectionTokens","get","set","value","change","index","indexOf","splice","forEach","previousValue","element","setAttribute","removeAttribute","clear","overlayContainer","getContainerElement","parentElement","siblings","children","i","sibling","nodeName","hasAttribute","getAttribute","dialogs","MatDialog_Factory","ɵɵinject","ɵprov","ɵɵdefineInjectable","token","factory","defaultOptions","Object","assign","dialogElementUid","MatDialogClose","_dialog","getClosestDialog","changes","proxiedChange","currentValue","MatDialogClose_Factory","ɵdir","ɵɵdefineDirective","MatDialogClose_HostBindings","ɵɵlistener","MatDialogClose_click_HostBindingHandler","inputs","_matDialogClose","exportAs","ɵɵNgOnChangesFeature","MatDialogTitle","_dialogRef","container","MatDialogTitle_Factory","MatDialogTitle_HostBindings","ɵɵhostProperty","MatDialogContent","MatDialogContent_Factory","MatDialogActions","MatDialogActions_Factory","classList","contains","MatDialogModule","MatDialogModule_Factory","ɵmod","ɵɵdefineNgModule","ɵinj","ɵɵdefineInjector","providers","imports","exports","declarations","entryComponents","ngJitMode","ɵɵsetNgModuleScope"],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { animate, state, style, transition, trigger } from '@angular/animations';\nimport { Component, ElementRef, EventEmitter, Inject, Optional, ChangeDetectorRef, ViewChild, ViewEncapsulation, ChangeDetectionStrategy, Injectable, InjectionToken, Injector, SkipSelf, TemplateRef, Directive, Input, NgModule } from '@angular/core';\nimport { DOCUMENT, Location, CommonModule } from '@angular/common';\nimport { BasePortalOutlet, CdkPortalOutlet, ComponentPortal, PortalInjector, TemplatePortal, PortalModule } from '@angular/cdk/portal';\nimport { FocusTrapFactory } from '@angular/cdk/a11y';\nimport { ESCAPE } from '@angular/cdk/keycodes';\nimport { Subject, defer, of } from 'rxjs';\nimport { filter, take, startWith } from 'rxjs/operators';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { Overlay, OverlayConfig, OverlayContainer, OverlayModule } from '@angular/cdk/overlay';\nimport { MatCommonModule } from '@angular/material/core';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * Configuration for opening a modal dialog with the MatDialog service.\n * @template D\n */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/a11y';\nimport * as ɵngcc2 from '@angular/cdk/portal';\nimport * as ɵngcc3 from '@angular/cdk/overlay';\nimport * as ɵngcc4 from '@angular/common';\n\nfunction MatDialogContainer_ng_template_0_Template(rf, ctx) { }\nclass MatDialogConfig {\n    constructor() {\n        /**\n         * The ARIA role of the dialog element.\n         */\n        this.role = 'dialog';\n        /**\n         * Custom class for the overlay pane.\n         */\n        this.panelClass = '';\n        /**\n         * Whether the dialog has a backdrop.\n         */\n        this.hasBackdrop = true;\n        /**\n         * Custom class for the backdrop,\n         */\n        this.backdropClass = '';\n        /**\n         * Whether the user can use escape or clicking on the backdrop to close the modal.\n         */\n        this.disableClose = false;\n        /**\n         * Width of the dialog.\n         */\n        this.width = '';\n        /**\n         * Height of the dialog.\n         */\n        this.height = '';\n        /**\n         * Max-width of the dialog. If a number is provided, pixel units are assumed. Defaults to 80vw\n         */\n        this.maxWidth = '80vw';\n        /**\n         * Data being injected into the child component.\n         */\n        this.data = null;\n        /**\n         * ID of the element that describes the dialog.\n         */\n        this.ariaDescribedBy = null;\n        /**\n         * Aria label to assign to the dialog element\n         */\n        this.ariaLabel = null;\n        /**\n         * Whether the dialog should focus the first focusable element on open.\n         */\n        this.autoFocus = true;\n        /**\n         * Whether the dialog should restore focus to the\n         * previously-focused element, after it's closed.\n         */\n        this.restoreFocus = true;\n        /**\n         * Whether the dialog should close when the user goes backwards/forwards in history.\n         * Note that this usually doesn't include clicking on links (unless the user is using\n         * the `HashLocationStrategy`).\n         */\n        this.closeOnNavigation = true;\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst animationBody = [\n    // Note: The `enter` animation transitions to `transform: none`, because for some reason\n    // specifying the transform explicitly, causes IE both to blur the dialog content and\n    // decimate the animation performance. Leaving it as `none` solves both issues.\n    state('void, exit', style({ opacity: 0, transform: 'scale(0.7)' })),\n    state('enter', style({ transform: 'none' })),\n    transition('* => enter', animate('150ms cubic-bezier(0, 0, 0.2, 1)', style({ transform: 'none', opacity: 1 }))),\n    transition('* => void, * => exit', animate('75ms cubic-bezier(0.4, 0.0, 0.2, 1)', style({ opacity: 0 }))),\n];\n/** *\n * Animations used by MatDialog.\n * \\@docs-private\n  @type {?} */\nconst matDialogAnimations = {\n    /** Animation that is applied on the dialog container by defalt. */\n    dialogContainer: trigger('dialogContainer', animationBody),\n    /** @deprecated @breaking-change 8.0.0 Use `matDialogAnimations.dialogContainer` instead. */\n    slideDialog: trigger('slideDialog', animationBody)\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * Throws an exception for the case when a ComponentPortal is\n * attached to a DomPortalOutlet without an origin.\n * \\@docs-private\n * @return {?}\n */\nfunction throwMatDialogContentAlreadyAttachedError() {\n    throw Error('Attempting to attach dialog content after content is already attached');\n}\n/**\n * Internal component that wraps user-provided dialog content.\n * Animation is based on https://material.io/guidelines/motion/choreography.html.\n * \\@docs-private\n */\nclass MatDialogContainer extends BasePortalOutlet {\n    /**\n     * @param {?} _elementRef\n     * @param {?} _focusTrapFactory\n     * @param {?} _changeDetectorRef\n     * @param {?} _document\n     * @param {?} _config\n     */\n    constructor(_elementRef, _focusTrapFactory, _changeDetectorRef, _document, _config) {\n        super();\n        this._elementRef = _elementRef;\n        this._focusTrapFactory = _focusTrapFactory;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._document = _document;\n        this._config = _config;\n        /**\n         * Element that was focused before the dialog was opened. Save this to restore upon close.\n         */\n        this._elementFocusedBeforeDialogWasOpened = null;\n        /**\n         * State of the dialog animation.\n         */\n        this._state = 'enter';\n        /**\n         * Emits when an animation state changes.\n         */\n        this._animationStateChanged = new EventEmitter();\n        /**\n         * ID of the element that should be considered as the dialog's label.\n         */\n        this._ariaLabelledBy = null;\n    }\n    /**\n     * Attach a ComponentPortal as content to this dialog container.\n     * @template T\n     * @param {?} portal Portal to be attached as the dialog content.\n     * @return {?}\n     */\n    attachComponentPortal(portal) {\n        if (this._portalOutlet.hasAttached()) {\n            throwMatDialogContentAlreadyAttachedError();\n        }\n        this._savePreviouslyFocusedElement();\n        return this._portalOutlet.attachComponentPortal(portal);\n    }\n    /**\n     * Attach a TemplatePortal as content to this dialog container.\n     * @template C\n     * @param {?} portal Portal to be attached as the dialog content.\n     * @return {?}\n     */\n    attachTemplatePortal(portal) {\n        if (this._portalOutlet.hasAttached()) {\n            throwMatDialogContentAlreadyAttachedError();\n        }\n        this._savePreviouslyFocusedElement();\n        return this._portalOutlet.attachTemplatePortal(portal);\n    }\n    /**\n     * Moves the focus inside the focus trap.\n     * @return {?}\n     */\n    _trapFocus() {\n        if (!this._focusTrap) {\n            this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n        }\n        // If were to attempt to focus immediately, then the content of the dialog would not yet be\n        // ready in instances where change detection has to run first. To deal with this, we simply\n        // wait for the microtask queue to be empty.\n        if (this._config.autoFocus) {\n            this._focusTrap.focusInitialElementWhenReady();\n        }\n    }\n    /**\n     * Restores focus to the element that was focused before the dialog opened.\n     * @return {?}\n     */\n    _restoreFocus() {\n        /** @type {?} */\n        const toFocus = this._elementFocusedBeforeDialogWasOpened;\n        // We need the extra check, because IE can set the `activeElement` to null in some cases.\n        if (this._config.restoreFocus && toFocus && typeof toFocus.focus === 'function') {\n            toFocus.focus();\n        }\n        if (this._focusTrap) {\n            this._focusTrap.destroy();\n        }\n    }\n    /**\n     * Saves a reference to the element that was focused before the dialog was opened.\n     * @return {?}\n     */\n    _savePreviouslyFocusedElement() {\n        if (this._document) {\n            this._elementFocusedBeforeDialogWasOpened = /** @type {?} */ (this._document.activeElement);\n            // Note that there is no focus method when rendering on the server.\n            if (this._elementRef.nativeElement.focus) {\n                // Move focus onto the dialog immediately in order to prevent the user from accidentally\n                // opening multiple dialogs at the same time. Needs to be async, because the element\n                // may not be focusable immediately.\n                Promise.resolve().then(() => this._elementRef.nativeElement.focus());\n            }\n        }\n    }\n    /**\n     * Callback, invoked whenever an animation on the host completes.\n     * @param {?} event\n     * @return {?}\n     */\n    _onAnimationDone(event) {\n        if (event.toState === 'enter') {\n            this._trapFocus();\n        }\n        else if (event.toState === 'exit') {\n            this._restoreFocus();\n        }\n        this._animationStateChanged.emit(event);\n    }\n    /**\n     * Callback, invoked when an animation on the host starts.\n     * @param {?} event\n     * @return {?}\n     */\n    _onAnimationStart(event) {\n        this._animationStateChanged.emit(event);\n    }\n    /**\n     * Starts the dialog exit animation.\n     * @return {?}\n     */\n    _startExitAnimation() {\n        this._state = 'exit';\n        // Mark the container for check so it can react if the\n        // view container is using OnPush change detection.\n        this._changeDetectorRef.markForCheck();\n    }\n}\nMatDialogContainer.ɵfac = function MatDialogContainer_Factory(t) { return new (t || MatDialogContainer)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.FocusTrapFactory), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(DOCUMENT, 8), ɵngcc0.ɵɵdirectiveInject(MatDialogConfig)); };\nMatDialogContainer.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: MatDialogContainer, selectors: [[\"mat-dialog-container\"]], viewQuery: function MatDialogContainer_Query(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(CdkPortalOutlet, 5);\n    } if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._portalOutlet = _t.first);\n    } }, hostAttrs: [\"tabindex\", \"-1\", \"aria-modal\", \"true\", 1, \"mat-dialog-container\"], hostVars: 6, hostBindings: function MatDialogContainer_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵsyntheticHostListener(\"@dialogContainer.start\", function MatDialogContainer_animation_dialogContainer_start_HostBindingHandler($event) { return ctx._onAnimationStart($event); })(\"@dialogContainer.done\", function MatDialogContainer_animation_dialogContainer_done_HostBindingHandler($event) { return ctx._onAnimationDone($event); });\n    } if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"id\", ctx._id)(\"role\", ctx._config.role)(\"aria-labelledby\", ctx._config.ariaLabel ? null : ctx._ariaLabelledBy)(\"aria-label\", ctx._config.ariaLabel)(\"aria-describedby\", ctx._config.ariaDescribedBy || null);\n        ɵngcc0.ɵɵsyntheticHostProperty(\"@dialogContainer\", ctx._state);\n    } }, features: [ɵngcc0.ɵɵInheritDefinitionFeature], decls: 1, vars: 0, consts: [[\"cdkPortalOutlet\", \"\"]], template: function MatDialogContainer_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵtemplate(0, MatDialogContainer_ng_template_0_Template, 0, 0, \"ng-template\", 0);\n    } }, directives: [ɵngcc2.CdkPortalOutlet], styles: [\".mat-dialog-container{display:block;padding:24px;border-radius:4px;box-sizing:border-box;overflow:auto;outline:0;width:100%;height:100%;min-height:inherit;max-height:inherit}@media screen and (-ms-high-contrast:active){.mat-dialog-container{outline:solid 1px}}.mat-dialog-content{display:block;margin:0 -24px;padding:0 24px;max-height:65vh;overflow:auto;-webkit-overflow-scrolling:touch}.mat-dialog-title{margin:0 0 20px;display:block}.mat-dialog-actions{padding:8px 0;display:flex;flex-wrap:wrap;min-height:52px;align-items:center;margin-bottom:-24px}.mat-dialog-actions[align=end]{justify-content:flex-end}.mat-dialog-actions[align=center]{justify-content:center}.mat-dialog-actions .mat-button+.mat-button,.mat-dialog-actions .mat-button+.mat-raised-button,.mat-dialog-actions .mat-raised-button+.mat-button,.mat-dialog-actions .mat-raised-button+.mat-raised-button{margin-left:8px}[dir=rtl] .mat-dialog-actions .mat-button+.mat-button,[dir=rtl] .mat-dialog-actions .mat-button+.mat-raised-button,[dir=rtl] .mat-dialog-actions .mat-raised-button+.mat-button,[dir=rtl] .mat-dialog-actions .mat-raised-button+.mat-raised-button{margin-left:0;margin-right:8px}\"], encapsulation: 2, data: { animation: [matDialogAnimations.dialogContainer] } });\n/** @nocollapse */\nMatDialogContainer.ctorParameters = () => [\n    { type: ElementRef },\n    { type: FocusTrapFactory },\n    { type: ChangeDetectorRef },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DOCUMENT,] }] },\n    { type: MatDialogConfig }\n];\nMatDialogContainer.propDecorators = {\n    _portalOutlet: [{ type: ViewChild, args: [CdkPortalOutlet,] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatDialogContainer, [{\n        type: Component,\n        args: [{ selector: 'mat-dialog-container',\n                template: \"<ng-template cdkPortalOutlet></ng-template>\",\n                styles: [\".mat-dialog-container{display:block;padding:24px;border-radius:4px;box-sizing:border-box;overflow:auto;outline:0;width:100%;height:100%;min-height:inherit;max-height:inherit}@media screen and (-ms-high-contrast:active){.mat-dialog-container{outline:solid 1px}}.mat-dialog-content{display:block;margin:0 -24px;padding:0 24px;max-height:65vh;overflow:auto;-webkit-overflow-scrolling:touch}.mat-dialog-title{margin:0 0 20px;display:block}.mat-dialog-actions{padding:8px 0;display:flex;flex-wrap:wrap;min-height:52px;align-items:center;margin-bottom:-24px}.mat-dialog-actions[align=end]{justify-content:flex-end}.mat-dialog-actions[align=center]{justify-content:center}.mat-dialog-actions .mat-button+.mat-button,.mat-dialog-actions .mat-button+.mat-raised-button,.mat-dialog-actions .mat-raised-button+.mat-button,.mat-dialog-actions .mat-raised-button+.mat-raised-button{margin-left:8px}[dir=rtl] .mat-dialog-actions .mat-button+.mat-button,[dir=rtl] .mat-dialog-actions .mat-button+.mat-raised-button,[dir=rtl] .mat-dialog-actions .mat-raised-button+.mat-button,[dir=rtl] .mat-dialog-actions .mat-raised-button+.mat-raised-button{margin-left:0;margin-right:8px}\"],\n                encapsulation: ViewEncapsulation.None,\n                // Using OnPush for dialogs caused some G3 sync issues. Disabled until we can track them down.\n                // tslint:disable-next-line:validate-decorators\n                changeDetection: ChangeDetectionStrategy.Default,\n                animations: [matDialogAnimations.dialogContainer],\n                host: {\n                    'class': 'mat-dialog-container',\n                    'tabindex': '-1',\n                    'aria-modal': 'true',\n                    '[attr.id]': '_id',\n                    '[attr.role]': '_config.role',\n                    '[attr.aria-labelledby]': '_config.ariaLabel ? null : _ariaLabelledBy',\n                    '[attr.aria-label]': '_config.ariaLabel',\n                    '[attr.aria-describedby]': '_config.ariaDescribedBy || null',\n                    '[@dialogContainer]': '_state',\n                    '(@dialogContainer.start)': '_onAnimationStart($event)',\n                    '(@dialogContainer.done)': '_onAnimationDone($event)'\n                } }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc1.FocusTrapFactory }, { type: ɵngcc0.ChangeDetectorRef }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [DOCUMENT]\n            }] }, { type: MatDialogConfig }]; }, { _portalOutlet: [{\n            type: ViewChild,\n            args: [CdkPortalOutlet]\n        }] }); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/** @type {?} */\nlet uniqueId = 0;\n/**\n * Reference to a dialog opened via the MatDialog service.\n * @template T, R\n */\nclass MatDialogRef {\n    /**\n     * @param {?} _overlayRef\n     * @param {?} _containerInstance\n     * @param {?=} _location\n     * @param {?=} id\n     */\n    constructor(_overlayRef, _containerInstance, \n    // @breaking-change 8.0.0 `_location` parameter to be removed.\n    _location, id = `mat-dialog-${uniqueId++}`) {\n        this._overlayRef = _overlayRef;\n        this._containerInstance = _containerInstance;\n        this.id = id;\n        /**\n         * Whether the user is allowed to close the dialog.\n         */\n        this.disableClose = this._containerInstance._config.disableClose;\n        /**\n         * Subject for notifying the user that the dialog has finished opening.\n         */\n        this._afterOpened = new Subject();\n        /**\n         * Subject for notifying the user that the dialog has finished closing.\n         */\n        this._afterClosed = new Subject();\n        /**\n         * Subject for notifying the user that the dialog has started closing.\n         */\n        this._beforeClosed = new Subject();\n        // Pass the id along to the container.\n        _containerInstance._id = id;\n        // Emit when opening animation completes\n        _containerInstance._animationStateChanged.pipe(filter(event => event.phaseName === 'done' && event.toState === 'enter'), take(1))\n            .subscribe(() => {\n            this._afterOpened.next();\n            this._afterOpened.complete();\n        });\n        // Dispose overlay when closing animation is complete\n        _containerInstance._animationStateChanged.pipe(filter(event => event.phaseName === 'done' && event.toState === 'exit'), take(1)).subscribe(() => this._overlayRef.dispose());\n        _overlayRef.detachments().subscribe(() => {\n            this._beforeClosed.next(this._result);\n            this._beforeClosed.complete();\n            this._afterClosed.next(this._result);\n            this._afterClosed.complete();\n            this.componentInstance = /** @type {?} */ ((null));\n            this._overlayRef.dispose();\n        });\n        _overlayRef.keydownEvents()\n            .pipe(filter(event => event.keyCode === ESCAPE && !this.disableClose))\n            .subscribe(() => this.close());\n    }\n    /**\n     * Close the dialog.\n     * @param {?=} dialogResult Optional result to return to the dialog opener.\n     * @return {?}\n     */\n    close(dialogResult) {\n        this._result = dialogResult;\n        // Transition the backdrop in parallel to the dialog.\n        this._containerInstance._animationStateChanged.pipe(filter(event => event.phaseName === 'start'), take(1))\n            .subscribe(() => {\n            this._beforeClosed.next(dialogResult);\n            this._beforeClosed.complete();\n            this._overlayRef.detachBackdrop();\n        });\n        this._containerInstance._startExitAnimation();\n    }\n    /**\n     * Gets an observable that is notified when the dialog is finished opening.\n     * @return {?}\n     */\n    afterOpened() {\n        return this._afterOpened.asObservable();\n    }\n    /**\n     * Gets an observable that is notified when the dialog is finished closing.\n     * @return {?}\n     */\n    afterClosed() {\n        return this._afterClosed.asObservable();\n    }\n    /**\n     * Gets an observable that is notified when the dialog has started closing.\n     * @return {?}\n     */\n    beforeClosed() {\n        return this._beforeClosed.asObservable();\n    }\n    /**\n     * Gets an observable that emits when the overlay's backdrop has been clicked.\n     * @return {?}\n     */\n    backdropClick() {\n        return this._overlayRef.backdropClick();\n    }\n    /**\n     * Gets an observable that emits when keydown events are targeted on the overlay.\n     * @return {?}\n     */\n    keydownEvents() {\n        return this._overlayRef.keydownEvents();\n    }\n    /**\n     * Updates the dialog's position.\n     * @param {?=} position New dialog position.\n     * @return {?}\n     */\n    updatePosition(position) {\n        /** @type {?} */\n        let strategy = this._getPositionStrategy();\n        if (position && (position.left || position.right)) {\n            position.left ? strategy.left(position.left) : strategy.right(position.right);\n        }\n        else {\n            strategy.centerHorizontally();\n        }\n        if (position && (position.top || position.bottom)) {\n            position.top ? strategy.top(position.top) : strategy.bottom(position.bottom);\n        }\n        else {\n            strategy.centerVertically();\n        }\n        this._overlayRef.updatePosition();\n        return this;\n    }\n    /**\n     * Updates the dialog's width and height.\n     * @param {?=} width New width of the dialog.\n     * @param {?=} height New height of the dialog.\n     * @return {?}\n     */\n    updateSize(width = '', height = '') {\n        this._getPositionStrategy().width(width).height(height);\n        this._overlayRef.updatePosition();\n        return this;\n    }\n    /**\n     * Gets an observable that is notified when the dialog is finished opening.\n     * @deprecated Use `afterOpened` instead.\n     * \\@breaking-change 8.0.0\n     * @return {?}\n     */\n    afterOpen() {\n        return this.afterOpened();\n    }\n    /**\n     * Gets an observable that is notified when the dialog has started closing.\n     * @deprecated Use `beforeClosed` instead.\n     * \\@breaking-change 8.0.0\n     * @return {?}\n     */\n    beforeClose() {\n        return this.beforeClosed();\n    }\n    /**\n     * Fetches the position strategy object from the overlay ref.\n     * @return {?}\n     */\n    _getPositionStrategy() {\n        return /** @type {?} */ (this._overlayRef.getConfig().positionStrategy);\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/** *\n * Injection token that can be used to access the data that was passed in to a dialog.\n  @type {?} */\nconst MAT_DIALOG_DATA = new InjectionToken('MatDialogData');\n/** *\n * Injection token that can be used to specify default dialog options.\n  @type {?} */\nconst MAT_DIALOG_DEFAULT_OPTIONS = new InjectionToken('mat-dialog-default-options');\n/** *\n * Injection token that determines the scroll handling while the dialog is open.\n  @type {?} */\nconst MAT_DIALOG_SCROLL_STRATEGY = new InjectionToken('mat-dialog-scroll-strategy');\n/**\n * \\@docs-private\n * @param {?} overlay\n * @return {?}\n */\nfunction MAT_DIALOG_SCROLL_STRATEGY_FACTORY(overlay) {\n    return () => overlay.scrollStrategies.block();\n}\n/**\n * \\@docs-private\n * @param {?} overlay\n * @return {?}\n */\nfunction MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay) {\n    return () => overlay.scrollStrategies.block();\n}\n/** *\n * \\@docs-private\n  @type {?} */\nconst MAT_DIALOG_SCROLL_STRATEGY_PROVIDER = {\n    provide: MAT_DIALOG_SCROLL_STRATEGY,\n    deps: [Overlay],\n    useFactory: MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n/**\n * Service to open Material Design modal dialogs.\n */\nclass MatDialog {\n    /**\n     * @param {?} _overlay\n     * @param {?} _injector\n     * @param {?} _location\n     * @param {?} _defaultOptions\n     * @param {?} scrollStrategy\n     * @param {?} _parentDialog\n     * @param {?} _overlayContainer\n     */\n    constructor(_overlay, _injector, _location, _defaultOptions, scrollStrategy, _parentDialog, _overlayContainer) {\n        this._overlay = _overlay;\n        this._injector = _injector;\n        this._location = _location;\n        this._defaultOptions = _defaultOptions;\n        this._parentDialog = _parentDialog;\n        this._overlayContainer = _overlayContainer;\n        this._openDialogsAtThisLevel = [];\n        this._afterAllClosedAtThisLevel = new Subject();\n        this._afterOpenedAtThisLevel = new Subject();\n        this._ariaHiddenElements = new Map();\n        /**\n         * Stream that emits when all open dialog have finished closing.\n         * Will emit on subscribe if there are no open dialogs to begin with.\n         */\n        this.afterAllClosed = defer(() => this.openDialogs.length ?\n            this._afterAllClosed :\n            this._afterAllClosed.pipe(startWith(undefined)));\n        this._scrollStrategy = scrollStrategy;\n    }\n    /**\n     * Keeps track of the currently-open dialogs.\n     * @return {?}\n     */\n    get openDialogs() {\n        return this._parentDialog ? this._parentDialog.openDialogs : this._openDialogsAtThisLevel;\n    }\n    /**\n     * Stream that emits when a dialog has been opened.\n     * @return {?}\n     */\n    get afterOpened() {\n        return this._parentDialog ? this._parentDialog.afterOpened : this._afterOpenedAtThisLevel;\n    }\n    /**\n     * Stream that emits when a dialog has been opened.\n     * @deprecated Use `afterOpened` instead.\n     * \\@breaking-change 8.0.0\n     * @return {?}\n     */\n    get afterOpen() {\n        return this.afterOpened;\n    }\n    /**\n     * @return {?}\n     */\n    get _afterAllClosed() {\n        /** @type {?} */\n        const parent = this._parentDialog;\n        return parent ? parent._afterAllClosed : this._afterAllClosedAtThisLevel;\n    }\n    /**\n     * Opens a modal dialog containing the given component.\n     * @template T, D, R\n     * @param {?} componentOrTemplateRef Type of the component to load into the dialog,\n     *     or a TemplateRef to instantiate as the dialog content.\n     * @param {?=} config Extra configuration options.\n     * @return {?} Reference to the newly-opened dialog.\n     */\n    open(componentOrTemplateRef, config) {\n        config = _applyConfigDefaults(config, this._defaultOptions || new MatDialogConfig());\n        if (config.id && this.getDialogById(config.id)) {\n            throw Error(`Dialog with id \"${config.id}\" exists already. The dialog id must be unique.`);\n        }\n        /** @type {?} */\n        const overlayRef = this._createOverlay(config);\n        /** @type {?} */\n        const dialogContainer = this._attachDialogContainer(overlayRef, config);\n        /** @type {?} */\n        const dialogRef = this._attachDialogContent(componentOrTemplateRef, dialogContainer, overlayRef, config);\n        // If this is the first dialog that we're opening, hide all the non-overlay content.\n        if (!this.openDialogs.length) {\n            this._hideNonDialogContentFromAssistiveTechnology();\n        }\n        this.openDialogs.push(dialogRef);\n        dialogRef.afterClosed().subscribe(() => this._removeOpenDialog(dialogRef));\n        this.afterOpened.next(dialogRef);\n        return dialogRef;\n    }\n    /**\n     * Closes all of the currently-open dialogs.\n     * @return {?}\n     */\n    closeAll() {\n        this._closeDialogs(this.openDialogs);\n    }\n    /**\n     * Finds an open dialog by its id.\n     * @param {?} id ID to use when looking up the dialog.\n     * @return {?}\n     */\n    getDialogById(id) {\n        return this.openDialogs.find(dialog => dialog.id === id);\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        // Only close the dialogs at this level on destroy\n        // since the parent service may still be active.\n        this._closeDialogs(this._openDialogsAtThisLevel);\n    }\n    /**\n     * Creates the overlay into which the dialog will be loaded.\n     * @param {?} config The dialog configuration.\n     * @return {?} A promise resolving to the OverlayRef for the created overlay.\n     */\n    _createOverlay(config) {\n        /** @type {?} */\n        const overlayConfig = this._getOverlayConfig(config);\n        return this._overlay.create(overlayConfig);\n    }\n    /**\n     * Creates an overlay config from a dialog config.\n     * @param {?} dialogConfig The dialog configuration.\n     * @return {?} The overlay configuration.\n     */\n    _getOverlayConfig(dialogConfig) {\n        /** @type {?} */\n        const state$$1 = new OverlayConfig({\n            positionStrategy: this._overlay.position().global(),\n            scrollStrategy: dialogConfig.scrollStrategy || this._scrollStrategy(),\n            panelClass: dialogConfig.panelClass,\n            hasBackdrop: dialogConfig.hasBackdrop,\n            direction: dialogConfig.direction,\n            minWidth: dialogConfig.minWidth,\n            minHeight: dialogConfig.minHeight,\n            maxWidth: dialogConfig.maxWidth,\n            maxHeight: dialogConfig.maxHeight,\n            disposeOnNavigation: dialogConfig.closeOnNavigation\n        });\n        if (dialogConfig.backdropClass) {\n            state$$1.backdropClass = dialogConfig.backdropClass;\n        }\n        return state$$1;\n    }\n    /**\n     * Attaches an MatDialogContainer to a dialog's already-created overlay.\n     * @param {?} overlay Reference to the dialog's underlying overlay.\n     * @param {?} config The dialog configuration.\n     * @return {?} A promise resolving to a ComponentRef for the attached container.\n     */\n    _attachDialogContainer(overlay, config) {\n        /** @type {?} */\n        const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n        /** @type {?} */\n        const injector = new PortalInjector(userInjector || this._injector, new WeakMap([\n            [MatDialogConfig, config]\n        ]));\n        /** @type {?} */\n        const containerPortal = new ComponentPortal(MatDialogContainer, config.viewContainerRef, injector);\n        /** @type {?} */\n        const containerRef = overlay.attach(containerPortal);\n        return containerRef.instance;\n    }\n    /**\n     * Attaches the user-provided component to the already-created MatDialogContainer.\n     * @template T, R\n     * @param {?} componentOrTemplateRef The type of component being loaded into the dialog,\n     *     or a TemplateRef to instantiate as the content.\n     * @param {?} dialogContainer Reference to the wrapping MatDialogContainer.\n     * @param {?} overlayRef Reference to the overlay in which the dialog resides.\n     * @param {?} config The dialog configuration.\n     * @return {?} A promise resolving to the MatDialogRef that should be returned to the user.\n     */\n    _attachDialogContent(componentOrTemplateRef, dialogContainer, overlayRef, config) {\n        /** @type {?} */\n        const dialogRef = new MatDialogRef(overlayRef, dialogContainer, this._location, config.id);\n        // When the dialog backdrop is clicked, we want to close it.\n        if (config.hasBackdrop) {\n            overlayRef.backdropClick().subscribe(() => {\n                if (!dialogRef.disableClose) {\n                    dialogRef.close();\n                }\n            });\n        }\n        if (componentOrTemplateRef instanceof TemplateRef) {\n            dialogContainer.attachTemplatePortal(new TemplatePortal(componentOrTemplateRef, /** @type {?} */ ((null)), /** @type {?} */ ({ $implicit: config.data, dialogRef })));\n        }\n        else {\n            /** @type {?} */\n            const injector = this._createInjector(config, dialogRef, dialogContainer);\n            /** @type {?} */\n            const contentRef = dialogContainer.attachComponentPortal(new ComponentPortal(componentOrTemplateRef, undefined, injector));\n            dialogRef.componentInstance = contentRef.instance;\n        }\n        dialogRef\n            .updateSize(config.width, config.height)\n            .updatePosition(config.position);\n        return dialogRef;\n    }\n    /**\n     * Creates a custom injector to be used inside the dialog. This allows a component loaded inside\n     * of a dialog to close itself and, optionally, to return a value.\n     * @template T\n     * @param {?} config Config object that is used to construct the dialog.\n     * @param {?} dialogRef Reference to the dialog.\n     * @param {?} dialogContainer\n     * @return {?} The custom injector that can be used inside the dialog.\n     */\n    _createInjector(config, dialogRef, dialogContainer) {\n        /** @type {?} */\n        const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n        /** @type {?} */\n        const injectionTokens = new WeakMap([\n            [MatDialogContainer, dialogContainer],\n            [MAT_DIALOG_DATA, config.data],\n            [MatDialogRef, dialogRef]\n        ]);\n        if (config.direction &&\n            (!userInjector || !userInjector.get(Directionality, null))) {\n            injectionTokens.set(Directionality, {\n                value: config.direction,\n                change: of()\n            });\n        }\n        return new PortalInjector(userInjector || this._injector, injectionTokens);\n    }\n    /**\n     * Removes a dialog from the array of open dialogs.\n     * @param {?} dialogRef Dialog to be removed.\n     * @return {?}\n     */\n    _removeOpenDialog(dialogRef) {\n        /** @type {?} */\n        const index = this.openDialogs.indexOf(dialogRef);\n        if (index > -1) {\n            this.openDialogs.splice(index, 1);\n            // If all the dialogs were closed, remove/restore the `aria-hidden`\n            // to a the siblings and emit to the `afterAllClosed` stream.\n            if (!this.openDialogs.length) {\n                this._ariaHiddenElements.forEach((previousValue, element) => {\n                    if (previousValue) {\n                        element.setAttribute('aria-hidden', previousValue);\n                    }\n                    else {\n                        element.removeAttribute('aria-hidden');\n                    }\n                });\n                this._ariaHiddenElements.clear();\n                this._afterAllClosed.next();\n            }\n        }\n    }\n    /**\n     * Hides all of the content that isn't an overlay from assistive technology.\n     * @return {?}\n     */\n    _hideNonDialogContentFromAssistiveTechnology() {\n        /** @type {?} */\n        const overlayContainer = this._overlayContainer.getContainerElement();\n        // Ensure that the overlay container is attached to the DOM.\n        if (overlayContainer.parentElement) {\n            /** @type {?} */\n            const siblings = overlayContainer.parentElement.children;\n            for (let i = siblings.length - 1; i > -1; i--) {\n                /** @type {?} */\n                let sibling = siblings[i];\n                if (sibling !== overlayContainer &&\n                    sibling.nodeName !== 'SCRIPT' &&\n                    sibling.nodeName !== 'STYLE' &&\n                    !sibling.hasAttribute('aria-live')) {\n                    this._ariaHiddenElements.set(sibling, sibling.getAttribute('aria-hidden'));\n                    sibling.setAttribute('aria-hidden', 'true');\n                }\n            }\n        }\n    }\n    /**\n     * Closes all of the dialogs in an array.\n     * @param {?} dialogs\n     * @return {?}\n     */\n    _closeDialogs(dialogs) {\n        /** @type {?} */\n        let i = dialogs.length;\n        while (i--) {\n            // The `_openDialogs` property isn't updated after close until the rxjs subscription\n            // runs on the next microtask, in addition to modifying the array as we're going\n            // through it. We loop through all of them and call close without assuming that\n            // they'll be removed from the list instantaneously.\n            dialogs[i].close();\n        }\n    }\n}\nMatDialog.ɵfac = function MatDialog_Factory(t) { return new (t || MatDialog)(ɵngcc0.ɵɵinject(ɵngcc3.Overlay), ɵngcc0.ɵɵinject(ɵngcc0.Injector), ɵngcc0.ɵɵinject(ɵngcc4.Location, 8), ɵngcc0.ɵɵinject(MAT_DIALOG_DEFAULT_OPTIONS, 8), ɵngcc0.ɵɵinject(MAT_DIALOG_SCROLL_STRATEGY), ɵngcc0.ɵɵinject(MatDialog, 12), ɵngcc0.ɵɵinject(ɵngcc3.OverlayContainer)); };\nMatDialog.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: MatDialog, factory: MatDialog.ɵfac });\n/** @nocollapse */\nMatDialog.ctorParameters = () => [\n    { type: Overlay },\n    { type: Injector },\n    { type: Location, decorators: [{ type: Optional }] },\n    { type: MatDialogConfig, decorators: [{ type: Optional }, { type: Inject, args: [MAT_DIALOG_DEFAULT_OPTIONS,] }] },\n    { type: undefined, decorators: [{ type: Inject, args: [MAT_DIALOG_SCROLL_STRATEGY,] }] },\n    { type: MatDialog, decorators: [{ type: Optional }, { type: SkipSelf }] },\n    { type: OverlayContainer }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatDialog, [{\n        type: Injectable\n    }], function () { return [{ type: ɵngcc3.Overlay }, { type: ɵngcc0.Injector }, { type: ɵngcc4.Location, decorators: [{\n                type: Optional\n            }] }, { type: MatDialogConfig, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [MAT_DIALOG_DEFAULT_OPTIONS]\n            }] }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [MAT_DIALOG_SCROLL_STRATEGY]\n            }] }, { type: MatDialog, decorators: [{\n                type: Optional\n            }, {\n                type: SkipSelf\n            }] }, { type: ɵngcc3.OverlayContainer }]; }, null); })();\n/**\n * Applies default options to the dialog config.\n * @param {?=} config Config to be modified.\n * @param {?=} defaultOptions Default options provided.\n * @return {?} The new configuration object.\n */\nfunction _applyConfigDefaults(config, defaultOptions) {\n    return Object.assign({}, defaultOptions, config);\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/** *\n * Counter used to generate unique IDs for dialog elements.\n  @type {?} */\nlet dialogElementUid = 0;\n/**\n * Button that will close the current dialog.\n */\nclass MatDialogClose {\n    /**\n     * @param {?} dialogRef\n     * @param {?} _elementRef\n     * @param {?} _dialog\n     */\n    constructor(dialogRef, _elementRef, _dialog) {\n        this.dialogRef = dialogRef;\n        this._elementRef = _elementRef;\n        this._dialog = _dialog;\n        /**\n         * Screenreader label for the button.\n         */\n        this.ariaLabel = 'Close dialog';\n    }\n    /**\n     * @return {?}\n     */\n    ngOnInit() {\n        if (!this.dialogRef) {\n            // When this directive is included in a dialog via TemplateRef (rather than being\n            // in a Component), the DialogRef isn't available via injection because embedded\n            // views cannot be given a custom injector. Instead, we look up the DialogRef by\n            // ID. This must occur in `onInit`, as the ID binding for the dialog container won't\n            // be resolved at constructor time.\n            this.dialogRef = /** @type {?} */ ((getClosestDialog(this._elementRef, this._dialog.openDialogs)));\n        }\n    }\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    ngOnChanges(changes) {\n        /** @type {?} */\n        const proxiedChange = changes[\"_matDialogClose\"] || changes[\"_matDialogCloseResult\"];\n        if (proxiedChange) {\n            this.dialogResult = proxiedChange.currentValue;\n        }\n    }\n}\nMatDialogClose.ɵfac = function MatDialogClose_Factory(t) { return new (t || MatDialogClose)(ɵngcc0.ɵɵdirectiveInject(MatDialogRef, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(MatDialog)); };\nMatDialogClose.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: MatDialogClose, selectors: [[\"button\", \"mat-dialog-close\", \"\"], [\"button\", \"matDialogClose\", \"\"]], hostAttrs: [\"type\", \"button\"], hostVars: 1, hostBindings: function MatDialogClose_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"click\", function MatDialogClose_click_HostBindingHandler() { return ctx.dialogRef.close(ctx.dialogResult); });\n    } if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"aria-label\", ctx.ariaLabel);\n    } }, inputs: { ariaLabel: [\"aria-label\", \"ariaLabel\"], dialogResult: [\"mat-dialog-close\", \"dialogResult\"], _matDialogClose: [\"matDialogClose\", \"_matDialogClose\"] }, exportAs: [\"matDialogClose\"], features: [ɵngcc0.ɵɵNgOnChangesFeature] });\n/** @nocollapse */\nMatDialogClose.ctorParameters = () => [\n    { type: MatDialogRef, decorators: [{ type: Optional }] },\n    { type: ElementRef },\n    { type: MatDialog }\n];\nMatDialogClose.propDecorators = {\n    ariaLabel: [{ type: Input, args: ['aria-label',] }],\n    dialogResult: [{ type: Input, args: ['mat-dialog-close',] }],\n    _matDialogClose: [{ type: Input, args: ['matDialogClose',] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatDialogClose, [{\n        type: Directive,\n        args: [{\n                selector: `button[mat-dialog-close], button[matDialogClose]`,\n                exportAs: 'matDialogClose',\n                host: {\n                    '(click)': 'dialogRef.close(dialogResult)',\n                    '[attr.aria-label]': 'ariaLabel',\n                    'type': 'button'\n                }\n            }]\n    }], function () { return [{ type: MatDialogRef, decorators: [{\n                type: Optional\n            }] }, { type: ɵngcc0.ElementRef }, { type: MatDialog }]; }, { ariaLabel: [{\n            type: Input,\n            args: ['aria-label']\n        }], dialogResult: [{\n            type: Input,\n            args: ['mat-dialog-close']\n        }], _matDialogClose: [{\n            type: Input,\n            args: ['matDialogClose']\n        }] }); })();\n/**\n * Title of a dialog element. Stays fixed to the top of the dialog when scrolling.\n */\nclass MatDialogTitle {\n    /**\n     * @param {?} _dialogRef\n     * @param {?} _elementRef\n     * @param {?} _dialog\n     */\n    constructor(_dialogRef, _elementRef, _dialog) {\n        this._dialogRef = _dialogRef;\n        this._elementRef = _elementRef;\n        this._dialog = _dialog;\n        this.id = `mat-dialog-title-${dialogElementUid++}`;\n    }\n    /**\n     * @return {?}\n     */\n    ngOnInit() {\n        if (!this._dialogRef) {\n            this._dialogRef = /** @type {?} */ ((getClosestDialog(this._elementRef, this._dialog.openDialogs)));\n        }\n        if (this._dialogRef) {\n            Promise.resolve().then(() => {\n                /** @type {?} */\n                const container = this._dialogRef._containerInstance;\n                if (container && !container._ariaLabelledBy) {\n                    container._ariaLabelledBy = this.id;\n                }\n            });\n        }\n    }\n}\nMatDialogTitle.ɵfac = function MatDialogTitle_Factory(t) { return new (t || MatDialogTitle)(ɵngcc0.ɵɵdirectiveInject(MatDialogRef, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(MatDialog)); };\nMatDialogTitle.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: MatDialogTitle, selectors: [[\"\", \"mat-dialog-title\", \"\"], [\"\", \"matDialogTitle\", \"\"]], hostAttrs: [1, \"mat-dialog-title\"], hostVars: 1, hostBindings: function MatDialogTitle_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵhostProperty(\"id\", ctx.id);\n    } }, inputs: { id: \"id\" }, exportAs: [\"matDialogTitle\"] });\n/** @nocollapse */\nMatDialogTitle.ctorParameters = () => [\n    { type: MatDialogRef, decorators: [{ type: Optional }] },\n    { type: ElementRef },\n    { type: MatDialog }\n];\nMatDialogTitle.propDecorators = {\n    id: [{ type: Input }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatDialogTitle, [{\n        type: Directive,\n        args: [{\n                selector: '[mat-dialog-title], [matDialogTitle]',\n                exportAs: 'matDialogTitle',\n                host: {\n                    'class': 'mat-dialog-title',\n                    '[id]': 'id'\n                }\n            }]\n    }], function () { return [{ type: MatDialogRef, decorators: [{\n                type: Optional\n            }] }, { type: ɵngcc0.ElementRef }, { type: MatDialog }]; }, { id: [{\n            type: Input\n        }] }); })();\n/**\n * Scrollable content container of a dialog.\n */\nclass MatDialogContent {\n}\nMatDialogContent.ɵfac = function MatDialogContent_Factory(t) { return new (t || MatDialogContent)(); };\nMatDialogContent.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: MatDialogContent, selectors: [[\"\", \"mat-dialog-content\", \"\"], [\"mat-dialog-content\"], [\"\", \"matDialogContent\", \"\"]], hostAttrs: [1, \"mat-dialog-content\"] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatDialogContent, [{\n        type: Directive,\n        args: [{\n                selector: `[mat-dialog-content], mat-dialog-content, [matDialogContent]`,\n                host: { 'class': 'mat-dialog-content' }\n            }]\n    }], null, null); })();\n/**\n * Container for the bottom action buttons in a dialog.\n * Stays fixed to the bottom when scrolling.\n */\nclass MatDialogActions {\n}\nMatDialogActions.ɵfac = function MatDialogActions_Factory(t) { return new (t || MatDialogActions)(); };\nMatDialogActions.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: MatDialogActions, selectors: [[\"\", \"mat-dialog-actions\", \"\"], [\"mat-dialog-actions\"], [\"\", \"matDialogActions\", \"\"]], hostAttrs: [1, \"mat-dialog-actions\"] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatDialogActions, [{\n        type: Directive,\n        args: [{\n                selector: `[mat-dialog-actions], mat-dialog-actions, [matDialogActions]`,\n                host: { 'class': 'mat-dialog-actions' }\n            }]\n    }], null, null); })();\n/**\n * Finds the closest MatDialogRef to an element by looking at the DOM.\n * @param {?} element Element relative to which to look for a dialog.\n * @param {?} openDialogs References to the currently-open dialogs.\n * @return {?}\n */\nfunction getClosestDialog(element, openDialogs) {\n    /** @type {?} */\n    let parent = element.nativeElement.parentElement;\n    while (parent && !parent.classList.contains('mat-dialog-container')) {\n        parent = parent.parentElement;\n    }\n    return parent ? openDialogs.find(dialog => dialog.id === /** @type {?} */ ((parent)).id) : null;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\nclass MatDialogModule {\n}\nMatDialogModule.ɵfac = function MatDialogModule_Factory(t) { return new (t || MatDialogModule)(); };\nMatDialogModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: MatDialogModule });\nMatDialogModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ providers: [\n        MatDialog,\n        MAT_DIALOG_SCROLL_STRATEGY_PROVIDER,\n    ], imports: [[\n            CommonModule,\n            OverlayModule,\n            PortalModule,\n            MatCommonModule,\n        ], MatCommonModule] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatDialogModule, [{\n        type: NgModule,\n        args: [{\n                imports: [\n                    CommonModule,\n                    OverlayModule,\n                    PortalModule,\n                    MatCommonModule,\n                ],\n                exports: [\n                    MatDialogContainer,\n                    MatDialogClose,\n                    MatDialogTitle,\n                    MatDialogContent,\n                    MatDialogActions,\n                    MatCommonModule,\n                ],\n                declarations: [\n                    MatDialogContainer,\n                    MatDialogClose,\n                    MatDialogTitle,\n                    MatDialogActions,\n                    MatDialogContent,\n                ],\n                providers: [\n                    MatDialog,\n                    MAT_DIALOG_SCROLL_STRATEGY_PROVIDER,\n                ],\n                entryComponents: [MatDialogContainer]\n            }]\n    }], null, null); })();\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatDialogModule, { declarations: function () { return [MatDialogContainer, MatDialogClose, MatDialogTitle, MatDialogActions, MatDialogContent]; }, imports: function () { return [CommonModule,\n        OverlayModule,\n        PortalModule,\n        MatCommonModule]; }, exports: function () { return [MatDialogContainer, MatDialogClose, MatDialogTitle, MatDialogContent, MatDialogActions, MatCommonModule]; } }); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\nexport { MatDialogModule, MAT_DIALOG_SCROLL_STRATEGY_FACTORY, MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY, MAT_DIALOG_DATA, MAT_DIALOG_DEFAULT_OPTIONS, MAT_DIALOG_SCROLL_STRATEGY, MAT_DIALOG_SCROLL_STRATEGY_PROVIDER, MatDialog, throwMatDialogContentAlreadyAttachedError, MatDialogContainer, MatDialogClose, MatDialogTitle, MatDialogContent, MatDialogActions, MatDialogConfig, MatDialogRef, matDialogAnimations };\n\n//# sourceMappingURL=dialog.js.map"]},"metadata":{},"sourceType":"module"}