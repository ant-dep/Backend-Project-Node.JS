{"ast":null,"code":"import _classCallCheck from \"/Users/adepertat/Dropbox/ECOLES/Openclassroom/P6_de_Pertat_Antoine/dwj-projet6/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/adepertat/Dropbox/ECOLES/Openclassroom/P6_de_Pertat_Antoine/dwj-projet6/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/Users/adepertat/Dropbox/ECOLES/Openclassroom/P6_de_Pertat_Antoine/dwj-projet6/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/adepertat/Dropbox/ECOLES/Openclassroom/P6_de_Pertat_Antoine/dwj-projet6/node_modules/@babel/runtime/helpers/esm/createSuper\";\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { CdkTextareaAutosize, AutofillMonitor, TextFieldModule } from '@angular/cdk/text-field';\nimport { Directive, Input, InjectionToken, ElementRef, Inject, NgZone, Optional, Self, NgModule } from '@angular/core';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { getSupportedInputTypes, Platform } from '@angular/cdk/platform';\nimport { FormGroupDirective, NgControl, NgForm } from '@angular/forms';\nimport { ErrorStateMatcher, mixinErrorState } from '@angular/material/core';\nimport { MatFormFieldControl, MatFormFieldModule } from '@angular/material/form-field';\nimport { Subject } from 'rxjs';\nimport { CommonModule } from '@angular/common';\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/** @type {?} */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/platform';\nimport * as ɵngcc2 from '@angular/forms';\nimport * as ɵngcc3 from '@angular/material/core';\nimport * as ɵngcc4 from '@angular/cdk/text-field';\nvar _CdkTextareaAutosize = CdkTextareaAutosize;\n/**\n * Directive to automatically resize a textarea to fit its content.\n * @deprecated Use `cdkTextareaAutosize` from `\\@angular/cdk/text-field` instead.\n * \\@breaking-change 8.0.0\n */\n\nvar MatTextareaAutosize = /*#__PURE__*/function (_CdkTextareaAutosize2) {\n  _inherits(MatTextareaAutosize, _CdkTextareaAutosize2);\n\n  var _super = _createSuper(MatTextareaAutosize);\n\n  function MatTextareaAutosize() {\n    _classCallCheck(this, MatTextareaAutosize);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(MatTextareaAutosize, [{\n    key: \"matAutosizeMinRows\",\n    get:\n    /**\n     * @return {?}\n     */\n    function get() {\n      return this.minRows;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ,\n    set: function set(value) {\n      this.minRows = value;\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"matAutosizeMaxRows\",\n    get: function get() {\n      return this.maxRows;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ,\n    set: function set(value) {\n      this.maxRows = value;\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"matAutosize\",\n    get: function get() {\n      return this.enabled;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ,\n    set: function set(value) {\n      this.enabled = value;\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"matTextareaAutosize\",\n    get: function get() {\n      return this.enabled;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ,\n    set: function set(value) {\n      this.enabled = value;\n    }\n  }]);\n\n  return MatTextareaAutosize;\n}(_CdkTextareaAutosize);\n\nMatTextareaAutosize.ɵfac = /*@__PURE__*/function () {\n  var ɵMatTextareaAutosize_BaseFactory;\n  return function MatTextareaAutosize_Factory(t) {\n    return (ɵMatTextareaAutosize_BaseFactory || (ɵMatTextareaAutosize_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(MatTextareaAutosize)))(t || MatTextareaAutosize);\n  };\n}();\n\nMatTextareaAutosize.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n  type: MatTextareaAutosize,\n  selectors: [[\"textarea\", \"mat-autosize\", \"\"], [\"textarea\", \"matTextareaAutosize\", \"\"]],\n  hostAttrs: [\"rows\", \"1\", 1, \"cdk-textarea-autosize\", \"mat-autosize\"],\n  hostBindings: function MatTextareaAutosize_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵlistener(\"input\", function MatTextareaAutosize_input_HostBindingHandler() {\n        return ctx._noopInputHandler();\n      });\n    }\n  },\n  inputs: {\n    cdkAutosizeMinRows: \"cdkAutosizeMinRows\",\n    cdkAutosizeMaxRows: \"cdkAutosizeMaxRows\",\n    matAutosizeMinRows: \"matAutosizeMinRows\",\n    matAutosizeMaxRows: \"matAutosizeMaxRows\",\n    matAutosize: [\"mat-autosize\", \"matAutosize\"],\n    matTextareaAutosize: \"matTextareaAutosize\"\n  },\n  exportAs: [\"matTextareaAutosize\"],\n  features: [ɵngcc0.ɵɵInheritDefinitionFeature]\n});\nMatTextareaAutosize.propDecorators = {\n  matAutosizeMinRows: [{\n    type: Input\n  }],\n  matAutosizeMaxRows: [{\n    type: Input\n  }],\n  matAutosize: [{\n    type: Input,\n    args: ['mat-autosize']\n  }],\n  matTextareaAutosize: [{\n    type: Input\n  }]\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatTextareaAutosize, [{\n    type: Directive,\n    args: [{\n      selector: 'textarea[mat-autosize], textarea[matTextareaAutosize]',\n      exportAs: 'matTextareaAutosize',\n      inputs: ['cdkAutosizeMinRows', 'cdkAutosizeMaxRows'],\n      host: {\n        'class': 'cdk-textarea-autosize mat-autosize',\n        // Textarea elements that have the directive applied should have a single row by default.\n        // Browsers normally show two rows by default and therefore this limits the minRows binding.\n        'rows': '1',\n        '(input)': '_noopInputHandler()'\n      }\n    }]\n  }], null, {\n    matAutosizeMinRows: [{\n      type: Input\n    }],\n    matAutosizeMaxRows: [{\n      type: Input\n    }],\n    matAutosize: [{\n      type: Input,\n      args: ['mat-autosize']\n    }],\n    matTextareaAutosize: [{\n      type: Input\n    }]\n  });\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * \\@docs-private\n * @param {?} type\n * @return {?}\n */\n\n\nfunction getMatInputUnsupportedTypeError(type) {\n  return Error(\"Input type \\\"\".concat(type, \"\\\" isn't supported by matInput.\"));\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/** *\n * This token is used to inject the object whose value should be set into `MatInput`. If none is\n * provided, the native `HTMLInputElement` is used. Directives like `MatDatepickerInput` can provide\n * themselves for this token, in order to make `MatInput` delegate the getting and setting of the\n * value to them.\n  @type {?} */\n\n\nvar MAT_INPUT_VALUE_ACCESSOR = new InjectionToken('MAT_INPUT_VALUE_ACCESSOR');\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/** @type {?} */\n\nvar MAT_INPUT_INVALID_TYPES = ['button', 'checkbox', 'file', 'hidden', 'image', 'radio', 'range', 'reset', 'submit'];\n/** @type {?} */\n\nvar nextUniqueId = 0;\n/**\n * \\@docs-private\n */\n\nvar MatInputBase =\n/**\n * @param {?} _defaultErrorStateMatcher\n * @param {?} _parentForm\n * @param {?} _parentFormGroup\n * @param {?} ngControl\n */\nfunction MatInputBase(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl) {\n  _classCallCheck(this, MatInputBase);\n\n  this._defaultErrorStateMatcher = _defaultErrorStateMatcher;\n  this._parentForm = _parentForm;\n  this._parentFormGroup = _parentFormGroup;\n  this.ngControl = ngControl;\n};\n/** @type {?} */\n\n\nvar _MatInputMixinBase = mixinErrorState(MatInputBase);\n/**\n * Directive that allows a native input to work inside a `MatFormField`.\n */\n\n\nvar MatInput = /*#__PURE__*/function (_MatInputMixinBase2) {\n  _inherits(MatInput, _MatInputMixinBase2);\n\n  var _super2 = _createSuper(MatInput);\n\n  /**\n   * @param {?} _elementRef\n   * @param {?} _platform\n   * @param {?} ngControl\n   * @param {?} _parentForm\n   * @param {?} _parentFormGroup\n   * @param {?} _defaultErrorStateMatcher\n   * @param {?} inputValueAccessor\n   * @param {?} _autofillMonitor\n   * @param {?} ngZone\n   */\n  function MatInput(_elementRef, _platform,\n  /** @docs-private */\n  ngControl, _parentForm, _parentFormGroup, _defaultErrorStateMatcher, inputValueAccessor, _autofillMonitor, ngZone) {\n    var _this;\n\n    _classCallCheck(this, MatInput);\n\n    _this = _super2.call(this, _defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n    _this._elementRef = _elementRef;\n    _this._platform = _platform;\n    _this.ngControl = ngControl;\n    _this._autofillMonitor = _autofillMonitor;\n    _this._uid = \"mat-input-\".concat(nextUniqueId++);\n    /**\n     * Whether the component is being rendered on the server.\n     */\n\n    _this._isServer = false;\n    /**\n     * Whether the component is a native html select.\n     */\n\n    _this._isNativeSelect = false;\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * \\@docs-private\n     */\n\n    _this.focused = false;\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * \\@docs-private\n     */\n\n    _this.stateChanges = new Subject();\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * \\@docs-private\n     */\n\n    _this.controlType = 'mat-input';\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * \\@docs-private\n     */\n\n    _this.autofilled = false;\n    _this._disabled = false;\n    _this._required = false;\n    _this._type = 'text';\n    _this._readonly = false;\n    _this._neverEmptyInputTypes = ['date', 'datetime', 'datetime-local', 'month', 'time', 'week'].filter(function (t) {\n      return getSupportedInputTypes().has(t);\n    });\n    /** @type {?} */\n\n    var element = _this._elementRef.nativeElement; // If no input value accessor was explicitly specified, use the element as the input value\n    // accessor.\n\n    _this._inputValueAccessor = inputValueAccessor || element;\n    _this._previousNativeValue = _this.value; // Force setter to be called in case id was not specified.\n\n    _this.id = _this.id; // On some versions of iOS the caret gets stuck in the wrong place when holding down the delete\n    // key. In order to get around this we need to \"jiggle\" the caret loose. Since this bug only\n    // exists on iOS, we only bother to install the listener on iOS.\n\n    if (_platform.IOS) {\n      ngZone.runOutsideAngular(function () {\n        _elementRef.nativeElement.addEventListener('keyup', function (event) {\n          /** @type {?} */\n          var el =\n          /** @type {?} */\n          event.target;\n\n          if (!el.value && !el.selectionStart && !el.selectionEnd) {\n            // Note: Just setting `0, 0` doesn't fix the issue. Setting\n            // `1, 1` fixes it for the first time that you type text and\n            // then hold delete. Toggling to `1, 1` and then back to\n            // `0, 0` seems to completely fix it.\n            el.setSelectionRange(1, 1);\n            el.setSelectionRange(0, 0);\n          }\n        });\n      });\n    }\n\n    _this._isServer = !_this._platform.isBrowser;\n    _this._isNativeSelect = element.nodeName.toLowerCase() === 'select';\n\n    if (_this._isNativeSelect) {\n      _this.controlType =\n      /** @type {?} */\n      element.multiple ? 'mat-native-select-multiple' : 'mat-native-select';\n    }\n\n    return _this;\n  }\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * \\@docs-private\n   * @return {?}\n   */\n\n\n  _createClass(MatInput, [{\n    key: \"disabled\",\n    get: function get() {\n      if (this.ngControl && this.ngControl.disabled !== null) {\n        return this.ngControl.disabled;\n      }\n\n      return this._disabled;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ,\n    set: function set(value) {\n      this._disabled = coerceBooleanProperty(value); // Browsers may not fire the blur event if the input is disabled too quickly.\n      // Reset from here to ensure that the element doesn't become stuck.\n\n      if (this.focused) {\n        this.focused = false;\n        this.stateChanges.next();\n      }\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * \\@docs-private\n     * @return {?}\n     */\n\n  }, {\n    key: \"id\",\n    get: function get() {\n      return this._id;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ,\n    set: function set(value) {\n      this._id = value || this._uid;\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * \\@docs-private\n     * @return {?}\n     */\n\n  }, {\n    key: \"required\",\n    get: function get() {\n      return this._required;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ,\n    set: function set(value) {\n      this._required = coerceBooleanProperty(value);\n    }\n    /**\n     * Input type of the element.\n     * @return {?}\n     */\n\n  }, {\n    key: \"type\",\n    get: function get() {\n      return this._type;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ,\n    set: function set(value) {\n      this._type = value || 'text';\n\n      this._validateType(); // When using Angular inputs, developers are no longer able to set the properties on the native\n      // input element. To ensure that bindings for `type` work, we need to sync the setter\n      // with the native property. Textarea elements don't support the type property or attribute.\n\n\n      if (!this._isTextarea() && getSupportedInputTypes().has(this._type)) {\n        /** @type {?} */\n        this._elementRef.nativeElement.type = this._type;\n      }\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * \\@docs-private\n     * @return {?}\n     */\n\n  }, {\n    key: \"value\",\n    get: function get() {\n      return this._inputValueAccessor.value;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ,\n    set: function set(value) {\n      if (value !== this.value) {\n        this._inputValueAccessor.value = value;\n        this.stateChanges.next();\n      }\n    }\n    /**\n     * Whether the element is readonly.\n     * @return {?}\n     */\n\n  }, {\n    key: \"readonly\",\n    get: function get() {\n      return this._readonly;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ,\n    set: function set(value) {\n      this._readonly = coerceBooleanProperty(value);\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngOnInit\",\n    value: function ngOnInit() {\n      var _this2 = this;\n\n      if (this._platform.isBrowser) {\n        this._autofillMonitor.monitor(this._elementRef.nativeElement).subscribe(function (event) {\n          _this2.autofilled = event.isAutofilled;\n\n          _this2.stateChanges.next();\n        });\n      }\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngOnChanges\",\n    value: function ngOnChanges() {\n      this.stateChanges.next();\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      this.stateChanges.complete();\n\n      if (this._platform.isBrowser) {\n        this._autofillMonitor.stopMonitoring(this._elementRef.nativeElement);\n      }\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngDoCheck\",\n    value: function ngDoCheck() {\n      if (this.ngControl) {\n        // We need to re-evaluate this on every change detection cycle, because there are some\n        // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n        // that whatever logic is in here has to be super lean or we risk destroying the performance.\n        this.updateErrorState();\n      } // We need to dirty-check the native element's value, because there are some cases where\n      // we won't be notified when it changes (e.g. the consumer isn't using forms or they're\n      // updating the value using `emitEvent: false`).\n\n\n      this._dirtyCheckNativeValue();\n    }\n    /**\n     * Focuses the input.\n     * @return {?}\n     */\n\n  }, {\n    key: \"focus\",\n    value: function focus() {\n      this._elementRef.nativeElement.focus();\n    }\n    /**\n     * Callback for the cases where the focused state of the input changes.\n     * @param {?} isFocused\n     * @return {?}\n     */\n\n  }, {\n    key: \"_focusChanged\",\n    value: function _focusChanged(isFocused) {\n      if (isFocused !== this.focused && !this.readonly) {\n        this.focused = isFocused;\n        this.stateChanges.next();\n      }\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"_onInput\",\n    value: function _onInput() {// This is a noop function and is used to let Angular know whenever the value changes.\n      // Angular will run a new change detection each time the `input` event has been dispatched.\n      // It's necessary that Angular recognizes the value change, because when floatingLabel\n      // is set to false and Angular forms aren't used, the placeholder won't recognize the\n      // value changes and will not disappear.\n      // Listening to the input event wouldn't be necessary when the input is using the\n      // FormsModule or ReactiveFormsModule, because Angular forms also listens to input events.\n    }\n    /**\n     * Does some manual dirty checking on the native input `value` property.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_dirtyCheckNativeValue\",\n    value: function _dirtyCheckNativeValue() {\n      /** @type {?} */\n      var newValue = this._elementRef.nativeElement.value;\n\n      if (this._previousNativeValue !== newValue) {\n        this._previousNativeValue = newValue;\n        this.stateChanges.next();\n      }\n    }\n    /**\n     * Make sure the input is a supported type.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_validateType\",\n    value: function _validateType() {\n      if (MAT_INPUT_INVALID_TYPES.indexOf(this._type) > -1) {\n        throw getMatInputUnsupportedTypeError(this._type);\n      }\n    }\n    /**\n     * Checks whether the input type is one of the types that are never empty.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_isNeverEmpty\",\n    value: function _isNeverEmpty() {\n      return this._neverEmptyInputTypes.indexOf(this._type) > -1;\n    }\n    /**\n     * Checks whether the input is invalid based on the native validation.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_isBadInput\",\n    value: function _isBadInput() {\n      /** @type {?} */\n      var validity =\n      /** @type {?} */\n      this._elementRef.nativeElement.validity;\n      return validity && validity.badInput;\n    }\n    /**\n     * Determines if the component host is a textarea.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_isTextarea\",\n    value: function _isTextarea() {\n      return this._elementRef.nativeElement.nodeName.toLowerCase() === 'textarea';\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * \\@docs-private\n     * @return {?}\n     */\n\n  }, {\n    key: \"empty\",\n    get: function get() {\n      return !this._isNeverEmpty() && !this._elementRef.nativeElement.value && !this._isBadInput() && !this.autofilled;\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * \\@docs-private\n     * @return {?}\n     */\n\n  }, {\n    key: \"shouldLabelFloat\",\n    get: function get() {\n      if (this._isNativeSelect) {\n        /** @type {?} */\n        var selectElement =\n        /** @type {?} */\n        this._elementRef.nativeElement;\n        return selectElement.multiple || !this.empty || !!selectElement.options[0].label || this.focused;\n      } else {\n        return this.focused || !this.empty;\n      }\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * \\@docs-private\n     * @param {?} ids\n     * @return {?}\n     */\n\n  }, {\n    key: \"setDescribedByIds\",\n    value: function setDescribedByIds(ids) {\n      this._ariaDescribedby = ids.join(' ');\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * \\@docs-private\n     * @return {?}\n     */\n\n  }, {\n    key: \"onContainerClick\",\n    value: function onContainerClick() {\n      // Do not re-focus the input element if the element is already focused. Otherwise it can happen\n      // that someone clicks on a time input and the cursor resets to the \"hours\" field while the\n      // \"minutes\" field was actually clicked. See: https://github.com/angular/material2/issues/12849\n      if (!this.focused) {\n        this.focus();\n      }\n    }\n  }]);\n\n  return MatInput;\n}(_MatInputMixinBase);\n\nMatInput.ɵfac = function MatInput_Factory(t) {\n  return new (t || MatInput)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.Platform), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.NgControl, 10), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.NgForm, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.FormGroupDirective, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.ErrorStateMatcher), ɵngcc0.ɵɵdirectiveInject(MAT_INPUT_VALUE_ACCESSOR, 10), ɵngcc0.ɵɵdirectiveInject(ɵngcc4.AutofillMonitor), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone));\n};\n\nMatInput.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n  type: MatInput,\n  selectors: [[\"input\", \"matInput\", \"\"], [\"textarea\", \"matInput\", \"\"], [\"select\", \"matNativeControl\", \"\"], [\"input\", \"matNativeControl\", \"\"], [\"textarea\", \"matNativeControl\", \"\"]],\n  hostAttrs: [1, \"mat-input-element\", \"mat-form-field-autofill-control\"],\n  hostVars: 10,\n  hostBindings: function MatInput_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵlistener(\"blur\", function MatInput_blur_HostBindingHandler() {\n        return ctx._focusChanged(false);\n      })(\"focus\", function MatInput_focus_HostBindingHandler() {\n        return ctx._focusChanged(true);\n      })(\"input\", function MatInput_input_HostBindingHandler() {\n        return ctx._onInput();\n      });\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵhostProperty(\"disabled\", ctx.disabled)(\"required\", ctx.required);\n      ɵngcc0.ɵɵattribute(\"id\", ctx.id)(\"placeholder\", ctx.placeholder)(\"readonly\", ctx.readonly && !ctx._isNativeSelect || null)(\"aria-describedby\", ctx._ariaDescribedby || null)(\"aria-invalid\", ctx.errorState)(\"aria-required\", ctx.required.toString());\n      ɵngcc0.ɵɵclassProp(\"mat-input-server\", ctx._isServer);\n    }\n  },\n  inputs: {\n    id: \"id\",\n    disabled: \"disabled\",\n    required: \"required\",\n    type: \"type\",\n    value: \"value\",\n    readonly: \"readonly\",\n    placeholder: \"placeholder\",\n    errorStateMatcher: \"errorStateMatcher\"\n  },\n  exportAs: [\"matInput\"],\n  features: [ɵngcc0.ɵɵProvidersFeature([{\n    provide: MatFormFieldControl,\n    useExisting: MatInput\n  }]), ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature]\n});\n/** @nocollapse */\n\nMatInput.ctorParameters = function () {\n  return [{\n    type: ElementRef\n  }, {\n    type: Platform\n  }, {\n    type: NgControl,\n    decorators: [{\n      type: Optional\n    }, {\n      type: Self\n    }]\n  }, {\n    type: NgForm,\n    decorators: [{\n      type: Optional\n    }]\n  }, {\n    type: FormGroupDirective,\n    decorators: [{\n      type: Optional\n    }]\n  }, {\n    type: ErrorStateMatcher\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Optional\n    }, {\n      type: Self\n    }, {\n      type: Inject,\n      args: [MAT_INPUT_VALUE_ACCESSOR]\n    }]\n  }, {\n    type: AutofillMonitor\n  }, {\n    type: NgZone\n  }];\n};\n\nMatInput.propDecorators = {\n  disabled: [{\n    type: Input\n  }],\n  id: [{\n    type: Input\n  }],\n  placeholder: [{\n    type: Input\n  }],\n  required: [{\n    type: Input\n  }],\n  type: [{\n    type: Input\n  }],\n  errorStateMatcher: [{\n    type: Input\n  }],\n  value: [{\n    type: Input\n  }],\n  readonly: [{\n    type: Input\n  }]\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatInput, [{\n    type: Directive,\n    args: [{\n      selector: \"input[matInput], textarea[matInput], select[matNativeControl],\\n      input[matNativeControl], textarea[matNativeControl]\",\n      exportAs: 'matInput',\n      host: {\n        /**\n             * @breaking-change 8.0.0 remove .mat-form-field-autofill-control in favor of AutofillMonitor.\n             */\n        'class': 'mat-input-element mat-form-field-autofill-control',\n        '[class.mat-input-server]': '_isServer',\n        // Native input properties that are overwritten by Angular inputs need to be synced with\n        // the native input element. Otherwise property bindings for those don't work.\n        '[attr.id]': 'id',\n        '[attr.placeholder]': 'placeholder',\n        '[disabled]': 'disabled',\n        '[required]': 'required',\n        '[attr.readonly]': 'readonly && !_isNativeSelect || null',\n        '[attr.aria-describedby]': '_ariaDescribedby || null',\n        '[attr.aria-invalid]': 'errorState',\n        '[attr.aria-required]': 'required.toString()',\n        '(blur)': '_focusChanged(false)',\n        '(focus)': '_focusChanged(true)',\n        '(input)': '_onInput()'\n      },\n      providers: [{\n        provide: MatFormFieldControl,\n        useExisting: MatInput\n      }]\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ElementRef\n    }, {\n      type: ɵngcc1.Platform\n    }, {\n      type: ɵngcc2.NgControl,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Self\n      }]\n    }, {\n      type: ɵngcc2.NgForm,\n      decorators: [{\n        type: Optional\n      }]\n    }, {\n      type: ɵngcc2.FormGroupDirective,\n      decorators: [{\n        type: Optional\n      }]\n    }, {\n      type: ɵngcc3.ErrorStateMatcher\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Self\n      }, {\n        type: Inject,\n        args: [MAT_INPUT_VALUE_ACCESSOR]\n      }]\n    }, {\n      type: ɵngcc4.AutofillMonitor\n    }, {\n      type: ɵngcc0.NgZone\n    }];\n  }, {\n    id: [{\n      type: Input\n    }],\n    disabled: [{\n      type: Input\n    }],\n    required: [{\n      type: Input\n    }],\n    type: [{\n      type: Input\n    }],\n    value: [{\n      type: Input\n    }],\n    readonly: [{\n      type: Input\n    }],\n    placeholder: [{\n      type: Input\n    }],\n    errorStateMatcher: [{\n      type: Input\n    }]\n  });\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n\nvar MatInputModule = function MatInputModule() {\n  _classCallCheck(this, MatInputModule);\n};\n\nMatInputModule.ɵfac = function MatInputModule_Factory(t) {\n  return new (t || MatInputModule)();\n};\n\nMatInputModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n  type: MatInputModule\n});\nMatInputModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n  providers: [ErrorStateMatcher],\n  imports: [[CommonModule, TextFieldModule, MatFormFieldModule], TextFieldModule, MatFormFieldModule]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatInputModule, [{\n    type: NgModule,\n    args: [{\n      declarations: [MatInput, MatTextareaAutosize],\n      imports: [CommonModule, TextFieldModule, MatFormFieldModule],\n      exports: [TextFieldModule, MatFormFieldModule, MatInput, MatTextareaAutosize],\n      providers: [ErrorStateMatcher]\n    }]\n  }], null, null);\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatInputModule, {\n    declarations: function declarations() {\n      return [MatInput, MatTextareaAutosize];\n    },\n    imports: function imports() {\n      return [CommonModule, TextFieldModule, MatFormFieldModule];\n    },\n    exports: function exports() {\n      return [TextFieldModule, MatFormFieldModule, MatInput, MatTextareaAutosize];\n    }\n  });\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n\nexport { _CdkTextareaAutosize, MatTextareaAutosize, MatInputBase, _MatInputMixinBase, MatInput, getMatInputUnsupportedTypeError, MatInputModule, MAT_INPUT_VALUE_ACCESSOR }; //# sourceMappingURL=input.js.map","map":{"version":3,"sources":["/Users/adepertat/Dropbox/ECOLES/Openclassroom/P6_de_Pertat_Antoine/dwj-projet6/node_modules/@angular/material/__ivy_ngcc__/esm2015/input.js"],"names":["CdkTextareaAutosize","AutofillMonitor","TextFieldModule","Directive","Input","InjectionToken","ElementRef","Inject","NgZone","Optional","Self","NgModule","coerceBooleanProperty","getSupportedInputTypes","Platform","FormGroupDirective","NgControl","NgForm","ErrorStateMatcher","mixinErrorState","MatFormFieldControl","MatFormFieldModule","Subject","CommonModule","ɵngcc0","ɵngcc1","ɵngcc2","ɵngcc3","ɵngcc4","_CdkTextareaAutosize","MatTextareaAutosize","minRows","value","maxRows","enabled","ɵfac","ɵMatTextareaAutosize_BaseFactory","MatTextareaAutosize_Factory","t","ɵɵgetInheritedFactory","ɵdir","ɵɵdefineDirective","type","selectors","hostAttrs","hostBindings","MatTextareaAutosize_HostBindings","rf","ctx","ɵɵlistener","MatTextareaAutosize_input_HostBindingHandler","_noopInputHandler","inputs","cdkAutosizeMinRows","cdkAutosizeMaxRows","matAutosizeMinRows","matAutosizeMaxRows","matAutosize","matTextareaAutosize","exportAs","features","ɵɵInheritDefinitionFeature","propDecorators","args","ngDevMode","ɵsetClassMetadata","selector","host","getMatInputUnsupportedTypeError","Error","MAT_INPUT_VALUE_ACCESSOR","MAT_INPUT_INVALID_TYPES","nextUniqueId","MatInputBase","_defaultErrorStateMatcher","_parentForm","_parentFormGroup","ngControl","_MatInputMixinBase","MatInput","_elementRef","_platform","inputValueAccessor","_autofillMonitor","ngZone","_uid","_isServer","_isNativeSelect","focused","stateChanges","controlType","autofilled","_disabled","_required","_type","_readonly","_neverEmptyInputTypes","filter","has","element","nativeElement","_inputValueAccessor","_previousNativeValue","id","IOS","runOutsideAngular","addEventListener","event","el","target","selectionStart","selectionEnd","setSelectionRange","isBrowser","nodeName","toLowerCase","multiple","disabled","next","_id","_validateType","_isTextarea","monitor","subscribe","isAutofilled","complete","stopMonitoring","updateErrorState","_dirtyCheckNativeValue","focus","isFocused","readonly","newValue","indexOf","validity","badInput","_isNeverEmpty","_isBadInput","selectElement","empty","options","label","ids","_ariaDescribedby","join","MatInput_Factory","ɵɵdirectiveInject","hostVars","MatInput_HostBindings","MatInput_blur_HostBindingHandler","_focusChanged","MatInput_focus_HostBindingHandler","MatInput_input_HostBindingHandler","_onInput","ɵɵhostProperty","required","ɵɵattribute","placeholder","errorState","toString","ɵɵclassProp","errorStateMatcher","ɵɵProvidersFeature","provide","useExisting","ɵɵNgOnChangesFeature","ctorParameters","decorators","undefined","providers","MatInputModule","MatInputModule_Factory","ɵmod","ɵɵdefineNgModule","ɵinj","ɵɵdefineInjector","imports","declarations","exports","ngJitMode","ɵɵsetNgModuleScope"],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { CdkTextareaAutosize, AutofillMonitor, TextFieldModule } from '@angular/cdk/text-field';\nimport { Directive, Input, InjectionToken, ElementRef, Inject, NgZone, Optional, Self, NgModule } from '@angular/core';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { getSupportedInputTypes, Platform } from '@angular/cdk/platform';\nimport { FormGroupDirective, NgControl, NgForm } from '@angular/forms';\nimport { ErrorStateMatcher, mixinErrorState } from '@angular/material/core';\nimport { MatFormFieldControl, MatFormFieldModule } from '@angular/material/form-field';\nimport { Subject } from 'rxjs';\nimport { CommonModule } from '@angular/common';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/** @type {?} */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/platform';\nimport * as ɵngcc2 from '@angular/forms';\nimport * as ɵngcc3 from '@angular/material/core';\nimport * as ɵngcc4 from '@angular/cdk/text-field';\nconst _CdkTextareaAutosize = CdkTextareaAutosize;\n/**\n * Directive to automatically resize a textarea to fit its content.\n * @deprecated Use `cdkTextareaAutosize` from `\\@angular/cdk/text-field` instead.\n * \\@breaking-change 8.0.0\n */\nclass MatTextareaAutosize extends _CdkTextareaAutosize {\n    /**\n     * @return {?}\n     */\n    get matAutosizeMinRows() { return this.minRows; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set matAutosizeMinRows(value) { this.minRows = value; }\n    /**\n     * @return {?}\n     */\n    get matAutosizeMaxRows() { return this.maxRows; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set matAutosizeMaxRows(value) { this.maxRows = value; }\n    /**\n     * @return {?}\n     */\n    get matAutosize() { return this.enabled; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set matAutosize(value) { this.enabled = value; }\n    /**\n     * @return {?}\n     */\n    get matTextareaAutosize() { return this.enabled; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set matTextareaAutosize(value) { this.enabled = value; }\n}\nMatTextareaAutosize.ɵfac = /*@__PURE__*/ function () { let ɵMatTextareaAutosize_BaseFactory; return function MatTextareaAutosize_Factory(t) { return (ɵMatTextareaAutosize_BaseFactory || (ɵMatTextareaAutosize_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(MatTextareaAutosize)))(t || MatTextareaAutosize); }; }();\nMatTextareaAutosize.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: MatTextareaAutosize, selectors: [[\"textarea\", \"mat-autosize\", \"\"], [\"textarea\", \"matTextareaAutosize\", \"\"]], hostAttrs: [\"rows\", \"1\", 1, \"cdk-textarea-autosize\", \"mat-autosize\"], hostBindings: function MatTextareaAutosize_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"input\", function MatTextareaAutosize_input_HostBindingHandler() { return ctx._noopInputHandler(); });\n    } }, inputs: { cdkAutosizeMinRows: \"cdkAutosizeMinRows\", cdkAutosizeMaxRows: \"cdkAutosizeMaxRows\", matAutosizeMinRows: \"matAutosizeMinRows\", matAutosizeMaxRows: \"matAutosizeMaxRows\", matAutosize: [\"mat-autosize\", \"matAutosize\"], matTextareaAutosize: \"matTextareaAutosize\" }, exportAs: [\"matTextareaAutosize\"], features: [ɵngcc0.ɵɵInheritDefinitionFeature] });\nMatTextareaAutosize.propDecorators = {\n    matAutosizeMinRows: [{ type: Input }],\n    matAutosizeMaxRows: [{ type: Input }],\n    matAutosize: [{ type: Input, args: ['mat-autosize',] }],\n    matTextareaAutosize: [{ type: Input }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatTextareaAutosize, [{\n        type: Directive,\n        args: [{\n                selector: 'textarea[mat-autosize], textarea[matTextareaAutosize]',\n                exportAs: 'matTextareaAutosize',\n                inputs: ['cdkAutosizeMinRows', 'cdkAutosizeMaxRows'],\n                host: {\n                    'class': 'cdk-textarea-autosize mat-autosize',\n                    // Textarea elements that have the directive applied should have a single row by default.\n                    // Browsers normally show two rows by default and therefore this limits the minRows binding.\n                    'rows': '1',\n                    '(input)': '_noopInputHandler()'\n                }\n            }]\n    }], null, { matAutosizeMinRows: [{\n            type: Input\n        }], matAutosizeMaxRows: [{\n            type: Input\n        }], matAutosize: [{\n            type: Input,\n            args: ['mat-autosize']\n        }], matTextareaAutosize: [{\n            type: Input\n        }] }); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * \\@docs-private\n * @param {?} type\n * @return {?}\n */\nfunction getMatInputUnsupportedTypeError(type) {\n    return Error(`Input type \"${type}\" isn't supported by matInput.`);\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/** *\n * This token is used to inject the object whose value should be set into `MatInput`. If none is\n * provided, the native `HTMLInputElement` is used. Directives like `MatDatepickerInput` can provide\n * themselves for this token, in order to make `MatInput` delegate the getting and setting of the\n * value to them.\n  @type {?} */\nconst MAT_INPUT_VALUE_ACCESSOR = new InjectionToken('MAT_INPUT_VALUE_ACCESSOR');\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst MAT_INPUT_INVALID_TYPES = [\n    'button',\n    'checkbox',\n    'file',\n    'hidden',\n    'image',\n    'radio',\n    'range',\n    'reset',\n    'submit'\n];\n/** @type {?} */\nlet nextUniqueId = 0;\n/**\n * \\@docs-private\n */\nclass MatInputBase {\n    /**\n     * @param {?} _defaultErrorStateMatcher\n     * @param {?} _parentForm\n     * @param {?} _parentFormGroup\n     * @param {?} ngControl\n     */\n    constructor(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl) {\n        this._defaultErrorStateMatcher = _defaultErrorStateMatcher;\n        this._parentForm = _parentForm;\n        this._parentFormGroup = _parentFormGroup;\n        this.ngControl = ngControl;\n    }\n}\n/** @type {?} */\nconst _MatInputMixinBase = mixinErrorState(MatInputBase);\n/**\n * Directive that allows a native input to work inside a `MatFormField`.\n */\nclass MatInput extends _MatInputMixinBase {\n    /**\n     * @param {?} _elementRef\n     * @param {?} _platform\n     * @param {?} ngControl\n     * @param {?} _parentForm\n     * @param {?} _parentFormGroup\n     * @param {?} _defaultErrorStateMatcher\n     * @param {?} inputValueAccessor\n     * @param {?} _autofillMonitor\n     * @param {?} ngZone\n     */\n    constructor(_elementRef, _platform, /** @docs-private */\n    ngControl, _parentForm, _parentFormGroup, _defaultErrorStateMatcher, inputValueAccessor, _autofillMonitor, ngZone) {\n        super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n        this._elementRef = _elementRef;\n        this._platform = _platform;\n        this.ngControl = ngControl;\n        this._autofillMonitor = _autofillMonitor;\n        this._uid = `mat-input-${nextUniqueId++}`;\n        /**\n         * Whether the component is being rendered on the server.\n         */\n        this._isServer = false;\n        /**\n         * Whether the component is a native html select.\n         */\n        this._isNativeSelect = false;\n        /**\n         * Implemented as part of MatFormFieldControl.\n         * \\@docs-private\n         */\n        this.focused = false;\n        /**\n         * Implemented as part of MatFormFieldControl.\n         * \\@docs-private\n         */\n        this.stateChanges = new Subject();\n        /**\n         * Implemented as part of MatFormFieldControl.\n         * \\@docs-private\n         */\n        this.controlType = 'mat-input';\n        /**\n         * Implemented as part of MatFormFieldControl.\n         * \\@docs-private\n         */\n        this.autofilled = false;\n        this._disabled = false;\n        this._required = false;\n        this._type = 'text';\n        this._readonly = false;\n        this._neverEmptyInputTypes = [\n            'date',\n            'datetime',\n            'datetime-local',\n            'month',\n            'time',\n            'week'\n        ].filter(t => getSupportedInputTypes().has(t));\n        /** @type {?} */\n        const element = this._elementRef.nativeElement;\n        // If no input value accessor was explicitly specified, use the element as the input value\n        // accessor.\n        this._inputValueAccessor = inputValueAccessor || element;\n        this._previousNativeValue = this.value;\n        // Force setter to be called in case id was not specified.\n        this.id = this.id;\n        // On some versions of iOS the caret gets stuck in the wrong place when holding down the delete\n        // key. In order to get around this we need to \"jiggle\" the caret loose. Since this bug only\n        // exists on iOS, we only bother to install the listener on iOS.\n        if (_platform.IOS) {\n            ngZone.runOutsideAngular(() => {\n                _elementRef.nativeElement.addEventListener('keyup', (event) => {\n                    /** @type {?} */\n                    let el = /** @type {?} */ (event.target);\n                    if (!el.value && !el.selectionStart && !el.selectionEnd) {\n                        // Note: Just setting `0, 0` doesn't fix the issue. Setting\n                        // `1, 1` fixes it for the first time that you type text and\n                        // then hold delete. Toggling to `1, 1` and then back to\n                        // `0, 0` seems to completely fix it.\n                        el.setSelectionRange(1, 1);\n                        el.setSelectionRange(0, 0);\n                    }\n                });\n            });\n        }\n        this._isServer = !this._platform.isBrowser;\n        this._isNativeSelect = element.nodeName.toLowerCase() === 'select';\n        if (this._isNativeSelect) {\n            this.controlType = (/** @type {?} */ (element)).multiple ? 'mat-native-select-multiple' :\n                'mat-native-select';\n        }\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * \\@docs-private\n     * @return {?}\n     */\n    get disabled() {\n        if (this.ngControl && this.ngControl.disabled !== null) {\n            return this.ngControl.disabled;\n        }\n        return this._disabled;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set disabled(value) {\n        this._disabled = coerceBooleanProperty(value);\n        // Browsers may not fire the blur event if the input is disabled too quickly.\n        // Reset from here to ensure that the element doesn't become stuck.\n        if (this.focused) {\n            this.focused = false;\n            this.stateChanges.next();\n        }\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * \\@docs-private\n     * @return {?}\n     */\n    get id() { return this._id; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set id(value) { this._id = value || this._uid; }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * \\@docs-private\n     * @return {?}\n     */\n    get required() { return this._required; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set required(value) { this._required = coerceBooleanProperty(value); }\n    /**\n     * Input type of the element.\n     * @return {?}\n     */\n    get type() { return this._type; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set type(value) {\n        this._type = value || 'text';\n        this._validateType();\n        // When using Angular inputs, developers are no longer able to set the properties on the native\n        // input element. To ensure that bindings for `type` work, we need to sync the setter\n        // with the native property. Textarea elements don't support the type property or attribute.\n        if (!this._isTextarea() && getSupportedInputTypes().has(this._type)) {\n            (/** @type {?} */ (this._elementRef.nativeElement)).type = this._type;\n        }\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * \\@docs-private\n     * @return {?}\n     */\n    get value() { return this._inputValueAccessor.value; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set value(value) {\n        if (value !== this.value) {\n            this._inputValueAccessor.value = value;\n            this.stateChanges.next();\n        }\n    }\n    /**\n     * Whether the element is readonly.\n     * @return {?}\n     */\n    get readonly() { return this._readonly; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set readonly(value) { this._readonly = coerceBooleanProperty(value); }\n    /**\n     * @return {?}\n     */\n    ngOnInit() {\n        if (this._platform.isBrowser) {\n            this._autofillMonitor.monitor(this._elementRef.nativeElement).subscribe(event => {\n                this.autofilled = event.isAutofilled;\n                this.stateChanges.next();\n            });\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngOnChanges() {\n        this.stateChanges.next();\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this.stateChanges.complete();\n        if (this._platform.isBrowser) {\n            this._autofillMonitor.stopMonitoring(this._elementRef.nativeElement);\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngDoCheck() {\n        if (this.ngControl) {\n            // We need to re-evaluate this on every change detection cycle, because there are some\n            // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n            // that whatever logic is in here has to be super lean or we risk destroying the performance.\n            this.updateErrorState();\n        }\n        // We need to dirty-check the native element's value, because there are some cases where\n        // we won't be notified when it changes (e.g. the consumer isn't using forms or they're\n        // updating the value using `emitEvent: false`).\n        this._dirtyCheckNativeValue();\n    }\n    /**\n     * Focuses the input.\n     * @return {?}\n     */\n    focus() { this._elementRef.nativeElement.focus(); }\n    /**\n     * Callback for the cases where the focused state of the input changes.\n     * @param {?} isFocused\n     * @return {?}\n     */\n    _focusChanged(isFocused) {\n        if (isFocused !== this.focused && !this.readonly) {\n            this.focused = isFocused;\n            this.stateChanges.next();\n        }\n    }\n    /**\n     * @return {?}\n     */\n    _onInput() {\n        // This is a noop function and is used to let Angular know whenever the value changes.\n        // Angular will run a new change detection each time the `input` event has been dispatched.\n        // It's necessary that Angular recognizes the value change, because when floatingLabel\n        // is set to false and Angular forms aren't used, the placeholder won't recognize the\n        // value changes and will not disappear.\n        // Listening to the input event wouldn't be necessary when the input is using the\n        // FormsModule or ReactiveFormsModule, because Angular forms also listens to input events.\n    }\n    /**\n     * Does some manual dirty checking on the native input `value` property.\n     * @return {?}\n     */\n    _dirtyCheckNativeValue() {\n        /** @type {?} */\n        const newValue = this._elementRef.nativeElement.value;\n        if (this._previousNativeValue !== newValue) {\n            this._previousNativeValue = newValue;\n            this.stateChanges.next();\n        }\n    }\n    /**\n     * Make sure the input is a supported type.\n     * @return {?}\n     */\n    _validateType() {\n        if (MAT_INPUT_INVALID_TYPES.indexOf(this._type) > -1) {\n            throw getMatInputUnsupportedTypeError(this._type);\n        }\n    }\n    /**\n     * Checks whether the input type is one of the types that are never empty.\n     * @return {?}\n     */\n    _isNeverEmpty() {\n        return this._neverEmptyInputTypes.indexOf(this._type) > -1;\n    }\n    /**\n     * Checks whether the input is invalid based on the native validation.\n     * @return {?}\n     */\n    _isBadInput() {\n        /** @type {?} */\n        let validity = (/** @type {?} */ (this._elementRef.nativeElement)).validity;\n        return validity && validity.badInput;\n    }\n    /**\n     * Determines if the component host is a textarea.\n     * @return {?}\n     */\n    _isTextarea() {\n        return this._elementRef.nativeElement.nodeName.toLowerCase() === 'textarea';\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * \\@docs-private\n     * @return {?}\n     */\n    get empty() {\n        return !this._isNeverEmpty() && !this._elementRef.nativeElement.value && !this._isBadInput() &&\n            !this.autofilled;\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * \\@docs-private\n     * @return {?}\n     */\n    get shouldLabelFloat() {\n        if (this._isNativeSelect) {\n            /** @type {?} */\n            const selectElement = /** @type {?} */ (this._elementRef.nativeElement);\n            return selectElement.multiple || !this.empty || !!selectElement.options[0].label ||\n                this.focused;\n        }\n        else {\n            return this.focused || !this.empty;\n        }\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * \\@docs-private\n     * @param {?} ids\n     * @return {?}\n     */\n    setDescribedByIds(ids) { this._ariaDescribedby = ids.join(' '); }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * \\@docs-private\n     * @return {?}\n     */\n    onContainerClick() {\n        // Do not re-focus the input element if the element is already focused. Otherwise it can happen\n        // that someone clicks on a time input and the cursor resets to the \"hours\" field while the\n        // \"minutes\" field was actually clicked. See: https://github.com/angular/material2/issues/12849\n        if (!this.focused) {\n            this.focus();\n        }\n    }\n}\nMatInput.ɵfac = function MatInput_Factory(t) { return new (t || MatInput)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.Platform), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.NgControl, 10), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.NgForm, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.FormGroupDirective, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.ErrorStateMatcher), ɵngcc0.ɵɵdirectiveInject(MAT_INPUT_VALUE_ACCESSOR, 10), ɵngcc0.ɵɵdirectiveInject(ɵngcc4.AutofillMonitor), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone)); };\nMatInput.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: MatInput, selectors: [[\"input\", \"matInput\", \"\"], [\"textarea\", \"matInput\", \"\"], [\"select\", \"matNativeControl\", \"\"], [\"input\", \"matNativeControl\", \"\"], [\"textarea\", \"matNativeControl\", \"\"]], hostAttrs: [1, \"mat-input-element\", \"mat-form-field-autofill-control\"], hostVars: 10, hostBindings: function MatInput_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"blur\", function MatInput_blur_HostBindingHandler() { return ctx._focusChanged(false); })(\"focus\", function MatInput_focus_HostBindingHandler() { return ctx._focusChanged(true); })(\"input\", function MatInput_input_HostBindingHandler() { return ctx._onInput(); });\n    } if (rf & 2) {\n        ɵngcc0.ɵɵhostProperty(\"disabled\", ctx.disabled)(\"required\", ctx.required);\n        ɵngcc0.ɵɵattribute(\"id\", ctx.id)(\"placeholder\", ctx.placeholder)(\"readonly\", ctx.readonly && !ctx._isNativeSelect || null)(\"aria-describedby\", ctx._ariaDescribedby || null)(\"aria-invalid\", ctx.errorState)(\"aria-required\", ctx.required.toString());\n        ɵngcc0.ɵɵclassProp(\"mat-input-server\", ctx._isServer);\n    } }, inputs: { id: \"id\", disabled: \"disabled\", required: \"required\", type: \"type\", value: \"value\", readonly: \"readonly\", placeholder: \"placeholder\", errorStateMatcher: \"errorStateMatcher\" }, exportAs: [\"matInput\"], features: [ɵngcc0.ɵɵProvidersFeature([{ provide: MatFormFieldControl, useExisting: MatInput }]), ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature] });\n/** @nocollapse */\nMatInput.ctorParameters = () => [\n    { type: ElementRef },\n    { type: Platform },\n    { type: NgControl, decorators: [{ type: Optional }, { type: Self }] },\n    { type: NgForm, decorators: [{ type: Optional }] },\n    { type: FormGroupDirective, decorators: [{ type: Optional }] },\n    { type: ErrorStateMatcher },\n    { type: undefined, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [MAT_INPUT_VALUE_ACCESSOR,] }] },\n    { type: AutofillMonitor },\n    { type: NgZone }\n];\nMatInput.propDecorators = {\n    disabled: [{ type: Input }],\n    id: [{ type: Input }],\n    placeholder: [{ type: Input }],\n    required: [{ type: Input }],\n    type: [{ type: Input }],\n    errorStateMatcher: [{ type: Input }],\n    value: [{ type: Input }],\n    readonly: [{ type: Input }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatInput, [{\n        type: Directive,\n        args: [{\n                selector: `input[matInput], textarea[matInput], select[matNativeControl],\n      input[matNativeControl], textarea[matNativeControl]`,\n                exportAs: 'matInput',\n                host: {\n                    /**\n                         * @breaking-change 8.0.0 remove .mat-form-field-autofill-control in favor of AutofillMonitor.\n                         */\n                    'class': 'mat-input-element mat-form-field-autofill-control',\n                    '[class.mat-input-server]': '_isServer',\n                    // Native input properties that are overwritten by Angular inputs need to be synced with\n                    // the native input element. Otherwise property bindings for those don't work.\n                    '[attr.id]': 'id',\n                    '[attr.placeholder]': 'placeholder',\n                    '[disabled]': 'disabled',\n                    '[required]': 'required',\n                    '[attr.readonly]': 'readonly && !_isNativeSelect || null',\n                    '[attr.aria-describedby]': '_ariaDescribedby || null',\n                    '[attr.aria-invalid]': 'errorState',\n                    '[attr.aria-required]': 'required.toString()',\n                    '(blur)': '_focusChanged(false)',\n                    '(focus)': '_focusChanged(true)',\n                    '(input)': '_onInput()'\n                },\n                providers: [{ provide: MatFormFieldControl, useExisting: MatInput }]\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc1.Platform }, { type: ɵngcc2.NgControl, decorators: [{\n                type: Optional\n            }, {\n                type: Self\n            }] }, { type: ɵngcc2.NgForm, decorators: [{\n                type: Optional\n            }] }, { type: ɵngcc2.FormGroupDirective, decorators: [{\n                type: Optional\n            }] }, { type: ɵngcc3.ErrorStateMatcher }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Self\n            }, {\n                type: Inject,\n                args: [MAT_INPUT_VALUE_ACCESSOR]\n            }] }, { type: ɵngcc4.AutofillMonitor }, { type: ɵngcc0.NgZone }]; }, { id: [{\n            type: Input\n        }], disabled: [{\n            type: Input\n        }], required: [{\n            type: Input\n        }], type: [{\n            type: Input\n        }], value: [{\n            type: Input\n        }], readonly: [{\n            type: Input\n        }], placeholder: [{\n            type: Input\n        }], errorStateMatcher: [{\n            type: Input\n        }] }); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\nclass MatInputModule {\n}\nMatInputModule.ɵfac = function MatInputModule_Factory(t) { return new (t || MatInputModule)(); };\nMatInputModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: MatInputModule });\nMatInputModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ providers: [ErrorStateMatcher], imports: [[\n            CommonModule,\n            TextFieldModule,\n            MatFormFieldModule,\n        ], TextFieldModule,\n        MatFormFieldModule] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatInputModule, [{\n        type: NgModule,\n        args: [{\n                declarations: [MatInput, MatTextareaAutosize],\n                imports: [\n                    CommonModule,\n                    TextFieldModule,\n                    MatFormFieldModule,\n                ],\n                exports: [\n                    TextFieldModule,\n                    MatFormFieldModule,\n                    MatInput,\n                    MatTextareaAutosize,\n                ],\n                providers: [ErrorStateMatcher]\n            }]\n    }], null, null); })();\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatInputModule, { declarations: function () { return [MatInput, MatTextareaAutosize]; }, imports: function () { return [CommonModule,\n        TextFieldModule,\n        MatFormFieldModule]; }, exports: function () { return [TextFieldModule,\n        MatFormFieldModule, MatInput, MatTextareaAutosize]; } }); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\nexport { _CdkTextareaAutosize, MatTextareaAutosize, MatInputBase, _MatInputMixinBase, MatInput, getMatInputUnsupportedTypeError, MatInputModule, MAT_INPUT_VALUE_ACCESSOR };\n\n//# sourceMappingURL=input.js.map"]},"metadata":{},"sourceType":"module"}