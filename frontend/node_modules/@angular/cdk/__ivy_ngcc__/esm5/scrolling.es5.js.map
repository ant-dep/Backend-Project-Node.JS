{"version":3,"file":"scrolling.es5.js","sources":["../../../src/cdk/scrolling/virtual-scroll-strategy.ts","../../../src/cdk/scrolling/fixed-size-virtual-scroll.ts","../../../src/cdk/scrolling/scroll-dispatcher.ts","../../../src/cdk/scrolling/scrollable.ts","../../../src/cdk/scrolling/virtual-scroll-viewport.ts","../../../src/cdk/scrolling/virtual-for-of.ts","../../../src/cdk/scrolling/scrolling-module.ts","../../../src/cdk/scrolling/viewport-ruler.ts"],"names":["observableOf","tslib_1.__extends"],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\nimport {Observable} from 'rxjs';\nimport {CdkVirtualScrollViewport} from './virtual-scroll-viewport';\n\n\n/** The injection token used to specify the virtual scrolling strategy. */\nexport const VIRTUAL_SCROLL_STRATEGY =\n    new InjectionToken<VirtualScrollStrategy>('VIRTUAL_SCROLL_STRATEGY');\n\n\n/** A strategy that dictates which items should be rendered in the viewport. */\nexport interface VirtualScrollStrategy {\n  /** Emits when the index of the first element visible in the viewport changes. */\n  scrolledIndexChange: Observable<number>;\n\n  /**\n   * Attaches this scroll strategy to a viewport.\n   * @param viewport The viewport to attach this strategy to.\n   */\n  attach(viewport: CdkVirtualScrollViewport): void;\n\n  /** Detaches this scroll strategy from the currently attached viewport. */\n  detach(): void;\n\n  /** Called when the viewport is scrolled (debounced using requestAnimationFrame). */\n  onContentScrolled(): void;\n\n  /** Called when the length of the data changes. */\n  onDataLengthChanged(): void;\n\n  /** Called when the range of items rendered in the DOM has changed. */\n  onContentRendered(): void;\n\n  /** Called when the offset of the rendered items changed. */\n  onRenderedOffsetChanged(): void;\n\n  /**\n   * Scroll to the offset for the given index.\n   * @param index The index of the element to scroll to.\n   * @param behavior The ScrollBehavior to use when scrolling.\n   */\n  scrollToIndex(index: number, behavior: ScrollBehavior): void;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\nimport {Directive, forwardRef, Input, OnChanges} from '@angular/core';\nimport {Observable, Subject} from 'rxjs';\nimport {distinctUntilChanged} from 'rxjs/operators';\nimport {VIRTUAL_SCROLL_STRATEGY, VirtualScrollStrategy} from './virtual-scroll-strategy';\nimport {CdkVirtualScrollViewport} from './virtual-scroll-viewport';\n\n\n/** Virtual scrolling strategy for lists with items of known fixed size. */\nexport class FixedSizeVirtualScrollStrategy implements VirtualScrollStrategy {\n  private _scrolledIndexChange = new Subject<number>();\n\n  /** @docs-private Implemented as part of VirtualScrollStrategy. */\n  scrolledIndexChange: Observable<number> = this._scrolledIndexChange.pipe(distinctUntilChanged());\n\n  /** The attached viewport. */\n  private _viewport: CdkVirtualScrollViewport | null = null;\n\n  /** The size of the items in the virtually scrolling list. */\n  private _itemSize: number;\n\n  /** The minimum amount of buffer rendered beyond the viewport (in pixels). */\n  private _minBufferPx: number;\n\n  /** The number of buffer items to render beyond the edge of the viewport (in pixels). */\n  private _maxBufferPx: number;\n\n  /**\n   * @param itemSize The size of the items in the virtually scrolling list.\n   * @param minBufferPx The minimum amount of buffer (in pixels) before needing to render more\n   * @param maxBufferPx The amount of buffer (in pixels) to render when rendering more.\n   */\n  constructor(itemSize: number, minBufferPx: number, maxBufferPx: number) {\n    this._itemSize = itemSize;\n    this._minBufferPx = minBufferPx;\n    this._maxBufferPx = maxBufferPx;\n  }\n\n  /**\n   * Attaches this scroll strategy to a viewport.\n   * @param viewport The viewport to attach this strategy to.\n   */\n  attach(viewport: CdkVirtualScrollViewport) {\n    this._viewport = viewport;\n    this._updateTotalContentSize();\n    this._updateRenderedRange();\n  }\n\n  /** Detaches this scroll strategy from the currently attached viewport. */\n  detach() {\n    this._scrolledIndexChange.complete();\n    this._viewport = null;\n  }\n\n  /**\n   * Update the item size and buffer size.\n   * @param itemSize The size of the items in the virtually scrolling list.\n   * @param minBufferPx The minimum amount of buffer (in pixels) before needing to render more\n   * @param maxBufferPx The amount of buffer (in pixels) to render when rendering more.\n   */\n  updateItemAndBufferSize(itemSize: number, minBufferPx: number, maxBufferPx: number) {\n    if (maxBufferPx < minBufferPx) {\n      throw Error('CDK virtual scroll: maxBufferPx must be greater than or equal to minBufferPx');\n    }\n    this._itemSize = itemSize;\n    this._minBufferPx = minBufferPx;\n    this._maxBufferPx = maxBufferPx;\n    this._updateTotalContentSize();\n    this._updateRenderedRange();\n  }\n\n  /** @docs-private Implemented as part of VirtualScrollStrategy. */\n  onContentScrolled() {\n    this._updateRenderedRange();\n  }\n\n  /** @docs-private Implemented as part of VirtualScrollStrategy. */\n  onDataLengthChanged() {\n    this._updateTotalContentSize();\n    this._updateRenderedRange();\n  }\n\n  /** @docs-private Implemented as part of VirtualScrollStrategy. */\n  onContentRendered() { /* no-op */ }\n\n  /** @docs-private Implemented as part of VirtualScrollStrategy. */\n  onRenderedOffsetChanged() { /* no-op */ }\n\n  /**\n   * Scroll to the offset for the given index.\n   * @param index The index of the element to scroll to.\n   * @param behavior The ScrollBehavior to use when scrolling.\n   */\n  scrollToIndex(index: number, behavior: ScrollBehavior): void {\n    if (this._viewport) {\n      this._viewport.scrollToOffset(index * this._itemSize, behavior);\n    }\n  }\n\n  /** Update the viewport's total content size. */\n  private _updateTotalContentSize() {\n    if (!this._viewport) {\n      return;\n    }\n\n    this._viewport.setTotalContentSize(this._viewport.getDataLength() * this._itemSize);\n  }\n\n  /** Update the viewport's rendered range. */\n  private _updateRenderedRange() {\n    if (!this._viewport) {\n      return;\n    }\n\n    const scrollOffset = this._viewport.measureScrollOffset();\n    const firstVisibleIndex = scrollOffset / this._itemSize;\n    const renderedRange = this._viewport.getRenderedRange();\n    const newRange = {start: renderedRange.start, end: renderedRange.end};\n    const viewportSize = this._viewport.getViewportSize();\n    const dataLength = this._viewport.getDataLength();\n\n    const startBuffer = scrollOffset - newRange.start * this._itemSize;\n    if (startBuffer < this._minBufferPx && newRange.start != 0) {\n      const expandStart = Math.ceil((this._maxBufferPx - startBuffer) / this._itemSize);\n      newRange.start = Math.max(0, newRange.start - expandStart);\n      newRange.end = Math.min(dataLength,\n          Math.ceil(firstVisibleIndex + (viewportSize + this._minBufferPx) / this._itemSize));\n    } else {\n      const endBuffer = newRange.end * this._itemSize - (scrollOffset + viewportSize);\n      if (endBuffer < this._minBufferPx && newRange.end != dataLength) {\n        const expandEnd = Math.ceil((this._maxBufferPx - endBuffer) / this._itemSize);\n        if (expandEnd > 0) {\n          newRange.end = Math.min(dataLength, newRange.end + expandEnd);\n          newRange.start = Math.max(0,\n              Math.floor(firstVisibleIndex - this._minBufferPx / this._itemSize));\n        }\n      }\n    }\n\n    this._viewport.setRenderedRange(newRange);\n    this._viewport.setRenderedContentOffset(this._itemSize * newRange.start);\n    this._scrolledIndexChange.next(Math.floor(firstVisibleIndex));\n  }\n}\n\n\n/**\n * Provider factory for `FixedSizeVirtualScrollStrategy` that simply extracts the already created\n * `FixedSizeVirtualScrollStrategy` from the given directive.\n * @param fixedSizeDir The instance of `CdkFixedSizeVirtualScroll` to extract the\n *     `FixedSizeVirtualScrollStrategy` from.\n */\nexport function _fixedSizeVirtualScrollStrategyFactory(fixedSizeDir: CdkFixedSizeVirtualScroll) {\n  return fixedSizeDir._scrollStrategy;\n}\n\n\n/** A virtual scroll strategy that supports fixed-size items. */\n@Directive({\n  selector: 'cdk-virtual-scroll-viewport[itemSize]',\n  providers: [{\n    provide: VIRTUAL_SCROLL_STRATEGY,\n    useFactory: _fixedSizeVirtualScrollStrategyFactory,\n    deps: [forwardRef(() => CdkFixedSizeVirtualScroll)],\n  }],\n})\nexport class CdkFixedSizeVirtualScroll implements OnChanges {\n  /** The size of the items in the list (in pixels). */\n  @Input()\n  get itemSize(): number { return this._itemSize; }\n  set itemSize(value: number) { this._itemSize = coerceNumberProperty(value); }\n  _itemSize = 20;\n\n  /**\n   * The minimum amount of buffer rendered beyond the viewport (in pixels).\n   * If the amount of buffer dips below this number, more items will be rendered. Defaults to 100px.\n   */\n  @Input()\n  get minBufferPx(): number { return this._minBufferPx; }\n  set minBufferPx(value: number) { this._minBufferPx = coerceNumberProperty(value); }\n  _minBufferPx = 100;\n\n  /**\n   * The number of pixels worth of buffer to render for when rendering new items. Defaults to 200px.\n   */\n  @Input()\n  get maxBufferPx(): number { return this._maxBufferPx; }\n  set maxBufferPx(value: number) { this._maxBufferPx = coerceNumberProperty(value); }\n  _maxBufferPx = 200;\n\n  /** The scroll strategy used by this directive. */\n  _scrollStrategy =\n      new FixedSizeVirtualScrollStrategy(this.itemSize, this.minBufferPx, this.maxBufferPx);\n\n  ngOnChanges() {\n    this._scrollStrategy.updateItemAndBufferSize(this.itemSize, this.minBufferPx, this.maxBufferPx);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  ElementRef,\n  Injectable,\n  NgZone,\n  OnDestroy,\n  Optional,\n  SkipSelf,\n} from '@angular/core';\nimport {fromEvent, of as observableOf, Subject, Subscription, Observable, Observer} from 'rxjs';\nimport {auditTime, filter} from 'rxjs/operators';\nimport {CdkScrollable} from './scrollable';\n\n\n/** Time in ms to throttle the scrolling events by default. */\nexport const DEFAULT_SCROLL_TIME = 20;\n\n/**\n * Service contained all registered Scrollable references and emits an event when any one of the\n * Scrollable references emit a scrolled event.\n */\n@Injectable({providedIn: 'root'})\nexport class ScrollDispatcher implements OnDestroy {\n  constructor(private _ngZone: NgZone, private _platform: Platform) { }\n\n  /** Subject for notifying that a registered scrollable reference element has been scrolled. */\n  private _scrolled = new Subject<CdkScrollable|void>();\n\n  /** Keeps track of the global `scroll` and `resize` subscriptions. */\n  _globalSubscription: Subscription | null = null;\n\n  /** Keeps track of the amount of subscriptions to `scrolled`. Used for cleaning up afterwards. */\n  private _scrolledCount = 0;\n\n  /**\n   * Map of all the scrollable references that are registered with the service and their\n   * scroll event subscriptions.\n   */\n  scrollContainers: Map<CdkScrollable, Subscription> = new Map();\n\n  /**\n   * Registers a scrollable instance with the service and listens for its scrolled events. When the\n   * scrollable is scrolled, the service emits the event to its scrolled observable.\n   * @param scrollable Scrollable instance to be registered.\n   */\n  register(scrollable: CdkScrollable): void {\n    const scrollSubscription = scrollable.elementScrolled()\n        .subscribe(() => this._scrolled.next(scrollable));\n\n    this.scrollContainers.set(scrollable, scrollSubscription);\n  }\n\n  /**\n   * Deregisters a Scrollable reference and unsubscribes from its scroll event observable.\n   * @param scrollable Scrollable instance to be deregistered.\n   */\n  deregister(scrollable: CdkScrollable): void {\n    const scrollableReference = this.scrollContainers.get(scrollable);\n\n    if (scrollableReference) {\n      scrollableReference.unsubscribe();\n      this.scrollContainers.delete(scrollable);\n    }\n  }\n\n  /**\n   * Returns an observable that emits an event whenever any of the registered Scrollable\n   * references (or window, document, or body) fire a scrolled event. Can provide a time in ms\n   * to override the default \"throttle\" time.\n   *\n   * **Note:** in order to avoid hitting change detection for every scroll event,\n   * all of the events emitted from this stream will be run outside the Angular zone.\n   * If you need to update any data bindings as a result of a scroll event, you have\n   * to run the callback using `NgZone.run`.\n   */\n  scrolled(auditTimeInMs: number = DEFAULT_SCROLL_TIME): Observable<CdkScrollable|void> {\n    if (!this._platform.isBrowser) {\n      return observableOf<void>();\n    }\n\n    return Observable.create((observer: Observer<CdkScrollable|void>) => {\n      if (!this._globalSubscription) {\n        this._addGlobalListener();\n      }\n\n      // In the case of a 0ms delay, use an observable without auditTime\n      // since it does add a perceptible delay in processing overhead.\n      const subscription = auditTimeInMs > 0 ?\n        this._scrolled.pipe(auditTime(auditTimeInMs)).subscribe(observer) :\n        this._scrolled.subscribe(observer);\n\n      this._scrolledCount++;\n\n      return () => {\n        subscription.unsubscribe();\n        this._scrolledCount--;\n\n        if (!this._scrolledCount) {\n          this._removeGlobalListener();\n        }\n      };\n    });\n  }\n\n  ngOnDestroy() {\n    this._removeGlobalListener();\n    this.scrollContainers.forEach((_, container) => this.deregister(container));\n    this._scrolled.complete();\n  }\n\n  /**\n   * Returns an observable that emits whenever any of the\n   * scrollable ancestors of an element are scrolled.\n   * @param elementRef Element whose ancestors to listen for.\n   * @param auditTimeInMs Time to throttle the scroll events.\n   */\n  ancestorScrolled(elementRef: ElementRef, auditTimeInMs?: number): Observable<CdkScrollable|void> {\n    const ancestors = this.getAncestorScrollContainers(elementRef);\n\n    return this.scrolled(auditTimeInMs).pipe(filter(target => {\n      return !target || ancestors.indexOf(target) > -1;\n    }));\n  }\n\n  /** Returns all registered Scrollables that contain the provided element. */\n  getAncestorScrollContainers(elementRef: ElementRef): CdkScrollable[] {\n    const scrollingContainers: CdkScrollable[] = [];\n\n    this.scrollContainers.forEach((_subscription: Subscription, scrollable: CdkScrollable) => {\n      if (this._scrollableContainsElement(scrollable, elementRef)) {\n        scrollingContainers.push(scrollable);\n      }\n    });\n\n    return scrollingContainers;\n  }\n\n  /** Returns true if the element is contained within the provided Scrollable. */\n  private _scrollableContainsElement(scrollable: CdkScrollable, elementRef: ElementRef): boolean {\n    let element: HTMLElement | null = elementRef.nativeElement;\n    let scrollableElement = scrollable.getElementRef().nativeElement;\n\n    // Traverse through the element parents until we reach null, checking if any of the elements\n    // are the scrollable's element.\n    do {\n      if (element == scrollableElement) { return true; }\n    } while (element = element!.parentElement);\n\n    return false;\n  }\n\n  /** Sets up the global scroll listeners. */\n  private _addGlobalListener() {\n    this._globalSubscription = this._ngZone.runOutsideAngular(() => {\n      return fromEvent(window.document, 'scroll').subscribe(() => this._scrolled.next());\n    });\n  }\n\n  /** Cleans up the global scroll listener. */\n  private _removeGlobalListener() {\n    if (this._globalSubscription) {\n      this._globalSubscription.unsubscribe();\n      this._globalSubscription = null;\n    }\n  }\n}\n\n\n/** @docs-private @deprecated @breaking-change 8.0.0 */\nexport function SCROLL_DISPATCHER_PROVIDER_FACTORY(\n    parentDispatcher: ScrollDispatcher, ngZone: NgZone, platform: Platform) {\n  return parentDispatcher || new ScrollDispatcher(ngZone, platform);\n}\n\n/** @docs-private @deprecated @breaking-change 8.0.0 */\nexport const SCROLL_DISPATCHER_PROVIDER = {\n  // If there is already a ScrollDispatcher available, use that. Otherwise, provide a new one.\n  provide: ScrollDispatcher,\n  deps: [[new Optional(), new SkipSelf(), ScrollDispatcher], NgZone, Platform],\n  useFactory: SCROLL_DISPATCHER_PROVIDER_FACTORY\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {\n  getRtlScrollAxisType,\n  RtlScrollAxisType,\n  supportsScrollBehavior\n} from '@angular/cdk/platform';\nimport {Directive, ElementRef, NgZone, OnDestroy, OnInit, Optional} from '@angular/core';\nimport {fromEvent, Observable, Subject, Observer} from 'rxjs';\nimport {takeUntil} from 'rxjs/operators';\nimport {ScrollDispatcher} from './scroll-dispatcher';\n\nexport type _Without<T> = {[P in keyof T]?: never};\nexport type _XOR<T, U> = (_Without<T> & U) | (_Without<U> & T);\nexport type _Top = {top?: number};\nexport type _Bottom = {bottom?: number};\nexport type _Left = {left?: number};\nexport type _Right = {right?: number};\nexport type _Start = {start?: number};\nexport type _End = {end?: number};\nexport type _XAxis = _XOR<_XOR<_Left, _Right>, _XOR<_Start, _End>>;\nexport type _YAxis = _XOR<_Top, _Bottom>;\n\n/**\n * An extended version of ScrollToOptions that allows expressing scroll offsets relative to the\n * top, bottom, left, right, start, or end of the viewport rather than just the top and left.\n * Please note: the top and bottom properties are mutually exclusive, as are the left, right,\n * start, and end properties.\n */\nexport type ExtendedScrollToOptions = _XAxis & _YAxis & ScrollOptions;\n\n/**\n * Sends an event when the directive's element is scrolled. Registers itself with the\n * ScrollDispatcher service to include itself as part of its collection of scrolling events that it\n * can be listened to through the service.\n */\n@Directive({\n  selector: '[cdk-scrollable], [cdkScrollable]'\n})\nexport class CdkScrollable implements OnInit, OnDestroy {\n  private _destroyed = new Subject();\n\n  private _elementScrolled: Observable<Event> = Observable.create((observer: Observer<Event>) =>\n      this.ngZone.runOutsideAngular(() =>\n          fromEvent(this.elementRef.nativeElement, 'scroll').pipe(takeUntil(this._destroyed))\n              .subscribe(observer)));\n\n  constructor(protected elementRef: ElementRef<HTMLElement>,\n              protected scrollDispatcher: ScrollDispatcher,\n              protected ngZone: NgZone,\n              @Optional() protected dir?: Directionality) {}\n\n  ngOnInit() {\n    this.scrollDispatcher.register(this);\n  }\n\n  ngOnDestroy() {\n    this.scrollDispatcher.deregister(this);\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /** Returns observable that emits when a scroll event is fired on the host element. */\n  elementScrolled(): Observable<Event> {\n    return this._elementScrolled;\n  }\n\n  /** Gets the ElementRef for the viewport. */\n  getElementRef(): ElementRef<HTMLElement> {\n    return this.elementRef;\n  }\n\n  /**\n   * Scrolls to the specified offsets. This is a normalized version of the browser's native scrollTo\n   * method, since browsers are not consistent about what scrollLeft means in RTL. For this method\n   * left and right always refer to the left and right side of the scrolling container irrespective\n   * of the layout direction. start and end refer to left and right in an LTR context and vice-versa\n   * in an RTL context.\n   * @param options specified the offsets to scroll to.\n   */\n  scrollTo(options: ExtendedScrollToOptions): void {\n    const el = this.elementRef.nativeElement;\n    const isRtl = this.dir && this.dir.value == 'rtl';\n\n    // Rewrite start & end offsets as right or left offsets.\n    options.left = options.left == null ? (isRtl ? options.end : options.start) : options.left;\n    options.right = options.right == null ? (isRtl ? options.start : options.end) : options.right;\n\n    // Rewrite the bottom offset as a top offset.\n    if (options.bottom != null) {\n      options.top = el.scrollHeight - el.clientHeight - options.bottom;\n    }\n\n    // Rewrite the right offset as a left offset.\n    if (isRtl && getRtlScrollAxisType() != RtlScrollAxisType.NORMAL) {\n      if (options.left != null) {\n        options.right = el.scrollWidth - el.clientWidth - options.left;\n      }\n\n      if (getRtlScrollAxisType() == RtlScrollAxisType.INVERTED) {\n        options.left = options.right;\n      } else if (getRtlScrollAxisType() == RtlScrollAxisType.NEGATED) {\n        options.left = options.right ? -options.right : options.right;\n      }\n    } else {\n      if (options.right != null) {\n        options.left = el.scrollWidth - el.clientWidth - options.right;\n      }\n    }\n\n    this._applyScrollToOptions(options);\n  }\n\n  private _applyScrollToOptions(options: ScrollToOptions): void {\n    const el = this.elementRef.nativeElement;\n\n    if (supportsScrollBehavior()) {\n      el.scrollTo(options);\n    } else {\n      if (options.top != null) {\n        el.scrollTop = options.top;\n      }\n      if (options.left != null) {\n        el.scrollLeft = options.left;\n      }\n    }\n  }\n\n  /**\n   * Measures the scroll offset relative to the specified edge of the viewport. This method can be\n   * used instead of directly checking scrollLeft or scrollTop, since browsers are not consistent\n   * about what scrollLeft means in RTL. The values returned by this method are normalized such that\n   * left and right always refer to the left and right side of the scrolling container irrespective\n   * of the layout direction. start and end refer to left and right in an LTR context and vice-versa\n   * in an RTL context.\n   * @param from The edge to measure from.\n   */\n  measureScrollOffset(from: 'top' | 'left' | 'right' | 'bottom' | 'start' | 'end'): number {\n    const LEFT = 'left';\n    const RIGHT = 'right';\n    const el = this.elementRef.nativeElement;\n    if (from == 'top') {\n      return el.scrollTop;\n    }\n    if (from == 'bottom') {\n      return el.scrollHeight - el.clientHeight - el.scrollTop;\n    }\n\n    // Rewrite start & end as left or right offsets.\n    const isRtl = this.dir && this.dir.value == 'rtl';\n    if (from == 'start') {\n      from = isRtl ? RIGHT : LEFT;\n    } else if (from == 'end') {\n      from = isRtl ? LEFT : RIGHT;\n    }\n\n    if (isRtl && getRtlScrollAxisType() == RtlScrollAxisType.INVERTED) {\n      // For INVERTED, scrollLeft is (scrollWidth - clientWidth) when scrolled all the way left and\n      // 0 when scrolled all the way right.\n      if (from == LEFT) {\n        return el.scrollWidth - el.clientWidth - el.scrollLeft;\n      } else {\n        return el.scrollLeft;\n      }\n    } else if (isRtl && getRtlScrollAxisType() == RtlScrollAxisType.NEGATED) {\n      // For NEGATED, scrollLeft is -(scrollWidth - clientWidth) when scrolled all the way left and\n      // 0 when scrolled all the way right.\n      if (from == LEFT) {\n        return el.scrollLeft + el.scrollWidth - el.clientWidth;\n      } else {\n        return -el.scrollLeft;\n      }\n    } else {\n      // For NORMAL, as well as non-RTL contexts, scrollLeft is 0 when scrolled all the way left and\n      // (scrollWidth - clientWidth) when scrolled all the way right.\n      if (from == LEFT) {\n        return el.scrollLeft;\n      } else {\n        return el.scrollWidth - el.clientWidth - el.scrollLeft;\n      }\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {ListRange} from '@angular/cdk/collections';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {animationFrameScheduler, Observable, Subject, Observer} from 'rxjs';\nimport {auditTime, startWith, takeUntil} from 'rxjs/operators';\nimport {ScrollDispatcher} from './scroll-dispatcher';\nimport {CdkScrollable, ExtendedScrollToOptions} from './scrollable';\nimport {CdkVirtualForOf} from './virtual-for-of';\nimport {VIRTUAL_SCROLL_STRATEGY, VirtualScrollStrategy} from './virtual-scroll-strategy';\n\n\n/** Checks if the given ranges are equal. */\nfunction rangesEqual(r1: ListRange, r2: ListRange): boolean {\n  return r1.start == r2.start && r1.end == r2.end;\n}\n\n\n/** A viewport that virtualizes it's scrolling with the help of `CdkVirtualForOf`. */\n@Component({\n  moduleId: module.id,\n  selector: 'cdk-virtual-scroll-viewport',\n  templateUrl: 'virtual-scroll-viewport.html',\n  styleUrls: ['virtual-scroll-viewport.css'],\n  host: {\n    'class': 'cdk-virtual-scroll-viewport',\n    '[class.cdk-virtual-scroll-orientation-horizontal]': 'orientation === \"horizontal\"',\n    '[class.cdk-virtual-scroll-orientation-vertical]': 'orientation === \"vertical\"',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CdkVirtualScrollViewport extends CdkScrollable implements OnInit, OnDestroy {\n  /** Emits when the viewport is detached from a CdkVirtualForOf. */\n  private _detachedSubject = new Subject<void>();\n\n  /** Emits when the rendered range changes. */\n  private _renderedRangeSubject = new Subject<ListRange>();\n\n  /** The direction the viewport scrolls. */\n  @Input() orientation: 'horizontal' | 'vertical' = 'vertical';\n\n  // Note: we don't use the typical EventEmitter here because we need to subscribe to the scroll\n  // strategy lazily (i.e. only if the user is actually listening to the events). We do this because\n  // depending on how the strategy calculates the scrolled index, it may come at a cost to\n  // performance.\n  /** Emits when the index of the first element visible in the viewport changes. */\n  @Output() scrolledIndexChange: Observable<number> =\n      Observable.create((observer: Observer<number>) =>\n        this._scrollStrategy.scrolledIndexChange.subscribe(index =>\n            Promise.resolve().then(() => this.ngZone.run(() => observer.next(index)))));\n\n  /** The element that wraps the rendered content. */\n  @ViewChild('contentWrapper') _contentWrapper: ElementRef<HTMLElement>;\n\n  /** A stream that emits whenever the rendered range changes. */\n  renderedRangeStream: Observable<ListRange> = this._renderedRangeSubject.asObservable();\n\n  /**\n   * The transform used to scale the spacer to the same size as all content, including content that\n   * is not currently rendered.\n   */\n  _totalContentSizeTransform = '';\n\n  /**\n   * The total size of all content (in pixels), including content that is not currently rendered.\n   */\n  private _totalContentSize = 0;\n\n  /**\n   * The CSS transform applied to the rendered subset of items so that they appear within the bounds\n   * of the visible viewport.\n   */\n  private _renderedContentTransform: string;\n\n  /** The currently rendered range of indices. */\n  private _renderedRange: ListRange = {start: 0, end: 0};\n\n  /** The length of the data bound to this viewport (in number of items). */\n  private _dataLength = 0;\n\n  /** The size of the viewport (in pixels). */\n  private _viewportSize = 0;\n\n  /** the currently attached CdkVirtualForOf. */\n  private _forOf: CdkVirtualForOf<any> | null;\n\n  /** The last rendered content offset that was set. */\n  private _renderedContentOffset = 0;\n\n  /**\n   * Whether the last rendered content offset was to the end of the content (and therefore needs to\n   * be rewritten as an offset to the start of the content).\n   */\n  private _renderedContentOffsetNeedsRewrite = false;\n\n  /** Whether there is a pending change detection cycle. */\n  private _isChangeDetectionPending = false;\n\n  /** A list of functions to run after the next change detection cycle. */\n  private _runAfterChangeDetection: Function[] = [];\n\n  constructor(public elementRef: ElementRef<HTMLElement>,\n              private _changeDetectorRef: ChangeDetectorRef,\n              ngZone: NgZone,\n              @Optional() @Inject(VIRTUAL_SCROLL_STRATEGY)\n                  private _scrollStrategy: VirtualScrollStrategy,\n              @Optional() dir: Directionality,\n              scrollDispatcher: ScrollDispatcher) {\n    super(elementRef, scrollDispatcher, ngZone, dir);\n\n    if (!_scrollStrategy) {\n      throw Error('Error: cdk-virtual-scroll-viewport requires the \"itemSize\" property to be set.');\n    }\n  }\n\n  ngOnInit() {\n    super.ngOnInit();\n\n    // It's still too early to measure the viewport at this point. Deferring with a promise allows\n    // the Viewport to be rendered with the correct size before we measure. We run this outside the\n    // zone to avoid causing more change detection cycles. We handle the change detection loop\n    // ourselves instead.\n    this.ngZone.runOutsideAngular(() => Promise.resolve().then(() => {\n      this._measureViewportSize();\n      this._scrollStrategy.attach(this);\n\n      this.elementScrolled()\n          .pipe(\n              // Start off with a fake scroll event so we properly detect our initial position.\n              startWith<Event | null>(null!),\n              // Collect multiple events into one until the next animation frame. This way if\n              // there are multiple scroll events in the same frame we only need to recheck\n              // our layout once.\n              auditTime(0, animationFrameScheduler))\n          .subscribe(() => this._scrollStrategy.onContentScrolled());\n\n      this._markChangeDetectionNeeded();\n    }));\n  }\n\n  ngOnDestroy() {\n    this.detach();\n    this._scrollStrategy.detach();\n\n    // Complete all subjects\n    this._renderedRangeSubject.complete();\n    this._detachedSubject.complete();\n\n    super.ngOnDestroy();\n  }\n\n  /** Attaches a `CdkVirtualForOf` to this viewport. */\n  attach(forOf: CdkVirtualForOf<any>) {\n    if (this._forOf) {\n      throw Error('CdkVirtualScrollViewport is already attached.');\n    }\n\n    // Subscribe to the data stream of the CdkVirtualForOf to keep track of when the data length\n    // changes. Run outside the zone to avoid triggering change detection, since we're managing the\n    // change detection loop ourselves.\n    this.ngZone.runOutsideAngular(() => {\n      this._forOf = forOf;\n      this._forOf.dataStream.pipe(takeUntil(this._detachedSubject)).subscribe(data => {\n        const newLength = data.length;\n        if (newLength !== this._dataLength) {\n          this._dataLength = newLength;\n          this._scrollStrategy.onDataLengthChanged();\n        }\n        this._doChangeDetection();\n      });\n    });\n  }\n\n  /** Detaches the current `CdkVirtualForOf`. */\n  detach() {\n    this._forOf = null;\n    this._detachedSubject.next();\n  }\n\n  /** Gets the length of the data bound to this viewport (in number of items). */\n  getDataLength(): number {\n    return this._dataLength;\n  }\n\n  /** Gets the size of the viewport (in pixels). */\n  getViewportSize(): number {\n    return this._viewportSize;\n  }\n\n  // TODO(mmalerba): This is technically out of sync with what's really rendered until a render\n  // cycle happens. I'm being careful to only call it after the render cycle is complete and before\n  // setting it to something else, but its error prone and should probably be split into\n  // `pendingRange` and `renderedRange`, the latter reflecting whats actually in the DOM.\n\n  /** Get the current rendered range of items. */\n  getRenderedRange(): ListRange {\n    return this._renderedRange;\n  }\n\n  /**\n   * Sets the total size of all content (in pixels), including content that is not currently\n   * rendered.\n   */\n  setTotalContentSize(size: number) {\n    if (this._totalContentSize !== size) {\n      this._totalContentSize = size;\n      const axis = this.orientation == 'horizontal' ? 'X' : 'Y';\n      this._totalContentSizeTransform = `scale${axis}(${this._totalContentSize})`;\n      this._markChangeDetectionNeeded();\n    }\n  }\n\n  /** Sets the currently rendered range of indices. */\n  setRenderedRange(range: ListRange) {\n    if (!rangesEqual(this._renderedRange, range)) {\n      this._renderedRangeSubject.next(this._renderedRange = range);\n      this._markChangeDetectionNeeded(() => this._scrollStrategy.onContentRendered());\n    }\n  }\n\n  /**\n   * Gets the offset from the start of the viewport to the start of the rendered data (in pixels).\n   */\n  getOffsetToRenderedContentStart(): number | null {\n    return this._renderedContentOffsetNeedsRewrite ? null : this._renderedContentOffset;\n  }\n\n  /**\n   * Sets the offset from the start of the viewport to either the start or end of the rendered data\n   * (in pixels).\n   */\n  setRenderedContentOffset(offset: number, to: 'to-start' | 'to-end' = 'to-start') {\n    // For a horizontal viewport in a right-to-left language we need to translate along the x-axis\n    // in the negative direction.\n    const isRtl = this.dir && this.dir.value == 'rtl';\n    const isHorizontal = this.orientation == 'horizontal';\n    const axis = isHorizontal ? 'X' : 'Y';\n    const axisDirection = isHorizontal && isRtl ? -1 : 1;\n    let transform = `translate${axis}(${Number(axisDirection * offset)}px)`;\n    this._renderedContentOffset = offset;\n    if (to === 'to-end') {\n      transform += ` translate${axis}(-100%)`;\n      // The viewport should rewrite this as a `to-start` offset on the next render cycle. Otherwise\n      // elements will appear to expand in the wrong direction (e.g. `mat-expansion-panel` would\n      // expand upward).\n      this._renderedContentOffsetNeedsRewrite = true;\n    }\n    if (this._renderedContentTransform != transform) {\n      // We know this value is safe because we parse `offset` with `Number()` before passing it\n      // into the string.\n      this._renderedContentTransform = transform;\n      this._markChangeDetectionNeeded(() => {\n        if (this._renderedContentOffsetNeedsRewrite) {\n          this._renderedContentOffset -= this.measureRenderedContentSize();\n          this._renderedContentOffsetNeedsRewrite = false;\n          this.setRenderedContentOffset(this._renderedContentOffset);\n        } else {\n          this._scrollStrategy.onRenderedOffsetChanged();\n        }\n      });\n    }\n  }\n\n  /**\n   * Scrolls to the given offset from the start of the viewport. Please note that this is not always\n   * the same as setting `scrollTop` or `scrollLeft`. In a horizontal viewport with right-to-left\n   * direction, this would be the equivalent of setting a fictional `scrollRight` property.\n   * @param offset The offset to scroll to.\n   * @param behavior The ScrollBehavior to use when scrolling. Default is behavior is `auto`.\n   */\n  scrollToOffset(offset: number, behavior: ScrollBehavior = 'auto') {\n    const options: ExtendedScrollToOptions = {behavior};\n    if (this.orientation === 'horizontal') {\n      options.start = offset;\n    } else {\n      options.top = offset;\n    }\n    this.scrollTo(options);\n  }\n\n  /**\n   * Scrolls to the offset for the given index.\n   * @param index The index of the element to scroll to.\n   * @param behavior The ScrollBehavior to use when scrolling. Default is behavior is `auto`.\n   */\n  scrollToIndex(index: number,  behavior: ScrollBehavior = 'auto') {\n    this._scrollStrategy.scrollToIndex(index, behavior);\n  }\n\n  /**\n   * Gets the current scroll offset from the start of the viewport (in pixels).\n   * @param from The edge to measure the offset from. Defaults to 'top' in vertical mode and 'start'\n   *     in horizontal mode.\n   */\n  measureScrollOffset(from?: 'top' | 'left' | 'right' | 'bottom' | 'start' | 'end'): number {\n    return super.measureScrollOffset(\n        from ? from : this.orientation === 'horizontal' ? 'start' : 'top');\n  }\n\n  /** Measure the combined size of all of the rendered items. */\n  measureRenderedContentSize(): number {\n    const contentEl = this._contentWrapper.nativeElement;\n    return this.orientation === 'horizontal' ? contentEl.offsetWidth : contentEl.offsetHeight;\n  }\n\n  /**\n   * Measure the total combined size of the given range. Throws if the range includes items that are\n   * not rendered.\n   */\n  measureRangeSize(range: ListRange): number {\n    if (!this._forOf) {\n      return 0;\n    }\n    return this._forOf.measureRangeSize(range, this.orientation);\n  }\n\n  /** Update the viewport dimensions and re-render. */\n  checkViewportSize() {\n    // TODO: Cleanup later when add logic for handling content resize\n    this._measureViewportSize();\n    this._scrollStrategy.onDataLengthChanged();\n  }\n\n  /** Measure the viewport size. */\n  private _measureViewportSize() {\n    const viewportEl = this.elementRef.nativeElement;\n    this._viewportSize = this.orientation === 'horizontal' ?\n        viewportEl.clientWidth : viewportEl.clientHeight;\n  }\n\n  /** Queue up change detection to run. */\n  private _markChangeDetectionNeeded(runAfter?: Function) {\n    if (runAfter) {\n      this._runAfterChangeDetection.push(runAfter);\n    }\n\n    // Use a Promise to batch together calls to `_doChangeDetection`. This way if we set a bunch of\n    // properties sequentially we only have to run `_doChangeDetection` once at the end.\n    if (!this._isChangeDetectionPending) {\n      this._isChangeDetectionPending = true;\n      this.ngZone.runOutsideAngular(() => Promise.resolve().then(() => {\n        this._doChangeDetection();\n      }));\n    }\n  }\n\n  /** Run change detection. */\n  private _doChangeDetection() {\n    this._isChangeDetectionPending = false;\n\n    // Apply changes to Angular bindings. Note: We must call `markForCheck` to run change detection\n    // from the root, since the repeated items are content projected in. Calling `detectChanges`\n    // instead does not properly check the projected content.\n    this.ngZone.run(() => this._changeDetectorRef.markForCheck());\n    // Apply the content transform. The transform can't be set via an Angular binding because\n    // bypassSecurityTrustStyle is banned in Google. However the value is safe, it's composed of\n    // string literals, a variable that can only be 'X' or 'Y', and user input that is run through\n    // the `Number` function first to coerce it to a numeric value.\n    this._contentWrapper.nativeElement.style.transform = this._renderedContentTransform;\n\n    const runAfterChangeDetection = this._runAfterChangeDetection;\n    this._runAfterChangeDetection = [];\n    for (const fn of runAfterChangeDetection) {\n      fn();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ArrayDataSource, CollectionViewer, DataSource, ListRange} from '@angular/cdk/collections';\nimport {\n  Directive,\n  DoCheck,\n  EmbeddedViewRef,\n  Input,\n  IterableChangeRecord,\n  IterableChanges,\n  IterableDiffer,\n  IterableDiffers,\n  NgIterable,\n  NgZone,\n  OnDestroy,\n  SkipSelf,\n  TemplateRef,\n  TrackByFunction,\n  ViewContainerRef,\n} from '@angular/core';\nimport {Observable, Subject} from 'rxjs';\nimport {pairwise, shareReplay, startWith, switchMap, takeUntil} from 'rxjs/operators';\nimport {CdkVirtualScrollViewport} from './virtual-scroll-viewport';\n\n\n/** The context for an item rendered by `CdkVirtualForOf` */\nexport type CdkVirtualForOfContext<T> = {\n  /** The item value. */\n  $implicit: T;\n  /** The DataSource, Observable, or NgIterable that was passed to *cdkVirtualFor. */\n  cdkVirtualForOf: DataSource<T> | Observable<T[]> | NgIterable<T>;\n  /** The index of the item in the DataSource. */\n  index: number;\n  /** The number of items in the DataSource. */\n  count: number;\n  /** Whether this is the first item in the DataSource. */\n  first: boolean;\n  /** Whether this is the last item in the DataSource. */\n  last: boolean;\n  /** Whether the index is even. */\n  even: boolean;\n  /** Whether the index is odd. */\n  odd: boolean;\n};\n\n\n/** Helper to extract size from a DOM Node. */\nfunction getSize(orientation: 'horizontal' | 'vertical', node: Node): number {\n  const el = node as Element;\n  if (!el.getBoundingClientRect) {\n    return 0;\n  }\n  const rect = el.getBoundingClientRect();\n  return orientation == 'horizontal' ? rect.width : rect.height;\n}\n\n\n/**\n * A directive similar to `ngForOf` to be used for rendering data inside a virtual scrolling\n * container.\n */\n@Directive({\n  selector: '[cdkVirtualFor][cdkVirtualForOf]',\n})\nexport class CdkVirtualForOf<T> implements CollectionViewer, DoCheck, OnDestroy {\n  /** Emits when the rendered view of the data changes. */\n  viewChange = new Subject<ListRange>();\n\n  /** Subject that emits when a new DataSource instance is given. */\n  private _dataSourceChanges = new Subject<DataSource<T>>();\n\n  /** The DataSource to display. */\n  @Input()\n  get cdkVirtualForOf(): DataSource<T> | Observable<T[]> | NgIterable<T> {\n    return this._cdkVirtualForOf;\n  }\n  set cdkVirtualForOf(value: DataSource<T> | Observable<T[]> | NgIterable<T>) {\n    this._cdkVirtualForOf = value;\n    const ds = value instanceof DataSource ? value :\n        // Slice the value if its an NgIterable to ensure we're working with an array.\n        new ArrayDataSource<T>(\n            value instanceof Observable ? value : Array.prototype.slice.call(value || []));\n    this._dataSourceChanges.next(ds);\n  }\n  _cdkVirtualForOf: DataSource<T> | Observable<T[]> | NgIterable<T>;\n\n  /**\n   * The `TrackByFunction` to use for tracking changes. The `TrackByFunction` takes the index and\n   * the item and produces a value to be used as the item's identity when tracking changes.\n   */\n  @Input()\n  get cdkVirtualForTrackBy(): TrackByFunction<T> | undefined {\n    return this._cdkVirtualForTrackBy;\n  }\n  set cdkVirtualForTrackBy(fn: TrackByFunction<T> | undefined) {\n    this._needsUpdate = true;\n    this._cdkVirtualForTrackBy = fn ?\n        (index, item) => fn(index + (this._renderedRange ? this._renderedRange.start : 0), item) :\n        undefined;\n  }\n  private _cdkVirtualForTrackBy: TrackByFunction<T> | undefined;\n\n  /** The template used to stamp out new elements. */\n  @Input()\n  set cdkVirtualForTemplate(value: TemplateRef<CdkVirtualForOfContext<T>>) {\n    if (value) {\n      this._needsUpdate = true;\n      this._template = value;\n    }\n  }\n\n  /**\n   * The size of the cache used to store templates that are not being used for re-use later.\n   * Setting the cache size to `0` will disable caching. Defaults to 20 templates.\n   */\n  @Input() cdkVirtualForTemplateCacheSize: number = 20;\n\n  /** Emits whenever the data in the current DataSource changes. */\n  dataStream: Observable<T[] | ReadonlyArray<T>> = this._dataSourceChanges\n      .pipe(\n          // Start off with null `DataSource`.\n          startWith<DataSource<T>>(null!),\n          // Bundle up the previous and current data sources so we can work with both.\n          pairwise(),\n          // Use `_changeDataSource` to disconnect from the previous data source and connect to the\n          // new one, passing back a stream of data changes which we run through `switchMap` to give\n          // us a data stream that emits the latest data from whatever the current `DataSource` is.\n          switchMap(([prev, cur]) => this._changeDataSource(prev, cur)),\n          // Replay the last emitted data when someone subscribes.\n          shareReplay(1));\n\n  /** The differ used to calculate changes to the data. */\n  private _differ: IterableDiffer<T> | null = null;\n\n  /** The most recent data emitted from the DataSource. */\n  private _data: T[] | ReadonlyArray<T>;\n\n  /** The currently rendered items. */\n  private _renderedItems: T[];\n\n  /** The currently rendered range of indices. */\n  private _renderedRange: ListRange;\n\n  /**\n   * The template cache used to hold on ot template instancess that have been stamped out, but don't\n   * currently need to be rendered. These instances will be reused in the future rather than\n   * stamping out brand new ones.\n   */\n  private _templateCache: EmbeddedViewRef<CdkVirtualForOfContext<T>>[] = [];\n\n  /** Whether the rendered data should be updated during the next ngDoCheck cycle. */\n  private _needsUpdate = false;\n\n  private _destroyed = new Subject<void>();\n\n  constructor(\n      /** The view container to add items to. */\n      private _viewContainerRef: ViewContainerRef,\n      /** The template to use when stamping out new items. */\n      private _template: TemplateRef<CdkVirtualForOfContext<T>>,\n      /** The set of available differs. */\n      private _differs: IterableDiffers,\n      /** The virtual scrolling viewport that these items are being rendered in. */\n      @SkipSelf() private _viewport: CdkVirtualScrollViewport,\n      ngZone: NgZone) {\n    this.dataStream.subscribe(data => {\n      this._data = data;\n      this._onRenderedDataChange();\n    });\n    this._viewport.renderedRangeStream.pipe(takeUntil(this._destroyed)).subscribe(range => {\n      this._renderedRange = range;\n      ngZone.run(() => this.viewChange.next(this._renderedRange));\n      this._onRenderedDataChange();\n    });\n    this._viewport.attach(this);\n  }\n\n  /**\n   * Measures the combined size (width for horizontal orientation, height for vertical) of all items\n   * in the specified range. Throws an error if the range includes items that are not currently\n   * rendered.\n   */\n  measureRangeSize(range: ListRange, orientation: 'horizontal' | 'vertical'): number {\n    if (range.start >= range.end) {\n      return 0;\n    }\n    if (range.start < this._renderedRange.start || range.end > this._renderedRange.end) {\n      throw Error(`Error: attempted to measure an item that isn't rendered.`);\n    }\n\n    // The index into the list of rendered views for the first item in the range.\n    const renderedStartIndex = range.start - this._renderedRange.start;\n    // The length of the range we're measuring.\n    const rangeLen = range.end - range.start;\n\n    // Loop over all root nodes for all items in the range and sum up their size.\n    let totalSize = 0;\n    let i = rangeLen;\n    while (i--) {\n      const view = this._viewContainerRef.get(i + renderedStartIndex) as\n          EmbeddedViewRef<CdkVirtualForOfContext<T>> | null;\n      let j = view ? view.rootNodes.length : 0;\n      while (j--) {\n        totalSize += getSize(orientation, view!.rootNodes[j]);\n      }\n    }\n\n    return totalSize;\n  }\n\n  ngDoCheck() {\n    if (this._differ && this._needsUpdate) {\n      // TODO(mmalerba): We should differentiate needs update due to scrolling and a new portion of\n      // this list being rendered (can use simpler algorithm) vs needs update due to data actually\n      // changing (need to do this diff).\n      const changes = this._differ.diff(this._renderedItems);\n      if (!changes) {\n        this._updateContext();\n      } else {\n        this._applyChanges(changes);\n      }\n      this._needsUpdate = false;\n    }\n  }\n\n  ngOnDestroy() {\n    this._viewport.detach();\n\n    this._dataSourceChanges.complete();\n    this.viewChange.complete();\n\n    this._destroyed.next();\n    this._destroyed.complete();\n\n    for (let view of this._templateCache) {\n      view.destroy();\n    }\n  }\n\n  /** React to scroll state changes in the viewport. */\n  private _onRenderedDataChange() {\n    if (!this._renderedRange) {\n      return;\n    }\n    this._renderedItems = this._data.slice(this._renderedRange.start, this._renderedRange.end);\n    if (!this._differ) {\n      this._differ = this._differs.find(this._renderedItems).create(this.cdkVirtualForTrackBy);\n    }\n    this._needsUpdate = true;\n  }\n\n  /** Swap out one `DataSource` for another. */\n  private _changeDataSource(oldDs: DataSource<T> | null, newDs: DataSource<T>):\n    Observable<T[] | ReadonlyArray<T>> {\n\n    if (oldDs) {\n      oldDs.disconnect(this);\n    }\n\n    this._needsUpdate = true;\n    return newDs.connect(this);\n  }\n\n  /** Update the `CdkVirtualForOfContext` for all views. */\n  private _updateContext() {\n    const count = this._data.length;\n    let i = this._viewContainerRef.length;\n    while (i--) {\n      let view = this._viewContainerRef.get(i) as EmbeddedViewRef<CdkVirtualForOfContext<T>>;\n      view.context.index = this._renderedRange.start + i;\n      view.context.count = count;\n      this._updateComputedContextProperties(view.context);\n      view.detectChanges();\n    }\n  }\n\n  /** Apply changes to the DOM. */\n  private _applyChanges(changes: IterableChanges<T>) {\n    // Rearrange the views to put them in the right location.\n    changes.forEachOperation((record: IterableChangeRecord<T>,\n                              adjustedPreviousIndex: number | null,\n                              currentIndex: number | null) => {\n      if (record.previousIndex == null) {  // Item added.\n        const view = this._getViewForNewItem();\n        this._viewContainerRef.insert(view, currentIndex!);\n        view.context.$implicit = record.item;\n      } else if (currentIndex == null) {  // Item removed.\n        this._cacheView(this._viewContainerRef.detach(adjustedPreviousIndex!) as\n            EmbeddedViewRef<CdkVirtualForOfContext<T>>);\n      } else {  // Item moved.\n        const view = this._viewContainerRef.get(adjustedPreviousIndex!) as\n            EmbeddedViewRef<CdkVirtualForOfContext<T>>;\n        this._viewContainerRef.move(view, currentIndex);\n        view.context.$implicit = record.item;\n      }\n    });\n\n    // Update $implicit for any items that had an identity change.\n    changes.forEachIdentityChange((record: IterableChangeRecord<T>) => {\n      const view = this._viewContainerRef.get(record.currentIndex!) as\n          EmbeddedViewRef<CdkVirtualForOfContext<T>>;\n      view.context.$implicit = record.item;\n    });\n\n    // Update the context variables on all items.\n    const count = this._data.length;\n    let i = this._viewContainerRef.length;\n    while (i--) {\n      const view = this._viewContainerRef.get(i) as EmbeddedViewRef<CdkVirtualForOfContext<T>>;\n      view.context.index = this._renderedRange.start + i;\n      view.context.count = count;\n      this._updateComputedContextProperties(view.context);\n    }\n  }\n\n  /** Cache the given detached view. */\n  private _cacheView(view: EmbeddedViewRef<CdkVirtualForOfContext<T>>) {\n    if (this._templateCache.length < this.cdkVirtualForTemplateCacheSize) {\n      this._templateCache.push(view);\n    } else {\n      view.destroy();\n    }\n  }\n\n  /** Get a view for a new item, either from the cache or by creating a new one. */\n  private _getViewForNewItem(): EmbeddedViewRef<CdkVirtualForOfContext<T>> {\n    return this._templateCache.pop() || this._viewContainerRef.createEmbeddedView(this._template, {\n      $implicit: null!,\n      cdkVirtualForOf: this._cdkVirtualForOf,\n      index: -1,\n      count: -1,\n      first: false,\n      last: false,\n      odd: false,\n      even: false\n    });\n  }\n\n  /** Update the computed properties on the `CdkVirtualForOfContext`. */\n  private _updateComputedContextProperties(context: CdkVirtualForOfContext<any>) {\n    context.first = context.index === 0;\n    context.last = context.index === context.count - 1;\n    context.even = context.index % 2 === 0;\n    context.odd = !context.even;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {BidiModule} from '@angular/cdk/bidi';\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {NgModule} from '@angular/core';\nimport {CdkFixedSizeVirtualScroll} from './fixed-size-virtual-scroll';\nimport {CdkScrollable} from './scrollable';\nimport {CdkVirtualForOf} from './virtual-for-of';\nimport {CdkVirtualScrollViewport} from './virtual-scroll-viewport';\n\n@NgModule({\n  imports: [BidiModule, PlatformModule],\n  exports: [\n    BidiModule,\n    CdkFixedSizeVirtualScroll,\n    CdkScrollable,\n    CdkVirtualForOf,\n    CdkVirtualScrollViewport,\n  ],\n  declarations: [\n    CdkFixedSizeVirtualScroll,\n    CdkScrollable,\n    CdkVirtualForOf,\n    CdkVirtualScrollViewport,\n  ],\n})\nexport class ScrollingModule {}\n\n/**\n * @deprecated ScrollDispatchModule has been renamed to ScrollingModule.\n * @breaking-change 8.0.0 delete this alias\n */\n@NgModule({\n  imports: [ScrollingModule],\n  exports: [ScrollingModule],\n})\nexport class ScrollDispatchModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform} from '@angular/cdk/platform';\nimport {Injectable, NgZone, OnDestroy, Optional, SkipSelf} from '@angular/core';\nimport {merge, of as observableOf, fromEvent, Observable, Subscription} from 'rxjs';\nimport {auditTime} from 'rxjs/operators';\n\n/** Time in ms to throttle the resize events by default. */\nexport const DEFAULT_RESIZE_TIME = 20;\n\n/** Object that holds the scroll position of the viewport in each direction. */\nexport interface ViewportScrollPosition {\n  top: number;\n  left: number;\n}\n\n/**\n * Simple utility for getting the bounds of the browser viewport.\n * @docs-private\n */\n@Injectable({providedIn: 'root'})\nexport class ViewportRuler implements OnDestroy {\n  /** Cached viewport dimensions. */\n  private _viewportSize: {width: number; height: number};\n\n  /** Stream of viewport change events. */\n  private _change: Observable<Event>;\n\n  /** Subscription to streams that invalidate the cached viewport dimensions. */\n  private _invalidateCache: Subscription;\n\n  constructor(private _platform: Platform, ngZone: NgZone) {\n    ngZone.runOutsideAngular(() => {\n      this._change = _platform.isBrowser ?\n          merge<Event>(fromEvent(window, 'resize'), fromEvent(window, 'orientationchange')) :\n          observableOf();\n\n      // Note that we need to do the subscription inside `runOutsideAngular`\n      // since subscribing is what causes the event listener to be added.\n      this._invalidateCache = this.change().subscribe(() => this._updateViewportSize());\n    });\n  }\n\n  ngOnDestroy() {\n    this._invalidateCache.unsubscribe();\n  }\n\n  /** Returns the viewport's width and height. */\n  getViewportSize(): Readonly<{width: number, height: number}> {\n    if (!this._viewportSize) {\n      this._updateViewportSize();\n    }\n\n    const output = {width: this._viewportSize.width, height: this._viewportSize.height};\n\n    // If we're not on a browser, don't cache the size since it'll be mocked out anyway.\n    if (!this._platform.isBrowser) {\n      this._viewportSize = null!;\n    }\n\n    return output;\n  }\n\n  /** Gets a ClientRect for the viewport's bounds. */\n  getViewportRect(): ClientRect {\n    // Use the document element's bounding rect rather than the window scroll properties\n    // (e.g. pageYOffset, scrollY) due to in issue in Chrome and IE where window scroll\n    // properties and client coordinates (boundingClientRect, clientX/Y, etc.) are in different\n    // conceptual viewports. Under most circumstances these viewports are equivalent, but they\n    // can disagree when the page is pinch-zoomed (on devices that support touch).\n    // See https://bugs.chromium.org/p/chromium/issues/detail?id=489206#c4\n    // We use the documentElement instead of the body because, by default (without a css reset)\n    // browsers typically give the document body an 8px margin, which is not included in\n    // getBoundingClientRect().\n    const scrollPosition = this.getViewportScrollPosition();\n    const {width, height} = this.getViewportSize();\n\n    return {\n      top: scrollPosition.top,\n      left: scrollPosition.left,\n      bottom: scrollPosition.top + height,\n      right: scrollPosition.left + width,\n      height,\n      width,\n    };\n  }\n\n  /** Gets the (top, left) scroll position of the viewport. */\n  getViewportScrollPosition(): ViewportScrollPosition {\n    // While we can get a reference to the fake document\n    // during SSR, it doesn't have getBoundingClientRect.\n    if (!this._platform.isBrowser) {\n      return {top: 0, left: 0};\n    }\n\n    // The top-left-corner of the viewport is determined by the scroll position of the document\n    // body, normally just (scrollLeft, scrollTop). However, Chrome and Firefox disagree about\n    // whether `document.body` or `document.documentElement` is the scrolled element, so reading\n    // `scrollTop` and `scrollLeft` is inconsistent. However, using the bounding rect of\n    // `document.documentElement` works consistently, where the `top` and `left` values will\n    // equal negative the scroll position.\n    const documentElement = document.documentElement!;\n    const documentRect = documentElement.getBoundingClientRect();\n\n    const top = -documentRect.top || document.body.scrollTop || window.scrollY ||\n                 documentElement.scrollTop || 0;\n\n    const left = -documentRect.left || document.body.scrollLeft || window.scrollX ||\n                  documentElement.scrollLeft || 0;\n\n    return {top, left};\n  }\n\n  /**\n   * Returns a stream that emits whenever the size of the viewport changes.\n   * @param throttleTime Time in milliseconds to throttle the stream.\n   */\n  change(throttleTime: number = DEFAULT_RESIZE_TIME): Observable<Event> {\n    return throttleTime > 0 ? this._change.pipe(auditTime(throttleTime)) : this._change;\n  }\n\n  /** Updates the cached viewport size. */\n  private _updateViewportSize() {\n    this._viewportSize = this._platform.isBrowser ?\n        {width: window.innerWidth, height: window.innerHeight} :\n        {width: 0, height: 0};\n  }\n}\n\n\n/** @docs-private @deprecated @breaking-change 8.0.0 */\nexport function VIEWPORT_RULER_PROVIDER_FACTORY(parentRuler: ViewportRuler,\n                                                platform: Platform,\n                                                ngZone: NgZone) {\n  return parentRuler || new ViewportRuler(platform, ngZone);\n}\n\n/** @docs-private @deprecated @breaking-change 8.0.0 */\nexport const VIEWPORT_RULER_PROVIDER = {\n  // If there is already a ViewportRuler available, use that. Otherwise, provide a new one.\n  provide: ViewportRuler,\n  deps: [[new Optional(), new SkipSelf(), ViewportRuler], Platform, NgZone],\n  useFactory: VIEWPORT_RULER_PROVIDER_FACTORY\n};\n"]}