{"version":3,"file":"tree.es5.js","sources":["../../../src/cdk/tree/control/base-tree-control.ts","../../../src/cdk/tree/control/flat-tree-control.ts","../../../src/cdk/tree/control/nested-tree-control.ts","../../../src/cdk/tree/node.ts","../../../src/cdk/tree/outlet.ts","../../../src/cdk/tree/tree-errors.ts","../../../src/cdk/tree/tree.ts","../../../src/cdk/tree/nested-node.ts","../../../src/cdk/tree/padding.ts","../../../src/cdk/tree/toggle.ts","../../../src/cdk/tree/tree-module.ts"],"names":["tslib_1.__extends","observableOf"],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {Observable} from 'rxjs';\nimport {TreeControl} from './tree-control';\n\n/** Base tree control. It has basic toggle/expand/collapse operations on a single data node. */\nexport abstract class BaseTreeControl<T> implements TreeControl<T> {\n\n  /** Gets a list of descendent data nodes of a subtree rooted at given data node recursively. */\n  abstract getDescendants(dataNode: T): T[];\n\n  /** Expands all data nodes in the tree. */\n  abstract expandAll(): void;\n\n  /** Saved data node for `expandAll` action. */\n  dataNodes: T[];\n\n  /** A selection model with multi-selection to track expansion status. */\n  expansionModel: SelectionModel<T> = new SelectionModel<T>(true);\n\n  /** Get depth of a given data node, return the level number. This is for flat tree node. */\n  getLevel: (dataNode: T) => number;\n\n  /**\n   * Whether the data node is expandable. Returns true if expandable.\n   * This is for flat tree node.\n   */\n  isExpandable: (dataNode: T) => boolean;\n\n  /** Gets a stream that emits whenever the given data node's children change. */\n  getChildren: (dataNode: T) => (Observable<T[]> | T[]);\n\n  /** Toggles one single data node's expanded/collapsed state. */\n  toggle(dataNode: T): void {\n    this.expansionModel.toggle(dataNode);\n  }\n\n  /** Expands one single data node. */\n  expand(dataNode: T): void {\n    this.expansionModel.select(dataNode);\n  }\n\n  /** Collapses one single data node. */\n  collapse(dataNode: T): void {\n    this.expansionModel.deselect(dataNode);\n  }\n\n  /** Whether a given data node is expanded or not. Returns true if the data node is expanded. */\n  isExpanded(dataNode: T): boolean {\n    return this.expansionModel.isSelected(dataNode);\n  }\n\n  /** Toggles a subtree rooted at `node` recursively. */\n  toggleDescendants(dataNode: T): void {\n    this.expansionModel.isSelected(dataNode)\n        ? this.collapseDescendants(dataNode)\n        : this.expandDescendants(dataNode);\n  }\n\n  /** Collapse all dataNodes in the tree. */\n  collapseAll(): void {\n    this.expansionModel.clear();\n  }\n\n  /** Expands a subtree rooted at given data node recursively. */\n  expandDescendants(dataNode: T): void {\n    let toBeProcessed = [dataNode];\n    toBeProcessed.push(...this.getDescendants(dataNode));\n    this.expansionModel.select(...toBeProcessed);\n  }\n\n  /** Collapses a subtree rooted at given data node recursively. */\n  collapseDescendants(dataNode: T): void {\n    let toBeProcessed = [dataNode];\n    toBeProcessed.push(...this.getDescendants(dataNode));\n    this.expansionModel.deselect(...toBeProcessed);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {BaseTreeControl} from './base-tree-control';\n\n/** Flat tree control. Able to expand/collapse a subtree recursively for flattened tree. */\nexport class FlatTreeControl<T> extends BaseTreeControl<T> {\n\n  /** Construct with flat tree data node functions getLevel and isExpandable. */\n  constructor(public getLevel: (dataNode: T) => number,\n              public isExpandable: (dataNode: T) => boolean) {\n    super();\n  }\n\n  /**\n   * Gets a list of the data node's subtree of descendent data nodes.\n   *\n   * To make this working, the `dataNodes` of the TreeControl must be flattened tree nodes\n   * with correct levels.\n   */\n  getDescendants(dataNode: T): T[] {\n    const startIndex = this.dataNodes.indexOf(dataNode);\n    const results: T[] = [];\n\n    // Goes through flattened tree nodes in the `dataNodes` array, and get all descendants.\n    // The level of descendants of a tree node must be greater than the level of the given\n    // tree node.\n    // If we reach a node whose level is equal to the level of the tree node, we hit a sibling.\n    // If we reach a node whose level is greater than the level of the tree node, we hit a\n    // sibling of an ancestor.\n    for (let i = startIndex + 1;\n        i < this.dataNodes.length && this.getLevel(dataNode) < this.getLevel(this.dataNodes[i]);\n        i++) {\n      results.push(this.dataNodes[i]);\n    }\n    return results;\n  }\n\n  /**\n   * Expands all data nodes in the tree.\n   *\n   * To make this working, the `dataNodes` variable of the TreeControl must be set to all flattened\n   * data nodes of the tree.\n   */\n  expandAll(): void {\n    this.expansionModel.select(...this.dataNodes);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Observable} from 'rxjs';\nimport {take} from 'rxjs/operators';\nimport {BaseTreeControl} from './base-tree-control';\n\n/** Nested tree control. Able to expand/collapse a subtree recursively for NestedNode type. */\nexport class NestedTreeControl<T> extends BaseTreeControl<T> {\n\n  /** Construct with nested tree function getChildren. */\n  constructor(public getChildren: (dataNode: T) => (Observable<T[]> | T[])) {\n    super();\n  }\n\n  /**\n   * Expands all dataNodes in the tree.\n   *\n   * To make this working, the `dataNodes` variable of the TreeControl must be set to all root level\n   * data nodes of the tree.\n   */\n  expandAll(): void {\n    this.expansionModel.clear();\n    const allNodes = this.dataNodes.reduce((accumulator: T[], dataNode) =>\n        [...accumulator, ...this.getDescendants(dataNode), dataNode], []);\n    this.expansionModel.select(...allNodes);\n  }\n\n  /** Gets a list of descendant dataNodes of a subtree rooted at given data node recursively. */\n  getDescendants(dataNode: T): T[] {\n    const descendants: T[] = [];\n\n    this._getDescendants(descendants, dataNode);\n    // Remove the node itself\n    return descendants.splice(1);\n  }\n\n  /** A helper function to get descendants recursively. */\n  protected _getDescendants(descendants: T[], dataNode: T): void {\n    descendants.push(dataNode);\n    const childrenNodes = this.getChildren(dataNode);\n    if (Array.isArray(childrenNodes)) {\n      childrenNodes.forEach((child: T) => this._getDescendants(descendants, child));\n    } else if (childrenNodes instanceof Observable) {\n      childrenNodes.pipe(take(1)).subscribe(children => {\n        children.forEach((child: T) => this._getDescendants(descendants, child));\n      });\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef} from '@angular/core';\n\n\n/** Context provided to the tree node component. */\nexport class CdkTreeNodeOutletContext<T> {\n  /** Data for the node. */\n  $implicit: T;\n\n  /** Depth of the node. */\n  level: number;\n\n  /** Index location of the node. */\n  index?: number;\n\n  /** Length of the number of total dataNodes. */\n  count?: number;\n\n  constructor(data: T) {\n    this.$implicit = data;\n  }\n}\n\n/**\n * Data node definition for the CdkTree.\n * Captures the node's template and a when predicate that describes when this node should be used.\n */\n@Directive({\n  selector: '[cdkTreeNodeDef]',\n  inputs: [\n    'when: cdkTreeNodeDefWhen'\n  ],\n})\nexport class CdkTreeNodeDef<T> {\n  /**\n   * Function that should return true if this node template should be used for the provided node\n   * data and index. If left undefined, this node will be considered the default node template to\n   * use when no other when functions return true for the data.\n   * For every node, there must be at least one when function that passes or an undefined to\n   * default.\n   */\n  when: (index: number, nodeData: T) => boolean;\n\n  /** @docs-private */\n  constructor(public template: TemplateRef<any>) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  Directive,\n  ViewContainerRef,\n} from '@angular/core';\n\n/**\n * Outlet for nested CdkNode. Put `[cdkTreeNodeOutlet]` on a tag to place children dataNodes\n * inside the outlet.\n */\n@Directive({\n  selector: '[cdkTreeNodeOutlet]'\n})\nexport class CdkTreeNodeOutlet {\n  constructor(public viewContainer: ViewContainerRef) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Returns an error to be thrown when there is no usable data.\n * @docs-private\n */\nexport function getTreeNoValidDataSourceError() {\n  return Error(`A valid data source must be provided.`);\n}\n\n/**\n * Returns an error to be thrown when there are multiple nodes that are missing a when function.\n * @docs-private\n */\nexport function getTreeMultipleDefaultNodeDefsError() {\n  return Error(`There can only be one default row without a when predicate function.`);\n}\n\n/**\n * Returns an error to be thrown when there are no matching node defs for a particular set of data.\n * @docs-private\n */\nexport function getTreeMissingMatchingNodeDefError() {\n  return Error(`Could not find a matching node definition for the provided node data.`);\n}\n\n/**\n * Returns an error to be thrown when there are tree control.\n * @docs-private\n */\nexport function getTreeControlMissingError() {\n  return Error(`Could not find a tree control for the tree.`);\n}\n\n/**\n * Returns an error to be thrown when tree control did not implement functions for flat/nested node.\n * @docs-private\n */\nexport function getTreeControlFunctionsMissingError() {\n  return Error(`Could not find functions for nested/flat tree in tree control.`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {FocusableOption} from '@angular/cdk/a11y';\nimport {CollectionViewer, DataSource} from '@angular/cdk/collections';\nimport {\n  AfterContentChecked,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  Input,\n  IterableChangeRecord,\n  IterableDiffer,\n  IterableDiffers,\n  OnDestroy,\n  OnInit,\n  QueryList,\n  ViewChild,\n  ViewContainerRef,\n  ViewEncapsulation,\n  TrackByFunction\n} from '@angular/core';\nimport {BehaviorSubject, Observable, of as observableOf, Subject, Subscription} from 'rxjs';\nimport {takeUntil} from 'rxjs/operators';\nimport {TreeControl} from './control/tree-control';\nimport {CdkTreeNodeDef, CdkTreeNodeOutletContext} from './node';\nimport {CdkTreeNodeOutlet} from './outlet';\nimport {\n  getTreeControlFunctionsMissingError,\n  getTreeControlMissingError,\n  getTreeMissingMatchingNodeDefError,\n  getTreeMultipleDefaultNodeDefsError,\n  getTreeNoValidDataSourceError\n} from './tree-errors';\n\n/**\n * CDK tree component that connects with a data source to retrieve data of type `T` and renders\n * dataNodes with hierarchy. Updates the dataNodes when new data is provided by the data source.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'cdk-tree',\n  exportAs: 'cdkTree',\n  template: `<ng-container cdkTreeNodeOutlet></ng-container>`,\n  host: {\n    'class': 'cdk-tree',\n    'role': 'tree',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class CdkTree<T>\n    implements AfterContentChecked, CollectionViewer, OnDestroy, OnInit {\n  /** Subject that emits when the component has been destroyed. */\n  private _onDestroy = new Subject<void>();\n\n  /** Differ used to find the changes in the data provided by the data source. */\n  private _dataDiffer: IterableDiffer<T>;\n\n  /** Stores the node definition that does not have a when predicate. */\n  private _defaultNodeDef: CdkTreeNodeDef<T> | null;\n\n  /** Data subscription */\n  private _dataSubscription: Subscription | null;\n\n  /** Level of nodes */\n  private _levels: Map<T, number> = new Map<T, number>();\n\n  /**\n   * Provides a stream containing the latest data array to render. Influenced by the tree's\n   * stream of view window (what dataNodes are currently on screen).\n   * Data source can be an observable of data array, or a data array to render.\n   */\n  @Input()\n  get dataSource(): DataSource<T> | Observable<T[]> | T[] { return this._dataSource; }\n  set dataSource(dataSource: DataSource<T> | Observable<T[]> | T[]) {\n    if (this._dataSource !== dataSource) {\n      this._switchDataSource(dataSource);\n    }\n  }\n  private _dataSource: DataSource<T> | Observable<T[]> | T[];\n\n  /** The tree controller */\n  @Input() treeControl: TreeControl<T>;\n\n  /**\n   * Tracking function that will be used to check the differences in data changes. Used similarly\n   * to `ngFor` `trackBy` function. Optimize node operations by identifying a node based on its data\n   * relative to the function to know if a node should be added/removed/moved.\n   * Accepts a function that takes two parameters, `index` and `item`.\n   */\n  @Input() trackBy: TrackByFunction<T>;\n\n  // Outlets within the tree's template where the dataNodes will be inserted.\n  @ViewChild(CdkTreeNodeOutlet) _nodeOutlet: CdkTreeNodeOutlet;\n\n  /** The tree node template for the tree */\n  @ContentChildren(CdkTreeNodeDef) _nodeDefs: QueryList<CdkTreeNodeDef<T>>;\n\n  // TODO(tinayuangao): Setup a listener for scrolling, emit the calculated view to viewChange.\n  //     Remove the MAX_VALUE in viewChange\n  /**\n   * Stream containing the latest information on what rows are being displayed on screen.\n   * Can be used by the data source to as a heuristic of what data should be provided.\n   */\n  viewChange =\n    new BehaviorSubject<{start: number, end: number}>({start: 0, end: Number.MAX_VALUE});\n\n  constructor(private _differs: IterableDiffers,\n              private _changeDetectorRef: ChangeDetectorRef) {}\n\n  ngOnInit() {\n    this._dataDiffer = this._differs.find([]).create(this.trackBy);\n    if (!this.treeControl) {\n      throw getTreeControlMissingError();\n    }\n  }\n\n  ngOnDestroy() {\n    this._nodeOutlet.viewContainer.clear();\n\n    this._onDestroy.next();\n    this._onDestroy.complete();\n\n    if (this._dataSource && typeof (this._dataSource as DataSource<T>).disconnect === 'function') {\n      (this.dataSource as DataSource<T>).disconnect(this);\n    }\n\n    if (this._dataSubscription) {\n      this._dataSubscription.unsubscribe();\n      this._dataSubscription = null;\n    }\n  }\n\n  ngAfterContentChecked() {\n    const defaultNodeDefs = this._nodeDefs.filter(def => !def.when);\n    if (defaultNodeDefs.length > 1) {\n      throw getTreeMultipleDefaultNodeDefsError();\n    }\n    this._defaultNodeDef = defaultNodeDefs[0];\n\n    if (this.dataSource && this._nodeDefs && !this._dataSubscription) {\n      this._observeRenderChanges();\n    }\n  }\n\n\n  // TODO(tinayuangao): Work on keyboard traversal and actions, make sure it's working for RTL\n  //     and nested trees.\n\n  /**\n   * Switch to the provided data source by resetting the data and unsubscribing from the current\n   * render change subscription if one exists. If the data source is null, interpret this by\n   * clearing the node outlet. Otherwise start listening for new data.\n   */\n  private _switchDataSource(dataSource: DataSource<T> | Observable<T[]> | T[]) {\n    if (this._dataSource && typeof (this._dataSource as DataSource<T>).disconnect === 'function') {\n      (this.dataSource as DataSource<T>).disconnect(this);\n    }\n\n    if (this._dataSubscription) {\n      this._dataSubscription.unsubscribe();\n      this._dataSubscription = null;\n    }\n\n    // Remove the all dataNodes if there is now no data source\n    if (!dataSource) {\n      this._nodeOutlet.viewContainer.clear();\n    }\n\n    this._dataSource = dataSource;\n    if (this._nodeDefs) {\n      this._observeRenderChanges();\n    }\n  }\n\n  /** Set up a subscription for the data provided by the data source. */\n  private _observeRenderChanges() {\n    let dataStream: Observable<T[] | ReadonlyArray<T>> | undefined;\n\n    // Cannot use `instanceof DataSource` since the data source could be a literal with\n    // `connect` function and may not extends DataSource.\n    if (typeof (this._dataSource as DataSource<T>).connect === 'function') {\n      dataStream = (this._dataSource as DataSource<T>).connect(this);\n    } else if (this._dataSource instanceof Observable) {\n      dataStream = this._dataSource;\n    } else if (Array.isArray(this._dataSource)) {\n      dataStream = observableOf(this._dataSource);\n    }\n\n    if (dataStream) {\n      this._dataSubscription = dataStream.pipe(takeUntil(this._onDestroy))\n        .subscribe(data => this.renderNodeChanges(data));\n    } else {\n      throw getTreeNoValidDataSourceError();\n    }\n  }\n\n  /** Check for changes made in the data and render each change (node added/removed/moved). */\n  renderNodeChanges(data: T[] | ReadonlyArray<T>, dataDiffer: IterableDiffer<T> = this._dataDiffer,\n                    viewContainer: ViewContainerRef = this._nodeOutlet.viewContainer,\n                    parentData?: T) {\n    const changes = dataDiffer.diff(data);\n    if (!changes) { return; }\n\n    changes.forEachOperation((item: IterableChangeRecord<T>,\n                              adjustedPreviousIndex: number | null,\n                              currentIndex: number | null) => {\n        if (item.previousIndex == null) {\n          this.insertNode(data[currentIndex!], currentIndex!, viewContainer, parentData);\n        } else if (currentIndex == null) {\n          viewContainer.remove(adjustedPreviousIndex!);\n          this._levels.delete(item.item);\n        } else {\n          const view = viewContainer.get(adjustedPreviousIndex!);\n          viewContainer.move(view!, currentIndex);\n        }\n      });\n\n    this._changeDetectorRef.detectChanges();\n  }\n\n  /**\n   * Finds the matching node definition that should be used for this node data. If there is only\n   * one node definition, it is returned. Otherwise, find the node definition that has a when\n   * predicate that returns true with the data. If none return true, return the default node\n   * definition.\n   */\n  _getNodeDef(data: T, i: number): CdkTreeNodeDef<T> {\n    if (this._nodeDefs.length === 1) { return this._nodeDefs.first; }\n\n    const nodeDef =\n      this._nodeDefs.find(def => def.when && def.when(i, data)) || this._defaultNodeDef;\n    if (!nodeDef) { throw getTreeMissingMatchingNodeDefError(); }\n\n    return nodeDef;\n  }\n\n  /**\n   * Create the embedded view for the data node template and place it in the correct index location\n   * within the data node view container.\n   */\n  insertNode(nodeData: T, index: number, viewContainer?: ViewContainerRef, parentData?: T) {\n    const node = this._getNodeDef(nodeData, index);\n\n    // Node context that will be provided to created embedded view\n    const context = new CdkTreeNodeOutletContext<T>(nodeData);\n\n    // If the tree is flat tree, then use the `getLevel` function in flat tree control\n    // Otherwise, use the level of parent node.\n    if (this.treeControl.getLevel) {\n      context.level = this.treeControl.getLevel(nodeData);\n    } else if (typeof parentData !== 'undefined' && this._levels.has(parentData)) {\n      context.level = this._levels.get(parentData)! + 1;\n    } else {\n      context.level = 0;\n    }\n    this._levels.set(nodeData, context.level);\n\n    // Use default tree nodeOutlet, or nested node's nodeOutlet\n    const container = viewContainer ? viewContainer : this._nodeOutlet.viewContainer;\n    container.createEmbeddedView(node.template, context, index);\n\n    // Set the data to just created `CdkTreeNode`.\n    // The `CdkTreeNode` created from `createEmbeddedView` will be saved in static variable\n    //     `mostRecentTreeNode`. We get it from static variable and pass the node data to it.\n    if (CdkTreeNode.mostRecentTreeNode) {\n      CdkTreeNode.mostRecentTreeNode.data = nodeData;\n    }\n  }\n}\n\n\n/**\n * Tree node for CdkTree. It contains the data in the tree node.\n */\n@Directive({\n  selector: 'cdk-tree-node',\n  exportAs: 'cdkTreeNode',\n  host: {\n    '[attr.aria-expanded]': 'isExpanded',\n    '[attr.aria-level]': 'role === \"treeitem\" ? level : null',\n    '[attr.role]': 'role',\n    'class': 'cdk-tree-node',\n  },\n})\nexport class CdkTreeNode<T> implements FocusableOption, OnDestroy {\n  /**\n   * The most recently created `CdkTreeNode`. We save it in static variable so we can retrieve it\n   * in `CdkTree` and set the data to it.\n   */\n  static mostRecentTreeNode: CdkTreeNode<any> | null = null;\n\n  /** Subject that emits when the component has been destroyed. */\n  protected _destroyed = new Subject<void>();\n\n  /** The tree node's data. */\n  get data(): T { return this._data; }\n  set data(value: T) {\n    this._data = value;\n    this._setRoleFromData();\n  }\n  protected _data: T;\n\n  get isExpanded(): boolean {\n    return this._tree.treeControl.isExpanded(this._data);\n  }\n\n  get level(): number {\n    return this._tree.treeControl.getLevel ? this._tree.treeControl.getLevel(this._data) : 0;\n  }\n\n  /**\n   * The role of the node should be 'group' if it's an internal node,\n   * and 'treeitem' if it's a leaf node.\n   */\n  @Input() role: 'treeitem' | 'group' = 'treeitem';\n\n  constructor(protected _elementRef: ElementRef<HTMLElement>,\n              protected _tree: CdkTree<T>) {\n    CdkTreeNode.mostRecentTreeNode = this as CdkTreeNode<T>;\n  }\n\n  ngOnDestroy() {\n    // If this is the last tree node being destroyed,\n    // clear out the reference to avoid leaking memory.\n    if (CdkTreeNode.mostRecentTreeNode === this) {\n      CdkTreeNode.mostRecentTreeNode = null;\n    }\n\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /** Focuses the menu item. Implements for FocusableOption. */\n  focus(): void {\n    this._elementRef.nativeElement.focus();\n  }\n\n  protected _setRoleFromData(): void {\n    if (this._tree.treeControl.isExpandable) {\n      this.role = this._tree.treeControl.isExpandable(this._data) ? 'group' : 'treeitem';\n    } else {\n      if (!this._tree.treeControl.getChildren) {\n        throw getTreeControlFunctionsMissingError();\n      }\n      const childrenNodes = this._tree.treeControl.getChildren(this._data);\n      if (Array.isArray(childrenNodes)) {\n        this._setRoleFromChildren(childrenNodes as T[]);\n      } else if (childrenNodes instanceof Observable) {\n        childrenNodes.pipe(takeUntil(this._destroyed))\n            .subscribe(children => this._setRoleFromChildren(children));\n      }\n    }\n  }\n\n  protected _setRoleFromChildren(children: T[]) {\n    this.role = children && children.length ? 'group' : 'treeitem';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  AfterContentInit,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  IterableDiffers,\n  IterableDiffer,\n  OnDestroy,\n  QueryList,\n} from '@angular/core';\nimport {Observable} from 'rxjs';\nimport {takeUntil} from 'rxjs/operators';\n\nimport {CdkTree, CdkTreeNode} from './tree';\nimport {CdkTreeNodeOutlet} from './outlet';\nimport {getTreeControlFunctionsMissingError} from './tree-errors';\n\n/**\n * Nested node is a child of `<cdk-tree>`. It works with nested tree.\n * By using `cdk-nested-tree-node` component in tree node template, children of the parent node will\n * be added in the `cdkTreeNodeOutlet` in tree node template.\n * For example:\n *   ```html\n *   <cdk-mested-tree-node>\n *     {{node.name}}\n *     <ng-template cdkTreeNodeOutlet></ng-template>\n *   </cdk-tree-node>\n *   ```\n * The children of node will be automatically added to `cdkTreeNodeOutlet`, the result dom will be\n * like this:\n *   ```html\n *   <cdk-nested-tree-node>\n *     {{node.name}}\n *      <cdk-nested-tree-node>{{child1.name}}</cdk-tree-node>\n *      <cdk-nested-tree-node>{{child2.name}}</cdk-tree-node>\n *   </cdk-tree-node>\n *   ```\n */\n@Directive({\n  selector: 'cdk-nested-tree-node',\n  exportAs: 'cdkNestedTreeNode',\n  host: {\n    '[attr.aria-expanded]': 'isExpanded',\n    '[attr.role]': 'role',\n    'class': 'cdk-tree-node cdk-nested-tree-node',\n  },\n  providers: [{provide: CdkTreeNode, useExisting: CdkNestedTreeNode}]\n})\nexport class CdkNestedTreeNode<T> extends CdkTreeNode<T> implements AfterContentInit, OnDestroy {\n  /** Differ used to find the changes in the data provided by the data source. */\n  private _dataDiffer: IterableDiffer<T>;\n\n  /** The children data dataNodes of current node. They will be placed in `CdkTreeNodeOutlet`. */\n  protected _children: T[];\n\n  /** The children node placeholder. */\n  @ContentChildren(CdkTreeNodeOutlet) nodeOutlet: QueryList<CdkTreeNodeOutlet>;\n\n  constructor(protected _elementRef: ElementRef<HTMLElement>,\n              protected _tree: CdkTree<T>,\n              protected _differs: IterableDiffers) {\n    super(_elementRef, _tree);\n  }\n\n  ngAfterContentInit() {\n    this._dataDiffer = this._differs.find([]).create(this._tree.trackBy);\n    if (!this._tree.treeControl.getChildren) {\n      throw getTreeControlFunctionsMissingError();\n    }\n    const childrenNodes = this._tree.treeControl.getChildren(this.data);\n    if (Array.isArray(childrenNodes)) {\n      this.updateChildrenNodes(childrenNodes as T[]);\n    } else if (childrenNodes instanceof Observable) {\n      childrenNodes.pipe(takeUntil(this._destroyed))\n        .subscribe(result => this.updateChildrenNodes(result));\n    }\n    this.nodeOutlet.changes.pipe(takeUntil(this._destroyed))\n        .subscribe(() => this.updateChildrenNodes());\n  }\n\n  ngOnDestroy() {\n    this._clear();\n    super.ngOnDestroy();\n  }\n\n  /** Add children dataNodes to the NodeOutlet */\n  protected updateChildrenNodes(children?: T[]): void {\n    if (children) {\n      this._children = children;\n    }\n    if (this.nodeOutlet.length && this._children) {\n      const viewContainer = this.nodeOutlet.first.viewContainer;\n      this._tree.renderNodeChanges(this._children, this._dataDiffer, viewContainer, this._data);\n    } else {\n      // Reset the data differ if there's no children nodes displayed\n      this._dataDiffer.diff([]);\n    }\n  }\n\n  /** Clear the children dataNodes. */\n  protected _clear(): void {\n    if (this.nodeOutlet && this.nodeOutlet.first) {\n      this.nodeOutlet.first.viewContainer.clear();\n      this._dataDiffer.diff([]);\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\nimport {Directive, ElementRef, Input, OnDestroy, Optional, Renderer2} from '@angular/core';\nimport {takeUntil} from 'rxjs/operators';\nimport {Subject} from 'rxjs';\nimport {CdkTree, CdkTreeNode} from './tree';\n\n/** Regex used to split a string on its CSS units. */\nconst cssUnitPattern = /([A-Za-z%]+)$/;\n\n/**\n * Indent for the children tree dataNodes.\n * This directive will add left-padding to the node to show hierarchy.\n */\n@Directive({\n  selector: '[cdkTreeNodePadding]',\n})\nexport class CdkTreeNodePadding<T> implements OnDestroy {\n  /** Subject that emits when the component has been destroyed. */\n  private _destroyed = new Subject<void>();\n\n  /** CSS units used for the indentation value. */\n  indentUnits = 'px';\n\n  /** The level of depth of the tree node. The padding will be `level * indent` pixels. */\n  @Input('cdkTreeNodePadding')\n  get level(): number { return this._level; }\n  set level(value: number) {\n    this._level = coerceNumberProperty(value);\n    this._setPadding();\n  }\n  _level: number;\n\n  /**\n   * The indent for each level. Can be a number or a CSS string.\n   * Default number 40px from material design menu sub-menu spec.\n   */\n  @Input('cdkTreeNodePaddingIndent')\n  get indent(): number | string { return this._indent; }\n  set indent(indent: number | string) {\n    let value = indent;\n    let units = 'px';\n\n    if (typeof indent === 'string') {\n      const parts = indent.split(cssUnitPattern);\n      value = parts[0];\n      units = parts[1] || units;\n    }\n\n    this.indentUnits = units;\n    this._indent = coerceNumberProperty(value);\n    this._setPadding();\n  }\n  _indent: number = 40;\n\n  constructor(private _treeNode: CdkTreeNode<T>,\n              private _tree: CdkTree<T>,\n              private _renderer: Renderer2,\n              private _element: ElementRef<HTMLElement>,\n              @Optional() private _dir: Directionality) {\n    this._setPadding();\n    if (this._dir) {\n      this._dir.change.pipe(takeUntil(this._destroyed)).subscribe(() => this._setPadding());\n    }\n  }\n\n  ngOnDestroy() {\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /** The padding indent value for the tree node. Returns a string with px numbers if not null. */\n  _paddingIndent(): string|null {\n    const nodeLevel = (this._treeNode.data && this._tree.treeControl.getLevel)\n      ? this._tree.treeControl.getLevel(this._treeNode.data)\n      : null;\n    const level = this._level || nodeLevel;\n    return level ? `${level * this._indent}${this.indentUnits}` : null;\n  }\n\n  _setPadding() {\n    const padding = this._paddingIndent();\n    const paddingProp = this._dir && this._dir.value === 'rtl' ? 'paddingRight' : 'paddingLeft';\n\n    this._renderer.setStyle(this._element.nativeElement, paddingProp, padding);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  Directive,\n  Input,\n} from '@angular/core';\nimport {CdkTree, CdkTreeNode} from './tree';\n\n/**\n * Node toggle to expand/collapse the node.\n */\n@Directive({\n  selector: '[cdkTreeNodeToggle]',\n  host: {\n    '(click)': '_toggle($event)',\n  }\n})\nexport class CdkTreeNodeToggle<T> {\n  /** Whether expand/collapse the node recursively. */\n  @Input('cdkTreeNodeToggleRecursive')\n  get recursive(): boolean { return this._recursive; }\n  set recursive(value: boolean) { this._recursive = coerceBooleanProperty(value); }\n  protected _recursive = false;\n\n  constructor(protected _tree: CdkTree<T>,\n              protected _treeNode: CdkTreeNode<T>) {}\n\n  _toggle(event: Event): void {\n    this.recursive\n      ? this._tree.treeControl.toggleDescendants(this._treeNode.data)\n      : this._tree.treeControl.toggle(this._treeNode.data);\n\n    event.stopPropagation();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {CdkTreeNodeOutlet} from './outlet';\nimport {CdkTreeNodePadding} from './padding';\nimport {CdkTreeNodeToggle} from './toggle';\nimport {CdkTree, CdkTreeNode} from './tree';\nimport {CdkTreeNodeDef} from './node';\nimport {CdkNestedTreeNode} from './nested-node';\n\nconst EXPORTED_DECLARATIONS = [\n  CdkNestedTreeNode,\n  CdkTreeNodeDef,\n  CdkTreeNodePadding,\n  CdkTreeNodeToggle,\n  CdkTree,\n  CdkTreeNode,\n  CdkTreeNodeOutlet,\n];\n\n@NgModule({\n  imports: [CommonModule],\n  exports: EXPORTED_DECLARATIONS,\n  declarations: EXPORTED_DECLARATIONS,\n  providers: [FocusMonitor, CdkTreeNodeDef]\n})\nexport class CdkTreeModule {}\n"]}