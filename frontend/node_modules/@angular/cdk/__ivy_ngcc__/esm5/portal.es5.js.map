{"version":3,"file":"portal.es5.js","sources":["../../../src/cdk/portal/portal-errors.ts","../../../src/cdk/portal/portal.ts","../../../src/cdk/portal/dom-portal-outlet.ts","../../../src/cdk/portal/portal-directives.ts","../../../src/cdk/portal/portal-injector.ts"],"names":["tslib_1.__extends"],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Throws an exception when attempting to attach a null portal to a host.\n * @docs-private\n */\nexport function throwNullPortalError() {\n  throw Error('Must provide a portal to attach');\n}\n\n/**\n * Throws an exception when attempting to attach a portal to a host that is already attached.\n * @docs-private\n */\nexport function throwPortalAlreadyAttachedError() {\n  throw Error('Host already has a portal attached');\n}\n\n/**\n * Throws an exception when attempting to attach a portal to an already-disposed host.\n * @docs-private\n */\nexport function throwPortalOutletAlreadyDisposedError() {\n  throw Error('This PortalOutlet has already been disposed');\n}\n\n/**\n * Throws an exception when attempting to attach an unknown portal type.\n * @docs-private\n */\nexport function throwUnknownPortalTypeError() {\n  throw Error('Attempting to attach an unknown Portal type. BasePortalOutlet accepts either ' +\n              'a ComponentPortal or a TemplatePortal.');\n}\n\n/**\n * Throws an exception when attempting to attach a portal to a null host.\n * @docs-private\n */\nexport function throwNullPortalOutletError() {\n  throw Error('Attempting to attach a portal to a null PortalOutlet');\n}\n\n/**\n * Throws an exception when attempting to detach a portal that is not attached.\n * @docs-private\n */\nexport function throwNoPortalAttachedError() {\n  throw Error('Attempting to detach a portal that is not attached to a host');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n    TemplateRef,\n    ViewContainerRef,\n    ElementRef,\n    ComponentRef,\n    EmbeddedViewRef,\n    Injector,\n    ComponentFactoryResolver,\n} from '@angular/core';\nimport {\n    throwNullPortalOutletError,\n    throwPortalAlreadyAttachedError,\n    throwNoPortalAttachedError,\n    throwNullPortalError,\n    throwPortalOutletAlreadyDisposedError,\n    throwUnknownPortalTypeError\n} from './portal-errors';\n\n/** Interface that can be used to generically type a class. */\nexport interface ComponentType<T> {\n  new (...args: any[]): T;\n}\n\n/**\n * A `Portal` is something that you want to render somewhere else.\n * It can be attach to / detached from a `PortalOutlet`.\n */\nexport abstract class Portal<T> {\n  private _attachedHost: PortalOutlet | null;\n\n  /** Attach this portal to a host. */\n  attach(host: PortalOutlet): T {\n    if (host == null) {\n      throwNullPortalOutletError();\n    }\n\n    if (host.hasAttached()) {\n      throwPortalAlreadyAttachedError();\n    }\n\n    this._attachedHost = host;\n    return <T> host.attach(this);\n  }\n\n  /** Detach this portal from its host */\n  detach(): void {\n    let host = this._attachedHost;\n\n    if (host == null) {\n      throwNoPortalAttachedError();\n    } else {\n      this._attachedHost = null;\n      host.detach();\n    }\n  }\n\n  /** Whether this portal is attached to a host. */\n  get isAttached(): boolean {\n    return this._attachedHost != null;\n  }\n\n  /**\n   * Sets the PortalOutlet reference without performing `attach()`. This is used directly by\n   * the PortalOutlet when it is performing an `attach()` or `detach()`.\n   */\n  setAttachedHost(host: PortalOutlet | null) {\n    this._attachedHost = host;\n  }\n}\n\n\n/**\n * A `ComponentPortal` is a portal that instantiates some Component upon attachment.\n */\nexport class ComponentPortal<T> extends Portal<ComponentRef<T>> {\n  /** The type of the component that will be instantiated for attachment. */\n  component: ComponentType<T>;\n\n  /**\n   * [Optional] Where the attached component should live in Angular's *logical* component tree.\n   * This is different from where the component *renders*, which is determined by the PortalOutlet.\n   * The origin is necessary when the host is outside of the Angular application context.\n   */\n  viewContainerRef?: ViewContainerRef | null;\n\n  /** [Optional] Injector used for the instantiation of the component. */\n  injector?: Injector | null;\n\n  /**\n   * Alternate `ComponentFactoryResolver` to use when resolving the associated component.\n   * Defaults to using the resolver from the outlet that the portal is attached to.\n   */\n  componentFactoryResolver?: ComponentFactoryResolver | null;\n\n  constructor(\n      component: ComponentType<T>,\n      viewContainerRef?: ViewContainerRef | null,\n      injector?: Injector | null,\n      componentFactoryResolver?: ComponentFactoryResolver | null) {\n    super();\n    this.component = component;\n    this.viewContainerRef = viewContainerRef;\n    this.injector = injector;\n    this.componentFactoryResolver = componentFactoryResolver;\n  }\n}\n\n/**\n * A `TemplatePortal` is a portal that represents some embedded template (TemplateRef).\n */\nexport class TemplatePortal<C = any> extends Portal<C> {\n  /** The embedded template that will be used to instantiate an embedded View in the host. */\n  templateRef: TemplateRef<C>;\n\n  /** Reference to the ViewContainer into which the template will be stamped out. */\n  viewContainerRef: ViewContainerRef;\n\n  /** Contextual data to be passed in to the embedded view. */\n  context: C | undefined;\n\n  constructor(template: TemplateRef<C>, viewContainerRef: ViewContainerRef, context?: C) {\n    super();\n    this.templateRef = template;\n    this.viewContainerRef = viewContainerRef;\n    this.context = context;\n  }\n\n  get origin(): ElementRef {\n    return this.templateRef.elementRef;\n  }\n\n  /**\n   * Attach the the portal to the provided `PortalOutlet`.\n   * When a context is provided it will override the `context` property of the `TemplatePortal`\n   * instance.\n   */\n  attach(host: PortalOutlet, context: C | undefined = this.context): C {\n    this.context = context;\n    return super.attach(host);\n  }\n\n  detach(): void {\n    this.context = undefined;\n    return super.detach();\n  }\n}\n\n\n/** A `PortalOutlet` is an space that can contain a single `Portal`. */\nexport interface PortalOutlet {\n  /** Attaches a portal to this outlet. */\n  attach(portal: Portal<any>): any;\n\n  /** Detaches the currently attached portal from this outlet. */\n  detach(): any;\n\n  /** Performs cleanup before the outlet is destroyed. */\n  dispose(): void;\n\n  /** Whether there is currently a portal attached to this outlet. */\n  hasAttached(): boolean;\n}\n\n\n/**\n * Partial implementation of PortalOutlet that handles attaching\n * ComponentPortal and TemplatePortal.\n */\nexport abstract class BasePortalOutlet implements PortalOutlet {\n  /** The portal currently attached to the host. */\n  protected _attachedPortal: Portal<any> | null;\n\n  /** A function that will permanently dispose this host. */\n  private _disposeFn: (() => void) | null;\n\n  /** Whether this host has already been permanently disposed. */\n  private _isDisposed: boolean = false;\n\n  /** Whether this host has an attached portal. */\n  hasAttached(): boolean {\n    return !!this._attachedPortal;\n  }\n\n  attach<T>(portal: ComponentPortal<T>): ComponentRef<T>;\n  attach<T>(portal: TemplatePortal<T>): EmbeddedViewRef<T>;\n  attach(portal: any): any;\n\n  /** Attaches a portal. */\n  attach(portal: Portal<any>): any {\n    if (!portal) {\n      throwNullPortalError();\n    }\n\n    if (this.hasAttached()) {\n      throwPortalAlreadyAttachedError();\n    }\n\n    if (this._isDisposed) {\n      throwPortalOutletAlreadyDisposedError();\n    }\n\n    if (portal instanceof ComponentPortal) {\n      this._attachedPortal = portal;\n      return this.attachComponentPortal(portal);\n    } else if (portal instanceof TemplatePortal) {\n      this._attachedPortal = portal;\n      return this.attachTemplatePortal(portal);\n    }\n\n    throwUnknownPortalTypeError();\n  }\n\n  abstract attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T>;\n\n  abstract attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C>;\n\n  /** Detaches a previously attached portal. */\n  detach(): void {\n    if (this._attachedPortal) {\n      this._attachedPortal.setAttachedHost(null);\n      this._attachedPortal = null;\n    }\n\n    this._invokeDisposeFn();\n  }\n\n  /** Permanently dispose of this portal host. */\n  dispose(): void {\n    if (this.hasAttached()) {\n      this.detach();\n    }\n\n    this._invokeDisposeFn();\n    this._isDisposed = true;\n  }\n\n  /** @docs-private */\n  setDisposeFn(fn: () => void) {\n    this._disposeFn = fn;\n  }\n\n  private _invokeDisposeFn() {\n    if (this._disposeFn) {\n      this._disposeFn();\n      this._disposeFn = null;\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ComponentFactoryResolver,\n  ComponentRef,\n  EmbeddedViewRef,\n  ApplicationRef,\n  Injector,\n} from '@angular/core';\nimport {BasePortalOutlet, ComponentPortal, TemplatePortal} from './portal';\n\n\n/**\n * A PortalOutlet for attaching portals to an arbitrary DOM element outside of the Angular\n * application context.\n */\nexport class DomPortalOutlet extends BasePortalOutlet {\n  constructor(\n      /** Element into which the content is projected. */\n      public outletElement: Element,\n      private _componentFactoryResolver: ComponentFactoryResolver,\n      private _appRef: ApplicationRef,\n      private _defaultInjector: Injector) {\n    super();\n  }\n\n  /**\n   * Attach the given ComponentPortal to DOM element using the ComponentFactoryResolver.\n   * @param portal Portal to be attached\n   * @returns Reference to the created component.\n   */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    const resolver = portal.componentFactoryResolver || this._componentFactoryResolver;\n    const componentFactory = resolver.resolveComponentFactory(portal.component);\n    let componentRef: ComponentRef<T>;\n\n    // If the portal specifies a ViewContainerRef, we will use that as the attachment point\n    // for the component (in terms of Angular's component tree, not rendering).\n    // When the ViewContainerRef is missing, we use the factory to create the component directly\n    // and then manually attach the view to the application.\n    if (portal.viewContainerRef) {\n      componentRef = portal.viewContainerRef.createComponent(\n          componentFactory,\n          portal.viewContainerRef.length,\n          portal.injector || portal.viewContainerRef.injector);\n\n      this.setDisposeFn(() => componentRef.destroy());\n    } else {\n      componentRef = componentFactory.create(portal.injector || this._defaultInjector);\n      this._appRef.attachView(componentRef.hostView);\n      this.setDisposeFn(() => {\n        this._appRef.detachView(componentRef.hostView);\n        componentRef.destroy();\n      });\n    }\n    // At this point the component has been instantiated, so we move it to the location in the DOM\n    // where we want it to be rendered.\n    this.outletElement.appendChild(this._getComponentRootNode(componentRef));\n\n    return componentRef;\n  }\n\n  /**\n   * Attaches a template portal to the DOM as an embedded view.\n   * @param portal Portal to be attached.\n   * @returns Reference to the created embedded view.\n   */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    let viewContainer = portal.viewContainerRef;\n    let viewRef = viewContainer.createEmbeddedView(portal.templateRef, portal.context);\n    viewRef.detectChanges();\n\n    // The method `createEmbeddedView` will add the view as a child of the viewContainer.\n    // But for the DomPortalOutlet the view can be added everywhere in the DOM\n    // (e.g Overlay Container) To move the view to the specified host element. We just\n    // re-append the existing root nodes.\n    viewRef.rootNodes.forEach(rootNode => this.outletElement.appendChild(rootNode));\n\n    this.setDisposeFn((() => {\n      let index = viewContainer.indexOf(viewRef);\n      if (index !== -1) {\n        viewContainer.remove(index);\n      }\n    }));\n\n    // TODO(jelbourn): Return locals from view.\n    return viewRef;\n  }\n\n  /**\n   * Clears out a portal from the DOM.\n   */\n  dispose(): void {\n    super.dispose();\n    if (this.outletElement.parentNode != null) {\n      this.outletElement.parentNode.removeChild(this.outletElement);\n    }\n  }\n\n  /** Gets the root HTMLElement for an instantiated component. */\n  private _getComponentRootNode(componentRef: ComponentRef<any>): HTMLElement {\n    return (componentRef.hostView as EmbeddedViewRef<any>).rootNodes[0] as HTMLElement;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ComponentFactoryResolver,\n  ComponentRef,\n  Directive,\n  EmbeddedViewRef,\n  EventEmitter,\n  NgModule,\n  OnDestroy,\n  OnInit,\n  Output,\n  TemplateRef,\n  ViewContainerRef,\n} from '@angular/core';\nimport {BasePortalOutlet, ComponentPortal, Portal, TemplatePortal} from './portal';\n\n\n/**\n * Directive version of a `TemplatePortal`. Because the directive *is* a TemplatePortal,\n * the directive instance itself can be attached to a host, enabling declarative use of portals.\n */\n@Directive({\n  selector: '[cdk-portal], [cdkPortal], [portal]',\n  exportAs: 'cdkPortal',\n})\nexport class CdkPortal extends TemplatePortal {\n  constructor(templateRef: TemplateRef<any>, viewContainerRef: ViewContainerRef) {\n    super(templateRef, viewContainerRef);\n  }\n}\n\n/**\n * Possible attached references to the CdkPortalOutlet.\n */\nexport type CdkPortalOutletAttachedRef = ComponentRef<any> | EmbeddedViewRef<any> | null;\n\n\n/**\n * Directive version of a PortalOutlet. Because the directive *is* a PortalOutlet, portals can be\n * directly attached to it, enabling declarative use.\n *\n * Usage:\n * `<ng-template [cdkPortalOutlet]=\"greeting\"></ng-template>`\n */\n@Directive({\n  selector: '[cdkPortalOutlet], [cdkPortalHost], [portalHost]',\n  exportAs: 'cdkPortalOutlet, cdkPortalHost',\n  inputs: ['portal: cdkPortalOutlet']\n})\nexport class CdkPortalOutlet extends BasePortalOutlet implements OnInit, OnDestroy {\n  /** Whether the portal component is initialized. */\n  private _isInitialized = false;\n\n  /** Reference to the currently-attached component/view ref. */\n  private _attachedRef: CdkPortalOutletAttachedRef;\n\n  constructor(\n      private _componentFactoryResolver: ComponentFactoryResolver,\n      private _viewContainerRef: ViewContainerRef) {\n    super();\n  }\n\n  /** Portal associated with the Portal outlet. */\n  get portal(): Portal<any> | null {\n    return this._attachedPortal;\n  }\n\n  set portal(portal: Portal<any> | null) {\n    // Ignore the cases where the `portal` is set to a falsy value before the lifecycle hooks have\n    // run. This handles the cases where the user might do something like `<div cdkPortalOutlet>`\n    // and attach a portal programmatically in the parent component. When Angular does the first CD\n    // round, it will fire the setter with empty string, causing the user's content to be cleared.\n    if (this.hasAttached() && !portal && !this._isInitialized) {\n      return;\n    }\n\n    if (this.hasAttached()) {\n      super.detach();\n    }\n\n    if (portal) {\n      super.attach(portal);\n    }\n\n    this._attachedPortal = portal;\n  }\n\n  @Output() attached: EventEmitter<CdkPortalOutletAttachedRef> =\n      new EventEmitter<CdkPortalOutletAttachedRef>();\n\n  /** Component or view reference that is attached to the portal. */\n  get attachedRef(): CdkPortalOutletAttachedRef {\n    return this._attachedRef;\n  }\n\n  ngOnInit() {\n    this._isInitialized = true;\n  }\n\n  ngOnDestroy() {\n    super.dispose();\n    this._attachedPortal = null;\n    this._attachedRef = null;\n  }\n\n  /**\n   * Attach the given ComponentPortal to this PortalOutlet using the ComponentFactoryResolver.\n   *\n   * @param portal Portal to be attached to the portal outlet.\n   * @returns Reference to the created component.\n   */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    portal.setAttachedHost(this);\n\n    // If the portal specifies an origin, use that as the logical location of the component\n    // in the application tree. Otherwise use the location of this PortalOutlet.\n    const viewContainerRef = portal.viewContainerRef != null ?\n        portal.viewContainerRef :\n        this._viewContainerRef;\n\n    const componentFactory =\n        this._componentFactoryResolver.resolveComponentFactory(portal.component);\n    const ref = viewContainerRef.createComponent(\n        componentFactory, viewContainerRef.length,\n        portal.injector || viewContainerRef.injector);\n\n    super.setDisposeFn(() => ref.destroy());\n    this._attachedPortal = portal;\n    this._attachedRef = ref;\n    this.attached.emit(ref);\n\n    return ref;\n  }\n\n  /**\n   * Attach the given TemplatePortal to this PortlHost as an embedded View.\n   * @param portal Portal to be attached.\n   * @returns Reference to the created embedded view.\n   */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    portal.setAttachedHost(this);\n    const viewRef = this._viewContainerRef.createEmbeddedView(portal.templateRef, portal.context);\n    super.setDisposeFn(() => this._viewContainerRef.clear());\n\n    this._attachedPortal = portal;\n    this._attachedRef = viewRef;\n    this.attached.emit(viewRef);\n\n    return viewRef;\n  }\n}\n\n\n@NgModule({\n  exports: [CdkPortal, CdkPortalOutlet],\n  declarations: [CdkPortal, CdkPortalOutlet],\n})\nexport class PortalModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injector} from '@angular/core';\n\n/**\n * Custom injector to be used when providing custom\n * injection tokens to components inside a portal.\n * @docs-private\n */\nexport class PortalInjector implements Injector {\n  constructor(\n    private _parentInjector: Injector,\n    private _customTokens: WeakMap<any, any>) { }\n\n  get(token: any, notFoundValue?: any): any {\n    const value = this._customTokens.get(token);\n\n    if (typeof value !== 'undefined') {\n      return value;\n    }\n\n    return this._parentInjector.get<any>(token, notFoundValue);\n  }\n}\n"]}