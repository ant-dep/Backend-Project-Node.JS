{"version":3,"file":"observers.es5.js","sources":["../../../src/cdk/observers/observe-content.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentInit,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  Injectable,\n  Input,\n  NgModule,\n  NgZone,\n  OnDestroy,\n  Output,\n} from '@angular/core';\nimport {Observable, Subject, Subscription, Observer} from 'rxjs';\nimport {debounceTime} from 'rxjs/operators';\n\n/**\n * Factory that creates a new MutationObserver and allows us to stub it out in unit tests.\n * @docs-private\n */\n@Injectable({providedIn: 'root'})\nexport class MutationObserverFactory {\n  create(callback: MutationCallback): MutationObserver | null {\n    return typeof MutationObserver === 'undefined' ? null : new MutationObserver(callback);\n  }\n}\n\n\n/** An injectable service that allows watching elements for changes to their content. */\n@Injectable({providedIn: 'root'})\nexport class ContentObserver implements OnDestroy {\n  /** Keeps track of the existing MutationObservers so they can be reused. */\n  private _observedElements = new Map<Element, {\n    observer: MutationObserver | null,\n    stream: Subject<MutationRecord[]>,\n    count: number\n  }>();\n\n  constructor(private _mutationObserverFactory: MutationObserverFactory) {}\n\n  ngOnDestroy() {\n    this._observedElements.forEach((_, element) => this._cleanupObserver(element));\n  }\n\n  /**\n   * Observe content changes on an element.\n   * @param element The element to observe for content changes.\n   */\n  observe(element: Element): Observable<MutationRecord[]>;\n\n  /**\n   * Observe content changes on an element.\n   * @param element The element to observe for content changes.\n   */\n  observe(element: ElementRef<Element>): Observable<MutationRecord[]>;\n\n  observe(elementOrRef: Element | ElementRef<Element>): Observable<MutationRecord[]> {\n    const element = elementOrRef instanceof ElementRef ? elementOrRef.nativeElement : elementOrRef;\n\n    return Observable.create((observer: Observer<MutationRecord[]>) => {\n      const stream = this._observeElement(element);\n      const subscription = stream.subscribe(observer);\n\n      return () => {\n        subscription.unsubscribe();\n        this._unobserveElement(element);\n      };\n    });\n  }\n\n  /**\n   * Observes the given element by using the existing MutationObserver if available, or creating a\n   * new one if not.\n   */\n  private _observeElement(element: Element): Subject<MutationRecord[]> {\n    if (!this._observedElements.has(element)) {\n      const stream = new Subject<MutationRecord[]>();\n      const observer = this._mutationObserverFactory.create(mutations => stream.next(mutations));\n      if (observer) {\n        observer.observe(element, {\n          characterData: true,\n          childList: true,\n          subtree: true\n        });\n      }\n      this._observedElements.set(element, {observer, stream, count: 1});\n    } else {\n      this._observedElements.get(element)!.count++;\n    }\n    return this._observedElements.get(element)!.stream;\n  }\n\n  /**\n   * Un-observes the given element and cleans up the underlying MutationObserver if nobody else is\n   * observing this element.\n   */\n  private _unobserveElement(element: Element) {\n    if (this._observedElements.has(element)) {\n      this._observedElements.get(element)!.count--;\n      if (!this._observedElements.get(element)!.count) {\n        this._cleanupObserver(element);\n      }\n    }\n  }\n\n  /** Clean up the underlying MutationObserver for the specified element. */\n  private _cleanupObserver(element: Element) {\n    if (this._observedElements.has(element)) {\n      const {observer, stream} = this._observedElements.get(element)!;\n      if (observer) {\n        observer.disconnect();\n      }\n      stream.complete();\n      this._observedElements.delete(element);\n    }\n  }\n}\n\n\n/**\n * Directive that triggers a callback whenever the content of\n * its associated element has changed.\n */\n@Directive({\n  selector: '[cdkObserveContent]',\n  exportAs: 'cdkObserveContent',\n})\nexport class CdkObserveContent implements AfterContentInit, OnDestroy {\n  /** Event emitted for each change in the element's content. */\n  @Output('cdkObserveContent') event = new EventEmitter<MutationRecord[]>();\n\n  /**\n   * Whether observing content is disabled. This option can be used\n   * to disconnect the underlying MutationObserver until it is needed.\n   */\n  @Input('cdkObserveContentDisabled')\n  get disabled() { return this._disabled; }\n  set disabled(value: any) {\n    this._disabled = coerceBooleanProperty(value);\n    this._disabled ? this._unsubscribe() : this._subscribe();\n  }\n  private _disabled = false;\n\n  /** Debounce interval for emitting the changes. */\n  @Input()\n  get debounce(): number { return this._debounce; }\n  set debounce(value: number) {\n    this._debounce = coerceNumberProperty(value);\n    this._subscribe();\n  }\n  private _debounce: number;\n\n  private _currentSubscription: Subscription | null = null;\n\n  constructor(private _contentObserver: ContentObserver,\n              private _elementRef: ElementRef<HTMLElement>,\n              private _ngZone: NgZone) {}\n\n  ngAfterContentInit() {\n    if (!this._currentSubscription && !this.disabled) {\n      this._subscribe();\n    }\n  }\n\n  ngOnDestroy() {\n    this._unsubscribe();\n  }\n\n  private _subscribe() {\n    this._unsubscribe();\n    const stream = this._contentObserver.observe(this._elementRef);\n\n    // TODO(mmalerba): We shouldn't be emitting on this @Output() outside the zone.\n    // Consider brining it back inside the zone next time we're making breaking changes.\n    // Bringing it back inside can cause things like infinite change detection loops and changed\n    // after checked errors if people's code isn't handling it properly.\n    this._ngZone.runOutsideAngular(() => {\n      this._currentSubscription =\n          (this.debounce ? stream.pipe(debounceTime(this.debounce)) : stream).subscribe(this.event);\n    });\n  }\n\n  private _unsubscribe() {\n    if (this._currentSubscription) {\n      this._currentSubscription.unsubscribe();\n    }\n  }\n}\n\n\n@NgModule({\n  exports: [CdkObserveContent],\n  declarations: [CdkObserveContent],\n  providers: [MutationObserverFactory]\n})\nexport class ObserversModule {}\n"]}