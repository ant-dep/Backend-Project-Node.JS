{"version":3,"file":"layout.es5.js","sources":["../../../src/cdk/layout/layout-module.ts","../../../src/cdk/layout/media-matcher.ts","../../../src/cdk/layout/breakpoints-observer.ts","../../../src/cdk/layout/breakpoints.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {NgModule} from '@angular/core';\n\n\n@NgModule()\nexport class LayoutModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Injectable} from '@angular/core';\nimport {Platform} from '@angular/cdk/platform';\n\n/** Global registry for all dynamically-created, injected media queries. */\nconst mediaQueriesForWebkitCompatibility: Set<string> = new Set<string>();\n\n/** Style tag that holds all of the dynamically-created media queries. */\nlet mediaQueryStyleNode: HTMLStyleElement | undefined;\n\n/** A utility for calling matchMedia queries. */\n@Injectable({providedIn: 'root'})\nexport class MediaMatcher {\n  /** The internal matchMedia method to return back a MediaQueryList like object. */\n  private _matchMedia: (query: string) => MediaQueryList;\n\n  constructor(private platform: Platform) {\n    this._matchMedia = this.platform.isBrowser && window.matchMedia ?\n      // matchMedia is bound to the window scope intentionally as it is an illegal invocation to\n      // call it from a different scope.\n      window.matchMedia.bind(window) :\n      noopMatchMedia;\n  }\n\n  /**\n   * Evaluates the given media query and returns the native MediaQueryList from which results\n   * can be retrieved.\n   * Confirms the layout engine will trigger for the selector query provided and returns the\n   * MediaQueryList for the query provided.\n   */\n  matchMedia(query: string): MediaQueryList {\n    if (this.platform.WEBKIT) {\n      createEmptyStyleRule(query);\n    }\n    return this._matchMedia(query);\n  }\n}\n\n/**\n * For Webkit engines that only trigger the MediaQueryListListener when\n * there is at least one CSS selector for the respective media query.\n */\nfunction createEmptyStyleRule(query: string) {\n  if (mediaQueriesForWebkitCompatibility.has(query)) {\n    return;\n  }\n\n  try {\n    if (!mediaQueryStyleNode) {\n      mediaQueryStyleNode = document.createElement('style');\n      mediaQueryStyleNode.setAttribute('type', 'text/css');\n      document.head!.appendChild(mediaQueryStyleNode);\n    }\n\n    if (mediaQueryStyleNode.sheet) {\n      (mediaQueryStyleNode.sheet as CSSStyleSheet)\n          .insertRule(`@media ${query} {.fx-query-test{ }}`, 0);\n      mediaQueriesForWebkitCompatibility.add(query);\n    }\n  } catch (e) {\n    console.error(e);\n  }\n}\n\n/** No-op matchMedia replacement for non-browser platforms. */\nfunction noopMatchMedia(query: string): MediaQueryList {\n  // Use `as any` here to avoid adding additional necessary properties for\n  // the noop matcher.\n  return {\n    matches: query === 'all' || query === '',\n    media: query,\n    addListener: () => {},\n    removeListener: () => {}\n  } as any;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, NgZone, OnDestroy} from '@angular/core';\nimport {MediaMatcher} from './media-matcher';\nimport {asapScheduler, combineLatest, fromEventPattern, Observable, Subject} from 'rxjs';\nimport {debounceTime, map, startWith, takeUntil} from 'rxjs/operators';\nimport {coerceArray} from '@angular/cdk/coercion';\n\n\n/** The current state of a layout breakpoint. */\nexport interface BreakpointState {\n  /** Whether the breakpoint is currently matching. */\n  matches: boolean;\n  /**\n   * A key boolean pair for each query provided to the observe method,\n   * with its current matched state.\n   */\n  breakpoints: {\n    [key: string]: boolean;\n  };\n}\n\n/** The current state of a layout breakpoint. */\ninterface InternalBreakpointState {\n  /** Whether the breakpoint is currently matching. */\n  matches: boolean;\n  /** The media query being to be matched */\n  query: string;\n}\n\ninterface Query {\n  observable: Observable<InternalBreakpointState>;\n  mql: MediaQueryList;\n}\n\n/** Utility for checking the matching state of @media queries. */\n@Injectable({providedIn: 'root'})\nexport class BreakpointObserver implements OnDestroy {\n  /**  A map of all media queries currently being listened for. */\n  private _queries = new Map<string, Query>();\n  /** A subject for all other observables to takeUntil based on. */\n  private _destroySubject = new Subject<void>();\n\n  constructor(private mediaMatcher: MediaMatcher, private zone: NgZone) {}\n\n  /** Completes the active subject, signalling to all other observables to complete. */\n  ngOnDestroy() {\n    this._destroySubject.next();\n    this._destroySubject.complete();\n  }\n\n  /**\n   * Whether one or more media queries match the current viewport size.\n   * @param value One or more media queries to check.\n   * @returns Whether any of the media queries match.\n   */\n  isMatched(value: string | string[]): boolean {\n    const queries = splitQueries(coerceArray(value));\n    return queries.some(mediaQuery => this._registerQuery(mediaQuery).mql.matches);\n  }\n\n  /**\n   * Gets an observable of results for the given queries that will emit new results for any changes\n   * in matching of the given queries.\n   * @param value One or more media queries to check.\n   * @returns A stream of matches for the given queries.\n   */\n  observe(value: string | string[]): Observable<BreakpointState> {\n    const queries = splitQueries(coerceArray(value));\n    const observables = queries.map(query => this._registerQuery(query).observable);\n\n    return combineLatest(observables).pipe(\n      debounceTime(0, asapScheduler),\n      map((breakpointStates: InternalBreakpointState[]) => {\n        const response: BreakpointState = {\n          matches: false,\n          breakpoints: {},\n        };\n        breakpointStates.forEach((state: InternalBreakpointState) => {\n          response.matches = response.matches || state.matches;\n          response.breakpoints[state.query] = state.matches;\n        });\n        return response;\n      }));\n  }\n\n  /** Registers a specific query to be listened for. */\n  private _registerQuery(query: string): Query {\n    // Only set up a new MediaQueryList if it is not already being listened for.\n    if (this._queries.has(query)) {\n      return this._queries.get(query)!;\n    }\n\n    const mql: MediaQueryList = this.mediaMatcher.matchMedia(query);\n\n    // TODO(jelbourn): change this `any` to `MediaQueryListEvent` once Google has upgraded to\n    // TypeScript 3.1 (the type is unavailable before then).\n    let queryListener: any;\n\n    // Create callback for match changes and add it is as a listener.\n    const queryObservable = fromEventPattern<MediaQueryList>(\n      // Listener callback methods are wrapped to be placed back in ngZone. Callbacks must be placed\n      // back into the zone because matchMedia is only included in Zone.js by loading the\n      // webapis-media-query.js file alongside the zone.js file.  Additionally, some browsers do not\n      // have MediaQueryList inherit from EventTarget, which causes inconsistencies in how Zone.js\n      // patches it.\n      (listener: Function) => {\n        queryListener = (e: any) => this.zone.run(() => listener(e));\n        mql.addListener(queryListener);\n      },\n      () => mql.removeListener(queryListener))\n      .pipe(\n        takeUntil(this._destroySubject),\n        startWith(mql),\n        map((nextMql: MediaQueryList) => ({query, matches: nextMql.matches}))\n      );\n\n    // Add the MediaQueryList to the set of queries.\n    const output = {observable: queryObservable, mql};\n    this._queries.set(query, output);\n    return output;\n  }\n}\n\n/**\n * Split each query string into separate query strings if two queries are provided as comma\n * separated.\n */\nfunction splitQueries(queries: string[]): string[] {\n  return queries.map((query: string) => query.split(','))\n                .reduce((a1: string[], a2: string[]) => a1.concat(a2))\n                .map(query => query.trim());\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// PascalCase is being used as Breakpoints is used like an enum.\n// tslint:disable-next-line:variable-name\nexport const Breakpoints = {\n  XSmall: '(max-width: 599px)',\n  Small: '(min-width: 600px) and (max-width: 959px)',\n  Medium: '(min-width: 960px) and (max-width: 1279px)',\n  Large: '(min-width: 1280px) and (max-width: 1919px)',\n  XLarge: '(min-width: 1920px)',\n\n  Handset: '(max-width: 599px) and (orientation: portrait), ' +\n           '(max-width: 959px) and (orientation: landscape)',\n  Tablet: '(min-width: 600px) and (max-width: 839px) and (orientation: portrait), ' +\n          '(min-width: 960px) and (max-width: 1279px) and (orientation: landscape)',\n  Web: '(min-width: 840px) and (orientation: portrait), ' +\n       '(min-width: 1280px) and (orientation: landscape)',\n\n  HandsetPortrait: '(max-width: 599px) and (orientation: portrait)',\n  TabletPortrait: '(min-width: 600px) and (max-width: 839px) and (orientation: portrait)',\n  WebPortrait: '(min-width: 840px) and (orientation: portrait)',\n\n  HandsetLandscape: '(max-width: 959px) and (orientation: landscape)',\n  TabletLandscape: '(min-width: 960px) and (max-width: 1279px) and (orientation: landscape)',\n  WebLandscape: '(min-width: 1280px) and (orientation: landscape)',\n};\n"]}