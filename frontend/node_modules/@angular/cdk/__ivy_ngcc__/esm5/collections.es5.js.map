{"version":3,"file":"collections.es5.js","sources":["../../../src/cdk/collections/data-source.ts","../../../src/cdk/collections/array-data-source.ts","../../../src/cdk/collections/selection.ts","../../../src/cdk/collections/unique-selection-dispatcher.ts"],"names":["tslib_1.__extends","observableOf"],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Observable} from 'rxjs';\nimport {CollectionViewer} from './collection-viewer';\n\nexport abstract class DataSource<T> {\n  /**\n   * Connects a collection viewer (such as a data-table) to this data source. Note that\n   * the stream provided will be accessed during change detection and should not directly change\n   * values that are bound in template views.\n   * @param collectionViewer The component that exposes a view over the data provided by this\n   *     data source.\n   * @returns Observable that emits a new value when the data changes.\n   */\n  abstract connect(collectionViewer: CollectionViewer): Observable<T[] | ReadonlyArray<T>>;\n\n  /**\n   * Disconnects a collection viewer (such as a data-table) from this data source. Can be used\n   * to perform any clean-up or tear-down operations when a view is being destroyed.\n   *\n   * @param collectionViewer The component that exposes a view over the data provided by this\n   *     data source.\n   */\n  abstract disconnect(collectionViewer: CollectionViewer): void;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Observable, of as observableOf} from 'rxjs';\nimport {DataSource} from './data-source';\n\n\n/** DataSource wrapper for a native array. */\nexport class ArrayDataSource<T> extends DataSource<T> {\n  constructor(private _data: T[] | ReadonlyArray<T> | Observable<T[] | ReadonlyArray<T>>) {\n    super();\n  }\n\n  connect(): Observable<T[] | ReadonlyArray<T>> {\n    return this._data instanceof Observable ? this._data : observableOf(this._data);\n  }\n\n  disconnect() {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Subject} from 'rxjs';\n\n/**\n * Class to be used to power selecting one or more options from a list.\n */\nexport class SelectionModel<T> {\n  /** Currently-selected values. */\n  private _selection = new Set<T>();\n\n  /** Keeps track of the deselected options that haven't been emitted by the change event. */\n  private _deselectedToEmit: T[] = [];\n\n  /** Keeps track of the selected options that haven't been emitted by the change event. */\n  private _selectedToEmit: T[] = [];\n\n  /** Cache for the array value of the selected items. */\n  private _selected: T[] | null;\n\n  /** Selected values. */\n  get selected(): T[] {\n    if (!this._selected) {\n      this._selected = Array.from(this._selection.values());\n    }\n\n    return this._selected;\n  }\n\n  /** Event emitted when the value has changed. */\n  changed: Subject<SelectionChange<T>> = new Subject();\n\n  /**\n   * Event emitted when the value has changed.\n   * @deprecated Use `changed` instead.\n   * @breaking-change 8.0.0 To be changed to `changed`\n   */\n  onChange: Subject<SelectionChange<T>> = this.changed;\n\n  constructor(\n    private _multiple = false,\n    initiallySelectedValues?: T[],\n    private _emitChanges = true) {\n\n    if (initiallySelectedValues && initiallySelectedValues.length) {\n      if (_multiple) {\n        initiallySelectedValues.forEach(value => this._markSelected(value));\n      } else {\n        this._markSelected(initiallySelectedValues[0]);\n      }\n\n      // Clear the array in order to avoid firing the change event for preselected values.\n      this._selectedToEmit.length = 0;\n    }\n  }\n\n  /**\n   * Selects a value or an array of values.\n   */\n  select(...values: T[]): void {\n    this._verifyValueAssignment(values);\n    values.forEach(value => this._markSelected(value));\n    this._emitChangeEvent();\n  }\n\n  /**\n   * Deselects a value or an array of values.\n   */\n  deselect(...values: T[]): void {\n    this._verifyValueAssignment(values);\n    values.forEach(value => this._unmarkSelected(value));\n    this._emitChangeEvent();\n  }\n\n  /**\n   * Toggles a value between selected and deselected.\n   */\n  toggle(value: T): void {\n    this.isSelected(value) ? this.deselect(value) : this.select(value);\n  }\n\n  /**\n   * Clears all of the selected values.\n   */\n  clear(): void {\n    this._unmarkAll();\n    this._emitChangeEvent();\n  }\n\n  /**\n   * Determines whether a value is selected.\n   */\n  isSelected(value: T): boolean {\n    return this._selection.has(value);\n  }\n\n  /**\n   * Determines whether the model does not have a value.\n   */\n  isEmpty(): boolean {\n    return this._selection.size === 0;\n  }\n\n  /**\n   * Determines whether the model has a value.\n   */\n  hasValue(): boolean {\n    return !this.isEmpty();\n  }\n\n  /**\n   * Sorts the selected values based on a predicate function.\n   */\n  sort(predicate?: (a: T, b: T) => number): void {\n    if (this._multiple && this.selected) {\n      this._selected!.sort(predicate);\n    }\n  }\n\n  /**\n   * Gets whether multiple values can be selected.\n   */\n  isMultipleSelection() {\n    return this._multiple;\n  }\n\n  /** Emits a change event and clears the records of selected and deselected values. */\n  private _emitChangeEvent() {\n    // Clear the selected values so they can be re-cached.\n    this._selected = null;\n\n    if (this._selectedToEmit.length || this._deselectedToEmit.length) {\n      this.changed.next({\n        source: this,\n        added: this._selectedToEmit,\n        removed: this._deselectedToEmit\n      });\n\n      this._deselectedToEmit = [];\n      this._selectedToEmit = [];\n    }\n  }\n\n  /** Selects a value. */\n  private _markSelected(value: T) {\n    if (!this.isSelected(value)) {\n      if (!this._multiple) {\n        this._unmarkAll();\n      }\n\n      this._selection.add(value);\n\n      if (this._emitChanges) {\n        this._selectedToEmit.push(value);\n      }\n    }\n  }\n\n  /** Deselects a value. */\n  private _unmarkSelected(value: T) {\n    if (this.isSelected(value)) {\n      this._selection.delete(value);\n\n      if (this._emitChanges) {\n        this._deselectedToEmit.push(value);\n      }\n    }\n  }\n\n  /** Clears out the selected values. */\n  private _unmarkAll() {\n    if (!this.isEmpty()) {\n      this._selection.forEach(value => this._unmarkSelected(value));\n    }\n  }\n\n  /**\n   * Verifies the value assignment and throws an error if the specified value array is\n   * including multiple values while the selection model is not supporting multiple values.\n   */\n  private _verifyValueAssignment(values: T[]) {\n    if (values.length > 1 && !this._multiple) {\n      throw getMultipleValuesInSingleSelectionError();\n    }\n  }\n}\n\n/**\n * Event emitted when the value of a MatSelectionModel has changed.\n * @docs-private\n */\nexport interface SelectionChange<T> {\n  /** Model that dispatched the event. */\n  source: SelectionModel<T>;\n  /** Options that were added to the model. */\n  added: T[];\n  /** Options that were removed from the model. */\n  removed: T[];\n}\n\n/**\n * Returns an error that reports that multiple values are passed into a selection model\n * with a single value.\n * @docs-private\n */\nexport function getMultipleValuesInSingleSelectionError() {\n  return Error('Cannot pass multiple values into SelectionModel with single-value mode.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, OnDestroy} from '@angular/core';\n\n\n// Users of the Dispatcher never need to see this type, but TypeScript requires it to be exported.\nexport type UniqueSelectionDispatcherListener = (id: string, name: string) => void;\n\n/**\n * Class to coordinate unique selection based on name.\n * Intended to be consumed as an Angular service.\n * This service is needed because native radio change events are only fired on the item currently\n * being selected, and we still need to uncheck the previous selection.\n *\n * This service does not *store* any IDs and names because they may change at any time, so it is\n * less error-prone if they are simply passed through when the events occur.\n */\n@Injectable({providedIn: 'root'})\nexport class UniqueSelectionDispatcher implements OnDestroy {\n  private _listeners: UniqueSelectionDispatcherListener[] = [];\n\n  /**\n   * Notify other items that selection for the given name has been set.\n   * @param id ID of the item.\n   * @param name Name of the item.\n   */\n  notify(id: string, name: string) {\n    for (let listener of this._listeners) {\n      listener(id, name);\n    }\n  }\n\n  /**\n   * Listen for future changes to item selection.\n   * @return Function used to deregister listener\n   */\n  listen(listener: UniqueSelectionDispatcherListener): () => void {\n    this._listeners.push(listener);\n    return () => {\n      this._listeners = this._listeners.filter((registered: UniqueSelectionDispatcherListener) => {\n        return listener !== registered;\n      });\n    };\n  }\n\n  ngOnDestroy() {\n    this._listeners = [];\n  }\n}\n"]}