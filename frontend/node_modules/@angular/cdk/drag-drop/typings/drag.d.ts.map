{"version":3,"file":"drag.d.ts","sources":["drag.d.ts"],"names":[],"mappingssourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Directionality } from '@angular/cdk/bidi';\nimport { ViewportRuler } from '@angular/cdk/scrolling';\nimport { AfterViewInit, ElementRef, EventEmitter, InjectionToken, NgZone, OnDestroy, QueryList, ViewContainerRef } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { DragDropRegistry } from './drag-drop-registry';\nimport { CdkDragDrop, CdkDragEnd, CdkDragEnter, CdkDragExit, CdkDragMove, CdkDragStart } from './drag-events';\nimport { CdkDragHandle } from './drag-handle';\nimport { CdkDragPlaceholder } from './drag-placeholder';\nimport { CdkDragPreview } from './drag-preview';\nimport { CdkDropListContainer } from './drop-list-container';\n/** Object that can be used to configure the behavior of CdkDrag. */\nexport interface CdkDragConfig {\n    /**\n     * Minimum amount of pixels that the user should\n     * drag, before the CDK initiates a drag sequence.\n     */\n    dragStartThreshold: number;\n    /**\n     * Amount the pixels the user should drag before the CDK\n     * considers them to have changed the drag direction.\n     */\n    pointerDirectionChangeThreshold: number;\n}\n/** Injection token that can be used to configure the behavior of `CdkDrag`. */\nexport declare const CDK_DRAG_CONFIG: InjectionToken<CdkDragConfig>;\n/** @docs-private */\nexport declare function CDK_DRAG_CONFIG_FACTORY(): CdkDragConfig;\n/** Element that can be moved inside a CdkDropList container. */\nexport declare class CdkDrag<T = any> implements AfterViewInit, OnDestroy {\n    /** Element that the draggable is attached to. */\n    element: ElementRef<HTMLElement>;\n    /** Droppable container that the draggable is a part of. */\n    dropContainer: CdkDropListContainer;\n    private _ngZone;\n    private _viewContainerRef;\n    private _viewportRuler;\n    private _dragDropRegistry;\n    private _config;\n    private _dir;\n    private _document;\n    /** Element displayed next to the user's pointer while the element is dragged. */\n    private _preview;\n    /** Reference to the view of the preview element. */\n    private _previewRef;\n    /** Reference to the view of the placeholder element. */\n    private _placeholderRef;\n    /** Element that is rendered instead of the draggable item while it is being sorted. */\n    private _placeholder;\n    /** Coordinates within the element at which the user picked up the element. */\n    private _pickupPositionInElement;\n    /** Coordinates on the page at which the user picked up the element. */\n    private _pickupPositionOnPage;\n    /**\n     * Reference to the element that comes after the draggable in the DOM, at the time\n     * it was picked up. Used for restoring its initial position when it's dropped.\n     */\n    private _nextSibling;\n    /**\n     * CSS `transform` applied to the element when it isn't being dragged. We need a\n     * passive transform in order for the dragged element to retain its new position\n     * after the user has stopped dragging and because we need to know the relative\n     * position in case they start dragging again. This corresponds to `element.style.transform`.\n     */\n    private _passiveTransform;\n    /** CSS `transform` that is applied to the element while it's being dragged. */\n    private _activeTransform;\n    /** Inline `transform` value that the element had before the first dragging sequence. */\n    private _initialTransform?;\n    /**\n     * Whether the dragging sequence has been started. Doesn't\n     * necessarily mean that the element has been moved.\n     */\n    _hasStartedDragging: boolean;\n    /** Whether the element has moved since the user started dragging it. */\n    private _hasMoved;\n    /** Drop container in which the CdkDrag resided when dragging began. */\n    private _initialContainer;\n    /** Cached scroll position on the page when the element was picked up. */\n    private _scrollPosition;\n    /** Emits when the item is being moved. */\n    private _moveEvents;\n    /**\n     * Amount of subscriptions to the move event. Used to avoid\n     * hitting the zone if the consumer didn't subscribe to it.\n     */\n    private _moveEventSubscriptions;\n    /** Keeps track of the direction in which the user is dragging along each axis. */\n    private _pointerDirectionDelta;\n    /** Pointer position at which the last change in the delta occurred. */\n    private _pointerPositionAtLastDirectionChange;\n    /** Root element that will be dragged by the user. */\n    private _rootElement;\n    /** Subscription to pointer movement events. */\n    private _pointerMoveSubscription;\n    /** Subscription to the event that is dispatched when the user lifts their pointer. */\n    private _pointerUpSubscription;\n    /** Elements that can be used to drag the draggable item. */\n    _handles: QueryList<CdkDragHandle>;\n    /** Element that will be used as a template to create the draggable item's preview. */\n    _previewTemplate: CdkDragPreview;\n    /** Template for placeholder element rendered to show where a draggable would be dropped. */\n    _placeholderTemplate: CdkDragPlaceholder;\n    /** Arbitrary data to attach to this drag instance. */\n    data: T;\n    /** Locks the position of the dragged element along the specified axis. */\n    lockAxis: 'x' | 'y';\n    /**\n     * Selector that will be used to determine the root draggable element, starting from\n     * the `cdkDrag` element and going up the DOM. Passing an alternate root element is useful\n     * when trying to enable dragging on an element that you might not have access to.\n     */\n    rootElementSelector: string;\n    /** Emits when the user starts dragging the item. */\n    started: EventEmitter<CdkDragStart>;\n    /** Emits when the user stops dragging an item in the container. */\n    ended: EventEmitter<CdkDragEnd>;\n    /** Emits when the user has moved the item into a new container. */\n    entered: EventEmitter<CdkDragEnter<any>>;\n    /** Emits when the user removes the item its container by dragging it into another container. */\n    exited: EventEmitter<CdkDragExit<any>>;\n    /** Emits when the user drops the item inside a container. */\n    dropped: EventEmitter<CdkDragDrop<any>>;\n    /**\n     * Emits as the user is dragging the item. Use with caution,\n     * because this event will fire for every pixel that the user has dragged.\n     */\n    moved: Observable<CdkDragMove<T>>;\n    constructor(\n    /** Element that the draggable is attached to. */\n    element: ElementRef<HTMLElement>, \n    /** Droppable container that the draggable is a part of. */\n    dropContainer: CdkDropListContainer, document: any, _ngZone: NgZone, _viewContainerRef: ViewContainerRef, _viewportRuler: ViewportRuler, _dragDropRegistry: DragDropRegistry<CdkDrag<T>, CdkDropListContainer>, _config: CdkDragConfig, _dir: Directionality);\n    /**\n     * Returns the element that is being used as a placeholder\n     * while the current element is being dragged.\n     */\n    getPlaceholderElement(): HTMLElement;\n    /** Returns the root draggable element. */\n    getRootElement(): HTMLElement;\n    ngAfterViewInit(): void;\n    ngOnDestroy(): void;\n    /** Checks whether the element is currently being dragged. */\n    _isDragging(): boolean;\n    /** Handler for the `mousedown`/`touchstart` events. */\n    _pointerDown: (event: TouchEvent | MouseEvent) => void;\n    /**\n     * Sets up the different variables and subscriptions\n     * that will be necessary for the dragging sequence.\n     * @param referenceElement Element that started the drag sequence.\n     * @param event Browser event object that started the sequence.\n     */\n    private _initializeDragSequence;\n    /** Starts the dragging sequence. */\n    private _startDragSequence;\n    /** Handler that is invoked when the user moves their pointer after they've initiated a drag. */\n    private _pointerMove;\n    /** Handler that is invoked when the user lifts their pointer up, after initiating a drag. */\n    private _pointerUp;\n    /** Cleans up the DOM artifacts that were added to facilitate the element being dragged. */\n    private _cleanupDragArtifacts;\n    /**\n     * Updates the item's position in its drop container, or moves it\n     * into a new one, depending on its current drag position.\n     */\n    private _updateActiveDropContainer;\n    /**\n     * Creates the element that will be rendered next to the user's pointer\n     * and will be used as a preview of the element that is being dragged.\n     */\n    private _createPreviewElement;\n    /** Creates an element that will be shown instead of the current element while dragging. */\n    private _createPlaceholderElement;\n    /**\n     * Figures out the coordinates at which an element was picked up.\n     * @param referenceElement Element that initiated the dragging.\n     * @param event Event that initiated the dragging.\n     */\n    private _getPointerPositionInElement;\n    /**\n     * Animates the preview element from its current position to the location of the drop placeholder.\n     * @returns Promise that resolves when the animation completes.\n     */\n    private _animatePreviewToPlaceholder;\n    /**\n     * Helper to remove an element from the DOM and to do all the necessary null checks.\n     * @param element Element to be removed.\n     */\n    private _removeElement;\n    /** Determines the point of the page that was touched by the user. */\n    private _getPointerPositionOnPage;\n    /** Gets the pointer position on the page, accounting for any position constraints. */\n    private _getConstrainedPointerPosition;\n    /** Determines whether an event is a touch event. */\n    private _isTouchEvent;\n    /** Destroys the preview element and its ViewRef. */\n    private _destroyPreview;\n    /** Destroys the placeholder element and its ViewRef. */\n    private _destroyPlaceholder;\n    /** Updates the current drag delta, based on the user's current pointer position on the page. */\n    private _updatePointerDirectionDelta;\n    /** Gets the root draggable element, based on the `rootElementSelector`. */\n    private _getRootElement;\n    /** Unsubscribes from the global subscriptions. */\n    private _removeSubscriptions;\n}\n"]}