{"version":3,"file":"paginator.d.ts","sources":["paginator.d.ts"],"names":[],"mappingssourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { ChangeDetectorRef, EventEmitter, OnDestroy, OnInit } from '@angular/core';\nimport { MatPaginatorIntl } from './paginator-intl';\nimport { HasInitialized, HasInitializedCtor, ThemePalette } from '@angular/material/core';\n/**\n * Change event object that is emitted when the user selects a\n * different page size or navigates to another page.\n */\nexport declare class PageEvent {\n    /** The current page index. */\n    pageIndex: number;\n    /**\n     * Index of the page that was selected previously.\n     * @breaking-change 8.0.0 To be made into a required property.\n     */\n    previousPageIndex?: number;\n    /** The current page size */\n    pageSize: number;\n    /** The current total number of items being paged */\n    length: number;\n}\n/** @docs-private */\nexport declare class MatPaginatorBase {\n}\nexport declare const _MatPaginatorBase: HasInitializedCtor & typeof MatPaginatorBase;\n/**\n * Component to provide navigation between paged information. Displays the size of the current\n * page, user-selectable options to change that size, what items are being shown, and\n * navigational button to go to the previous or next page.\n */\nexport declare class MatPaginator extends _MatPaginatorBase implements OnInit, OnDestroy, HasInitialized {\n    _intl: MatPaginatorIntl;\n    private _changeDetectorRef;\n    private _initialized;\n    private _intlChanges;\n    /** Theme color to be used for the underlying form controls. */\n    color: ThemePalette;\n    /** The zero-based page index of the displayed list of items. Defaulted to 0. */\n    pageIndex: number;\n    _pageIndex: number;\n    /** The length of the total number of items that are being paginated. Defaulted to 0. */\n    length: number;\n    _length: number;\n    /** Number of items to display on a page. By default set to 50. */\n    pageSize: number;\n    private _pageSize;\n    /** The set of provided page size options to display to the user. */\n    pageSizeOptions: number[];\n    private _pageSizeOptions;\n    /** Whether to hide the page size selection UI from the user. */\n    hidePageSize: boolean;\n    private _hidePageSize;\n    /** Whether to show the first/last buttons UI to the user. */\n    showFirstLastButtons: boolean;\n    private _showFirstLastButtons;\n    /** Event emitted when the paginator changes the page size or page index. */\n    readonly page: EventEmitter<PageEvent>;\n    /** Displayed set of page size options. Will be sorted and include current page size. */\n    _displayedPageSizeOptions: number[];\n    constructor(_intl: MatPaginatorIntl, _changeDetectorRef: ChangeDetectorRef);\n    ngOnInit(): void;\n    ngOnDestroy(): void;\n    /** Advances to the next page if it exists. */\n    nextPage(): void;\n    /** Move back to the previous page if it exists. */\n    previousPage(): void;\n    /** Move to the first page if not already there. */\n    firstPage(): void;\n    /** Move to the last page if not already there. */\n    lastPage(): void;\n    /** Whether there is a previous page. */\n    hasPreviousPage(): boolean;\n    /** Whether there is a next page. */\n    hasNextPage(): boolean;\n    /** Calculate the number of pages */\n    getNumberOfPages(): number;\n    /**\n     * Changes the page size so that the first item displayed on the page will still be\n     * displayed using the new page size.\n     *\n     * For example, if the page size is 10 and on the second page (items indexed 10-19) then\n     * switching so that the page size is 5 will set the third page as the current page so\n     * that the 10th item will still be displayed.\n     */\n    _changePageSize(pageSize: number): void;\n    /**\n     * Updates the list of page size options to display to the user. Includes making sure that\n     * the page size is an option and that the list is sorted.\n     */\n    private _updateDisplayedPageSizeOptions;\n    /** Emits an event notifying that a change of the paginator's properties has been triggered. */\n    private _emitPageEvent;\n}\n"]}