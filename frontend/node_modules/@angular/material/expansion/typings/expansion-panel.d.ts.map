{"version":3,"file":"expansion-panel.d.ts","sources":["expansion-panel.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA;;;AACA","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { AnimationEvent } from '@angular/animations';\nimport { CdkAccordionItem } from '@angular/cdk/accordion';\nimport { UniqueSelectionDispatcher } from '@angular/cdk/collections';\nimport { TemplatePortal } from '@angular/cdk/portal';\nimport { AfterContentInit, ChangeDetectorRef, EventEmitter, ElementRef, OnChanges, OnDestroy, SimpleChanges, ViewContainerRef } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { MatExpansionPanelContent } from './expansion-panel-content';\nimport { MatAccordionBase } from './accordion-base';\nexport declare const _CdkAccordionItem: typeof CdkAccordionItem;\n/** MatExpansionPanel's states. */\nexport declare type MatExpansionPanelState = 'expanded' | 'collapsed';\n/**\n * `<mat-expansion-panel>`\n *\n * This component can be used as a single element to show expandable content, or as one of\n * multiple children of an element with the MatAccordion directive attached.\n */\nexport declare class MatExpansionPanel extends CdkAccordionItem implements AfterContentInit, OnChanges, OnDestroy {\n    private _viewContainerRef;\n    _animationMode?: string | undefined;\n    private _document;\n    /** Whether the toggle indicator should be hidden. */\n    hideToggle: boolean;\n    private _hideToggle;\n    /** An event emitted after the body's expansion animation happens. */\n    afterExpand: EventEmitter<void>;\n    /** An event emitted after the body's collapse animation happens. */\n    afterCollapse: EventEmitter<void>;\n    /** Stream that emits for changes in `@Input` properties. */\n    readonly _inputChanges: Subject<SimpleChanges>;\n    /** Optionally defined accordion the expansion panel belongs to. */\n    accordion: MatAccordionBase;\n    /** Content that will be rendered lazily. */\n    _lazyContent: MatExpansionPanelContent;\n    /** Element containing the panel's user-provided content. */\n    _body: ElementRef<HTMLElement>;\n    /** Portal holding the user's content. */\n    _portal: TemplatePortal;\n    /** ID for the associated header element. Used for a11y labelling. */\n    _headerId: string;\n    /** Stream of body animation done events. */\n    _bodyAnimationDone: Subject<AnimationEvent>;\n    constructor(accordion: MatAccordionBase, _changeDetectorRef: ChangeDetectorRef, _uniqueSelectionDispatcher: UniqueSelectionDispatcher, _viewContainerRef: ViewContainerRef, _document?: any, _animationMode?: string | undefined);\n    /** Determines whether the expansion panel should have spacing between it and its siblings. */\n    _hasSpacing(): boolean;\n    /** Gets the expanded state string. */\n    _getExpandedState(): MatExpansionPanelState;\n    ngAfterContentInit(): void;\n    ngOnChanges(changes: SimpleChanges): void;\n    ngOnDestroy(): void;\n    /** Checks whether the expansion panel's content contains the currently-focused element. */\n    _containsFocus(): boolean;\n}\nexport declare class MatExpansionPanelActionRow {\n}\n"]}