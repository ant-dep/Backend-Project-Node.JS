{"version":3,"file":"tab-group.d.ts","sources":["tab-group.d.ts"],"names":[],"mappingssourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { AfterContentChecked, AfterContentInit, ChangeDetectorRef, ElementRef, EventEmitter, OnDestroy, QueryList } from '@angular/core';\nimport { CanColor, CanColorCtor, CanDisableRipple, CanDisableRippleCtor, ThemePalette } from '@angular/material/core';\nimport { MatTab } from './tab';\nimport { MatTabHeader } from './tab-header';\n/** A simple change event emitted on focus or selection changes. */\nexport declare class MatTabChangeEvent {\n    /** Index of the currently-selected tab. */\n    index: number;\n    /** Reference to the currently-selected tab. */\n    tab: MatTab;\n}\n/** Possible positions for the tab header. */\nexport declare type MatTabHeaderPosition = 'above' | 'below';\n/** @docs-private */\nexport declare class MatTabGroupBase {\n    _elementRef: ElementRef;\n    constructor(_elementRef: ElementRef);\n}\nexport declare const _MatTabGroupMixinBase: CanColorCtor & CanDisableRippleCtor & typeof MatTabGroupBase;\n/**\n * Material design tab-group component.  Supports basic tab pairs (label + content) and includes\n * animated ink-bar, keyboard navigation, and screen reader.\n * See: https://material.io/design/components/tabs.html\n */\nexport declare class MatTabGroup extends _MatTabGroupMixinBase implements AfterContentInit, AfterContentChecked, OnDestroy, CanColor, CanDisableRipple {\n    private _changeDetectorRef;\n    _tabs: QueryList<MatTab>;\n    _tabBodyWrapper: ElementRef;\n    _tabHeader: MatTabHeader;\n    /** The tab index that should be selected after the content has been checked. */\n    private _indexToSelect;\n    /** Snapshot of the height of the tab body wrapper before another tab is activated. */\n    private _tabBodyWrapperHeight;\n    /** Subscription to tabs being added/removed. */\n    private _tabsSubscription;\n    /** Subscription to changes in the tab labels. */\n    private _tabLabelSubscription;\n    /** Whether the tab group should grow to the size of the active tab. */\n    dynamicHeight: boolean;\n    private _dynamicHeight;\n    /** The index of the active tab. */\n    selectedIndex: number | null;\n    private _selectedIndex;\n    /** Position of the tab header. */\n    headerPosition: MatTabHeaderPosition;\n    /** Background color of the tab group. */\n    backgroundColor: ThemePalette;\n    private _backgroundColor;\n    /** Output to enable support for two-way binding on `[(selectedIndex)]` */\n    readonly selectedIndexChange: EventEmitter<number>;\n    /** Event emitted when focus has changed within a tab group. */\n    readonly focusChange: EventEmitter<MatTabChangeEvent>;\n    /** Event emitted when the body animation has completed */\n    readonly animationDone: EventEmitter<void>;\n    /** Event emitted when the tab selection has changed. */\n    readonly selectedTabChange: EventEmitter<MatTabChangeEvent>;\n    private _groupId;\n    constructor(elementRef: ElementRef, _changeDetectorRef: ChangeDetectorRef);\n    /**\n     * After the content is checked, this component knows what tabs have been defined\n     * and what the selected index should be. This is where we can know exactly what position\n     * each tab should be in according to the new selected index, and additionally we know how\n     * a new selected tab should transition in (from the left or right).\n     */\n    ngAfterContentChecked(): void;\n    ngAfterContentInit(): void;\n    ngOnDestroy(): void;\n    /** Re-aligns the ink bar to the selected tab element. */\n    realignInkBar(): void;\n    _focusChanged(index: number): void;\n    private _createChangeEvent;\n    /**\n     * Subscribes to changes in the tab labels. This is needed, because the @Input for the label is\n     * on the MatTab component, whereas the data binding is inside the MatTabGroup. In order for the\n     * binding to be updated, we need to subscribe to changes in it and trigger change detection\n     * manually.\n     */\n    private _subscribeToTabLabels;\n    /** Clamps the given index to the bounds of 0 and the tabs length. */\n    private _clampTabIndex;\n    /** Returns a unique id for each tab label element */\n    _getTabLabelId(i: number): string;\n    /** Returns a unique id for each tab content element */\n    _getTabContentId(i: number): string;\n    /**\n     * Sets the height of the body wrapper to the height of the activating tab if dynamic\n     * height property is true.\n     */\n    _setTabBodyWrapperHeight(tabHeight: number): void;\n    /** Removes the height of the tab body wrapper. */\n    _removeTabBodyWrapperHeight(): void;\n    /** Handle click events, setting new selected index if appropriate. */\n    _handleClick(tab: MatTab, tabHeader: MatTabHeader, idx: number): void;\n    /** Retrieves the tabindex for the tab. */\n    _getTabIndex(tab: MatTab, idx: number): number | null;\n}\n"]}