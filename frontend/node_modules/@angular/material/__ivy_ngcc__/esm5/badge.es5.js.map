{"version":3,"file":"badge.es5.js","sources":["../../../src/lib/badge/badge.ts","../../../src/lib/badge/badge-module.ts"],"names":["tslib_1.__extends"],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AriaDescriber} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  Directive,\n  ElementRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Renderer2,\n} from '@angular/core';\nimport {ThemePalette, mixinDisabled, CanDisableCtor, CanDisable} from '@angular/material/core';\n\n\nlet nextId = 0;\n\n// Boilerplate for applying mixins to MatBadge.\n/** @docs-private */\nexport class MatBadgeBase {}\n\nexport const _MatBadgeMixinBase:\n    CanDisableCtor & typeof MatBadgeBase = mixinDisabled(MatBadgeBase);\n\nexport type MatBadgePosition = 'above after' | 'above before' | 'below before' | 'below after';\nexport type MatBadgeSize = 'small' | 'medium' | 'large';\n\n/** Directive to display a text badge. */\n@Directive({\n  selector: '[matBadge]',\n  inputs: ['disabled: matBadgeDisabled'],\n  host: {\n    'class': 'mat-badge',\n    '[class.mat-badge-overlap]': 'overlap',\n    '[class.mat-badge-above]': 'isAbove()',\n    '[class.mat-badge-below]': '!isAbove()',\n    '[class.mat-badge-before]': '!isAfter()',\n    '[class.mat-badge-after]': 'isAfter()',\n    '[class.mat-badge-small]': 'size === \"small\"',\n    '[class.mat-badge-medium]': 'size === \"medium\"',\n    '[class.mat-badge-large]': 'size === \"large\"',\n    '[class.mat-badge-hidden]': 'hidden || !_hasContent',\n    '[class.mat-badge-disabled]': 'disabled',\n  },\n})\nexport class MatBadge extends _MatBadgeMixinBase implements OnDestroy, CanDisable {\n  /** Whether the badge has any content. */\n  _hasContent = false;\n\n  /** The color of the badge. Can be `primary`, `accent`, or `warn`. */\n  @Input('matBadgeColor')\n  get color(): ThemePalette { return this._color; }\n  set color(value: ThemePalette) {\n    this._setColor(value);\n    this._color = value;\n  }\n  private _color: ThemePalette = 'primary';\n\n  /** Whether the badge should overlap its contents or not */\n  @Input('matBadgeOverlap')\n  get overlap(): boolean { return this._overlap; }\n  set overlap(val: boolean) {\n    this._overlap = coerceBooleanProperty(val);\n  }\n  private _overlap: boolean = true;\n\n  /**\n   * Position the badge should reside.\n   * Accepts any combination of 'above'|'below' and 'before'|'after'\n   */\n  @Input('matBadgePosition') position: MatBadgePosition = 'above after';\n\n  /** The content for the badge */\n  @Input('matBadge')\n  get content(): string { return this._content; }\n  set content(value: string) {\n    this._content = value;\n    this._hasContent = value != null && `${value}`.trim().length > 0;\n    this._updateTextContent();\n  }\n  private _content: string;\n\n  /** Message used to describe the decorated element via aria-describedby */\n  @Input('matBadgeDescription')\n  get description(): string { return this._description; }\n  set description(newDescription: string) {\n    if (newDescription !== this._description) {\n      this._updateHostAriaDescription(newDescription, this._description);\n      this._description = newDescription;\n    }\n  }\n  private _description: string;\n\n  /** Size of the badge. Can be 'small', 'medium', or 'large'. */\n  @Input('matBadgeSize') size: MatBadgeSize = 'medium';\n\n  /** Whether the badge is hidden. */\n  @Input('matBadgeHidden')\n  get hidden(): boolean { return this._hidden; }\n  set hidden(val: boolean) {\n    this._hidden = coerceBooleanProperty(val);\n  }\n  private _hidden: boolean;\n\n  /** Unique id for the badge */\n  _id: number = nextId++;\n\n  private _badgeElement: HTMLElement;\n\n  constructor(\n      @Optional() @Inject(DOCUMENT) private _document: any,\n      private _ngZone: NgZone,\n      private _elementRef: ElementRef<HTMLElement>,\n      private _ariaDescriber: AriaDescriber,\n      /** @breaking-change 8.0.0 Make _renderer a required param and remove _document. */\n      private _renderer?: Renderer2) {\n        super();\n      }\n\n  /** Whether the badge is above the host or not */\n  isAbove(): boolean {\n    return this.position.indexOf('below') === -1;\n  }\n\n  /** Whether the badge is after the host or not */\n  isAfter(): boolean {\n    return this.position.indexOf('before') === -1;\n  }\n\n  ngOnDestroy() {\n    if (this.description && this._badgeElement) {\n      this._ariaDescriber.removeDescription(this._badgeElement, this.description);\n    }\n  }\n\n  /** Injects a span element into the DOM with the content. */\n  private _updateTextContent(): HTMLSpanElement {\n    if (!this._badgeElement) {\n      this._badgeElement = this._createBadgeElement();\n    } else {\n      this._badgeElement.textContent = this.content;\n    }\n    return this._badgeElement;\n  }\n\n  /** Creates the badge element */\n  private _createBadgeElement(): HTMLElement {\n    // @breaking-change 8.0.0 Remove null check for _renderer\n    const rootNode = this._renderer || this._document;\n    const badgeElement = rootNode.createElement('span');\n    const activeClass = 'mat-badge-active';\n\n    badgeElement.setAttribute('id', `mat-badge-content-${this._id}`);\n    badgeElement.classList.add('mat-badge-content');\n    badgeElement.textContent = this.content;\n\n    if (this.description) {\n      badgeElement.setAttribute('aria-label', this.description);\n    }\n\n    this._elementRef.nativeElement.appendChild(badgeElement);\n\n    // animate in after insertion\n    if (typeof requestAnimationFrame === 'function') {\n      this._ngZone.runOutsideAngular(() => {\n        requestAnimationFrame(() => {\n          badgeElement.classList.add(activeClass);\n        });\n      });\n    } else {\n      badgeElement.classList.add(activeClass);\n    }\n\n    return badgeElement;\n  }\n\n  /** Sets the aria-label property on the element */\n  private _updateHostAriaDescription(newDescription: string, oldDescription: string): void {\n    // ensure content available before setting label\n    const content = this._updateTextContent();\n\n    if (oldDescription) {\n      this._ariaDescriber.removeDescription(content, oldDescription);\n    }\n\n    if (newDescription) {\n      this._ariaDescriber.describe(content, newDescription);\n    }\n  }\n\n  /** Adds css theme class given the color to the component host */\n  private _setColor(colorPalette: ThemePalette) {\n    if (colorPalette !== this._color) {\n      if (this._color) {\n        this._elementRef.nativeElement.classList.remove(`mat-badge-${this._color}`);\n      }\n      if (colorPalette) {\n        this._elementRef.nativeElement.classList.add(`mat-badge-${colorPalette}`);\n      }\n    }\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {MatBadge} from './badge';\n\n\n@NgModule({\n  imports: [\n    A11yModule,\n    MatCommonModule\n  ],\n  exports: [MatBadge],\n  declarations: [MatBadge],\n})\nexport class MatBadgeModule {}\n"]}