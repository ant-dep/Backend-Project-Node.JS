{"version":3,"file":"slide-toggle.es5.js","sources":["../../../src/lib/slide-toggle/slide-toggle-config.ts","../../../src/lib/slide-toggle/slide-toggle.ts","../../../src/lib/slide-toggle/slide-toggle-module.ts"],"names":["tslib_1.__extends"],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {InjectionToken} from '@angular/core';\n\n\n/** Default `mat-slide-toggle` options that can be overridden. */\nexport interface MatSlideToggleDefaultOptions {\n  /** Whether toggle action triggers value changes in slide toggle. */\n  disableToggleValue?: boolean;\n  /** Whether drag action triggers value changes in slide toggle. */\n  disableDragValue?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-slide-toggle`. */\nexport const MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS =\n  new InjectionToken<MatSlideToggleDefaultOptions>('mat-slide-toggle-default-options', {\n    providedIn: 'root',\n    factory: () => ({disableToggleValue: false, disableDragValue: false})\n  });\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n  NgZone,\n  Optional,\n  Inject,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor, CanColorCtor,\n  CanDisable, CanDisableCtor,\n  CanDisableRipple, CanDisableRippleCtor,\n  HammerInput,\n  HasTabIndex, HasTabIndexCtor,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {\n  MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS,\n  MatSlideToggleDefaultOptions\n} from './slide-toggle-config';\n\n// Increasing integer for generating unique ids for slide-toggle components.\nlet nextUniqueId = 0;\n\n/** @docs-private */\nexport const MAT_SLIDE_TOGGLE_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSlideToggle),\n  multi: true\n};\n\n/** Change event object emitted by a MatSlideToggle. */\nexport class MatSlideToggleChange {\n  constructor(\n    /** The source MatSlideToggle of the event. */\n    public source: MatSlideToggle,\n    /** The new `checked` value of the MatSlideToggle. */\n    public checked: boolean) { }\n}\n\n// Boilerplate for applying mixins to MatSlideToggle.\n/** @docs-private */\nexport class MatSlideToggleBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatSlideToggleMixinBase:\n    HasTabIndexCtor &\n    CanColorCtor &\n    CanDisableRippleCtor &\n    CanDisableCtor &\n    typeof MatSlideToggleBase =\n        mixinTabIndex(mixinColor(mixinDisableRipple(mixinDisabled(MatSlideToggleBase)), 'accent'));\n\n/** Represents a slidable \"switch\" toggle that can be moved between on and off. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-slide-toggle',\n  exportAs: 'matSlideToggle',\n  host: {\n    'class': 'mat-slide-toggle',\n    '[id]': 'id',\n    '[attr.tabindex]': 'null',\n    '[class.mat-checked]': 'checked',\n    '[class.mat-disabled]': 'disabled',\n    '[class.mat-slide-toggle-label-before]': 'labelPosition == \"before\"',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n  templateUrl: 'slide-toggle.html',\n  styleUrls: ['slide-toggle.css'],\n  providers: [MAT_SLIDE_TOGGLE_VALUE_ACCESSOR],\n  inputs: ['disabled', 'disableRipple', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatSlideToggle extends _MatSlideToggleMixinBase implements OnDestroy, AfterContentInit,\n    ControlValueAccessor, CanDisable, CanColor, HasTabIndex, CanDisableRipple {\n\n  private onChange = (_: any) => {};\n  private onTouched = () => {};\n\n  private _uniqueId: string = `mat-slide-toggle-${++nextUniqueId}`;\n  private _required: boolean = false;\n  private _checked: boolean = false;\n\n  /** Whether the thumb is currently being dragged. */\n  private _dragging = false;\n\n  /** Previous checked state before drag started. */\n  private _previousChecked: boolean;\n\n  /** Width of the thumb bar of the slide-toggle. */\n  private _thumbBarWidth: number;\n\n  /** Percentage of the thumb while dragging. Percentage as fraction of 100. */\n  private _dragPercentage: number;\n\n  /** Reference to the thumb HTMLElement. */\n  @ViewChild('thumbContainer') _thumbEl: ElementRef;\n\n  /** Reference to the thumb bar HTMLElement. */\n  @ViewChild('toggleBar') _thumbBarEl: ElementRef;\n\n  /** Name value will be applied to the input element if present. */\n  @Input() name: string | null = null;\n\n  /** A unique id for the slide-toggle input. If none is supplied, it will be auto-generated. */\n  @Input() id: string = this._uniqueId;\n\n  /** Whether the label should appear after or before the slide-toggle. Defaults to 'after'. */\n  @Input() labelPosition: 'before' | 'after' = 'after';\n\n  /** Used to set the aria-label attribute on the underlying input element. */\n  @Input('aria-label') ariaLabel: string | null = null;\n\n  /** Used to set the aria-labelledby attribute on the underlying input element. */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  /** Whether the slide-toggle is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value) { this._required = coerceBooleanProperty(value); }\n\n  /** Whether the slide-toggle element is checked or not. */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value) {\n    this._checked = coerceBooleanProperty(value);\n    this._changeDetectorRef.markForCheck();\n  }\n  /** An event will be dispatched each time the slide-toggle changes its value. */\n  @Output() readonly change: EventEmitter<MatSlideToggleChange> =\n      new EventEmitter<MatSlideToggleChange>();\n\n  /**\n   * An event will be dispatched each time the slide-toggle input is toggled.\n   * This event is always emitted when the user toggles the slide toggle, but this does not mean\n   * the slide toggle's value has changed. The event does not fire when the user drags to change\n   * the slide toggle value.\n   */\n  @Output() readonly toggleChange: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * An event will be dispatched each time the slide-toggle is dragged.\n   * This event is always emitted when the user drags the slide toggle to make a change greater\n   * than 50%. It does not mean the slide toggle's value is changed. The event is not emitted when\n   * the user toggles the slide toggle to change its value.\n   */\n  @Output() readonly dragChange: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Returns the unique id for the visual hidden input. */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Reference to the underlying input element. */\n  @ViewChild('input') _inputElement: ElementRef<HTMLInputElement>;\n\n  constructor(elementRef: ElementRef,\n              /**\n               * @deprecated The `_platform` parameter to be removed.\n               * @breaking-change 8.0.0\n               */\n              _platform: Platform,\n              private _focusMonitor: FocusMonitor,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Attribute('tabindex') tabIndex: string,\n              private _ngZone: NgZone,\n              @Inject(MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS)\n                  public defaults: MatSlideToggleDefaultOptions,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string,\n              @Optional() private _dir?: Directionality) {\n    super(elementRef);\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngAfterContentInit() {\n    this._focusMonitor\n      .monitor(this._elementRef, true)\n      .subscribe(focusOrigin => {\n        if (!focusOrigin) {\n          // When a focused element becomes disabled, the browser *immediately* fires a blur event.\n          // Angular does not expect events to be raised during change detection, so any state\n          // change (such as a form control's 'ng-touched') will cause a changed-after-checked\n          // error. See https://github.com/angular/angular/issues/17793. To work around this,\n          // we defer telling the form control it has been touched until the next tick.\n          Promise.resolve().then(() => this.onTouched());\n        }\n      });\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n\n  /** Method being called whenever the underlying input emits a change event. */\n  _onChangeEvent(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the component's `change` output.\n    event.stopPropagation();\n\n    if (!this._dragging) {\n      this.toggleChange.emit();\n    }\n    // Releasing the pointer over the `<label>` element while dragging triggers another\n    // click event on the `<label>` element. This means that the checked state of the underlying\n    // input changed unintentionally and needs to be changed back. Or when the slide toggle's config\n    // disabled toggle change event by setting `disableToggleValue: true`, the slide toggle's value\n    // does not change, and the checked state of the underlying input needs to be changed back.\n    if (this._dragging || this.defaults.disableToggleValue) {\n      this._inputElement.nativeElement.checked = this.checked;\n      return;\n    }\n\n    // Sync the value from the underlying input element with the component instance.\n    this.checked = this._inputElement.nativeElement.checked;\n\n    // Emit our custom change event only if the underlying input emitted one. This ensures that\n    // there is no change event, when the checked state changes programmatically.\n    this._emitChangeEvent();\n  }\n\n  /** Method being called whenever the slide-toggle has been clicked. */\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `slide-toggle` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  writeValue(value: any): void {\n    this.checked = !!value;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnChange(fn: any): void {\n    this.onChange = fn;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnTouched(fn: any): void {\n    this.onTouched = fn;\n  }\n\n  /** Implemented as a part of ControlValueAccessor. */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the slide-toggle. */\n  focus(): void {\n    this._focusMonitor.focusVia(this._inputElement, 'keyboard');\n  }\n\n  /** Toggles the checked state of the slide-toggle. */\n  toggle(): void {\n    this.checked = !this.checked;\n    this.onChange(this.checked);\n  }\n\n  /**\n   * Emits a change event on the `change` output. Also notifies the FormControl about the change.\n   */\n  private _emitChangeEvent() {\n    this.onChange(this.checked);\n    this.change.emit(new MatSlideToggleChange(this, this.checked));\n  }\n\n  /** Retrieves the percentage of thumb from the moved distance. Percentage as fraction of 100. */\n  private _getDragPercentage(distance: number) {\n    let percentage = (distance / this._thumbBarWidth) * 100;\n\n    // When the toggle was initially checked, then we have to start the drag at the end.\n    if (this._previousChecked) {\n      percentage += 100;\n    }\n\n    return Math.max(0, Math.min(percentage, 100));\n  }\n\n  _onDragStart() {\n    if (!this.disabled && !this._dragging) {\n      const thumbEl = this._thumbEl.nativeElement;\n      this._thumbBarWidth = this._thumbBarEl.nativeElement.clientWidth - thumbEl.clientWidth;\n      thumbEl.classList.add('mat-dragging');\n\n      this._previousChecked = this.checked;\n      this._dragging = true;\n    }\n  }\n\n  _onDrag(event: HammerInput) {\n    if (this._dragging) {\n      const direction = this._dir && this._dir.value === 'rtl' ? -1 : 1;\n      this._dragPercentage = this._getDragPercentage(event.deltaX * direction);\n      // Calculate the moved distance based on the thumb bar width.\n      const dragX = (this._dragPercentage / 100) * this._thumbBarWidth * direction;\n      this._thumbEl.nativeElement.style.transform = `translate3d(${dragX}px, 0, 0)`;\n    }\n  }\n\n  _onDragEnd() {\n    if (this._dragging) {\n      const newCheckedValue = this._dragPercentage > 50;\n\n      if (newCheckedValue !== this.checked) {\n        this.dragChange.emit();\n        if (!this.defaults.disableDragValue) {\n          this.checked = newCheckedValue;\n          this._emitChangeEvent();\n        }\n      }\n\n      // The drag should be stopped outside of the current event handler, otherwise the\n      // click event will be fired before it and will revert the drag change.\n      this._ngZone.runOutsideAngular(() => setTimeout(() => {\n        if (this._dragging) {\n          this._dragging = false;\n          this._thumbEl.nativeElement.classList.remove('mat-dragging');\n\n          // Reset the transform because the component will take care\n          // of the thumb position after drag.\n          this._thumbEl.nativeElement.style.transform = '';\n        }\n      }));\n    }\n  }\n\n  /** Method being called whenever the label text changes. */\n  _onLabelTextChange() {\n    // Since the event of the `cdkObserveContent` directive runs outside of the zone, the\n    // slide-toggle component will be only marked for check, but no actual change detection runs\n    // automatically. Instead of going back into the zone in order to trigger a change detection\n    // which causes *all* components to be checked (if explicitly marked or not using OnPush),\n    // we only trigger an explicit change detection for the slide-toggle view and it's children.\n    this._changeDetectorRef.detectChanges();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {NgModule} from '@angular/core';\nimport {GestureConfig, MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {HAMMER_GESTURE_CONFIG} from '@angular/platform-browser';\nimport {MatSlideToggle} from './slide-toggle';\n\n\n@NgModule({\n  imports: [MatRippleModule, MatCommonModule, ObserversModule],\n  exports: [MatSlideToggle, MatCommonModule],\n  declarations: [MatSlideToggle],\n  providers: [\n    {provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig}\n  ],\n})\nexport class MatSlideToggleModule {}\n"]}