{"version":3,"file":"slider.es5.js","sources":["../../../src/lib/slider/slider.ts","../../../src/lib/slider/slider-module.ts"],"names":["tslib_1.__extends"],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {\n  DOWN_ARROW,\n  END,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n} from '@angular/cdk/keycodes';\nimport {\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanColorCtor,\n  CanDisable,\n  CanDisableCtor,\n  HammerInput,\n  HasTabIndex,\n  HasTabIndexCtor,\n  mixinColor,\n  mixinDisabled,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {Subscription} from 'rxjs';\n\n/**\n * Visually, a 30px separation between tick marks looks best. This is very subjective but it is\n * the default separation we chose.\n */\nconst MIN_AUTO_TICK_SEPARATION = 30;\n\n/** The thumb gap size for a disabled slider. */\nconst DISABLED_THUMB_GAP = 7;\n\n/** The thumb gap size for a non-active slider at its minimum value. */\nconst MIN_VALUE_NONACTIVE_THUMB_GAP = 7;\n\n/** The thumb gap size for an active slider at its minimum value. */\nconst MIN_VALUE_ACTIVE_THUMB_GAP = 10;\n\n/**\n * Provider Expression that allows mat-slider to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)] and [formControl].\n * @docs-private\n */\nexport const MAT_SLIDER_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSlider),\n  multi: true\n};\n\n/** A simple change event emitted by the MatSlider component. */\nexport class MatSliderChange {\n  /** The MatSlider that changed. */\n  source: MatSlider;\n\n  /** The new value of the source slider. */\n  value: number | null;\n}\n\n\n// Boilerplate for applying mixins to MatSlider.\n/** @docs-private */\nexport class MatSliderBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatSliderMixinBase:\n    HasTabIndexCtor &\n    CanColorCtor &\n    CanDisableCtor &\n    typeof MatSliderBase =\n        mixinTabIndex(mixinColor(mixinDisabled(MatSliderBase), 'accent'));\n\n/**\n * Allows users to select from a range of values by moving the slider thumb. It is similar in\n * behavior to the native `<input type=\"range\">` element.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-slider',\n  exportAs: 'matSlider',\n  providers: [MAT_SLIDER_VALUE_ACCESSOR],\n  host: {\n    '(focus)': '_onFocus()',\n    '(blur)': '_onBlur()',\n    '(mousedown)': '_onMousedown($event)',\n    '(keydown)': '_onKeydown($event)',\n    '(keyup)': '_onKeyup()',\n    '(mouseenter)': '_onMouseenter()',\n    '(slide)': '_onSlide($event)',\n    '(slideend)': '_onSlideEnd()',\n    '(slidestart)': '_onSlideStart($event)',\n    'class': 'mat-slider',\n    'role': 'slider',\n    '[tabIndex]': 'tabIndex',\n    '[attr.aria-disabled]': 'disabled',\n    '[attr.aria-valuemax]': 'max',\n    '[attr.aria-valuemin]': 'min',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.aria-orientation]': 'vertical ? \"vertical\" : \"horizontal\"',\n    '[class.mat-slider-disabled]': 'disabled',\n    '[class.mat-slider-has-ticks]': 'tickInterval',\n    '[class.mat-slider-horizontal]': '!vertical',\n    '[class.mat-slider-axis-inverted]': '_invertAxis',\n    '[class.mat-slider-sliding]': '_isSliding',\n    '[class.mat-slider-thumb-label-showing]': 'thumbLabel',\n    '[class.mat-slider-vertical]': 'vertical',\n    '[class.mat-slider-min-value]': '_isMinValue',\n    '[class.mat-slider-hide-last-tick]': 'disabled || _isMinValue && _thumbGap && _invertAxis',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n  templateUrl: 'slider.html',\n  styleUrls: ['slider.css'],\n  inputs: ['disabled', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatSlider extends _MatSliderMixinBase\n    implements ControlValueAccessor, OnDestroy, CanDisable, CanColor, OnInit, HasTabIndex {\n  /** Whether the slider is inverted. */\n  @Input()\n  get invert(): boolean { return this._invert; }\n  set invert(value: boolean) {\n    this._invert = coerceBooleanProperty(value);\n  }\n  private _invert = false;\n\n  /** The maximum value that the slider can have. */\n  @Input()\n  get max(): number { return this._max; }\n  set max(v: number) {\n    this._max = coerceNumberProperty(v, this._max);\n    this._percent = this._calculatePercentage(this._value);\n\n    // Since this also modifies the percentage, we need to let the change detection know.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _max: number = 100;\n\n  /** The minimum value that the slider can have. */\n  @Input()\n  get min(): number { return this._min; }\n  set min(v: number) {\n    this._min = coerceNumberProperty(v, this._min);\n\n    // If the value wasn't explicitly set by the user, set it to the min.\n    if (this._value === null) {\n      this.value = this._min;\n    }\n    this._percent = this._calculatePercentage(this._value);\n\n    // Since this also modifies the percentage, we need to let the change detection know.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _min: number = 0;\n\n  /** The values at which the thumb will snap. */\n  @Input()\n  get step(): number { return this._step; }\n  set step(v: number) {\n    this._step = coerceNumberProperty(v, this._step);\n\n    if (this._step % 1 !== 0) {\n      this._roundToDecimal = this._step.toString().split('.').pop()!.length;\n    }\n\n    // Since this could modify the label, we need to notify the change detection.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _step: number = 1;\n\n  /** Whether or not to show the thumb label. */\n  @Input()\n  get thumbLabel(): boolean { return this._thumbLabel; }\n  set thumbLabel(value: boolean) { this._thumbLabel = coerceBooleanProperty(value); }\n  private _thumbLabel: boolean = false;\n\n  /**\n   * How often to show ticks. Relative to the step so that a tick always appears on a step.\n   * Ex: Tick interval of 4 with a step of 3 will draw a tick every 4 steps (every 12 values).\n   */\n  @Input()\n  get tickInterval() { return this._tickInterval; }\n  set tickInterval(value: 'auto' | number) {\n    if (value === 'auto') {\n      this._tickInterval = 'auto';\n    } else if (typeof value === 'number' || typeof value === 'string') {\n      this._tickInterval = coerceNumberProperty(value, this._tickInterval as number);\n    } else {\n      this._tickInterval = 0;\n    }\n  }\n  private _tickInterval: 'auto' | number = 0;\n\n  /** Value of the slider. */\n  @Input()\n  get value(): number | null {\n    // If the value needs to be read and it is still uninitialized, initialize it to the min.\n    if (this._value === null) {\n      this.value = this._min;\n    }\n    return this._value;\n  }\n  set value(v: number | null) {\n    if (v !== this._value) {\n      let value = coerceNumberProperty(v);\n\n      // While incrementing by a decimal we can end up with values like 33.300000000000004.\n      // Truncate it to ensure that it matches the label and to make it easier to work with.\n      if (this._roundToDecimal) {\n        value = parseFloat(value.toFixed(this._roundToDecimal));\n      }\n\n      this._value = value;\n      this._percent = this._calculatePercentage(this._value);\n\n      // Since this also modifies the percentage, we need to let the change detection know.\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _value: number | null = null;\n\n  /**\n   * Function that will be used to format the value before it is displayed\n   * in the thumb label. Can be used to format very large number in order\n   * for them to fit into the slider thumb.\n   */\n  @Input() displayWith: (value: number | null) => string | number;\n\n  /** Whether the slider is vertical. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) {\n    this._vertical = coerceBooleanProperty(value);\n  }\n  private _vertical = false;\n\n  /** Event emitted when the slider value has changed. */\n  @Output() readonly change: EventEmitter<MatSliderChange> = new EventEmitter<MatSliderChange>();\n\n  /** Event emitted when the slider thumb moves. */\n  @Output() readonly input: EventEmitter<MatSliderChange> = new EventEmitter<MatSliderChange>();\n\n  /**\n   * Emits when the raw value of the slider changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output() readonly valueChange: EventEmitter<number | null> = new EventEmitter<number | null>();\n\n  /** The value to be used for display purposes. */\n  get displayValue(): string | number {\n    if (this.displayWith) {\n      return this.displayWith(this.value);\n    }\n\n    // Note that this could be improved further by rounding something like 0.999 to 1 or\n    // 0.899 to 0.9, however it is very performance sensitive, because it gets called on\n    // every change detection cycle.\n    if (this._roundToDecimal && this.value && this.value % 1 !== 0) {\n      return this.value.toFixed(this._roundToDecimal);\n    }\n\n    return this.value || 0;\n  }\n\n  /** set focus to the host element */\n  focus() {\n    this._focusHostElement();\n  }\n\n  /** blur the host element */\n  blur() {\n    this._blurHostElement();\n  }\n\n  /** onTouch function registered via registerOnTouch (ControlValueAccessor). */\n  onTouched: () => any = () => {};\n\n  /** The percentage of the slider that coincides with the value. */\n  get percent(): number { return this._clamp(this._percent); }\n  private _percent: number = 0;\n\n  /**\n   * Whether or not the thumb is sliding.\n   * Used to determine if there should be a transition for the thumb and fill track.\n   */\n  _isSliding: boolean = false;\n\n  /**\n   * Whether or not the slider is active (clicked or sliding).\n   * Used to shrink and grow the thumb as according to the Material Design spec.\n   */\n  _isActive: boolean = false;\n\n  /**\n   * Whether the axis of the slider is inverted.\n   * (i.e. whether moving the thumb in the positive x or y direction decreases the slider's value).\n   */\n  get _invertAxis() {\n    // Standard non-inverted mode for a vertical slider should be dragging the thumb from bottom to\n    // top. However from a y-axis standpoint this is inverted.\n    return this.vertical ? !this.invert : this.invert;\n  }\n\n\n  /** Whether the slider is at its minimum value. */\n  get _isMinValue() {\n    return this.percent === 0;\n  }\n\n  /**\n   * The amount of space to leave between the slider thumb and the track fill & track background\n   * elements.\n   */\n  get _thumbGap() {\n    if (this.disabled) {\n      return DISABLED_THUMB_GAP;\n    }\n    if (this._isMinValue && !this.thumbLabel) {\n      return this._isActive ? MIN_VALUE_ACTIVE_THUMB_GAP : MIN_VALUE_NONACTIVE_THUMB_GAP;\n    }\n    return 0;\n  }\n\n  /** CSS styles for the track background element. */\n  get _trackBackgroundStyles(): { [key: string]: string } {\n    const axis = this.vertical ? 'Y' : 'X';\n    const scale = this.vertical ? `1, ${1 - this.percent}, 1` : `${1 - this.percent}, 1, 1`;\n    const sign = this._shouldInvertMouseCoords() ? '-' : '';\n\n    return {\n      // scale3d avoids some rendering issues in Chrome. See #12071.\n      transform: `translate${axis}(${sign}${this._thumbGap}px) scale3d(${scale})`\n    };\n  }\n\n  /** CSS styles for the track fill element. */\n  get _trackFillStyles(): { [key: string]: string } {\n    const axis = this.vertical ? 'Y' : 'X';\n    const scale = this.vertical ? `1, ${this.percent}, 1` : `${this.percent}, 1, 1`;\n    const sign = this._shouldInvertMouseCoords() ? '' : '-';\n\n    return {\n      // scale3d avoids some rendering issues in Chrome. See #12071.\n      transform: `translate${axis}(${sign}${this._thumbGap}px) scale3d(${scale})`\n    };\n  }\n\n  /** CSS styles for the ticks container element. */\n  get _ticksContainerStyles(): { [key: string]: string } {\n    let axis = this.vertical ? 'Y' : 'X';\n    // For a horizontal slider in RTL languages we push the ticks container off the left edge\n    // instead of the right edge to avoid causing a horizontal scrollbar to appear.\n    let sign = !this.vertical && this._getDirection() == 'rtl' ? '' : '-';\n    let offset = this._tickIntervalPercent / 2 * 100;\n    return {\n      'transform': `translate${axis}(${sign}${offset}%)`\n    };\n  }\n\n  /** CSS styles for the ticks element. */\n  get _ticksStyles(): { [key: string]: string } {\n    let tickSize = this._tickIntervalPercent * 100;\n    let backgroundSize = this.vertical ? `2px ${tickSize}%` : `${tickSize}% 2px`;\n    let axis = this.vertical ? 'Y' : 'X';\n    // Depending on the direction we pushed the ticks container, push the ticks the opposite\n    // direction to re-center them but clip off the end edge. In RTL languages we need to flip the\n    // ticks 180 degrees so we're really cutting off the end edge abd not the start.\n    let sign = !this.vertical && this._getDirection() == 'rtl' ? '-' : '';\n    let rotate = !this.vertical && this._getDirection() == 'rtl' ? ' rotate(180deg)' : '';\n    let styles: { [key: string]: string } = {\n      'backgroundSize': backgroundSize,\n      // Without translateZ ticks sometimes jitter as the slider moves on Chrome & Firefox.\n      'transform': `translateZ(0) translate${axis}(${sign}${tickSize / 2}%)${rotate}`\n    };\n\n    if (this._isMinValue && this._thumbGap) {\n      let side = this.vertical ?\n          (this._invertAxis ? 'Bottom' : 'Top') :\n          (this._invertAxis ? 'Right' : 'Left');\n      styles[`padding${side}`] = `${this._thumbGap}px`;\n    }\n\n    return styles;\n  }\n\n  get _thumbContainerStyles(): { [key: string]: string } {\n    let axis = this.vertical ? 'Y' : 'X';\n    // For a horizontal slider in RTL languages we push the thumb container off the left edge\n    // instead of the right edge to avoid causing a horizontal scrollbar to appear.\n    let invertOffset =\n        (this._getDirection() == 'rtl' && !this.vertical) ? !this._invertAxis : this._invertAxis;\n    let offset = (invertOffset ? this.percent : 1 - this.percent) * 100;\n    return {\n      'transform': `translate${axis}(-${offset}%)`\n    };\n  }\n\n  /** The size of a tick interval as a percentage of the size of the track. */\n  private _tickIntervalPercent: number = 0;\n\n  /** The dimensions of the slider. */\n  private _sliderDimensions: ClientRect | null = null;\n\n  private _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /** Decimal places to round to, based on the step amount. */\n  private _roundToDecimal: number;\n\n  /** Subscription to the Directionality change EventEmitter. */\n  private _dirChangeSubscription = Subscription.EMPTY;\n\n  /** The value of the slider when the slide start event fires. */\n  private _valueOnSlideStart: number | null;\n\n  /** Reference to the inner slider wrapper element. */\n  @ViewChild('sliderWrapper') private _sliderWrapper: ElementRef;\n\n  /**\n   * Whether mouse events should be converted to a slider position by calculating their distance\n   * from the right or bottom edge of the slider as opposed to the top or left.\n   */\n  private _shouldInvertMouseCoords() {\n    return (this._getDirection() == 'rtl' && !this.vertical) ? !this._invertAxis : this._invertAxis;\n  }\n\n  /** The language direction for this slider element. */\n  private _getDirection() {\n    return (this._dir && this._dir.value == 'rtl') ? 'rtl' : 'ltr';\n  }\n\n  constructor(elementRef: ElementRef,\n              private _focusMonitor: FocusMonitor,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() private _dir: Directionality,\n              @Attribute('tabindex') tabIndex: string,\n              // @breaking-change 8.0.0 `_animationMode` parameter to be made required.\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(elementRef);\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngOnInit() {\n    this._focusMonitor\n        .monitor(this._elementRef, true)\n        .subscribe((origin: FocusOrigin) => {\n          this._isActive = !!origin && origin !== 'keyboard';\n          this._changeDetectorRef.detectChanges();\n        });\n    if (this._dir) {\n      this._dirChangeSubscription = this._dir.change.subscribe(() => {\n        this._changeDetectorRef.markForCheck();\n      });\n    }\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n    this._dirChangeSubscription.unsubscribe();\n  }\n\n  _onMouseenter() {\n    if (this.disabled) {\n      return;\n    }\n\n    // We save the dimensions of the slider here so we can use them to update the spacing of the\n    // ticks and determine where on the slider click and slide events happen.\n    this._sliderDimensions = this._getSliderDimensions();\n    this._updateTickIntervalPercent();\n  }\n\n  _onMousedown(event: MouseEvent) {\n    if (this.disabled) {\n      return;\n    }\n\n    const oldValue = this.value;\n    this._isSliding = false;\n    this._focusHostElement();\n    this._updateValueFromPosition({x: event.clientX, y: event.clientY});\n\n    // Emit a change and input event if the value changed.\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n      this._emitChangeEvent();\n    }\n  }\n\n  _onSlide(event: HammerInput) {\n    if (this.disabled) {\n      return;\n    }\n\n    // The slide start event sometimes fails to fire on iOS, so if we're not already in the sliding\n    // state, call the slide start handler manually.\n    if (!this._isSliding) {\n      this._onSlideStart(null);\n    }\n\n    // Prevent the slide from selecting anything else.\n    event.preventDefault();\n\n    let oldValue = this.value;\n    this._updateValueFromPosition({x: event.center.x, y: event.center.y});\n\n    // Native range elements always emit `input` events when the value changed while sliding.\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n    }\n  }\n\n  _onSlideStart(event: HammerInput | null) {\n    if (this.disabled || this._isSliding) {\n      return;\n    }\n\n    // Simulate mouseenter in case this is a mobile device.\n    this._onMouseenter();\n\n    this._isSliding = true;\n    this._focusHostElement();\n    this._valueOnSlideStart = this.value;\n\n    if (event) {\n      this._updateValueFromPosition({x: event.center.x, y: event.center.y});\n      event.preventDefault();\n    }\n  }\n\n  _onSlideEnd() {\n    this._isSliding = false;\n\n    if (this._valueOnSlideStart != this.value && !this.disabled) {\n      this._emitChangeEvent();\n    }\n    this._valueOnSlideStart = null;\n  }\n\n  _onFocus() {\n    // We save the dimensions of the slider here so we can use them to update the spacing of the\n    // ticks and determine where on the slider click and slide events happen.\n    this._sliderDimensions = this._getSliderDimensions();\n    this._updateTickIntervalPercent();\n  }\n\n  _onBlur() {\n    this.onTouched();\n  }\n\n  _onKeydown(event: KeyboardEvent) {\n    if (this.disabled) { return; }\n\n    let oldValue = this.value;\n\n    switch (event.keyCode) {\n      case PAGE_UP:\n        this._increment(10);\n        break;\n      case PAGE_DOWN:\n        this._increment(-10);\n        break;\n      case END:\n        this.value = this.max;\n        break;\n      case HOME:\n        this.value = this.min;\n        break;\n      case LEFT_ARROW:\n        // NOTE: For a sighted user it would make more sense that when they press an arrow key on an\n        // inverted slider the thumb moves in that direction. However for a blind user, nothing\n        // about the slider indicates that it is inverted. They will expect left to be decrement,\n        // regardless of how it appears on the screen. For speakers ofRTL languages, they probably\n        // expect left to mean increment. Therefore we flip the meaning of the side arrow keys for\n        // RTL. For inverted sliders we prefer a good a11y experience to having it \"look right\" for\n        // sighted users, therefore we do not swap the meaning.\n        this._increment(this._getDirection() == 'rtl' ? 1 : -1);\n        break;\n      case UP_ARROW:\n        this._increment(1);\n        break;\n      case RIGHT_ARROW:\n        // See comment on LEFT_ARROW about the conditions under which we flip the meaning.\n        this._increment(this._getDirection() == 'rtl' ? -1 : 1);\n        break;\n      case DOWN_ARROW:\n        this._increment(-1);\n        break;\n      default:\n        // Return if the key is not one that we explicitly handle to avoid calling preventDefault on\n        // it.\n        return;\n    }\n\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n      this._emitChangeEvent();\n    }\n\n    this._isSliding = true;\n    event.preventDefault();\n  }\n\n  _onKeyup() {\n    this._isSliding = false;\n  }\n\n  /** Increments the slider by the given number of steps (negative number decrements). */\n  private _increment(numSteps: number) {\n    this.value = this._clamp((this.value || 0) + this.step * numSteps, this.min, this.max);\n  }\n\n  /** Calculate the new value from the new physical location. The value will always be snapped. */\n  private _updateValueFromPosition(pos: {x: number, y: number}) {\n    if (!this._sliderDimensions) {\n      return;\n    }\n\n    let offset = this.vertical ? this._sliderDimensions.top : this._sliderDimensions.left;\n    let size = this.vertical ? this._sliderDimensions.height : this._sliderDimensions.width;\n    let posComponent = this.vertical ? pos.y : pos.x;\n\n    // The exact value is calculated from the event and used to find the closest snap value.\n    let percent = this._clamp((posComponent - offset) / size);\n\n    if (this._shouldInvertMouseCoords()) {\n      percent = 1 - percent;\n    }\n\n    // Since the steps may not divide cleanly into the max value, if the user\n    // slid to 0 or 100 percent, we jump to the min/max value. This approach\n    // is slightly more intuitive than using `Math.ceil` below, because it\n    // follows the user's pointer closer.\n    if (percent === 0) {\n      this.value = this.min;\n    } else if (percent === 1) {\n      this.value = this.max;\n    } else {\n      const exactValue = this._calculateValue(percent);\n\n      // This calculation finds the closest step by finding the closest\n      // whole number divisible by the step relative to the min.\n      const closestValue = Math.round((exactValue - this.min) / this.step) * this.step + this.min;\n\n      // The value needs to snap to the min and max.\n      this.value = this._clamp(closestValue, this.min, this.max);\n    }\n  }\n\n  /** Emits a change event if the current value is different from the last emitted value. */\n  private _emitChangeEvent() {\n    this._controlValueAccessorChangeFn(this.value);\n    this.valueChange.emit(this.value);\n    this.change.emit(this._createChangeEvent());\n  }\n\n  /** Emits an input event when the current value is different from the last emitted value. */\n  private _emitInputEvent() {\n    this.input.emit(this._createChangeEvent());\n  }\n\n  /** Updates the amount of space between ticks as a percentage of the width of the slider. */\n  private _updateTickIntervalPercent() {\n    if (!this.tickInterval || !this._sliderDimensions) {\n      return;\n    }\n\n    if (this.tickInterval == 'auto') {\n      let trackSize = this.vertical ? this._sliderDimensions.height : this._sliderDimensions.width;\n      let pixelsPerStep = trackSize * this.step / (this.max - this.min);\n      let stepsPerTick = Math.ceil(MIN_AUTO_TICK_SEPARATION / pixelsPerStep);\n      let pixelsPerTick = stepsPerTick * this.step;\n      this._tickIntervalPercent = pixelsPerTick / trackSize;\n    } else {\n      this._tickIntervalPercent = this.tickInterval * this.step / (this.max - this.min);\n    }\n  }\n\n  /** Creates a slider change object from the specified value. */\n  private _createChangeEvent(value = this.value): MatSliderChange {\n    let event = new MatSliderChange();\n\n    event.source = this;\n    event.value = value;\n\n    return event;\n  }\n\n  /** Calculates the percentage of the slider that a value is. */\n  private _calculatePercentage(value: number | null) {\n    return ((value || 0) - this.min) / (this.max - this.min);\n  }\n\n  /** Calculates the value a percentage of the slider corresponds to. */\n  private _calculateValue(percentage: number) {\n    return this.min + percentage * (this.max - this.min);\n  }\n\n  /** Return a number between two numbers. */\n  private _clamp(value: number, min = 0, max = 1) {\n    return Math.max(min, Math.min(value, max));\n  }\n\n  /**\n   * Get the bounding client rect of the slider track element.\n   * The track is used rather than the native element to ignore the extra space that the thumb can\n   * take up.\n   */\n  private _getSliderDimensions() {\n    return this._sliderWrapper ? this._sliderWrapper.nativeElement.getBoundingClientRect() : null;\n  }\n\n  /**\n   * Focuses the native element.\n   * Currently only used to allow a blur event to fire but will be used with keyboard input later.\n   */\n  private _focusHostElement() {\n    this._elementRef.nativeElement.focus();\n  }\n\n  /** Blurs the native element. */\n  private _blurHostElement() {\n    this._elementRef.nativeElement.blur();\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value\n   */\n  writeValue(value: any) {\n    this.value = value;\n  }\n\n  /**\n   * Registers a callback to be triggered when the value has changed.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  /**\n   * Registers a callback to be triggered when the component is touched.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n\n  /**\n   * Sets whether the component should be disabled.\n   * Implemented as part of ControlValueAccessor.\n   * @param isDisabled\n   */\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {GestureConfig, MatCommonModule} from '@angular/material/core';\nimport {HAMMER_GESTURE_CONFIG} from '@angular/platform-browser';\nimport {MatSlider} from './slider';\n\n\n@NgModule({\n  imports: [CommonModule, MatCommonModule],\n  exports: [MatSlider, MatCommonModule],\n  declarations: [MatSlider],\n  providers: [{provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig}]\n})\nexport class MatSliderModule {}\n"]}