{"version":3,"file":"progress-spinner.es5.js","sources":["../../../src/lib/progress-spinner/progress-spinner.ts","../../../src/lib/progress-spinner/progress-spinner-module.ts"],"names":["tslib_1.__extends"],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\nimport {Platform} from '@angular/cdk/platform';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  Optional,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanColor, CanColorCtor, mixinColor} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\n/** Possible mode for a progress spinner. */\nexport type ProgressSpinnerMode = 'determinate' | 'indeterminate';\n\n/**\n * Base reference size of the spinner.\n * @docs-private\n */\nconst BASE_SIZE = 100;\n\n/**\n * Base reference stroke width of the spinner.\n * @docs-private\n */\nconst BASE_STROKE_WIDTH = 10;\n\n// Boilerplate for applying mixins to MatProgressSpinner.\n/** @docs-private */\nexport class MatProgressSpinnerBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatProgressSpinnerMixinBase: CanColorCtor & typeof MatProgressSpinnerBase =\n    mixinColor(MatProgressSpinnerBase, 'primary');\n\n/** Default `mat-progress-spinner` options that can be overridden. */\nexport interface MatProgressSpinnerDefaultOptions {\n  /** Diameter of the spinner. */\n  diameter?: number;\n  /** Width of the spinner's stroke. */\n  strokeWidth?: number;\n  /**\n   * Whether the animations should be force to be enabled, ignoring if the current environment is\n   * using NoopAnimationsModule.\n   */\n  _forceAnimations?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-progress-spinner`. */\nexport const MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS =\n    new InjectionToken<MatProgressSpinnerDefaultOptions>('mat-progress-spinner-default-options', {\n      providedIn: 'root',\n      factory: MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY(): MatProgressSpinnerDefaultOptions {\n  return {diameter: BASE_SIZE};\n}\n\n// .0001 percentage difference is necessary in order to avoid unwanted animation frames\n// for example because the animation duration is 4 seconds, .1% accounts to 4ms\n// which are enough to see the flicker described in\n// https://github.com/angular/material2/issues/8984\nconst INDETERMINATE_ANIMATION_TEMPLATE = `\n @keyframes mat-progress-spinner-stroke-rotate-DIAMETER {\n    0%      { stroke-dashoffset: START_VALUE;  transform: rotate(0); }\n    12.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(0); }\n    12.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(72.5deg); }\n    25%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(72.5deg); }\n\n    25.0001%   { stroke-dashoffset: START_VALUE;  transform: rotate(270deg); }\n    37.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(270deg); }\n    37.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(161.5deg); }\n    50%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(161.5deg); }\n\n    50.0001%  { stroke-dashoffset: START_VALUE;  transform: rotate(180deg); }\n    62.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(180deg); }\n    62.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(251.5deg); }\n    75%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(251.5deg); }\n\n    75.0001%  { stroke-dashoffset: START_VALUE;  transform: rotate(90deg); }\n    87.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(90deg); }\n    87.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(341.5deg); }\n    100%    { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(341.5deg); }\n  }\n`;\n\n/**\n * `<mat-progress-spinner>` component.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-progress-spinner',\n  exportAs: 'matProgressSpinner',\n  host: {\n    'role': 'progressbar',\n    'class': 'mat-progress-spinner',\n    '[class._mat-animation-noopable]': `_noopAnimations`,\n    '[style.width.px]': 'diameter',\n    '[style.height.px]': 'diameter',\n    '[attr.aria-valuemin]': 'mode === \"determinate\" ? 0 : null',\n    '[attr.aria-valuemax]': 'mode === \"determinate\" ? 100 : null',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.mode]': 'mode',\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-spinner.html',\n  styleUrls: ['progress-spinner.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatProgressSpinner extends _MatProgressSpinnerMixinBase implements CanColor {\n\n  private _value = 0;\n  private _strokeWidth: number;\n  private _fallbackAnimation = false;\n\n  /** Tracks diameters of existing instances to de-dupe generated styles (default d = 100) */\n  private static diameters = new Set<number>([BASE_SIZE]);\n\n  /**\n   * Used for storing all of the generated keyframe animations.\n   * @dynamic\n   */\n  private static styleTag: HTMLStyleElement|null = null;\n\n  /** Whether the _mat-animation-noopable class should be applied, disabling animations.  */\n  _noopAnimations: boolean = this.animationMode === 'NoopAnimations' && (\n      !!this.defaults && !this.defaults._forceAnimations);\n\n  /** The diameter of the progress spinner (will set width and height of svg). */\n  @Input()\n  get diameter(): number { return this._diameter; }\n  set diameter(size: number) {\n    this._diameter = coerceNumberProperty(size);\n\n    if (!this._fallbackAnimation && !MatProgressSpinner.diameters.has(this._diameter)) {\n      this._attachStyleNode();\n    }\n  }\n  private _diameter = BASE_SIZE;\n\n  /** Stroke width of the progress spinner. */\n  @Input()\n  get strokeWidth(): number {\n    return this._strokeWidth || this.diameter / 10;\n  }\n  set strokeWidth(value: number) {\n    this._strokeWidth = coerceNumberProperty(value);\n  }\n\n  /** Mode of the progress circle */\n  @Input() mode: ProgressSpinnerMode = 'determinate';\n\n  /** Value of the progress circle. */\n  @Input()\n  get value(): number {\n    return this.mode === 'determinate' ? this._value : 0;\n  }\n  set value(newValue: number) {\n    this._value = Math.max(0, Math.min(100, coerceNumberProperty(newValue)));\n  }\n\n  constructor(public _elementRef: ElementRef,\n              platform: Platform,\n              @Optional() @Inject(DOCUMENT) private _document: any,\n              // @breaking-change 8.0.0 animationMode and defaults parameters to be made required.\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) private animationMode?: string,\n              @Inject(MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS)\n                  private defaults?: MatProgressSpinnerDefaultOptions) {\n\n    super(_elementRef);\n    this._fallbackAnimation = platform.EDGE || platform.TRIDENT;\n\n    if (defaults) {\n      if (defaults.diameter) {\n        this.diameter = defaults.diameter;\n      }\n\n      if (defaults.strokeWidth) {\n        this.strokeWidth = defaults.strokeWidth;\n      }\n    }\n\n    // On IE and Edge, we can't animate the `stroke-dashoffset`\n    // reliably so we fall back to a non-spec animation.\n    const animationClass =\n      `mat-progress-spinner-indeterminate${this._fallbackAnimation ? '-fallback' : ''}-animation`;\n\n    _elementRef.nativeElement.classList.add(animationClass);\n  }\n\n  /** The radius of the spinner, adjusted for stroke width. */\n  get _circleRadius() {\n    return (this.diameter - BASE_STROKE_WIDTH) / 2;\n  }\n\n  /** The view box of the spinner's svg element. */\n  get _viewBox() {\n    const viewBox = this._circleRadius * 2 + this.strokeWidth;\n    return `0 0 ${viewBox} ${viewBox}`;\n  }\n\n  /** The stroke circumference of the svg circle. */\n  get _strokeCircumference(): number {\n    return 2 * Math.PI * this._circleRadius;\n  }\n\n  /** The dash offset of the svg circle. */\n  get _strokeDashOffset() {\n    if (this.mode === 'determinate') {\n      return this._strokeCircumference * (100 - this._value) / 100;\n    }\n\n    // In fallback mode set the circle to 80% and rotate it with CSS.\n    if (this._fallbackAnimation && this.mode === 'indeterminate') {\n      return this._strokeCircumference * 0.2;\n    }\n\n    return null;\n  }\n\n  /** Stroke width of the circle in percent. */\n  get _circleStrokeWidth() {\n    return this.strokeWidth / this.diameter * 100;\n  }\n\n  /** Dynamically generates a style tag containing the correct animation for this diameter. */\n  private _attachStyleNode(): void {\n    let styleTag = MatProgressSpinner.styleTag;\n\n    if (!styleTag) {\n      styleTag = this._document.createElement('style');\n      this._document.head.appendChild(styleTag);\n      MatProgressSpinner.styleTag = styleTag;\n    }\n\n    if (styleTag && styleTag.sheet) {\n      (styleTag.sheet as CSSStyleSheet).insertRule(this._getAnimationText(), 0);\n    }\n\n    MatProgressSpinner.diameters.add(this.diameter);\n  }\n\n  /** Generates animation styles adjusted for the spinner's diameter. */\n  private _getAnimationText(): string {\n    return INDETERMINATE_ANIMATION_TEMPLATE\n        // Animation should begin at 5% and end at 80%\n        .replace(/START_VALUE/g, `${0.95 * this._strokeCircumference}`)\n        .replace(/END_VALUE/g, `${0.2 * this._strokeCircumference}`)\n        .replace(/DIAMETER/g, `${this.diameter}`);\n  }\n}\n\n\n/**\n * `<mat-spinner>` component.\n *\n * This is a component definition to be used as a convenience reference to create an\n * indeterminate `<mat-progress-spinner>` instance.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-spinner',\n  host: {\n    'role': 'progressbar',\n    'mode': 'indeterminate',\n    'class': 'mat-spinner mat-progress-spinner',\n    '[class._mat-animation-noopable]': `_noopAnimations`,\n    '[style.width.px]': 'diameter',\n    '[style.height.px]': 'diameter',\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-spinner.html',\n  styleUrls: ['progress-spinner.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSpinner extends MatProgressSpinner {\n  constructor(elementRef: ElementRef, platform: Platform,\n              @Optional() @Inject(DOCUMENT) document: any,\n              // @breaking-change 8.0.0 animationMode and defaults parameters to be made required.\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode?: string,\n              @Inject(MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS)\n                  defaults?: MatProgressSpinnerDefaultOptions) {\n    super(elementRef, platform, document, animationMode, defaults);\n    this.mode = 'indeterminate';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatProgressSpinner, MatSpinner} from './progress-spinner';\n\n\n@NgModule({\n  imports: [MatCommonModule, CommonModule],\n  exports: [\n    MatProgressSpinner,\n    MatSpinner,\n    MatCommonModule\n  ],\n  declarations: [\n    MatProgressSpinner,\n    MatSpinner\n  ],\n})\nclass MatProgressSpinnerModule {}\n\nexport {MatProgressSpinnerModule};\n"]}