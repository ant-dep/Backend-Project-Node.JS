{"version":3,"file":"button.es5.js","sources":["../../../src/lib/button/button.ts","../../../src/lib/button/button-module.ts"],"names":["tslib_1.__extends"],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  OnDestroy,\n  ViewChild,\n  ViewEncapsulation,\n  Optional,\n  Inject,\n  Input,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  CanColorCtor,\n  CanDisableCtor,\n  CanDisableRippleCtor,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n/** Default color palette for round buttons (mat-fab and mat-mini-fab) */\nconst DEFAULT_ROUND_BUTTON_COLOR = 'accent';\n\n/**\n * List of classes to add to MatButton instances based on host attributes to\n * style as different variants.\n */\nconst BUTTON_HOST_ATTRIBUTES = [\n  'mat-button',\n  'mat-flat-button',\n  'mat-icon-button',\n  'mat-raised-button',\n  'mat-stroked-button',\n  'mat-mini-fab',\n  'mat-fab',\n];\n\n// Boilerplate for applying mixins to MatButton.\n/** @docs-private */\nexport class MatButtonBase {\n  constructor(public _elementRef: ElementRef) {}\n}\n\nexport const _MatButtonMixinBase:\n    CanDisableRippleCtor & CanDisableCtor & CanColorCtor & typeof MatButtonBase =\n        mixinColor(mixinDisabled(mixinDisableRipple(MatButtonBase)));\n\n/**\n * Material design button.\n */\n@Component({\n  moduleId: module.id,\n  selector: `button[mat-button], button[mat-raised-button], button[mat-icon-button],\n             button[mat-fab], button[mat-mini-fab], button[mat-stroked-button],\n             button[mat-flat-button]`,\n  exportAs: 'matButton',\n  host: {\n    '[disabled]': 'disabled || null',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n  templateUrl: 'button.html',\n  styleUrls: ['button.css'],\n  inputs: ['disabled', 'disableRipple', 'color'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatButton extends _MatButtonMixinBase\n    implements OnDestroy, CanDisable, CanColor, CanDisableRipple {\n\n  /** Whether the button is round. */\n  readonly isRoundButton: boolean = this._hasHostAttributes('mat-fab', 'mat-mini-fab');\n\n  /** Whether the button is icon button. */\n  readonly isIconButton: boolean = this._hasHostAttributes('mat-icon-button');\n\n  /** Reference to the MatRipple instance of the button. */\n  @ViewChild(MatRipple) ripple: MatRipple;\n\n  constructor(elementRef: ElementRef,\n              /**\n               * @deprecated Platform checks for SSR are no longer needed\n               * @breaking-change 8.0.0\n               */\n              // tslint:disable-next-line:no-unused-variable\n              private _platform: Platform,\n              private _focusMonitor: FocusMonitor,\n              // @breaking-change 8.0.0 `_animationMode` parameter to be made required.\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(elementRef);\n\n    // For each of the variant selectors that is prevent in the button's host\n    // attributes, add the correct corresponding class.\n    for (const attr of BUTTON_HOST_ATTRIBUTES) {\n      if (this._hasHostAttributes(attr)) {\n        (elementRef.nativeElement as HTMLElement).classList.add(attr);\n      }\n    }\n\n    this._focusMonitor.monitor(this._elementRef, true);\n\n    if (this.isRoundButton) {\n      this.color = DEFAULT_ROUND_BUTTON_COLOR;\n    }\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n\n  /** Focuses the button. */\n  focus(): void {\n    this._getHostElement().focus();\n  }\n\n  _getHostElement() {\n    return this._elementRef.nativeElement;\n  }\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  /** Gets whether the button has one of the given attributes. */\n  _hasHostAttributes(...attributes: string[]) {\n    return attributes.some(attribute => this._getHostElement().hasAttribute(attribute));\n  }\n}\n\n/**\n * Raised Material design button.\n */\n@Component({\n  moduleId: module.id,\n  selector: `a[mat-button], a[mat-raised-button], a[mat-icon-button], a[mat-fab],\n             a[mat-mini-fab], a[mat-stroked-button], a[mat-flat-button]`,\n  exportAs: 'matButton, matAnchor',\n  host: {\n    // Note that we ignore the user-specified tabindex when it's disabled for\n    // consistency with the `mat-button` applied on native buttons where even\n    // though they have an index, they're not tabbable.\n    '[attr.tabindex]': 'disabled ? -1 : (tabIndex || 0)',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '(click)': '_haltDisabledEvents($event)',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n  inputs: ['disabled', 'disableRipple', 'color'],\n  templateUrl: 'button.html',\n  styleUrls: ['button.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatAnchor extends MatButton {\n  /** Tabindex of the button. */\n  @Input() tabIndex: number;\n\n  constructor(\n    platform: Platform,\n    focusMonitor: FocusMonitor,\n    elementRef: ElementRef,\n    // @breaking-change 8.0.0 `animationMode` parameter to be made required.\n    @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode?: string) {\n    super(elementRef, platform, focusMonitor, animationMode);\n  }\n\n  _haltDisabledEvents(event: Event) {\n    // A disabled button shouldn't apply any actions\n    if (this.disabled) {\n      event.preventDefault();\n      event.stopImmediatePropagation();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatAnchor, MatButton} from './button';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatRippleModule,\n    MatCommonModule,\n  ],\n  exports: [\n    MatButton,\n    MatAnchor,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatButton,\n    MatAnchor,\n  ],\n})\nexport class MatButtonModule {}\n"]}