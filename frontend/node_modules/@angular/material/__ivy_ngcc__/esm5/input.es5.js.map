{"version":3,"file":"input.es5.js","sources":["../../../src/lib/input/autosize.ts","../../../src/lib/input/input-errors.ts","../../../src/lib/input/input-value-accessor.ts","../../../src/lib/input/input.ts","../../../src/lib/input/input-module.ts"],"names":["tslib_1.__extends"],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkTextareaAutosize} from '@angular/cdk/text-field';\nimport {Directive, Input} from '@angular/core';\n\n// TODO(devversion): Workaround for https://github.com/angular/material2/issues/12760\nexport const _CdkTextareaAutosize = CdkTextareaAutosize;\n\n/**\n * Directive to automatically resize a textarea to fit its content.\n * @deprecated Use `cdkTextareaAutosize` from `@angular/cdk/text-field` instead.\n * @breaking-change 8.0.0\n */\n@Directive({\n  selector: 'textarea[mat-autosize], textarea[matTextareaAutosize]',\n  exportAs: 'matTextareaAutosize',\n  inputs: ['cdkAutosizeMinRows', 'cdkAutosizeMaxRows'],\n  host: {\n    'class': 'cdk-textarea-autosize mat-autosize',\n    // Textarea elements that have the directive applied should have a single row by default.\n    // Browsers normally show two rows by default and therefore this limits the minRows binding.\n    'rows': '1',\n    '(input)': '_noopInputHandler()',\n  },\n})\nexport class MatTextareaAutosize extends _CdkTextareaAutosize {\n  @Input()\n  get matAutosizeMinRows(): number { return this.minRows; }\n  set matAutosizeMinRows(value: number) { this.minRows = value; }\n\n  @Input()\n  get matAutosizeMaxRows(): number { return this.maxRows; }\n  set matAutosizeMaxRows(value: number) { this.maxRows = value; }\n\n  @Input('mat-autosize')\n  get matAutosize(): boolean { return this.enabled; }\n  set matAutosize(value: boolean) { this.enabled = value; }\n\n  @Input()\n  get matTextareaAutosize(): boolean { return this.enabled; }\n  set matTextareaAutosize(value: boolean) { this.enabled = value; }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getMatInputUnsupportedTypeError(type: string): Error {\n  return Error(`Input type \"${type}\" isn't supported by matInput.`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n\n/**\n * This token is used to inject the object whose value should be set into `MatInput`. If none is\n * provided, the native `HTMLInputElement` is used. Directives like `MatDatepickerInput` can provide\n * themselves for this token, in order to make `MatInput` delegate the getting and setting of the\n * value to them.\n */\nexport const MAT_INPUT_VALUE_ACCESSOR =\n    new InjectionToken<{value: any}>('MAT_INPUT_VALUE_ACCESSOR');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {getSupportedInputTypes, Platform} from '@angular/cdk/platform';\nimport {AutofillMonitor} from '@angular/cdk/text-field';\nimport {\n  Directive,\n  DoCheck,\n  ElementRef,\n  Inject,\n  Input,\n  NgZone,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Self,\n} from '@angular/core';\nimport {FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {\n  CanUpdateErrorState,\n  CanUpdateErrorStateCtor,\n  ErrorStateMatcher,\n  mixinErrorState,\n} from '@angular/material/core';\nimport {MatFormFieldControl} from '@angular/material/form-field';\nimport {Subject} from 'rxjs';\nimport {getMatInputUnsupportedTypeError} from './input-errors';\nimport {MAT_INPUT_VALUE_ACCESSOR} from './input-value-accessor';\n\n\n// Invalid input type. Using one of these will throw an MatInputUnsupportedTypeError.\nconst MAT_INPUT_INVALID_TYPES = [\n  'button',\n  'checkbox',\n  'file',\n  'hidden',\n  'image',\n  'radio',\n  'range',\n  'reset',\n  'submit'\n];\n\nlet nextUniqueId = 0;\n\n// Boilerplate for applying mixins to MatInput.\n/** @docs-private */\nexport class MatInputBase {\n  constructor(public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              /** @docs-private */\n              public ngControl: NgControl) {}\n}\nexport const _MatInputMixinBase: CanUpdateErrorStateCtor & typeof MatInputBase =\n    mixinErrorState(MatInputBase);\n\n/** Directive that allows a native input to work inside a `MatFormField`. */\n@Directive({\n  selector: `input[matInput], textarea[matInput], select[matNativeControl],\n      input[matNativeControl], textarea[matNativeControl]`,\n  exportAs: 'matInput',\n  host: {\n    /**\n     * @breaking-change 8.0.0 remove .mat-form-field-autofill-control in favor of AutofillMonitor.\n     */\n    'class': 'mat-input-element mat-form-field-autofill-control',\n    '[class.mat-input-server]': '_isServer',\n    // Native input properties that are overwritten by Angular inputs need to be synced with\n    // the native input element. Otherwise property bindings for those don't work.\n    '[attr.id]': 'id',\n    '[attr.placeholder]': 'placeholder',\n    '[disabled]': 'disabled',\n    '[required]': 'required',\n    '[attr.readonly]': 'readonly && !_isNativeSelect || null',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-required]': 'required.toString()',\n    '(blur)': '_focusChanged(false)',\n    '(focus)': '_focusChanged(true)',\n    '(input)': '_onInput()',\n  },\n  providers: [{provide: MatFormFieldControl, useExisting: MatInput}],\n})\nexport class MatInput extends _MatInputMixinBase implements MatFormFieldControl<any>, OnChanges,\n    OnDestroy, OnInit, DoCheck, CanUpdateErrorState {\n  protected _uid = `mat-input-${nextUniqueId++}`;\n  protected _previousNativeValue: any;\n  private _inputValueAccessor: {value: any};\n  /** The aria-describedby attribute on the input for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** Whether the component is being rendered on the server. */\n  _isServer = false;\n\n  /** Whether the component is a native html select. */\n  _isNativeSelect = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  focused: boolean = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  readonly stateChanges: Subject<void> = new Subject<void>();\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  controlType: string = 'mat-input';\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  autofilled = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get disabled(): boolean {\n    if (this.ngControl && this.ngControl.disabled !== null) {\n      return this.ngControl.disabled;\n    }\n    return this._disabled;\n  }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // Browsers may not fire the blur event if the input is disabled too quickly.\n    // Reset from here to ensure that the element doesn't become stuck.\n    if (this.focused) {\n      this.focused = false;\n      this.stateChanges.next();\n    }\n  }\n  protected _disabled = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get id(): string { return this._id; }\n  set id(value: string) { this._id = value || this._uid; }\n  protected _id: string;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input() placeholder: string;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) { this._required = coerceBooleanProperty(value); }\n  protected _required = false;\n\n  /** Input type of the element. */\n  @Input()\n  get type(): string { return this._type; }\n  set type(value: string) {\n    this._type = value || 'text';\n    this._validateType();\n\n    // When using Angular inputs, developers are no longer able to set the properties on the native\n    // input element. To ensure that bindings for `type` work, we need to sync the setter\n    // with the native property. Textarea elements don't support the type property or attribute.\n    if (!this._isTextarea() && getSupportedInputTypes().has(this._type)) {\n      (this._elementRef.nativeElement as HTMLInputElement).type = this._type;\n    }\n  }\n  protected _type = 'text';\n\n  /** An object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get value(): string { return this._inputValueAccessor.value; }\n  set value(value: string) {\n    if (value !== this.value) {\n      this._inputValueAccessor.value = value;\n      this.stateChanges.next();\n    }\n  }\n\n  /** Whether the element is readonly. */\n  @Input()\n  get readonly(): boolean { return this._readonly; }\n  set readonly(value: boolean) { this._readonly = coerceBooleanProperty(value); }\n  private _readonly = false;\n\n  protected _neverEmptyInputTypes = [\n    'date',\n    'datetime',\n    'datetime-local',\n    'month',\n    'time',\n    'week'\n  ].filter(t => getSupportedInputTypes().has(t));\n\n  constructor(\n    protected _elementRef: ElementRef<HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement>,\n    protected _platform: Platform,\n    /** @docs-private */\n    @Optional() @Self() public ngControl: NgControl,\n    @Optional() _parentForm: NgForm,\n    @Optional() _parentFormGroup: FormGroupDirective,\n    _defaultErrorStateMatcher: ErrorStateMatcher,\n    @Optional() @Self() @Inject(MAT_INPUT_VALUE_ACCESSOR) inputValueAccessor: any,\n    private _autofillMonitor: AutofillMonitor,\n    ngZone: NgZone) {\n\n    super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n\n    const element = this._elementRef.nativeElement;\n\n    // If no input value accessor was explicitly specified, use the element as the input value\n    // accessor.\n    this._inputValueAccessor = inputValueAccessor || element;\n\n    this._previousNativeValue = this.value;\n\n    // Force setter to be called in case id was not specified.\n    this.id = this.id;\n\n    // On some versions of iOS the caret gets stuck in the wrong place when holding down the delete\n    // key. In order to get around this we need to \"jiggle\" the caret loose. Since this bug only\n    // exists on iOS, we only bother to install the listener on iOS.\n    if (_platform.IOS) {\n      ngZone.runOutsideAngular(() => {\n        _elementRef.nativeElement.addEventListener('keyup', (event: Event) => {\n          let el = event.target as HTMLInputElement;\n          if (!el.value && !el.selectionStart && !el.selectionEnd) {\n            // Note: Just setting `0, 0` doesn't fix the issue. Setting\n            // `1, 1` fixes it for the first time that you type text and\n            // then hold delete. Toggling to `1, 1` and then back to\n            // `0, 0` seems to completely fix it.\n            el.setSelectionRange(1, 1);\n            el.setSelectionRange(0, 0);\n          }\n        });\n      });\n    }\n\n    this._isServer = !this._platform.isBrowser;\n    this._isNativeSelect = element.nodeName.toLowerCase() === 'select';\n\n    if (this._isNativeSelect) {\n      this.controlType = (element as HTMLSelectElement).multiple ? 'mat-native-select-multiple' :\n                                                                   'mat-native-select';\n    }\n  }\n\n  ngOnInit() {\n    if (this._platform.isBrowser) {\n      this._autofillMonitor.monitor(this._elementRef.nativeElement).subscribe(event => {\n        this.autofilled = event.isAutofilled;\n        this.stateChanges.next();\n      });\n    }\n  }\n\n  ngOnChanges() {\n    this.stateChanges.next();\n  }\n\n  ngOnDestroy() {\n    this.stateChanges.complete();\n\n    if (this._platform.isBrowser) {\n      this._autofillMonitor.stopMonitoring(this._elementRef.nativeElement);\n    }\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      // We need to re-evaluate this on every change detection cycle, because there are some\n      // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n      // that whatever logic is in here has to be super lean or we risk destroying the performance.\n      this.updateErrorState();\n    }\n\n    // We need to dirty-check the native element's value, because there are some cases where\n    // we won't be notified when it changes (e.g. the consumer isn't using forms or they're\n    // updating the value using `emitEvent: false`).\n    this._dirtyCheckNativeValue();\n  }\n\n  /** Focuses the input. */\n  focus(): void { this._elementRef.nativeElement.focus(); }\n\n  /** Callback for the cases where the focused state of the input changes. */\n  _focusChanged(isFocused: boolean) {\n    if (isFocused !== this.focused && !this.readonly) {\n      this.focused = isFocused;\n      this.stateChanges.next();\n    }\n  }\n\n  _onInput() {\n    // This is a noop function and is used to let Angular know whenever the value changes.\n    // Angular will run a new change detection each time the `input` event has been dispatched.\n    // It's necessary that Angular recognizes the value change, because when floatingLabel\n    // is set to false and Angular forms aren't used, the placeholder won't recognize the\n    // value changes and will not disappear.\n    // Listening to the input event wouldn't be necessary when the input is using the\n    // FormsModule or ReactiveFormsModule, because Angular forms also listens to input events.\n  }\n\n  /** Does some manual dirty checking on the native input `value` property. */\n  protected _dirtyCheckNativeValue() {\n    const newValue = this._elementRef.nativeElement.value;\n\n    if (this._previousNativeValue !== newValue) {\n      this._previousNativeValue = newValue;\n      this.stateChanges.next();\n    }\n  }\n\n  /** Make sure the input is a supported type. */\n  protected _validateType() {\n    if (MAT_INPUT_INVALID_TYPES.indexOf(this._type) > -1) {\n      throw getMatInputUnsupportedTypeError(this._type);\n    }\n  }\n\n  /** Checks whether the input type is one of the types that are never empty. */\n  protected _isNeverEmpty() {\n    return this._neverEmptyInputTypes.indexOf(this._type) > -1;\n  }\n\n  /** Checks whether the input is invalid based on the native validation. */\n  protected _isBadInput() {\n    // The `validity` property won't be present on platform-server.\n    let validity = (this._elementRef.nativeElement as HTMLInputElement).validity;\n    return validity && validity.badInput;\n  }\n\n  /** Determines if the component host is a textarea. */\n  protected _isTextarea() {\n    return this._elementRef.nativeElement.nodeName.toLowerCase() === 'textarea';\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get empty(): boolean {\n    return !this._isNeverEmpty() && !this._elementRef.nativeElement.value && !this._isBadInput() &&\n        !this.autofilled;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat(): boolean {\n    if (this._isNativeSelect) {\n      // For a single-selection `<select>`, the label should float when the selected option has\n      // a non-empty display value. For a `<select multiple>`, the label *always* floats to avoid\n      // overlapping the label with the options.\n      const selectElement = this._elementRef.nativeElement as HTMLSelectElement;\n\n      return selectElement.multiple || !this.empty || !!selectElement.options[0].label ||\n          this.focused;\n    } else {\n      return this.focused || !this.empty;\n    }\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) { this._ariaDescribedby = ids.join(' '); }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick() {\n    // Do not re-focus the input element if the element is already focused. Otherwise it can happen\n    // that someone clicks on a time input and the cursor resets to the \"hours\" field while the\n    // \"minutes\" field was actually clicked. See: https://github.com/angular/material2/issues/12849\n    if (!this.focused) {\n      this.focus();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {TextFieldModule} from '@angular/cdk/text-field';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {MatFormFieldModule} from '@angular/material/form-field';\nimport {MatTextareaAutosize} from './autosize';\nimport {MatInput} from './input';\n\n\n@NgModule({\n  declarations: [MatInput, MatTextareaAutosize],\n  imports: [\n    CommonModule,\n    TextFieldModule,\n    MatFormFieldModule,\n  ],\n  exports: [\n    TextFieldModule,\n    // We re-export the `MatFormFieldModule` since `MatInput` will almost always\n    // be used together with `MatFormField`.\n    MatFormFieldModule,\n    MatInput,\n    MatTextareaAutosize,\n  ],\n  providers: [ErrorStateMatcher],\n})\nexport class MatInputModule {}\n"]}