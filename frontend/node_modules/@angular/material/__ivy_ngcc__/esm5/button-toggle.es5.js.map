{"version":3,"file":"button-toggle.es5.js","sources":["../../../src/lib/button-toggle/button-toggle.ts","../../../src/lib/button-toggle/button-toggle-module.ts"],"names":["tslib_1.__extends"],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  InjectionToken,\n  Inject,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanDisableRipple,\n  mixinDisableRipple,\n  CanDisableRippleCtor,\n} from '@angular/material/core';\n\n\n/** Acceptable types for a button toggle. */\nexport type ToggleType = 'checkbox' | 'radio';\n\n/** Possible appearance styles for the button toggle. */\nexport type MatButtonToggleAppearance = 'legacy' | 'standard';\n\n/**\n * Represents the default options for the button toggle that can be configured\n * using the `MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS` injection token.\n */\nexport interface MatButtonToggleDefaultOptions {\n  appearance?: MatButtonToggleAppearance;\n}\n\n/**\n * Injection token that can be used to configure the\n * default options for all button toggles within an app.\n */\nexport const MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS =\n    new InjectionToken<MatButtonToggleDefaultOptions>('MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS');\n\n\n\n/**\n * Provider Expression that allows mat-button-toggle-group to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nexport const MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatButtonToggleGroup),\n  multi: true\n};\n\n/**\n * @deprecated Use `MatButtonToggleGroup` instead.\n * @breaking-change 8.0.0\n */\nexport class MatButtonToggleGroupMultiple {}\n\nlet _uniqueIdCounter = 0;\n\n/** Change event object emitted by MatButtonToggle. */\nexport class MatButtonToggleChange {\n  constructor(\n    /** The MatButtonToggle that emits the event. */\n    public source: MatButtonToggle,\n\n    /** The value assigned to the MatButtonToggle. */\n    public value: any) {}\n}\n\n/** Exclusive selection button toggle group that behaves like a radio-button group. */\n@Directive({\n  selector: 'mat-button-toggle-group',\n  providers: [\n    MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR,\n    {provide: MatButtonToggleGroupMultiple, useExisting: MatButtonToggleGroup},\n  ],\n  host: {\n    'role': 'group',\n    'class': 'mat-button-toggle-group',\n    '[attr.aria-disabled]': 'disabled',\n    '[class.mat-button-toggle-vertical]': 'vertical',\n    '[class.mat-button-toggle-group-appearance-standard]': 'appearance === \"standard\"',\n  },\n  exportAs: 'matButtonToggleGroup',\n})\nexport class MatButtonToggleGroup implements ControlValueAccessor, OnInit, AfterContentInit {\n  private _vertical = false;\n  private _multiple = false;\n  private _disabled = false;\n  private _selectionModel: SelectionModel<MatButtonToggle>;\n\n  /**\n   * Reference to the raw value that the consumer tried to assign. The real\n   * value will exclude any values from this one that don't correspond to a\n   * toggle. Useful for the cases where the value is assigned before the toggles\n   * have been initialized or at the same that they're being swapped out.\n   */\n  private _rawValue: any;\n\n  /**\n   * The method to be called in order to update ngModel.\n   * Now `ngModel` binding is not supported in multiple selection mode.\n   */\n  _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /** onTouch function registered via registerOnTouch (ControlValueAccessor). */\n  _onTouched: () => any = () => {};\n\n  /** Child button toggle buttons. */\n  @ContentChildren(forwardRef(() => MatButtonToggle)) _buttonToggles: QueryList<MatButtonToggle>;\n\n  /** The appearance for all the buttons in the group. */\n  @Input() appearance: MatButtonToggleAppearance;\n\n  /** `name` attribute for the underlying `input` element. */\n  @Input()\n  get name(): string { return this._name; }\n  set name(value: string) {\n    this._name = value;\n\n    if (this._buttonToggles) {\n      this._buttonToggles.forEach(toggle => toggle.name = this._name);\n    }\n  }\n  private _name = `mat-button-toggle-group-${_uniqueIdCounter++}`;\n\n  /** Whether the toggle group is vertical. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) {\n    this._vertical = coerceBooleanProperty(value);\n  }\n\n  /** Value of the toggle group. */\n  @Input()\n  get value(): any {\n    const selected = this._selectionModel ? this._selectionModel.selected : [];\n\n    if (this.multiple) {\n      return selected.map(toggle => toggle.value);\n    }\n\n    return selected[0] ? selected[0].value : undefined;\n  }\n  set value(newValue: any) {\n    this._setSelectionByValue(newValue);\n    this.valueChange.emit(this.value);\n  }\n\n  /**\n   * Event that emits whenever the value of the group changes.\n   * Used to facilitate two-way data binding.\n   * @docs-private\n   */\n  @Output() readonly valueChange = new EventEmitter<any>();\n\n  /** Selected button toggles in the group. */\n  get selected() {\n    const selected = this._selectionModel.selected;\n    return this.multiple ? selected : (selected[0] || null);\n  }\n\n  /** Whether multiple button toggles can be selected. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    this._multiple = coerceBooleanProperty(value);\n  }\n\n  /** Whether multiple button toggle group is disabled. */\n  @Input()\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n\n    if (this._buttonToggles) {\n      this._buttonToggles.forEach(toggle => toggle._markForCheck());\n    }\n  }\n\n  /** Event emitted when the group's value changes. */\n  @Output() readonly change: EventEmitter<MatButtonToggleChange> =\n      new EventEmitter<MatButtonToggleChange>();\n\n  constructor(\n    private _changeDetector: ChangeDetectorRef,\n    @Optional() @Inject(MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS)\n        defaultOptions?: MatButtonToggleDefaultOptions) {\n\n      this.appearance =\n          defaultOptions && defaultOptions.appearance ? defaultOptions.appearance : 'standard';\n    }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatButtonToggle>(this.multiple, undefined, false);\n  }\n\n  ngAfterContentInit() {\n    this._selectionModel.select(...this._buttonToggles.filter(toggle => toggle.checked));\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value Value to be set to the model.\n   */\n  writeValue(value: any) {\n    this.value = value;\n    this._changeDetector.markForCheck();\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: any) {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n\n  /** Dispatch change event with current selection and group value. */\n  _emitChangeEvent(): void {\n    const selected = this.selected;\n    const source = Array.isArray(selected) ? selected[selected.length - 1] : selected;\n    const event = new MatButtonToggleChange(source!, this.value);\n    this._controlValueAccessorChangeFn(event.value);\n    this.change.emit(event);\n  }\n\n  /**\n   * Syncs a button toggle's selected state with the model value.\n   * @param toggle Toggle to be synced.\n   * @param select Whether the toggle should be selected.\n   * @param isUserInput Whether the change was a result of a user interaction.\n   */\n  _syncButtonToggle(toggle: MatButtonToggle, select: boolean, isUserInput = false) {\n    // Deselect the currently-selected toggle, if we're in single-selection\n    // mode and the button being toggled isn't selected at the moment.\n    if (!this.multiple && this.selected && !toggle.checked) {\n      (this.selected as MatButtonToggle).checked = false;\n    }\n\n    if (select) {\n      this._selectionModel.select(toggle);\n    } else {\n      this._selectionModel.deselect(toggle);\n    }\n\n    // Only emit the change event for user input.\n    if (isUserInput) {\n      this._emitChangeEvent();\n    }\n\n    // Note: we emit this one no matter whether it was a user interaction, because\n    // it is used by Angular to sync up the two-way data binding.\n    this.valueChange.emit(this.value);\n  }\n\n  /** Checks whether a button toggle is selected. */\n  _isSelected(toggle: MatButtonToggle) {\n    return this._selectionModel.isSelected(toggle);\n  }\n\n  /** Determines whether a button toggle should be checked on init. */\n  _isPrechecked(toggle: MatButtonToggle) {\n    if (typeof this._rawValue === 'undefined') {\n      return false;\n    }\n\n    if (this.multiple && Array.isArray(this._rawValue)) {\n      return this._rawValue.some(value => toggle.value != null && value === toggle.value);\n    }\n\n    return toggle.value === this._rawValue;\n  }\n\n  /** Updates the selection state of the toggles in the group based on a value. */\n  private _setSelectionByValue(value: any|any[]) {\n    this._rawValue = value;\n\n    if (!this._buttonToggles) {\n      return;\n    }\n\n    if (this.multiple && value) {\n      if (!Array.isArray(value)) {\n        throw Error('Value must be an array in multiple-selection mode.');\n      }\n\n      this._clearSelection();\n      value.forEach((currentValue: any) => this._selectValue(currentValue));\n    } else {\n      this._clearSelection();\n      this._selectValue(value);\n    }\n  }\n\n  /** Clears the selected toggles. */\n  private _clearSelection() {\n    this._selectionModel.clear();\n    this._buttonToggles.forEach(toggle => toggle.checked = false);\n  }\n\n  /** Selects a value if there's a toggle that corresponds to it. */\n  private _selectValue(value: any) {\n    const correspondingOption = this._buttonToggles.find(toggle => {\n      return toggle.value != null && toggle.value === value;\n    });\n\n    if (correspondingOption) {\n      correspondingOption.checked = true;\n      this._selectionModel.select(correspondingOption);\n    }\n  }\n}\n\n// Boilerplate for applying mixins to the MatButtonToggle class.\n/** @docs-private */\nexport class MatButtonToggleBase {}\nexport const _MatButtonToggleMixinBase: CanDisableRippleCtor & typeof MatButtonToggleBase =\n    mixinDisableRipple(MatButtonToggleBase);\n\n/** Single button inside of a toggle group. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-button-toggle',\n  templateUrl: 'button-toggle.html',\n  styleUrls: ['button-toggle.css'],\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matButtonToggle',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disableRipple'],\n  host: {\n    '[class.mat-button-toggle-standalone]': '!buttonToggleGroup',\n    '[class.mat-button-toggle-checked]': 'checked',\n    '[class.mat-button-toggle-disabled]': 'disabled',\n    '[class.mat-button-toggle-appearance-standard]': 'appearance === \"standard\"',\n    'class': 'mat-button-toggle',\n    // Clear out the native tabindex here since we forward it to the underlying button\n    '[attr.tabindex]': 'null',\n    '[attr.id]': 'id',\n  }\n})\nexport class MatButtonToggle extends _MatButtonToggleMixinBase implements OnInit,\n  CanDisableRipple, OnDestroy {\n\n  private _isSingleSelector = false;\n  private _checked = false;\n\n  /**\n   * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will\n   * take precedence so this may be omitted.\n   */\n  @Input('aria-label') ariaLabel: string;\n\n  /**\n   * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n   */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  /** Type of the button toggle. Either 'radio' or 'checkbox'. */\n  _type: ToggleType;\n\n  @ViewChild('button') _buttonElement: ElementRef<HTMLButtonElement>;\n\n  /** The parent button toggle group (exclusive selection). Optional. */\n  buttonToggleGroup: MatButtonToggleGroup;\n\n  /** Unique ID for the underlying `button` element. */\n  get buttonId(): string { return `${this.id}-button`; }\n\n  /** The unique ID for this button toggle. */\n  @Input() id: string;\n\n  /** HTML's 'name' attribute used to group radios for unique selection. */\n  @Input() name: string;\n\n  /** MatButtonToggleGroup reads this to assign its own value. */\n  @Input() value: any;\n\n  /** Tabindex for the toggle. */\n  @Input() tabIndex: number | null;\n\n  /** The appearance style of the button. */\n  @Input()\n  get appearance(): MatButtonToggleAppearance {\n    return this.buttonToggleGroup ? this.buttonToggleGroup.appearance : this._appearance;\n  }\n  set appearance(value: MatButtonToggleAppearance) {\n    this._appearance = value;\n  }\n  private _appearance: MatButtonToggleAppearance;\n\n  /** Whether the button is checked. */\n  @Input()\n  get checked(): boolean {\n    return this.buttonToggleGroup ? this.buttonToggleGroup._isSelected(this) : this._checked;\n  }\n  set checked(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._checked) {\n      this._checked = newValue;\n\n      if (this.buttonToggleGroup) {\n        this.buttonToggleGroup._syncButtonToggle(this, this._checked);\n      }\n\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /** Whether the button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled || (this.buttonToggleGroup && this.buttonToggleGroup.disabled);\n  }\n  set disabled(value: boolean) { this._disabled = coerceBooleanProperty(value); }\n  private _disabled: boolean = false;\n\n  /** Event emitted when the group value changes. */\n  @Output() readonly change: EventEmitter<MatButtonToggleChange> =\n      new EventEmitter<MatButtonToggleChange>();\n\n  constructor(@Optional() toggleGroup: MatButtonToggleGroup,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _elementRef: ElementRef<HTMLElement>,\n              private _focusMonitor: FocusMonitor,\n              // @breaking-change 8.0.0 `defaultTabIndex` to be made a required parameter.\n              @Attribute('tabindex') defaultTabIndex: string,\n              @Optional() @Inject(MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS)\n                  defaultOptions?: MatButtonToggleDefaultOptions) {\n    super();\n\n    const parsedTabIndex = Number(defaultTabIndex);\n    this.tabIndex = (parsedTabIndex || parsedTabIndex === 0) ? parsedTabIndex : null;\n    this.buttonToggleGroup = toggleGroup;\n    this.appearance =\n        defaultOptions && defaultOptions.appearance ? defaultOptions.appearance : 'standard';\n  }\n\n  ngOnInit() {\n    this._isSingleSelector = this.buttonToggleGroup && !this.buttonToggleGroup.multiple;\n    this._type = this._isSingleSelector ? 'radio' : 'checkbox';\n    this.id = this.id || `mat-button-toggle-${_uniqueIdCounter++}`;\n\n    if (this._isSingleSelector) {\n      this.name = this.buttonToggleGroup.name;\n    }\n\n    if (this.buttonToggleGroup && this.buttonToggleGroup._isPrechecked(this)) {\n      this.checked = true;\n    }\n\n    this._focusMonitor.monitor(this._elementRef, true);\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n\n  /** Focuses the button. */\n  focus(): void {\n    this._buttonElement.nativeElement.focus();\n  }\n\n  /** Checks the button toggle due to an interaction with the underlying native button. */\n  _onButtonClick() {\n    const newChecked = this._isSingleSelector ? true : !this._checked;\n\n    if (newChecked !== this._checked) {\n      this._checked = newChecked;\n      if (this.buttonToggleGroup) {\n        this.buttonToggleGroup._syncButtonToggle(this, this._checked, true);\n        this.buttonToggleGroup._onTouched();\n      }\n    }\n    // Emit a change event when it's the single selector\n    this.change.emit(new MatButtonToggleChange(this, this.value));\n  }\n\n  /**\n   * Marks the button toggle as needing checking for change detection.\n   * This method is exposed because the parent button toggle group will directly\n   * update bound properties of the radio button.\n   */\n  _markForCheck() {\n    // When the group value changes, the button will not be notified.\n    // Use `markForCheck` to explicit update button toggle's status.\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatButtonToggle, MatButtonToggleGroup} from './button-toggle';\n\n\n@NgModule({\n  imports: [MatCommonModule, MatRippleModule],\n  exports: [MatCommonModule, MatButtonToggleGroup, MatButtonToggle],\n  declarations: [MatButtonToggleGroup, MatButtonToggle],\n})\nexport class MatButtonToggleModule {}\n"]}