{"version":3,"file":"progress-bar.es5.js","sources":["../../../src/lib/progress-bar/progress-bar.ts","../../../src/lib/progress-bar/progress-bar-module.ts"],"names":["tslib_1.__extends"],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  Component,\n  ChangeDetectionStrategy,\n  ElementRef,\n  Inject,\n  Input,\n  Output,\n  EventEmitter,\n  Optional,\n  NgZone,\n  ViewEncapsulation,\n  AfterViewInit,\n  ViewChild,\n  OnDestroy,\n  InjectionToken,\n  inject,\n} from '@angular/core';\nimport {fromEvent, Subscription} from 'rxjs';\nimport {filter} from 'rxjs/operators';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {CanColor, CanColorCtor, mixinColor} from '@angular/material/core';\nimport {DOCUMENT} from '@angular/common';\n\n// TODO(josephperrott): Benchpress tests.\n// TODO(josephperrott): Add ARIA attributes for progress bar \"for\".\n\n// Boilerplate for applying mixins to MatProgressBar.\n/** @docs-private */\nexport class MatProgressBarBase {\n  constructor(public _elementRef: ElementRef) { }\n}\n\n/** Last animation end data. */\nexport interface ProgressAnimationEnd {\n  value: number;\n}\n\nexport const _MatProgressBarMixinBase: CanColorCtor & typeof MatProgressBarBase =\n    mixinColor(MatProgressBarBase, 'primary');\n\n/**\n * Injection token used to provide the current location to `MatProgressBar`.\n * Used to handle server-side rendering and to stub out during unit tests.\n * @docs-private\n */\nexport const MAT_PROGRESS_BAR_LOCATION = new InjectionToken<MatProgressBarLocation>(\n  'mat-progress-bar-location',\n  {providedIn: 'root', factory: MAT_PROGRESS_BAR_LOCATION_FACTORY}\n);\n\n/**\n * Stubbed out location for `MatProgressBar`.\n * @docs-private\n */\nexport interface MatProgressBarLocation {\n  getPathname: () => string;\n}\n\n/** @docs-private */\nexport function MAT_PROGRESS_BAR_LOCATION_FACTORY(): MatProgressBarLocation {\n  const _document = inject(DOCUMENT);\n\n  return {\n    // Note that this needs to be a function, because Angular will only instantiate\n    // this provider once, but we want the current location on each call.\n    getPathname: () => (_document && _document.location && _document.location.pathname) || ''\n  };\n}\n\n\n/** Counter used to generate unique IDs for progress bars. */\nlet progressbarId = 0;\n\n/**\n * `<mat-progress-bar>` component.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-progress-bar',\n  exportAs: 'matProgressBar',\n  host: {\n    'role': 'progressbar',\n    'aria-valuemin': '0',\n    'aria-valuemax': '100',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.mode]': 'mode',\n    'class': 'mat-progress-bar',\n    '[class._mat-animation-noopable]': `_isNoopAnimation`,\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-bar.html',\n  styleUrls: ['progress-bar.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatProgressBar extends _MatProgressBarMixinBase implements CanColor,\n                                                      AfterViewInit, OnDestroy {\n  constructor(public _elementRef: ElementRef, private _ngZone: NgZone,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string,\n              /**\n               * @deprecated `location` parameter to be made required.\n               * @breaking-change 8.0.0\n               */\n              @Optional() @Inject(MAT_PROGRESS_BAR_LOCATION) location?: MatProgressBarLocation) {\n    super(_elementRef);\n\n    // We need to prefix the SVG reference with the current path, otherwise they won't work\n    // in Safari if the page has a `<base>` tag. Note that we need quotes inside the `url()`,\n\n    // because named route URLs can contain parentheses (see #12338). Also we don't use since\n    // we can't tell the difference between whether\n    // the consumer is using the hash location strategy or not, because `Location` normalizes\n    // both `/#/foo/bar` and `/foo/bar` to the same thing.\n    const path = location ? location.getPathname().split('#')[0] : '';\n    this._rectangleFillValue = `url('${path}#${this.progressbarId}')`;\n    this._isNoopAnimation = _animationMode === 'NoopAnimations';\n  }\n\n  /** Flag that indicates whether NoopAnimations mode is set to true. */\n  _isNoopAnimation = false;\n\n  /** Value of the progress bar. Defaults to zero. Mirrored to aria-valuenow. */\n  @Input()\n  get value(): number { return this._value; }\n  set value(v: number) {\n    this._value = clamp(v || 0);\n\n    // When noop animation is set to true, trigger animationEnd directly.\n    if (this._isNoopAnimation) {\n      this.emitAnimationEnd();\n    }\n  }\n  private _value: number = 0;\n\n  /** Buffer value of the progress bar. Defaults to zero. */\n  @Input()\n  get bufferValue(): number { return this._bufferValue; }\n  set bufferValue(v: number) { this._bufferValue = clamp(v || 0); }\n  private _bufferValue: number = 0;\n\n  @ViewChild('primaryValueBar') _primaryValueBar: ElementRef;\n\n  /**\n   * Event emitted when animation of the primary progress bar completes. This event will not\n   * be emitted when animations are disabled, nor will it be emitted for modes with continuous\n   * animations (indeterminate and query).\n   */\n  @Output() animationEnd = new EventEmitter<ProgressAnimationEnd>();\n\n  /** Reference to animation end subscription to be unsubscribed on destroy. */\n  private _animationEndSubscription: Subscription = Subscription.EMPTY;\n\n  /**\n   * Mode of the progress bar.\n   *\n   * Input must be one of these values: determinate, indeterminate, buffer, query, defaults to\n   * 'determinate'.\n   * Mirrored to mode attribute.\n   */\n  @Input() mode: 'determinate' | 'indeterminate' | 'buffer' | 'query' = 'determinate';\n\n  /** ID of the progress bar. */\n  progressbarId = `mat-progress-bar-${progressbarId++}`;\n\n  /** Attribute to be used for the `fill` attribute on the internal `rect` element. */\n  _rectangleFillValue: string;\n\n  /** Gets the current transform value for the progress bar's primary indicator. */\n  _primaryTransform() {\n    const scale = this.value / 100;\n    return {transform: `scaleX(${scale})`};\n  }\n\n  /**\n   * Gets the current transform value for the progress bar's buffer indicator. Only used if the\n   * progress mode is set to buffer, otherwise returns an undefined, causing no transformation.\n   */\n  _bufferTransform() {\n    if (this.mode === 'buffer') {\n      const scale = this.bufferValue / 100;\n      return {transform: `scaleX(${scale})`};\n    }\n  }\n\n  ngAfterViewInit() {\n    if (!this._isNoopAnimation) {\n      // Run outside angular so change detection didn't get triggered on every transition end\n      // instead only on the animation that we care about (primary value bar's transitionend)\n      this._ngZone.runOutsideAngular((() => {\n        this._animationEndSubscription =\n            fromEvent<TransitionEvent>(this._primaryValueBar.nativeElement, 'transitionend')\n            .pipe(filter(((e: TransitionEvent) =>\n              e.target === this._primaryValueBar.nativeElement)))\n            .subscribe(_ => this._ngZone.run(() => this.emitAnimationEnd()));\n      }));\n    }\n  }\n\n  ngOnDestroy() {\n    this._animationEndSubscription.unsubscribe();\n  }\n\n  /** Emit an animationEnd event if in determinate or buffer mode. */\n  private emitAnimationEnd(): void {\n    if (this.mode === 'determinate' || this.mode === 'buffer') {\n      this.animationEnd.next({value: this.value});\n    }\n  }\n}\n\n/** Clamps a value to be between two numbers, by default 0 and 100. */\nfunction clamp(v: number, min = 0, max = 100) {\n  return Math.max(min, Math.min(max, v));\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatProgressBar} from './progress-bar';\n\n\n@NgModule({\n  imports: [CommonModule, MatCommonModule],\n  exports: [MatProgressBar, MatCommonModule],\n  declarations: [MatProgressBar],\n})\nexport class MatProgressBarModule {}\n"]}