{"version":3,"file":"chips.es5.js","sources":["../../../src/lib/chips/chip.ts","../../../src/lib/chips/chip-default-options.ts","../../../src/lib/chips/chip-list.ts","../../../src/lib/chips/chip-input.ts","../../../src/lib/chips/chips-module.ts"],"names":["tslib_1.__extends","nextUniqueId"],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {BACKSPACE, DELETE, SPACE} from '@angular/cdk/keycodes';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  ContentChild,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanColorCtor,\n  CanDisable,\n  CanDisableCtor,\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  MAT_RIPPLE_GLOBAL_OPTIONS,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  RippleConfig,\n  RippleGlobalOptions,\n  RippleRenderer,\n  RippleTarget,\n} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {take} from 'rxjs/operators';\n\n\n/** Represents an event fired on an individual `mat-chip`. */\nexport interface MatChipEvent {\n  /** The chip the event was fired on. */\n  chip: MatChip;\n}\n\n/** Event object emitted by MatChip when selected or deselected. */\nexport class MatChipSelectionChange {\n  constructor(\n    /** Reference to the chip that emitted the event. */\n    public source: MatChip,\n    /** Whether the chip that emitted the event is selected. */\n    public selected: boolean,\n    /** Whether the selection change was a result of a user interaction. */\n    public isUserInput = false) { }\n}\n\n\n// Boilerplate for applying mixins to MatChip.\n/** @docs-private */\nexport class MatChipBase {\n  constructor(public _elementRef: ElementRef) {}\n}\n\nexport const _MatChipMixinBase:\n    CanColorCtor & CanDisableRippleCtor & CanDisableCtor & typeof MatChipBase =\n        mixinColor(mixinDisableRipple(mixinDisabled(MatChipBase)), 'primary');\n\nconst CHIP_ATTRIBUTE_NAMES = ['mat-basic-chip'];\n\n/**\n * Dummy directive to add CSS class to chip avatar.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-chip-avatar, [matChipAvatar]',\n  host: {'class': 'mat-chip-avatar'}\n})\nexport class MatChipAvatar {}\n\n/**\n * Dummy directive to add CSS class to chip trailing icon.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-chip-trailing-icon, [matChipTrailingIcon]',\n  host: {'class': 'mat-chip-trailing-icon'}\n})\nexport class MatChipTrailingIcon {}\n\n/**\n * Material design styled Chip component. Used inside the MatChipList component.\n */\n@Directive({\n  selector: `mat-basic-chip, [mat-basic-chip], mat-chip, [mat-chip]`,\n  inputs: ['color', 'disabled', 'disableRipple'],\n  exportAs: 'matChip',\n  host: {\n    'class': 'mat-chip',\n    '[attr.tabindex]': 'disabled ? null : -1',\n    'role': 'option',\n    '[class.mat-chip-selected]': 'selected',\n    '[class.mat-chip-with-avatar]': 'avatar',\n    '[class.mat-chip-with-trailing-icon]': 'trailingIcon || removeIcon',\n    '[class.mat-chip-disabled]': 'disabled',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-selected]': 'ariaSelected',\n    '(click)': '_handleClick($event)',\n    '(keydown)': '_handleKeydown($event)',\n    '(focus)': 'focus()',\n    '(blur)': '_blur()',\n  },\n})\nexport class MatChip extends _MatChipMixinBase implements FocusableOption, OnDestroy, CanColor,\n    CanDisable, CanDisableRipple, RippleTarget {\n\n  /** Reference to the RippleRenderer for the chip. */\n  private _chipRipple: RippleRenderer;\n\n  /** Whether the ripples are globally disabled through the RippleGlobalOptions */\n  private _ripplesGloballyDisabled = false;\n\n  /**\n   * Ripple configuration for ripples that are launched on pointer down.\n   * @docs-private\n   */\n  rippleConfig: RippleConfig = {};\n\n  /**\n   * Whether ripples are disabled on interaction\n   * @docs-private\n   */\n  get rippleDisabled(): boolean {\n    return this.disabled || this.disableRipple || this._ripplesGloballyDisabled;\n  }\n\n  /** Whether the chip has focus. */\n  _hasFocus: boolean = false;\n\n  /** Whether the chip list is selectable */\n  chipListSelectable: boolean = true;\n\n  /** The chip avatar */\n  @ContentChild(MatChipAvatar) avatar: MatChipAvatar;\n\n  /** The chip's trailing icon. */\n  @ContentChild(MatChipTrailingIcon) trailingIcon: MatChipTrailingIcon;\n\n  /** The chip's remove toggler. */\n  @ContentChild(forwardRef(() => MatChipRemove)) removeIcon: MatChipRemove;\n\n  /** Whether the chip is selected. */\n  @Input()\n  get selected(): boolean { return this._selected; }\n  set selected(value: boolean) {\n    const coercedValue = coerceBooleanProperty(value);\n\n    if (coercedValue !== this._selected) {\n      this._selected = coercedValue;\n      this._dispatchSelectionChange();\n    }\n  }\n  protected _selected: boolean = false;\n\n  /** The value of the chip. Defaults to the content inside `<mat-chip>` tags. */\n  @Input()\n  get value(): any {\n    return this._value != undefined\n      ? this._value\n      : this._elementRef.nativeElement.textContent;\n  }\n  set value(value: any) { this._value = value; }\n  protected _value: any;\n\n  /**\n   * Whether or not the chip is selectable. When a chip is not selectable,\n   * changes to it's selected state are always ignored. By default a chip is\n   * selectable, and it becomes non-selectable if it's parent chip list is\n   * not selectable.\n   */\n  @Input()\n  get selectable(): boolean { return this._selectable && this.chipListSelectable; }\n  set selectable(value: boolean) {\n    this._selectable = coerceBooleanProperty(value);\n  }\n  protected _selectable: boolean = true;\n\n  /**\n   * Determines whether or not the chip displays the remove styling and emits (removed) events.\n   */\n  @Input()\n  get removable(): boolean { return this._removable; }\n  set removable(value: boolean) {\n    this._removable = coerceBooleanProperty(value);\n  }\n  protected _removable: boolean = true;\n\n  /** Emits when the chip is focused. */\n  readonly _onFocus = new Subject<MatChipEvent>();\n\n  /** Emits when the chip is blured. */\n  readonly _onBlur = new Subject<MatChipEvent>();\n\n  /** Emitted when the chip is selected or deselected. */\n  @Output() readonly selectionChange: EventEmitter<MatChipSelectionChange> =\n      new EventEmitter<MatChipSelectionChange>();\n\n  /** Emitted when the chip is destroyed. */\n  @Output() readonly destroyed: EventEmitter<MatChipEvent> = new EventEmitter<MatChipEvent>();\n\n  /** Emitted when a chip is to be removed. */\n  @Output() readonly removed: EventEmitter<MatChipEvent> = new EventEmitter<MatChipEvent>();\n\n  /** The ARIA selected applied to the chip. */\n  get ariaSelected(): string | null {\n    return this.selectable ? this.selected.toString() : null;\n  }\n\n  constructor(public _elementRef: ElementRef,\n              private _ngZone: NgZone,\n              platform: Platform,\n              @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS) globalOptions: RippleGlobalOptions) {\n    super(_elementRef);\n\n    this._addHostClassName();\n\n    this._chipRipple = new RippleRenderer(this, _ngZone, _elementRef, platform);\n    this._chipRipple.setupTriggerEvents(_elementRef.nativeElement);\n\n    if (globalOptions) {\n      // TODO(paul): Do not copy each option manually. Allow dynamic global option changes: #9729\n      this._ripplesGloballyDisabled = !!globalOptions.disabled;\n      this.rippleConfig = {\n        animation: globalOptions.animation,\n        terminateOnPointerUp: globalOptions.terminateOnPointerUp,\n      };\n    }\n  }\n\n  _addHostClassName() {\n    // Add class for the different chips\n    for (const attr of CHIP_ATTRIBUTE_NAMES) {\n      if (this._elementRef.nativeElement.hasAttribute(attr) ||\n        this._elementRef.nativeElement.tagName.toLowerCase() === attr) {\n        (this._elementRef.nativeElement as HTMLElement).classList.add(attr);\n        return;\n      }\n    }\n    (this._elementRef.nativeElement as HTMLElement).classList.add('mat-standard-chip');\n  }\n\n  ngOnDestroy() {\n    this.destroyed.emit({chip: this});\n    this._chipRipple._removeTriggerEvents();\n  }\n\n  /** Selects the chip. */\n  select(): void {\n    if (!this._selected) {\n      this._selected = true;\n      this._dispatchSelectionChange();\n    }\n  }\n\n  /** Deselects the chip. */\n  deselect(): void {\n    if (this._selected) {\n      this._selected = false;\n      this._dispatchSelectionChange();\n    }\n  }\n\n  /** Select this chip and emit selected event */\n  selectViaInteraction(): void {\n    if (!this._selected) {\n      this._selected = true;\n      this._dispatchSelectionChange(true);\n    }\n  }\n\n  /** Toggles the current selected state of this chip. */\n  toggleSelected(isUserInput: boolean = false): boolean {\n    this._selected = !this.selected;\n    this._dispatchSelectionChange(isUserInput);\n    return this.selected;\n  }\n\n  /** Allows for programmatic focusing of the chip. */\n  focus(): void {\n    if (!this._hasFocus) {\n      this._elementRef.nativeElement.focus();\n      this._onFocus.next({chip: this});\n    }\n    this._hasFocus = true;\n  }\n\n  /**\n   * Allows for programmatic removal of the chip. Called by the MatChipList when the DELETE or\n   * BACKSPACE keys are pressed.\n   *\n   * Informs any listeners of the removal request. Does not remove the chip from the DOM.\n   */\n  remove(): void {\n    if (this.removable) {\n      this.removed.emit({chip: this});\n    }\n  }\n\n  /** Handles click events on the chip. */\n  _handleClick(event: Event) {\n    if (this.disabled) {\n      event.preventDefault();\n    } else {\n      event.stopPropagation();\n    }\n  }\n\n  /** Handle custom key presses. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (this.disabled) {\n      return;\n    }\n\n    switch (event.keyCode) {\n      case DELETE:\n      case BACKSPACE:\n        // If we are removable, remove the focused chip\n        this.remove();\n        // Always prevent so page navigation does not occur\n        event.preventDefault();\n        break;\n      case SPACE:\n        // If we are selectable, toggle the focused chip\n        if (this.selectable) {\n          this.toggleSelected(true);\n        }\n\n        // Always prevent space from scrolling the page since the list has focus\n        event.preventDefault();\n        break;\n    }\n  }\n\n  _blur(): void {\n    // When animations are enabled, Angular may end up removing the chip from the DOM a little\n    // earlier than usual, causing it to be blurred and throwing off the logic in the chip list\n    // that moves focus not the next item. To work around the issue, we defer marking the chip\n    // as not focused until the next time the zone stabilizes.\n    this._ngZone.onStable\n      .asObservable()\n      .pipe(take(1))\n      .subscribe(() => {\n        this._ngZone.run(() => {\n          this._hasFocus = false;\n          this._onBlur.next({chip: this});\n        });\n      });\n  }\n\n  private _dispatchSelectionChange(isUserInput = false) {\n    this.selectionChange.emit({\n      source: this,\n      isUserInput,\n      selected: this._selected\n    });\n  }\n}\n\n\n/**\n * Applies proper (click) support and adds styling for use with the Material Design \"cancel\" icon\n * available at https://material.io/icons/#ic_cancel.\n *\n * Example:\n *\n *     `<mat-chip>\n *       <mat-icon matChipRemove>cancel</mat-icon>\n *     </mat-chip>`\n *\n * You *may* use a custom icon, but you may need to override the `mat-chip-remove` positioning\n * styles to properly center the icon within the chip.\n */\n@Directive({\n  selector: '[matChipRemove]',\n  host: {\n    'class': 'mat-chip-remove mat-chip-trailing-icon',\n    '(click)': '_handleClick($event)',\n  }\n})\nexport class MatChipRemove {\n  constructor(protected _parentChip: MatChip) {}\n\n  /** Calls the parent chip's public `remove()` method if applicable. */\n  _handleClick(event: Event): void {\n    if (this._parentChip.removable) {\n      this._parentChip.remove();\n    }\n\n    // We need to stop event propagation because otherwise the event will bubble up to the\n    // form field and cause the `onContainerClick` method to be invoked. This method would then\n    // reset the focused chip that has been focused after chip removal. Usually the parent\n    // the parent click listener of the `MatChip` would prevent propagation, but it can happen\n    // that the chip is being removed before the event bubbles up.\n    event.stopPropagation();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n/** Default options, for the chips module, that can be overridden. */\nexport interface MatChipsDefaultOptions {\n  /** The list of key codes that will trigger a chipEnd event. */\n  separatorKeyCodes: number[] | Set<number>;\n}\n\n/** Injection token to be used to override the default options for the chips module. */\nexport const MAT_CHIPS_DEFAULT_OPTIONS =\n    new InjectionToken<MatChipsDefaultOptions>('mat-chips-default-options');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusKeyManager} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {BACKSPACE, END, HOME} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  Self,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {\n  CanUpdateErrorState,\n  CanUpdateErrorStateCtor,\n  ErrorStateMatcher,\n  mixinErrorState,\n} from '@angular/material/core';\nimport {MatFormFieldControl} from '@angular/material/form-field';\nimport {merge, Observable, Subject, Subscription} from 'rxjs';\nimport {startWith, takeUntil} from 'rxjs/operators';\nimport {MatChip, MatChipEvent, MatChipSelectionChange} from './chip';\nimport {MatChipInput} from './chip-input';\n\n\n// Boilerplate for applying mixins to MatChipList.\n/** @docs-private */\nexport class MatChipListBase {\n  constructor(public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              /** @docs-private */\n              public ngControl: NgControl) {}\n}\nexport const _MatChipListMixinBase: CanUpdateErrorStateCtor & typeof MatChipListBase =\n    mixinErrorState(MatChipListBase);\n\n\n// Increasing integer for generating unique ids for chip-list components.\nlet nextUniqueId = 0;\n\n/** Change event object that is emitted when the chip list value has changed. */\nexport class MatChipListChange {\n  constructor(\n    /** Chip list that emitted the event. */\n    public source: MatChipList,\n    /** Value of the chip list when the event was emitted. */\n    public value: any) { }\n}\n\n\n/**\n * A material design chips component (named ChipList for it's similarity to the List component).\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-chip-list',\n  template: `<div class=\"mat-chip-list-wrapper\"><ng-content></ng-content></div>`,\n  exportAs: 'matChipList',\n  host: {\n    '[attr.tabindex]': 'disabled ? null : _tabIndex',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-required]': 'required.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-multiselectable]': 'multiple',\n    '[attr.role]': 'role',\n    '[class.mat-chip-list-disabled]': 'disabled',\n    '[class.mat-chip-list-invalid]': 'errorState',\n    '[class.mat-chip-list-required]': 'required',\n    '[attr.aria-orientation]': 'ariaOrientation',\n    'class': 'mat-chip-list',\n    '(focus)': 'focus()',\n    '(blur)': '_blur()',\n    '(keydown)': '_keydown($event)',\n    '[id]': '_uid',\n  },\n  providers: [{provide: MatFormFieldControl, useExisting: MatChipList}],\n  styleUrls: ['chips.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatChipList extends _MatChipListMixinBase implements MatFormFieldControl<any>,\n  ControlValueAccessor, AfterContentInit, DoCheck, OnInit, OnDestroy, CanUpdateErrorState {\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  readonly controlType: string = 'mat-chip-list';\n\n  /**\n   * When a chip is destroyed, we store the index of the destroyed chip until the chips\n   * query list notifies about the update. This is necessary because we cannot determine an\n   * appropriate chip that should receive focus until the array of chips updated completely.\n   */\n  private _lastDestroyedChipIndex: number | null = null;\n\n  /** Subject that emits when the component has been destroyed. */\n  private _destroyed = new Subject<void>();\n\n  /** Subscription to focus changes in the chips. */\n  private _chipFocusSubscription: Subscription | null;\n\n  /** Subscription to blur changes in the chips. */\n  private _chipBlurSubscription: Subscription | null;\n\n  /** Subscription to selection changes in chips. */\n  private _chipSelectionSubscription: Subscription | null;\n\n  /** Subscription to remove changes in chips. */\n  private _chipRemoveSubscription: Subscription | null;\n\n  /** The chip input to add more chips */\n  protected _chipInput: MatChipInput;\n\n  /** Uid of the chip list */\n  _uid: string = `mat-chip-list-${nextUniqueId++}`;\n\n  /** The aria-describedby attribute on the chip list for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** Tab index for the chip list. */\n  _tabIndex = 0;\n\n  /**\n   * User defined tab index.\n   * When it is not null, use user defined tab index. Otherwise use _tabIndex\n   */\n  _userTabIndex: number | null = null;\n\n  /** The FocusKeyManager which handles focus. */\n  _keyManager: FocusKeyManager<MatChip>;\n\n  /** Function when touched */\n  _onTouched = () => {};\n\n  /** Function when changed */\n  _onChange: (value: any) => void = () => {};\n\n  _selectionModel: SelectionModel<MatChip>;\n\n  /** The array of selected chips inside chip list. */\n  get selected(): MatChip[] | MatChip {\n    return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n  }\n\n  /** The ARIA role applied to the chip list. */\n  get role(): string | null { return this.empty ? null : 'listbox'; }\n\n  /** An object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /** Whether the user should be allowed to select multiple chips. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    this._multiple = coerceBooleanProperty(value);\n  }\n  private _multiple: boolean = false;\n\n  /**\n   * A function to compare the option values with the selected values. The first argument\n   * is a value from an option. The second is a value from the selection. A boolean\n   * should be returned.\n   */\n  @Input()\n  get compareWith(): (o1: any, o2: any) => boolean { return this._compareWith; }\n  set compareWith(fn: (o1: any, o2: any) => boolean) {\n    this._compareWith = fn;\n    if (this._selectionModel) {\n      // A different comparator means the selection could change.\n      this._initializeSelection();\n    }\n  }\n  private _compareWith = (o1: any, o2: any) => o1 === o2;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get value(): any { return this._value; }\n  set value(value: any) {\n    this.writeValue(value);\n    this._value = value;\n  }\n  protected _value: any;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get id(): string {\n    return this._chipInput ? this._chipInput.id : this._uid;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this.stateChanges.next();\n  }\n  protected _required: boolean = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get placeholder(): string {\n    return this._chipInput ? this._chipInput.placeholder : this._placeholder;\n  }\n  set placeholder(value: string) {\n    this._placeholder = value;\n    this.stateChanges.next();\n  }\n  protected _placeholder: string;\n\n  /** Whether any chips or the matChipInput inside of this chip-list has focus. */\n  get focused(): boolean {\n    return (this._chipInput && this._chipInput.focused) || this._hasFocusedChip();\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get empty(): boolean {\n    return (!this._chipInput || this._chipInput.empty) && this.chips.length === 0;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat(): boolean { return !this.empty || this.focused; }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get disabled(): boolean { return this.ngControl ? !!this.ngControl.disabled : this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n\n    if (this.chips) {\n      this.chips.forEach(chip => chip.disabled = this._disabled);\n    }\n  }\n  protected _disabled: boolean = false;\n\n  /** Orientation of the chip list. */\n  @Input('aria-orientation') ariaOrientation: 'horizontal' | 'vertical' = 'horizontal';\n\n  /**\n   * Whether or not this chip list is selectable. When a chip list is not selectable,\n   * the selected states for all the chips inside the chip list are always ignored.\n   */\n  @Input()\n  get selectable(): boolean { return this._selectable; }\n  set selectable(value: boolean) {\n    this._selectable = coerceBooleanProperty(value);\n\n    if (this.chips) {\n      this.chips.forEach(chip => chip.chipListSelectable = this._selectable);\n    }\n  }\n  protected _selectable: boolean = true;\n\n  @Input()\n  set tabIndex(value: number) {\n    this._userTabIndex = value;\n    this._tabIndex = value;\n  }\n\n  /** Combined stream of all of the child chips' selection change events. */\n  get chipSelectionChanges(): Observable<MatChipSelectionChange> {\n    return merge(...this.chips.map(chip => chip.selectionChange));\n  }\n\n  /** Combined stream of all of the child chips' focus change events. */\n  get chipFocusChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip._onFocus));\n  }\n\n  /** Combined stream of all of the child chips' blur change events. */\n  get chipBlurChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip._onBlur));\n  }\n\n  /** Combined stream of all of the child chips' remove change events. */\n  get chipRemoveChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip.destroyed));\n  }\n\n  /** Event emitted when the selected chip list value has been changed by the user. */\n  @Output() readonly change: EventEmitter<MatChipListChange> =\n      new EventEmitter<MatChipListChange>();\n\n  /**\n   * Event that emits whenever the raw value of the chip-list changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output() readonly valueChange: EventEmitter<any> = new EventEmitter<any>();\n\n  /** The chip components contained within this chip list. */\n  @ContentChildren(MatChip) chips: QueryList<MatChip>;\n\n  constructor(protected _elementRef: ElementRef<HTMLElement>,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() private _dir: Directionality,\n              @Optional() _parentForm: NgForm,\n              @Optional() _parentFormGroup: FormGroupDirective,\n              _defaultErrorStateMatcher: ErrorStateMatcher,\n              /** @docs-private */\n              @Optional() @Self() public ngControl: NgControl) {\n    super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n    if (this.ngControl) {\n      this.ngControl.valueAccessor = this;\n    }\n  }\n\n  ngAfterContentInit() {\n    this._keyManager = new FocusKeyManager<MatChip>(this.chips)\n      .withWrap()\n      .withVerticalOrientation()\n      .withHorizontalOrientation(this._dir ? this._dir.value : 'ltr');\n\n    // Prevents the chip list from capturing focus and redirecting\n    // it back to the first chip when the user tabs out.\n    this._keyManager.tabOut.pipe(takeUntil(this._destroyed)).subscribe(() => {\n      this._tabIndex = -1;\n      setTimeout(() => this._tabIndex = this._userTabIndex || 0);\n    });\n\n    // When the list changes, re-subscribe\n    this.chips.changes.pipe(startWith(null), takeUntil(this._destroyed)).subscribe(() => {\n      this._resetChips();\n\n      // Reset chips selected/deselected status\n      this._initializeSelection();\n\n      // Check to see if we need to update our tab index\n      this._updateTabIndex();\n\n      // Check to see if we have a destroyed chip and need to refocus\n      this._updateFocusForDestroyedChips();\n\n      this.stateChanges.next();\n    });\n  }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatChip>(this.multiple, undefined, false);\n    this.stateChanges.next();\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      // We need to re-evaluate this on every change detection cycle, because there are some\n      // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n      // that whatever logic is in here has to be super lean or we risk destroying the performance.\n      this.updateErrorState();\n    }\n  }\n\n  ngOnDestroy() {\n    this._destroyed.next();\n    this._destroyed.complete();\n    this.stateChanges.complete();\n\n    this._dropSubscriptions();\n  }\n\n\n  /** Associates an HTML input element with this chip list. */\n  registerInput(inputElement: MatChipInput): void {\n    this._chipInput = inputElement;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) { this._ariaDescribedby = ids.join(' '); }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: any): void {\n    if (this.chips) {\n      this._setSelectionByValue(value, false);\n    }\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this.stateChanges.next();\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick(event: MouseEvent) {\n    if (!this._originatesFromChip(event)) {\n      this.focus();\n    }\n  }\n\n  /**\n   * Focuses the the first non-disabled chip in this chip list, or the associated input when there\n   * are no eligible chips.\n   */\n  focus(): void {\n    if (this.disabled) {\n      return;\n    }\n\n    // TODO: ARIA says this should focus the first `selected` chip if any are selected.\n    // Focus on first element if there's no chipInput inside chip-list\n    if (this._chipInput && this._chipInput.focused) {\n      // do nothing\n    } else if (this.chips.length > 0) {\n      this._keyManager.setFirstItemActive();\n      this.stateChanges.next();\n    } else {\n      this._focusInput();\n      this.stateChanges.next();\n    }\n  }\n\n  /** Attempt to focus an input if we have one. */\n  _focusInput() {\n    if (this._chipInput) {\n      this._chipInput.focus();\n    }\n  }\n\n  /**\n   * Pass events to the keyboard manager. Available here for tests.\n   */\n  _keydown(event: KeyboardEvent) {\n    const target = event.target as HTMLElement;\n\n    // If they are on an empty input and hit backspace, focus the last chip\n    if (event.keyCode === BACKSPACE && this._isInputEmpty(target)) {\n      this._keyManager.setLastItemActive();\n      event.preventDefault();\n    } else if (target && target.classList.contains('mat-chip')) {\n      if (event.keyCode === HOME) {\n        this._keyManager.setFirstItemActive();\n        event.preventDefault();\n      } else if (event.keyCode === END) {\n        this._keyManager.setLastItemActive();\n        event.preventDefault();\n      } else {\n        this._keyManager.onKeydown(event);\n      }\n\n      this.stateChanges.next();\n    }\n  }\n\n\n  /**\n   * Check the tab index as you should not be allowed to focus an empty list.\n   */\n  protected _updateTabIndex(): void {\n    // If we have 0 chips, we should not allow keyboard focus\n    this._tabIndex = this._userTabIndex || (this.chips.length === 0 ? -1 : 0);\n  }\n\n  /**\n   * If the amount of chips changed, we need to update the\n   * key manager state and focus the next closest chip.\n   */\n  protected _updateFocusForDestroyedChips() {\n    if (this._lastDestroyedChipIndex != null && this.chips.length) {\n      const newChipIndex = Math.min(this._lastDestroyedChipIndex, this.chips.length - 1);\n      this._keyManager.setActiveItem(newChipIndex);\n    }\n\n    this._lastDestroyedChipIndex = null;\n  }\n\n  /**\n   * Utility to ensure all indexes are valid.\n   *\n   * @param index The index to be checked.\n   * @returns True if the index is valid for our list of chips.\n   */\n  private _isValidIndex(index: number): boolean {\n    return index >= 0 && index < this.chips.length;\n  }\n\n  private _isInputEmpty(element: HTMLElement): boolean {\n    if (element && element.nodeName.toLowerCase() === 'input') {\n      let input = element as HTMLInputElement;\n      return !input.value;\n    }\n\n    return false;\n  }\n\n  _setSelectionByValue(value: any, isUserInput: boolean = true) {\n    this._clearSelection();\n    this.chips.forEach(chip => chip.deselect());\n\n    if (Array.isArray(value)) {\n      value.forEach(currentValue => this._selectValue(currentValue, isUserInput));\n      this._sortValues();\n    } else {\n      const correspondingChip = this._selectValue(value, isUserInput);\n\n      // Shift focus to the active item. Note that we shouldn't do this in multiple\n      // mode, because we don't know what chip the user interacted with last.\n      if (correspondingChip) {\n        if (isUserInput) {\n          this._keyManager.setActiveItem(correspondingChip);\n        }\n      }\n    }\n  }\n\n  /**\n   * Finds and selects the chip based on its value.\n   * @returns Chip that has the corresponding value.\n   */\n  private _selectValue(value: any, isUserInput: boolean = true): MatChip | undefined {\n\n    const correspondingChip = this.chips.find(chip => {\n      return chip.value != null && this._compareWith(chip.value,  value);\n    });\n\n    if (correspondingChip) {\n      isUserInput ? correspondingChip.selectViaInteraction() : correspondingChip.select();\n      this._selectionModel.select(correspondingChip);\n    }\n\n    return correspondingChip;\n  }\n\n  private _initializeSelection(): void {\n    // Defer setting the value in order to avoid the \"Expression\n    // has changed after it was checked\" errors from Angular.\n    Promise.resolve().then(() => {\n      if (this.ngControl || this._value) {\n        this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value, false);\n        this.stateChanges.next();\n      }\n    });\n  }\n\n  /**\n   * Deselects every chip in the list.\n   * @param skip Chip that should not be deselected.\n   */\n  private _clearSelection(skip?: MatChip): void {\n    this._selectionModel.clear();\n    this.chips.forEach(chip => {\n      if (chip !== skip) {\n        chip.deselect();\n      }\n    });\n    this.stateChanges.next();\n  }\n\n  /**\n   * Sorts the model values, ensuring that they keep the same\n   * order that they have in the panel.\n   */\n  private _sortValues(): void {\n    if (this._multiple) {\n      this._selectionModel.clear();\n\n      this.chips.forEach(chip => {\n        if (chip.selected) {\n          this._selectionModel.select(chip);\n        }\n      });\n      this.stateChanges.next();\n    }\n  }\n\n  /** Emits change event to set the model value. */\n  private _propagateChanges(fallbackValue?: any): void {\n    let valueToEmit: any = null;\n\n    if (Array.isArray(this.selected)) {\n      valueToEmit = this.selected.map(chip => chip.value);\n    } else {\n      valueToEmit = this.selected ? this.selected.value : fallbackValue;\n    }\n    this._value = valueToEmit;\n    this.change.emit(new MatChipListChange(this, valueToEmit));\n    this.valueChange.emit(valueToEmit);\n    this._onChange(valueToEmit);\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** When blurred, mark the field as touched when focus moved outside the chip list. */\n  _blur() {\n    if (!this._hasFocusedChip()) {\n      this._keyManager.setActiveItem(-1);\n    }\n\n    if (!this.disabled) {\n      if (this._chipInput) {\n        // If there's a chip input, we should check whether the focus moved to chip input.\n        // If the focus is not moved to chip input, mark the field as touched. If the focus moved\n        // to chip input, do nothing.\n        // Timeout is needed to wait for the focus() event trigger on chip input.\n        setTimeout(() => {\n          if (!this.focused) {\n            this._markAsTouched();\n          }\n        });\n      } else {\n        // If there's no chip input, then mark the field as touched.\n        this._markAsTouched();\n      }\n    }\n  }\n\n  /** Mark the field as touched */\n  _markAsTouched() {\n    this._onTouched();\n    this._changeDetectorRef.markForCheck();\n    this.stateChanges.next();\n  }\n\n  private _resetChips() {\n    this._dropSubscriptions();\n    this._listenToChipsFocus();\n    this._listenToChipsSelection();\n    this._listenToChipsRemoved();\n  }\n\n  private _dropSubscriptions() {\n    if (this._chipFocusSubscription) {\n      this._chipFocusSubscription.unsubscribe();\n      this._chipFocusSubscription = null;\n    }\n\n    if (this._chipBlurSubscription) {\n      this._chipBlurSubscription.unsubscribe();\n      this._chipBlurSubscription = null;\n    }\n\n    if (this._chipSelectionSubscription) {\n      this._chipSelectionSubscription.unsubscribe();\n      this._chipSelectionSubscription = null;\n    }\n\n    if (this._chipRemoveSubscription) {\n      this._chipRemoveSubscription.unsubscribe();\n      this._chipRemoveSubscription = null;\n    }\n  }\n\n  /** Listens to user-generated selection events on each chip. */\n  private _listenToChipsSelection(): void {\n    this._chipSelectionSubscription = this.chipSelectionChanges.subscribe(event => {\n      event.source.selected\n        ? this._selectionModel.select(event.source)\n        : this._selectionModel.deselect(event.source);\n\n      // For single selection chip list, make sure the deselected value is unselected.\n      if (!this.multiple) {\n        this.chips.forEach(chip => {\n          if (!this._selectionModel.isSelected(chip) && chip.selected) {\n            chip.deselect();\n          }\n        });\n      }\n\n      if (event.isUserInput) {\n        this._propagateChanges();\n      }\n    });\n  }\n\n  /** Listens to user-generated selection events on each chip. */\n  private _listenToChipsFocus(): void {\n    this._chipFocusSubscription = this.chipFocusChanges.subscribe(event => {\n      let chipIndex: number = this.chips.toArray().indexOf(event.chip);\n\n      if (this._isValidIndex(chipIndex)) {\n        this._keyManager.updateActiveItemIndex(chipIndex);\n      }\n      this.stateChanges.next();\n    });\n\n    this._chipBlurSubscription = this.chipBlurChanges.subscribe(() => {\n      this._blur();\n      this.stateChanges.next();\n    });\n  }\n\n  private _listenToChipsRemoved(): void {\n    this._chipRemoveSubscription = this.chipRemoveChanges.subscribe(event => {\n      const chip = event.chip;\n      const chipIndex = this.chips.toArray().indexOf(event.chip);\n\n      // In case the chip that will be removed is currently focused, we temporarily store\n      // the index in order to be able to determine an appropriate sibling chip that will\n      // receive focus.\n      if (this._isValidIndex(chipIndex) && chip._hasFocus) {\n        this._lastDestroyedChipIndex = chipIndex;\n      }\n    });\n  }\n\n  /** Checks whether an event comes from inside a chip element. */\n  private _originatesFromChip(event: Event): boolean {\n    let currentElement = event.target as HTMLElement | null;\n\n    while (currentElement && currentElement !== this._elementRef.nativeElement) {\n      if (currentElement.classList.contains('mat-chip')) {\n        return true;\n      }\n\n      currentElement = currentElement.parentElement;\n    }\n\n    return false;\n  }\n\n  /** Checks whether any of the chips is focused. */\n  private _hasFocusedChip() {\n    return this.chips.some(chip => chip._hasFocus);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Directive, ElementRef, EventEmitter, Input, Output, Inject, OnChanges} from '@angular/core';\nimport {MatChipList} from './chip-list';\nimport {MAT_CHIPS_DEFAULT_OPTIONS, MatChipsDefaultOptions} from './chip-default-options';\n\n\n/** Represents an input event on a `matChipInput`. */\nexport interface MatChipInputEvent {\n  /** The native `<input>` element that the event is being fired for. */\n  input: HTMLInputElement;\n\n  /** The value of the input. */\n  value: string;\n}\n\n// Increasing integer for generating unique ids.\nlet nextUniqueId = 0;\n\n/**\n * Directive that adds chip-specific behaviors to an input element inside `<mat-form-field>`.\n * May be placed inside or outside of an `<mat-chip-list>`.\n */\n@Directive({\n  selector: 'input[matChipInputFor]',\n  exportAs: 'matChipInput, matChipInputFor',\n  host: {\n    'class': 'mat-chip-input mat-input-element',\n    '(keydown)': '_keydown($event)',\n    '(blur)': '_blur()',\n    '(focus)': '_focus()',\n    '(input)': '_onInput()',\n    '[id]': 'id',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.placeholder]': 'placeholder || null',\n    '[attr.aria-invalid]': '_chipList && _chipList.ngControl ? _chipList.ngControl.invalid : null',\n  }\n})\nexport class MatChipInput implements OnChanges {\n  /** Whether the control is focused. */\n  focused: boolean = false;\n  _chipList: MatChipList;\n\n  /** Register input for chip list */\n  @Input('matChipInputFor')\n  set chipList(value: MatChipList) {\n    if (value) {\n      this._chipList = value;\n      this._chipList.registerInput(this);\n    }\n  }\n\n  /**\n   * Whether or not the chipEnd event will be emitted when the input is blurred.\n   */\n  @Input('matChipInputAddOnBlur')\n  get addOnBlur(): boolean { return this._addOnBlur; }\n  set addOnBlur(value: boolean) { this._addOnBlur = coerceBooleanProperty(value); }\n  _addOnBlur: boolean = false;\n\n  /**\n   * The list of key codes that will trigger a chipEnd event.\n   *\n   * Defaults to `[ENTER]`.\n   */\n  @Input('matChipInputSeparatorKeyCodes')\n  separatorKeyCodes: number[] | Set<number> = this._defaultOptions.separatorKeyCodes;\n\n  /** Emitted when a chip is to be added. */\n  @Output('matChipInputTokenEnd')\n  chipEnd: EventEmitter<MatChipInputEvent> = new EventEmitter<MatChipInputEvent>();\n\n  /** The input's placeholder text. */\n  @Input() placeholder: string = '';\n\n  /** Unique id for the input. */\n  @Input() id: string = `mat-chip-list-input-${nextUniqueId++}`;\n\n  /** Whether the input is disabled. */\n  @Input()\n  get disabled(): boolean { return this._disabled || (this._chipList && this._chipList.disabled); }\n  set disabled(value: boolean) { this._disabled = coerceBooleanProperty(value); }\n  private _disabled: boolean = false;\n\n  /** Whether the input is empty. */\n  get empty(): boolean { return !this._inputElement.value; }\n\n  /** The native input element to which this directive is attached. */\n  protected _inputElement: HTMLInputElement;\n\n  constructor(\n    protected _elementRef: ElementRef<HTMLInputElement>,\n    @Inject(MAT_CHIPS_DEFAULT_OPTIONS) private _defaultOptions: MatChipsDefaultOptions) {\n    this._inputElement = this._elementRef.nativeElement as HTMLInputElement;\n  }\n\n  ngOnChanges() {\n    this._chipList.stateChanges.next();\n  }\n\n  /** Utility method to make host definition/tests more clear. */\n  _keydown(event?: KeyboardEvent) {\n    this._emitChipEnd(event);\n  }\n\n  /** Checks to see if the blur should emit the (chipEnd) event. */\n  _blur() {\n    if (this.addOnBlur) {\n      this._emitChipEnd();\n    }\n    this.focused = false;\n    // Blur the chip list if it is not focused\n    if (!this._chipList.focused) {\n      this._chipList._blur();\n    }\n    this._chipList.stateChanges.next();\n  }\n\n  _focus() {\n    this.focused = true;\n    this._chipList.stateChanges.next();\n  }\n\n  /** Checks to see if the (chipEnd) event needs to be emitted. */\n  _emitChipEnd(event?: KeyboardEvent) {\n    if (!this._inputElement.value && !!event) {\n      this._chipList._keydown(event);\n    }\n    if (!event || this._isSeparatorKey(event.keyCode)) {\n      this.chipEnd.emit({ input: this._inputElement, value: this._inputElement.value });\n\n      if (event) {\n        event.preventDefault();\n      }\n    }\n  }\n\n  _onInput() {\n    // Let chip list know whenever the value changes.\n    this._chipList.stateChanges.next();\n  }\n\n  /** Focuses the input. */\n  focus(): void {\n    this._inputElement.focus();\n  }\n\n  /** Checks whether a keycode is one of the configured separators. */\n  private _isSeparatorKey(keyCode: number) {\n    const separators = this.separatorKeyCodes;\n    return Array.isArray(separators) ? separators.indexOf(keyCode) > -1 : separators.has(keyCode);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ENTER} from '@angular/cdk/keycodes';\nimport {NgModule} from '@angular/core';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {MatChip, MatChipAvatar, MatChipRemove, MatChipTrailingIcon} from './chip';\nimport {MAT_CHIPS_DEFAULT_OPTIONS, MatChipsDefaultOptions} from './chip-default-options';\nimport {MatChipInput} from './chip-input';\nimport {MatChipList} from './chip-list';\n\nconst CHIP_DECLARATIONS = [\n  MatChipList,\n  MatChip,\n  MatChipInput,\n  MatChipRemove,\n  MatChipAvatar,\n  MatChipTrailingIcon,\n];\n\n@NgModule({\n  exports: CHIP_DECLARATIONS,\n  declarations: CHIP_DECLARATIONS,\n  providers: [\n    ErrorStateMatcher,\n    {\n      provide: MAT_CHIPS_DEFAULT_OPTIONS,\n      useValue: {\n        separatorKeyCodes: [ENTER]\n      } as MatChipsDefaultOptions\n    }\n  ]\n})\nexport class MatChipsModule {}\n"]}