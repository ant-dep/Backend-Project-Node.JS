{"version":3,"file":"autocomplete.es5.js","sources":["../../../src/lib/autocomplete/autocomplete.ts","../../../src/lib/autocomplete/autocomplete-origin.ts","../../../src/lib/autocomplete/autocomplete-trigger.ts","../../../src/lib/autocomplete/autocomplete-module.ts"],"names":["tslib_1.__extends","observableOf"],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ActiveDescendantKeyManager} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  Output,\n  QueryList,\n  TemplateRef,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  MAT_OPTION_PARENT_COMPONENT,\n  MatOptgroup,\n  MatOption,\n  mixinDisableRipple,\n} from '@angular/material/core';\n\n\n/**\n * Autocomplete IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet _uniqueAutocompleteIdCounter = 0;\n\n/** Event object that is emitted when an autocomplete option is selected. */\nexport class MatAutocompleteSelectedEvent {\n  constructor(\n    /** Reference to the autocomplete panel that emitted the event. */\n    public source: MatAutocomplete,\n    /** Option that was selected. */\n    public option: MatOption) { }\n}\n\n\n// Boilerplate for applying mixins to MatAutocomplete.\n/** @docs-private */\nexport class MatAutocompleteBase {}\nexport const _MatAutocompleteMixinBase: CanDisableRippleCtor & typeof MatAutocompleteBase =\n    mixinDisableRipple(MatAutocompleteBase);\n\n/** Default `mat-autocomplete` options that can be overridden. */\nexport interface MatAutocompleteDefaultOptions {\n  /** Whether the first option should be highlighted when an autocomplete panel is opened. */\n  autoActiveFirstOption?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-autocomplete`. */\nexport const MAT_AUTOCOMPLETE_DEFAULT_OPTIONS =\n    new InjectionToken<MatAutocompleteDefaultOptions>('mat-autocomplete-default-options', {\n      providedIn: 'root',\n      factory: MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY(): MatAutocompleteDefaultOptions {\n  return {autoActiveFirstOption: false};\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-autocomplete',\n  templateUrl: 'autocomplete.html',\n  styleUrls: ['autocomplete.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  exportAs: 'matAutocomplete',\n  inputs: ['disableRipple'],\n  host: {\n    'class': 'mat-autocomplete'\n  },\n  providers: [\n    {provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatAutocomplete}\n  ]\n})\nexport class MatAutocomplete extends _MatAutocompleteMixinBase implements AfterContentInit,\n  CanDisableRipple {\n\n  /** Manages active item in option list based on key events. */\n  _keyManager: ActiveDescendantKeyManager<MatOption>;\n\n  /** Whether the autocomplete panel should be visible, depending on option length. */\n  showPanel: boolean = false;\n\n  /** Whether the autocomplete panel is open. */\n  get isOpen(): boolean { return this._isOpen && this.showPanel; }\n  _isOpen: boolean = false;\n\n  /** @docs-private */\n  @ViewChild(TemplateRef) template: TemplateRef<any>;\n\n  /** Element for the panel containing the autocomplete options. */\n  @ViewChild('panel') panel: ElementRef;\n\n  /** @docs-private */\n  @ContentChildren(MatOption, { descendants: true }) options: QueryList<MatOption>;\n\n  /** @docs-private */\n  @ContentChildren(MatOptgroup) optionGroups: QueryList<MatOptgroup>;\n\n  /** Function that maps an option's control value to its display value in the trigger. */\n  @Input() displayWith: ((value: any) => string) | null = null;\n\n  /**\n   * Whether the first option should be highlighted when the autocomplete panel is opened.\n   * Can be configured globally through the `MAT_AUTOCOMPLETE_DEFAULT_OPTIONS` token.\n   */\n  @Input()\n  get autoActiveFirstOption(): boolean { return this._autoActiveFirstOption; }\n  set autoActiveFirstOption(value: boolean) {\n    this._autoActiveFirstOption = coerceBooleanProperty(value);\n  }\n  private _autoActiveFirstOption: boolean;\n\n  /**\n   * Specify the width of the autocomplete panel.  Can be any CSS sizing value, otherwise it will\n   * match the width of its host.\n   */\n  @Input() panelWidth: string | number;\n\n  /** Event that is emitted whenever an option from the list is selected. */\n  @Output() readonly optionSelected: EventEmitter<MatAutocompleteSelectedEvent> =\n      new EventEmitter<MatAutocompleteSelectedEvent>();\n\n  /** Event that is emitted when the autocomplete panel is opened. */\n  @Output() readonly opened: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Event that is emitted when the autocomplete panel is closed. */\n  @Output() readonly closed: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Takes classes set on the host mat-autocomplete element and applies them to the panel\n   * inside the overlay container to allow for easy styling.\n   */\n  @Input('class')\n  set classList(value: string) {\n    if (value && value.length) {\n      value.split(' ').forEach(className => this._classList[className.trim()] = true);\n      this._elementRef.nativeElement.className = '';\n    }\n  }\n  _classList: {[key: string]: boolean} = {};\n\n  /** Unique ID to be used by autocomplete trigger's \"aria-owns\" property. */\n  id: string = `mat-autocomplete-${_uniqueAutocompleteIdCounter++}`;\n\n  constructor(\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _elementRef: ElementRef<HTMLElement>,\n    @Inject(MAT_AUTOCOMPLETE_DEFAULT_OPTIONS) defaults: MatAutocompleteDefaultOptions) {\n    super();\n\n    this._autoActiveFirstOption = !!defaults.autoActiveFirstOption;\n  }\n\n  ngAfterContentInit() {\n    this._keyManager = new ActiveDescendantKeyManager<MatOption>(this.options).withWrap();\n    // Set the initial visibility state.\n    this._setVisibility();\n  }\n\n  /**\n   * Sets the panel scrollTop. This allows us to manually scroll to display options\n   * above or below the fold, as they are not actually being focused when active.\n   */\n  _setScrollTop(scrollTop: number): void {\n    if (this.panel) {\n      this.panel.nativeElement.scrollTop = scrollTop;\n    }\n  }\n\n  /** Returns the panel's scrollTop. */\n  _getScrollTop(): number {\n    return this.panel ? this.panel.nativeElement.scrollTop : 0;\n  }\n\n  /** Panel should hide itself when the option list is empty. */\n  _setVisibility() {\n    this.showPanel = !!this.options.length;\n    this._classList['mat-autocomplete-visible'] = this.showPanel;\n    this._classList['mat-autocomplete-hidden'] = !this.showPanel;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Emits the `select` event. */\n  _emitSelectEvent(option: MatOption): void {\n    const event = new MatAutocompleteSelectedEvent(this, option);\n    this.optionSelected.emit(event);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef} from '@angular/core';\n\n/**\n * Directive applied to an element to make it usable\n * as a connection point for an autocomplete panel.\n */\n@Directive({\n  selector: '[matAutocompleteOrigin]',\n  exportAs: 'matAutocompleteOrigin',\n})\nexport class MatAutocompleteOrigin {\n  constructor(\n      /** Reference to the element on which the directive is applied. */\n      public elementRef: ElementRef<HTMLElement>) { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Directionality} from '@angular/cdk/bidi';\nimport {DOWN_ARROW, ENTER, ESCAPE, TAB, UP_ARROW} from '@angular/cdk/keycodes';\nimport {\n  FlexibleConnectedPositionStrategy,\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  PositionStrategy,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {DOCUMENT} from '@angular/common';\nimport {filter, take, switchMap, delay, tap, map} from 'rxjs/operators';\nimport {\n  ChangeDetectorRef,\n  Directive,\n  ElementRef,\n  forwardRef,\n  Host,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  ViewContainerRef,\n} from '@angular/core';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  _countGroupLabelsBeforeOption,\n  _getOptionScrollPosition,\n  MatOption,\n  MatOptionSelectionChange,\n} from '@angular/material/core';\nimport {MatFormField} from '@angular/material/form-field';\nimport {Subscription, defer, fromEvent, merge, of as observableOf, Subject, Observable} from 'rxjs';\nimport {MatAutocomplete} from './autocomplete';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {MatAutocompleteOrigin} from './autocomplete-origin';\n\n\n/**\n * The following style constants are necessary to save here in order\n * to properly calculate the scrollTop of the panel. Because we are not\n * actually focusing the active item, scroll must be handled manually.\n */\n\n/** The height of each autocomplete option. */\nexport const AUTOCOMPLETE_OPTION_HEIGHT = 48;\n\n/** The total height of the autocomplete panel. */\nexport const AUTOCOMPLETE_PANEL_HEIGHT = 256;\n\n/** Injection token that determines the scroll handling while the autocomplete panel is open. */\nexport const MAT_AUTOCOMPLETE_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-autocomplete-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_AUTOCOMPLETE_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY,\n};\n\n/**\n * Provider that allows the autocomplete to register as a ControlValueAccessor.\n * @docs-private\n */\nexport const MAT_AUTOCOMPLETE_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatAutocompleteTrigger),\n  multi: true\n};\n\n/**\n * Creates an error to be thrown when attempting to use an autocomplete trigger without a panel.\n * @docs-private\n */\nexport function getMatAutocompleteMissingPanelError(): Error {\n  return Error('Attempting to open an undefined instance of `mat-autocomplete`. ' +\n               'Make sure that the id passed to the `matAutocomplete` is correct and that ' +\n               'you\\'re attempting to open it after the ngAfterContentInit hook.');\n}\n\n\n@Directive({\n  selector: `input[matAutocomplete], textarea[matAutocomplete]`,\n  host: {\n    '[attr.autocomplete]': 'autocompleteAttribute',\n    '[attr.role]': 'autocompleteDisabled ? null : \"combobox\"',\n    '[attr.aria-autocomplete]': 'autocompleteDisabled ? null : \"list\"',\n    '[attr.aria-activedescendant]': 'activeOption?.id',\n    '[attr.aria-expanded]': 'autocompleteDisabled ? null : panelOpen.toString()',\n    '[attr.aria-owns]': '(autocompleteDisabled || !panelOpen) ? null : autocomplete?.id',\n    // Note: we use `focusin`, as opposed to `focus`, in order to open the panel\n    // a little earlier. This avoids issues where IE delays the focusing of the input.\n    '(focusin)': '_handleFocus()',\n    '(blur)': '_onTouched()',\n    '(input)': '_handleInput($event)',\n    '(keydown)': '_handleKeydown($event)',\n  },\n  exportAs: 'matAutocompleteTrigger',\n  providers: [MAT_AUTOCOMPLETE_VALUE_ACCESSOR]\n})\nexport class MatAutocompleteTrigger implements ControlValueAccessor, OnDestroy {\n  private _overlayRef: OverlayRef | null;\n  private _portal: TemplatePortal;\n  private _componentDestroyed = false;\n  private _autocompleteDisabled = false;\n  private _scrollStrategy: () => ScrollStrategy;\n\n  /** Old value of the native input. Used to work around issues with the `input` event on IE. */\n  private _previousValue: string | number | null;\n\n  /** Strategy that is used to position the panel. */\n  private _positionStrategy: FlexibleConnectedPositionStrategy;\n\n  /** Whether or not the label state is being overridden. */\n  private _manuallyFloatingLabel = false;\n\n  /** The subscription for closing actions (some are bound to document). */\n  private _closingActionsSubscription: Subscription;\n\n  /** Subscription to viewport size changes. */\n  private _viewportSubscription = Subscription.EMPTY;\n\n  /**\n   * Whether the autocomplete can open the next time it is focused. Used to prevent a focused,\n   * closed autocomplete from being reopened if the user switches to another browser tab and then\n   * comes back.\n   */\n  private _canOpenOnNextFocus = true;\n\n  /** Stream of keyboard events that can close the panel. */\n  private readonly _closeKeyEventStream = new Subject<void>();\n\n  /**\n   * Event handler for when the window is blurred. Needs to be an\n   * arrow function in order to preserve the context.\n   */\n  private _windowBlurHandler = () => {\n    // If the user blurred the window while the autocomplete is focused, it means that it'll be\n    // refocused when they come back. In this case we want to skip the first focus event, if the\n    // pane was closed, in order to avoid reopening it unintentionally.\n    this._canOpenOnNextFocus =\n        document.activeElement !== this._element.nativeElement || this.panelOpen;\n  }\n\n  /** `View -> model callback called when value changes` */\n  _onChange: (value: any) => void = () => {};\n\n  /** `View -> model callback called when autocomplete has been touched` */\n  _onTouched = () => {};\n\n  /** The autocomplete panel to be attached to this trigger. */\n  @Input('matAutocomplete') autocomplete: MatAutocomplete;\n\n  /**\n   * Reference relative to which to position the autocomplete panel.\n   * Defaults to the autocomplete trigger element.\n   */\n  @Input('matAutocompleteConnectedTo') connectedTo: MatAutocompleteOrigin;\n\n  /**\n   * `autocomplete` attribute to be set on the input element.\n   * @docs-private\n   */\n  @Input('autocomplete') autocompleteAttribute: string = 'off';\n\n  /**\n   * Whether the autocomplete is disabled. When disabled, the element will\n   * act as a regular input and the user won't be able to open the panel.\n   */\n  @Input('matAutocompleteDisabled')\n  get autocompleteDisabled(): boolean { return this._autocompleteDisabled; }\n  set autocompleteDisabled(value: boolean) {\n    this._autocompleteDisabled = coerceBooleanProperty(value);\n  }\n\n  constructor(private _element: ElementRef<HTMLInputElement>, private _overlay: Overlay,\n              private _viewContainerRef: ViewContainerRef,\n              private _zone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Inject(MAT_AUTOCOMPLETE_SCROLL_STRATEGY) scrollStrategy: any,\n              @Optional() private _dir: Directionality,\n              @Optional() @Host() private _formField: MatFormField,\n              @Optional() @Inject(DOCUMENT) private _document: any,\n              // @breaking-change 8.0.0 Make `_viewportRuler` required.\n              private _viewportRuler?: ViewportRuler) {\n\n    if (typeof window !== 'undefined') {\n      _zone.runOutsideAngular(() => {\n        window.addEventListener('blur', this._windowBlurHandler);\n      });\n    }\n\n    this._scrollStrategy = scrollStrategy;\n  }\n\n  ngOnDestroy() {\n    if (typeof window !== 'undefined') {\n      window.removeEventListener('blur', this._windowBlurHandler);\n    }\n\n    this._viewportSubscription.unsubscribe();\n    this._componentDestroyed = true;\n    this._destroyPanel();\n    this._closeKeyEventStream.complete();\n  }\n\n  /** Whether or not the autocomplete panel is open. */\n  get panelOpen(): boolean {\n    return this._overlayAttached && this.autocomplete.showPanel;\n  }\n  private _overlayAttached: boolean = false;\n\n  /** Opens the autocomplete suggestion panel. */\n  openPanel(): void {\n    this._attachOverlay();\n    this._floatLabel();\n  }\n\n  /** Closes the autocomplete suggestion panel. */\n  closePanel(): void {\n    this._resetLabel();\n\n    if (!this._overlayAttached) {\n      return;\n    }\n\n    if (this.panelOpen) {\n      // Only emit if the panel was visible.\n      this.autocomplete.closed.emit();\n    }\n\n    this.autocomplete._isOpen = this._overlayAttached = false;\n\n    if (this._overlayRef && this._overlayRef.hasAttached()) {\n      this._overlayRef.detach();\n      this._closingActionsSubscription.unsubscribe();\n    }\n\n    // Note that in some cases this can end up being called after the component is destroyed.\n    // Add a check to ensure that we don't try to run change detection on a destroyed view.\n    if (!this._componentDestroyed) {\n      // We need to trigger change detection manually, because\n      // `fromEvent` doesn't seem to do it at the proper time.\n      // This ensures that the label is reset when the\n      // user clicks outside.\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  /**\n   * Updates the position of the autocomplete suggestion panel to ensure that it fits all options\n   * within the viewport.\n   */\n  updatePosition(): void {\n    if (this._overlayAttached) {\n      this._overlayRef!.updatePosition();\n    }\n  }\n\n  /**\n   * A stream of actions that should close the autocomplete panel, including\n   * when an option is selected, on blur, and when TAB is pressed.\n   */\n  get panelClosingActions(): Observable<MatOptionSelectionChange|null> {\n    return merge(\n      this.optionSelections,\n      this.autocomplete._keyManager.tabOut.pipe(filter(() => this._overlayAttached)),\n      this._closeKeyEventStream,\n      this._getOutsideClickStream(),\n      this._overlayRef ?\n          this._overlayRef.detachments().pipe(filter(() => this._overlayAttached)) :\n          observableOf()\n    ).pipe(\n      // Normalize the output so we return a consistent type.\n      map(event => event instanceof MatOptionSelectionChange ? event : null)\n    );\n  }\n\n  /** Stream of autocomplete option selections. */\n  readonly optionSelections: Observable<MatOptionSelectionChange> = defer(() => {\n    if (this.autocomplete && this.autocomplete.options) {\n     return merge(...this.autocomplete.options.map(option => option.onSelectionChange));\n    }\n\n    // If there are any subscribers before `ngAfterViewInit`, the `autocomplete` will be undefined.\n    // Return a stream that we'll replace with the real one once everything is in place.\n    return this._zone.onStable\n        .asObservable()\n        .pipe(take(1), switchMap(() => this.optionSelections));\n  });\n\n  /** The currently active option, coerced to MatOption type. */\n  get activeOption(): MatOption | null {\n    if (this.autocomplete && this.autocomplete._keyManager) {\n      return this.autocomplete._keyManager.activeItem;\n    }\n\n    return null;\n  }\n\n  /** Stream of clicks outside of the autocomplete panel. */\n  private _getOutsideClickStream(): Observable<any> {\n    if (!this._document) {\n      return observableOf(null);\n    }\n\n    return merge(\n      fromEvent<MouseEvent>(this._document, 'click'),\n      fromEvent<TouchEvent>(this._document, 'touchend')\n    )\n    .pipe(filter(event => {\n      const clickTarget = event.target as HTMLElement;\n      const formField = this._formField ?\n          this._formField._elementRef.nativeElement : null;\n\n      return this._overlayAttached &&\n              clickTarget !== this._element.nativeElement &&\n              (!formField || !formField.contains(clickTarget)) &&\n              (!!this._overlayRef && !this._overlayRef.overlayElement.contains(clickTarget));\n    }));\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: any): void {\n    Promise.resolve(null).then(() => this._setTriggerValue(value));\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => {}): void {\n    this._onChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: () => {}) {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean) {\n    this._element.nativeElement.disabled = isDisabled;\n  }\n\n  _handleKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n\n    // Prevent the default action on all escape key presses. This is here primarily to bring IE\n    // in line with other browsers. By default, pressing escape on IE will cause it to revert\n    // the input value to the one that it had on focus, however it won't dispatch any events\n    // which means that the model value will be out of sync with the view.\n    if (keyCode === ESCAPE) {\n      event.preventDefault();\n    }\n\n    if (this.activeOption && keyCode === ENTER && this.panelOpen) {\n      this.activeOption._selectViaInteraction();\n      this._resetActiveItem();\n      event.preventDefault();\n    } else if (this.autocomplete) {\n      const prevActiveItem = this.autocomplete._keyManager.activeItem;\n      const isArrowKey = keyCode === UP_ARROW || keyCode === DOWN_ARROW;\n\n      if (this.panelOpen || keyCode === TAB) {\n        this.autocomplete._keyManager.onKeydown(event);\n      } else if (isArrowKey && this._canOpen()) {\n        this.openPanel();\n      }\n\n      if (isArrowKey || this.autocomplete._keyManager.activeItem !== prevActiveItem) {\n        this._scrollToOption();\n      }\n    }\n  }\n\n  _handleInput(event: KeyboardEvent): void {\n    let target = event.target as HTMLInputElement;\n    let value: number | string | null = target.value;\n\n    // Based on `NumberValueAccessor` from forms.\n    if (target.type === 'number') {\n      value = value == '' ? null : parseFloat(value);\n    }\n\n    // If the input has a placeholder, IE will fire the `input` event on page load,\n    // focus and blur, in addition to when the user actually changed the value. To\n    // filter out all of the extra events, we save the value on focus and between\n    // `input` events, and we check whether it changed.\n    // See: https://connect.microsoft.com/IE/feedback/details/885747/\n    if (this._previousValue !== value && document.activeElement === event.target) {\n      this._previousValue = value;\n      this._onChange(value);\n\n      if (this._canOpen()) {\n        this.openPanel();\n      }\n    }\n  }\n\n  _handleFocus(): void {\n    if (!this._canOpenOnNextFocus) {\n      this._canOpenOnNextFocus = true;\n    } else if (this._canOpen()) {\n      this._previousValue = this._element.nativeElement.value;\n      this._attachOverlay();\n      this._floatLabel(true);\n    }\n  }\n\n  /**\n   * In \"auto\" mode, the label will animate down as soon as focus is lost.\n   * This causes the value to jump when selecting an option with the mouse.\n   * This method manually floats the label until the panel can be closed.\n   * @param shouldAnimate Whether the label should be animated when it is floated.\n   */\n  private _floatLabel(shouldAnimate = false): void {\n    if (this._formField && this._formField.floatLabel === 'auto') {\n      if (shouldAnimate) {\n        this._formField._animateAndLockLabel();\n      } else {\n        this._formField.floatLabel = 'always';\n      }\n\n      this._manuallyFloatingLabel = true;\n    }\n  }\n\n  /** If the label has been manually elevated, return it to its normal state. */\n  private _resetLabel(): void  {\n    if (this._manuallyFloatingLabel) {\n      this._formField.floatLabel = 'auto';\n      this._manuallyFloatingLabel = false;\n    }\n  }\n\n  /**\n   * Given that we are not actually focusing active options, we must manually adjust scroll\n   * to reveal options below the fold. First, we find the offset of the option from the top\n   * of the panel. If that offset is below the fold, the new scrollTop will be the offset -\n   * the panel height + the option height, so the active option will be just visible at the\n   * bottom of the panel. If that offset is above the top of the visible panel, the new scrollTop\n   * will become the offset. If that offset is visible within the panel already, the scrollTop is\n   * not adjusted.\n   */\n  private _scrollToOption(): void {\n    const index = this.autocomplete._keyManager.activeItemIndex || 0;\n    const labelCount = _countGroupLabelsBeforeOption(index,\n        this.autocomplete.options, this.autocomplete.optionGroups);\n\n    const newScrollPosition = _getOptionScrollPosition(\n      index + labelCount,\n      AUTOCOMPLETE_OPTION_HEIGHT,\n      this.autocomplete._getScrollTop(),\n      AUTOCOMPLETE_PANEL_HEIGHT\n    );\n\n    this.autocomplete._setScrollTop(newScrollPosition);\n  }\n\n  /**\n   * This method listens to a stream of panel closing actions and resets the\n   * stream every time the option list changes.\n   */\n  private _subscribeToClosingActions(): Subscription {\n    const firstStable = this._zone.onStable.asObservable().pipe(take(1));\n    const optionChanges = this.autocomplete.options.changes.pipe(\n      tap(() => this._positionStrategy.reapplyLastPosition()),\n      // Defer emitting to the stream until the next tick, because changing\n      // bindings in here will cause \"changed after checked\" errors.\n      delay(0)\n    );\n\n    // When the zone is stable initially, and when the option list changes...\n    return merge(firstStable, optionChanges)\n      .pipe(\n        // create a new stream of panelClosingActions, replacing any previous streams\n        // that were created, and flatten it so our stream only emits closing events...\n        switchMap(() => {\n          this._resetActiveItem();\n          this.autocomplete._setVisibility();\n\n          if (this.panelOpen) {\n            this._overlayRef!.updatePosition();\n          }\n\n          return this.panelClosingActions;\n        }),\n        // when the first closing event occurs...\n        take(1)\n      )\n      // set the value, close the panel, and complete.\n      .subscribe(event => this._setValueAndClose(event));\n  }\n\n  /** Destroys the autocomplete suggestion panel. */\n  private _destroyPanel(): void {\n    if (this._overlayRef) {\n      this.closePanel();\n      this._overlayRef.dispose();\n      this._overlayRef = null;\n    }\n  }\n\n  private _setTriggerValue(value: any): void {\n    const toDisplay = this.autocomplete && this.autocomplete.displayWith ?\n      this.autocomplete.displayWith(value) :\n      value;\n\n    // Simply falling back to an empty string if the display value is falsy does not work properly.\n    // The display value can also be the number zero and shouldn't fall back to an empty string.\n    const inputValue = toDisplay != null ? toDisplay : '';\n\n    // If it's used within a `MatFormField`, we should set it through the property so it can go\n    // through change detection.\n    if (this._formField) {\n      this._formField._control.value = inputValue;\n    } else {\n      this._element.nativeElement.value = inputValue;\n    }\n\n    this._previousValue = inputValue;\n  }\n\n  /**\n   * This method closes the panel, and if a value is specified, also sets the associated\n   * control to that value. It will also mark the control as dirty if this interaction\n   * stemmed from the user.\n   */\n  private _setValueAndClose(event: MatOptionSelectionChange | null): void {\n    if (event && event.source) {\n      this._clearPreviousSelectedOption(event.source);\n      this._setTriggerValue(event.source.value);\n      this._onChange(event.source.value);\n      this._element.nativeElement.focus();\n      this.autocomplete._emitSelectEvent(event.source);\n    }\n\n    this.closePanel();\n  }\n\n  /**\n   * Clear any previous selected option and emit a selection change event for this option\n   */\n  private _clearPreviousSelectedOption(skip: MatOption) {\n    this.autocomplete.options.forEach(option => {\n      if (option != skip && option.selected) {\n        option.deselect();\n      }\n    });\n  }\n\n  private _attachOverlay(): void {\n    if (!this.autocomplete) {\n      throw getMatAutocompleteMissingPanelError();\n    }\n\n    if (!this._overlayRef) {\n      this._portal = new TemplatePortal(this.autocomplete.template, this._viewContainerRef);\n      this._overlayRef = this._overlay.create(this._getOverlayConfig());\n\n      // Use the `keydownEvents` in order to take advantage of\n      // the overlay event targeting provided by the CDK overlay.\n      this._overlayRef.keydownEvents().subscribe(event => {\n        // Close when pressing ESCAPE or ALT + UP_ARROW, based on the a11y guidelines.\n        // See: https://www.w3.org/TR/wai-aria-practices-1.1/#textbox-keyboard-interaction\n        if (event.keyCode === ESCAPE || (event.keyCode === UP_ARROW && event.altKey)) {\n          this._resetActiveItem();\n          this._closeKeyEventStream.next();\n        }\n      });\n\n      if (this._viewportRuler) {\n        this._viewportSubscription = this._viewportRuler.change().subscribe(() => {\n          if (this.panelOpen && this._overlayRef) {\n            this._overlayRef.updateSize({width: this._getPanelWidth()});\n          }\n        });\n      }\n    } else {\n      // Update the panel width and direction, in case anything has changed.\n      this._overlayRef.updateSize({width: this._getPanelWidth()});\n    }\n\n    if (this._overlayRef && !this._overlayRef.hasAttached()) {\n      this._overlayRef.attach(this._portal);\n      this._closingActionsSubscription = this._subscribeToClosingActions();\n    }\n\n    const wasOpen = this.panelOpen;\n\n    this.autocomplete._setVisibility();\n    this.autocomplete._isOpen = this._overlayAttached = true;\n\n    // We need to do an extra `panelOpen` check in here, because the\n    // autocomplete won't be shown if there are no options.\n    if (this.panelOpen && wasOpen !== this.panelOpen) {\n      this.autocomplete.opened.emit();\n    }\n  }\n\n  private _getOverlayConfig(): OverlayConfig {\n    return new OverlayConfig({\n      positionStrategy: this._getOverlayPosition(),\n      scrollStrategy: this._scrollStrategy(),\n      width: this._getPanelWidth(),\n      direction: this._dir\n    });\n  }\n\n  private _getOverlayPosition(): PositionStrategy {\n    this._positionStrategy = this._overlay.position()\n      .flexibleConnectedTo(this._getConnectedElement())\n      .withFlexibleDimensions(false)\n      .withPush(false)\n      .withPositions([\n        {\n          originX: 'start',\n          originY: 'bottom',\n          overlayX: 'start',\n          overlayY: 'top'\n        },\n        {\n          originX: 'start',\n          originY: 'top',\n          overlayX: 'start',\n          overlayY: 'bottom',\n\n          // The overlay edge connected to the trigger should have squared corners, while\n          // the opposite end has rounded corners. We apply a CSS class to swap the\n          // border-radius based on the overlay position.\n          panelClass: 'mat-autocomplete-panel-above'\n        }\n      ]);\n\n    return this._positionStrategy;\n  }\n\n  private _getConnectedElement(): ElementRef {\n    if (this.connectedTo) {\n      return this.connectedTo.elementRef;\n    }\n\n    return this._formField ? this._formField.getConnectedOverlayOrigin() : this._element;\n  }\n\n  private _getPanelWidth(): number | string {\n    return this.autocomplete.panelWidth || this._getHostWidth();\n  }\n\n  /** Returns the width of the input element, so the panel width can match it. */\n  private _getHostWidth(): number {\n    return this._getConnectedElement().nativeElement.getBoundingClientRect().width;\n  }\n\n  /**\n   * Resets the active item to -1 so arrow events will activate the\n   * correct options, or to 0 if the consumer opted into it.\n   */\n  private _resetActiveItem(): void {\n    this.autocomplete._keyManager.setActiveItem(this.autocomplete.autoActiveFirstOption ? 0 : -1);\n  }\n\n  /** Determines whether the panel can be opened. */\n  private _canOpen(): boolean {\n    const element = this._element.nativeElement;\n    return !element.readOnly && !element.disabled && !this._autocompleteDisabled;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {MatOptionModule, MatCommonModule} from '@angular/material/core';\nimport {MatAutocomplete} from './autocomplete';\nimport {\n  MatAutocompleteTrigger,\n  MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './autocomplete-trigger';\nimport {MatAutocompleteOrigin} from './autocomplete-origin';\n\n@NgModule({\n  imports: [MatOptionModule, OverlayModule, MatCommonModule, CommonModule],\n  exports: [\n    MatAutocomplete,\n    MatOptionModule,\n    MatAutocompleteTrigger,\n    MatAutocompleteOrigin,\n    MatCommonModule\n  ],\n  declarations: [MatAutocomplete, MatAutocompleteTrigger, MatAutocompleteOrigin],\n  providers: [MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER],\n})\nexport class MatAutocompleteModule {}\n"]}