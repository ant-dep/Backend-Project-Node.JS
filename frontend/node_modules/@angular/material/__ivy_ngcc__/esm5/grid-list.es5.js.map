{"version":3,"file":"grid-list.es5.js","sources":["../../../src/lib/grid-list/grid-list-base.ts","../../../src/lib/grid-list/grid-tile.ts","../../../src/lib/grid-list/tile-coordinator.ts","../../../src/lib/grid-list/tile-styler.ts","../../../src/lib/grid-list/grid-list.ts","../../../src/lib/grid-list/grid-list-module.ts"],"names":["tslib_1.__extends"],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n/**\n * Injection token used to provide a grid list to a tile and to avoid circular imports.\n * @docs-private\n */\nexport const MAT_GRID_LIST = new InjectionToken<MatGridListBase>('MAT_GRID_LIST');\n\n/**\n * Base interface for a `MatGridList`.\n * @docs-private\n */\nexport interface MatGridListBase {\n  cols: number;\n  gutterSize: string;\n  rowHeight: number | string;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  ElementRef,\n  Input,\n  Optional,\n  ContentChildren,\n  QueryList,\n  AfterContentInit,\n  Directive,\n  ChangeDetectionStrategy,\n  Inject,\n} from '@angular/core';\nimport {MatLine, setLines} from '@angular/material/core';\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\nimport {MAT_GRID_LIST, MatGridListBase} from './grid-list-base';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-tile',\n  exportAs: 'matGridTile',\n  host: {\n    'class': 'mat-grid-tile',\n  },\n  templateUrl: 'grid-tile.html',\n  styleUrls: ['grid-list.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatGridTile {\n  _rowspan: number = 1;\n  _colspan: number = 1;\n\n  constructor(\n    private _element: ElementRef<HTMLElement>,\n    @Optional() @Inject(MAT_GRID_LIST) public _gridList?: MatGridListBase) {}\n\n  /** Amount of rows that the grid tile takes up. */\n  @Input()\n  get rowspan(): number { return this._rowspan; }\n  set rowspan(value: number) { this._rowspan = Math.round(coerceNumberProperty(value)); }\n\n  /** Amount of columns that the grid tile takes up. */\n  @Input()\n  get colspan(): number { return this._colspan; }\n  set colspan(value: number) { this._colspan = Math.round(coerceNumberProperty(value)); }\n\n  /**\n   * Sets the style of the grid-tile element.  Needs to be set manually to avoid\n   * \"Changed after checked\" errors that would occur with HostBinding.\n   */\n  _setStyle(property: string, value: any): void {\n    (this._element.nativeElement.style as any)[property] = value;\n  }\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-tile-header, mat-grid-tile-footer',\n  templateUrl: 'grid-tile-text.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatGridTileText implements AfterContentInit {\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n\n  constructor(private _element: ElementRef<HTMLElement>) {}\n\n  ngAfterContentInit() {\n    setLines(this._lines, this._element);\n  }\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-grid-avatar], [matGridAvatar]',\n  host: {'class': 'mat-grid-avatar'}\n})\nexport class MatGridAvatarCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-grid-tile-header',\n  host: {'class': 'mat-grid-tile-header'}\n})\nexport class MatGridTileHeaderCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-grid-tile-footer',\n  host: {'class': 'mat-grid-tile-footer'}\n})\nexport class MatGridTileFooterCssMatStyler {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {MatGridTile} from './grid-tile';\n\n/**\n * Class for determining, from a list of tiles, the (row, col) position of each of those tiles\n * in the grid. This is necessary (rather than just rendering the tiles in normal document flow)\n * because the tiles can have a rowspan.\n *\n * The positioning algorithm greedily places each tile as soon as it encounters a gap in the grid\n * large enough to accommodate it so that the tiles still render in the same order in which they\n * are given.\n *\n * The basis of the algorithm is the use of an array to track the already placed tiles. Each\n * element of the array corresponds to a column, and the value indicates how many cells in that\n * column are already occupied; zero indicates an empty cell. Moving \"down\" to the next row\n * decrements each value in the tracking array (indicating that the column is one cell closer to\n * being free).\n *\n * @docs-private\n */\nexport class TileCoordinator {\n  /** Tracking array (see class description). */\n  tracker: number[];\n\n  /** Index at which the search for the next gap will start. */\n  columnIndex: number = 0;\n\n  /** The current row index. */\n  rowIndex: number = 0;\n\n  /** Gets the total number of rows occupied by tiles */\n  get rowCount(): number { return this.rowIndex + 1; }\n\n  /**\n   * Gets the total span of rows occupied by tiles.\n   * Ex: A list with 1 row that contains a tile with rowspan 2 will have a total rowspan of 2.\n   */\n  get rowspan() {\n    const lastRowMax = Math.max(...this.tracker);\n    // if any of the tiles has a rowspan that pushes it beyond the total row count,\n    // add the difference to the rowcount\n    return lastRowMax > 1 ? this.rowCount + lastRowMax - 1 : this.rowCount;\n  }\n\n  /** The computed (row, col) position of each tile (the output). */\n  positions: TilePosition[];\n\n  /**\n   * Updates the tile positions.\n   * @param numColumns Amount of columns in the grid.\n   */\n  update(numColumns: number, tiles: MatGridTile[]) {\n    this.columnIndex = 0;\n    this.rowIndex = 0;\n\n    this.tracker = new Array(numColumns);\n    this.tracker.fill(0, 0, this.tracker.length);\n    this.positions = tiles.map(tile => this._trackTile(tile));\n  }\n\n  /** Calculates the row and col position of a tile. */\n  private _trackTile(tile: MatGridTile): TilePosition {\n    // Find a gap large enough for this tile.\n    const gapStartIndex = this._findMatchingGap(tile.colspan);\n\n    // Place tile in the resulting gap.\n    this._markTilePosition(gapStartIndex, tile);\n\n    // The next time we look for a gap, the search will start at columnIndex, which should be\n    // immediately after the tile that has just been placed.\n    this.columnIndex = gapStartIndex + tile.colspan;\n\n    return new TilePosition(this.rowIndex, gapStartIndex);\n  }\n\n  /** Finds the next available space large enough to fit the tile. */\n  private _findMatchingGap(tileCols: number): number {\n    if (tileCols > this.tracker.length) {\n      throw Error(`mat-grid-list: tile with colspan ${tileCols} is wider than ` +\n                      `grid with cols=\"${this.tracker.length}\".`);\n    }\n\n    // Start index is inclusive, end index is exclusive.\n    let gapStartIndex = -1;\n    let gapEndIndex = -1;\n\n    // Look for a gap large enough to fit the given tile. Empty spaces are marked with a zero.\n    do {\n      // If we've reached the end of the row, go to the next row.\n      if (this.columnIndex + tileCols > this.tracker.length) {\n        this._nextRow();\n        gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\n        gapEndIndex = this._findGapEndIndex(gapStartIndex);\n        continue;\n      }\n\n      gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\n\n      // If there are no more empty spaces in this row at all, move on to the next row.\n      if (gapStartIndex == -1) {\n        this._nextRow();\n        gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\n        gapEndIndex = this._findGapEndIndex(gapStartIndex);\n        continue;\n      }\n\n      gapEndIndex = this._findGapEndIndex(gapStartIndex);\n\n      // If a gap large enough isn't found, we want to start looking immediately after the current\n      // gap on the next iteration.\n      this.columnIndex = gapStartIndex + 1;\n\n      // Continue iterating until we find a gap wide enough for this tile. Since gapEndIndex is\n      // exclusive, gapEndIndex is 0 means we didn't find a gap and should continue.\n    } while ((gapEndIndex - gapStartIndex < tileCols) || (gapEndIndex == 0));\n\n    // If we still didn't manage to find a gap, ensure that the index is\n    // at least zero so the tile doesn't get pulled out of the grid.\n    return Math.max(gapStartIndex, 0);\n  }\n\n  /** Move \"down\" to the next row. */\n  private _nextRow(): void {\n    this.columnIndex = 0;\n    this.rowIndex++;\n\n    // Decrement all spaces by one to reflect moving down one row.\n    for (let i = 0; i < this.tracker.length; i++) {\n      this.tracker[i] = Math.max(0, this.tracker[i] - 1);\n    }\n  }\n\n  /**\n   * Finds the end index (exclusive) of a gap given the index from which to start looking.\n   * The gap ends when a non-zero value is found.\n   */\n  private _findGapEndIndex(gapStartIndex: number): number {\n    for (let i = gapStartIndex + 1; i < this.tracker.length; i++) {\n      if (this.tracker[i] != 0) {\n        return i;\n      }\n    }\n\n    // The gap ends with the end of the row.\n    return this.tracker.length;\n  }\n\n  /** Update the tile tracker to account for the given tile in the given space. */\n  private _markTilePosition(start: number, tile: MatGridTile): void {\n    for (let i = 0; i < tile.colspan; i++) {\n      this.tracker[start + i] = tile.rowspan;\n    }\n  }\n}\n\n/**\n * Simple data structure for tile position (row, col).\n * @docs-private\n */\nexport class TilePosition {\n  constructor(public row: number, public col: number) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {MatGridList} from './grid-list';\nimport {MatGridTile} from './grid-tile';\nimport {TileCoordinator} from './tile-coordinator';\n\n/**\n * RegExp that can be used to check whether a value will\n * be allowed inside a CSS `calc()` expression.\n */\nconst cssCalcAllowedValue = /^-?\\d+((\\.\\d+)?[A-Za-z%$]?)+$/;\n\n/**\n * Sets the style properties for an individual tile, given the position calculated by the\n * Tile Coordinator.\n * @docs-private\n */\nexport abstract class TileStyler {\n  _gutterSize: string;\n  _rows: number = 0;\n  _rowspan: number = 0;\n  _cols: number;\n  _direction: string;\n\n  /**\n   * Adds grid-list layout info once it is available. Cannot be processed in the constructor\n   * because these properties haven't been calculated by that point.\n   *\n   * @param gutterSize Size of the grid's gutter.\n   * @param tracker Instance of the TileCoordinator.\n   * @param cols Amount of columns in the grid.\n   * @param direction Layout direction of the grid.\n   */\n  init(gutterSize: string, tracker: TileCoordinator, cols: number, direction: string): void {\n    this._gutterSize = normalizeUnits(gutterSize);\n    this._rows = tracker.rowCount;\n    this._rowspan = tracker.rowspan;\n    this._cols = cols;\n    this._direction = direction;\n  }\n\n  /**\n   * Computes the amount of space a single 1x1 tile would take up (width or height).\n   * Used as a basis for other calculations.\n   * @param sizePercent Percent of the total grid-list space that one 1x1 tile would take up.\n   * @param gutterFraction Fraction of the gutter size taken up by one 1x1 tile.\n   * @return The size of a 1x1 tile as an expression that can be evaluated via CSS calc().\n   */\n  getBaseTileSize(sizePercent: number, gutterFraction: number): string {\n    // Take the base size percent (as would be if evenly dividing the size between cells),\n    // and then subtracting the size of one gutter. However, since there are no gutters on the\n    // edges, each tile only uses a fraction (gutterShare = numGutters / numCells) of the gutter\n    // size. (Imagine having one gutter per tile, and then breaking up the extra gutter on the\n    // edge evenly among the cells).\n    return `(${sizePercent}% - (${this._gutterSize} * ${gutterFraction}))`;\n  }\n\n\n  /**\n   * Gets The horizontal or vertical position of a tile, e.g., the 'top' or 'left' property value.\n   * @param offset Number of tiles that have already been rendered in the row/column.\n   * @param baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n   * @return Position of the tile as a CSS calc() expression.\n   */\n  getTilePosition(baseSize: string, offset: number): string {\n    // The position comes the size of a 1x1 tile plus gutter for each previous tile in the\n    // row/column (offset).\n    return offset === 0 ? '0' : calc(`(${baseSize} + ${this._gutterSize}) * ${offset}`);\n  }\n\n\n  /**\n   * Gets the actual size of a tile, e.g., width or height, taking rowspan or colspan into account.\n   * @param baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n   * @param span The tile's rowspan or colspan.\n   * @return Size of the tile as a CSS calc() expression.\n   */\n  getTileSize(baseSize: string, span: number): string {\n    return `(${baseSize} * ${span}) + (${span - 1} * ${this._gutterSize})`;\n  }\n\n\n  /**\n   * Sets the style properties to be applied to a tile for the given row and column index.\n   * @param tile Tile to which to apply the styling.\n   * @param rowIndex Index of the tile's row.\n   * @param colIndex Index of the tile's column.\n   */\n  setStyle(tile: MatGridTile, rowIndex: number, colIndex: number): void {\n    // Percent of the available horizontal space that one column takes up.\n    let percentWidthPerTile = 100 / this._cols;\n\n    // Fraction of the vertical gutter size that each column takes up.\n    // For example, if there are 5 columns, each column uses 4/5 = 0.8 times the gutter width.\n    let gutterWidthFractionPerTile = (this._cols - 1) / this._cols;\n\n    this.setColStyles(tile, colIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n    this.setRowStyles(tile, rowIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n  }\n\n  /** Sets the horizontal placement of the tile in the list. */\n  setColStyles(tile: MatGridTile, colIndex: number, percentWidth: number,\n               gutterWidth: number) {\n    // Base horizontal size of a column.\n    let baseTileWidth = this.getBaseTileSize(percentWidth, gutterWidth);\n\n    // The width and horizontal position of each tile is always calculated the same way, but the\n    // height and vertical position depends on the rowMode.\n    let side = this._direction === 'rtl' ? 'right' : 'left';\n    tile._setStyle(side, this.getTilePosition(baseTileWidth, colIndex));\n    tile._setStyle('width', calc(this.getTileSize(baseTileWidth, tile.colspan)));\n  }\n\n  /**\n   * Calculates the total size taken up by gutters across one axis of a list.\n   */\n  getGutterSpan(): string {\n    return `${this._gutterSize} * (${this._rowspan} - 1)`;\n  }\n\n  /**\n   * Calculates the total size taken up by tiles across one axis of a list.\n   * @param tileHeight Height of the tile.\n   */\n  getTileSpan(tileHeight: string): string {\n    return `${this._rowspan} * ${this.getTileSize(tileHeight, 1)}`;\n  }\n\n  /**\n   * Sets the vertical placement of the tile in the list.\n   * This method will be implemented by each type of TileStyler.\n   * @docs-private\n   */\n  abstract setRowStyles(tile: MatGridTile, rowIndex: number, percentWidth: number,\n                        gutterWidth: number): void;\n\n  /**\n   * Calculates the computed height and returns the correct style property to set.\n   * This method can be implemented by each type of TileStyler.\n   * @docs-private\n   */\n  getComputedHeight(): [string, string] | null { return null; }\n\n  /**\n   * Called when the tile styler is swapped out with a different one. To be used for cleanup.\n   * @param list Grid list that the styler was attached to.\n   * @docs-private\n   */\n  abstract reset(list: MatGridList): void;\n}\n\n\n/**\n * This type of styler is instantiated when the user passes in a fixed row height.\n * Example `<mat-grid-list cols=\"3\" rowHeight=\"100px\">`\n * @docs-private\n */\nexport class FixedTileStyler extends TileStyler {\n\n  constructor(public fixedRowHeight: string) { super(); }\n\n  init(gutterSize: string, tracker: TileCoordinator, cols: number, direction: string) {\n    super.init(gutterSize, tracker, cols, direction);\n    this.fixedRowHeight = normalizeUnits(this.fixedRowHeight);\n\n    if (!cssCalcAllowedValue.test(this.fixedRowHeight)) {\n      throw Error(`Invalid value \"${this.fixedRowHeight}\" set as rowHeight.`);\n    }\n  }\n\n  setRowStyles(tile: MatGridTile, rowIndex: number): void {\n    tile._setStyle('top', this.getTilePosition(this.fixedRowHeight, rowIndex));\n    tile._setStyle('height', calc(this.getTileSize(this.fixedRowHeight, tile.rowspan)));\n  }\n\n  getComputedHeight(): [string, string] {\n    return [\n      'height', calc(`${this.getTileSpan(this.fixedRowHeight)} + ${this.getGutterSpan()}`)\n    ];\n  }\n\n  reset(list: MatGridList) {\n    list._setListStyle(['height', null]);\n\n    if (list._tiles) {\n      list._tiles.forEach(tile => {\n        tile._setStyle('top', null);\n        tile._setStyle('height', null);\n      });\n    }\n  }\n}\n\n\n/**\n * This type of styler is instantiated when the user passes in a width:height ratio\n * for the row height.  Example `<mat-grid-list cols=\"3\" rowHeight=\"3:1\">`\n * @docs-private\n */\nexport class RatioTileStyler extends TileStyler {\n\n  /** Ratio width:height given by user to determine row height. */\n  rowHeightRatio: number;\n  baseTileHeight: string;\n\n  constructor(value: string) {\n    super();\n    this._parseRatio(value);\n  }\n\n  setRowStyles(tile: MatGridTile, rowIndex: number, percentWidth: number,\n               gutterWidth: number): void {\n    let percentHeightPerTile = percentWidth / this.rowHeightRatio;\n    this.baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterWidth);\n\n    // Use padding-top and margin-top to maintain the given aspect ratio, as\n    // a percentage-based value for these properties is applied versus the *width* of the\n    // containing block. See http://www.w3.org/TR/CSS2/box.html#margin-properties\n    tile._setStyle('marginTop', this.getTilePosition(this.baseTileHeight, rowIndex));\n    tile._setStyle('paddingTop', calc(this.getTileSize(this.baseTileHeight, tile.rowspan)));\n  }\n\n  getComputedHeight(): [string, string] {\n    return [\n      'paddingBottom', calc(`${this.getTileSpan(this.baseTileHeight)} + ${this.getGutterSpan()}`)\n    ];\n  }\n\n  reset(list: MatGridList) {\n    list._setListStyle(['paddingBottom', null]);\n\n    list._tiles.forEach(tile => {\n      tile._setStyle('marginTop', null);\n      tile._setStyle('paddingTop', null);\n    });\n  }\n\n  private _parseRatio(value: string): void {\n    const ratioParts = value.split(':');\n\n    if (ratioParts.length !== 2) {\n      throw Error(`mat-grid-list: invalid ratio given for row-height: \"${value}\"`);\n    }\n\n    this.rowHeightRatio = parseFloat(ratioParts[0]) / parseFloat(ratioParts[1]);\n  }\n}\n\n/**\n * This type of styler is instantiated when the user selects a \"fit\" row height mode.\n * In other words, the row height will reflect the total height of the container divided\n * by the number of rows.  Example `<mat-grid-list cols=\"3\" rowHeight=\"fit\">`\n *\n * @docs-private\n */\nexport class FitTileStyler extends TileStyler {\n  setRowStyles(tile: MatGridTile, rowIndex: number): void {\n    // Percent of the available vertical space that one row takes up.\n    let percentHeightPerTile = 100 / this._rowspan;\n\n    // Fraction of the horizontal gutter size that each column takes up.\n    let gutterHeightPerTile = (this._rows - 1) / this._rows;\n\n    // Base vertical size of a column.\n    let baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterHeightPerTile);\n\n    tile._setStyle('top', this.getTilePosition(baseTileHeight, rowIndex));\n    tile._setStyle('height', calc(this.getTileSize(baseTileHeight, tile.rowspan)));\n  }\n\n  reset(list: MatGridList) {\n    if (list._tiles) {\n      list._tiles.forEach(tile => {\n        tile._setStyle('top', null);\n        tile._setStyle('height', null);\n      });\n    }\n  }\n}\n\n\n/** Wraps a CSS string in a calc function */\nfunction calc(exp: string): string { return `calc(${exp})`; }\n\n\n/** Appends pixels to a CSS string if no units are given. */\nfunction normalizeUnits(value: string): string {\n  return (value.match(/px|em|rem/)) ? value : value + 'px';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  AfterContentChecked,\n  OnInit,\n  Input,\n  ContentChildren,\n  QueryList,\n  ElementRef,\n  Optional,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {MatGridTile} from './grid-tile';\nimport {TileCoordinator} from './tile-coordinator';\nimport {TileStyler, FitTileStyler, RatioTileStyler, FixedTileStyler} from './tile-styler';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\nimport {MAT_GRID_LIST, MatGridListBase} from './grid-list-base';\n\n\n// TODO(kara): Conditional (responsive) column count / row size.\n// TODO(kara): Re-layout on window resize / media change (debounced).\n// TODO(kara): gridTileHeader and gridTileFooter.\n\nconst MAT_FIT_MODE = 'fit';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-list',\n  exportAs: 'matGridList',\n  templateUrl: 'grid-list.html',\n  styleUrls: ['grid-list.css'],\n  host: {\n    'class': 'mat-grid-list',\n  },\n  providers: [{\n    provide: MAT_GRID_LIST,\n    useExisting: MatGridList\n  }],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatGridList implements MatGridListBase, OnInit, AfterContentChecked {\n  /** Number of columns being rendered. */\n  private _cols: number;\n\n  /** Used for determiningthe position of each tile in the grid. */\n  private _tileCoordinator: TileCoordinator;\n\n  /**\n   * Row height value passed in by user. This can be one of three types:\n   * - Number value (ex: \"100px\"):  sets a fixed row height to that value\n   * - Ratio value (ex: \"4:3\"): sets the row height based on width:height ratio\n   * - \"Fit\" mode (ex: \"fit\"): sets the row height to total height divided by number of rows\n   */\n  private _rowHeight: string;\n\n  /** The amount of space between tiles. This will be something like '5px' or '2em'. */\n  private _gutter: string = '1px';\n\n  /** Sets position and size styles for a tile */\n  private _tileStyler: TileStyler;\n\n  /** Query list of tiles that are being rendered. */\n  @ContentChildren(MatGridTile, {descendants: true}) _tiles: QueryList<MatGridTile>;\n\n  constructor(private _element: ElementRef<HTMLElement>,\n              @Optional() private _dir: Directionality) {}\n\n  /** Amount of columns in the grid list. */\n  @Input()\n  get cols(): number { return this._cols; }\n  set cols(value: number) {\n    this._cols = Math.max(1, Math.round(coerceNumberProperty(value)));\n  }\n\n  /** Size of the grid list's gutter in pixels. */\n  @Input()\n  get gutterSize(): string { return this._gutter; }\n  set gutterSize(value: string) { this._gutter = `${value == null ? '' : value}`; }\n\n  /** Set internal representation of row height from the user-provided value. */\n  @Input()\n  get rowHeight(): string | number { return this._rowHeight; }\n  set rowHeight(value: string | number) {\n    const newValue = `${value == null ? '' : value}`;\n\n    if (newValue !== this._rowHeight) {\n      this._rowHeight = newValue;\n      this._setTileStyler(this._rowHeight);\n    }\n  }\n\n  ngOnInit() {\n    this._checkCols();\n    this._checkRowHeight();\n  }\n\n  /**\n   * The layout calculation is fairly cheap if nothing changes, so there's little cost\n   * to run it frequently.\n   */\n  ngAfterContentChecked() {\n    this._layoutTiles();\n  }\n\n  /** Throw a friendly error if cols property is missing */\n  private _checkCols() {\n    if (!this.cols) {\n      throw Error(`mat-grid-list: must pass in number of columns. ` +\n                  `Example: <mat-grid-list cols=\"3\">`);\n    }\n  }\n\n  /** Default to equal width:height if rowHeight property is missing */\n  private _checkRowHeight(): void {\n    if (!this._rowHeight) {\n      this._setTileStyler('1:1');\n    }\n  }\n\n  /** Creates correct Tile Styler subtype based on rowHeight passed in by user */\n  private _setTileStyler(rowHeight: string): void {\n    if (this._tileStyler) {\n      this._tileStyler.reset(this);\n    }\n\n    if (rowHeight === MAT_FIT_MODE) {\n      this._tileStyler = new FitTileStyler();\n    } else if (rowHeight && rowHeight.indexOf(':') > -1) {\n      this._tileStyler = new RatioTileStyler(rowHeight);\n    } else {\n      this._tileStyler = new FixedTileStyler(rowHeight);\n    }\n  }\n\n  /** Computes and applies the size and position for all children grid tiles. */\n  private _layoutTiles(): void {\n    if (!this._tileCoordinator) {\n      this._tileCoordinator = new TileCoordinator();\n    }\n\n\n    const tracker = this._tileCoordinator;\n    const tiles = this._tiles.filter(tile => !tile._gridList || tile._gridList === this);\n    const direction = this._dir ? this._dir.value : 'ltr';\n\n    this._tileCoordinator.update(this.cols, tiles);\n    this._tileStyler.init(this.gutterSize, tracker, this.cols, direction);\n\n    tiles.forEach((tile, index) => {\n      const pos = tracker.positions[index];\n      this._tileStyler.setStyle(tile, pos.row, pos.col);\n    });\n\n    this._setListStyle(this._tileStyler.getComputedHeight());\n  }\n\n  /** Sets style on the main grid-list element, given the style name and value. */\n  _setListStyle(style: [string, string | null] | null): void {\n    if (style) {\n      (this._element.nativeElement.style as any)[style[0]] = style[1];\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatLineModule, MatCommonModule} from '@angular/material/core';\nimport {\n  MatGridTile, MatGridTileText, MatGridTileFooterCssMatStyler,\n  MatGridTileHeaderCssMatStyler, MatGridAvatarCssMatStyler\n} from './grid-tile';\nimport {MatGridList} from './grid-list';\n\n\n@NgModule({\n  imports: [MatLineModule, MatCommonModule],\n  exports: [\n    MatGridList,\n    MatGridTile,\n    MatGridTileText,\n    MatLineModule,\n    MatCommonModule,\n    MatGridTileHeaderCssMatStyler,\n    MatGridTileFooterCssMatStyler,\n    MatGridAvatarCssMatStyler\n  ],\n  declarations: [\n    MatGridList,\n    MatGridTile,\n    MatGridTileText,\n    MatGridTileHeaderCssMatStyler,\n    MatGridTileFooterCssMatStyler,\n    MatGridAvatarCssMatStyler\n  ],\n})\nexport class MatGridListModule {}\n"]}