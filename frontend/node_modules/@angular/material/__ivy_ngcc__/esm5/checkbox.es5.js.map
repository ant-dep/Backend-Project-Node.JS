{"version":3,"file":"checkbox.es5.js","sources":["../../../src/lib/checkbox/checkbox-config.ts","../../../src/lib/checkbox/checkbox.ts","../../../src/lib/checkbox/checkbox-required-validator.ts","../../../src/lib/checkbox/checkbox-module.ts"],"names":["tslib_1.__extends"],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {InjectionToken} from '@angular/core';\n\n\n/**\n * Checkbox click action when user click on input element.\n * noop: Do not toggle checked or indeterminate.\n * check: Only toggle checked status, ignore indeterminate.\n * check-indeterminate: Toggle checked status, set indeterminate to false. Default behavior.\n * undefined: Same as `check-indeterminate`.\n */\nexport type MatCheckboxClickAction = 'noop' | 'check' | 'check-indeterminate' | undefined;\n\n/**\n * Injection token that can be used to specify the checkbox click behavior.\n */\nexport const MAT_CHECKBOX_CLICK_ACTION =\n    new InjectionToken<MatCheckboxClickAction>('mat-checkbox-click-action');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n  AfterViewChecked,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanColorCtor,\n  CanDisable,\n  CanDisableCtor,\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  HasTabIndex,\n  HasTabIndexCtor,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {MAT_CHECKBOX_CLICK_ACTION, MatCheckboxClickAction} from './checkbox-config';\n\n\n// Increasing integer for generating unique ids for checkbox components.\nlet nextUniqueId = 0;\n\n// TODO(josephperrott): Revert to constants for ripple radius once 2018 Checkbox updates have\n// landed.\n// The radius for the checkbox's ripple, in pixels.\nlet calculatedRippleRadius = 0;\n\n/**\n * Provider Expression that allows mat-checkbox to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nexport const MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatCheckbox),\n  multi: true\n};\n\n/**\n * Represents the different states that require custom transitions between them.\n * @docs-private\n */\nexport enum TransitionCheckState {\n  /** The initial state of the component before any user interaction. */\n  Init,\n  /** The state representing the component when it's becoming checked. */\n  Checked,\n  /** The state representing the component when it's becoming unchecked. */\n  Unchecked,\n  /** The state representing the component when it's becoming indeterminate. */\n  Indeterminate\n}\n\n/** Change event object emitted by MatCheckbox. */\nexport class MatCheckboxChange {\n  /** The source MatCheckbox of the event. */\n  source: MatCheckbox;\n  /** The new `checked` value of the checkbox. */\n  checked: boolean;\n}\n\n// Boilerplate for applying mixins to MatCheckbox.\n/** @docs-private */\nexport class MatCheckboxBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatCheckboxMixinBase:\n    HasTabIndexCtor &\n    CanColorCtor &\n    CanDisableRippleCtor &\n    CanDisableCtor &\n    typeof MatCheckboxBase =\n        mixinTabIndex(mixinColor(mixinDisableRipple(mixinDisabled(MatCheckboxBase)), 'accent'));\n\n\n/**\n * A material design checkbox component. Supports all of the functionality of an HTML5 checkbox,\n * and exposes a similar API. A MatCheckbox can be either checked, unchecked, indeterminate, or\n * disabled. Note that all additional accessibility attributes are taken care of by the component,\n * so there is no need to provide them yourself. However, if you want to omit a label and still\n * have the checkbox be accessible, you may supply an [aria-label] input.\n * See: https://material.io/design/components/selection-controls.html\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-checkbox',\n  templateUrl: 'checkbox.html',\n  styleUrls: ['checkbox.css'],\n  exportAs: 'matCheckbox',\n  host: {\n    'class': 'mat-checkbox',\n    '[id]': 'id',\n    '[attr.tabindex]': 'null',\n    '[class.mat-checkbox-indeterminate]': 'indeterminate',\n    '[class.mat-checkbox-checked]': 'checked',\n    '[class.mat-checkbox-disabled]': 'disabled',\n    '[class.mat-checkbox-label-before]': 'labelPosition == \"before\"',\n    '[class._mat-animation-noopable]': `_animationMode === 'NoopAnimations'`,\n  },\n  providers: [MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR],\n  inputs: ['disableRipple', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatCheckbox extends _MatCheckboxMixinBase implements ControlValueAccessor,\n    AfterViewChecked, OnDestroy, CanColor, CanDisable, HasTabIndex, CanDisableRipple {\n\n  /**\n   * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will\n   * take precedence so this may be omitted.\n   */\n  @Input('aria-label') ariaLabel: string = '';\n\n  /**\n   * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n   */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  private _uniqueId: string = `mat-checkbox-${++nextUniqueId}`;\n\n  /** A unique id for the checkbox input. If none is supplied, it will be auto-generated. */\n  @Input() id: string = this._uniqueId;\n\n  /** Returns the unique id for the visual hidden input. */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Whether the checkbox is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) { this._required = coerceBooleanProperty(value); }\n  private _required: boolean;\n\n  /** Whether the label should appear after or before the checkbox. Defaults to 'after' */\n  @Input() labelPosition: 'before' | 'after' = 'after';\n\n  /** Name value will be applied to the input element if present */\n  @Input() name: string | null = null;\n\n  /** Event emitted when the checkbox's `checked` value changes. */\n  @Output() readonly change: EventEmitter<MatCheckboxChange> =\n      new EventEmitter<MatCheckboxChange>();\n\n  /** Event emitted when the checkbox's `indeterminate` value changes. */\n  @Output() readonly indeterminateChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** The value attribute of the native input element */\n  @Input() value: string;\n\n  /** The native `<input type=\"checkbox\">` element */\n  @ViewChild('input') _inputElement: ElementRef<HTMLInputElement>;\n\n  /** Reference to the ripple instance of the checkbox. */\n  @ViewChild(MatRipple) ripple: MatRipple;\n\n  /**\n   * Called when the checkbox is blurred. Needed to properly implement ControlValueAccessor.\n   * @docs-private\n   */\n  _onTouched: () => any = () => {};\n\n  private _currentAnimationClass: string = '';\n\n  private _currentCheckState: TransitionCheckState = TransitionCheckState.Init;\n\n  private _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  constructor(elementRef: ElementRef<HTMLElement>,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _focusMonitor: FocusMonitor,\n              private _ngZone: NgZone,\n              @Attribute('tabindex') tabIndex: string,\n              @Optional() @Inject(MAT_CHECKBOX_CLICK_ACTION)\n                  private _clickAction: MatCheckboxClickAction,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(elementRef);\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n\n    this._focusMonitor.monitor(elementRef, true).subscribe(focusOrigin => {\n      if (!focusOrigin) {\n        // When a focused element becomes disabled, the browser *immediately* fires a blur event.\n        // Angular does not expect events to be raised during change detection, so any state change\n        // (such as a form control's 'ng-touched') will cause a changed-after-checked error.\n        // See https://github.com/angular/angular/issues/17793. To work around this, we defer\n        // telling the form control it has been touched until the next tick.\n        Promise.resolve().then(() => this._onTouched());\n      }\n    });\n  }\n\n  ngAfterViewChecked() {\n    this._calculateRippleRadius();\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n\n  /**\n   * Whether the checkbox is checked.\n   */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value: boolean) {\n    if (value != this.checked) {\n      this._checked = value;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _checked: boolean = false;\n\n  /**\n   * Whether the checkbox is disabled. This fully overrides the implementation provided by\n   * mixinDisabled, but the mixin is still required because mixinTabIndex requires it.\n   */\n  @Input()\n  get disabled() { return this._disabled; }\n  set disabled(value: any) {\n    if (value != this.disabled) {\n      this._disabled = value;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _disabled: boolean = false;\n\n  /**\n   * Whether the checkbox is indeterminate. This is also known as \"mixed\" mode and can be used to\n   * represent a checkbox with three states, e.g. a checkbox that represents a nested list of\n   * checkable items. Note that whenever checkbox is manually clicked, indeterminate is immediately\n   * set to false.\n   */\n  @Input()\n  get indeterminate(): boolean { return this._indeterminate; }\n  set indeterminate(value: boolean) {\n    const changed = value != this._indeterminate;\n    this._indeterminate = value;\n\n    if (changed) {\n      if (this._indeterminate) {\n        this._transitionCheckState(TransitionCheckState.Indeterminate);\n      } else {\n        this._transitionCheckState(\n          this.checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n      }\n      this.indeterminateChange.emit(this._indeterminate);\n    }\n  }\n  private _indeterminate: boolean = false;\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  /** Method being called whenever the label text changes. */\n  _onLabelTextChange() {\n    // Since the event of the `cdkObserveContent` directive runs outside of the zone, the checkbox\n    // component will be only marked for check, but no actual change detection runs automatically.\n    // Instead of going back into the zone in order to trigger a change detection which causes\n    // *all* components to be checked (if explicitly marked or not using OnPush), we only trigger\n    // an explicit change detection for the checkbox view and it's children.\n    this._changeDetectorRef.detectChanges();\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: any) {\n    this.checked = !!value;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: any) {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n  }\n\n  _getAriaChecked(): 'true' | 'false' | 'mixed' {\n    return this.checked ? 'true' : (this.indeterminate ? 'mixed' : 'false');\n  }\n\n  private _transitionCheckState(newState: TransitionCheckState) {\n    let oldState = this._currentCheckState;\n    let element: HTMLElement = this._elementRef.nativeElement;\n\n    if (oldState === newState) {\n      return;\n    }\n    if (this._currentAnimationClass.length > 0) {\n      element.classList.remove(this._currentAnimationClass);\n    }\n\n    this._currentAnimationClass = this._getAnimationClassForCheckStateTransition(\n        oldState, newState);\n    this._currentCheckState = newState;\n\n    if (this._currentAnimationClass.length > 0) {\n      element.classList.add(this._currentAnimationClass);\n\n      // Remove the animation class to avoid animation when the checkbox is moved between containers\n      const animationClass = this._currentAnimationClass;\n\n      this._ngZone.runOutsideAngular(() => {\n        setTimeout(() => {\n          element.classList.remove(animationClass);\n        }, 1000);\n      });\n    }\n  }\n\n  private _emitChangeEvent() {\n    const event = new MatCheckboxChange();\n    event.source = this;\n    event.checked = this.checked;\n\n    this._controlValueAccessorChangeFn(this.checked);\n    this.change.emit(event);\n  }\n\n  /** Toggles the `checked` state of the checkbox. */\n  toggle(): void {\n    this.checked = !this.checked;\n  }\n\n  /**\n   * Event handler for checkbox input element.\n   * Toggles checked state if element is not disabled.\n   * Do not toggle on (change) event since IE doesn't fire change event when\n   *   indeterminate checkbox is clicked.\n   * @param event\n   */\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `checkbox` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n\n    // If resetIndeterminate is false, and the current state is indeterminate, do nothing on click\n    if (!this.disabled && this._clickAction !== 'noop') {\n      // When user manually click on the checkbox, `indeterminate` is set to false.\n      if (this.indeterminate && this._clickAction !== 'check') {\n\n        Promise.resolve().then(() => {\n          this._indeterminate = false;\n          this.indeterminateChange.emit(this._indeterminate);\n        });\n      }\n\n      this.toggle();\n      this._transitionCheckState(\n          this._checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n\n      // Emit our custom change event if the native input emitted one.\n      // It is important to only emit it, if the native input triggered one, because\n      // we don't want to trigger a change event, when the `checked` variable changes for example.\n      this._emitChangeEvent();\n    } else if (!this.disabled && this._clickAction === 'noop') {\n      // Reset native input when clicked with noop. The native checkbox becomes checked after\n      // click, reset it to be align with `checked` value of `mat-checkbox`.\n      this._inputElement.nativeElement.checked = this.checked;\n      this._inputElement.nativeElement.indeterminate = this.indeterminate;\n    }\n  }\n\n  /** Focuses the checkbox. */\n  focus(): void {\n    this._focusMonitor.focusVia(this._inputElement, 'keyboard');\n  }\n\n  _onInteractionEvent(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the `change` output.\n    event.stopPropagation();\n  }\n\n  private _getAnimationClassForCheckStateTransition(\n      oldState: TransitionCheckState, newState: TransitionCheckState): string {\n    // Don't transition if animations are disabled.\n    if (this._animationMode === 'NoopAnimations') {\n      return '';\n    }\n\n    let animSuffix: string = '';\n\n    switch (oldState) {\n      case TransitionCheckState.Init:\n        // Handle edge case where user interacts with checkbox that does not have [(ngModel)] or\n        // [checked] bound to it.\n        if (newState === TransitionCheckState.Checked) {\n          animSuffix = 'unchecked-checked';\n        } else if (newState == TransitionCheckState.Indeterminate) {\n          animSuffix = 'unchecked-indeterminate';\n        } else {\n          return '';\n        }\n        break;\n      case TransitionCheckState.Unchecked:\n        animSuffix = newState === TransitionCheckState.Checked ?\n            'unchecked-checked' : 'unchecked-indeterminate';\n        break;\n      case TransitionCheckState.Checked:\n        animSuffix = newState === TransitionCheckState.Unchecked ?\n            'checked-unchecked' : 'checked-indeterminate';\n        break;\n      case TransitionCheckState.Indeterminate:\n        animSuffix = newState === TransitionCheckState.Checked ?\n            'indeterminate-checked' : 'indeterminate-unchecked';\n        break;\n    }\n\n    return `mat-checkbox-anim-${animSuffix}`;\n  }\n\n  // TODO(josephperrott): Revert to constants for ripple radius once 2018 Checkbox updates have\n  // landed.\n  /**\n   * Calculate the radius for the ripple based on the ripple elements width.  Only calculated once\n   * for the application.\n   */\n  private _calculateRippleRadius() {\n    if (!calculatedRippleRadius) {\n      const rippleWidth =\n          this._elementRef.nativeElement.querySelector('.mat-checkbox-ripple').clientWidth || 0;\n      calculatedRippleRadius = rippleWidth / 2;\n    }\n    this.ripple.radius = calculatedRippleRadius;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  forwardRef,\n  Provider,\n} from '@angular/core';\nimport {\n  CheckboxRequiredValidator,\n  NG_VALIDATORS,\n} from '@angular/forms';\n\nexport const MAT_CHECKBOX_REQUIRED_VALIDATOR: Provider = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => MatCheckboxRequiredValidator),\n  multi: true\n};\n\n/**\n * Validator for Material checkbox's required attribute in template-driven checkbox.\n * Current CheckboxRequiredValidator only work with `input type=checkbox` and does not\n * work with `mat-checkbox`.\n */\n@Directive({\n  selector: `mat-checkbox[required][formControlName],\n             mat-checkbox[required][formControl], mat-checkbox[required][ngModel]`,\n  providers: [MAT_CHECKBOX_REQUIRED_VALIDATOR],\n  host: {'[attr.required]': 'required ? \"\" : null'}\n})\nexport class MatCheckboxRequiredValidator extends CheckboxRequiredValidator {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatCheckbox} from './checkbox';\nimport {MatCheckboxRequiredValidator} from './checkbox-required-validator';\n\n\n@NgModule({\n  imports: [CommonModule, MatRippleModule, MatCommonModule, ObserversModule],\n  exports: [MatCheckbox, MatCheckboxRequiredValidator, MatCommonModule],\n  declarations: [MatCheckbox, MatCheckboxRequiredValidator],\n})\nexport class MatCheckboxModule {}\n"]}