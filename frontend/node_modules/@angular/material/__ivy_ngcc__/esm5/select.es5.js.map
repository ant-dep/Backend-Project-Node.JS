{"version":3,"file":"select.es5.js","sources":["../../../src/lib/select/select-animations.ts","../../../src/lib/select/select-errors.ts","../../../src/lib/select/select.ts","../../../src/lib/select/select-module.ts"],"names":["tslib_1.__extends"],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  animate,\n  AnimationTriggerMetadata,\n  state,\n  style,\n  transition,\n  trigger,\n} from '@angular/animations';\n\n/**\n * The following are all the animations for the mat-select component, with each\n * const containing the metadata for one animation.\n *\n * The values below match the implementation of the AngularJS Material mat-select animation.\n * @docs-private\n */\nexport const matSelectAnimations: {\n  readonly transformPanel: AnimationTriggerMetadata;\n  readonly fadeInContent: AnimationTriggerMetadata;\n} = {\n  /**\n   * This animation transforms the select's overlay panel on and off the page.\n   *\n   * When the panel is attached to the DOM, it expands its width by the amount of padding, scales it\n   * up to 100% on the Y axis, fades in its border, and translates slightly up and to the\n   * side to ensure the option text correctly overlaps the trigger text.\n   *\n   * When the panel is removed from the DOM, it simply fades out linearly.\n   */\n  transformPanel: trigger('transformPanel', [\n    state('void', style({\n      transform: 'scaleY(0.8)',\n      minWidth: '100%',\n      opacity: 0\n    })),\n    state('showing', style({\n      opacity: 1,\n      minWidth: 'calc(100% + 32px)', // 32px = 2 * 16px padding\n      transform: 'scaleY(1)'\n    })),\n    state('showing-multiple', style({\n      opacity: 1,\n      minWidth: 'calc(100% + 64px)', // 64px = 48px padding on the left + 16px padding on the right\n      transform: 'scaleY(1)'\n    })),\n    transition('void => *', animate('120ms cubic-bezier(0, 0, 0.2, 1)')),\n    transition('* => void', animate('100ms 25ms linear', style({opacity: 0})))\n  ]),\n\n  /**\n   * This animation fades in the background color and text content of the\n   * select's options. It is time delayed to occur 100ms after the overlay\n   * panel has transformed in.\n   * @deprecated Not used anymore. To be removed.\n   * @breaking-change 8.0.0\n   */\n  fadeInContent: trigger('fadeInContent', [\n    state('showing', style({opacity: 1})),\n    transition('void => showing', [\n      style({opacity: 0}),\n      animate('150ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)')\n    ])\n  ])\n};\n\n\n/**\n * @deprecated\n * @breaking-change 8.0.0\n * @docs-private\n */\nexport const transformPanel = matSelectAnimations.transformPanel;\n\n/**\n * @deprecated\n * @breaking-change 8.0.0\n * @docs-private\n */\nexport const fadeInContent = matSelectAnimations.fadeInContent;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Returns an exception to be thrown when attempting to change a select's `multiple` option\n * after initialization.\n * @docs-private\n */\nexport function getMatSelectDynamicMultipleError(): Error {\n  return Error('Cannot change `multiple` mode of select after initialization.');\n}\n\n/**\n * Returns an exception to be thrown when attempting to assign a non-array value to a select\n * in `multiple` mode. Note that `undefined` and `null` are still valid values to allow for\n * resetting the value.\n * @docs-private\n */\nexport function getMatSelectNonArrayValueError(): Error {\n  return Error('Value must be an array in multiple-selection mode.');\n}\n\n/**\n * Returns an exception to be thrown when assigning a non-function value to the comparator\n * used to determine if a value corresponds to an option. Note that whether the function\n * actually takes two values and returns a boolean is not checked.\n */\nexport function getMatSelectNonFunctionValueError(): Error {\n  return Error('`compareWith` must be a function.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ActiveDescendantKeyManager} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {\n  A,\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  RIGHT_ARROW,\n  SPACE,\n  UP_ARROW,\n} from '@angular/cdk/keycodes';\nimport {CdkConnectedOverlay, Overlay, ScrollStrategy} from '@angular/cdk/overlay';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  isDevMode,\n  NgZone,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  Self,\n  SimpleChanges,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {\n  _countGroupLabelsBeforeOption,\n  _getOptionScrollPosition,\n  CanDisable,\n  CanDisableCtor,\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  CanUpdateErrorState,\n  CanUpdateErrorStateCtor,\n  ErrorStateMatcher,\n  HasTabIndex,\n  HasTabIndexCtor,\n  MAT_OPTION_PARENT_COMPONENT,\n  MatOptgroup,\n  MatOption,\n  MatOptionSelectionChange,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinErrorState,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {MatFormField, MatFormFieldControl} from '@angular/material/form-field';\nimport {defer, merge, Observable, Subject} from 'rxjs';\nimport {\n  distinctUntilChanged,\n  filter,\n  map,\n  startWith,\n  switchMap,\n  take,\n  takeUntil,\n} from 'rxjs/operators';\nimport {matSelectAnimations} from './select-animations';\nimport {\n  getMatSelectDynamicMultipleError,\n  getMatSelectNonArrayValueError,\n  getMatSelectNonFunctionValueError,\n} from './select-errors';\n\n\nlet nextUniqueId = 0;\n\n/**\n * The following style constants are necessary to save here in order\n * to properly calculate the alignment of the selected option over\n * the trigger element.\n */\n\n/** The max height of the select's overlay panel */\nexport const SELECT_PANEL_MAX_HEIGHT = 256;\n\n/** The panel's padding on the x-axis */\nexport const SELECT_PANEL_PADDING_X = 16;\n\n/** The panel's x axis padding if it is indented (e.g. there is an option group). */\nexport const SELECT_PANEL_INDENT_PADDING_X = SELECT_PANEL_PADDING_X * 2;\n\n/** The height of the select items in `em` units. */\nexport const SELECT_ITEM_HEIGHT_EM = 3;\n\n// TODO(josephperrott): Revert to a constant after 2018 spec updates are fully merged.\n/**\n * Distance between the panel edge and the option text in\n * multi-selection mode.\n *\n * Calculated as:\n * (SELECT_PANEL_PADDING_X * 1.5) + 20 = 44\n * The padding is multiplied by 1.5 because the checkbox's margin is half the padding.\n * The checkbox width is 16px.\n */\nexport let SELECT_MULTIPLE_PANEL_PADDING_X = 0;\n\n/**\n * The select panel will only \"fit\" inside the viewport if it is positioned at\n * this value or more away from the viewport boundary.\n */\nexport const SELECT_PANEL_VIEWPORT_PADDING = 8;\n\n/** Injection token that determines the scroll handling while a select is open. */\nexport const MAT_SELECT_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-select-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_SELECT_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_SELECT_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n/** Change event object that is emitted when the select value has changed. */\nexport class MatSelectChange {\n  constructor(\n    /** Reference to the select that emitted the change event. */\n    public source: MatSelect,\n    /** Current value of the select that emitted the event. */\n    public value: any) { }\n}\n\n// Boilerplate for applying mixins to MatSelect.\n/** @docs-private */\nexport class MatSelectBase {\n  constructor(public _elementRef: ElementRef,\n              public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              public ngControl: NgControl) {}\n}\nexport const _MatSelectMixinBase:\n    CanDisableCtor &\n    HasTabIndexCtor &\n    CanDisableRippleCtor &\n    CanUpdateErrorStateCtor &\n    typeof MatSelectBase =\n        mixinDisableRipple(mixinTabIndex(mixinDisabled(mixinErrorState(MatSelectBase))));\n\n\n/**\n * Allows the user to customize the trigger that is displayed when the select has a value.\n */\n@Directive({\n  selector: 'mat-select-trigger'\n})\nexport class MatSelectTrigger {}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-select',\n  exportAs: 'matSelect',\n  templateUrl: 'select.html',\n  styleUrls: ['select.css'],\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'role': 'listbox',\n    '[attr.id]': 'id',\n    '[attr.tabindex]': 'tabIndex',\n    '[attr.aria-label]': '_getAriaLabel()',\n    '[attr.aria-labelledby]': '_getAriaLabelledby()',\n    '[attr.aria-required]': 'required.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-owns]': 'panelOpen ? _optionIds : null',\n    '[attr.aria-multiselectable]': 'multiple',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-activedescendant]': '_getAriaActiveDescendant()',\n    '[class.mat-select-disabled]': 'disabled',\n    '[class.mat-select-invalid]': 'errorState',\n    '[class.mat-select-required]': 'required',\n    '[class.mat-select-empty]': 'empty',\n    'class': 'mat-select',\n    '(keydown)': '_handleKeydown($event)',\n    '(focus)': '_onFocus()',\n    '(blur)': '_onBlur()',\n  },\n  animations: [\n    matSelectAnimations.transformPanel\n  ],\n  providers: [\n    {provide: MatFormFieldControl, useExisting: MatSelect},\n    {provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatSelect}\n  ],\n})\nexport class MatSelect extends _MatSelectMixinBase implements AfterContentInit, OnChanges,\n    OnDestroy, OnInit, DoCheck, ControlValueAccessor, CanDisable, HasTabIndex,\n    MatFormFieldControl<any>, CanUpdateErrorState, CanDisableRipple {\n  private _scrollStrategyFactory: () => ScrollStrategy;\n\n  /** Whether or not the overlay panel is open. */\n  private _panelOpen = false;\n\n  /** Whether filling out the select is required in the form. */\n  private _required: boolean = false;\n\n  /** The scroll position of the overlay panel, calculated to center the selected option. */\n  private _scrollTop = 0;\n\n  /** The placeholder displayed in the trigger of the select. */\n  private _placeholder: string;\n\n  /** Whether the component is in multiple selection mode. */\n  private _multiple: boolean = false;\n\n  /** Comparison function to specify which option is displayed. Defaults to object equality. */\n  private _compareWith = (o1: any, o2: any) => o1 === o2;\n\n  /** Unique id for this input. */\n  private _uid = `mat-select-${nextUniqueId++}`;\n\n  /** Emits whenever the component is destroyed. */\n  private readonly _destroy = new Subject<void>();\n\n  /** The last measured value for the trigger's client bounding rect. */\n  _triggerRect: ClientRect;\n\n  /** The aria-describedby attribute on the select for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** The cached font-size of the trigger element. */\n  _triggerFontSize = 0;\n\n  /** Deals with the selection logic. */\n  _selectionModel: SelectionModel<MatOption>;\n\n  /** Manages keyboard events for options in the panel. */\n  _keyManager: ActiveDescendantKeyManager<MatOption>;\n\n  /** `View -> model callback called when value changes` */\n  _onChange: (value: any) => void = () => {};\n\n  /** `View -> model callback called when select has been touched` */\n  _onTouched = () => {};\n\n  /** The IDs of child options to be passed to the aria-owns attribute. */\n  _optionIds: string = '';\n\n  /** The value of the select panel's transform-origin property. */\n  _transformOrigin: string = 'top';\n\n  /** Emits when the panel element is finished transforming in. */\n  _panelDoneAnimatingStream = new Subject<string>();\n\n  /** Strategy that will be used to handle scrolling while the select panel is open. */\n  _scrollStrategy: ScrollStrategy;\n\n  /**\n   * The y-offset of the overlay panel in relation to the trigger's top start corner.\n   * This must be adjusted to align the selected option text over the trigger text.\n   * when the panel opens. Will change based on the y-position of the selected option.\n   */\n  _offsetY = 0;\n\n  /**\n   * This position config ensures that the top \"start\" corner of the overlay\n   * is aligned with with the top \"start\" of the origin by default (overlapping\n   * the trigger completely). If the panel cannot fit below the trigger, it\n   * will fall back to a position above the trigger.\n   */\n  _positions = [\n    {\n      originX: 'start',\n      originY: 'top',\n      overlayX: 'start',\n      overlayY: 'top',\n    },\n    {\n      originX: 'start',\n      originY: 'bottom',\n      overlayX: 'start',\n      overlayY: 'bottom',\n    },\n  ];\n\n  /** Whether the component is disabling centering of the active option over the trigger. */\n  private _disableOptionCentering: boolean = false;\n\n  /** Whether the select is focused. */\n  get focused(): boolean {\n    return this._focused || this._panelOpen;\n  }\n  /**\n   * @deprecated Setter to be removed as this property is intended to be readonly.\n   * @breaking-change 8.0.0\n   */\n  set focused(value: boolean) {\n    this._focused = value;\n  }\n  private _focused = false;\n\n  /** A name for this control that can be used by `mat-form-field`. */\n  controlType = 'mat-select';\n\n  /** Trigger that opens the select. */\n  @ViewChild('trigger') trigger: ElementRef;\n\n  /** Panel containing the select options. */\n  @ViewChild('panel') panel: ElementRef;\n\n  /** Overlay pane containing the options. */\n  @ViewChild(CdkConnectedOverlay) overlayDir: CdkConnectedOverlay;\n\n  /** All of the defined select options. */\n  @ContentChildren(MatOption, { descendants: true }) options: QueryList<MatOption>;\n\n  /** All of the defined groups of options. */\n  @ContentChildren(MatOptgroup) optionGroups: QueryList<MatOptgroup>;\n\n  /** Classes to be passed to the select panel. Supports the same syntax as `ngClass`. */\n  @Input() panelClass: string|string[]|Set<string>|{[key: string]: any};\n\n  /** User-supplied override of the trigger element. */\n  @ContentChild(MatSelectTrigger) customTrigger: MatSelectTrigger;\n\n  /** Placeholder to be shown if no value has been selected. */\n  @Input()\n  get placeholder(): string { return this._placeholder; }\n  set placeholder(value: string) {\n    this._placeholder = value;\n    this.stateChanges.next();\n  }\n\n  /** Whether the component is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this.stateChanges.next();\n  }\n\n  /** Whether the user should be allowed to select multiple options. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    if (this._selectionModel) {\n      throw getMatSelectDynamicMultipleError();\n    }\n\n    this._multiple = coerceBooleanProperty(value);\n  }\n\n  /** Whether to center the active option over the trigger. */\n  @Input()\n  get disableOptionCentering(): boolean { return this._disableOptionCentering; }\n  set disableOptionCentering(value: boolean) {\n    this._disableOptionCentering = coerceBooleanProperty(value);\n  }\n\n  /**\n   * Function to compare the option values with the selected values. The first argument\n   * is a value from an option. The second is a value from the selection. A boolean\n   * should be returned.\n   */\n  @Input()\n  get compareWith() { return this._compareWith; }\n  set compareWith(fn: (o1: any, o2: any) => boolean) {\n    if (typeof fn !== 'function') {\n      throw getMatSelectNonFunctionValueError();\n    }\n    this._compareWith = fn;\n    if (this._selectionModel) {\n      // A different comparator means the selection could change.\n      this._initializeSelection();\n    }\n  }\n\n  /** Value of the select control. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(newValue: any) {\n    if (newValue !== this._value) {\n      this.writeValue(newValue);\n      this._value = newValue;\n    }\n  }\n  private _value: any;\n\n  /** Aria label of the select. If not specified, the placeholder will be used as label. */\n  @Input('aria-label') ariaLabel: string = '';\n\n  /** Input that can be used to specify the `aria-labelledby` attribute. */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** Object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /**\n   * Function used to sort the values in a select in multiple mode.\n   * Follows the same logic as `Array.prototype.sort`.\n   */\n  @Input() sortComparator: (a: MatOption, b: MatOption, options: MatOption[]) => number;\n\n  /** Unique id of the element. */\n  @Input()\n  get id(): string { return this._id; }\n  set id(value: string) {\n    this._id = value || this._uid;\n    this.stateChanges.next();\n  }\n  private _id: string;\n\n  /** Combined stream of all of the child options' change events. */\n  readonly optionSelectionChanges: Observable<MatOptionSelectionChange> = defer(() => {\n    if (this.options) {\n      return merge(...this.options.map(option => option.onSelectionChange));\n    }\n\n    return this._ngZone.onStable\n      .asObservable()\n      .pipe(take(1), switchMap(() => this.optionSelectionChanges));\n  });\n\n  /** Event emitted when the select panel has been toggled. */\n  @Output() readonly openedChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted when the select has been opened. */\n  @Output('opened') readonly _openedStream: Observable<void> =\n      this.openedChange.pipe(filter(o => o), map(() => {}));\n\n  /** Event emitted when the select has been closed. */\n  @Output('closed') readonly _closedStream: Observable<void> =\n      this.openedChange.pipe(filter(o => !o), map(() => {}));\n\n   /** Event emitted when the selected value has been changed by the user. */\n  @Output() readonly selectionChange: EventEmitter<MatSelectChange> =\n      new EventEmitter<MatSelectChange>();\n\n  /**\n   * Event that emits whenever the raw value of the select changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output() readonly valueChange: EventEmitter<any> = new EventEmitter<any>();\n\n  constructor(\n    private _viewportRuler: ViewportRuler,\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _ngZone: NgZone,\n    _defaultErrorStateMatcher: ErrorStateMatcher,\n    elementRef: ElementRef,\n    @Optional() private _dir: Directionality,\n    @Optional() _parentForm: NgForm,\n    @Optional() _parentFormGroup: FormGroupDirective,\n    @Optional() private _parentFormField: MatFormField,\n    @Self() @Optional() public ngControl: NgControl,\n    @Attribute('tabindex') tabIndex: string,\n    @Inject(MAT_SELECT_SCROLL_STRATEGY) scrollStrategyFactory: any) {\n    super(elementRef, _defaultErrorStateMatcher, _parentForm,\n          _parentFormGroup, ngControl);\n\n    if (this.ngControl) {\n      // Note: we provide the value accessor through here, instead of\n      // the `providers` to avoid running into a circular import.\n      this.ngControl.valueAccessor = this;\n    }\n\n    this._scrollStrategyFactory = scrollStrategyFactory;\n    this._scrollStrategy = this._scrollStrategyFactory();\n    this.tabIndex = parseInt(tabIndex) || 0;\n\n    // Force setter to be called in case id was not specified.\n    this.id = this.id;\n  }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatOption>(this.multiple);\n    this.stateChanges.next();\n\n    // We need `distinctUntilChanged` here, because some browsers will\n    // fire the animation end event twice for the same animation. See:\n    // https://github.com/angular/angular/issues/24084\n    this._panelDoneAnimatingStream\n      .pipe(distinctUntilChanged(), takeUntil(this._destroy))\n      .subscribe(() => {\n        if (this.panelOpen) {\n          this._scrollTop = 0;\n          this.openedChange.emit(true);\n        } else {\n          this.openedChange.emit(false);\n          this.overlayDir.offsetX = 0;\n          this._changeDetectorRef.markForCheck();\n        }\n      });\n  }\n\n  ngAfterContentInit() {\n    this._initKeyManager();\n\n    this._selectionModel.onChange.pipe(takeUntil(this._destroy)).subscribe(event => {\n      event.added.forEach(option => option.select());\n      event.removed.forEach(option => option.deselect());\n    });\n\n    this.options.changes.pipe(startWith(null), takeUntil(this._destroy)).subscribe(() => {\n      this._resetOptions();\n      this._initializeSelection();\n    });\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      this.updateErrorState();\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    // Updating the disabled state is handled by `mixinDisabled`, but we need to additionally let\n    // the parent form field know to run change detection when the disabled state changes.\n    if (changes.disabled) {\n      this.stateChanges.next();\n    }\n  }\n\n  ngOnDestroy() {\n    this._destroy.next();\n    this._destroy.complete();\n    this.stateChanges.complete();\n  }\n\n  /** Toggles the overlay panel open or closed. */\n  toggle(): void {\n    this.panelOpen ? this.close() : this.open();\n  }\n\n  /** Opens the overlay panel. */\n  open(): void {\n    if (this.disabled || !this.options || !this.options.length || this._panelOpen) {\n      return;\n    }\n\n    this._triggerRect = this.trigger.nativeElement.getBoundingClientRect();\n    // Note: The computed font-size will be a string pixel value (e.g. \"16px\").\n    // `parseInt` ignores the trailing 'px' and converts this to a number.\n    this._triggerFontSize = parseInt(getComputedStyle(this.trigger.nativeElement).fontSize || '0');\n\n    this._panelOpen = true;\n    this._keyManager.withHorizontalOrientation(null);\n    this._calculateOverlayPosition();\n    this._highlightCorrectOption();\n    this._changeDetectorRef.markForCheck();\n\n    // Set the font size on the panel element once it exists.\n    this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n      if (this._triggerFontSize && this.overlayDir.overlayRef &&\n          this.overlayDir.overlayRef.overlayElement) {\n        this.overlayDir.overlayRef.overlayElement.style.fontSize = `${this._triggerFontSize}px`;\n      }\n    });\n  }\n\n  /** Closes the overlay panel and focuses the host element. */\n  close(): void {\n    if (this._panelOpen) {\n      this._panelOpen = false;\n      this._keyManager.withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr');\n      this._changeDetectorRef.markForCheck();\n      this._onTouched();\n    }\n  }\n\n  /**\n   * Sets the select's value. Part of the ControlValueAccessor interface\n   * required to integrate with Angular's core forms API.\n   *\n   * @param value New value to be written to the model.\n   */\n  writeValue(value: any): void {\n    if (this.options) {\n      this._setSelectionByValue(value);\n    }\n  }\n\n  /**\n   * Saves a callback function to be invoked when the select's value\n   * changes from user input. Part of the ControlValueAccessor interface\n   * required to integrate with Angular's core forms API.\n   *\n   * @param fn Callback to be triggered when the value changes.\n   */\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  /**\n   * Saves a callback function to be invoked when the select is blurred\n   * by the user. Part of the ControlValueAccessor interface required\n   * to integrate with Angular's core forms API.\n   *\n   * @param fn Callback to be triggered when the component has been touched.\n   */\n  registerOnTouched(fn: () => {}): void {\n    this._onTouched = fn;\n  }\n\n  /**\n   * Disables the select. Part of the ControlValueAccessor interface required\n   * to integrate with Angular's core forms API.\n   *\n   * @param isDisabled Sets whether the component is disabled.\n   */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n    this.stateChanges.next();\n  }\n\n  /** Whether or not the overlay panel is open. */\n  get panelOpen(): boolean {\n    return this._panelOpen;\n  }\n\n  /** The currently selected option. */\n  get selected(): MatOption | MatOption[] {\n    return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n  }\n\n  /** The value displayed in the trigger. */\n  get triggerValue(): string {\n    if (this.empty) {\n      return '';\n    }\n\n    if (this._multiple) {\n      const selectedOptions = this._selectionModel.selected.map(option => option.viewValue);\n\n      if (this._isRtl()) {\n        selectedOptions.reverse();\n      }\n\n      // TODO(crisbeto): delimiter should be configurable for proper localization.\n      return selectedOptions.join(', ');\n    }\n\n    return this._selectionModel.selected[0].viewValue;\n  }\n\n  /** Whether the element is in RTL mode. */\n  _isRtl(): boolean {\n    return this._dir ? this._dir.value === 'rtl' : false;\n  }\n\n  /** Handles all keydown events on the select. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (!this.disabled) {\n      this.panelOpen ? this._handleOpenKeydown(event) : this._handleClosedKeydown(event);\n    }\n  }\n\n  /** Handles keyboard events while the select is closed. */\n  private _handleClosedKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n    const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW ||\n                       keyCode === LEFT_ARROW || keyCode === RIGHT_ARROW;\n    const isOpenKey = keyCode === ENTER || keyCode === SPACE;\n    const manager = this._keyManager;\n\n    // Open the select on ALT + arrow key to match the native <select>\n    if (isOpenKey || ((this.multiple || event.altKey) && isArrowKey)) {\n      event.preventDefault(); // prevents the page from scrolling down when pressing space\n      this.open();\n    } else if (!this.multiple) {\n      if (keyCode === HOME || keyCode === END) {\n        keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n        event.preventDefault();\n      } else {\n        manager.onKeydown(event);\n      }\n    }\n  }\n\n  /** Handles keyboard events when the selected is open. */\n  private _handleOpenKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n    const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW;\n    const manager = this._keyManager;\n\n    if (keyCode === HOME || keyCode === END) {\n      event.preventDefault();\n      keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n    } else if (isArrowKey && event.altKey) {\n      // Close the select on ALT + arrow key to match the native <select>\n      event.preventDefault();\n      this.close();\n    } else if ((keyCode === ENTER || keyCode === SPACE) && manager.activeItem) {\n      event.preventDefault();\n      manager.activeItem._selectViaInteraction();\n    } else if (this._multiple && keyCode === A && event.ctrlKey) {\n      event.preventDefault();\n      const hasDeselectedOptions = this.options.some(opt => !opt.disabled && !opt.selected);\n\n      this.options.forEach(option => {\n        if (!option.disabled) {\n          hasDeselectedOptions ? option.select() : option.deselect();\n        }\n      });\n    } else {\n      const previouslyFocusedIndex = manager.activeItemIndex;\n\n      manager.onKeydown(event);\n\n      if (this._multiple && isArrowKey && event.shiftKey && manager.activeItem &&\n          manager.activeItemIndex !== previouslyFocusedIndex) {\n        manager.activeItem._selectViaInteraction();\n      }\n    }\n  }\n\n  _onFocus() {\n    if (!this.disabled) {\n      this._focused = true;\n      this.stateChanges.next();\n    }\n  }\n\n  /**\n   * Calls the touched callback only if the panel is closed. Otherwise, the trigger will\n   * \"blur\" to the panel when it opens, causing a false positive.\n   */\n  _onBlur() {\n    this._focused = false;\n\n    if (!this.disabled && !this.panelOpen) {\n      this._onTouched();\n      this._changeDetectorRef.markForCheck();\n      this.stateChanges.next();\n    }\n  }\n\n  /**\n   * Callback that is invoked when the overlay panel has been attached.\n   */\n  _onAttached(): void {\n    this.overlayDir.positionChange.pipe(take(1)).subscribe(() => {\n      this._setPseudoCheckboxPaddingSize();\n      this._changeDetectorRef.detectChanges();\n      this._calculateOverlayOffsetX();\n      this.panel.nativeElement.scrollTop = this._scrollTop;\n    });\n  }\n\n  /** Returns the theme to be used on the panel. */\n  _getPanelTheme(): string {\n    return this._parentFormField ? `mat-${this._parentFormField.color}` : '';\n  }\n\n  // TODO(josephperrott): Remove after 2018 spec updates are fully merged.\n  /** Sets the pseudo checkbox padding size based on the width of the pseudo checkbox. */\n  private _setPseudoCheckboxPaddingSize() {\n    if (!SELECT_MULTIPLE_PANEL_PADDING_X && this.multiple) {\n      const pseudoCheckbox = this.panel.nativeElement.querySelector('.mat-pseudo-checkbox');\n      if (pseudoCheckbox) {\n        SELECT_MULTIPLE_PANEL_PADDING_X = SELECT_PANEL_PADDING_X * 1.5 + pseudoCheckbox.offsetWidth;\n      }\n    }\n  }\n\n  /** Whether the select has a value. */\n  get empty(): boolean {\n    return !this._selectionModel || this._selectionModel.isEmpty();\n  }\n\n  private _initializeSelection(): void {\n    // Defer setting the value in order to avoid the \"Expression\n    // has changed after it was checked\" errors from Angular.\n    Promise.resolve().then(() => {\n      this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value);\n    });\n  }\n\n  /**\n   * Sets the selected option based on a value. If no option can be\n   * found with the designated value, the select trigger is cleared.\n   */\n  private _setSelectionByValue(value: any | any[]): void {\n    if (this.multiple && value) {\n      if (!Array.isArray(value)) {\n        throw getMatSelectNonArrayValueError();\n      }\n\n      this._selectionModel.clear();\n      value.forEach((currentValue: any) => this._selectValue(currentValue));\n      this._sortValues();\n    } else {\n      this._selectionModel.clear();\n      const correspondingOption = this._selectValue(value);\n\n      // Shift focus to the active item. Note that we shouldn't do this in multiple\n      // mode, because we don't know what option the user interacted with last.\n      if (correspondingOption) {\n        this._keyManager.setActiveItem(correspondingOption);\n      }\n    }\n\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Finds and selects and option based on its value.\n   * @returns Option that has the corresponding value.\n   */\n  private _selectValue(value: any): MatOption | undefined {\n    const correspondingOption = this.options.find((option: MatOption) => {\n      try {\n        // Treat null as a special reset value.\n        return option.value != null && this._compareWith(option.value,  value);\n      } catch (error) {\n        if (isDevMode()) {\n          // Notify developers of errors in their comparator.\n          console.warn(error);\n        }\n        return false;\n      }\n    });\n\n    if (correspondingOption) {\n      this._selectionModel.select(correspondingOption);\n    }\n\n    return correspondingOption;\n  }\n\n  /** Sets up a key manager to listen to keyboard events on the overlay panel. */\n  private _initKeyManager() {\n    this._keyManager = new ActiveDescendantKeyManager<MatOption>(this.options)\n      .withTypeAhead()\n      .withVerticalOrientation()\n      .withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr');\n\n    this._keyManager.tabOut.pipe(takeUntil(this._destroy)).subscribe(() => {\n      // Restore focus to the trigger before closing. Ensures that the focus\n      // position won't be lost if the user got focus into the overlay.\n      this.focus();\n      this.close();\n    });\n\n    this._keyManager.change.pipe(takeUntil(this._destroy)).subscribe(() => {\n      if (this._panelOpen && this.panel) {\n        this._scrollActiveOptionIntoView();\n      } else if (!this._panelOpen && !this.multiple && this._keyManager.activeItem) {\n        this._keyManager.activeItem._selectViaInteraction();\n      }\n    });\n  }\n\n  /** Drops current option subscriptions and IDs and resets from scratch. */\n  private _resetOptions(): void {\n    const changedOrDestroyed = merge(this.options.changes, this._destroy);\n\n    this.optionSelectionChanges.pipe(takeUntil(changedOrDestroyed)).subscribe(event => {\n      this._onSelect(event.source, event.isUserInput);\n\n      if (event.isUserInput && !this.multiple && this._panelOpen) {\n        this.close();\n        this.focus();\n      }\n    });\n\n    // Listen to changes in the internal state of the options and react accordingly.\n    // Handles cases like the labels of the selected options changing.\n    merge(...this.options.map(option => option._stateChanges))\n      .pipe(takeUntil(changedOrDestroyed))\n      .subscribe(() => {\n        this._changeDetectorRef.markForCheck();\n        this.stateChanges.next();\n      });\n\n    this._setOptionIds();\n  }\n\n  /** Invoked when an option is clicked. */\n  private _onSelect(option: MatOption, isUserInput: boolean): void {\n    const wasSelected = this._selectionModel.isSelected(option);\n\n    if (option.value == null && !this._multiple) {\n      option.deselect();\n      this._selectionModel.clear();\n      this._propagateChanges(option.value);\n    } else {\n      option.selected ? this._selectionModel.select(option) : this._selectionModel.deselect(option);\n\n      if (isUserInput) {\n        this._keyManager.setActiveItem(option);\n      }\n\n      if (this.multiple) {\n        this._sortValues();\n\n        if (isUserInput) {\n          // In case the user selected the option with their mouse, we\n          // want to restore focus back to the trigger, in order to\n          // prevent the select keyboard controls from clashing with\n          // the ones from `mat-option`.\n          this.focus();\n        }\n      }\n    }\n\n    if (wasSelected !== this._selectionModel.isSelected(option)) {\n      this._propagateChanges();\n    }\n\n    this.stateChanges.next();\n  }\n\n  /** Sorts the selected values in the selected based on their order in the panel. */\n  private _sortValues() {\n    if (this.multiple) {\n      const options = this.options.toArray();\n\n      this._selectionModel.sort((a, b) => {\n        return this.sortComparator ? this.sortComparator(a, b, options) :\n                                     options.indexOf(a) - options.indexOf(b);\n      });\n      this.stateChanges.next();\n    }\n  }\n\n  /** Emits change event to set the model value. */\n  private _propagateChanges(fallbackValue?: any): void {\n    let valueToEmit: any = null;\n\n    if (this.multiple) {\n      valueToEmit = (this.selected as MatOption[]).map(option => option.value);\n    } else {\n      valueToEmit = this.selected ? (this.selected as MatOption).value : fallbackValue;\n    }\n\n    this._value = valueToEmit;\n    this.valueChange.emit(valueToEmit);\n    this._onChange(valueToEmit);\n    this.selectionChange.emit(new MatSelectChange(this, valueToEmit));\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Records option IDs to pass to the aria-owns property. */\n  private _setOptionIds() {\n    this._optionIds = this.options.map(option => option.id).join(' ');\n  }\n\n  /**\n   * Highlights the selected item. If no option is selected, it will highlight\n   * the first item instead.\n   */\n  private _highlightCorrectOption(): void {\n    if (this._keyManager) {\n      if (this.empty) {\n        this._keyManager.setFirstItemActive();\n      } else {\n        this._keyManager.setActiveItem(this._selectionModel.selected[0]);\n      }\n    }\n  }\n\n  /** Scrolls the active option into view. */\n  private _scrollActiveOptionIntoView(): void {\n    const activeOptionIndex = this._keyManager.activeItemIndex || 0;\n    const labelCount = _countGroupLabelsBeforeOption(activeOptionIndex, this.options,\n        this.optionGroups);\n\n    this.panel.nativeElement.scrollTop = _getOptionScrollPosition(\n      activeOptionIndex + labelCount,\n      this._getItemHeight(),\n      this.panel.nativeElement.scrollTop,\n      SELECT_PANEL_MAX_HEIGHT\n    );\n  }\n\n  /** Focuses the select element. */\n  focus(): void {\n    this._elementRef.nativeElement.focus();\n  }\n\n  /** Gets the index of the provided option in the option list. */\n  private _getOptionIndex(option: MatOption): number | undefined {\n    return this.options.reduce((result: number | undefined, current: MatOption, index: number) => {\n      return result === undefined ? (option === current ? index : undefined) : result;\n    }, undefined);\n  }\n\n  /** Calculates the scroll position and x- and y-offsets of the overlay panel. */\n  private _calculateOverlayPosition(): void {\n    const itemHeight = this._getItemHeight();\n    const items = this._getItemCount();\n    const panelHeight = Math.min(items * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n    const scrollContainerHeight = items * itemHeight;\n\n    // The farthest the panel can be scrolled before it hits the bottom\n    const maxScroll = scrollContainerHeight - panelHeight;\n\n    // If no value is selected we open the popup to the first item.\n    let selectedOptionOffset =\n        this.empty ? 0 : this._getOptionIndex(this._selectionModel.selected[0])!;\n\n    selectedOptionOffset += _countGroupLabelsBeforeOption(selectedOptionOffset, this.options,\n        this.optionGroups);\n\n    // We must maintain a scroll buffer so the selected option will be scrolled to the\n    // center of the overlay panel rather than the top.\n    const scrollBuffer = panelHeight / 2;\n    this._scrollTop = this._calculateOverlayScroll(selectedOptionOffset, scrollBuffer, maxScroll);\n    this._offsetY = this._calculateOverlayOffsetY(selectedOptionOffset, scrollBuffer, maxScroll);\n\n    this._checkOverlayWithinViewport(maxScroll);\n  }\n\n  /**\n   * Calculates the scroll position of the select's overlay panel.\n   *\n   * Attempts to center the selected option in the panel. If the option is\n   * too high or too low in the panel to be scrolled to the center, it clamps the\n   * scroll position to the min or max scroll positions respectively.\n   */\n  _calculateOverlayScroll(selectedIndex: number, scrollBuffer: number,\n                          maxScroll: number): number {\n    const itemHeight = this._getItemHeight();\n    const optionOffsetFromScrollTop = itemHeight * selectedIndex;\n    const halfOptionHeight = itemHeight / 2;\n\n    // Starts at the optionOffsetFromScrollTop, which scrolls the option to the top of the\n    // scroll container, then subtracts the scroll buffer to scroll the option down to\n    // the center of the overlay panel. Half the option height must be re-added to the\n    // scrollTop so the option is centered based on its middle, not its top edge.\n    const optimalScrollPosition = optionOffsetFromScrollTop - scrollBuffer + halfOptionHeight;\n    return Math.min(Math.max(0, optimalScrollPosition), maxScroll);\n  }\n\n  /** Returns the aria-label of the select component. */\n  _getAriaLabel(): string | null {\n    // If an ariaLabelledby value has been set by the consumer, the select should not overwrite the\n    // `aria-labelledby` value by setting the ariaLabel to the placeholder.\n    return this.ariaLabelledby ? null : this.ariaLabel || this.placeholder;\n  }\n\n  /** Returns the aria-labelledby of the select component. */\n  _getAriaLabelledby(): string | null {\n    if (this.ariaLabelledby) {\n      return this.ariaLabelledby;\n    }\n\n    // Note: we use `_getAriaLabel` here, because we want to check whether there's a\n    // computed label. `this.ariaLabel` is only the user-specified label.\n    if (!this._parentFormField || !this._parentFormField._hasFloatingLabel() ||\n      this._getAriaLabel()) {\n      return null;\n    }\n\n    return this._parentFormField._labelId || null;\n  }\n\n  /** Determines the `aria-activedescendant` to be set on the host. */\n  _getAriaActiveDescendant(): string | null {\n    if (this.panelOpen && this._keyManager && this._keyManager.activeItem) {\n      return this._keyManager.activeItem.id;\n    }\n\n    return null;\n  }\n\n  /**\n   * Sets the x-offset of the overlay panel in relation to the trigger's top start corner.\n   * This must be adjusted to align the selected option text over the trigger text when\n   * the panel opens. Will change based on LTR or RTL text direction. Note that the offset\n   * can't be calculated until the panel has been attached, because we need to know the\n   * content width in order to constrain the panel within the viewport.\n   */\n  private _calculateOverlayOffsetX(): void {\n    const overlayRect = this.overlayDir.overlayRef.overlayElement.getBoundingClientRect();\n    const viewportSize = this._viewportRuler.getViewportSize();\n    const isRtl = this._isRtl();\n    const paddingWidth = this.multiple ? SELECT_MULTIPLE_PANEL_PADDING_X + SELECT_PANEL_PADDING_X :\n                                         SELECT_PANEL_PADDING_X * 2;\n    let offsetX: number;\n\n    // Adjust the offset, depending on the option padding.\n    if (this.multiple) {\n      offsetX = SELECT_MULTIPLE_PANEL_PADDING_X;\n    } else {\n      let selected = this._selectionModel.selected[0] || this.options.first;\n      offsetX = selected && selected.group ? SELECT_PANEL_INDENT_PADDING_X : SELECT_PANEL_PADDING_X;\n    }\n\n    // Invert the offset in LTR.\n    if (!isRtl) {\n      offsetX *= -1;\n    }\n\n    // Determine how much the select overflows on each side.\n    const leftOverflow = 0 - (overlayRect.left + offsetX - (isRtl ? paddingWidth : 0));\n    const rightOverflow = overlayRect.right + offsetX - viewportSize.width\n                          + (isRtl ? 0 : paddingWidth);\n\n    // If the element overflows on either side, reduce the offset to allow it to fit.\n    if (leftOverflow > 0) {\n      offsetX += leftOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n    } else if (rightOverflow > 0) {\n      offsetX -= rightOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n    }\n\n    // Set the offset directly in order to avoid having to go through change detection and\n    // potentially triggering \"changed after it was checked\" errors. Round the value to avoid\n    // blurry content in some browsers.\n    this.overlayDir.offsetX = Math.round(offsetX);\n    this.overlayDir.overlayRef.updatePosition();\n  }\n\n  /**\n   * Calculates the y-offset of the select's overlay panel in relation to the\n   * top start corner of the trigger. It has to be adjusted in order for the\n   * selected option to be aligned over the trigger when the panel opens.\n   */\n  private _calculateOverlayOffsetY(selectedIndex: number, scrollBuffer: number,\n                                  maxScroll: number): number {\n    const itemHeight = this._getItemHeight();\n    const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n    const maxOptionsDisplayed = Math.floor(SELECT_PANEL_MAX_HEIGHT / itemHeight);\n    let optionOffsetFromPanelTop: number;\n\n    // Disable offset if requested by user by returning 0 as value to offset\n    if (this._disableOptionCentering) {\n      return 0;\n    }\n\n    if (this._scrollTop === 0) {\n      optionOffsetFromPanelTop = selectedIndex * itemHeight;\n    } else if (this._scrollTop === maxScroll) {\n      const firstDisplayedIndex = this._getItemCount() - maxOptionsDisplayed;\n      const selectedDisplayIndex = selectedIndex - firstDisplayedIndex;\n\n      // The first item is partially out of the viewport. Therefore we need to calculate what\n      // portion of it is shown in the viewport and account for it in our offset.\n      let partialItemHeight =\n          itemHeight - (this._getItemCount() * itemHeight - SELECT_PANEL_MAX_HEIGHT) % itemHeight;\n\n      // Because the panel height is longer than the height of the options alone,\n      // there is always extra padding at the top or bottom of the panel. When\n      // scrolled to the very bottom, this padding is at the top of the panel and\n      // must be added to the offset.\n      optionOffsetFromPanelTop = selectedDisplayIndex * itemHeight + partialItemHeight;\n    } else {\n      // If the option was scrolled to the middle of the panel using a scroll buffer,\n      // its offset will be the scroll buffer minus the half height that was added to\n      // center it.\n      optionOffsetFromPanelTop = scrollBuffer - itemHeight / 2;\n    }\n\n    // The final offset is the option's offset from the top, adjusted for the height difference,\n    // multiplied by -1 to ensure that the overlay moves in the correct direction up the page.\n    // The value is rounded to prevent some browsers from blurring the content.\n    return Math.round(optionOffsetFromPanelTop * -1 - optionHeightAdjustment);\n  }\n\n  /**\n   * Checks that the attempted overlay position will fit within the viewport.\n   * If it will not fit, tries to adjust the scroll position and the associated\n   * y-offset so the panel can open fully on-screen. If it still won't fit,\n   * sets the offset back to 0 to allow the fallback position to take over.\n   */\n  private _checkOverlayWithinViewport(maxScroll: number): void {\n    const itemHeight = this._getItemHeight();\n    const viewportSize = this._viewportRuler.getViewportSize();\n\n    const topSpaceAvailable = this._triggerRect.top - SELECT_PANEL_VIEWPORT_PADDING;\n    const bottomSpaceAvailable =\n        viewportSize.height - this._triggerRect.bottom - SELECT_PANEL_VIEWPORT_PADDING;\n\n    const panelHeightTop = Math.abs(this._offsetY);\n    const totalPanelHeight =\n        Math.min(this._getItemCount() * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n    const panelHeightBottom = totalPanelHeight - panelHeightTop - this._triggerRect.height;\n\n    if (panelHeightBottom > bottomSpaceAvailable) {\n      this._adjustPanelUp(panelHeightBottom, bottomSpaceAvailable);\n    } else if (panelHeightTop > topSpaceAvailable) {\n     this._adjustPanelDown(panelHeightTop, topSpaceAvailable, maxScroll);\n    } else {\n      this._transformOrigin = this._getOriginBasedOnOption();\n    }\n  }\n\n  /** Adjusts the overlay panel up to fit in the viewport. */\n  private _adjustPanelUp(panelHeightBottom: number, bottomSpaceAvailable: number) {\n    // Browsers ignore fractional scroll offsets, so we need to round.\n    const distanceBelowViewport = Math.round(panelHeightBottom - bottomSpaceAvailable);\n\n    // Scrolls the panel up by the distance it was extending past the boundary, then\n    // adjusts the offset by that amount to move the panel up into the viewport.\n    this._scrollTop -= distanceBelowViewport;\n    this._offsetY -= distanceBelowViewport;\n    this._transformOrigin = this._getOriginBasedOnOption();\n\n    // If the panel is scrolled to the very top, it won't be able to fit the panel\n    // by scrolling, so set the offset to 0 to allow the fallback position to take\n    // effect.\n    if (this._scrollTop <= 0) {\n      this._scrollTop = 0;\n      this._offsetY = 0;\n      this._transformOrigin = `50% bottom 0px`;\n    }\n  }\n\n  /** Adjusts the overlay panel down to fit in the viewport. */\n  private _adjustPanelDown(panelHeightTop: number, topSpaceAvailable: number,\n                           maxScroll: number) {\n    // Browsers ignore fractional scroll offsets, so we need to round.\n    const distanceAboveViewport = Math.round(panelHeightTop - topSpaceAvailable);\n\n    // Scrolls the panel down by the distance it was extending past the boundary, then\n    // adjusts the offset by that amount to move the panel down into the viewport.\n    this._scrollTop += distanceAboveViewport;\n    this._offsetY += distanceAboveViewport;\n    this._transformOrigin = this._getOriginBasedOnOption();\n\n    // If the panel is scrolled to the very bottom, it won't be able to fit the\n    // panel by scrolling, so set the offset to 0 to allow the fallback position\n    // to take effect.\n    if (this._scrollTop >= maxScroll) {\n      this._scrollTop = maxScroll;\n      this._offsetY = 0;\n      this._transformOrigin = `50% top 0px`;\n      return;\n    }\n  }\n\n  /** Sets the transform origin point based on the selected option. */\n  private _getOriginBasedOnOption(): string {\n    const itemHeight = this._getItemHeight();\n    const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n    const originY = Math.abs(this._offsetY) - optionHeightAdjustment + itemHeight / 2;\n    return `50% ${originY}px 0px`;\n  }\n\n  /** Calculates the amount of items in the select. This includes options and group labels. */\n  private _getItemCount(): number {\n    return this.options.length + this.optionGroups.length;\n  }\n\n  /** Calculates the height of the select's options. */\n  private _getItemHeight(): number {\n    return this._triggerFontSize * SELECT_ITEM_HEIGHT_EM;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) {\n    this._ariaDescribedby = ids.join(' ');\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick() {\n    this.focus();\n    this.open();\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat(): boolean {\n    return this._panelOpen || !this.empty;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatOptionModule} from '@angular/material/core';\nimport {MatFormFieldModule} from '@angular/material/form-field';\nimport {MAT_SELECT_SCROLL_STRATEGY_PROVIDER, MatSelect, MatSelectTrigger} from './select';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    MatOptionModule,\n    MatCommonModule,\n  ],\n  exports: [MatFormFieldModule, MatSelect, MatSelectTrigger, MatOptionModule, MatCommonModule],\n  declarations: [MatSelect, MatSelectTrigger],\n  providers: [MAT_SELECT_SCROLL_STRATEGY_PROVIDER]\n})\nexport class MatSelectModule {}\n"]}