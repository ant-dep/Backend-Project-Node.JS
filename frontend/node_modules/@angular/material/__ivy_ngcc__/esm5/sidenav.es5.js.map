{"version":3,"file":"sidenav.es5.js","sources":["../../../src/lib/sidenav/drawer-animations.ts","../../../src/lib/sidenav/drawer.ts","../../../src/lib/sidenav/sidenav.ts","../../../src/lib/sidenav/sidenav-module.ts"],"names":["tslib_1.__extends"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAOA;AAAM;AAIM;AAEP;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAOL,IAAa,mBAAmB,GAE5B;AACJ;AACE,IAAA,eAAe,EAAE,OAAO,CAAC,WAAW,EAAE;AACxC;AACI;AACI;AACI;AACI,QAAZ,KAAK,CAAC,oBAAoB,EAAE,KAAK,CAAC;AACtC,YAAM,WAAW,EAAE,MAAM;AACzB,YAAM,YAAY,EAAE,SAAS;AAC7B,SAAK,CAAC,CAAC;AACP,QAAI,KAAK,CAAC,MAAM,EAAE,KAAK,CAAC;AACxB;AACM,YAAA,YAAY,EAAE,MAAM;AAC1B,YAAM,YAAY,EAAE,QAAQ;AAC5B,SAAK,CAAC,CAAC;AACP,QAAI,UAAU,CAAC,sBAAsB,EAAE,OAAO,CAAC,KAAK,CAAC,CAAC;AACtD,QAAI,UAAU,CAAC,qCAAqC,EAC5C,OAAO,CAAC,wCAAwC,CAAC,CAAC;AAC1D,KAAG,CAAC;AACJ,CAAC;AACD;AAAC;AAAI;AAAkC;AAAkE;AAAI;AAAI;AAA0E;AAAkB;AAAuB;AAAe;ACanP,SAAgB,6BAA6B,CAAC,QAAgB,EAA9D;AAAE,IACA,MAAM,KAAK,CAAC,gDAAd,GAA8D,QAAQ,GAAtE,KAA0E,CAAC,CAAC;AAC5E,CAAC;AACD;AAEI;AAAiE;AAIrE,IAAa,2BAA2B,GACpC,IAAI,cAAc,CAAU,6BAA6B,EAAE;AAC/D,IAAM,UAAU,EAAE,MAAM;AACxB,IAAM,OAAO,EAAE,mCAAmC;AAClD,CAAK,CAAC,CAAC;AACP;AACG;AACH;AAAe;AAAf,SAAgB,mCAAmC,GAAnD;AAAE,IACA,OAAO,KAAK,CAAC;AACf,CAAC;AACD;AAGqB,IAUiBA,SAAtC,CAAA,gBAAA,EAAA,MAAA,CAAA,CAAmD;AAAC,IAClD,SAAF,gBAAA,CACc,kBADd,EAE2D,UAA8B,EACnF,UAAmC,EACnC,gBAAkC,EAClC,MAAc,EALpB;AAAE,QAAA,IAAF,KAAA,GAMI,MANJ,CAAA,IAAA,CAAA,IAAA,EAMU,UAAU,EAAE,gBAAgB,EAAE,MAAM,CAAC,IAN/C,IAAA,CAOG;AACH,QAPc,KAAd,CAAA,kBAAgC,GAAlB,kBAAkB,CAAhC;AAAC,QAC0D,KAA3D,CAAA,UAAqE,GAAV,UAAU,CAAoB;AAAC;AACrE,KAIlB;AACH;AACO;AACN;AAAQ,IADP,gBAAF,CAAA,SAAA,CAAA,kBAAoB;AAClB;AAAmB;AAAQ,IAD3B,YAAF;AAAE,QAAA,IAAF,KAAA,GAAA,IAAA,CAIG;AACH,QAJI,IAAI,CAAC,UAAU,CAAC,qBAAqB,CAAC,SAAS,CAAC,YAApD;AAAE,YACI,KAAI,CAAC,kBAAkB,CAAC,YAAY,EAAE,CAAC;AAC7C,SAAK,CAAC,CAAC;AACP,KAAG,CAAH,AAhBA;AAAC;qBAVD,EAAA,IAAA,EAAC,SAAS,EAAV,IAAA,EAAA,CAAW,CAAX,QAAA,EAAA,1DAUwB;iBAVxB,jBAYyC;EAXvC,QAAQ,EAAE,2BAAZ,sBACE,IAAF,EAAA,0BACA,OAAA,EAAA,oBAAA,1HAS8E;aARxE,bAWyD,QAxE/D,EAAA,IAAA,EAAE,UAAF,EAAA;OA6DA,EAAA,TA7DE,QAwEF,EAAA,IAAA,EAAuE,gBAAvE,EAAyF;MAXzF,NAYA,QApEA,EAAA,IAAA,EAAE,MAAF,EAAA;OAyDI,PAzDH,KAXD,CAAA,EAAA;sBAoEA,EAAA,kCAAA,uBACA,sBACA,eAAA,EAAA,uBAAA,CAAA,MAAA,sBACA,aAAA,EAAA,iBAAA,CAAA,IAAA,mBACA,EAAA,EAAA,OACA;;;;;;;;;;;;;;;;;;;;;2HAzEA;AAAC,IAiBD,OAAA,gBAAA,CAAA;AAAC;AA9BD;AACA;AAG0B;AAAI;AAC9B;AAEmC;AAC1B,QAkOT,IAAA,CAAA,WAAA,GAAA,WAAA,CAAA;AAAC,QAAC,IAAF,CAAA,iBAAA,GAAA,iBAAA,CAAA;AAAC,QAAqB,IAAtB,CAAA,aAAA,GAAA,aAAA,CAAA;AAAC,QACqB,IAAtB,CAAA,SAAA,GAAA,SAAA,CAAA;AAAC,QACqB,IAAtB,CAAA,OAAA,GAAA,OAAA,CAAA;AAAC,QACqB,IAAtB,CAAA,IAAA,GAAA,IAAA,CAAsB;AAAC,QACD,IAAtB,CAAA,oCAAA,GAAA,IAAA,CAAA;AAAC;AAAY;AACiD;AAEtD;AAAwC;AAEzC,QA3GP,IAAA,CAAA,KAAA,GAAA,MAAA,CAAA;AAAC,QAaD,IAAA,CAAA,aAAA,GAAA,KAAA,CAAA;AAAC,QASD,IAAA,CAAA,UAAA,GAAA,IAAA,CAAA;AAAC;AAAY;AAEO;AAAY;AAAgD;AAAY;AAEjD;AAAY;AACjB;AAAY;AACvC;AAAY;AAEJ;AAAY;AAAgE;AAE/F;AAA6B;AAC2C,QAgBtE,IAAF,YAAA,6BAAA,IAAA,CAAA,CAAA;AAAC;AAAY;AACE;AAAY;AAAqD;AAAY;AAG3C;AAGzB;AAAY;AAG5B;AAA8B,QAgCpC,IAAF,CAAA,YAAA,CAAA,SAAA,CAAA,UAAA,MAAA,EAAA;AAAE,YA6HF,IAAA,MAAA,EAAA;AAAE,gBA/GF,IAAA,KAAqB,CAAC,IAAtB,EAAA;AAAE,oBACF,KAAA,CAAA,oCAAA,qBAAA,KAAA,CAAA,IAAA,CAAA,aAAA,CAAA,CAAA;AAAC,iBACD;AAAC,gBACD,IAAU,KAAI,CAAC,mBAAf,IAAA,KAAA,CAAA,UAAA,EAAA;AAAE,oBACF,KAAA,CAAA,UAAA,EAAA,CAAA;AAAC,iBAED;AAAC,aACD;AAAC,iBACQ;AACR,gBAAD,KAAA,CAAA,aAAA,EAAA,CAAA;AAAC,aAAD;AAAC,SACD,CAAA,CAAA;AAAC;AAAY;AAK8C;AACO;AAC3C;AAAgB;AAGvC;AAGa,gBAJb,KAAiB,CAAjB,KAAA,EAAA,CAAA;AAAC,gBACD,KAAiB,CAAgB,eAAjC,EAAiD,CAAC;AAAC,aAGnD,CAAA,CAAA,EAAA,CAAA,CAAA;AAAC,SACD,CAAA,CAAA;AAAC;AAIsB;AACgB;AAClB;AACc,SADnC,CAAA,CAAA,CAAQ,SAAR,CAAA,UAA4B,KAA5B,EAAA;AAAE,YACI,IAAN,SAAA,GAAA,KAAA,CAAA,SAAA,EAAA,OAA8C,GAA9C,KAAA,CAAA,OAAA,CAAA;AAAC,YACO,IAAR,CAAA,OAAA,CAAA,OAAmB,CAAnB,MAAA,CAAA,KAAA,CAAA,IAAA,SAAA,KAAA,MAAA;AAAK,iBACL,OAAA,KAAA,MAAA,IAAA,SAAA,CAAA,OAAA,CAAA,MAAA,CAAA,KAAyC,CAAzC,CAAA,EAAA;AAAE,gBAEQ,KAAV,CAAA,YAAA,CAAA,IAAiC,CAAC,KAAK,CAAC,OAAxC,CAAA,CAAA;AAAC,aACD;AAAC,SACD,CAAA,CAAA;AAAC,KACD;AAAC,IACD,MAAM,CAAC,cAAP,CAAA,SAAA,CAAA,SAAA,EAAA,UAAA,EAAA;AAAE;AAIG,QAjJL,GAAA;AAAM;AACyC;AACtC;AAAY;AACO;AACvB;AAA4B;AACxB;AAAY;AACR;AACkB,YAL/B,KAAA,GAAA,KAAA,KAAA,KAAA,GAAA,KAAA,GAAA,OAAA,CAAA;AAAC;AACE,gBACH,IAAY,CAAZ,SAAsB,GAAtB,KAA8B,CAA9B;AAAC,gBACO,IAAR,CAAa,iBAAb,CAA+B,IAA/B,EAAA,CAAA;AAAC,aACD;AAAC,SACD;AAAE,QACF,UAAA,EAAA,IAAA;AAAE,QACF,YAAA,EAAA,IAAA;AAAC;AACI;AAEQ;AAEL,QADR,GAAA;AAAM;AACqD;AACvC;AAAY;AAE1B;AAAiB;AAEN;AAAuB;AACxC;AAC0B;AAAgC,YAN1D,IAAA,CAAA,YAAA,CAAA,IAAA,EAAA,CAAA;AAAC,SACD;AAAE,QACF,UAAA,EAAA,IAAA;AAAE,QACF,YAAA,EAAA,IAAA;AAAC;AACI;AAEY;AAEL,QADZ,GAAA;AAAM;AAEwB;AAAuB;AAAY;AACtC;AAE1B;AAA4B;AAAuB;AAAY;AAE1B;AAC7B,QANP,YAAF,EAAA,IAAA;AAAC;AAAQ;AAA8D;AAG/B,QACxC,GAAA;AAAM;AAEgC;AAAuB;AAAY;AAEzE;AACgB;AAA4B;AAC1C;AAAY;AAEmC;AAChC,QAPf,YAAF,EAAA,IAAA;AAAC;AAAQ;AAAkE;AAG7D,QAkBd,GAAA;AAAM;AAEJ;AAAuB;AAAY;AAAsB;AAK1C,SAPjB;AAAE,QAEF,UAAA,EAAA,IAAgB;AAAE,QAClB,YAAA,EAAA,IAAA;AAAC;AAEG;AACI;AAEc,QAFtB,GAAA;AAAM;AAEU;AAAuB;AAC5B;AAAsB;AAOxB,SAVT;AAAE,QAEF,UAAA,EAAA,IAAgB;AAAE,QAIlB,YAAA,EAAA,IAAA;AAAC;AAEG;AACU;AAEA,QAFd,GAAA;AAAM;AAEJ;AAAuB;AAAY;AAAsB;AAK1C,SAPjB;AAAE,QAEF,UAAA,EAAA,IAAgB;AAAE,QAClB,YAAA,EAAA,IAAA;AAAC;AAEG;AACI;AAEc,QAFtB,GAAA;AAAM;AAEU;AAAuB;AAC5B;AAAsB;AAMP,SAT1B;AAAE,QAEF,UAAA,EAAA,IAAgB;AAAE,QAIlB,YAAA,EAAA,IAAA;AAAC;AAEG;AACa,QAHjB,GAAA;AAEC;AAAuB;AAAY;AAAsB;AAEV,YAQhD,OAAA,IAAA,CAAA,MAAA,IAAA,IAAA,CAAA,IAAA,KAAA,MAAA,CAAA;AAAC;AAAW,QAEZ,UAAA,EAAA,IAAgB;AAAE,QAClB,YAAA,EAAA,IAAA;AAAC;AAEG;AAAQ;AAAsC;AACzC;AAAQ;AAAyC;AACrB;AAChC;AAAQ;AAAkB;AACjB;AACR;AAAoB,SA8C1B;AAAC,QACD,IAAM,CAAN,UAAA,CAAA,4BAAA,EAAA,CAAA,IAAA,CAAA,UAAA,aAAA,EAAA;AAAE;AAIQ;AACR;AACa;AAAyD,aAAxE;AAAC,SACD,CAAA,CAAA;AAAC,KACD,CAAA;AAAC;AACA;AAI2E;AAAe;AAEtF;AACE;AACgB;AAMd;AAAe;AAAmB;AAAQ;AAAkB;AAC1C;AAAoB,SAP/C;AAAC;AAAyB,QAE1B,IAAA,QAAA,GAAA,IAAA,CAAA,IAAA,IAAA,IAAA,CAAA,IAAA,CAAA,aAAA,CAAA;AAAC;AAIU,YAFD,IAAV,IAAkB,CAAlB,oCAAA,YAAA,WAAA,EAAA;AAAE,gBAEF,IAAgB,CAAhB,aAAA,CAAA,QAAA,CAAA,IAAA,CAAA,oCAAA,EAAA,IAAA,CAAA,UAAA,CAAA,CAAA;AAAC,aACD;AAAC,iBACD;AAAE,gBACF,IAAA,CAAA,WAAA,CAAA,aAAA,CAAA,IAAA,EAAA,CAAA;AAAC,aAAD;AAAC,SACD;AAAC,QACD,IAAA,CAAO,oCAAP,GAAA,IAAA,CAAA;AAAC,QACD,IAAA,CAAA,UAAA,GAAA,IAAA,CAAA;AAAC,KAED,CAAA;AAAC;AAAQ;AAAmB;AAAQ;AAEjC;AAEc;AACjB;AAAkB;AACI,QAFtB,IAAA,CAAA,UAAA,CAAA,OAAA,GAAA,IAAA,CAAA,mBAAA,CAAA;AAAC,KACD,CAAA;AAAC;AAAQ;AAAmB;AAAQ;AACjC;AAAmB;AAAQ;AAAkB;AAIQ;AACE;AACK;AAAqB;AAErE;AACO,SADtB;AAAC,KACD,CAAA;AAAC;AAAQ;AAAmB;AAAQ;AAKxB;AACR;AAAQ;AAAkB;AAGT,YALrB,IAAA,CAAA,UAAA,CAAA,OAAA,EAAA,CAAA;AAAC,SACD;AAAC,QACD,IAAM,CAAN,iBAAA,CAAA,QAAA,EAAA,CAAA;AAAC,QACD,IAAA,CAAA,aAAA,CAAA,QAAA,EAAA,CAAA;AAAC,KAED,CAAA;AAAC,IACD,MAAA,CAAA,cAAA,CAAsB,SAAS,CAA/B,SAAA,EAAA,QAAA,EAAA;AAAE;AAAY;AAIgD;AAC9D;AAAY;AAET;AAEkC;AAA0B;AACrD;AAAY;AAInB;AAAiB;AAA4B;AAAuB;AAAY;AAC5B;AAExC,QARb,YAAF,EAAA,IAAA;AAAC;AAAQ;AAAQ;AAAwB;AAKtC;AAA8D;AAAQ;AAAQ;AAC7E;AAE0C;AAE7C;AAEc;AAAQ;AACQ;AACpB;AAKyC;AACQ;AAAmB;AAAQ;AAC1E;AAA6C,KAb1D,CAAA;AAAC;AAA6B;AAAQ;AAAyB;AAC/C;AAAQ;AAGV;AACF;AAAmB;AAAQ;AAC1B;AAIP,KALN,CAAA;AAAC;AAAQ;AAA2B;AAK9B;AAEwB;AAA8D;AAAQ;AAC7F;AAA2B;AAEL;AAGR;AAGgB;AAAmB;AAAQ;AAC1C;AAErB;AACwB;AAOnB;AACG;AAAmB;AAAQ;AAAmC;AACjE,QAnBN,IAAA,MAAA,KAAA,KAAA,CAAA,EAA2E,EAA3E,MAAA,GAAA,CAAA,IAAA,CAAA,MAAA,CAAA,EAAA;AAAC,QAAC,IAAF,SAAA,KAAA,KAAA,CAAA,EAAA,EAAA,SAAA,GAAA,SAAA,CAAA,EAAA;AAAC,QAAQ,IAAT,CAAA,OAAA,GAAA,MAAA,CAAA;AAAC,QAAwC,IAAzC,MAAA,EAAA;AAAE,YAGM,IAAR,CAAA,eAAA,GAAA,IAAA,CAAA,iBAAA,GAAA,MAAA,GAAA,cAAA,CAAA;AAAC,YAEO,IAAR,CAAA,UAAA,GAAA,SAAA,CAAA;AAAC,SACD;AAAC,aACD;AAAE,YACF,IAAA,CAAA,eAAA,GAAA,MAAA,CAAA;AAAC,YAAD,IAAA,CAAA,aAAA,EAAA,CAAA;AAAC,SACD;AAAC,QACD,IAAM,IAAI,CAAC,UAAX,EAAA;AAAE,YACF,IAAA,CAAA,UAAA,CAAA,OAAA,GAAA,IAAA,CAAA,mBAAA,CAAA;AAAC,SAED;AAAC,QACD,OAAA,IAAA,OAAA,CAAqB,UAArB,OAAA,EAAA;AAAE,YACF,KAAA,CAAA,YAAA,CAAA,IAAA,CAAA,IAAA,CAAA,CAAA,CAAA,CAAA,CAAA,SAAA,CAAA,UAAA,IAAA,EAAA,EAAA,OAAA,OAAA,CAAA,IAAA,GAAA,MAAA,GAAA,OAAA,CAAA,CAAA,EAAA,CAAA,CAAA;AAAC,SAED,CAAA,CAAA;AAAC,KACD,CAAA;AAAC,IACD,MAAM,CAAC,cAAP,CAAA,SAAA,CAAA,SAAA,EAAA,QAAA,EAAA;AAAE,QACF,GAAA;AAEC;AAAuB;AACb;AAAsB;AAMJ,SAP7B;AAAE,QACF,UAAA,EAAA,IAAgB;AAAE,QAClB,YAAA,EAAA,IAAA;AAAC,OA/QD;AAAC;cA+QD,EAAA,IAAA,EAAA,SAAA,EAAA,IAAA,EAAA,CAAA,CAAA,QAAA,EAAA,nDA9QmB,IACnB,SAAA,CAAA,cAAA,GAAA,YAAA,EAAA,OAAkC;SA6QlC,TA7QoC,QACpC,EAAA,IAAA,EAAA,UAAA,EAAA;AAAE;QArBF,QAAA,EAAA,lBAsBmC;AAAgC;AACzD,QA5GV,EAAA,IAAA,EAAE,MAAF,EAAA;OAqFA,sBACE,UAAU,EAAZ,CAAA,mBAAA,CAAA,eAAA,CAAA,9EAtFE,QAhBF,EAAA,IAAA,EAA8C,SAA9C,EAAA,UAAA,EAAA,CAAA,EAAA,IAAA,EAAA,QAAA,EAAA,EAAA,EAAA,IAAA,EAAA,MAAA,EAAA,IAAA,EAAA,CAAA,QAAA,EAAA,EAAA,CAAA,EAAA;CAuGE,IAAF,EAAA,PAvGC,KAAD,CAAA,EAAA,CAAA;uBAwGA,OAAA,EAAA,hCAxGC,IAID,SAAA,CAAA,cAAA,GAAA;WAoGA,XApGE,QAkBF,QAAE,EAAF,CAAA,EAAA,IAAA,EAAA,KAAA,EAAA,CAAA;AAmFA,cAAA,EAAA,hBAnFE,QAiNF,IAAA,EAAA,CAAA,EAAA,IAAA,EAAA,KAAA,EAAA,CAAA;AA9HA,0BACA,1BA6HE;KA7HF,EAAA,PA6H2C;CA7H3C,0BACM,3BA8HS,QAtGf,YAAA,EAAA,CAAA,EAAA,IAAA,EAAA,MAAA,EAAA,CAAA;IAxBA,EAAA,4BAAA,lCAwBE,QAaF,aAAA,EAAG,CAAH,EAAA,IAAA,EAAA,MAAA,EAAA,IAAA,EAAA,CAAA,QAAA,EAAA,EAAA,CAAA;AAAE,QASF,WAAA,EAAA,CAAA,EAAA,IAAA,EAAA,MAAQ,EAAR,CAAA;2CA5CI,cAAc,EAAE,3DA4ClB,QAMF,aAAA,EAAA,CAAA,EAAA,IAAA,EAAA,MAAA,EAAA,IAAA,EAAA,CAAA,QAAA,EAAA,EAAA,CAAA;GAlDA,0BACI,7BAiDF,QAkBF,WAAA,EAAA,CAAA,EAAA,IAAA,EAAA,MAAA,EAAA,CAAA;YAnEA,EAAA,oBAAA,0BACI,5DAkEF,QAKF,iBAAA,EAAA,CAAA,EAAA,IAAA,EAAA,MAAA,EAAA,IAAA,EAAA,CAAA,iBAAA,EAAA,EAAA,CAAA;UAvEA,EAAA,iBAAA,7BAuEE,QAMF,MAAA,EAAA,CAAA,EAAA,IAAA,EAAA,KAAG,EAAH,CAAA;AAAC,KASD;oFApFI,yBAAJ,EAAA,iBAAA,0BACI,UAAJ,EAAA,IAAA,uBACA,sBACA,eAAA,EAAA,uBAAA,CAAA,MAAA,sBACA,aAAA,EAAA,iBAAA,CAAA,IAAA,mBACA,EAAA,EAAA;IACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBA8EA;AAAC,IAMD,OAAA,SAAA,CAAA;AAAC,CAUD,EAAA,CAAA,CAAA;AAgIA;AAAI;AAC4B;AAAG;AAE3B;AAGU;AAClB;AAAsD;AAEjD;AAEH;AAA0B;AAGpB,QAwIR,IAAA,CAAA,QAAA,GAAA,QAAkC,CAAlC;AAAC,QAIa,IAAd,CAAA,OAAA,GAAA,OAAA,CAAA;AAAC,QAJC,IAAF,CAAA,kBAAA,GAAA,kBAAA,CAAA;AAAC,QAAiC,IAAlC,CAAA,cAAA,GAAA,cAAA,CAAA;AAAC;AAAY;AACM;AAAY,QAIkC,IAAjE,CAAA,aAAA,GAAA,IAAA,YAAwF,EAAxF,CAAA;AAAC;AAAY;AAAkD;AAAY,QAxCzE,IAAF,CAAA,UAAA,GAAA,IAAA,OAAA,EAAA,CAAA;AAAC;AAAY;AAAkE;AAExE,QAcP,IAAA,CAAA,eAAA,GAAA,IAAA,OAAA,EAAA,CAAA;AAAC;AAAY;AAGX;AAG0C;AAC/B;AAAY;AAA4D;AACjD;AAEO;AAEP,QAFlC,IAAF,IAAA,EAAA;AAAE,YAEF,IAAA,CAAA,MAAA,CAAA,IAAA,CAAA,SAAA,CAAA,IAAA,CAAA,UAAA,CAAA,CAAA,CAAA,SAAA,CAAA,YAAA;AAAE;AAA0C;AAC5C,aAeA,CAAA,CAAA;AAAC,SACD;AAAC,QACD,IAAA,CAAA,SAAa,GAAb,eAA+B,CAAC;AAChC,KAAA;AAAC,IACD,MAAA,CAAA,cAAA,CAAA,kBAAA,CAAA,SAAA,EAAA,OAAA,EAAA;AAAE;AAMD,QAHG,GAAJ;AAAM;AAGY;AACF;AAAY;AACrB;AAEN;AAA2B;AAAQ,IA/FpC,MAAA,CAAA,cAAA,CAAA,kBAAA,CAAA,SAAA,EAAA,KAAA,EAAA;AAAE;AAEA;AAAiB;AACE;AAAuB;AAEzC;AACqC;AAClC;AAA2B;AAAQ,IAJzC,MAAA,CAAA,cAAA,CAAA,kBAAA,CAAA,SAAA,EAAA,UAAA,EAAA;AAAE;AAAY;AAGO;AACT;AAAW;AAEgD;AACD;AACrC;AAC9B;AAEA;AACa;AAAmD;AAAW;AAIrB;AACD;AACzC;AAGb;AAAY;AAC0B;AACzB;AAA4B;AAAuB;AAAY;AAKtE;AACN;AAA2B;AAAQ,IAjBrC,MAAA,CAAA,cAAA,CAAA,kBAAkD,CAAlD,SAAA,EAAA,aAAA,EAA6E;AAAE;AACtE;AAG6D;AACG;AAChE;AACP;AAEA;AAEkC;AAGb;AAEd;AACT;AAAY;AAAsB;AAChC;AAIS;AAAc,YAdzB,OAAA,IAAA,CAAA,iBAAA,CAAA;AAAC,SAED;AAAE,QACF,GAAA;AAAM;AAA4B;AAAuB;AAAY;AAA2B;AAMzF;AAAW;AAA0B,QAD1C,YAAF,EAAA,IAAA;AAAC,KACD,CAAA,CAAA;AAAC,IACD,MAAA,CAAA,cAAA,CAAA,kBAAA,CAAA,SAAA,EAAA,YAAA,EAAA;AAAE;AAGgD;AAC3C;AAEE;AAAuB;AAAY;AAAsB;AAEtD;AAAW;AAGf,QAwBN,YAAF,EAAA,IAAA;AAAC,KACD,CAAA,CAAA;AAAC;AAAQ;AAAmB;AAAQ,IACpC,kBAAA,CAAA,SAAA,CAAA,kBAAA;AAEE;AAAmB;AAAQ;AAAkB,QAmB/C,IAAA,KAAA,GAAA,IAAA,CAAA;AAAC;AACmD;AAC5B,YAFxB,KAAA,CAAA,QAAA,CAAA,OAAA,CAAA,UAAA,MAAA,EAAA;AAAE,gBAAF,KAAA,CAAA,kBAAA,CAAA,MAAA,CAAA,CAAA;AAAC,gBACD,KAAiB,CAAC,oBAAlB,CAAA,MAA6C,CAAC,CAAC;AAAC,gBAChD,KAAA,CAAA,gBAAA,CAAA,MAAA,CAAA,CAAA;AAAC,aAED,CAAA,CAAA;AAAC,YACD,IAAQ,CAAR,KAAa,CAAb,QAAA,CAAA,MAAA;AAAI,gBACI,KAAI,CAAC,aAAb,CAAA,KAAA,CAAiC,MAAjC,CAAwC;AACvC,gBAAO,KAAI,CAAC,aAAb,CAAA,KAAA,CAAA,IAAqC,CAAC,EAAtC;AAAE,gBACF,KAAA,CAAA,qBAAA,EAAA,CAAA;AAAC,aAED;AAAC,YACD,KAAA,CAAA,kBAA6B,CAA7B,YAAyC,EAAzC,CAAA;AAAC,SACD,CAAA,CAAA;AAAC,QACD,IAAA,CAAA,eAAA,CAAA,IAAA,CAAA,YAAqC,CAArC,EAAA,CAAA;AAGU;AAGQ,QAHlB,SAAU,CAAC,IAAX,CAAA,UAAA,CAAA,CAAA,CAA6B,SAA7B,CAAA,YAAA,EAAA,OAAA,KAAA,CAAA,qBAAA,EAAA,CAAA,EAAA,CAAA,CAAA;AAAC,KACD,CAAA;AAAC;AAED;AAAmB;AAAQ,IAI3B,kBAAA,CAAA,SAAA,CAAA,WAAA;AAEE;AACC;AAAQ;AAAkB,QAD7B,IAAA,CAAA,eAAA,CAAA,QAAA,EAAA,CAAA;AAAC;AACc;AACD,KAFd,CAAA;AAAC;AAED;AAAQ;AACsB;AAGlB;AAAQ;AACR;AACiC;AAGtC;AAAQ,IAJb,YAAF;AAAE;AAIE;AAAO;AACE;AACV;AACF;AAEc;AACR;AAA6C;AAC7B;AAAmB;AACtC,IAPF,YAAF;AAAE;AAIC;AAAO;AACR;AAAmB;AAAQ,IAH7B,kBAAA,CAAA,SAAA,CAAA,SAAA;AAEE;AACG;AAAQ;AAAkB,QAD/B,IAAA,KAAA,GAAA,IAAA,CAAA;AAAC;AACoE;AAC9B;AACsD,YAH7F,IAAA,CAAA,OAAA,CAMG,iBANH,CAAA,YAAA,EAAA,OAAA,KAAA,CAAA,eAAA,CAAA,IAAA,EAAA,CAAA,EAAA,CAAA,CAAA;AAAC;AAAU,KAEX,CAAA;AAAC;AAAQ;AACoD;AACQ;AAK/D;AAAyB;AAAmB;AAAQ;AACtC;AACF;AAGe;AACR;AACf;AAAmB;AAAQ;AAAwB;AAEvD;AAEG;AAA0C;AACU;AACS,YARtE,IAAA,KAAA,CAAA,OAAA,KAAA,cACgB,IAAI,KADpB,CAAA,cAEM,KAFN,gBAAA,EAAA;AAAE,gBAIF,KAAA,CAAc,QAAd,CAAA,aAAA,CAAA,SAAA,CAAA,GAAA,CAAA,uBAAA,CAAA,CAAA;AAAC;AAAc;AACD,YAER,KAAN,CAAA,kBAAA,CAAA,YAAA,EAAA,CAA8C;AAAC,SAC/C,CAAA,CAAA;AAAC,QACD,IAAA,MAAA,CAAA,IAAA,KAAA,MAAA,EAAA;AAAE,YAEI,MAAK,CAAX,YAAA,CAAA,IAAA,CAAA,SAAA,CAAA,IAAA,CAAA,QAAA,CAAA,OAAA,CAAA,CAAA,CAAA,SAAA,CAAA,YAAA;AAAE,gBACF,OAAA,KAAA,CAAA,kBAAA,CAAA,MAAA,CAAA,MAAA,CAAA,CAAA;AAAC,aACD,CAAA,CAAA;AAAC,SAED;AAAC,KACD,CAAA;AAAC;AAAQ;AAAgE;AAC3B;AAK3C;AAAmB;AAAQ;AACF;AAEM;AAEvB;AAEK;AAAmB;AAAQ;AAAwB;AAC1D;AAAuB;AAAoB,SALpD;AAAC;AAEW;AAEsD,QAFlE,MAAA,CAAA,iBAAA,CAAA,IAAA,CAAA,SAAA,CAAA,IAAA,CAAA,QAAA,CAAA,OAAA,CAAA,CAAA,CAAA,SAAA,CAAA,YAAA;AAAE,YACF,KAAA,CAAA,OAAA,CAAA,gBAAA,CAAA,YAAA,EAAA,CAAA,IAAA,CAAA,IAAA,CAAA,CAAA,CAAA,CAAA,CAAA,SAAA,CAAA,YAAA;AAAE;AACoC;AAAgB,SAEtD,CAAA,CAAA;AAAC,KACD,CAAA;AAAC;AAAQ;AACP;AAAyB;AAExB;AACA;AAEmD;AACF;AAE/C;AAAmB;AAAQ;AAAwB;AAA0B;AACnE;AAE4B,iBAL3C,SAAA,CAAA,YAAA;AAAE;AAA+C,gBACjD,KAAA,CAAA,kBAAA,CAAA,YAAA,EAAA,CAAA;AAAC,aACD,CAAA,CAAA;AAAC,SACD;AAAC,KACD,CAAA;AAAC;AAAQ;AAED;AAIC;AAAmB;AAAQ;AACjC;AAEmB;AAAwB;AAAmB;AAC9D;AACU;AAAqB;AAIR;AAAU,aARpC;AAAE,YACM,IAAR,CAAa,QAAb,CAAA,aAAA,CAAA,SAAA,CAAA,MAAA,CAAA,mBAAA,CAAA,CAAA;AAAC,SACD;AAAC,KACD,CAAA;AAAC;AAAQ;AACgD;AACtD;AAGH;AAAwD;AAEjC;AAElB;AAAQ,IAHH,YAAV;AAAE;AAA0B;AAG5B;AACI;AACY;AACM,gBALtB,IAAA,KAAA,CAAsB,IAAtB,IAA8B,IAAI,EAAlC;AAAE;AAEqB,iBACvB;AAAC,gBACS,KAAV,CAAgB,IAAhB,GAAA,MAA6B,CAA7B;AAAC,aACD;AAAC,iBACD;AAAE,gBACF,IAAA,KAAA,CAAA,MAAA,IAAA,IAAA,EAAA;AAAE,oBACF,6BAAA,CAAA,OAAA,CAAA,CAAA;AAAC,iBACD;AAAC,gBAAD,KAAA,CAAA,MAAA,GAAA,MAAA,CAAA;AAAC,aACD;AAAC,SACD,CAAA,CAAA;AAAC,QACD,IAAA,CAAA,MAAA,GAAA,IAAA,CAAA,KAAA,GAAA,IAAA,CAAA;AAAC;AAED,QAAA,IAAA,IAAA,CAAA,IAAA,IAAA,IAAA,CAAA,IAAA,CAAA,KAAA,KAAA,KAAA,EAAA;AAAE,YACF,IAAA,CAAA,KAAA,GAAA,IAAA,CAAA,IAAA,CAAA;AAAC,YAEO,IAAR,CAAA,MAAA,GAAsB,IAAtB,CAAA,MAAA,CAAA;AAAC;AAAU,aAGX;AAAE,YACI,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,MAAxB,CAAA;AAAC,YACK,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,IAAzB,CAAA;AAAC,SACI;AAAC,KAAN,CAAA;AAAC;AAAQ;AAMP;AAAmB;AAAQ;AAAiD;AAE1B;AAAmB;AACtE,IAFS,YAAV;AAAE;AAC0D;AACL;AAAO;AAAQ;AAG1D;AAAQ;AAEE;AAGhB;AAAQ;AACN,QANR,IAAA,CAAA,aAAA,CAAA,IAAA,EAAA,CAAA;AAAC;AACS;AAAO;AAAQ;AACZ;AAAQ,IACrB,kBAAA,CAAA,SAAA,CAAA,iBAAA;AAEE;AAAmB;AAChB;AAAkB,QADvB,IAAA,KAAA,GAAA,IAAA,CAAA;AAAC;AACoE;AACvD,aAFd,MAAA,CAAA,UAAA,MAAA,EAAA,EAAA,OAAA,MAAA,IAAA,CAAA,MAAA,CAAA,YAAA,IAAA,KAAA,CAAA,gBAAA,CAAA,MAAA,CAAA,CAAA,EAAA,CAAA;AAAC,aAAD,OAAA,CAAA,UAAA,MAAA,EAAA,EAAA,OAAA,EAAA,MAAA,GAAA,KAAA,EAAA,CAAA,EAAA,CAAA,CAAA;AAAC;AAAO;AAAQ;AACL;AAAQ,IAInB,kBAAA,CAAA,SAAA,CAAA,kBAAA;AAEE;AAAmB;AAAQ;AAChB,QADb,OAAA,CAAA,IAAA,CAAA,aAAA,CAAA,IAAA,CAAA,MAAA,CAAA,IAAoB,IAApB,CAAA,gBAAA,CAAA,IAAA,CAAA,MAAA,CAAA;AAAK;AAC+C;AAAO;AAAQ;AAC7D;AAAmB;AAAQ;AAG7B;AAAyB;AAAmB;AAAQ,IAA9C,UAAV,MAAA,EAAA;AAAE;AACU;AAAO;AAAQ;AAAyB;AAGjD;AAAQ;AAAqD;AAChD;AAAmB;AAAQ,IADjC,UAAV,MAAA,EAAA;AAAE;AAAgD;AAAO;AAAQ;AAK/B;AAA8C;AAC5E;AAAQ;AAEW;AAER;AAA8C;AAAmB;AAAQ;AAC/E;AAA0B;AAAyB;AAC1D;AAAyB;AAAuB;AAA+C,YAIzF,IAAI,IAAI,CAAC,KAAjB,CAAA,IAAA,IAAA,MAAA,EAAA;AAAE;AAGK,aAFP;AAAC,iBAEY,IAAb,IAAA,CAAsB,KAAK,CAA3B,IAAgC,IAAhC,MAAA,EAAA;AAAE;AAAiC,gBAE3B,IAAI,KAAZ,GAAoB,IAApB,CAAA,KAAA,CAAA,MAAA,CAAA;AAAC,gBACD,IAAA,IAAA,KAAA,CAAA;AAAC,gBAAD,KAAiB,IAAI,KAArB,CAA2B;AAAC;AAAc,SAC1C;AAAC,QACD,IAAA,IAAQ,CAAR,MAAA,IAAA,IAAA,CAAA,MAAA,CAAA,MAAA,EAAA;AAAE,YACF,IAAQ,IAAR,CAAa,MAAb,CAAA,IAAA,IAAA,MAAA,EAAA;AAAE,gBACF,KAAA,IAAA,IAAA,CAAA,MAAA,CAAA,MAAA,CAAA;AAAC,aACD;AAAC,iBAEY,IAAb,IAAA,CAAA,MAA4B,CAA5B,IAAA,IAAA,MAA2C,EAA3C;AAAE;AAAiC,gBAE3B,IAAR,KAAiB,GAAjB,IAAA,CAAA,MAAA,CAAA,MAAA,CAAA;AAAC,gBACD,KAAA,IAAA,KAAA,CAAA;AAAC,gBAAD,IAAA,IAAA,KAAA,CAAA;AAAC;AAAc,SACf;AAAC;AAGA;AAG2E;AACO;AAEjF;AAAkD;AACnC;AAGmC;AACrB;AAE2D;AACO,YAJzF,IAAI,CAAZ,OAAA,CAAqB,GAArB,CAAA,YAAqC,EAArC,OAA8C,KAAK,CAAnD,qBAAA,CAAA,IAAA,CAAA,KAAoF,CAApF,eAAA,CAAA,CAAA,EAAA,CAAA,CAAA;AAAC,SACD;AAAC,MAjUD;AAAC;uBAqUD,EAAA,IAAA,EAAU,SAAS,EAAnB,IAAA,EAAA,CAAA,CAAA,QAA6B,EAA7B,5DArUwB,IAExB,kBAAA,CAAA,cAAA,GAAA,YAAA,EAAA,OAAA;mBAmUA,sBACA,QAAA,EAAA,nDApUE,QACF,EAAA,IAAA,EAAA,cAAA,EAAA,UAAA,EAAA,CAAA,EAAA,IAAA,EAAA,QAA2C,EAA3C,CAAA,EAAA;GAmUA,HAnUE,QACF,EAAA,IAAA,EAAA,UAAA,EAAA;AAAE,QACF,EAAA,IAAA,EAAA,MAAA,EAAA;AAAE;AACkC;AACiB;AAEf,KA/ZtC,CAAA,EAAA,CAAA;AAAC,IAeD,kBAAA,CAAA,cAAA,GAAA;AAAE,QAMF,QAAE,EAAF,CAAA,EAAA,IAAA,EAAA,eAAA,EAAA,IAAA,EAAA,CAAA,SAAA,EAAA,EAAA,CAAA;AAAE,QAXF,QAAE,EAAF,CAAA,EAAA,IAAA,EAAA,YAAA,EAAA,IAAA,EAAA,CAAA,gBAAA,EAAA,EAAA,CAAA;AAAE,QAoeF,YAAA,EAAA,CAAA,EAAA,IAAA,EAAA,SAAA,EAAA,IAAA,EAAe,CAAf,gBAAA,EAAA,EAAA,CAAA;AAAE,QACF,QAAA,EAAA,CAAA,EAAA,IAAA,EAAA,KAAA,EAAA,CAAA;AAAE;AAAwC;AAA0C,KAlFpF;;;;;;;;;;;;;;;;;;UAdA,IAAA,EAAA,0BACA,OAAA,EAAA,sBAAA;kBACA;kCAAA;CAAA,mBAAA,uBACA,sBACE,eAAF,EAAA,uBAAA,CAAA;CAAA;GACE,aAAF,EAAA,iBAAA,CAAA,IAAA;OACA,EAAA,EAAA,OACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBAOA;AAAC,IACD,OAAA,kBAAA,CAAA;AAAC,CACD,EAAA,CAAA;AAAE;AAAC;AAAI;AAAkC;AAEE;AAAI;AACM,ICnYdA,SAAvC,CAAA,iBAAA,EAAA,MAAA,CAAA,CAAuD;AAAC,IACtD,SAAF,iBAAA,CACM,iBAAoC,EACW,SAA8B,EAC7E,UAAmC,EACnC,gBAAkC,EAClC,MAAc,EALpB;AAAE,QAMF,OAAI,MAAJ,CAAA,IAAA,CAAA,IAAA,EAAU,iBAAiB,EAAE,SAAS,EAAE,UAAU,EAAE,gBAAgB,EAAE,MAAM,CAAC,IAA7E,IAAA,CAAA;AAAC,KACE,AAVH;AAAC;sBAVD,EAAA,IAAA,EAAC,SAAS,EAAV,IAAA,EAAA,CAAW,CAAX,QAAA,EAAA,3DAUwB;kBAVxB,lBAY0C;GAXxC,QAAQ,EAAE,2BAAZ,sBACE,IAAF,EAAA,0BACA,OAAA,EAAA,vGAWM;MAXN,NAac,QAlCd,EAAA,IAAA,EAAE,UAAF,EAAA;EAsBM,wBAAN,EAAA,5BAtBE,QAiCF,EAAA,IAAA,EAAgE,gBAAhE,EAAA;AAAE,QAxBF,EAAA,IAAA,EAAE,MAAF,EAAA;AAaA,AAbC,KAMD,CAAA,EAAA;gBAQI,yBAAJ,EAAA,kCAAA,uBACA,sBACA,eAAA,EAAA,uBAAA,CAAA,MAAA,sBACA,aAAA,EAAA,iBAAA,CAAA,IAAA,mBACA,EAAA,EAAA,OACA;;;;;;;;;;;;;;;;;;;;;2HAbA;AAAC,IALD,OAAA,iBAAA,CAAA;AAAC;AAoBD,IAAA,UAAA,kBAAA,UAAA,MAAA,EAAA;AAAE,IAAFA,SAAA,CAAA,UAAA,EAAA,MAAA,CAAA,CAAA;AAAC;AAA4B,QAqC7B,IAAA,KAAA,GAAA,MAAA,KAAA,IAAA,IAAA,MAAA,CAAA,KAAA,CAAA,IAAA,EAAA,SAAA,CAAA,IAAA,IAAA,CAAA;AAAC;AAAwC;AACZ,QAI7B,KAAA,CAAA,eAAA,GAAA,CAA6B,CAA7B;AAAC,QASD,OAAA,KAAA,CAAA;AAAC,KASD;AAAC;AAKqB;AAEC,QA5BvB,GAAA;AAAM;AAC8C;AAC5C;AAAY;AAAuD;AACtE;AAA4B;AAGpB;AAAY;AACjB;AAGF,QARJ,YAAF,EAAA,IAAA;AAAC;AAAQ;AAAiE;AAAY;AAIvB;AAAiB;AAAY;AACpF;AAIqB;AAAiB;AAAuB;AAClE;AAGgB;AAAiB;AAA4B;AAAuB;AAAY;AAIxD;AACtC,QATH,YAAF,EAAA,IAAA;AAAC;AAAQ;AAAoE;AAClE;AAGwE;AAC9E;AACL;AAEA;AAC2C;AAAuB;AAC7D;AAAY;AAMjB;AAAiB;AACT;AAAuB;AACvB;AAGE;AAA0B,QAZlC,YAAF,EAAA,IAAA;AAAC,OA1BD;AAAC,IACD,UAAA,CAAA,cAAA,GAAA;IAwBA,EAAA,IAAA,EAAA,SAAA,EAAA,IAAA,EAAA,CAAA,CAAA,QAAA,EAAA,zCAxBE,QACF,eAAA,EAAA,CAAA,EAAA,IAAA,EAAA,KAAA,EAAA,CAAA;UAuBA,VAvBE,QACF,WAAA,EAAA,CAAA,EAAA,IAAA,EAAA,KAAA,EAAA,CAAA;oCAxBA,pCAwBE;EAxBF,EAAA,JAyByC;wEAzBzC,sBACE,UAAU,EAAZ,CAAA,mBAAA,CAAA,eAAA,CAAA,sBACE,IAAF,EAAA,0BACA,OAAA,EAAA,wBAAA;UACA,UAAA,EAAA,IAAA,0BACA,cAAA,EAAA,iBAAA,0BACM,oBAAN,EAAA,gCAAA,0BACI,mBAAJ,EAAA,4BAAA;gGAEI,cAAc,EAAE,MAApB,0BACI,wBAAJ,EAAA,oBAAA,0BACI,yBAAJ,EAAA,iBAAA;;oBAEI;EAAJ,EAAA,iBAAA,0BACI,2BAAJ;CAAA,iBAAkD,0BAC9C,gBAAJ,EAAA,sCAAA,0BACI,mBAAJ,EAAA;oCAAA,uBACA,sBACA,eAAA,EAAA,uBAAA,CAAA,MAAA,sBACA,aAAA,EAAA,iBAAA,CAAA,IAAA,mBACA,EAAA,EAAA,OACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBAKG;AAAC,IACJ,OAAA,UAAA,CAAA;AAAC,CASD,CAAA,SAAA,CAAA,CAAA,CAAA;AASA;AACkD;AACpB;AAAqC;AAM3D,KAMR;IAMyC,mBAAzC,CAAA,UAAA,GAAA,rCANC,IACD,mBAAA,CAAI,cAAJ,GAAA;AAAE,QACF,QAAA,EAAA,CAAA,EAAG,IAAH,EAAA,eAAA,EAAA,IAAA,EAAA,CAAA,UAAA,EAAA,EAAA,CAAA;AAAE,QACF,QAAA,EAAA,CAAA,EAAA,IAAA,EAAA,YAAA,EAAA,IAAA,EAAA,CAAA,iBAAA,EAAiD,EAAjD,CAAA;AAAC,KACD;;;;;;;;;;;;;;;;;;;;;;;;;;sOAXA,IAAA,EAAA,0BACA,OAAA,EAAA,4CAAA,0BACA;OAAA,EAAA,mBAAA,uBACA,sBACE,eAAF,EAAA,uBAAA,CAAA,MAAA,sBACE,aAAF,EAAA,iBAAA,CAAA,IAAA,mBACA,EAAA,EAAA,OACA;;;;;;;;;;;;;oBAIA;AAAC,IACD,OAAA,mBAAA,CAAA;AAAC;AACqB;AAAC;AAAI;AAAkC;AAE5D;AChHD;AAAoD;AACpB;4CAQhC,EAAA,IAAA,EAAC,QAAQ,EAAT,IAAA,EAAA,CAAU,sBACR,OAAO,EAAE;sBACP,YAAY,0BACZ,eAAe;UACf,eAAe,0BACf,cAAc;YACf;QACD,OAAO,EAAE;cACP;AAAe,0BACf;OAAS;CACT,kBAAkB,0BAClB,gBAAgB,0BAChB,UAAU;WACV;MAAmB;eACnB;KAAiB,uBAClB;gBACD,YAAY,EAAE;mBACZ,SAAS;iBACT,kBAAkB;;MAClB,gBAAgB;qBAChB,UAAU;oBACV;QAAmB,0BACnB;WAAiB,uBAClB;eACF,EAAD,EAAA;;;;;;;;;;;;;;;;;6LACK;AAAC,IAzCN,OAAA,gBAAA,CAAA;AAAC;AACE;AAAC;AAAI;AACsB;AAEkB;AAAI;AAAC;AAAI;AACzC;AAEG;AAAI;AAAC;AAKJ","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the Material drawers.\n * @docs-private\n */\nexport const matDrawerAnimations: {\n  readonly transformDrawer: AnimationTriggerMetadata;\n} = {\n  /** Animation that slides a drawer in and out. */\n  transformDrawer: trigger('transform', [\n    // We remove the `transform` here completely, rather than setting it to zero, because:\n    // 1. Having a transform can cause elements with ripples or an animated\n    //    transform to shift around in Chrome with an RTL layout (see #10023).\n    // 2. 3d transforms causes text to appear blurry on IE and Edge.\n    state('open, open-instant', style({\n      'transform': 'none',\n      'visibility': 'visible',\n    })),\n    state('void', style({\n      // Avoids the shadow showing up when closed in SSR.\n      'box-shadow': 'none',\n      'visibility': 'hidden',\n    })),\n    transition('void => open-instant', animate('0ms')),\n    transition('void <=> open, open-instant => void',\n        animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {AnimationEvent} from '@angular/animations';\nimport {FocusMonitor, FocusOrigin, FocusTrap, FocusTrapFactory} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {Platform} from '@angular/cdk/platform';\nimport {CdkScrollable, ScrollDispatcher} from '@angular/cdk/scrolling';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {fromEvent, merge, Observable, Subject} from 'rxjs';\nimport {\n  debounceTime,\n  filter,\n  map,\n  startWith,\n  take,\n  takeUntil,\n  distinctUntilChanged,\n} from 'rxjs/operators';\nimport {matDrawerAnimations} from './drawer-animations';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\n/**\n * Throws an exception when two MatDrawer are matching the same position.\n * @docs-private\n */\nexport function throwMatDuplicatedDrawerError(position: string) {\n  throw Error(`A drawer was already declared for 'position=\"${position}\"'`);\n}\n\n\n/** Result of the toggle promise that indicates the state of the drawer. */\nexport type MatDrawerToggleResult = 'open' | 'close';\n\n/** Configures whether drawers should use auto sizing by default. */\nexport const MAT_DRAWER_DEFAULT_AUTOSIZE =\n    new InjectionToken<boolean>('MAT_DRAWER_DEFAULT_AUTOSIZE', {\n      providedIn: 'root',\n      factory: MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY(): boolean {\n  return false;\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer-content',\n  template: '<ng-content></ng-content>',\n  host: {\n    'class': 'mat-drawer-content',\n    '[style.margin-left.px]': '_container._contentMargins.left',\n    '[style.margin-right.px]': '_container._contentMargins.right',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDrawerContent extends CdkScrollable implements AfterContentInit {\n  constructor(\n      private _changeDetectorRef: ChangeDetectorRef,\n      @Inject(forwardRef(() => MatDrawerContainer)) public _container: MatDrawerContainer,\n      elementRef: ElementRef<HTMLElement>,\n      scrollDispatcher: ScrollDispatcher,\n      ngZone: NgZone) {\n    super(elementRef, scrollDispatcher, ngZone);\n  }\n\n  ngAfterContentInit() {\n    this._container._contentMarginChanges.subscribe(() => {\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n}\n\n\n/**\n * This component corresponds to a drawer that can be opened on the drawer container.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer',\n  exportAs: 'matDrawer',\n  templateUrl: 'drawer.html',\n  animations: [matDrawerAnimations.transformDrawer],\n  host: {\n    'class': 'mat-drawer',\n    '[@transform]': '_animationState',\n    '(@transform.start)': '_animationStarted.next($event)',\n    '(@transform.done)': '_animationEnd.next($event)',\n    // must prevent the browser from aligning text based on value\n    '[attr.align]': 'null',\n    '[class.mat-drawer-end]': 'position === \"end\"',\n    '[class.mat-drawer-over]': 'mode === \"over\"',\n    '[class.mat-drawer-push]': 'mode === \"push\"',\n    '[class.mat-drawer-side]': 'mode === \"side\"',\n    'tabIndex': '-1',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDrawer implements AfterContentInit, AfterContentChecked, OnDestroy {\n  private _focusTrap: FocusTrap;\n  private _elementFocusedBeforeDrawerWasOpened: HTMLElement | null = null;\n\n  /** Whether the drawer is initialized. Used for disabling the initial animation. */\n  private _enableAnimations = false;\n\n  /** The side that the drawer is attached to. */\n  @Input()\n  get position(): 'start' | 'end' { return this._position; }\n  set position(value: 'start' | 'end') {\n    // Make sure we have a valid value.\n    value = value === 'end' ? 'end' : 'start';\n    if (value != this._position) {\n      this._position = value;\n      this.onPositionChanged.emit();\n    }\n  }\n  private _position: 'start' | 'end' = 'start';\n\n  /** Mode of the drawer; one of 'over', 'push' or 'side'. */\n  @Input()\n  get mode(): 'over' | 'push' | 'side' { return this._mode; }\n  set mode(value: 'over' | 'push' | 'side') {\n    this._mode = value;\n    this._modeChanged.next();\n  }\n  private _mode: 'over' | 'push' | 'side' = 'over';\n\n  /** Whether the drawer can be closed with the escape key or by clicking on the backdrop. */\n  @Input()\n  get disableClose(): boolean { return this._disableClose; }\n  set disableClose(value: boolean) { this._disableClose = coerceBooleanProperty(value); }\n  private _disableClose: boolean = false;\n\n  /** Whether the drawer should focus the first focusable element automatically when opened. */\n  @Input()\n  get autoFocus(): boolean { return this._autoFocus; }\n  set autoFocus(value: boolean) { this._autoFocus = coerceBooleanProperty(value); }\n  private _autoFocus: boolean = true;\n\n  /** How the sidenav was opened (keypress, mouse click etc.) */\n  private _openedVia: FocusOrigin | null;\n\n  /** Emits whenever the drawer has started animating. */\n  _animationStarted = new Subject<AnimationEvent>();\n\n  /** Emits whenever the drawer is done animating. */\n  _animationEnd = new Subject<AnimationEvent>();\n\n  /** Current state of the sidenav animation. */\n  _animationState: 'open-instant' | 'open' | 'void' = 'void';\n\n  /** Event emitted when the drawer open state is changed. */\n  @Output() readonly openedChange: EventEmitter<boolean> =\n      // Note this has to be async in order to avoid some issues with two-bindings (see #8872).\n      new EventEmitter<boolean>(/* isAsync */true);\n\n  /** Event emitted when the drawer has been opened. */\n  @Output('opened')\n  get _openedStream(): Observable<void> {\n    return this.openedChange.pipe(filter(o => o), map(() => {}));\n  }\n\n  /** Event emitted when the drawer has started opening. */\n  @Output()\n  get openedStart(): Observable<void> {\n    return this._animationStarted.pipe(\n      filter(e => e.fromState !== e.toState && e.toState.indexOf('open') === 0),\n      map(() => {})\n    );\n  }\n\n  /** Event emitted when the drawer has been closed. */\n  @Output('closed')\n  get _closedStream(): Observable<void> {\n    return this.openedChange.pipe(filter(o => !o), map(() => {}));\n  }\n\n  /** Event emitted when the drawer has started closing. */\n  @Output()\n  get closedStart(): Observable<void> {\n    return this._animationStarted.pipe(\n      filter(e => e.fromState !== e.toState && e.toState === 'void'),\n      map(() => {})\n    );\n  }\n\n  /** Event emitted when the drawer's position changes. */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output('positionChanged') onPositionChanged: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * An observable that emits when the drawer mode changes. This is used by the drawer container to\n   * to know when to when the mode changes so it can adapt the margins on the content.\n   */\n  readonly _modeChanged = new Subject();\n\n  get _isFocusTrapEnabled(): boolean {\n    // The focus trap is only enabled when the drawer is open in any mode other than side.\n    return this.opened && this.mode !== 'side';\n  }\n\n  constructor(private _elementRef: ElementRef<HTMLElement>,\n              private _focusTrapFactory: FocusTrapFactory,\n              private _focusMonitor: FocusMonitor,\n              private _platform: Platform,\n              private _ngZone: NgZone,\n              @Optional() @Inject(DOCUMENT) private _doc: any) {\n\n    this.openedChange.subscribe((opened: boolean) => {\n      if (opened) {\n        if (this._doc) {\n          this._elementFocusedBeforeDrawerWasOpened = this._doc.activeElement as HTMLElement;\n        }\n\n        if (this._isFocusTrapEnabled && this._focusTrap) {\n          this._trapFocus();\n        }\n      } else {\n        this._restoreFocus();\n      }\n    });\n\n    /**\n     * Listen to `keydown` events outside the zone so that change detection is not run every\n     * time a key is pressed. Instead we re-enter the zone only if the `ESC` key is pressed\n     * and we don't have close disabled.\n     */\n    this._ngZone.runOutsideAngular(() => {\n        fromEvent<KeyboardEvent>(this._elementRef.nativeElement, 'keydown').pipe(\n            filter(event => event.keyCode === ESCAPE && !this.disableClose)\n        ).subscribe(event => this._ngZone.run(() => {\n            this.close();\n            event.stopPropagation();\n        }));\n    });\n\n    // We need a Subject with distinctUntilChanged, because the `done` event\n    // fires twice on some browsers. See https://github.com/angular/angular/issues/24084\n    this._animationEnd.pipe(distinctUntilChanged((x, y) => {\n      return x.fromState === y.fromState && x.toState === y.toState;\n    })).subscribe((event: AnimationEvent) => {\n      const {fromState, toState} = event;\n\n      if ((toState.indexOf('open') === 0 && fromState === 'void') ||\n          (toState === 'void' && fromState.indexOf('open') === 0)) {\n        this.openedChange.emit(this._opened);\n      }\n    });\n  }\n\n  /** Traps focus inside the drawer. */\n  private _trapFocus() {\n    if (!this.autoFocus) {\n      return;\n    }\n\n    this._focusTrap.focusInitialElementWhenReady().then(hasMovedFocus => {\n      // If there were no focusable elements, focus the sidenav itself so the keyboard navigation\n      // still works. We need to check that `focus` is a function due to Universal.\n      if (!hasMovedFocus && typeof this._elementRef.nativeElement.focus === 'function') {\n        this._elementRef.nativeElement.focus();\n      }\n    });\n  }\n\n  /**\n   * If focus is currently inside the drawer, restores it to where it was before the drawer\n   * opened.\n   */\n  private _restoreFocus() {\n    if (!this.autoFocus) {\n      return;\n    }\n\n    const activeEl = this._doc && this._doc.activeElement;\n\n    if (activeEl && this._elementRef.nativeElement.contains(activeEl)) {\n      if (this._elementFocusedBeforeDrawerWasOpened instanceof HTMLElement) {\n        this._focusMonitor.focusVia(this._elementFocusedBeforeDrawerWasOpened, this._openedVia);\n      } else {\n        this._elementRef.nativeElement.blur();\n      }\n    }\n\n    this._elementFocusedBeforeDrawerWasOpened = null;\n    this._openedVia = null;\n  }\n\n  ngAfterContentInit() {\n    this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    this._focusTrap.enabled = this._isFocusTrapEnabled;\n  }\n\n  ngAfterContentChecked() {\n    // Enable the animations after the lifecycle hooks have run, in order to avoid animating\n    // drawers that are open by default. When we're on the server, we shouldn't enable the\n    // animations, because we don't want the drawer to animate the first time the user sees\n    // the page.\n    if (this._platform.isBrowser) {\n      this._enableAnimations = true;\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n\n    this._animationStarted.complete();\n    this._animationEnd.complete();\n  }\n\n  /**\n   * Whether the drawer is opened. We overload this because we trigger an event when it\n   * starts or end.\n   */\n  @Input()\n  get opened(): boolean { return this._opened; }\n  set opened(value: boolean) { this.toggle(coerceBooleanProperty(value)); }\n  private _opened: boolean = false;\n\n  /**\n   * Open the drawer.\n   * @param openedVia Whether the drawer was opened by a key press, mouse click or programmatically.\n   * Used for focus management after the sidenav is closed.\n   */\n  open(openedVia?: FocusOrigin): Promise<MatDrawerToggleResult> {\n    return this.toggle(true, openedVia);\n  }\n\n  /** Close the drawer. */\n  close(): Promise<MatDrawerToggleResult> {\n    return this.toggle(false);\n  }\n\n  /**\n   * Toggle this drawer.\n   * @param isOpen Whether the drawer should be open.\n   * @param openedVia Whether the drawer was opened by a key press, mouse click or programmatically.\n   * Used for focus management after the sidenav is closed.\n   */\n  toggle(isOpen: boolean = !this.opened, openedVia: FocusOrigin = 'program'):\n    Promise<MatDrawerToggleResult> {\n\n    this._opened = isOpen;\n\n    if (isOpen) {\n      this._animationState = this._enableAnimations ? 'open' : 'open-instant';\n      this._openedVia = openedVia;\n    } else {\n      this._animationState = 'void';\n      this._restoreFocus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.enabled = this._isFocusTrapEnabled;\n    }\n\n    return new Promise<MatDrawerToggleResult>(resolve => {\n      this.openedChange.pipe(take(1)).subscribe(open => resolve(open ? 'open' : 'close'));\n    });\n  }\n\n  get _width(): number {\n    return this._elementRef.nativeElement ? (this._elementRef.nativeElement.offsetWidth || 0) : 0;\n  }\n}\n\n\n/**\n * `<mat-drawer-container>` component.\n *\n * This is the parent component to one or two `<mat-drawer>`s that validates the state internally\n * and coordinates the backdrop and content styling.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer-container',\n  exportAs: 'matDrawerContainer',\n  templateUrl: 'drawer-container.html',\n  styleUrls: ['drawer.css'],\n  host: {\n    'class': 'mat-drawer-container',\n    '[class.mat-drawer-container-explicit-backdrop]': '_backdropOverride',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDrawerContainer implements AfterContentInit, DoCheck, OnDestroy {\n  @ContentChildren(MatDrawer) _drawers: QueryList<MatDrawer>;\n  @ContentChild(MatDrawerContent) _content: MatDrawerContent;\n  @ViewChild(MatDrawerContent) _userContent: MatDrawerContent;\n\n  /** The drawer child with the `start` position. */\n  get start(): MatDrawer | null { return this._start; }\n\n  /** The drawer child with the `end` position. */\n  get end(): MatDrawer | null { return this._end; }\n\n  /**\n   * Whether to automatically resize the container whenever\n   * the size of any of its drawers changes.\n   *\n   * **Use at your own risk!** Enabling this option can cause layout thrashing by measuring\n   * the drawers on every change detection cycle. Can be configured globally via the\n   * `MAT_DRAWER_DEFAULT_AUTOSIZE` token.\n   */\n  @Input()\n  get autosize(): boolean { return this._autosize; }\n  set autosize(value: boolean) { this._autosize = coerceBooleanProperty(value); }\n  private _autosize: boolean;\n\n  /**\n   * Whether the drawer container should have a backdrop while one of the sidenavs is open.\n   * If explicitly set to `true`, the backdrop will be enabled for drawers in the `side`\n   * mode as well.\n   */\n  @Input()\n  get hasBackdrop() {\n    if (this._backdropOverride == null) {\n      return !this._start || this._start.mode !== 'side' || !this._end || this._end.mode !== 'side';\n    }\n\n    return this._backdropOverride;\n  }\n  set hasBackdrop(value: any) {\n    this._backdropOverride = value == null ? null : coerceBooleanProperty(value);\n  }\n  _backdropOverride: boolean | null;\n\n  /** Event emitted when the drawer backdrop is clicked. */\n  @Output() readonly backdropClick: EventEmitter<void> = new EventEmitter<void>();\n\n  /** The drawer at the start/end position, independent of direction. */\n  private _start: MatDrawer | null;\n  private _end: MatDrawer | null;\n\n  /**\n   * The drawer at the left/right. When direction changes, these will change as well.\n   * They're used as aliases for the above to set the left/right style properly.\n   * In LTR, _left == _start and _right == _end.\n   * In RTL, _left == _end and _right == _start.\n   */\n  private _left: MatDrawer | null;\n  private _right: MatDrawer | null;\n\n  /** Emits when the component is destroyed. */\n  private readonly _destroyed = new Subject<void>();\n\n  /** Emits on every ngDoCheck. Used for debouncing reflows. */\n  private readonly _doCheckSubject = new Subject<void>();\n\n  /**\n   * Margins to be applied to the content. These are used to push / shrink the drawer content when a\n   * drawer is open. We use margin rather than transform even for push mode because transform breaks\n   * fixed position elements inside of the transformed element.\n   */\n  _contentMargins: {left: number|null, right: number|null} = {left: null, right: null};\n\n  readonly _contentMarginChanges = new Subject<{left: number|null, right: number|null}>();\n\n  /** Reference to the CdkScrollable instance that wraps the scrollable content. */\n  get scrollable(): CdkScrollable {\n    return this._userContent || this._content;\n  }\n\n  constructor(@Optional() private _dir: Directionality,\n              private _element: ElementRef<HTMLElement>,\n              private _ngZone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Inject(MAT_DRAWER_DEFAULT_AUTOSIZE) defaultAutosize = false,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) private _animationMode?: string) {\n\n    // If a `Dir` directive exists up the tree, listen direction changes\n    // and update the left/right properties to point to the proper start/end.\n    if (_dir) {\n      _dir.change.pipe(takeUntil(this._destroyed)).subscribe(() => {\n        this._validateDrawers();\n        this._updateContentMargins();\n      });\n    }\n\n    this._autosize = defaultAutosize;\n  }\n\n  ngAfterContentInit() {\n    this._drawers.changes.pipe(startWith(null)).subscribe(() => {\n      this._validateDrawers();\n\n      this._drawers.forEach((drawer: MatDrawer) => {\n        this._watchDrawerToggle(drawer);\n        this._watchDrawerPosition(drawer);\n        this._watchDrawerMode(drawer);\n      });\n\n      if (!this._drawers.length ||\n          this._isDrawerOpen(this._start) ||\n          this._isDrawerOpen(this._end)) {\n        this._updateContentMargins();\n      }\n\n      this._changeDetectorRef.markForCheck();\n    });\n\n    this._doCheckSubject.pipe(\n      debounceTime(10), // Arbitrary debounce time, less than a frame at 60fps\n      takeUntil(this._destroyed)\n    ).subscribe(() => this._updateContentMargins());\n  }\n\n  ngOnDestroy() {\n    this._doCheckSubject.complete();\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /** Calls `open` of both start and end drawers */\n  open(): void {\n    this._drawers.forEach(drawer => drawer.open());\n  }\n\n  /** Calls `close` of both start and end drawers */\n  close(): void {\n    this._drawers.forEach(drawer => drawer.close());\n  }\n\n  ngDoCheck() {\n    // If users opted into autosizing, do a check every change detection cycle.\n    if (this._autosize && this._isPushed()) {\n      // Run outside the NgZone, otherwise the debouncer will throw us into an infinite loop.\n      this._ngZone.runOutsideAngular(() => this._doCheckSubject.next());\n    }\n  }\n\n  /**\n   * Subscribes to drawer events in order to set a class on the main container element when the\n   * drawer is open and the backdrop is visible. This ensures any overflow on the container element\n   * is properly hidden.\n   */\n  private _watchDrawerToggle(drawer: MatDrawer): void {\n    drawer._animationStarted.pipe(\n      takeUntil(this._drawers.changes),\n      filter((event: AnimationEvent) => event.fromState !== event.toState)\n    )\n    .subscribe((event: AnimationEvent) => {\n      // Set the transition class on the container so that the animations occur. This should not\n      // be set initially because animations should only be triggered via a change in state.\n      if (event.toState !== 'open-instant' && this._animationMode !== 'NoopAnimations') {\n        this._element.nativeElement.classList.add('mat-drawer-transition');\n      }\n\n      this._updateContentMargins();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    if (drawer.mode !== 'side') {\n      drawer.openedChange.pipe(takeUntil(this._drawers.changes)).subscribe(() =>\n          this._setContainerClass(drawer.opened));\n    }\n  }\n\n  /**\n   * Subscribes to drawer onPositionChanged event in order to\n   * re-validate drawers when the position changes.\n   */\n  private _watchDrawerPosition(drawer: MatDrawer): void {\n    if (!drawer) {\n      return;\n    }\n    // NOTE: We need to wait for the microtask queue to be empty before validating,\n    // since both drawers may be swapping positions at the same time.\n    drawer.onPositionChanged.pipe(takeUntil(this._drawers.changes)).subscribe(() => {\n      this._ngZone.onMicrotaskEmpty.asObservable().pipe(take(1)).subscribe(() => {\n        this._validateDrawers();\n      });\n    });\n  }\n\n  /** Subscribes to changes in drawer mode so we can run change detection. */\n  private _watchDrawerMode(drawer: MatDrawer): void {\n    if (drawer) {\n      drawer._modeChanged.pipe(takeUntil(merge(this._drawers.changes, this._destroyed)))\n        .subscribe(() => {\n          this._updateContentMargins();\n          this._changeDetectorRef.markForCheck();\n        });\n    }\n  }\n\n  /** Toggles the 'mat-drawer-opened' class on the main 'mat-drawer-container' element. */\n  private _setContainerClass(isAdd: boolean): void {\n    if (isAdd) {\n      this._element.nativeElement.classList.add('mat-drawer-opened');\n    } else {\n      this._element.nativeElement.classList.remove('mat-drawer-opened');\n    }\n  }\n\n  /** Validate the state of the drawer children components. */\n  private _validateDrawers() {\n    this._start = this._end = null;\n\n    // Ensure that we have at most one start and one end drawer.\n    this._drawers.forEach(drawer => {\n      if (drawer.position == 'end') {\n        if (this._end != null) {\n          throwMatDuplicatedDrawerError('end');\n        }\n        this._end = drawer;\n      } else {\n        if (this._start != null) {\n          throwMatDuplicatedDrawerError('start');\n        }\n        this._start = drawer;\n      }\n    });\n\n    this._right = this._left = null;\n\n    // Detect if we're LTR or RTL.\n    if (this._dir && this._dir.value === 'rtl') {\n      this._left = this._end;\n      this._right = this._start;\n    } else {\n      this._left = this._start;\n      this._right = this._end;\n    }\n  }\n\n  /** Whether the container is being pushed to the side by one of the drawers. */\n  private _isPushed() {\n    return (this._isDrawerOpen(this._start) && this._start.mode != 'over') ||\n           (this._isDrawerOpen(this._end) && this._end.mode != 'over');\n  }\n\n  _onBackdropClicked() {\n    this.backdropClick.emit();\n    this._closeModalDrawer();\n  }\n\n  _closeModalDrawer() {\n    // Close all open drawers where closing is not disabled and the mode is not `side`.\n    [this._start, this._end]\n      .filter(drawer => drawer && !drawer.disableClose && this._canHaveBackdrop(drawer))\n      .forEach(drawer => drawer!.close());\n  }\n\n  _isShowingBackdrop(): boolean {\n    return (this._isDrawerOpen(this._start) && this._canHaveBackdrop(this._start)) ||\n           (this._isDrawerOpen(this._end) && this._canHaveBackdrop(this._end));\n  }\n\n  private _canHaveBackdrop(drawer: MatDrawer): boolean {\n    return drawer.mode !== 'side' || !!this._backdropOverride;\n  }\n\n  private _isDrawerOpen(drawer: MatDrawer | null): drawer is MatDrawer {\n    return drawer != null && drawer.opened;\n  }\n\n  /**\n   * Recalculates and updates the inline styles for the content. Note that this should be used\n   * sparingly, because it causes a reflow.\n   */\n  private _updateContentMargins() {\n    // 1. For drawers in `over` mode, they don't affect the content.\n    // 2. For drawers in `side` mode they should shrink the content. We do this by adding to the\n    //    left margin (for left drawer) or right margin (for right the drawer).\n    // 3. For drawers in `push` mode the should shift the content without resizing it. We do this by\n    //    adding to the left or right margin and simultaneously subtracting the same amount of\n    //    margin from the other side.\n\n    let left = 0;\n    let right = 0;\n\n    if (this._left && this._left.opened) {\n      if (this._left.mode == 'side') {\n        left += this._left._width;\n      } else if (this._left.mode == 'push') {\n        let width = this._left._width;\n        left += width;\n        right -= width;\n      }\n    }\n\n    if (this._right && this._right.opened) {\n      if (this._right.mode == 'side') {\n        right += this._right._width;\n      } else if (this._right.mode == 'push') {\n        let width = this._right._width;\n        right += width;\n        left -= width;\n      }\n    }\n\n    // If either `right` or `left` is zero, don't set a style to the element. This\n    // allows users to specify a custom size via CSS class in SSR scenarios where the\n    // measured widths will always be zero. Note that we reset to `null` here, rather\n    // than below, in order to ensure that the types in the `if` below are consistent.\n    left = left || null!;\n    right = right || null!;\n\n    if (left !== this._contentMargins.left || right !== this._contentMargins.right) {\n      this._contentMargins = {left, right};\n\n      // Pull back into the NgZone since in some cases we could be outside. We need to be careful\n      // to do it only when something changed, otherwise we can end up hitting the zone too often.\n      this._ngZone.run(() => this._contentMarginChanges.next(this._contentMargins));\n    }\n\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  forwardRef,\n  Inject,\n  Input,\n  ViewEncapsulation,\n  QueryList,\n  ElementRef,\n  NgZone,\n} from '@angular/core';\nimport {MatDrawer, MatDrawerContainer, MatDrawerContent} from './drawer';\nimport {matDrawerAnimations} from './drawer-animations';\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {ScrollDispatcher} from '@angular/cdk/scrolling';\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav-content',\n  template: '<ng-content></ng-content>',\n  host: {\n    'class': 'mat-drawer-content mat-sidenav-content',\n    '[style.margin-left.px]': '_container._contentMargins.left',\n    '[style.margin-right.px]': '_container._contentMargins.right',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSidenavContent extends MatDrawerContent {\n  constructor(\n      changeDetectorRef: ChangeDetectorRef,\n      @Inject(forwardRef(() => MatSidenavContainer)) container: MatSidenavContainer,\n      elementRef: ElementRef<HTMLElement>,\n      scrollDispatcher: ScrollDispatcher,\n      ngZone: NgZone) {\n    super(changeDetectorRef, container, elementRef, scrollDispatcher, ngZone);\n  }\n}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav',\n  exportAs: 'matSidenav',\n  templateUrl: 'drawer.html',\n  animations: [matDrawerAnimations.transformDrawer],\n  host: {\n    'class': 'mat-drawer mat-sidenav',\n    'tabIndex': '-1',\n    '[@transform]': '_animationState',\n    '(@transform.start)': '_animationStarted.next($event)',\n    '(@transform.done)': '_animationEnd.next($event)',\n    // must prevent the browser from aligning text based on value\n    '[attr.align]': 'null',\n    '[class.mat-drawer-end]': 'position === \"end\"',\n    '[class.mat-drawer-over]': 'mode === \"over\"',\n    '[class.mat-drawer-push]': 'mode === \"push\"',\n    '[class.mat-drawer-side]': 'mode === \"side\"',\n    '[class.mat-sidenav-fixed]': 'fixedInViewport',\n    '[style.top.px]': 'fixedInViewport ? fixedTopGap : null',\n    '[style.bottom.px]': 'fixedInViewport ? fixedBottomGap : null',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSidenav extends MatDrawer {\n  /** Whether the sidenav is fixed in the viewport. */\n  @Input()\n  get fixedInViewport(): boolean { return this._fixedInViewport; }\n  set fixedInViewport(value) { this._fixedInViewport = coerceBooleanProperty(value); }\n  private _fixedInViewport = false;\n\n  /**\n   * The gap between the top of the sidenav and the top of the viewport when the sidenav is in fixed\n   * mode.\n   */\n  @Input()\n  get fixedTopGap(): number { return this._fixedTopGap; }\n  set fixedTopGap(value) { this._fixedTopGap = coerceNumberProperty(value); }\n  private _fixedTopGap = 0;\n\n  /**\n   * The gap between the bottom of the sidenav and the bottom of the viewport when the sidenav is in\n   * fixed mode.\n   */\n  @Input()\n  get fixedBottomGap(): number { return this._fixedBottomGap; }\n  set fixedBottomGap(value) { this._fixedBottomGap = coerceNumberProperty(value); }\n  private _fixedBottomGap = 0;\n}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav-container',\n  exportAs: 'matSidenavContainer',\n  templateUrl: 'sidenav-container.html',\n  styleUrls: ['drawer.css'],\n  host: {\n    'class': 'mat-drawer-container mat-sidenav-container',\n    '[class.mat-drawer-container-explicit-backdrop]': '_backdropOverride',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSidenavContainer extends MatDrawerContainer {\n  @ContentChildren(MatSidenav) _drawers: QueryList<MatSidenav>;\n  @ContentChild(MatSidenavContent) _content: MatSidenavContent;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {ScrollingModule} from '@angular/cdk/scrolling';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatDrawer, MatDrawerContainer, MatDrawerContent} from './drawer';\nimport {MatSidenav, MatSidenavContainer, MatSidenavContent} from './sidenav';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    ScrollingModule,\n    PlatformModule,\n  ],\n  exports: [\n    MatCommonModule,\n    MatDrawer,\n    MatDrawerContainer,\n    MatDrawerContent,\n    MatSidenav,\n    MatSidenavContainer,\n    MatSidenavContent,\n  ],\n  declarations: [\n    MatDrawer,\n    MatDrawerContainer,\n    MatDrawerContent,\n    MatSidenav,\n    MatSidenavContainer,\n    MatSidenavContent,\n  ],\n})\nexport class MatSidenavModule {}\n"]}