{"version":3,"file":"list.es5.js","sources":["../../../src/lib/list/list.ts","../../../src/lib/list/selection-list.ts","../../../src/lib/list/list-module.ts"],"names":["tslib_1.__extends"],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  Optional,\n  QueryList,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  MatLine,\n  setLines,\n  mixinDisableRipple,\n} from '@angular/material/core';\n\n// Boilerplate for applying mixins to MatList.\n/** @docs-private */\nexport class MatListBase {}\nexport const _MatListMixinBase: CanDisableRippleCtor & typeof MatListBase =\n    mixinDisableRipple(MatListBase);\n\n// Boilerplate for applying mixins to MatListItem.\n/** @docs-private */\nexport class MatListItemBase {}\nexport const _MatListItemMixinBase: CanDisableRippleCtor & typeof MatListItemBase =\n    mixinDisableRipple(MatListItemBase);\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-nav-list',\n  exportAs: 'matNavList',\n  host: {\n    'role': 'navigation',\n    'class': 'mat-nav-list'\n  },\n  templateUrl: 'list.html',\n  styleUrls: ['list.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatNavList extends _MatListMixinBase implements CanDisableRipple {}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list, mat-action-list',\n  exportAs: 'matList',\n  templateUrl: 'list.html',\n  host: {'class': 'mat-list'},\n  styleUrls: ['list.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatList extends _MatListMixinBase implements CanDisableRipple {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-list-avatar], [matListAvatar]',\n  host: {'class': 'mat-list-avatar'}\n})\nexport class MatListAvatarCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-list-icon], [matListIcon]',\n  host: {'class': 'mat-list-icon'}\n})\nexport class MatListIconCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-subheader], [matSubheader]',\n  host: {'class': 'mat-subheader'}\n})\nexport class MatListSubheaderCssMatStyler {}\n\n/** An item within a Material Design list. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list-item, a[mat-list-item], button[mat-list-item]',\n  exportAs: 'matListItem',\n  host: {\n    'class': 'mat-list-item',\n    // @breaking-change 8.0.0 Remove `mat-list-item-avatar` in favor of `mat-list-item-with-avatar`.\n    '[class.mat-list-item-avatar]': '_avatar || _icon',\n    '[class.mat-list-item-with-avatar]': '_avatar || _icon',\n  },\n  inputs: ['disableRipple'],\n  templateUrl: 'list-item.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatListItem extends _MatListItemMixinBase implements AfterContentInit,\n    CanDisableRipple {\n  private _isNavList: boolean = false;\n\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n  @ContentChild(MatListAvatarCssMatStyler) _avatar: MatListAvatarCssMatStyler;\n  @ContentChild(MatListIconCssMatStyler) _icon: MatListIconCssMatStyler;\n\n  constructor(private _element: ElementRef<HTMLElement>,\n              @Optional() private _navList: MatNavList) {\n    super();\n    this._isNavList = !!_navList;\n\n    // If no type attributed is specified for <button>, set it to \"button\".\n    // If a type attribute is already specified, do nothing.\n    const element = this._getHostElement();\n    if (element.nodeName && element.nodeName.toLowerCase() === 'button'\n        && !element.hasAttribute('type')) {\n      element.setAttribute('type', 'button');\n    }\n  }\n\n  ngAfterContentInit() {\n    setLines(this._lines, this._element);\n  }\n\n  /** Whether this list item should show a ripple effect when clicked. */\n  _isRippleDisabled() {\n    return !this._isNavList || this.disableRipple || this._navList.disableRipple;\n  }\n\n  /** Retrieves the DOM element of the component host. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption, FocusKeyManager} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {SPACE, ENTER, HOME, END, UP_ARROW, DOWN_ARROW, A} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanDisableRipple, CanDisableRippleCtor,\n  MatLine,\n  setLines,\n  mixinDisableRipple,\n} from '@angular/material/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {Subscription} from 'rxjs';\nimport {MatListAvatarCssMatStyler, MatListIconCssMatStyler} from './list';\n\n\n/** @docs-private */\nexport class MatSelectionListBase {}\nexport const _MatSelectionListMixinBase: CanDisableRippleCtor & typeof MatSelectionListBase =\n    mixinDisableRipple(MatSelectionListBase);\n\n/** @docs-private */\nexport class MatListOptionBase {}\nexport const _MatListOptionMixinBase: CanDisableRippleCtor & typeof MatListOptionBase =\n    mixinDisableRipple(MatListOptionBase);\n\n/** @docs-private */\nexport const MAT_SELECTION_LIST_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSelectionList),\n  multi: true\n};\n\n/** Change event that is being fired whenever the selected state of an option changes. */\nexport class MatSelectionListChange {\n  constructor(\n    /** Reference to the selection list that emitted the event. */\n    public source: MatSelectionList,\n    /** Reference to the option that has been changed. */\n    public option: MatListOption) {}\n}\n\n/**\n * Component for list-options of selection-list. Each list-option can automatically\n * generate a checkbox and can put current item into the selectionModel of selection-list\n * if the current item is selected.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list-option',\n  exportAs: 'matListOption',\n  inputs: ['disableRipple'],\n  host: {\n    'role': 'option',\n    'class': 'mat-list-item mat-list-option',\n    '(focus)': '_handleFocus()',\n    '(blur)': '_handleBlur()',\n    '(click)': '_handleClick()',\n    'tabindex': '-1',\n    '[class.mat-list-item-disabled]': 'disabled',\n    '[class.mat-list-item-with-avatar]': '_avatar || _icon',\n    '[attr.aria-selected]': 'selected.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n  },\n  templateUrl: 'list-option.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatListOption extends _MatListOptionMixinBase\n    implements AfterContentInit, OnDestroy, OnInit, FocusableOption, CanDisableRipple {\n\n  private _selected = false;\n  private _disabled = false;\n  private _hasFocus = false;\n\n  @ContentChild(MatListAvatarCssMatStyler) _avatar: MatListAvatarCssMatStyler;\n  @ContentChild(MatListIconCssMatStyler) _icon: MatListIconCssMatStyler;\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n\n  /** DOM element containing the item's text. */\n  @ViewChild('text') _text: ElementRef;\n\n  /** Whether the label should appear before or after the checkbox. Defaults to 'after' */\n  @Input() checkboxPosition: 'before' | 'after' = 'after';\n\n  /** Value of the option */\n  @Input() value: any;\n\n  /** Whether the option is disabled. */\n  @Input()\n  get disabled() { return this._disabled || (this.selectionList && this.selectionList.disabled); }\n  set disabled(value: any) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._disabled) {\n      this._disabled = newValue;\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** Whether the option is selected. */\n  @Input()\n  get selected(): boolean { return this.selectionList.selectedOptions.isSelected(this); }\n  set selected(value: boolean) {\n    const isSelected = coerceBooleanProperty(value);\n\n    if (isSelected !== this._selected) {\n      this._setSelected(isSelected);\n      this.selectionList._reportValueChange();\n    }\n  }\n\n  constructor(private _element: ElementRef<HTMLElement>,\n              private _changeDetector: ChangeDetectorRef,\n              /** @docs-private */\n              @Inject(forwardRef(() => MatSelectionList)) public selectionList: MatSelectionList) {\n    super();\n  }\n\n  ngOnInit() {\n    // List options that are selected at initialization can't be reported properly to the form\n    // control. This is because it takes some time until the selection-list knows about all\n    // available options. Also it can happen that the ControlValueAccessor has an initial value\n    // that should be used instead. Deferring the value change report to the next tick ensures\n    // that the form control value is not being overwritten.\n    const wasSelected = this._selected;\n\n    Promise.resolve().then(() => {\n      if (this._selected || wasSelected) {\n        this.selected = true;\n        this._changeDetector.markForCheck();\n      }\n    });\n  }\n\n  ngAfterContentInit() {\n    setLines(this._lines, this._element);\n  }\n\n  ngOnDestroy(): void {\n    if (this.selected) {\n      // We have to delay this until the next tick in order\n      // to avoid changed after checked errors.\n      Promise.resolve().then(() => this.selected = false);\n    }\n\n    const hadFocus = this._hasFocus;\n    const newActiveItem = this.selectionList._removeOptionFromList(this);\n\n    // Only move focus if this option was focused at the time it was destroyed.\n    if (hadFocus && newActiveItem) {\n      newActiveItem.focus();\n    }\n  }\n\n  /** Toggles the selection state of the option. */\n  toggle(): void {\n    this.selected = !this.selected;\n  }\n\n  /** Allows for programmatic focusing of the option. */\n  focus(): void {\n    this._element.nativeElement.focus();\n  }\n\n  /**\n   * Returns the list item's text label. Implemented as a part of the FocusKeyManager.\n   * @docs-private\n   */\n  getLabel() {\n    return this._text ? (this._text.nativeElement.textContent || '') : '';\n  }\n\n  /** Whether this list item should show a ripple effect when clicked. */\n  _isRippleDisabled() {\n    return this.disabled || this.disableRipple || this.selectionList.disableRipple;\n  }\n\n  _handleClick() {\n    if (!this.disabled) {\n      this.toggle();\n\n      // Emit a change event if the selected state of the option changed through user interaction.\n      this.selectionList._emitChangeEvent(this);\n    }\n  }\n\n  _handleFocus() {\n    this.selectionList._setFocusedOption(this);\n    this._hasFocus = true;\n  }\n\n  _handleBlur() {\n    this.selectionList._onTouched();\n    this._hasFocus = false;\n  }\n\n  /** Retrieves the DOM element of the component host. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n\n  /** Sets the selected state of the option. Returns whether the value has changed. */\n  _setSelected(selected: boolean): boolean {\n    if (selected === this._selected) {\n      return false;\n    }\n\n    this._selected = selected;\n\n    if (selected) {\n      this.selectionList.selectedOptions.select(this);\n    } else {\n      this.selectionList.selectedOptions.deselect(this);\n    }\n\n    this._changeDetector.markForCheck();\n    return true;\n  }\n\n  /**\n   * Notifies Angular that the option needs to be checked in the next change detection run. Mainly\n   * used to trigger an update of the list option if the disabled state of the selection list\n   * changed.\n   */\n  _markForCheck() {\n    this._changeDetector.markForCheck();\n  }\n}\n\n\n/**\n * Material Design list component where each item is a selectable option. Behaves as a listbox.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-selection-list',\n  exportAs: 'matSelectionList',\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\n  host: {\n    'role': 'listbox',\n    '[tabIndex]': 'tabIndex',\n    'class': 'mat-selection-list',\n    '(focus)': 'focus()',\n    '(blur)': '_onTouched()',\n    '(keydown)': '_keydown($event)',\n    'aria-multiselectable': 'true',\n    '[attr.aria-disabled]': 'disabled.toString()',\n  },\n  template: '<ng-content></ng-content>',\n  styleUrls: ['list.css'],\n  encapsulation: ViewEncapsulation.None,\n  providers: [MAT_SELECTION_LIST_VALUE_ACCESSOR],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatSelectionList extends _MatSelectionListMixinBase implements FocusableOption,\n    CanDisableRipple, AfterContentInit, ControlValueAccessor, OnDestroy {\n\n  /** The FocusKeyManager which handles focus. */\n  _keyManager: FocusKeyManager<MatListOption>;\n\n  /** The option components contained within this selection-list. */\n  @ContentChildren(MatListOption) options: QueryList<MatListOption>;\n\n  /** Emits a change event whenever the selected state of an option changes. */\n  @Output() readonly selectionChange: EventEmitter<MatSelectionListChange> =\n      new EventEmitter<MatSelectionListChange>();\n\n  /** Tabindex of the selection list. */\n  @Input() tabIndex: number = 0;\n\n  /**\n   * Function used for comparing an option against the selected value when determining which\n   * options should appear as selected. The first argument is the value of an options. The second\n   * one is a value from the selected value. A boolean must be returned.\n   */\n  @Input() compareWith: (o1: any, o2: any) => boolean;\n\n  /** Whether the selection list is disabled. */\n  @Input()\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // The `MatSelectionList` and `MatListOption` are using the `OnPush` change detection\n    // strategy. Therefore the options will not check for any changes if the `MatSelectionList`\n    // changed its state. Since we know that a change to `disabled` property of the list affects\n    // the state of the options, we manually mark each option for check.\n    if (this.options) {\n      this.options.forEach(option => option._markForCheck());\n    }\n  }\n  private _disabled: boolean = false;\n\n  /** The currently selected options. */\n  selectedOptions: SelectionModel<MatListOption> = new SelectionModel<MatListOption>(true);\n\n  /** View to model callback that should be called whenever the selected options change. */\n  private _onChange: (value: any) => void = (_: any) => {};\n\n  /** Used for storing the values that were assigned before the options were initialized. */\n  private _tempValues: string[]|null;\n\n  /** Subscription to sync value changes in the SelectionModel back to the SelectionList. */\n  private _modelChanges = Subscription.EMPTY;\n\n  /** View to model callback that should be called if the list or its options lost focus. */\n  _onTouched: () => void = () => {};\n\n  constructor(private _element: ElementRef<HTMLElement>, @Attribute('tabindex') tabIndex: string) {\n    super();\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngAfterContentInit(): void {\n    this._keyManager = new FocusKeyManager<MatListOption>(this.options)\n      .withWrap()\n      .withTypeAhead()\n      // Allow disabled items to be focusable. For accessibility reasons, there must be a way for\n      // screenreader users, that allows reading the different options of the list.\n      .skipPredicate(() => false);\n\n    if (this._tempValues) {\n      this._setOptionsFromValues(this._tempValues);\n      this._tempValues = null;\n    }\n\n    // Sync external changes to the model back to the options.\n    this._modelChanges = this.selectedOptions.onChange.subscribe(event => {\n      if (event.added) {\n        for (let item of event.added) {\n          item.selected = true;\n        }\n      }\n\n      if (event.removed) {\n        for (let item of event.removed) {\n          item.selected = false;\n        }\n      }\n    });\n  }\n\n  ngOnDestroy() {\n    this._modelChanges.unsubscribe();\n  }\n\n  /** Focuses the last active list option. */\n  focus() {\n    this._element.nativeElement.focus();\n  }\n\n  /** Selects all of the options. */\n  selectAll() {\n    this._setAllOptionsSelected(true);\n  }\n\n  /** Deselects all of the options. */\n  deselectAll() {\n    this._setAllOptionsSelected(false);\n  }\n\n  /** Sets the focused option of the selection-list. */\n  _setFocusedOption(option: MatListOption) {\n    this._keyManager.updateActiveItemIndex(this._getOptionIndex(option));\n  }\n\n  /**\n   * Removes an option from the selection list and updates the active item.\n   * @returns Currently-active item.\n   */\n  _removeOptionFromList(option: MatListOption): MatListOption | null {\n    const optionIndex = this._getOptionIndex(option);\n\n    if (optionIndex > -1 && this._keyManager.activeItemIndex === optionIndex) {\n      // Check whether the option is the last item\n      if (optionIndex > 0) {\n        this._keyManager.updateActiveItemIndex(optionIndex - 1);\n      } else if (optionIndex === 0 && this.options.length > 1) {\n        this._keyManager.updateActiveItemIndex(Math.min(optionIndex + 1, this.options.length - 1));\n      }\n    }\n\n    return this._keyManager.activeItem;\n  }\n\n  /** Passes relevant key presses to our key manager. */\n  _keydown(event: KeyboardEvent) {\n    const keyCode = event.keyCode;\n    const manager = this._keyManager;\n    const previousFocusIndex = manager.activeItemIndex;\n\n    switch (keyCode) {\n      case SPACE:\n      case ENTER:\n        this._toggleFocusedOption();\n        // Always prevent space from scrolling the page since the list has focus\n        event.preventDefault();\n        break;\n      case HOME:\n      case END:\n        keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n        event.preventDefault();\n        break;\n      case A:\n        if (event.ctrlKey) {\n          this.options.find(option => !option.selected) ? this.selectAll() : this.deselectAll();\n          event.preventDefault();\n        }\n        break;\n      default:\n        manager.onKeydown(event);\n    }\n\n    if ((keyCode === UP_ARROW || keyCode === DOWN_ARROW) && event.shiftKey &&\n        manager.activeItemIndex !== previousFocusIndex) {\n      this._toggleFocusedOption();\n    }\n  }\n\n  /** Reports a value change to the ControlValueAccessor */\n  _reportValueChange() {\n    if (this.options) {\n      this._onChange(this._getSelectedOptionValues());\n    }\n  }\n\n  /** Emits a change event if the selected state of an option changed. */\n  _emitChangeEvent(option: MatListOption) {\n    this.selectionChange.emit(new MatSelectionListChange(this, option));\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  writeValue(values: string[]): void {\n    if (this.options) {\n      this._setOptionsFromValues(values || []);\n    } else {\n      this._tempValues = values;\n    }\n  }\n\n  /** Implemented as a part of ControlValueAccessor. */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  /** Sets the selected options based on the specified values. */\n  private _setOptionsFromValues(values: string[]) {\n    this.options.forEach(option => option._setSelected(false));\n\n    values.forEach(value => {\n      const correspondingOption = this.options.find(option => {\n        // Skip options that are already in the model. This allows us to handle cases\n        // where the same primitive value is selected multiple times.\n        if (option.selected) {\n          return false;\n        }\n\n        return this.compareWith ? this.compareWith(option.value, value) : option.value === value;\n      });\n\n      if (correspondingOption) {\n        correspondingOption._setSelected(true);\n      }\n    });\n  }\n\n  /** Returns the values of the selected options. */\n  private _getSelectedOptionValues(): string[] {\n    return this.options.filter(option => option.selected).map(option => option.value);\n  }\n\n  /** Toggles the state of the currently focused option if enabled. */\n  private _toggleFocusedOption(): void {\n    let focusedIndex = this._keyManager.activeItemIndex;\n\n    if (focusedIndex != null && this._isValidIndex(focusedIndex)) {\n      let focusedOption: MatListOption = this.options.toArray()[focusedIndex];\n\n      if (focusedOption && !focusedOption.disabled) {\n        focusedOption.toggle();\n\n        // Emit a change event because the focused option changed its state through user\n        // interaction.\n        this._emitChangeEvent(focusedOption);\n      }\n    }\n  }\n\n  /**\n   * Sets the selected state on all of the options\n   * and emits an event if anything changed.\n   */\n  private _setAllOptionsSelected(isSelected: boolean) {\n    // Keep track of whether anything changed, because we only want to\n    // emit the changed event when something actually changed.\n    let hasChanged = false;\n\n    this.options.forEach(option => {\n      if (option._setSelected(isSelected)) {\n        hasChanged = true;\n      }\n    });\n\n    if (hasChanged) {\n      this._reportValueChange();\n    }\n  }\n\n  /**\n   * Utility to ensure all indexes are valid.\n   * @param index The index to be checked.\n   * @returns True if the index is valid for our list of options.\n   */\n  private _isValidIndex(index: number): boolean {\n    return index >= 0 && index < this.options.length;\n  }\n\n  /** Returns the index of the specified list option. */\n  private _getOptionIndex(option: MatListOption): number {\n    return this.options.toArray().indexOf(option);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {\n  MatCommonModule,\n  MatLineModule,\n  MatPseudoCheckboxModule,\n  MatRippleModule,\n} from '@angular/material/core';\nimport {\n  MatList,\n  MatNavList,\n  MatListAvatarCssMatStyler,\n  MatListIconCssMatStyler,\n  MatListItem,\n  MatListSubheaderCssMatStyler,\n} from './list';\nimport {MatListOption, MatSelectionList} from './selection-list';\nimport {MatDividerModule} from '@angular/material/divider';\n\n\n@NgModule({\n  imports: [MatLineModule, MatRippleModule, MatCommonModule, MatPseudoCheckboxModule, CommonModule],\n  exports: [\n    MatList,\n    MatNavList,\n    MatListItem,\n    MatListAvatarCssMatStyler,\n    MatLineModule,\n    MatCommonModule,\n    MatListIconCssMatStyler,\n    MatListSubheaderCssMatStyler,\n    MatPseudoCheckboxModule,\n    MatSelectionList,\n    MatListOption,\n    MatDividerModule\n  ],\n  declarations: [\n    MatList,\n    MatNavList,\n    MatListItem,\n    MatListAvatarCssMatStyler,\n    MatListIconCssMatStyler,\n    MatListSubheaderCssMatStyler,\n    MatSelectionList,\n    MatListOption\n  ],\n})\nexport class MatListModule {}\n"]}