{"version":3,"file":"list.js","sources":["../../../src/lib/list/list.ts","../../../src/lib/list/selection-list.ts","../../../src/lib/list/list-module.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  Optional,\n  QueryList,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  MatLine,\n  setLines,\n  mixinDisableRipple,\n} from '@angular/material/core';\n\n// Boilerplate for applying mixins to MatList.\n/** @docs-private */\nexport class MatListBase {}\nexport const _MatListMixinBase: CanDisableRippleCtor & typeof MatListBase =\n    mixinDisableRipple(MatListBase);\n\n// Boilerplate for applying mixins to MatListItem.\n/** @docs-private */\nexport class MatListItemBase {}\nexport const _MatListItemMixinBase: CanDisableRippleCtor & typeof MatListItemBase =\n    mixinDisableRipple(MatListItemBase);\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-nav-list',\n  exportAs: 'matNavList',\n  host: {\n    'role': 'navigation',\n    'class': 'mat-nav-list'\n  },\n  templateUrl: 'list.html',\n  styleUrls: ['list.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatNavList extends _MatListMixinBase implements CanDisableRipple {}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list, mat-action-list',\n  exportAs: 'matList',\n  templateUrl: 'list.html',\n  host: {'class': 'mat-list'},\n  styleUrls: ['list.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatList extends _MatListMixinBase implements CanDisableRipple {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-list-avatar], [matListAvatar]',\n  host: {'class': 'mat-list-avatar'}\n})\nexport class MatListAvatarCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-list-icon], [matListIcon]',\n  host: {'class': 'mat-list-icon'}\n})\nexport class MatListIconCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-subheader], [matSubheader]',\n  host: {'class': 'mat-subheader'}\n})\nexport class MatListSubheaderCssMatStyler {}\n\n/** An item within a Material Design list. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list-item, a[mat-list-item], button[mat-list-item]',\n  exportAs: 'matListItem',\n  host: {\n    'class': 'mat-list-item',\n    // @breaking-change 8.0.0 Remove `mat-list-item-avatar` in favor of `mat-list-item-with-avatar`.\n    '[class.mat-list-item-avatar]': '_avatar || _icon',\n    '[class.mat-list-item-with-avatar]': '_avatar || _icon',\n  },\n  inputs: ['disableRipple'],\n  templateUrl: 'list-item.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatListItem extends _MatListItemMixinBase implements AfterContentInit,\n    CanDisableRipple {\n  private _isNavList: boolean = false;\n\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n  @ContentChild(MatListAvatarCssMatStyler) _avatar: MatListAvatarCssMatStyler;\n  @ContentChild(MatListIconCssMatStyler) _icon: MatListIconCssMatStyler;\n\n  constructor(private _element: ElementRef<HTMLElement>,\n              @Optional() private _navList: MatNavList) {\n    super();\n    this._isNavList = !!_navList;\n\n    // If no type attributed is specified for <button>, set it to \"button\".\n    // If a type attribute is already specified, do nothing.\n    const element = this._getHostElement();\n    if (element.nodeName && element.nodeName.toLowerCase() === 'button'\n        && !element.hasAttribute('type')) {\n      element.setAttribute('type', 'button');\n    }\n  }\n\n  ngAfterContentInit() {\n    setLines(this._lines, this._element);\n  }\n\n  /** Whether this list item should show a ripple effect when clicked. */\n  _isRippleDisabled() {\n    return !this._isNavList || this.disableRipple || this._navList.disableRipple;\n  }\n\n  /** Retrieves the DOM element of the component host. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption, FocusKeyManager} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {SPACE, ENTER, HOME, END, UP_ARROW, DOWN_ARROW, A} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanDisableRipple, CanDisableRippleCtor,\n  MatLine,\n  setLines,\n  mixinDisableRipple,\n} from '@angular/material/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {Subscription} from 'rxjs';\nimport {MatListAvatarCssMatStyler, MatListIconCssMatStyler} from './list';\n\n\n/** @docs-private */\nexport class MatSelectionListBase {}\nexport const _MatSelectionListMixinBase: CanDisableRippleCtor & typeof MatSelectionListBase =\n    mixinDisableRipple(MatSelectionListBase);\n\n/** @docs-private */\nexport class MatListOptionBase {}\nexport const _MatListOptionMixinBase: CanDisableRippleCtor & typeof MatListOptionBase =\n    mixinDisableRipple(MatListOptionBase);\n\n/** @docs-private */\nexport const MAT_SELECTION_LIST_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSelectionList),\n  multi: true\n};\n\n/** Change event that is being fired whenever the selected state of an option changes. */\nexport class MatSelectionListChange {\n  constructor(\n    /** Reference to the selection list that emitted the event. */\n    public source: MatSelectionList,\n    /** Reference to the option that has been changed. */\n    public option: MatListOption) {}\n}\n\n/**\n * Component for list-options of selection-list. Each list-option can automatically\n * generate a checkbox and can put current item into the selectionModel of selection-list\n * if the current item is selected.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list-option',\n  exportAs: 'matListOption',\n  inputs: ['disableRipple'],\n  host: {\n    'role': 'option',\n    'class': 'mat-list-item mat-list-option',\n    '(focus)': '_handleFocus()',\n    '(blur)': '_handleBlur()',\n    '(click)': '_handleClick()',\n    'tabindex': '-1',\n    '[class.mat-list-item-disabled]': 'disabled',\n    '[class.mat-list-item-with-avatar]': '_avatar || _icon',\n    '[attr.aria-selected]': 'selected.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n  },\n  templateUrl: 'list-option.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatListOption extends _MatListOptionMixinBase\n    implements AfterContentInit, OnDestroy, OnInit, FocusableOption, CanDisableRipple {\n\n  private _selected = false;\n  private _disabled = false;\n  private _hasFocus = false;\n\n  @ContentChild(MatListAvatarCssMatStyler) _avatar: MatListAvatarCssMatStyler;\n  @ContentChild(MatListIconCssMatStyler) _icon: MatListIconCssMatStyler;\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n\n  /** DOM element containing the item's text. */\n  @ViewChild('text') _text: ElementRef;\n\n  /** Whether the label should appear before or after the checkbox. Defaults to 'after' */\n  @Input() checkboxPosition: 'before' | 'after' = 'after';\n\n  /** Value of the option */\n  @Input() value: any;\n\n  /** Whether the option is disabled. */\n  @Input()\n  get disabled() { return this._disabled || (this.selectionList && this.selectionList.disabled); }\n  set disabled(value: any) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._disabled) {\n      this._disabled = newValue;\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** Whether the option is selected. */\n  @Input()\n  get selected(): boolean { return this.selectionList.selectedOptions.isSelected(this); }\n  set selected(value: boolean) {\n    const isSelected = coerceBooleanProperty(value);\n\n    if (isSelected !== this._selected) {\n      this._setSelected(isSelected);\n      this.selectionList._reportValueChange();\n    }\n  }\n\n  constructor(private _element: ElementRef<HTMLElement>,\n              private _changeDetector: ChangeDetectorRef,\n              /** @docs-private */\n              @Inject(forwardRef(() => MatSelectionList)) public selectionList: MatSelectionList) {\n    super();\n  }\n\n  ngOnInit() {\n    // List options that are selected at initialization can't be reported properly to the form\n    // control. This is because it takes some time until the selection-list knows about all\n    // available options. Also it can happen that the ControlValueAccessor has an initial value\n    // that should be used instead. Deferring the value change report to the next tick ensures\n    // that the form control value is not being overwritten.\n    const wasSelected = this._selected;\n\n    Promise.resolve().then(() => {\n      if (this._selected || wasSelected) {\n        this.selected = true;\n        this._changeDetector.markForCheck();\n      }\n    });\n  }\n\n  ngAfterContentInit() {\n    setLines(this._lines, this._element);\n  }\n\n  ngOnDestroy(): void {\n    if (this.selected) {\n      // We have to delay this until the next tick in order\n      // to avoid changed after checked errors.\n      Promise.resolve().then(() => this.selected = false);\n    }\n\n    const hadFocus = this._hasFocus;\n    const newActiveItem = this.selectionList._removeOptionFromList(this);\n\n    // Only move focus if this option was focused at the time it was destroyed.\n    if (hadFocus && newActiveItem) {\n      newActiveItem.focus();\n    }\n  }\n\n  /** Toggles the selection state of the option. */\n  toggle(): void {\n    this.selected = !this.selected;\n  }\n\n  /** Allows for programmatic focusing of the option. */\n  focus(): void {\n    this._element.nativeElement.focus();\n  }\n\n  /**\n   * Returns the list item's text label. Implemented as a part of the FocusKeyManager.\n   * @docs-private\n   */\n  getLabel() {\n    return this._text ? (this._text.nativeElement.textContent || '') : '';\n  }\n\n  /** Whether this list item should show a ripple effect when clicked. */\n  _isRippleDisabled() {\n    return this.disabled || this.disableRipple || this.selectionList.disableRipple;\n  }\n\n  _handleClick() {\n    if (!this.disabled) {\n      this.toggle();\n\n      // Emit a change event if the selected state of the option changed through user interaction.\n      this.selectionList._emitChangeEvent(this);\n    }\n  }\n\n  _handleFocus() {\n    this.selectionList._setFocusedOption(this);\n    this._hasFocus = true;\n  }\n\n  _handleBlur() {\n    this.selectionList._onTouched();\n    this._hasFocus = false;\n  }\n\n  /** Retrieves the DOM element of the component host. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n\n  /** Sets the selected state of the option. Returns whether the value has changed. */\n  _setSelected(selected: boolean): boolean {\n    if (selected === this._selected) {\n      return false;\n    }\n\n    this._selected = selected;\n\n    if (selected) {\n      this.selectionList.selectedOptions.select(this);\n    } else {\n      this.selectionList.selectedOptions.deselect(this);\n    }\n\n    this._changeDetector.markForCheck();\n    return true;\n  }\n\n  /**\n   * Notifies Angular that the option needs to be checked in the next change detection run. Mainly\n   * used to trigger an update of the list option if the disabled state of the selection list\n   * changed.\n   */\n  _markForCheck() {\n    this._changeDetector.markForCheck();\n  }\n}\n\n\n/**\n * Material Design list component where each item is a selectable option. Behaves as a listbox.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-selection-list',\n  exportAs: 'matSelectionList',\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\n  host: {\n    'role': 'listbox',\n    '[tabIndex]': 'tabIndex',\n    'class': 'mat-selection-list',\n    '(focus)': 'focus()',\n    '(blur)': '_onTouched()',\n    '(keydown)': '_keydown($event)',\n    'aria-multiselectable': 'true',\n    '[attr.aria-disabled]': 'disabled.toString()',\n  },\n  template: '<ng-content></ng-content>',\n  styleUrls: ['list.css'],\n  encapsulation: ViewEncapsulation.None,\n  providers: [MAT_SELECTION_LIST_VALUE_ACCESSOR],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatSelectionList extends _MatSelectionListMixinBase implements FocusableOption,\n    CanDisableRipple, AfterContentInit, ControlValueAccessor, OnDestroy {\n\n  /** The FocusKeyManager which handles focus. */\n  _keyManager: FocusKeyManager<MatListOption>;\n\n  /** The option components contained within this selection-list. */\n  @ContentChildren(MatListOption) options: QueryList<MatListOption>;\n\n  /** Emits a change event whenever the selected state of an option changes. */\n  @Output() readonly selectionChange: EventEmitter<MatSelectionListChange> =\n      new EventEmitter<MatSelectionListChange>();\n\n  /** Tabindex of the selection list. */\n  @Input() tabIndex: number = 0;\n\n  /**\n   * Function used for comparing an option against the selected value when determining which\n   * options should appear as selected. The first argument is the value of an options. The second\n   * one is a value from the selected value. A boolean must be returned.\n   */\n  @Input() compareWith: (o1: any, o2: any) => boolean;\n\n  /** Whether the selection list is disabled. */\n  @Input()\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // The `MatSelectionList` and `MatListOption` are using the `OnPush` change detection\n    // strategy. Therefore the options will not check for any changes if the `MatSelectionList`\n    // changed its state. Since we know that a change to `disabled` property of the list affects\n    // the state of the options, we manually mark each option for check.\n    if (this.options) {\n      this.options.forEach(option => option._markForCheck());\n    }\n  }\n  private _disabled: boolean = false;\n\n  /** The currently selected options. */\n  selectedOptions: SelectionModel<MatListOption> = new SelectionModel<MatListOption>(true);\n\n  /** View to model callback that should be called whenever the selected options change. */\n  private _onChange: (value: any) => void = (_: any) => {};\n\n  /** Used for storing the values that were assigned before the options were initialized. */\n  private _tempValues: string[]|null;\n\n  /** Subscription to sync value changes in the SelectionModel back to the SelectionList. */\n  private _modelChanges = Subscription.EMPTY;\n\n  /** View to model callback that should be called if the list or its options lost focus. */\n  _onTouched: () => void = () => {};\n\n  constructor(private _element: ElementRef<HTMLElement>, @Attribute('tabindex') tabIndex: string) {\n    super();\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngAfterContentInit(): void {\n    this._keyManager = new FocusKeyManager<MatListOption>(this.options)\n      .withWrap()\n      .withTypeAhead()\n      // Allow disabled items to be focusable. For accessibility reasons, there must be a way for\n      // screenreader users, that allows reading the different options of the list.\n      .skipPredicate(() => false);\n\n    if (this._tempValues) {\n      this._setOptionsFromValues(this._tempValues);\n      this._tempValues = null;\n    }\n\n    // Sync external changes to the model back to the options.\n    this._modelChanges = this.selectedOptions.onChange.subscribe(event => {\n      if (event.added) {\n        for (let item of event.added) {\n          item.selected = true;\n        }\n      }\n\n      if (event.removed) {\n        for (let item of event.removed) {\n          item.selected = false;\n        }\n      }\n    });\n  }\n\n  ngOnDestroy() {\n    this._modelChanges.unsubscribe();\n  }\n\n  /** Focuses the last active list option. */\n  focus() {\n    this._element.nativeElement.focus();\n  }\n\n  /** Selects all of the options. */\n  selectAll() {\n    this._setAllOptionsSelected(true);\n  }\n\n  /** Deselects all of the options. */\n  deselectAll() {\n    this._setAllOptionsSelected(false);\n  }\n\n  /** Sets the focused option of the selection-list. */\n  _setFocusedOption(option: MatListOption) {\n    this._keyManager.updateActiveItemIndex(this._getOptionIndex(option));\n  }\n\n  /**\n   * Removes an option from the selection list and updates the active item.\n   * @returns Currently-active item.\n   */\n  _removeOptionFromList(option: MatListOption): MatListOption | null {\n    const optionIndex = this._getOptionIndex(option);\n\n    if (optionIndex > -1 && this._keyManager.activeItemIndex === optionIndex) {\n      // Check whether the option is the last item\n      if (optionIndex > 0) {\n        this._keyManager.updateActiveItemIndex(optionIndex - 1);\n      } else if (optionIndex === 0 && this.options.length > 1) {\n        this._keyManager.updateActiveItemIndex(Math.min(optionIndex + 1, this.options.length - 1));\n      }\n    }\n\n    return this._keyManager.activeItem;\n  }\n\n  /** Passes relevant key presses to our key manager. */\n  _keydown(event: KeyboardEvent) {\n    const keyCode = event.keyCode;\n    const manager = this._keyManager;\n    const previousFocusIndex = manager.activeItemIndex;\n\n    switch (keyCode) {\n      case SPACE:\n      case ENTER:\n        this._toggleFocusedOption();\n        // Always prevent space from scrolling the page since the list has focus\n        event.preventDefault();\n        break;\n      case HOME:\n      case END:\n        keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n        event.preventDefault();\n        break;\n      case A:\n        if (event.ctrlKey) {\n          this.options.find(option => !option.selected) ? this.selectAll() : this.deselectAll();\n          event.preventDefault();\n        }\n        break;\n      default:\n        manager.onKeydown(event);\n    }\n\n    if ((keyCode === UP_ARROW || keyCode === DOWN_ARROW) && event.shiftKey &&\n        manager.activeItemIndex !== previousFocusIndex) {\n      this._toggleFocusedOption();\n    }\n  }\n\n  /** Reports a value change to the ControlValueAccessor */\n  _reportValueChange() {\n    if (this.options) {\n      this._onChange(this._getSelectedOptionValues());\n    }\n  }\n\n  /** Emits a change event if the selected state of an option changed. */\n  _emitChangeEvent(option: MatListOption) {\n    this.selectionChange.emit(new MatSelectionListChange(this, option));\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  writeValue(values: string[]): void {\n    if (this.options) {\n      this._setOptionsFromValues(values || []);\n    } else {\n      this._tempValues = values;\n    }\n  }\n\n  /** Implemented as a part of ControlValueAccessor. */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  /** Sets the selected options based on the specified values. */\n  private _setOptionsFromValues(values: string[]) {\n    this.options.forEach(option => option._setSelected(false));\n\n    values.forEach(value => {\n      const correspondingOption = this.options.find(option => {\n        // Skip options that are already in the model. This allows us to handle cases\n        // where the same primitive value is selected multiple times.\n        if (option.selected) {\n          return false;\n        }\n\n        return this.compareWith ? this.compareWith(option.value, value) : option.value === value;\n      });\n\n      if (correspondingOption) {\n        correspondingOption._setSelected(true);\n      }\n    });\n  }\n\n  /** Returns the values of the selected options. */\n  private _getSelectedOptionValues(): string[] {\n    return this.options.filter(option => option.selected).map(option => option.value);\n  }\n\n  /** Toggles the state of the currently focused option if enabled. */\n  private _toggleFocusedOption(): void {\n    let focusedIndex = this._keyManager.activeItemIndex;\n\n    if (focusedIndex != null && this._isValidIndex(focusedIndex)) {\n      let focusedOption: MatListOption = this.options.toArray()[focusedIndex];\n\n      if (focusedOption && !focusedOption.disabled) {\n        focusedOption.toggle();\n\n        // Emit a change event because the focused option changed its state through user\n        // interaction.\n        this._emitChangeEvent(focusedOption);\n      }\n    }\n  }\n\n  /**\n   * Sets the selected state on all of the options\n   * and emits an event if anything changed.\n   */\n  private _setAllOptionsSelected(isSelected: boolean) {\n    // Keep track of whether anything changed, because we only want to\n    // emit the changed event when something actually changed.\n    let hasChanged = false;\n\n    this.options.forEach(option => {\n      if (option._setSelected(isSelected)) {\n        hasChanged = true;\n      }\n    });\n\n    if (hasChanged) {\n      this._reportValueChange();\n    }\n  }\n\n  /**\n   * Utility to ensure all indexes are valid.\n   * @param index The index to be checked.\n   * @returns True if the index is valid for our list of options.\n   */\n  private _isValidIndex(index: number): boolean {\n    return index >= 0 && index < this.options.length;\n  }\n\n  /** Returns the index of the specified list option. */\n  private _getOptionIndex(option: MatListOption): number {\n    return this.options.toArray().indexOf(option);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {\n  MatCommonModule,\n  MatLineModule,\n  MatPseudoCheckboxModule,\n  MatRippleModule,\n} from '@angular/material/core';\nimport {\n  MatList,\n  MatNavList,\n  MatListAvatarCssMatStyler,\n  MatListIconCssMatStyler,\n  MatListItem,\n  MatListSubheaderCssMatStyler,\n} from './list';\nimport {MatListOption, MatSelectionList} from './selection-list';\nimport {MatDividerModule} from '@angular/material/divider';\n\n\n@NgModule({\n  imports: [MatLineModule, MatRippleModule, MatCommonModule, MatPseudoCheckboxModule, CommonModule],\n  exports: [\n    MatList,\n    MatNavList,\n    MatListItem,\n    MatListAvatarCssMatStyler,\n    MatLineModule,\n    MatCommonModule,\n    MatListIconCssMatStyler,\n    MatListSubheaderCssMatStyler,\n    MatPseudoCheckboxModule,\n    MatSelectionList,\n    MatListOption,\n    MatDividerModule\n  ],\n  declarations: [\n    MatList,\n    MatNavList,\n    MatListItem,\n    MatListAvatarCssMatStyler,\n    MatListIconCssMatStyler,\n    MatListSubheaderCssMatStyler,\n    MatSelectionList,\n    MatListOption\n  ],\n})\nexport class MatListModule {}\n"]}