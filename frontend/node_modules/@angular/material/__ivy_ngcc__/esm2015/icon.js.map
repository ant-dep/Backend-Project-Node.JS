{"version":3,"file":"icon.js","sources":["../../../src/lib/icon/icon-registry.ts","../../../src/lib/icon/icon.ts","../../../src/lib/icon/icon-module.ts"],"names":["observableOf","observableThrow"],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {DOCUMENT} from '@angular/common';\nimport {HttpClient, HttpErrorResponse} from '@angular/common/http';\nimport {\n  Inject,\n  Injectable,\n  InjectionToken,\n  Optional,\n  SecurityContext,\n  SkipSelf,\n} from '@angular/core';\nimport {DomSanitizer, SafeResourceUrl, SafeHtml} from '@angular/platform-browser';\nimport {forkJoin, Observable, of as observableOf, throwError as observableThrow} from 'rxjs';\nimport {catchError, finalize, map, share, tap} from 'rxjs/operators';\n\n\n/**\n * Returns an exception to be thrown in the case when attempting to\n * load an icon with a name that cannot be found.\n * @docs-private\n */\nexport function getMatIconNameNotFoundError(iconName: string): Error {\n  return Error(`Unable to find icon with the name \"${iconName}\"`);\n}\n\n\n/**\n * Returns an exception to be thrown when the consumer attempts to use\n * `<mat-icon>` without including @angular/http.\n * @docs-private\n */\nexport function getMatIconNoHttpProviderError(): Error {\n  return Error('Could not find HttpClient provider for use with Angular Material icons. ' +\n               'Please include the HttpClientModule from @angular/common/http in your ' +\n               'app imports.');\n}\n\n\n/**\n * Returns an exception to be thrown when a URL couldn't be sanitized.\n * @param url URL that was attempted to be sanitized.\n * @docs-private\n */\nexport function getMatIconFailedToSanitizeUrlError(url: SafeResourceUrl): Error {\n  return Error(`The URL provided to MatIconRegistry was not trusted as a resource URL ` +\n               `via Angular's DomSanitizer. Attempted URL was \"${url}\".`);\n}\n\n/**\n * Returns an exception to be thrown when a HTML string couldn't be sanitized.\n * @param literal HTML that was attempted to be sanitized.\n * @docs-private\n */\nexport function getMatIconFailedToSanitizeLiteralError(literal: SafeHtml): Error {\n  return Error(`The literal provided to MatIconRegistry was not trusted as safe HTML by ` +\n               `Angular's DomSanitizer. Attempted literal was \"${literal}\".`);\n}\n\n\n/**\n * Configuration for an icon, including the URL and possibly the cached SVG element.\n * @docs-private\n */\nclass SvgIconConfig {\n  url: SafeResourceUrl | null;\n  svgElement: SVGElement | null;\n\n  constructor(url: SafeResourceUrl);\n  constructor(svgElement: SVGElement);\n  constructor(data: SafeResourceUrl | SVGElement) {\n    // Note that we can't use `instanceof SVGElement` here,\n    // because it'll break during server-side rendering.\n    if (!!(data as any).nodeName) {\n      this.svgElement = data as SVGElement;\n    } else {\n      this.url = data as SafeResourceUrl;\n    }\n  }\n}\n\n/**\n * Service to register and display icons used by the `<mat-icon>` component.\n * - Registers icon URLs by namespace and name.\n * - Registers icon set URLs by namespace.\n * - Registers aliases for CSS classes, for use with icon fonts.\n * - Loads icons from URLs and extracts individual icons from icon sets.\n */\n@Injectable({providedIn: 'root'})\nexport class MatIconRegistry {\n  private _document: Document;\n\n  /**\n   * URLs and cached SVG elements for individual icons. Keys are of the format \"[namespace]:[icon]\".\n   */\n  private _svgIconConfigs = new Map<string, SvgIconConfig>();\n\n  /**\n   * SvgIconConfig objects and cached SVG elements for icon sets, keyed by namespace.\n   * Multiple icon sets can be registered under the same namespace.\n   */\n  private _iconSetConfigs = new Map<string, SvgIconConfig[]>();\n\n  /** Cache for icons loaded by direct URLs. */\n  private _cachedIconsByUrl = new Map<string, SVGElement>();\n\n  /** In-progress icon fetches. Used to coalesce multiple requests to the same URL. */\n  private _inProgressUrlFetches = new Map<string, Observable<string>>();\n\n  /** Map from font identifiers to their CSS class names. Used for icon fonts. */\n  private _fontCssClassesByAlias = new Map<string, string>();\n\n  /**\n   * The CSS class to apply when an `<mat-icon>` component has no icon name, url, or font specified.\n   * The default 'material-icons' value assumes that the material icon font has been loaded as\n   * described at http://google.github.io/material-design-icons/#icon-font-for-the-web\n   */\n  private _defaultFontSetClass = 'material-icons';\n\n  constructor(\n    @Optional() private _httpClient: HttpClient,\n    private _sanitizer: DomSanitizer,\n    @Optional() @Inject(DOCUMENT) document: any) {\n      this._document = document;\n    }\n\n  /**\n   * Registers an icon by URL in the default namespace.\n   * @param iconName Name under which the icon should be registered.\n   * @param url\n   */\n  addSvgIcon(iconName: string, url: SafeResourceUrl): this {\n    return this.addSvgIconInNamespace('', iconName, url);\n  }\n\n  /**\n   * Registers an icon using an HTML string in the default namespace.\n   * @param iconName Name under which the icon should be registered.\n   * @param literal SVG source of the icon.\n   */\n  addSvgIconLiteral(iconName: string, literal: SafeHtml): this {\n    return this.addSvgIconLiteralInNamespace('', iconName, literal);\n  }\n\n  /**\n   * Registers an icon by URL in the specified namespace.\n   * @param namespace Namespace in which the icon should be registered.\n   * @param iconName Name under which the icon should be registered.\n   * @param url\n   */\n  addSvgIconInNamespace(namespace: string, iconName: string, url: SafeResourceUrl): this {\n    return this._addSvgIconConfig(namespace, iconName, new SvgIconConfig(url));\n  }\n\n  /**\n   * Registers an icon using an HTML string in the specified namespace.\n   * @param namespace Namespace in which the icon should be registered.\n   * @param iconName Name under which the icon should be registered.\n   * @param literal SVG source of the icon.\n   */\n  addSvgIconLiteralInNamespace(namespace: string, iconName: string, literal: SafeHtml): this {\n    const sanitizedLiteral = this._sanitizer.sanitize(SecurityContext.HTML, literal);\n\n    if (!sanitizedLiteral) {\n      throw getMatIconFailedToSanitizeLiteralError(literal);\n    }\n\n    const svgElement = this._createSvgElementForSingleIcon(sanitizedLiteral);\n    return this._addSvgIconConfig(namespace, iconName, new SvgIconConfig(svgElement));\n  }\n\n  /**\n   * Registers an icon set by URL in the default namespace.\n   * @param url\n   */\n  addSvgIconSet(url: SafeResourceUrl): this {\n    return this.addSvgIconSetInNamespace('', url);\n  }\n\n  /**\n   * Registers an icon set using an HTML string in the default namespace.\n   * @param literal SVG source of the icon set.\n   */\n  addSvgIconSetLiteral(literal: SafeHtml): this {\n    return this.addSvgIconSetLiteralInNamespace('', literal);\n  }\n\n  /**\n   * Registers an icon set by URL in the specified namespace.\n   * @param namespace Namespace in which to register the icon set.\n   * @param url\n   */\n  addSvgIconSetInNamespace(namespace: string, url: SafeResourceUrl): this {\n    return this._addSvgIconSetConfig(namespace, new SvgIconConfig(url));\n  }\n\n  /**\n   * Registers an icon set using an HTML string in the specified namespace.\n   * @param namespace Namespace in which to register the icon set.\n   * @param literal SVG source of the icon set.\n   */\n  addSvgIconSetLiteralInNamespace(namespace: string, literal: SafeHtml): this {\n    const sanitizedLiteral = this._sanitizer.sanitize(SecurityContext.HTML, literal);\n\n    if (!sanitizedLiteral) {\n      throw getMatIconFailedToSanitizeLiteralError(literal);\n    }\n\n    const svgElement = this._svgElementFromString(sanitizedLiteral);\n    return this._addSvgIconSetConfig(namespace, new SvgIconConfig(svgElement));\n  }\n\n  /**\n   * Defines an alias for a CSS class name to be used for icon fonts. Creating an matIcon\n   * component with the alias as the fontSet input will cause the class name to be applied\n   * to the `<mat-icon>` element.\n   *\n   * @param alias Alias for the font.\n   * @param className Class name override to be used instead of the alias.\n   */\n  registerFontClassAlias(alias: string, className: string = alias): this {\n    this._fontCssClassesByAlias.set(alias, className);\n    return this;\n  }\n\n  /**\n   * Returns the CSS class name associated with the alias by a previous call to\n   * registerFontClassAlias. If no CSS class has been associated, returns the alias unmodified.\n   */\n  classNameForFontAlias(alias: string): string {\n    return this._fontCssClassesByAlias.get(alias) || alias;\n  }\n\n  /**\n   * Sets the CSS class name to be used for icon fonts when an `<mat-icon>` component does not\n   * have a fontSet input value, and is not loading an icon by name or URL.\n   *\n   * @param className\n   */\n  setDefaultFontSetClass(className: string): this {\n    this._defaultFontSetClass = className;\n    return this;\n  }\n\n  /**\n   * Returns the CSS class name to be used for icon fonts when an `<mat-icon>` component does not\n   * have a fontSet input value, and is not loading an icon by name or URL.\n   */\n  getDefaultFontSetClass(): string {\n    return this._defaultFontSetClass;\n  }\n\n  /**\n   * Returns an Observable that produces the icon (as an `<svg>` DOM element) from the given URL.\n   * The response from the URL may be cached so this will not always cause an HTTP request, but\n   * the produced element will always be a new copy of the originally fetched icon. (That is,\n   * it will not contain any modifications made to elements previously returned).\n   *\n   * @param safeUrl URL from which to fetch the SVG icon.\n   */\n  getSvgIconFromUrl(safeUrl: SafeResourceUrl): Observable<SVGElement> {\n    const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n\n    if (!url) {\n      throw getMatIconFailedToSanitizeUrlError(safeUrl);\n    }\n\n    const cachedIcon = this._cachedIconsByUrl.get(url);\n\n    if (cachedIcon) {\n      return observableOf(cloneSvg(cachedIcon));\n    }\n\n    return this._loadSvgIconFromConfig(new SvgIconConfig(safeUrl)).pipe(\n      tap(svg => this._cachedIconsByUrl.set(url!, svg)),\n      map(svg => cloneSvg(svg)),\n    );\n  }\n\n  /**\n   * Returns an Observable that produces the icon (as an `<svg>` DOM element) with the given name\n   * and namespace. The icon must have been previously registered with addIcon or addIconSet;\n   * if not, the Observable will throw an error.\n   *\n   * @param name Name of the icon to be retrieved.\n   * @param namespace Namespace in which to look for the icon.\n   */\n  getNamedSvgIcon(name: string, namespace: string = ''): Observable<SVGElement> {\n    // Return (copy of) cached icon if possible.\n    const key = iconKey(namespace, name);\n    const config = this._svgIconConfigs.get(key);\n\n    if (config) {\n      return this._getSvgFromConfig(config);\n    }\n\n    // See if we have any icon sets registered for the namespace.\n    const iconSetConfigs = this._iconSetConfigs.get(namespace);\n\n    if (iconSetConfigs) {\n      return this._getSvgFromIconSetConfigs(name, iconSetConfigs);\n    }\n\n    return observableThrow(getMatIconNameNotFoundError(key));\n  }\n\n  /**\n   * Returns the cached icon for a SvgIconConfig if available, or fetches it from its URL if not.\n   */\n  private _getSvgFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    if (config.svgElement) {\n      // We already have the SVG element for this icon, return a copy.\n      return observableOf(cloneSvg(config.svgElement));\n    } else {\n      // Fetch the icon from the config's URL, cache it, and return a copy.\n      return this._loadSvgIconFromConfig(config).pipe(\n        tap(svg => config.svgElement = svg),\n        map(svg => cloneSvg(svg)),\n      );\n    }\n  }\n\n  /**\n   * Attempts to find an icon with the specified name in any of the SVG icon sets.\n   * First searches the available cached icons for a nested element with a matching name, and\n   * if found copies the element to a new `<svg>` element. If not found, fetches all icon sets\n   * that have not been cached, and searches again after all fetches are completed.\n   * The returned Observable produces the SVG element if possible, and throws\n   * an error if no icon with the specified name can be found.\n   */\n  private _getSvgFromIconSetConfigs(name: string, iconSetConfigs: SvgIconConfig[]):\n      Observable<SVGElement> {\n    // For all the icon set SVG elements we've fetched, see if any contain an icon with the\n    // requested name.\n    const namedIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n\n    if (namedIcon) {\n      // We could cache namedIcon in _svgIconConfigs, but since we have to make a copy every\n      // time anyway, there's probably not much advantage compared to just always extracting\n      // it from the icon set.\n      return observableOf(namedIcon);\n    }\n\n    // Not found in any cached icon sets. If there are icon sets with URLs that we haven't\n    // fetched, fetch them now and look for iconName in the results.\n    const iconSetFetchRequests: Observable<SVGElement | null>[] = iconSetConfigs\n      .filter(iconSetConfig => !iconSetConfig.svgElement)\n      .map(iconSetConfig => {\n        return this._loadSvgIconSetFromConfig(iconSetConfig).pipe(\n          catchError((err: HttpErrorResponse): Observable<SVGElement | null> => {\n            const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, iconSetConfig.url);\n\n            // Swallow errors fetching individual URLs so the\n            // combined Observable won't necessarily fail.\n            console.error(`Loading icon set URL: ${url} failed: ${err.message}`);\n            return observableOf(null);\n          })\n        );\n      });\n\n    // Fetch all the icon set URLs. When the requests complete, every IconSet should have a\n    // cached SVG element (unless the request failed), and we can check again for the icon.\n    return forkJoin(iconSetFetchRequests).pipe(map(() => {\n      const foundIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n\n      if (!foundIcon) {\n        throw getMatIconNameNotFoundError(name);\n      }\n\n      return foundIcon;\n    }));\n  }\n\n  /**\n   * Searches the cached SVG elements for the given icon sets for a nested icon element whose \"id\"\n   * tag matches the specified name. If found, copies the nested element to a new SVG element and\n   * returns it. Returns null if no matching element is found.\n   */\n  private _extractIconWithNameFromAnySet(iconName: string, iconSetConfigs: SvgIconConfig[]):\n      SVGElement | null {\n    // Iterate backwards, so icon sets added later have precedence.\n    for (let i = iconSetConfigs.length - 1; i >= 0; i--) {\n      const config = iconSetConfigs[i];\n      if (config.svgElement) {\n        const foundIcon = this._extractSvgIconFromSet(config.svgElement, iconName);\n        if (foundIcon) {\n          return foundIcon;\n        }\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Loads the content of the icon URL specified in the SvgIconConfig and creates an SVG element\n   * from it.\n   */\n  private _loadSvgIconFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    return this._fetchUrl(config.url)\n        .pipe(map(svgText => this._createSvgElementForSingleIcon(svgText)));\n  }\n\n  /**\n   * Loads the content of the icon set URL specified in the SvgIconConfig and creates an SVG element\n   * from it.\n   */\n  private _loadSvgIconSetFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    // If the SVG for this icon set has already been parsed, do nothing.\n    if (config.svgElement) {\n      return observableOf(config.svgElement);\n    }\n\n    return this._fetchUrl(config.url).pipe(map(svgText => {\n      // It is possible that the icon set was parsed and cached by an earlier request, so parsing\n      // only needs to occur if the cache is yet unset.\n      if (!config.svgElement) {\n        config.svgElement = this._svgElementFromString(svgText);\n      }\n\n      return config.svgElement;\n    }));\n  }\n\n  /**\n   * Creates a DOM element from the given SVG string, and adds default attributes.\n   */\n  private _createSvgElementForSingleIcon(responseText: string): SVGElement {\n    const svg = this._svgElementFromString(responseText);\n    this._setSvgAttributes(svg);\n    return svg;\n  }\n\n  /**\n   * Searches the cached element of the given SvgIconConfig for a nested icon element whose \"id\"\n   * tag matches the specified name. If found, copies the nested element to a new SVG element and\n   * returns it. Returns null if no matching element is found.\n   */\n  private _extractSvgIconFromSet(iconSet: SVGElement, iconName: string): SVGElement | null {\n    const iconSource = iconSet.querySelector('#' + iconName);\n\n    if (!iconSource) {\n      return null;\n    }\n\n    // Clone the element and remove the ID to prevent multiple elements from being added\n    // to the page with the same ID.\n    const iconElement = iconSource.cloneNode(true) as Element;\n    iconElement.removeAttribute('id');\n\n    // If the icon node is itself an <svg> node, clone and return it directly. If not, set it as\n    // the content of a new <svg> node.\n    if (iconElement.nodeName.toLowerCase() === 'svg') {\n      return this._setSvgAttributes(iconElement as SVGElement);\n    }\n\n    // If the node is a <symbol>, it won't be rendered so we have to convert it into <svg>. Note\n    // that the same could be achieved by referring to it via <use href=\"#id\">, however the <use>\n    // tag is problematic on Firefox, because it needs to include the current page path.\n    if (iconElement.nodeName.toLowerCase() === 'symbol') {\n      return this._setSvgAttributes(this._toSvgElement(iconElement));\n    }\n\n    // createElement('SVG') doesn't work as expected; the DOM ends up with\n    // the correct nodes, but the SVG content doesn't render. Instead we\n    // have to create an empty SVG node using innerHTML and append its content.\n    // Elements created using DOMParser.parseFromString have the same problem.\n    // http://stackoverflow.com/questions/23003278/svg-innerhtml-in-firefox-can-not-display\n    const svg = this._svgElementFromString('<svg></svg>');\n    // Clone the node so we don't remove it from the parent icon set element.\n    svg.appendChild(iconElement);\n\n    return this._setSvgAttributes(svg);\n  }\n\n  /**\n   * Creates a DOM element from the given SVG string.\n   */\n  private _svgElementFromString(str: string): SVGElement {\n    const div = this._document.createElement('DIV');\n    div.innerHTML = str;\n    const svg = div.querySelector('svg') as SVGElement;\n\n    if (!svg) {\n      throw Error('<svg> tag not found');\n    }\n\n    return svg;\n  }\n\n  /**\n   * Converts an element into an SVG node by cloning all of its children.\n   */\n  private _toSvgElement(element: Element): SVGElement {\n    let svg = this._svgElementFromString('<svg></svg>');\n\n    for (let i = 0; i < element.childNodes.length; i++) {\n      if (element.childNodes[i].nodeType === this._document.ELEMENT_NODE) {\n        svg.appendChild(element.childNodes[i].cloneNode(true));\n      }\n    }\n\n    return svg;\n  }\n\n  /**\n   * Sets the default attributes for an SVG element to be used as an icon.\n   */\n  private _setSvgAttributes(svg: SVGElement): SVGElement {\n    svg.setAttribute('fit', '');\n    svg.setAttribute('height', '100%');\n    svg.setAttribute('width', '100%');\n    svg.setAttribute('preserveAspectRatio', 'xMidYMid meet');\n    svg.setAttribute('focusable', 'false'); // Disable IE11 default behavior to make SVGs focusable.\n    return svg;\n  }\n\n  /**\n   * Returns an Observable which produces the string contents of the given URL. Results may be\n   * cached, so future calls with the same URL may not cause another HTTP request.\n   */\n  private _fetchUrl(safeUrl: SafeResourceUrl | null): Observable<string> {\n    if (!this._httpClient) {\n      throw getMatIconNoHttpProviderError();\n    }\n\n    if (safeUrl == null) {\n      throw Error(`Cannot fetch icon from URL \"${safeUrl}\".`);\n    }\n\n    const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n\n    if (!url) {\n      throw getMatIconFailedToSanitizeUrlError(safeUrl);\n    }\n\n    // Store in-progress fetches to avoid sending a duplicate request for a URL when there is\n    // already a request in progress for that URL. It's necessary to call share() on the\n    // Observable returned by http.get() so that multiple subscribers don't cause multiple XHRs.\n    const inProgressFetch = this._inProgressUrlFetches.get(url);\n\n    if (inProgressFetch) {\n      return inProgressFetch;\n    }\n\n    // TODO(jelbourn): for some reason, the `finalize` operator \"loses\" the generic type on the\n    // Observable. Figure out why and fix it.\n    const req = this._httpClient.get(url, {responseType: 'text'}).pipe(\n      finalize(() => this._inProgressUrlFetches.delete(url)),\n      share(),\n    );\n\n    this._inProgressUrlFetches.set(url, req);\n    return req;\n  }\n\n  /**\n   * Registers an icon config by name in the specified namespace.\n   * @param namespace Namespace in which to register the icon config.\n   * @param iconName Name under which to register the config.\n   * @param config Config to be registered.\n   */\n  private _addSvgIconConfig(namespace: string, iconName: string, config: SvgIconConfig): this {\n    this._svgIconConfigs.set(iconKey(namespace, iconName), config);\n    return this;\n  }\n\n  /**\n   * Registers an icon set config in the specified namespace.\n   * @param namespace Namespace in which to register the icon config.\n   * @param config Config to be registered.\n   */\n  private _addSvgIconSetConfig(namespace: string, config: SvgIconConfig): this {\n    const configNamespace = this._iconSetConfigs.get(namespace);\n\n    if (configNamespace) {\n      configNamespace.push(config);\n    } else {\n      this._iconSetConfigs.set(namespace, [config]);\n    }\n\n    return this;\n  }\n}\n\n/** @docs-private */\nexport function ICON_REGISTRY_PROVIDER_FACTORY(\n  parentRegistry: MatIconRegistry,\n  httpClient: HttpClient,\n  sanitizer: DomSanitizer,\n  document?: any) {\n  return parentRegistry || new MatIconRegistry(httpClient, sanitizer, document);\n}\n\n/** @docs-private */\nexport const ICON_REGISTRY_PROVIDER = {\n  // If there is already an MatIconRegistry available, use that. Otherwise, provide a new one.\n  provide: MatIconRegistry,\n  deps: [\n    [new Optional(), new SkipSelf(), MatIconRegistry],\n    [new Optional(), HttpClient],\n    DomSanitizer,\n    [new Optional(), DOCUMENT as InjectionToken<any>],\n  ],\n  useFactory: ICON_REGISTRY_PROVIDER_FACTORY,\n};\n\n/** Clones an SVGElement while preserving type information. */\nfunction cloneSvg(svg: SVGElement): SVGElement {\n  return svg.cloneNode(true) as SVGElement;\n}\n\n/** Returns the cache key to use for an icon namespace and name. */\nfunction iconKey(namespace: string, name: string) {\n  return namespace + ':' + name;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {take} from 'rxjs/operators';\nimport {\n  Attribute,\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  Input,\n  OnChanges,\n  OnInit,\n  SimpleChanges,\n  ViewEncapsulation,\n  Optional,\n  InjectionToken,\n  inject,\n  Inject,\n  OnDestroy,\n  AfterViewChecked,\n} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {CanColor, CanColorCtor, mixinColor} from '@angular/material/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {MatIconRegistry} from './icon-registry';\n\n\n// Boilerplate for applying mixins to MatIcon.\n/** @docs-private */\nexport class MatIconBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatIconMixinBase: CanColorCtor & typeof MatIconBase =\n    mixinColor(MatIconBase);\n\n/**\n * Injection token used to provide the current location to `MatIcon`.\n * Used to handle server-side rendering and to stub out during unit tests.\n * @docs-private\n */\nexport const MAT_ICON_LOCATION = new InjectionToken<MatIconLocation>('mat-icon-location', {\n  providedIn: 'root',\n  factory: MAT_ICON_LOCATION_FACTORY\n});\n\n/**\n * Stubbed out location for `MatIcon`.\n * @docs-private\n */\nexport interface MatIconLocation {\n  getPathname: () => string;\n}\n\n/** @docs-private */\nexport function MAT_ICON_LOCATION_FACTORY(): MatIconLocation {\n  const _document = inject(DOCUMENT);\n\n  return {\n    // Note that this needs to be a function, rather than a property, because Angular\n    // will only resolve it once, but we want the current path on each call.\n    getPathname: () => (_document && _document.location && _document.location.pathname) || ''\n  };\n}\n\n\n/** SVG attributes that accept a FuncIRI (e.g. `url(<something>)`). */\nconst funcIriAttributes = [\n  'clip-path',\n  'color-profile',\n  'src',\n  'cursor',\n  'fill',\n  'filter',\n  'marker',\n  'marker-start',\n  'marker-mid',\n  'marker-end',\n  'mask',\n  'stroke'\n];\n\n/** Selector that can be used to find all elements that are using a `FuncIRI`. */\nconst funcIriAttributeSelector = funcIriAttributes.map(attr => `[${attr}]`).join(', ');\n\n/** Regex that can be used to extract the id out of a FuncIRI. */\nconst funcIriPattern = /^url\\(['\"]?#(.*?)['\"]?\\)$/;\n\n/**\n * Component to display an icon. It can be used in the following ways:\n *\n * - Specify the svgIcon input to load an SVG icon from a URL previously registered with the\n *   addSvgIcon, addSvgIconInNamespace, addSvgIconSet, or addSvgIconSetInNamespace methods of\n *   MatIconRegistry. If the svgIcon value contains a colon it is assumed to be in the format\n *   \"[namespace]:[name]\", if not the value will be the name of an icon in the default namespace.\n *   Examples:\n *     `<mat-icon svgIcon=\"left-arrow\"></mat-icon>\n *     <mat-icon svgIcon=\"animals:cat\"></mat-icon>`\n *\n * - Use a font ligature as an icon by putting the ligature text in the content of the `<mat-icon>`\n *   component. By default the Material icons font is used as described at\n *   http://google.github.io/material-design-icons/#icon-font-for-the-web. You can specify an\n *   alternate font by setting the fontSet input to either the CSS class to apply to use the\n *   desired font, or to an alias previously registered with MatIconRegistry.registerFontClassAlias.\n *   Examples:\n *     `<mat-icon>home</mat-icon>\n *     <mat-icon fontSet=\"myfont\">sun</mat-icon>`\n *\n * - Specify a font glyph to be included via CSS rules by setting the fontSet input to specify the\n *   font, and the fontIcon input to specify the icon. Typically the fontIcon will specify a\n *   CSS class which causes the glyph to be displayed via a :before selector, as in\n *   https://fortawesome.github.io/Font-Awesome/examples/\n *   Example:\n *     `<mat-icon fontSet=\"fa\" fontIcon=\"alarm\"></mat-icon>`\n */\n@Component({\n  moduleId: module.id,\n  template: '<ng-content></ng-content>',\n  selector: 'mat-icon',\n  exportAs: 'matIcon',\n  styleUrls: ['icon.css'],\n  inputs: ['color'],\n  host: {\n    'role': 'img',\n    'class': 'mat-icon',\n    '[class.mat-icon-inline]': 'inline',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatIcon extends _MatIconMixinBase implements OnChanges, OnInit, AfterViewChecked,\n  CanColor, OnDestroy {\n\n  /**\n   * Whether the icon should be inlined, automatically sizing the icon to match the font size of\n   * the element the icon is contained in.\n   */\n  @Input()\n  get inline(): boolean {\n    return this._inline;\n  }\n  set inline(inline: boolean) {\n    this._inline = coerceBooleanProperty(inline);\n  }\n  private _inline: boolean = false;\n\n  /** Name of the icon in the SVG icon set. */\n  @Input() svgIcon: string;\n\n  /** Font set that the icon is a part of. */\n  @Input()\n  get fontSet(): string { return this._fontSet; }\n  set fontSet(value: string) {\n    this._fontSet = this._cleanupFontValue(value);\n  }\n  private _fontSet: string;\n\n  /** Name of an icon within a font set. */\n  @Input()\n  get fontIcon(): string { return this._fontIcon; }\n  set fontIcon(value: string) {\n    this._fontIcon = this._cleanupFontValue(value);\n  }\n  private _fontIcon: string;\n\n  private _previousFontSetClass: string;\n  private _previousFontIconClass: string;\n\n  /** Keeps track of the current page path. */\n  private _previousPath?: string;\n\n  /** Keeps track of the elements and attributes that we've prefixed with the current path. */\n  private _elementsWithExternalReferences?: Map<Element, {name: string, value: string}[]>;\n\n  constructor(\n      elementRef: ElementRef<HTMLElement>,\n      private _iconRegistry: MatIconRegistry,\n      @Attribute('aria-hidden') ariaHidden: string,\n      /**\n       * @deprecated `location` parameter to be made required.\n       * @breaking-change 8.0.0\n       */\n      @Optional() @Inject(MAT_ICON_LOCATION) private _location?: MatIconLocation) {\n    super(elementRef);\n\n    // If the user has not explicitly set aria-hidden, mark the icon as hidden, as this is\n    // the right thing to do for the majority of icon use-cases.\n    if (!ariaHidden) {\n      elementRef.nativeElement.setAttribute('aria-hidden', 'true');\n    }\n  }\n\n  /**\n   * Splits an svgIcon binding value into its icon set and icon name components.\n   * Returns a 2-element array of [(icon set), (icon name)].\n   * The separator for the two fields is ':'. If there is no separator, an empty\n   * string is returned for the icon set and the entire value is returned for\n   * the icon name. If the argument is falsy, returns an array of two empty strings.\n   * Throws an error if the name contains two or more ':' separators.\n   * Examples:\n   *   `'social:cake' -> ['social', 'cake']\n   *   'penguin' -> ['', 'penguin']\n   *   null -> ['', '']\n   *   'a:b:c' -> (throws Error)`\n   */\n  private _splitIconName(iconName: string): [string, string] {\n    if (!iconName) {\n      return ['', ''];\n    }\n    const parts = iconName.split(':');\n    switch (parts.length) {\n      case 1: return ['', parts[0]]; // Use default namespace.\n      case 2: return <[string, string]>parts;\n      default: throw Error(`Invalid icon name: \"${iconName}\"`);\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    // Only update the inline SVG icon if the inputs changed, to avoid unnecessary DOM operations.\n    if (changes.svgIcon) {\n      if (this.svgIcon) {\n        const [namespace, iconName] = this._splitIconName(this.svgIcon);\n\n        this._iconRegistry.getNamedSvgIcon(iconName, namespace).pipe(take(1)).subscribe(\n          svg => this._setSvgElement(svg),\n          (err: Error) => console.log(`Error retrieving icon: ${err.message}`)\n        );\n      } else {\n        this._clearSvgElement();\n      }\n    }\n\n    if (this._usingFontIcon()) {\n      this._updateFontIconClasses();\n    }\n  }\n\n  ngOnInit() {\n    // Update font classes because ngOnChanges won't be called if none of the inputs are present,\n    // e.g. <mat-icon>arrow</mat-icon> In this case we need to add a CSS class for the default font.\n    if (this._usingFontIcon()) {\n      this._updateFontIconClasses();\n    }\n  }\n\n  ngAfterViewChecked() {\n    const cachedElements = this._elementsWithExternalReferences;\n\n    if (cachedElements && this._location && cachedElements.size) {\n      const newPath = this._location.getPathname();\n\n      // We need to check whether the URL has changed on each change detection since\n      // the browser doesn't have an API that will let us react on link clicks and\n      // we can't depend on the Angular router. The references need to be updated,\n      // because while most browsers don't care whether the URL is correct after\n      // the first render, Safari will break if the user navigates to a different\n      // page and the SVG isn't re-rendered.\n      if (newPath !== this._previousPath) {\n        this._previousPath = newPath;\n        this._prependPathToReferences(newPath);\n      }\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._elementsWithExternalReferences) {\n      this._elementsWithExternalReferences.clear();\n    }\n  }\n\n  private _usingFontIcon(): boolean {\n    return !this.svgIcon;\n  }\n\n  private _setSvgElement(svg: SVGElement) {\n    this._clearSvgElement();\n\n    // Workaround for IE11 and Edge ignoring `style` tags inside dynamically-created SVGs.\n    // See: https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/10898469/\n    // Do this before inserting the element into the DOM, in order to avoid a style recalculation.\n    const styleTags = svg.querySelectorAll('style') as NodeListOf<HTMLStyleElement>;\n\n    for (let i = 0; i < styleTags.length; i++) {\n      styleTags[i].textContent += ' ';\n    }\n\n    // Note: we do this fix here, rather than the icon registry, because the\n    // references have to point to the URL at the time that the icon was created.\n    if (this._location) {\n      const path = this._location.getPathname();\n      this._previousPath = path;\n      this._cacheChildrenWithExternalReferences(svg);\n      this._prependPathToReferences(path);\n    }\n\n    this._elementRef.nativeElement.appendChild(svg);\n  }\n\n  private _clearSvgElement() {\n    const layoutElement: HTMLElement = this._elementRef.nativeElement;\n    let childCount = layoutElement.childNodes.length;\n\n    if (this._elementsWithExternalReferences) {\n      this._elementsWithExternalReferences.clear();\n    }\n\n    // Remove existing non-element child nodes and SVGs, and add the new SVG element. Note that\n    // we can't use innerHTML, because IE will throw if the element has a data binding.\n    while (childCount--) {\n      const child = layoutElement.childNodes[childCount];\n\n      // 1 corresponds to Node.ELEMENT_NODE. We remove all non-element nodes in order to get rid\n      // of any loose text nodes, as well as any SVG elements in order to remove any old icons.\n      if (child.nodeType !== 1 || child.nodeName.toLowerCase() === 'svg') {\n        layoutElement.removeChild(child);\n      }\n    }\n  }\n\n  private _updateFontIconClasses() {\n    if (!this._usingFontIcon()) {\n      return;\n    }\n\n    const elem: HTMLElement = this._elementRef.nativeElement;\n    const fontSetClass = this.fontSet ?\n        this._iconRegistry.classNameForFontAlias(this.fontSet) :\n        this._iconRegistry.getDefaultFontSetClass();\n\n    if (fontSetClass != this._previousFontSetClass) {\n      if (this._previousFontSetClass) {\n        elem.classList.remove(this._previousFontSetClass);\n      }\n      if (fontSetClass) {\n        elem.classList.add(fontSetClass);\n      }\n      this._previousFontSetClass = fontSetClass;\n    }\n\n    if (this.fontIcon != this._previousFontIconClass) {\n      if (this._previousFontIconClass) {\n        elem.classList.remove(this._previousFontIconClass);\n      }\n      if (this.fontIcon) {\n        elem.classList.add(this.fontIcon);\n      }\n      this._previousFontIconClass = this.fontIcon;\n    }\n  }\n\n  /**\n   * Cleans up a value to be used as a fontIcon or fontSet.\n   * Since the value ends up being assigned as a CSS class, we\n   * have to trim the value and omit space-separated values.\n   */\n  private _cleanupFontValue(value: string) {\n    return typeof value === 'string' ? value.trim().split(' ')[0] : value;\n  }\n\n  /**\n   * Prepends the current path to all elements that have an attribute pointing to a `FuncIRI`\n   * reference. This is required because WebKit browsers require references to be prefixed with\n   * the current path, if the page has a `base` tag.\n   */\n  private _prependPathToReferences(path: string) {\n    const elements = this._elementsWithExternalReferences;\n\n    if (elements) {\n      elements.forEach((attrs, element) => {\n        attrs.forEach(attr => {\n          element.setAttribute(attr.name, `url('${path}#${attr.value}')`);\n        });\n      });\n    }\n  }\n\n  /**\n   * Caches the children of an SVG element that have `url()`\n   * references that we need to prefix with the current path.\n   */\n  private _cacheChildrenWithExternalReferences(element: SVGElement) {\n    const elementsWithFuncIri = element.querySelectorAll(funcIriAttributeSelector);\n    const elements = this._elementsWithExternalReferences =\n        this._elementsWithExternalReferences || new Map();\n\n    for (let i = 0; i < elementsWithFuncIri.length; i++) {\n      funcIriAttributes.forEach(attr => {\n        const elementWithReference = elementsWithFuncIri[i];\n        const value = elementWithReference.getAttribute(attr);\n        const match = value ? value.match(funcIriPattern) : null;\n\n        if (match) {\n          let attributes = elements.get(elementWithReference);\n\n          if (!attributes) {\n            attributes = [];\n            elements.set(elementWithReference, attributes);\n          }\n\n          attributes!.push({name: attr, value: match[1]});\n        }\n      });\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatIcon} from './icon';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatIcon, MatCommonModule],\n  declarations: [MatIcon],\n})\nexport class MatIconModule {}\n"]}