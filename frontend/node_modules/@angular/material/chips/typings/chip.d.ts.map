{"version":3,"file":"chip.d.ts","sources":["chip.d.ts"],"names":[],"mappingssourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { FocusableOption } from '@angular/cdk/a11y';\nimport { Platform } from '@angular/cdk/platform';\nimport { ElementRef, EventEmitter, NgZone, OnDestroy } from '@angular/core';\nimport { CanColor, CanColorCtor, CanDisable, CanDisableCtor, CanDisableRipple, CanDisableRippleCtor, RippleConfig, RippleGlobalOptions, RippleTarget } from '@angular/material/core';\nimport { Subject } from 'rxjs';\n/** Represents an event fired on an individual `mat-chip`. */\nexport interface MatChipEvent {\n    /** The chip the event was fired on. */\n    chip: MatChip;\n}\n/** Event object emitted by MatChip when selected or deselected. */\nexport declare class MatChipSelectionChange {\n    /** Reference to the chip that emitted the event. */\n    source: MatChip;\n    /** Whether the chip that emitted the event is selected. */\n    selected: boolean;\n    /** Whether the selection change was a result of a user interaction. */\n    isUserInput: boolean;\n    constructor(\n    /** Reference to the chip that emitted the event. */\n    source: MatChip, \n    /** Whether the chip that emitted the event is selected. */\n    selected: boolean, \n    /** Whether the selection change was a result of a user interaction. */\n    isUserInput?: boolean);\n}\n/** @docs-private */\nexport declare class MatChipBase {\n    _elementRef: ElementRef;\n    constructor(_elementRef: ElementRef);\n}\nexport declare const _MatChipMixinBase: CanColorCtor & CanDisableRippleCtor & CanDisableCtor & typeof MatChipBase;\n/**\n * Dummy directive to add CSS class to chip avatar.\n * @docs-private\n */\nexport declare class MatChipAvatar {\n}\n/**\n * Dummy directive to add CSS class to chip trailing icon.\n * @docs-private\n */\nexport declare class MatChipTrailingIcon {\n}\n/**\n * Material design styled Chip component. Used inside the MatChipList component.\n */\nexport declare class MatChip extends _MatChipMixinBase implements FocusableOption, OnDestroy, CanColor, CanDisable, CanDisableRipple, RippleTarget {\n    _elementRef: ElementRef;\n    private _ngZone;\n    /** Reference to the RippleRenderer for the chip. */\n    private _chipRipple;\n    /** Whether the ripples are globally disabled through the RippleGlobalOptions */\n    private _ripplesGloballyDisabled;\n    /**\n     * Ripple configuration for ripples that are launched on pointer down.\n     * @docs-private\n     */\n    rippleConfig: RippleConfig;\n    /**\n     * Whether ripples are disabled on interaction\n     * @docs-private\n     */\n    readonly rippleDisabled: boolean;\n    /** Whether the chip has focus. */\n    _hasFocus: boolean;\n    /** Whether the chip list is selectable */\n    chipListSelectable: boolean;\n    /** The chip avatar */\n    avatar: MatChipAvatar;\n    /** The chip's trailing icon. */\n    trailingIcon: MatChipTrailingIcon;\n    /** The chip's remove toggler. */\n    removeIcon: MatChipRemove;\n    /** Whether the chip is selected. */\n    selected: boolean;\n    protected _selected: boolean;\n    /** The value of the chip. Defaults to the content inside `<mat-chip>` tags. */\n    value: any;\n    protected _value: any;\n    /**\n     * Whether or not the chip is selectable. When a chip is not selectable,\n     * changes to it's selected state are always ignored. By default a chip is\n     * selectable, and it becomes non-selectable if it's parent chip list is\n     * not selectable.\n     */\n    selectable: boolean;\n    protected _selectable: boolean;\n    /**\n     * Determines whether or not the chip displays the remove styling and emits (removed) events.\n     */\n    removable: boolean;\n    protected _removable: boolean;\n    /** Emits when the chip is focused. */\n    readonly _onFocus: Subject<MatChipEvent>;\n    /** Emits when the chip is blured. */\n    readonly _onBlur: Subject<MatChipEvent>;\n    /** Emitted when the chip is selected or deselected. */\n    readonly selectionChange: EventEmitter<MatChipSelectionChange>;\n    /** Emitted when the chip is destroyed. */\n    readonly destroyed: EventEmitter<MatChipEvent>;\n    /** Emitted when a chip is to be removed. */\n    readonly removed: EventEmitter<MatChipEvent>;\n    /** The ARIA selected applied to the chip. */\n    readonly ariaSelected: string | null;\n    constructor(_elementRef: ElementRef, _ngZone: NgZone, platform: Platform, globalOptions: RippleGlobalOptions);\n    _addHostClassName(): void;\n    ngOnDestroy(): void;\n    /** Selects the chip. */\n    select(): void;\n    /** Deselects the chip. */\n    deselect(): void;\n    /** Select this chip and emit selected event */\n    selectViaInteraction(): void;\n    /** Toggles the current selected state of this chip. */\n    toggleSelected(isUserInput?: boolean): boolean;\n    /** Allows for programmatic focusing of the chip. */\n    focus(): void;\n    /**\n     * Allows for programmatic removal of the chip. Called by the MatChipList when the DELETE or\n     * BACKSPACE keys are pressed.\n     *\n     * Informs any listeners of the removal request. Does not remove the chip from the DOM.\n     */\n    remove(): void;\n    /** Handles click events on the chip. */\n    _handleClick(event: Event): void;\n    /** Handle custom key presses. */\n    _handleKeydown(event: KeyboardEvent): void;\n    _blur(): void;\n    private _dispatchSelectionChange;\n}\n/**\n * Applies proper (click) support and adds styling for use with the Material Design \"cancel\" icon\n * available at https://material.io/icons/#ic_cancel.\n *\n * Example:\n *\n *     `<mat-chip>\n *       <mat-icon matChipRemove>cancel</mat-icon>\n *     </mat-chip>`\n *\n * You *may* use a custom icon, but you may need to override the `mat-chip-remove` positioning\n * styles to properly center the icon within the chip.\n */\nexport declare class MatChipRemove {\n    protected _parentChip: MatChip;\n    constructor(_parentChip: MatChip);\n    /** Calls the parent chip's public `remove()` method if applicable. */\n    _handleClick(event: Event): void;\n}\n"]}