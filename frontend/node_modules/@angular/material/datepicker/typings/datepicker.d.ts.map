{"version":3,"file":"datepicker.d.ts","sources":["datepicker.d.ts"],"names":[],"mappingssourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Directionality } from '@angular/cdk/bidi';\nimport { Overlay, OverlayRef, ScrollStrategy } from '@angular/cdk/overlay';\nimport { ComponentType } from '@angular/cdk/portal';\nimport { AfterViewInit, ElementRef, EventEmitter, InjectionToken, NgZone, OnDestroy, ViewContainerRef } from '@angular/core';\nimport { CanColor, CanColorCtor, DateAdapter, ThemePalette } from '@angular/material/core';\nimport { MatDialog } from '@angular/material/dialog';\nimport { Subject } from 'rxjs';\nimport { MatCalendar } from './calendar';\nimport { MatDatepickerInput } from './datepicker-input';\n/** Injection token that determines the scroll handling while the calendar is open. */\nexport declare const MAT_DATEPICKER_SCROLL_STRATEGY: InjectionToken<() => ScrollStrategy>;\n/** @docs-private */\nexport declare function MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy;\n/** @docs-private */\nexport declare const MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER: {\n    provide: InjectionToken<() => ScrollStrategy>;\n    deps: (typeof Overlay)[];\n    useFactory: typeof MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY;\n};\n/** @docs-private */\nexport declare class MatDatepickerContentBase {\n    _elementRef: ElementRef;\n    constructor(_elementRef: ElementRef);\n}\nexport declare const _MatDatepickerContentMixinBase: CanColorCtor & typeof MatDatepickerContentBase;\n/**\n * Component used as the content for the datepicker dialog and popup. We use this instead of using\n * MatCalendar directly as the content so we can control the initial focus. This also gives us a\n * place to put additional features of the popup that are not part of the calendar itself in the\n * future. (e.g. confirmation buttons).\n * @docs-private\n */\nexport declare class MatDatepickerContent<D> extends _MatDatepickerContentMixinBase implements AfterViewInit, CanColor {\n    /** Reference to the internal calendar component. */\n    _calendar: MatCalendar<D>;\n    /** Reference to the datepicker that created the overlay. */\n    datepicker: MatDatepicker<D>;\n    /** Whether the datepicker is above or below the input. */\n    _isAbove: boolean;\n    constructor(elementRef: ElementRef);\n    ngAfterViewInit(): void;\n}\n/** Component responsible for managing the datepicker popup/dialog. */\nexport declare class MatDatepicker<D> implements OnDestroy, CanColor {\n    private _dialog;\n    private _overlay;\n    private _ngZone;\n    private _viewContainerRef;\n    private _dateAdapter;\n    private _dir;\n    private _document;\n    private _scrollStrategy;\n    /** An input indicating the type of the custom header component for the calendar, if set. */\n    calendarHeaderComponent: ComponentType<any>;\n    /** The date to open the calendar to initially. */\n    startAt: D | null;\n    private _startAt;\n    /** The view that the calendar should start in. */\n    startView: 'month' | 'year' | 'multi-year';\n    /** Color palette to use on the datepicker's calendar. */\n    color: ThemePalette;\n    _color: ThemePalette;\n    /**\n     * Whether the calendar UI is in touch mode. In touch mode the calendar opens in a dialog rather\n     * than a popup and elements have more padding to allow for bigger touch targets.\n     */\n    touchUi: boolean;\n    private _touchUi;\n    /** Whether the datepicker pop-up should be disabled. */\n    disabled: boolean;\n    private _disabled;\n    /**\n     * Emits selected year in multiyear view.\n     * This doesn't imply a change on the selected date.\n     */\n    readonly yearSelected: EventEmitter<D>;\n    /**\n     * Emits selected month in year view.\n     * This doesn't imply a change on the selected date.\n     */\n    readonly monthSelected: EventEmitter<D>;\n    /** Classes to be passed to the date picker panel. Supports the same syntax as `ngClass`. */\n    panelClass: string | string[];\n    /** Emits when the datepicker has been opened. */\n    openedStream: EventEmitter<void>;\n    /** Emits when the datepicker has been closed. */\n    closedStream: EventEmitter<void>;\n    /** Whether the calendar is open. */\n    opened: boolean;\n    private _opened;\n    /** The id for the datepicker calendar. */\n    id: string;\n    /** The currently selected date. */\n    _selected: D | null;\n    private _validSelected;\n    /** The minimum selectable date. */\n    readonly _minDate: D | null;\n    /** The maximum selectable date. */\n    readonly _maxDate: D | null;\n    readonly _dateFilter: (date: D | null) => boolean;\n    /** A reference to the overlay when the calendar is opened as a popup. */\n    _popupRef: OverlayRef;\n    /** A reference to the dialog when the calendar is opened as a dialog. */\n    private _dialogRef;\n    /** A portal containing the calendar for this datepicker. */\n    private _calendarPortal;\n    /** Reference to the component instantiated in popup mode. */\n    private _popupComponentRef;\n    /** The element that was focused before the datepicker was opened. */\n    private _focusedElementBeforeOpen;\n    /** Subscription to value changes in the associated input element. */\n    private _inputSubscription;\n    /** The input element this datepicker is associated with. */\n    _datepickerInput: MatDatepickerInput<D>;\n    /** Emits when the datepicker is disabled. */\n    readonly _disabledChange: Subject<boolean>;\n    /** Emits new selected date when selected date changes. */\n    readonly _selectedChanged: Subject<D>;\n    constructor(_dialog: MatDialog, _overlay: Overlay, _ngZone: NgZone, _viewContainerRef: ViewContainerRef, scrollStrategy: any, _dateAdapter: DateAdapter<D>, _dir: Directionality, _document: any);\n    ngOnDestroy(): void;\n    /** Selects the given date */\n    select(date: D): void;\n    /** Emits the selected year in multiyear view */\n    _selectYear(normalizedYear: D): void;\n    /** Emits selected month in year view */\n    _selectMonth(normalizedMonth: D): void;\n    /**\n     * Register an input with this datepicker.\n     * @param input The datepicker input to register with this datepicker.\n     */\n    _registerInput(input: MatDatepickerInput<D>): void;\n    /** Open the calendar. */\n    open(): void;\n    /** Close the calendar. */\n    close(): void;\n    /** Open the calendar as a dialog. */\n    private _openAsDialog;\n    /** Open the calendar as a popup. */\n    private _openAsPopup;\n    /** Create the popup. */\n    private _createPopup;\n    /** Create the popup PositionStrategy. */\n    private _createPopupPositionStrategy;\n    /**\n     * @param obj The object to check.\n     * @returns The given object if it is both a date instance and valid, otherwise null.\n     */\n    private _getValidDateOrNull;\n    /** Passes the current theme color along to the calendar overlay. */\n    private _setColor;\n}\n"]}