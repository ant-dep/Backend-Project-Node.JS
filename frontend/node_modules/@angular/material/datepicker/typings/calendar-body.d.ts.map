{"version":3,"file":"calendar-body.d.ts","sources":["calendar-body.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { ElementRef, EventEmitter, NgZone } from '@angular/core';\n/**\n * An internal class that represents the data corresponding to a single calendar cell.\n * @docs-private\n */\nexport declare class MatCalendarCell {\n    value: number;\n    displayValue: string;\n    ariaLabel: string;\n    enabled: boolean;\n    constructor(value: number, displayValue: string, ariaLabel: string, enabled: boolean);\n}\n/**\n * An internal component used to display calendar data in a table.\n * @docs-private\n */\nexport declare class MatCalendarBody {\n    private _elementRef;\n    private _ngZone;\n    /** The label for the table. (e.g. \"Jan 2017\"). */\n    label: string;\n    /** The cells to display in the table. */\n    rows: MatCalendarCell[][];\n    /** The value in the table that corresponds to today. */\n    todayValue: number;\n    /** The value in the table that is currently selected. */\n    selectedValue: number;\n    /** The minimum number of free cells needed to fit the label in the first row. */\n    labelMinRequiredCells: number;\n    /** The number of columns in the table. */\n    numCols: number;\n    /** The cell number of the active cell in the table. */\n    activeCell: number;\n    /**\n     * The aspect ratio (width / height) to use for the cells in the table. This aspect ratio will be\n     * maintained even as the table resizes.\n     */\n    cellAspectRatio: number;\n    /** Emits when a new value is selected. */\n    readonly selectedValueChange: EventEmitter<number>;\n    constructor(_elementRef: ElementRef<HTMLElement>, _ngZone: NgZone);\n    _cellClicked(cell: MatCalendarCell): void;\n    /** The number of blank cells to put at the beginning for the first row. */\n    readonly _firstRowOffset: number;\n    _isActiveCell(rowIndex: number, colIndex: number): boolean;\n    /** Focuses the active cell after the microtask queue is empty. */\n    _focusActiveCell(): void;\n}\n"]}