/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
import { ElementRef } from '@angular/core';
import { CdkCell, CdkCellDef, CdkColumnDef, CdkFooterCell, CdkFooterCellDef, CdkHeaderCell, CdkHeaderCellDef } from '@angular/cdk/table';
import * as ɵngcc0 from '@angular/core';
export declare const _CdkCellDef: typeof CdkCellDef;
export declare const _CdkHeaderCellDef: typeof CdkHeaderCellDef;
export declare const _CdkFooterCellDef: typeof CdkFooterCellDef;
/**
 * Cell definition for the mat-table.
 * Captures the template of a column's data row cell as well as cell-specific properties.
 */
export declare class MatCellDef extends _CdkCellDef {
    static ɵfac: ɵngcc0.ɵɵFactoryDeclaration<MatCellDef, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDeclaration<MatCellDef, "[matCellDef]", never, {}, {}, never>;
}
/**
 * Header cell definition for the mat-table.
 * Captures the template of a column's header cell and as well as cell-specific properties.
 */
export declare class MatHeaderCellDef extends _CdkHeaderCellDef {
    static ɵfac: ɵngcc0.ɵɵFactoryDeclaration<MatHeaderCellDef, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDeclaration<MatHeaderCellDef, "[matHeaderCellDef]", never, {}, {}, never>;
}
/**
 * Footer cell definition for the mat-table.
 * Captures the template of a column's footer cell and as well as cell-specific properties.
 */
export declare class MatFooterCellDef extends _CdkFooterCellDef {
    static ɵfac: ɵngcc0.ɵɵFactoryDeclaration<MatFooterCellDef, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDeclaration<MatFooterCellDef, "[matFooterCellDef]", never, {}, {}, never>;
}
/**
 * Column definition for the mat-table.
 * Defines a set of cells available for a table column.
 */
export declare class MatColumnDef extends CdkColumnDef {
    /** Unique name for this column. */
    name: string;
    /** Whether this column should be sticky positioned at the start of the row */
    sticky: boolean;
    /** Whether this column should be sticky positioned on the end of the row */
    stickyEnd: boolean;
    static ɵfac: ɵngcc0.ɵɵFactoryDeclaration<MatColumnDef, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDeclaration<MatColumnDef, "[matColumnDef]", never, { "name": "matColumnDef"; "sticky": "sticky"; "stickyEnd": "stickyEnd"; }, {}, never>;
}
/** Header cell template container that adds the right classes and role. */
export declare class MatHeaderCell extends CdkHeaderCell {
    constructor(columnDef: CdkColumnDef, elementRef: ElementRef<HTMLElement>);
    static ɵfac: ɵngcc0.ɵɵFactoryDeclaration<MatHeaderCell, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDeclaration<MatHeaderCell, "mat-header-cell, th[mat-header-cell]", never, {}, {}, never>;
}
/** Footer cell template container that adds the right classes and role. */
export declare class MatFooterCell extends CdkFooterCell {
    constructor(columnDef: CdkColumnDef, elementRef: ElementRef);
    static ɵfac: ɵngcc0.ɵɵFactoryDeclaration<MatFooterCell, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDeclaration<MatFooterCell, "mat-footer-cell, td[mat-footer-cell]", never, {}, {}, never>;
}
/** Cell template container that adds the right classes and role. */
export declare class MatCell extends CdkCell {
    constructor(columnDef: CdkColumnDef, elementRef: ElementRef<HTMLElement>);
    static ɵfac: ɵngcc0.ɵɵFactoryDeclaration<MatCell, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDeclaration<MatCell, "mat-cell, td[mat-cell]", never, {}, {}, never>;
}

//# sourceMappingURL=cell.d.ts.map