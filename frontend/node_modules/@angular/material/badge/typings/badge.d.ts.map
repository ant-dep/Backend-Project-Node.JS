{"version":3,"file":"badge.d.ts","sources":["badge.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { AriaDescriber } from '@angular/cdk/a11y';\nimport { ElementRef, NgZone, OnDestroy, Renderer2 } from '@angular/core';\nimport { ThemePalette, CanDisableCtor, CanDisable } from '@angular/material/core';\n/** @docs-private */\nexport declare class MatBadgeBase {\n}\nexport declare const _MatBadgeMixinBase: CanDisableCtor & typeof MatBadgeBase;\nexport declare type MatBadgePosition = 'above after' | 'above before' | 'below before' | 'below after';\nexport declare type MatBadgeSize = 'small' | 'medium' | 'large';\n/** Directive to display a text badge. */\nexport declare class MatBadge extends _MatBadgeMixinBase implements OnDestroy, CanDisable {\n    private _document;\n    private _ngZone;\n    private _elementRef;\n    private _ariaDescriber;\n    /** @breaking-change 8.0.0 Make _renderer a required param and remove _document. */\n    private _renderer?;\n    /** Whether the badge has any content. */\n    _hasContent: boolean;\n    /** The color of the badge. Can be `primary`, `accent`, or `warn`. */\n    color: ThemePalette;\n    private _color;\n    /** Whether the badge should overlap its contents or not */\n    overlap: boolean;\n    private _overlap;\n    /**\n     * Position the badge should reside.\n     * Accepts any combination of 'above'|'below' and 'before'|'after'\n     */\n    position: MatBadgePosition;\n    /** The content for the badge */\n    content: string;\n    private _content;\n    /** Message used to describe the decorated element via aria-describedby */\n    description: string;\n    private _description;\n    /** Size of the badge. Can be 'small', 'medium', or 'large'. */\n    size: MatBadgeSize;\n    /** Whether the badge is hidden. */\n    hidden: boolean;\n    private _hidden;\n    /** Unique id for the badge */\n    _id: number;\n    private _badgeElement;\n    constructor(_document: any, _ngZone: NgZone, _elementRef: ElementRef<HTMLElement>, _ariaDescriber: AriaDescriber, \n    /** @breaking-change 8.0.0 Make _renderer a required param and remove _document. */\n    _renderer?: Renderer2 | undefined);\n    /** Whether the badge is above the host or not */\n    isAbove(): boolean;\n    /** Whether the badge is after the host or not */\n    isAfter(): boolean;\n    ngOnDestroy(): void;\n    /** Injects a span element into the DOM with the content. */\n    private _updateTextContent;\n    /** Creates the badge element */\n    private _createBadgeElement;\n    /** Sets the aria-label property on the element */\n    private _updateHostAriaDescription;\n    /** Adds css theme class given the color to the component host */\n    private _setColor;\n}\n"]}